language: scala
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorNext = vowelsSetIterator.next\n        val vowelsSetIteratorPrev\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextPrevPrev = vowelsSetIteratorNextPrev.prev\n        val\
    \ vowelsSetIteratorNextPrevNext = vowelsSetIteratorNextPrev.next\n        val\
    \ vowelsSetIteratorNextPrevPrevPrev = vowelsSetIteratorNextPrevPrev.prev\n   \
    \     val vowelsSetIteratorNextPrevPrevNext = vowelsSetIteratorNextPrevPrev.next\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrev = vowelsSetIteratorNextPrevPrevNext.prev\n\
    \        val vowelsSetIteratorNextPrevPrevPrevNext = vowelsSetIteratorNextPrevPrevNext.next\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevPrev = vowelsSetIteratorNextPrevPrevPrevPrevNext.prev\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevNext = vowelsSetIteratorNextPrevPrevPrevPrevNext.next\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrev = vowelsSetIteratorNextPrevPrevPrevPrevPrevNext.prev\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevPrevNext = vowelsSetIteratorNextPrevPrevPrevPrevPrevNext.next\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrev = vowelsSetIteratorNextPrevPrevPrevPrevPrevNext.prev\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevNext = vowelsSetIteratorNextPrevPrevPrevPrevPrevNext.next\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrevPrev = vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevNext.prev\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrevNext = vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevNext.next\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrevPrevPrev = vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrevNext.prev\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrev\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq78xpjno.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq78xpjno.scala:20:54\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue prev is not a member of Iterator[String] - did you mean vowelsSetIterator.drop?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq78xpjno.scala:21:62 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev\
    \ is not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpq78xpjno.scala:22:62 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpq78xpjno.scala:30:56 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrevPrevPrevPrevNext\e\
    [0m = vowelsSetIteratorNextPrevPrevPrevPrevNext.next\n\e[31m\e[31m   |\e[0m  \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \    Recursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextPrevPrevPrevPrevNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq78xpjno.scala:32:60\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextPrevPrevPrevPrevPrevNext\e[0m = vowelsSetIteratorNextPrevPrevPrev"
  stdout: ''
  timestamp: 1659799256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.previous\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.previous\n    \
    \    val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextPrevPrev\
    \ = vowelsSetIteratorNextPrev.previous\n        val vowelsSetIteratorNextPrevNext\
    \ = vowelsSetIteratorNextPrev.next\n        val vowelsSetIteratorNextPrevPrevPrev\
    \ = vowelsSetIteratorNextPrevPrev.previous\n        val vowelsSetIteratorNextPrevPrevNext\
    \ = vowelsSetIteratorNextPrevPrev.next\n        val vowelsSetIteratorNextPrevPrevPrevPrev\
    \ = vowelsSetIteratorNextPrevPrevNext.previous\n        val vowelsSetIteratorNextPrevPrevPrevNext\
    \ = vowelsSetIteratorNextPrevPrevNext.next\n        val vowelsSetIteratorNextPrevPrevPrevPrevPrev\
    \ = vowelsSetIteratorNextPrevPrevPrevPrevNext.previous\n        val vowelsSetIteratorNextPrevPrevPrevPrevNext\
    \ = vowelsSetIteratorNextPrevPrevPrevNext.next\n        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrev\
    \ = vowelsSetIteratorNextPrevPrevPrevPrevNext.previous\n        val vowelsSetIteratorNextPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIteratorNextPrevPrevPrevPrevNext.next\n        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrev\
    \ = vowelsSetIteratorNextPrevPrevPrevPrevPrevNext.previous\n        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIteratorNextPrevPrevPrevPrevPrevNext.next\n        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrevPrev\
    \ = vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevNext.previous\n        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevNext.next\n        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrevPrevPrev\
    \ = vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrevNext.previous\n        val\
    \ vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrevPrevNext = vowelsSetIteratorNextPrevPrevPrev\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcygyy0ft.scala:19:54 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.previous\n\e[31m\e[31m   |\e[0m                      \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        value previous is not a member of Iterator[String]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpcygyy0ft.scala:20:62 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.previous\n\e[31m\e[31m   |\e[0m                    \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                            value previous is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpcygyy0ft.scala:21:62 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpcygyy0ft.scala:38:5 ---------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet\
    \ = vowels.toSet;\n        val vowelsSet2 = vowelsSet.toSet;\n        val vowelsSet3\
    \ = vowelsSet2.toSet;\n        val vowelsSet4 = vowelsSet3.toSet;\n        val\
    \ vowelsSet5 = vowelsSet4.toSet;\n        val vowelsSet6 = vowelsSet5.toSet;\n\
    \        val vowelsSet7 = vowelsSet6.toSet;\n        val vowelsSet8 = vowelsSet7.toSet;\n\
    \        val vowelsSet9 = vowelsSet8.toSet;\n        val vowelsSet10 = vowelsSet9.toSet;\n\
    \        val vowelsSet11 = vowelsSet10.toSet;\n        val vowelsSet12 = vowelsSet11.toSet;\n\
    \        val vowelsSet13 = vowelsSet12.toSet;\n        val vowelsSet14 = vowelsSet13.toSet;\n\
    \        val vowelsSet15 = vowelsSet14.toSet;\n        val vowelsSet16 = vowelsSet15.toSet;\n\
    \        val vowelsSet17 = vowelsSet16.toSet;\n        val vowelsSet18 = vowelsSet17.toSet;\n\
    \        val vowelsSet19 = vowelsSet18.toSet;\n        val vowelsSet20 = vowelsSet19.toSet;\n\
    \        val vowelsSet21 = vowelsSet20.toSet;\n        val vowelsSet22 = vowelsSet21.toSet;\n\
    \        val vowelsSet23 = vowelsSet22.toSet;\n        val vowelsSet24 = vowelsSet23.toSet;\n\
    \        val vowelsSet25 = vowelsSet24.toSet;\n        val vowelsSet26 = vowelsSet25.toSet;\n\
    \        val vowelsSet27 = vowelsSet26.toSet;\n        val vowelsSet28 = vowelsSet27.toSet;\n\
    \        val vowelsSet29 = vowelsSet28.toSet;\n        val vowelsSet30 = vowelsSet29.toSet;\n\
    \        val vowelsSet31 = vowelsSet30.toSet;\n        val vowelsSet32 = vowelsSet31.toSet;\n\
    \        val vowelsSet33 = vowelsSet32.toSet;\n        val vowelsSet34 = vowelsSet33.toSet;\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp44ifjfxr.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext\
    \ = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb3y0luw3.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb3y0luw3.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb3y0luw3.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNe"
  stdout: ''
  timestamp: 1659799256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val consonants = word.filter(x => !vowels.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val consonantsCount = word.filter(x => !vowels.contains(x)).length\n     \
    \   val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ consonantsCount = word.filter(x => !vowels.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val consonantsCount\
    \ = word.filter(x => !vowels.contains(x)).length\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val consonantsCount = word.filter(x =>\
    \ !vowels.contains(x)).length\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val consonantsCount = word.filter(x => !vowels.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val consonantsCount = word.filter(x => !vowels.contains(x)).length\n     \
    \   val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ consonantsCount = word.filter(x => !vowels.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val consonantsCount\
    \ = word.filter(x => !vowels.contains(x)).length\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val consonantsCount = word.filter(x =>\
    \ !vowels.contains(x)).length\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val consonantsCount = word.filter(x => !vowels.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val consonantsCount = word.filter(x => !vowels.contains(x)).length\n     \
    \   val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ consonantsCount = word.filter(x => !vowels.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val consonantsCount\
    \ = word.filter(x => !vowels.contains(x)).length\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val consonantsCount = word.filter(x =>\
    \ !vowels.contains(x)).length\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppn317isp.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppn317isp.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppn317isp.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mx\e[0m => !vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmppn317isp.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Na"
  stdout: ''
  timestamp: 1659799257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount =\
    \ consonants.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount =\
    \ consonants.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount =\
    \ consonants.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount =\
    \ consonants.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount =\
    \ consonants.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount =\
    \ consonants.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount =\
    \ consonants.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonant\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdca_sk1k.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdca_sk1k.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdca_sk1k.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdca_sk1k.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdca_sk1k.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33"
  stdout: ''
  timestamp: 1659799257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.filter(_ != word.charAt(word.length - 1))\n\
    \        val vowelsSet3 = vowelsSet.filter(_ != word.charAt(0))\n        val vowelsSet4\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 2))\n        val vowelsSet5\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 3))\n        val vowelsSet6\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 4))\n        val vowelsSet7\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 5))\n        val vowelsSet8\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 6))\n        val vowelsSet9\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 7))\n        val vowelsSet10\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 8))\n        val vowelsSet11\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 9))\n        val vowelsSet12\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 10))\n        val vowelsSet13\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 11))\n        val vowelsSet14\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 12))\n        val vowelsSet15\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 13))\n        val vowelsSet16\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 14))\n        val vowelsSet17\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 15))\n        val vowelsSet18\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 16))\n        val vowelsSet19\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 17))\n        val vowelsSet20\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 18))\n        val vowelsSet21\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 19))\n        val vowelsSet22\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 20))\n        val vowelsSet23\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 21))\n        val vowelsSet24\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 22))\n        val vowelsSet25\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 23))\n        val vowelsSet26\
    \ = vowelsSet.filter(_ != word.charAt(word.length - 24))\n        val vowelsSet27\
    \ = vowelsSet.\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8pckdco3.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp8pckdco3.scala:17:42\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowelsSet.filter(_ != word.charAt(word.length\
    \ - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                    \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types String and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp8pckdco3.scala:18:42 -----------------------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet3\e[0m = vowelsSet.filter(_\
    \ != word.charAt(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                       \
    \                   ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types String and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp8pckdco3.scala:19:42 -----------------------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet4\e[0m = vowelsSet.filter(_\
    \ != word.charAt(word.length - \e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m         \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmp8pckdco3.scala:20:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet5\e[0m = vowelsSet.filter(_\
    \ != word.charAt(word.length - \e[31m3\e[0m))\n\e[31m\e[31m   |\e[0m         \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmp8pckdco3.scala:21:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet6\e[0m = vowelsSet.filter(_\
    \ != word.charAt(word.length - \e[31m4\e[0m))\n\e[31m\e[31m   |\e[0m         \
    \                                "
  stdout: ''
  timestamp: 1659799258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n\
    \        var vowelIndex2 = word.length - 1\n        var vowelIndex3 = word.length\
    \ - 1\n        var vowelIndex4 = word.length - 1\n        var vowelIndex5 = word.length\
    \ - 1\n        var vowelIndex6 = word.length - 1\n        var vowelIndex7 = word.length\
    \ - 1\n        var vowelIndex8 = word.length - 1\n        var vowelIndex9 = word.length\
    \ - 1\n        var vowelIndex10 = word.length - 1\n        var vowelIndex11 =\
    \ word.length - 1\n        var vowelIndex12 = word.length - 1\n        var vowelIndex13\
    \ = word.length - 1\n        var vowelIndex14 = word.length - 1\n        var vowelIndex15\
    \ = word.length - 1\n        var vowelIndex16 = word.length - 1\n        var vowelIndex17\
    \ = word.length - 1\n        var vowelIndex18 = word.length - 1\n        var vowelIndex19\
    \ = word.length - 1\n        var vowelIndex20 = word.length - 1\n        var vowelIndex21\
    \ = word.length - 1\n        var vowelIndex22 = word.length - 1\n        var vowelIndex23\
    \ = word.length - 1\n        var vowelIndex24 = word.length - 1\n        var vowelIndex25\
    \ = word.length - 1\n        var vowelIndex26 = word.length - 1\n        var vowelIndex27\
    \ = word.length - 1\n        var vowelIndex28 = word.length - 1\n        var vowelIndex29\
    \ = word.length - 1\n        var vowelIndex30 = word.length - 1\n        var vowelIndex31\
    \ = word.length - 1\n        var vowelIndex32 = word.length - 1\n        var vowelIndex33\
    \ = word.length - 1\n        var vowelIndex34 = word.length - 1\n        var vowelIndex35\
    \ = word.length - 1\n        var vowelIndex36 = word.length - 1\n        var vowelIndex37\
    \ = word.length - 1\n        var vowelIndex38 = word.length - 1\n        var vowelIndex39\
    \ = word.length - 1\n        var vowelIndex40 = word.length - 1\n        var vowelIndex41\
    \ = word.length - 1\n        var vowelIndex42 = word.length - 1\n        var vowelIndex43\
    \ = word.length - 1\n        var vowelIndex44 = word.length - 1\n        var vowelIndex45\
    \ = word.length - 1\n        var vowelIndex46 = word.length - 1\n        var vowelIndex47\
    \ = word.length - 1\n        var vowelIndex48 = word.length - 1\n        var vowelIndex49\
    \ = word.length - 1\n        var vowelIndex50 = word.length - 1\n        var vowelIndex51\
    \ = word.length - 1\n        var vowelIndex52 = word.length - 1\n        var vowelIndex53\
    \ = word.length - 1\n        var vowelIndex54 = word.length - 1\n        var vowelIndex55\
    \ = word.length - 1\n        var vowelIndex56 = word.length - 1\n        var vowelIndex57\
    \ = word.length\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpduiyoyq8.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorIterator\
    \ = vowelsSetIterator.iterator\n        val vowelsSetIteratorIteratorSize = vowelsSetIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIterator = vowelsSetIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIterator = vowelsSetIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIterator = vowelsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = vowelsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n \
    \       val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8o03i_j2.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8o03i_j2.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e[0m\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp8o03i_j2.scala:29:76 ------------------------\e[0m\e[0m\n\
    \e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = vowelsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: vowelsSetIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8o03i_j2.scala:33:100\
    \ -----------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0"
  stdout: ''
  timestamp: 1659799255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCount\
    \ = vowels.toList\n        val vowelsCount = vowelsCount.toSet\n        val vowelsCount\
    \ = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n        val\
    \ vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowel\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg8vk8jaf.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg8vk8jaf.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg8vk8jaf.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg8vk8jaf.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg8vk8jaf.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defi"
  stdout: ''
  timestamp: 1659799256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.indexOf(\"a\")\n        val vowelsIndex2 = word.indexOf(\"\
    e\")\n        val vowelsIndex3 = word.indexOf(\"i\")\n        val vowelsIndex4\
    \ = word.indexOf(\"o\")\n        val vowelsIndex5 = word.indexOf(\"u\")\n    \
    \    val vowelsIndex6 = word.indexOf(\"A\")\n        val vowelsIndex7 = word.indexOf(\"\
    E\")\n        val vowelsIndex8 = word.indexOf(\"I\")\n        val vowelsIndex9\
    \ = word.indexOf(\"O\")\n        val vowelsIndex10 = word.indexOf(\"U\")\n   \
    \     val vowelsIndex11 = word.indexOf(\"a\")\n        val vowelsIndex12 = word.indexOf(\"\
    e\")\n        val vowelsIndex13 = word.indexOf(\"i\")\n        val vowelsIndex14\
    \ = word.indexOf(\"o\")\n        val vowelsIndex15 = word.indexOf(\"u\")\n   \
    \     val vowelsIndex16 = word.indexOf(\"A\")\n        val vowelsIndex17 = word.indexOf(\"\
    E\")\n        val vowelsIndex18 = word.indexOf(\"I\")\n        val vowelsIndex19\
    \ = word.indexOf(\"O\")\n        val vowelsIndex20 = word.indexOf(\"U\")\n   \
    \     val vowelsIndex21 = word.indexOf(\"a\")\n        val vowelsIndex22 = word.indexOf(\"\
    e\")\n        val vowelsIndex23 = word.indexOf(\"i\")\n        val vowelsIndex24\
    \ = word.indexOf(\"o\")\n        val vowelsIndex25 = word.indexOf(\"u\")\n   \
    \     val vowelsIndex26 = word.indexOf(\"A\")\n        val vowelsIndex27 = word.indexOf(\"\
    E\")\n        val vowelsIndex28 = word.indexOf(\"I\")\n        val vowelsIndex29\
    \ = word.indexOf(\"O\")\n        val vowelsIndex30 = word.indexOf(\"U\")\n   \
    \     val vowelsIndex31 = word.indexOf(\"a\")\n        val vowelsIndex32 = word.indexOf(\"\
    e\")\n        val vowelsIndex33 = word.indexOf(\"i\")\n        val vowelsIndex34\
    \ = word.indexOf(\"o\")\n        val vowelsIndex35 = word.indexOf(\"u\")\n   \
    \     val vowelsIndex36 = word.indexOf(\"A\")\n        val vowelsIndex37 = word.indexOf(\"\
    E\")\n        val vowelsIndex38 = word.indexOf(\"I\")\n        val vowels\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp21obhf5b.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp21obhf5b.scala:56:5 ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowelsBefore = vowels.toList\n        val vowelsAfter = vowels.toList.reverse\n\
    \        val vowelsBetween = vowelsBefore.zip(vowelsAfter).filter(_._1.toLowerCase\
    \ == _._2.toLowerCase).toList\n        val consonantsBefore = consonants.toList\n\
    \        val consonantsAfter = consonants.toList.reverse\n        val consonantsBetween\
    \ = consonantsBefore.zip(consonantsAfter).filter(_._1.toLowerCase == _._2.toLowerCase).toList\n\
    \        val vowelsBetweenConsonants = vowelsBetween.zip(consonantsBetween).filter(_._1.toLowerCase\
    \ == _._2.toLowerCase).toList\n        val vowelsBetweenConsonantsBefore = vowelsBetweenConsonants.filter(_._1.toLowerCase\
    \ != _._2.toLowerCase).toList\n        val vowelsBetweenConsonantsAfter = vowelsBetweenConsonants.filter(_._1.toLowerCase\
    \ == _._2.toLowerCase).toList\n        val vowelsBetweenConsonantsBetween = vowelsBetweenConsonantsBefore.zip(vowelsBetweenConsonantsAfter).filter(_._1.toLowerCase\
    \ == _._2.toLowerCase).toList\n        val vowelsBetweenConsonantsBetweenConsonants\
    \ = vowelsBetweenConsonantsBetween.toList.filter(_._1.toLowerCase == _._2.toLowerCase).toList\n\
    \        val vowelsBetweenConsonantsBetweenConsonantsBefore = vowelsBetweenConsonantsBetweenConsonants.filter(_._1.toLowerCase\
    \ != _._2.toLowerCase).toList\n        val vowelsBetweenConsonantsBetweenConsonantsAfter\
    \ = vowelsBetweenConsonantsBetweenConsonants.filter(_._1.toLowerCase == _._2.toLowerCase).toList\n\
    \        val vowelsBetweenConsonantsBetweenConsonantsBetween = vowelsBetweenConsonantsBetweenConsonantsBefore.zip(vowelsBetweenConsonantsBetweenConsonantsAfter).filter(_._1.toLowerCase\
    \ == _._2.toLowerCase).toList\n        val vowelsBetweenConsonantsBetweenConsonantsBetweenConsonants\
    \ = vowelsBetweenConson\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxv454cs.scala:19:67 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsBetween\e[0m = vowelsBefore.zip(vowelsAfter).filter(_._1.toLowerCase\
    \ == _._2.toLowerCase).toList\n\e[31m\e[31m   |\e[0m                         \
    \                                        ^^^^\e[0m\n\e[31m   |\e[0m          \
    \                            value _1 is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpqxv454cs.scala:22:79 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantsBetween\e[0m =\
    \ consonantsBefore.zip(consonantsAfter).filter(_._1.toLowerCase == _._2.toLowerCase).toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                     ^^^^\e[0m\n\e[31m   |\e[0m                             \
    \         value _1 is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpqxv454cs.scala:26:121 -----------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsBetweenConsonantsBetween\e[0m = vowelsBetweenConsonantsBefore.zip(vowelsBetweenConsonantsAfter).filter(_._1.toLowerCase\
    \ == _._2.toLowerCase).toList\n\e[31m\e[31m   |\e[0m                         \
    \                                                                            \
    \               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value\
    \ toLowerCase is not a member of (String, String)\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpqxv454cs.scala:27:105 -----------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsBetweenConsonantsBetweenConsonants\e\
    [0m = vowelsBetweenConsonantsBetween.toList.filter(_._1.toLowerCase == _._2.toLowerCase).toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   value toLowerCase is not a member of (String, String)\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxv454cs.scala:28:114 -----------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsBetweenConso"
  stdout: ''
  timestamp: 1659799256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsCount =\
    \ word.filter(c => vowels.contains(c)).size\n        var vowelsCount2 = word.filter(c\
    \ => vowels.contains(c)).size\n        var vowelsCount3 = word.filter(c => vowels.contains(c)).size\n\
    \        var vowelsCount4 = word.filter(c => vowels.contains(c)).size\n      \
    \  var vowelsCount5 = word.filter(c => vowels.contains(c)).size\n        var vowelsCount6\
    \ = word.filter(c => vowels.contains(c)).size\n        var vowelsCount7 = word.filter(c\
    \ => vowels.contains(c)).size\n        var vowelsCount8 = word.filter(c => vowels.contains(c)).size\n\
    \        var vowelsCount9 = word.filter(c => vowels.contains(c)).size\n      \
    \  var vowelsCount10 = word.filter(c => vowels.contains(c)).size\n        var\
    \ vowelsCount11 = word.filter(c => vowels.contains(c)).size\n        var vowelsCount12\
    \ = word.filter(c => vowels.contains(c)).size\n        var vowelsCount13 = word.filter(c\
    \ => vowels.contains(c)).size\n        var vowelsCount14 = word.filter(c => vowels.contains(c)).size\n\
    \        var vowelsCount15 = word.filter(c => vowels.contains(c)).size\n     \
    \   var vowelsCount16 = word.filter(c => vowels.contains(c)).size\n        var\
    \ vowelsCount17 = word.filter(c => vowels.contains(c)).size\n        var vowelsCount18\
    \ = word.filter(c => vowels.contains(c)).size\n        var vowelsCount19 = word.filter(c\
    \ => vowels.contains(c)).size\n        var vowelsCount20 = word.filter(c => vowels.contains(c)).size\n\
    \        var vowelsCount21 = word.filter(c => vowels.contains(c)).size\n     \
    \   var vowelsCount22 = word.filter(c => vowels.contains(c)).size\n        var\
    \ vowelsCount23 = word.filter(c => vowels.contains(c)).size\n        var vowelsCount24\
    \ = word.filter(c => vowels.contains(c)).size\n        var vowelsCount25 = word.filter(c\
    \ => vowels.contains(c)).size\n        var vowelsCount26 = word.filter(c => vowels.contains(c)).size\n\
    \        var vowelsCount27 = word.filter(c => vowels.contains(c)).size\n     \
    \   var vowelsCount28 = word.filter(c => vowels.contains(c)).size\n        var\
    \ vowelsCount29 = word.filter(c => vowels.contains(c)).size\n        var vowelsCount30\
    \ = word.filter(c => vowels.contains(c)).size\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl4xmzxnl.scala:16:59\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount\e\
    [0m = word.filter(\e[36mc\e[0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e\
    [0m                                                           ^\e[0m\n\e[31m \
    \  |\e[0m                                                    Found:    (c : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl4xmzxnl.scala:17:60\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount2\e\
    [0m = word.filter(\e[36mc\e[0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (c : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl4xmzxnl.scala:18:60\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount3\e\
    [0m = word.filter(\e[36mc\e[0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (c : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl4xmzxnl.scala:19:60\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount4\e\
    [0m = word.filter(\e[36mc\e[0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (c : Char)\n\
    \e[31m   |\e[0m               "
  stdout: ''
  timestamp: 1659799259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val consonants = Set(\"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).size\n        val vowelsCount = vowelsCount\
    \ + consonantsCount\n        val vowelsCount = vowelsCount + 1\n        val vowelsIndex\
    \ = word.lastIndexWhere(x => vowels.contains(x))\n        val consonantsIndex\
    \ = word.lastIndexWhere(x => consonants.contains(x))\n        val vowelsIndex\
    \ = vowelsIndex + vowelsCount\n        val consonantsIndex = consonantsIndex +\
    \ consonantsCount\n        val vowelsIndex = vowelsIndex + vowelsCount\n     \
    \   val consonantsIndex = consonantsIndex + consonantsCount\n        val vowelsIndex\
    \ = vowelsIndex + vowelsCount\n        val consonantsIndex = consonantsIndex +\
    \ consonantsCount\n        val vowelsIndex = vowelsIndex + vowelsCount\n     \
    \   val consonantsIndex = consonantsIndex + consonantsCount\n        val vowelsIndex\
    \ = vowelsIndex + vowelsCount\n        val consonantsIndex = consonantsIndex +\
    \ consonantsCount\n        val vowelsIndex = vowelsIndex + vowelsCount\n     \
    \   val consonantsIndex = consonantsIndex + consonantsCount\n        val vowelsIndex\
    \ = vowelsIndex + vowelsCount\n        val consonantsIndex = consonantsIndex +\
    \ consonantsCount\n        val vowelsIndex = vowelsIndex + vowelsCount\n     \
    \   val consonantsIndex = consonantsIndex + consonantsCount\n        val vowelsIndex\
    \ = vowelsIndex + vowelsCount\n        val consonantsIndex = consonantsIndex +\
    \ consonantsCount\n        val vowelsIndex = vowelsIndex + vowelsCount\n     \
    \   val consonantsIndex = consonantsIndex + consonantsCount\n        val vowelsIndex\
    \ = vowelsIndex + vowelsCount\n        val consonantsIndex = consonantsIndex +\
    \ consonantsCount\n        val vowelsIndex = vowelsIndex + vowelsCount\n     \
    \   val consonantsIndex = consonantsIndex + consonantsCount\n        val vowelsIndex\
    \ = vowelsIndex + vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuomievvz.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuomievvz.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuomievvz.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex + vowelsCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuomievvz.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = consonantsIndex\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpuomievvz.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex\
    \ + vowelsCount\n\e[31m\e[31"
  stdout: ''
  timestamp: 1659799257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0pn_suby.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0pn_suby.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIterator.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pn_suby.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pn_suby.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1659799256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowels.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5wi86asy.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5wi86asy.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIterator.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5wi86asy.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5wi86asy.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1659799256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n\
    \        var vowelIndex2 = -1\n        var vowelIndex3 = -1\n        var vowelIndex4\
    \ = -1\n        var vowelIndex5 = -1\n        var vowelIndex6 = -1\n        var\
    \ vowelIndex7 = -1\n        var vowelIndex8 = -1\n        var vowelIndex9 = -1\n\
    \        var vowelIndex10 = -1\n        var vowelIndex11 = -1\n        var vowelIndex12\
    \ = -1\n        var vowelIndex13 = -1\n        var vowelIndex14 = -1\n       \
    \ var vowelIndex15 = -1\n        var vowelIndex16 = -1\n        var vowelIndex17\
    \ = -1\n        var vowelIndex18 = -1\n        var vowelIndex19 = -1\n       \
    \ var vowelIndex20 = -1\n        var vowelIndex21 = -1\n        var vowelIndex22\
    \ = -1\n        var vowelIndex23 = -1\n        var vowelIndex24 = -1\n       \
    \ var vowelIndex25 = -1\n        var vowelIndex26 = -1\n        var vowelIndex27\
    \ = -1\n        var vowelIndex28 = -1\n        var vowelIndex29 = -1\n       \
    \ var vowelIndex30 = -1\n        var vowelIndex31 = -1\n        var vowelIndex32\
    \ = -1\n        var vowelIndex33 = -1\n        var vowelIndex34 = -1\n       \
    \ var vowelIndex35 = -1\n        var vowelIndex36 = -1\n        var vowelIndex37\
    \ = -1\n        var vowelIndex38 = -1\n        var vowelIndex39 = -1\n       \
    \ var vowelIndex40 = -1\n        var vowelIndex41 = -1\n        var vowelIndex42\
    \ = -1\n        var vowelIndex43 = -1\n        var vowelIndex44 = -1\n       \
    \ var vowelIndex45 = -1\n        var vowelIndex46 = -1\n        var vowelIndex47\
    \ = -1\n        var vowelIndex48 = -1\n        var vowelIndex49 = -1\n       \
    \ var vowelIndex50 = -1\n        var vowelIndex51 = -1\n        var vowelIndex52\
    \ = -1\n        var vowelIndex53 = -1\n        var vowelIndex54 = -1\n       \
    \ var vowelIndex55 = -1\n        var vowelIndex56 = -1\n        var vowelIndex57\
    \ = -1\n        var vowelIndex58 = -1\n        var vowelIndex59 = -1\n       \
    \ var vowelIndex60 = -1\n        var vowelIndex61 = -1\n        var vowelIndex62\
    \ = -1\n        var vowelIndex63 = -1\n        var vowelIndex64 = -1\n       \
    \ var vowelIndex65 = -1\n        var vowelIndex66 = -1\n        var vowelIndex67\
    \ = -1\n        var vowelIndex68 = -1\n        var vowelIndex69 = -1\n       \
    \ var vowelIndex70 = -1\n        var vowelIndex71 = -1\n        var vowelIndex72\
    \ = -1\n        var vowelIndex73 = -1\n        var vowelIndex74 = -1\n       \
    \ var vowelIndex75 = -1\n        var vowelIndex76 = -1\n        var vowelIndex77\
    \ = -1\n        var vowelIndex78 = -1\n        var vowelIndex79 = -1\n       \
    \ var vowelIndex80 = -1\n\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfcwkxmpx.scala:97:5\
    \ ---------------------\e[0m\e[0m\n\e[31m97 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val consonants\
    \ = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    );\n        val vowelsSet = vowels.toSet;\n        val consonantsSet = consonants.toSet;\n\
    \        val vowelsSet2 = vowels.toSet;\n        val consonantsSet2 = consonants.toSet;\n\
    \        val vowelsSet3 = vowels.toSet;\n        val consonantsSet3 = consonants.toSet;\n\
    \        val vowelsSet4 = vowels.toSet;\n        val consonantsSet4 = consonants.toSet;\n\
    \        val vowelsSet5 = vowels.toSet;\n        val consonantsSet5 = consonants.toSet;\n\
    \        val vowelsSet6 = vowels.toSet;\n        val consonantsSet6 = consonants.toSet;\n\
    \        val vowelsSet7 = vowels.toSet;\n        val consonantsSet7 = consonants.toSet;\n\
    \        val vowelsSet8 = vowels.toSet;\n        val consonantsSet8 = consonants.toSet;\n\
    \        val vowelsSet9 = vowels.toSet;\n        val consonantsSet9 = consonants.toSet;\n\
    \        val vowelsSet10 = vowels.toSet;\n        val consonantsSet10 = consonants.toSet;\n\
    \        val vowelsSet11 = vowels.toSet;\n        val consonantsSet11 = consonants.toSet;\n\
    \        val vowelsSet12 = vowels.toSet;\n        val consonantsSet12 = consonants.toSet;\n\
    \        val vowelsSet13 = vowels.toSet;\n        val consonantsSet13 = consonants.toSet;\n\
    \        val vowelsSet14 = vowels.toSet;\n        val consonantsSet14 = consonants.toSet;\n\
    \        val vowelsSet15 = vowels.toSet;\n        val consonantsSet15 = consonants.toSet;\n\
    \        val vowelsSet16 = vowels.toSet;\n        val consonantsSet16 = consonants.toSet;\n\
    \        val vowelsSet17 = vowels.toSet;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7p95vdxz.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.prev\n     \
    \   val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3i405iuv.scala:19:54 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp3i405iuv.scala:20:62 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp3i405iuv.scala:21:62 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp3i405iuv.scala:35:72 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.prev\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Not found: vowelsSetIteratorNextNextNextNextNextNextNextNextNext\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3i405iuv.scala:36:76\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \e[31m\e[31m   |\e[0m                                             "
  stdout: ''
  timestamp: 1659799257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet\
    \ = vowels.toSet\n        val vowelsSet2 = vowelsSet.filter(_ != word.charAt(word.length-1))\n\
    \        val vowelsSet3 = vowelsSet.filter(_ != word.charAt(word.length-2))\n\
    \        val vowelsSet4 = vowelsSet.filter(_ != word.charAt(word.length-3))\n\
    \        val vowelsSet5 = vowelsSet.filter(_ != word.charAt(word.length-4))\n\
    \        val vowelsSet6 = vowelsSet.filter(_ != word.charAt(word.length-5))\n\
    \        val vowelsSet7 = vowelsSet.filter(_ != word.charAt(word.length-6))\n\
    \        val vowelsSet8 = vowelsSet.filter(_ != word.charAt(word.length-7))\n\
    \        val vowelsSet9 = vowelsSet.filter(_ != word.charAt(word.length-8))\n\
    \        val vowelsSet10 = vowelsSet.filter(_ != word.charAt(word.length-9))\n\
    \        val vowelsSet11 = vowelsSet.filter(_ != word.charAt(word.length-10))\n\
    \        val vowelsSet12 = vowelsSet.filter(_ != word.charAt(word.length-11))\n\
    \        val vowelsSet13 = vowelsSet.filter(_ != word.charAt(word.length-12))\n\
    \        val vowelsSet14 = vowelsSet.filter(_ != word.charAt(word.length-13))\n\
    \        val vowelsSet15 = vowelsSet.filter(_ != word.charAt(word.length-14))\n\
    \        val vowelsSet16 = vowelsSet.filter(_ != word.charAt(word.length-15))\n\
    \        val vowelsSet17 = vowelsSet.filter(_ != word.charAt(word.length-16))\n\
    \        val vowelsSet18 = vowelsSet.filter(_ != word.charAt(word.length-17))\n\
    \        val vowelsSet19 = vowelsSet.filter(_ != word.charAt(word.length-18))\n\
    \        val vowelsSet20 = vowelsSet.filter(_ != word.charAt(word.length-19))\n\
    \        val vowelsSet21 = vowelsSet.filter(_ != word.charAt(word.length-20))\n\
    \        val vowelsSet22 = vowelsSet.filter(_ != word.charAt(word.length-21))\n\
    \        val vowelsSet23 = vowelsSet.filter(_ != word.charAt(word.length-22))\n\
    \        val vowelsSet24 = vowelsSet.filter(_ != word.charAt(word.length-23))\n\
    \        val vowelsSet25 = vowelsSet.filter(_ != word.charAt(word.length-24))\n\
    \        val vowelsSet26 = vowelsSet.filter(_ != word.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6_soigb3.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp6_soigb3.scala:17:42\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowelsSet.filter(_ != word.charAt(word.length-\e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp6_soigb3.scala:18:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet3\e[0m = vowelsSet.filter(_\
    \ != word.charAt(word.length-\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmp6_soigb3.scala:19:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet4\e[0m = vowelsSet.filter(_\
    \ != word.charAt(word.length-\e[31m3\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmp6_soigb3.scala:20:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet5\e[0m = vowelsSet.filter(_\
    \ != word.charAt(word.length-\e[31m4\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmp6_soigb3.scala:21:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet6\e[0m = vowelsSet.filter(_\
    \ != word.charAt(word.length-\e[31m5\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                    "
  stdout: ''
  timestamp: 1659799258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgda95_e1.scala:52:25 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgda95_e1.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(_.isLetter).map(_.toLowerCase\
    \ ).toSet\n        val vowelsCount = vowelsCount.filter(_ != \"u\")\n        val\
    \ vowelsCount = vowelsCount.filter(_ != \"e\")\n        val vowelsCount = vowelsCount.filter(_\
    \ != \"i\")\n        val vowelsCount = vowelsCount.filter(_ != \"o\")\n      \
    \  val vowelsCount = vowelsCount.filter(_ != \"a\")\n        val vowelsCount =\
    \ vowelsCount.filter(_ != \"e\")\n        val vowelsCount = vowelsCount.filter(_\
    \ != \"i\")\n        val vowelsCount = vowelsCount.filter(_ != \"o\")\n      \
    \  val vowelsCount = vowelsCount.filter(_ != \"u\")\n        val vowelsCount =\
    \ vowelsCount.filter(_ != \"a\")\n        val vowelsCount = vowelsCount.filter(_\
    \ != \"e\")\n        val vowelsCount = vowelsCount.filter(_ != \"i\")\n      \
    \  val vowelsCount = vowelsCount.filter(_ != \"o\")\n        val vowelsCount =\
    \ vowelsCount.filter(_ != \"u\")\n        val vowelsCount = vowelsCount.filter(_\
    \ != \"a\")\n        val vowelsCount = vowelsCount.filter(_ != \"e\")\n      \
    \  val vowelsCount = vowelsCount.filter(_ != \"i\")\n        val vowelsCount =\
    \ vowelsCount.filter(_ != \"o\")\n        val vowelsCount = vowelsCount.filter(_\
    \ != \"u\")\n        val vowelsCount = vowelsCount.filter(_ != \"a\")\n      \
    \  val vowelsCount = vowelsCount.filter(_ != \"e\")\n        val vowelsCount =\
    \ vowelsCount.filter(_ != \"i\")\n        val vowelsCount = vowelsCount.filter(_\
    \ != \"o\")\n        val vowelsCount = vowelsCount.filter(_ != \"u\")\n      \
    \  val vowelsCount = vowelsCount.filter(_ != \"a\")\n        val vowelsCount =\
    \ vowelsCount.filter(_ != \"e\")\n        val vowelsCount = vowelsCount.filter(_\
    \ != \"i\")\n        val vowelsCount = vowelsCount.filter(_ != \"o\")\n      \
    \  val vowelsCount = vowelsCount.filter(_ != \"u\")\n        val vowelsCount =\
    \ vowelsCount.filter(_ != \"a\")\n        val vowelsCount = vowelsCount.filter(_\
    \ != \"e\")\n        val vowelsCount = vowelsCount.filter(_ != \"i\")\n      \
    \  val vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpazvpdh_5.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpazvpdh_5.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount.filter(_ != \e[31m\"u\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpazvpdh_5.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.filter(_\
    \ != \e[31m\"e\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpazvpdh_5.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.filter(_\
    \ != \e[31m\"i\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpazvpdh_5.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.filter(_\
    \ != \e[31m\"o\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same"
  stdout: ''
  timestamp: 1659799256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val consonants = word.filter(c => !vowels.contains(c))\n\
    \        val consonantsCount = consonants.size\n        val vowelsCount = consonantsCount\
    \ - vowelsCount\n        val vowelsIndex = consonants.indexOfLast(vowels)\n  \
    \      val vowelsIndex = consonants.lastIndexOf(vowels)\n        val vowelsIndex\
    \ = consonants.lastIndexOfLast(vowels)\n        val vowelsIndex = consonants.lastIndexOfFirst(vowels)\n\
    \        val vowelsIndex = consonants.indexOfFirst(vowels)\n        val vowelsIndex\
    \ = consonants.indexOf(vowels)\n        val vowelsIndex = consonants.indexOf(vowels)\n\
    \        val vowelsIndex = consonants.indexOfFirst(vowels)\n        val vowelsIndex\
    \ = consonants.indexOfLast(vowels)\n        val vowelsIndex = consonants.lastIndexOfFirst(vowels)\n\
    \        val vowelsIndex = consonants.lastIndexOfLast(vowels)\n        val vowelsIndex\
    \ = consonants.indexOfLast(vowels)\n        val vowelsIndex = consonants.indexOfFirst(vowels)\n\
    \        val vowelsIndex = consonants.indexOfLast(vowels)\n        val vowelsIndex\
    \ = consonants.indexOfFirst(vowels)\n        val vowelsIndex = consonants.indexOfLast(vowels)\n\
    \        val vowelsIndex = consonants.indexOfFirst(vowels)\n        val vowelsIndex\
    \ = consonants.indexOfLast(vowels)\n        val vowelsIndex = consonants.indexOfFirst(vowels)\n\
    \        val vowelsIndex = consonants.indexOfLast(vowels)\n        val vowelsIndex\
    \ = consonants.indexOfFirst(vowels)\n        val vowelsIndex = consonants.indexOfLast(vowels)\n\
    \        val vowelsIndex = consonants.indexOfFirst(vowels)\n        val vowelsIndex\
    \ = consonants.indexOfLast(vowels)\n        val vowelsIndex = consonants.indexOfFirst(vowels)\n\
    \        val vowelsIndex = consonants.indexOfLast(vowels)\n        val vowelsIndex\
    \ = consonants.indexOfFirst(vowels)\n        val vowelsIndex = consonants.indexOfLast(vowels)\n\
    \        val vowelsIndex = consonants.indexOfFirst(vowels)\n        val vowels\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2efhh71d.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2efhh71d.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = consonantsCount - vowelsCount\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2efhh71d.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = consonants.lastIndexOf(vowels)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2efhh71d.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = consonants.lastIndexOfLast(vowels)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2efhh71d.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = consonants.lastIndexOfFirst(vowels)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same gro"
  stdout: ''
  timestamp: 1659799257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy55p44x9.scala:22:62 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpy55p44x9.scala:34:64 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpy55p44x9.scala:36:68\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy55p44x9.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).size\n       \
    \ val vowelsCount = word.filter(c => vowels.contains(c)).size\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).size\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).size\n       \
    \ val vowelsCount = word.filter(c => vowels.contains(c)).size\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).size\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).size\n       \
    \ val vowelsCount = word.filter(c => vowels.contains(c)).size\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).size\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).size\n       \
    \ val vowelsCount = word.filter(c => vowels.contains(c)).size\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).size\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).size\n       \
    \ val vowelsCount = word.filter(c => vowels.contains(c)).size\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).size\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).size\n       \
    \ val vowelsCount = word.filter(c => vowels.contains(c)).size\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).size\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy7axx7ju.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mc\e[0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy7axx7ju.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mc\e\
    [0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy7axx7ju.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mc\e\
    [0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy7axx7ju.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mc\e\
    [0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy7axx7ju.scala"
  stdout: ''
  timestamp: 1659799269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount2 = word.filter(x => vowels.contains(x)).length\n\
    \        var vowelsCount3 = word.filter(x => vowels.contains(x)).length\n    \
    \    var vowelsCount4 = word.filter(x => vowels.contains(x)).length\n        var\
    \ vowelsCount5 = word.filter(x => vowels.contains(x)).length\n        var vowelsCount6\
    \ = word.filter(x => vowels.contains(x)).length\n        var vowelsCount7 = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount8 = word.filter(x => vowels.contains(x)).length\n\
    \        var vowelsCount9 = word.filter(x => vowels.contains(x)).length\n    \
    \    var vowelsCount10 = word.filter(x => vowels.contains(x)).length\n       \
    \ var vowelsCount11 = word.filter(x => vowels.contains(x)).length\n        var\
    \ vowelsCount12 = word.filter(x => vowels.contains(x)).length\n        var vowelsCount13\
    \ = word.filter(x => vowels.contains(x)).length\n        var vowelsCount14 = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount15 = word.filter(x =>\
    \ vowels.contains(x)).length\n        var vowelsCount16 = word.filter(x => vowels.contains(x)).length\n\
    \        var vowelsCount17 = word.filter(x => vowels.contains(x)).length\n   \
    \     var vowelsCount18 = word.filter(x => vowels.contains(x)).length\n      \
    \  var vowelsCount19 = word.filter(x => vowels.contains(x)).length\n        var\
    \ vowelsCount20 = word.filter(x => vowels.contains(x)).length\n        var vowelsCount21\
    \ = word.filter(x => vowels.contains(x)).length\n        var vowelsCount22 = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount23 = word.filter(x =>\
    \ vowels.contains(x)).length\n        var vowelsCount24 = word.filter(x => vowels.contains(x)).length\n\
    \        var vowelsCount25 = word.filter(x => vowels.contains(x)).length\n   \
    \     var vowelsCount26 = word.filter(x => vowels.contains(x)).length\n      \
    \  var vowelsCount27 = word.filter(x => vowels.contains(x)).length\n        var\
    \ vowelsCount28 = word.filter(x => vowels.contains(x)).length\n        var vowelsCount29\
    \ = word.filter(x => vowels.contains(x)).length\n        var vowelsCount30 = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount31 = word.filter(x =>\
    \ vowels.contains(x)).length\n        var vowelsCount32 = word.filter(x => vowels.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_ojx4u0.scala:16:59\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e\
    [0m                                                           ^\e[0m\n\e[31m \
    \  |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_ojx4u0.scala:17:60\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount2\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_ojx4u0.scala:18:60\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount3\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_ojx4u0.scala:19:60\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount4\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m       "
  stdout: ''
  timestamp: 1659799272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).length\n        val vowelsCount =\
    \ word.filter(x => vowels.contains(x)).length\n        val consonantsCount = word.filter(x\
    \ => consonants.contains(x)).length\n        val vowelsCount = word.filter(x =>\
    \ vowels.contains(x)).length\n        val consonantsCount = word.filter(x => consonants.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val consonantsCount = word.filter(x => consonants.contains(x)).length\n  \
    \      val vowelsCount = word.filter(x => vowels.contains(x)).length\n       \
    \ val consonantsCount = word.filter(x => consonants.contains(x)).length\n    \
    \    val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ consonantsCount = word.filter(x => consonants.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).length\n        val vowelsCount =\
    \ word.filter(x => vowels.contains(x)).length\n        val consonantsCount = word.filter(x\
    \ => consonants.contains(x)).length\n        val vowelsCount = word.filter(x =>\
    \ vowels.contains(x)).length\n        val consonantsCount = word.filter(x => consonants.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val consonantsCount = word.filter(x => consonants.contains(x)).length\n  \
    \      val vowelsCount = word.filter(x => vowels.contains(x)).length\n       \
    \ val consonantsCount = word.filter(x => consonants.contains(x)).length\n    \
    \    val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ consonantsCount = word.filter(x => consonants.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).length\n        val vowelsCount =\
    \ word.filter(x => vowels.contains(x)).length\n        val consonantsCount = word.filter(x\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaws8ra8y.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaws8ra8y.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaws8ra8y.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mx\e[0m => consonants.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpaws8ra8y.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaws8ra8y.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mx\e[0m => consonants.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659799269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.filter(_ != \"a\")\n        val vowelsSet3\
    \ = vowelsSet.filter(_ != \"e\")\n        val vowelsSet4 = vowelsSet.filter(_\
    \ != \"i\")\n        val vowelsSet5 = vowelsSet.filter(_ != \"o\")\n        val\
    \ vowelsSet6 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet7 = vowelsSet.filter(_\
    \ != \"A\")\n        val vowelsSet8 = vowelsSet.filter(_ != \"E\")\n        val\
    \ vowelsSet9 = vowelsSet.filter(_ != \"I\")\n        val vowelsSet10 = vowelsSet.filter(_\
    \ != \"O\")\n        val vowelsSet11 = vowelsSet.filter(_ != \"U\")\n        val\
    \ vowelsSet12 = vowelsSet.filter(_ != \"a\")\n        val vowelsSet13 = vowelsSet.filter(_\
    \ != \"e\")\n        val vowelsSet14 = vowelsSet.filter(_ != \"i\")\n        val\
    \ vowelsSet15 = vowelsSet.filter(_ != \"o\")\n        val vowelsSet16 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet17 = vowelsSet.filter(_ != \"A\")\n        val\
    \ vowelsSet18 = vowelsSet.filter(_ != \"E\")\n        val vowelsSet19 = vowelsSet.filter(_\
    \ != \"I\")\n        val vowelsSet20 = vowelsSet.filter(_ != \"O\")\n        val\
    \ vowelsSet21 = vowelsSet.filter(_ != \"U\")\n        val vowelsSet22 = vowelsSet.filter(_\
    \ != \"a\")\n        val vowelsSet23 = vowelsSet.filter(_ != \"e\")\n        val\
    \ vowelsSet24 = vowelsSet.filter(_ != \"i\")\n        val vowelsSet25 = vowelsSet.filter(_\
    \ != \"o\")\n        val vowelsSet26 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet27 = vowelsSet.filter(_ != \"A\")\n        val vowelsSet28 = vowelsSet.filter(_\
    \ != \"E\")\n        val vowelsSet29 = vowelsSet.filter(_ != \"I\")\n        val\
    \ vowelsSet30 = vowelsSet.filter(_ != \"O\")\n        val vowelsSet31 = vowelsSet.filter(_\
    \ != \"U\")\n        val vowelsSet32 = vowelsSet.filter(_ != \"a\")\n        val\
    \ vowels\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaiee704y.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpaiee704y.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet\
    \ = vowels.toSet;\n        val vowelsSetIterator = vowelsSet.iterator;\n     \
    \   val vowelsSetIteratorNext = vowelsSetIterator.next;\n        val vowelsSetIteratorNextNext\
    \ = vowelsSetIteratorNext.next;\n        val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpup08xdy_.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpup08xdy_.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpup08xdy_.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsS"
  stdout: ''
  timestamp: 1659799268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet\
    \ = vowels.toSet\n        val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"\
    i\", \"o\", \"u\", \"y\"))\n        val vowelsSet3 = vowelsSet.diff(Set(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"\
    u\", \"y\"))\n        val vowelsSet4 = vowelsSet.diff(Set(\"a\", \"e\", \"i\"\
    , \"o\", \"u\", \"y\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"))\n        val vowelsSet5 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")).diff(Set(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\", \"y\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")).diff(Set(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\", \"y\"))\n        val vowelsSet6 = vowelsSet.diff(Set(\"a\", \"e\", \"\
    i\", \"o\", \"u\", \"y\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")).diff(Set(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\", \"y\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")).diff(Set(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\", \"y\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")).diff(Set(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\", \"y\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")).diff(Set(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\", \"y\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")).diff(Set(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\", \"y\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")).diff(Set(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\", \"y\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")).diff(Set(\"\
    a\", \"e\", \"\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7_pgy0tk.scala:21:854 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet6\e[0m = vowelsSet.diff(Set(\e\
    [31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"\
    u\"\e[0m, \e[31m\"y\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m, \e[31m\"y\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m, \e[31m\"y\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m, \e[31m\"y\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m, \e[31m\"y\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m, \e[31m\"y\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m, \e[31m\"y\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m, \e[31m\"y\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m, \e[31m\"y\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m, \e[31m\"y\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m, \e[31m\"y\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m, \e[31m\"y\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m, \e[31m\"y\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m, \e[31m\"y\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m, \e[31m\"y\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m, \e[31m\"y\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m, \e[31m\"y\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m, \e[31m\"y\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m, \e[31m\"y\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m, \e[31m\"y\"\e[0m)).dif"
  stdout: ''
  timestamp: 1659799267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n\
    \        var vowelCount = 0\n        var vowelIndex2 = -1\n        var vowelCount2\
    \ = 0\n        var vowelIndex3 = -1\n        var vowelCount3 = 0\n        var\
    \ vowelIndex4 = -1\n        var vowelCount4 = 0\n        var vowelIndex5 = -1\n\
    \        var vowelCount5 = 0\n        var vowelIndex6 = -1\n        var vowelCount6\
    \ = 0\n        var vowelIndex7 = -1\n        var vowelCount7 = 0\n        var\
    \ vowelIndex8 = -1\n        var vowelCount8 = 0\n        var vowelIndex9 = -1\n\
    \        var vowelCount9 = 0\n        var vowelIndex10 = -1\n        var vowelCount10\
    \ = 0\n        var vowelIndex11 = -1\n        var vowelCount11 = 0\n        var\
    \ vowelIndex12 = -1\n        var vowelCount12 = 0\n        var vowelIndex13 =\
    \ -1\n        var vowelCount13 = 0\n        var vowelIndex14 = -1\n        var\
    \ vowelCount14 = 0\n        var vowelIndex15 = -1\n        var vowelCount15 =\
    \ 0\n        var vowelIndex16 = -1\n        var vowelCount16 = 0\n        var\
    \ vowelIndex17 = -1\n        var vowelCount17 = 0\n        var vowelIndex18 =\
    \ -1\n        var vowelCount18 = 0\n        var vowelIndex19 = -1\n        var\
    \ vowelCount19 = 0\n        var vowelIndex20 = -1\n        var vowelCount20 =\
    \ 0\n        var vowelIndex21 = -1\n        var vowelCount21 = 0\n        var\
    \ vowelIndex22 = -1\n        var vowelCount22 = 0\n        var vowelIndex23 =\
    \ -1\n        var vowelCount23 = 0\n        var vowelIndex24 = -1\n        var\
    \ vowelCount24 = 0\n        var vowelIndex25 = -1\n        var vowelCount25 =\
    \ 0\n        var vowelIndex26 = -1\n        var vowelCount26 = 0\n        var\
    \ vowelIndex27 = -1\n        var vowelCount27 = 0\n        var vowelIndex28 =\
    \ -1\n        var vowelCount28 = 0\n        var vowelIndex29 = -1\n        var\
    \ vowelCount29 = 0\n        var vowelIndex30 = -1\n        var vowelCount30 =\
    \ 0\n        var vowelIndex31 = -1\n        var vowelCount31 = 0\n        var\
    \ vowelIndex32 = -1\n        var vowelCount32 = 0\n        var vowelIndex33 =\
    \ -1\n        var vowelCount33 = 0\n        var vowelIndex34 = -1\n        var\
    \ vowelCount34 = 0\n        var vowelIndex35 = -1\n        var vowelCount35 =\
    \ 0\n        var vowelIndex36 = -1\n        var vowelCount36 = 0\n        var\
    \ vowelIndex37 = -1\n        var vowelCount37 = 0\n        var vowelIndex38 =\
    \ -1\n        var vowelCount38 = 0\n        var vowelIndex39 = -1\n        var\
    \ vowelCount39 = 0\n        var vowelIndex40 = -1\n        var vowelCount40 =\
    \ 0\n        var vowelIndex41 = -1\n        var vowelCount41 = 0\n        var\
    \ vowelIndex\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr7m679ka.scala:99:4 ----------------------------\e\
    [0m\e[0m\n\e[31m99 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr7m679ka.scala:99:5 ---------------------\e[0m\e[0m\n\e[31m99 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.split(\"\
    [aeiou]\").length\n        val vowelsCount = word.split(\"[AEIOU]\").length\n\
    \        val vowelsCount = word.split(\"[AEIOUaeiou]\").length\n        val vowelsCount\
    \ = word.split(\"[aeiouAEIOU]\").length\n        val vowelsCount = word.split(\"\
    [aeiouAEIOUaeiou]\").length\n        val vowelsCount = word.split(\"[AEIOUaeiouAEIOU]\"\
    ).length\n        val vowelsCount = word.split(\"[AEIOUaeiouAEIOUaeiou]\").length\n\
    \        val vowelsCount = word.split(\"[aeiouAEIOUaeiouAEIOU]\").length\n   \
    \     val vowelsCount = word.split(\"[AEIOUaeiouAEIOUaeiouAEIOU]\").length\n \
    \       val vowelsCount = word.split(\"[aeiouAEIOUaeiouAEIOUaeiouAEIOU]\").length\n\
    \        val vowelsCount = word.split(\"[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou]\"\
    ).length\n        val vowelsCount = word.split(\"[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).length\n        val vowelsCount = word.split(\"[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou]\"\
    ).length\n        val vowelsCount = word.split(\"[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).length\n        val vowelsCount = word.split(\"[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou]\"\
    ).length\n        val vowelsCount = word.split(\"[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).length\n        val vowelsCount = word.split(\"[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou]\"\
    ).length\n        val vowelsCount = word.split(\"[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAE\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0cfbxus4.scala:33:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.split(\"\
    [aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAE\n\e[31m\e\
    [31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e[0m    \
    \                                 unclosed string literal\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp0cfbxus4.scala:35:34 -----------------------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                           \
    \       ^\e[0m\n\e[31m   |\e[0m                                 end of statement\
    \ expected but '=' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0cfbxus4.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = word.split(\e[31m\"[AEIOU]\"\e[0m).length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0cfbxus4.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.split(\e[31m\"\
    [AEIOUaeiou]\"\e[0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0cfbxus4.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.split(\e[31m\"\
    [aeiouAEIOU]\"\e[0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659799268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet3\
    \ = vowelsSet.filter(_ != \"a\")\n        val vowelsSet4 = vowelsSet.filter(_\
    \ != \"e\")\n        val vowelsSet5 = vowelsSet.filter(_ != \"i\")\n        val\
    \ vowelsSet6 = vowelsSet.filter(_ != \"o\")\n        val vowelsSet7 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet8 = vowelsSet.filter(_ != \"a\")\n        val\
    \ vowelsSet9 = vowelsSet.filter(_ != \"e\")\n        val vowelsSet10 = vowelsSet.filter(_\
    \ != \"i\")\n        val vowelsSet11 = vowelsSet.filter(_ != \"o\")\n        val\
    \ vowelsSet12 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet13 = vowelsSet.filter(_\
    \ != \"a\")\n        val vowelsSet14 = vowelsSet.filter(_ != \"e\")\n        val\
    \ vowelsSet15 = vowelsSet.filter(_ != \"i\")\n        val vowelsSet16 = vowelsSet.filter(_\
    \ != \"o\")\n        val vowelsSet17 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet18 = vowelsSet.filter(_ != \"a\")\n        val vowelsSet19 = vowelsSet.filter(_\
    \ != \"e\")\n        val vowelsSet20 = vowelsSet.filter(_ != \"i\")\n        val\
    \ vowelsSet21 = vowelsSet.filter(_ != \"o\")\n        val vowelsSet22 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet23 = vowelsSet.filter(_ != \"a\")\n        val\
    \ vowelsSet24 = vowelsSet.filter(_ != \"e\")\n        val vowelsSet25 = vowelsSet.filter(_\
    \ != \"i\")\n        val vowelsSet26 = vowelsSet.filter(_ != \"o\")\n        val\
    \ vowelsSet27 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet28 = vowelsSet.filter(_\
    \ != \"a\")\n        val vowelsSet29 = vowelsSet.filter(_ != \"e\")\n        val\
    \ vowelsSet30 = vowelsSet.filter(_ != \"i\")\n        val vowelsSet31 = vowelsSet.filter(_\
    \ != \"o\")\n        val vowelsSet32 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet33\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbx8i3ee7.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbx8i3ee7.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet\
    \ = vowels.toSet;\n        val vowelsSet2 = vowels.toSet;\n        val vowelsSet3\
    \ = vowels.toSet;\n        val vowelsSet4 = vowels.toSet;\n        val vowelsSet5\
    \ = vowels.toSet;\n        val vowelsSet6 = vowels.toSet;\n        val vowelsSet7\
    \ = vowels.toSet;\n        val vowelsSet8 = vowels.toSet;\n        val vowelsSet9\
    \ = vowels.toSet;\n        val vowelsSet10 = vowels.toSet;\n        val vowelsSet11\
    \ = vowels.toSet;\n        val vowelsSet12 = vowels.toSet;\n        val vowelsSet13\
    \ = vowels.toSet;\n        val vowelsSet14 = vowels.toSet;\n        val vowelsSet15\
    \ = vowels.toSet;\n        val vowelsSet16 = vowels.toSet;\n        val vowelsSet17\
    \ = vowels.toSet;\n        val vowelsSet18 = vowels.toSet;\n        val vowelsSet19\
    \ = vowels.toSet;\n        val vowelsSet20 = vowels.toSet;\n        val vowelsSet21\
    \ = vowels.toSet;\n        val vowelsSet22 = vowels.toSet;\n        val vowelsSet23\
    \ = vowels.toSet;\n        val vowelsSet24 = vowels.toSet;\n        val vowelsSet25\
    \ = vowels.toSet;\n        val vowelsSet26 = vowels.toSet;\n        val vowelsSet27\
    \ = vowels.toSet;\n        val vowelsSet28 = vowels.toSet;\n        val vowelsSet29\
    \ = vowels.toSet;\n        val vowelsSet30 = vowels.toSet;\n        val vowelsSet31\
    \ = vowels.toSet;\n        val vowelsSet32 = vowels.toSet;\n        val vowelsSet33\
    \ = vowels.toSet;\n        val vowelsSet34 = vowels.toSet;\n        val vowelsSet35\
    \ = vowels.toSet;\n        val vowelsSet36 = vowels.toSet;\n        val vowelsSet37\
    \ = vowels.toSet;\n        val vowelsSet38 = vowels.toSet;\n        val vowelsSet39\
    \ = vowels.toSet;\n\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvsb590wq.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n\
    \        var vowelIndex2 = word.length - 1\n        var vowelIndex3 = word.length\n\
    \        var vowelIndex4 = word.length\n        var vowelIndex5 = word.length\n\
    \        var vowelIndex6 = word.length\n        var vowelIndex7 = word.length\n\
    \        var vowelIndex8 = word.length\n        var vowelIndex9 = word.length\n\
    \        var vowelIndex10 = word.length\n        var vowelIndex11 = word.length\n\
    \        var vowelIndex12 = word.length\n        var vowelIndex13 = word.length\n\
    \        var vowelIndex14 = word.length\n        var vowelIndex15 = word.length\n\
    \        var vowelIndex16 = word.length\n        var vowelIndex17 = word.length\n\
    \        var vowelIndex18 = word.length\n        var vowelIndex19 = word.length\n\
    \        var vowelIndex20 = word.length\n        var vowelIndex21 = word.length\n\
    \        var vowelIndex22 = word.length\n        var vowelIndex23 = word.length\n\
    \        var vowelIndex24 = word.length\n        var vowelIndex25 = word.length\n\
    \        var vowelIndex26 = word.length\n        var vowelIndex27 = word.length\n\
    \        var vowelIndex28 = word.length\n        var vowelIndex29 = word.length\n\
    \        var vowelIndex30 = word.length\n        var vowelIndex31 = word.length\n\
    \        var vowelIndex32 = word.length\n        var vowelIndex33 = word.length\n\
    \        var vowelIndex34 = word.length\n        var vowelIndex35 = word.length\n\
    \        var vowelIndex36 = word.length\n        var vowelIndex37 = word.length\n\
    \        var vowelIndex38 = word.length\n        var vowelIndex39 = word.length\n\
    \        var vowelIndex40 = word.length\n        var vowelIndex41 = word.length\n\
    \        var vowelIndex42 = word.length\n        var vowelIndex43 = word.length\n\
    \        var vowelIndex44 = word.length\n        var vowelIndex45 = word.length\n\
    \        var vowelIndex46 = word.length\n        var vowelIndex47 = word.length\n\
    \        var vowelIndex48 = word.length\n        var vowelIndex49 = word.length\n\
    \        var vowelIndex50 = word.length\n        var vowelIndex51 = word.length\n\
    \        var vowelIndex52 = word.length\n        var vowelIndex53 = word.length\n\
    \        var vowelIndex54 = word.length\n        var vowelIndex55 = word.length\n\
    \        var vowelIndex56 = word.length\n        var vowelIndex57 = word.length\n\
    \        var vowelIndex58 = word.length\n        var vowelIndex59 = word.length\n\
    \        var vowelIndex60 = word.length\n        var vowelIndex61 = word.length\n\
    \        var vowelIndex62 = word.length\n        var vowelIndex63 = word.length\n\
    \        var vowelIndex64 = \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsh4jqfj2.scala:79:26 ---------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m        \e[33mvar\e[0m \e[36mvowelIndex64\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsh4jqfj2.scala:80:5 ---------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n\
    \        var vowel = \"\"\n        var vowelIndex2 = -1\n        var vowel2 =\
    \ \"\"\n        var vowelIndex3 = -1\n        var vowel3 = \"\"\n        var vowelIndex4\
    \ = -1\n        var vowel4 = \"\"\n        var vowelIndex5 = -1\n        var vowel5\
    \ = \"\"\n        var vowelIndex6 = -1\n        var vowel6 = \"\"\n        var\
    \ vowelIndex7 = -1\n        var vowel7 = \"\"\n        var vowelIndex8 = -1\n\
    \        var vowel8 = \"\"\n        var vowelIndex9 = -1\n        var vowel9 =\
    \ \"\"\n        var vowelIndex10 = -1\n        var vowel10 = \"\"\n        var\
    \ vowelIndex11 = -1\n        var vowel11 = \"\"\n        var vowelIndex12 = -1\n\
    \        var vowel12 = \"\"\n        var vowelIndex13 = -1\n        var vowel13\
    \ = \"\"\n        var vowelIndex14 = -1\n        var vowel14 = \"\"\n        var\
    \ vowelIndex15 = -1\n        var vowel15 = \"\"\n        var vowelIndex16 = -1\n\
    \        var vowel16 = \"\"\n        var vowelIndex17 = -1\n        var vowel17\
    \ = \"\"\n        var vowelIndex18 = -1\n        var vowel18 = \"\"\n        var\
    \ vowelIndex19 = -1\n        var vowel19 = \"\"\n        var vowelIndex20 = -1\n\
    \        var vowel20 = \"\"\n        var vowelIndex21 = -1\n        var vowel21\
    \ = \"\"\n        var vowelIndex22 = -1\n        var vowel22 = \"\"\n        var\
    \ vowelIndex23 = -1\n        var vowel23 = \"\"\n        var vowelIndex24 = -1\n\
    \        var vowel24 = \"\"\n        var vowelIndex25 = -1\n        var vowel25\
    \ = \"\"\n        var vowelIndex26 = -1\n        var vowel26 = \"\"\n        var\
    \ vowelIndex27 = -1\n        var vowel27 = \"\"\n        var vowelIndex28 = -1\n\
    \        var vowel28 = \"\"\n        var vowelIndex29 = -1\n        var vowel29\
    \ = \"\"\n        var vowelIndex30 = -1\n        var vowel30 = \"\"\n        var\
    \ vowelIndex31 = -1\n        var vowel31 = \"\"\n        var vowelIndex32 = -1\n\
    \        var vowel32 = \"\"\n        var vowelIndex33 = -1\n        var vowel33\
    \ = \"\"\n        var vowelIndex34 = -1\n        var vowel34 = \"\"\n        var\
    \ vowelIndex35 = -1\n        var vowel35 = \"\"\n        var vowelIndex36 = -1\n\
    \        var vowel36 = \"\"\n        var vowelIndex37 = -1\n        var vowel37\
    \ = \"\"\n        var vowelIndex38 = -1\n        var vowel38 = \"\"\n        var\
    \ vowelIndex39 = -1\n        var vowel39 = \"\"\n        var vowelIndex40 = -1\n\
    \        var vowel40 = \"\"\n        var vowelIndex41 = -1\n        var vowel41\
    \ = \"\"\n        var vowelIndex42 = -1\n        var vowel42 = \"\"\n        var\
    \ vowelIndex43 = -1\n        var vowel43 = \"\"\n        var vowelIndex44 = -1\n\
    \        var vowel44 = \"\"\n        var vowelIndex45\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3blygyrx.scala:105:4 ---------------------------\e\
    [0m\e[0m\n\e[31m105 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp3blygyrx.scala:105:5 --------------------\e[0m\e[0m\n\e[31m105 |\e[0m\
    \    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m    |\e[0m     Found:    Unit\n\
    \e[31m    |\e[0m     Required: String\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsIndexes = vowels.toList.zipWithIndex.toMap\n        val vowelsIndexesCount\
    \ = vowelsIndexes.toList.map(_.length).sum\n        val vowelsIndexesIndexes =\
    \ vowelsIndexes.toList.zipWithIndex.toMap\n        val vowelsIndexesIndexesCount\
    \ = vowelsIndexesIndexes.toList.map(_.length).sum\n        val vowelsIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexes.toList.map(_.length).sum\n        val vowelsIndexesIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexesIndexes.toList.map(_.length).sum\n        val vowelsIndexesIndexesIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexesIndexesIndexes.toList.map(_.length).sum\n     \
    \   val vowelsIndexesIndexesIndexesIndexesIndexesIndexesCount = vowelsIndexesIndexesIndexesIndexesIndexesIndexes.toList.map(_.length).sum\n\
    \        val vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesCount = vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexes.toList.map(_.length).sum\n\
    \        val vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexes.toList.map(_.length).sum\n\
    \        val vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes.toList.map(_.length).sum\n\
    \        val vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes.toList.map(_.length).sum\n\
    \        val vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes.toList.map(_.length).sum\n\
    \        val vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexesIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0su29ao0.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesCount\e\
    [0m = vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0su29ao0.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesCount\e\
    [0m = vowelsIndexesIndexesIndexesIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesCount\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesCount\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp0su29ao0.scala:18:60 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndexesCount\e[0m\
    \ = vowelsIndexes.toList.map(_.length).sum\n\e[31m\e[31m   |\e[0m            \
    \                                              ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           value length is not a member of (String, Int)\n\e\
    [31m\e[31m-- Error: /tmp/tmp0su29ao0.scala:18:71 --------"
  stdout: ''
  timestamp: 1659799269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        var vowelsCount\
    \ = vowels.size;\n        var vowelsIndex = new Array[Int](vowelsCount);\n   \
    \     var vowelsIndexCount = new Array[Int](vowelsCount);\n        var vowelsIndexCountMax\
    \ = vowelsCount + 1;\n        var vowelsIndexCountMaxIndex = vowelsIndexCountMax\
    \ - 1;\n        var vowelsIndexCountMin = vowelsIndexCountMax - 1;\n        var\
    \ vowelsIndexCountMinIndex = vowelsIndexCountMax - 1;\n        var vowelsIndexCountMaxIndexMin\
    \ = vowelsIndexCountMax - 2;\n        var vowelsIndexCountMinIndexMax = vowelsIndexCountMax\
    \ - 3;\n        var vowelsIndexCountMaxIndexMinIndexMax = vowelsIndexCountMax\
    \ - 4;\n        var vowelsIndexCountMinIndexMaxIndexMin = vowelsIndexCountMax\
    \ - 5;\n        var vowelsIndexCountMaxIndexMinIndexMaxIndexMin = vowelsIndexCountMax\
    \ - 6;\n        var vowelsIndexCountMinIndexMaxIndexMinIndexMax = vowelsIndexCountMax\
    \ - 7;\n        var vowelsIndexCountMaxIndexMinIndexMaxIndexMinIndexMax = vowelsIndexCountMax\
    \ - 8;\n        var vowelsIndexCountMinIndexMaxIndexMinIndexMaxIndexMin = vowelsIndexCountMax\
    \ - 9;\n        var vowelsIndexCountMaxIndexMinIndexMaxIndexMinIndexMax = vowelsIndexCountMax\
    \ - 10;\n        var vowelsIndexCountMinIndexMaxIndexMinIndexMaxIndexMinIndexMax\
    \ = vowelsIndexCountMax - 11;\n        var vowelsIndexCountMaxIndexMinIndexMaxIndexMinIndexMaxIndexMin\
    \ = vowelsIndexCountMax - 12;\n        var vowelsIndexCountMinIndexMaxIndexMinIndexMaxIndexMinIndexMax\
    \ = vowelsIndexCountMax - 13;\n        var vowelsIndexCountMaxIndexMinIndexMaxIndexMinIndexMaxIndexMin\
    \ = vowelsIndexCountMax - 14;\n        var vowelsIndexCountMinIndexMaxIndexMinIndexMaxIndexMinIndexMax\
    \ = vowelsIndexCountMax - 15;\n        var vowelsIndexCountMaxIndexMinIndexMaxIndexMinIndexMaxIndexMinIndexMax\
    \ = vowelsIndexCountMax - 16;\n        var vowelsIndexCountMinIndexMaxIndexMinIndexMaxIndexMinIndexMaxIndexMin\
    \ = vowelsIndexCountMax - 17;\n        var vowelsIndexCountMaxIndexMinIndexMaxIndexMinIndexMaxIndexMinIndexMax\
    \ = vowelsIndexCountMax - 18;\n        var vowelsIndexCountMinIndexMaxIndexMinIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoa4cjpva.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoa4cjpva.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mvowelsIndexCountMaxIndexMinIndexMaxIndexMinIndexMax\e[0m = vowelsIndexCountMax\
    \ - \e[31m10\e[0m;\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndexCountMaxIndexMinIndexMaxIndexMinIndexMax is already\
    \ defined as \e[33mvariable\e[0m \e[35mvowelsIndexCountMaxIndexMinIndexMaxIndexMinIndexMax\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoa4cjpva.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mvar\e[0m \e[36mvowelsIndexCountMinIndexMaxIndexMinIndexMaxIndexMinIndexMax\e\
    [0m = vowelsIndexCountMax - \e[31m13\e[0m;\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndexCountMinIndexMaxIndexMinIndexMaxIndexMinIndexMax\
    \ is already defined as \e[33mvariable\e[0m \e[35mvowelsIndexCountMinIndexMaxIndexMinIndexMaxIndexMinIndexMax\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoa4cjpva.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mvar\e[0m \e[36mvowelsIndexCountMaxIndexMinIndexMaxIndexMinIndexMaxIndexMin\e\
    [0m = vowelsIndexCountMax - \e[31m14\e[0m;\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndexCountMaxIndexMinIndexMaxIndexMinIndexMaxIndexMin\
    \ is already defined as \e[33mvariable\e[0m \e[35mvowelsIndexCountMaxIndexMinIndexMaxIndexMinIndexMaxIndexMin\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659799268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorNext = vowelsSetIterator.next\n        val vowelsSetIteratorPrev\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.prev\n     \
    \   val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpummx1_qj.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpummx1_qj.scala:20:54 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpummx1_qj.scala:21:62 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpummx1_qj.scala:22:62 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpummx1_qj.scala:31:60 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextPrev\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNext.prev\n\e[31m\e[31m   |\e[0m  \
    \                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found:"
  stdout: ''
  timestamp: 1659799269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n\
    \        var vowel = \"\"\n        var consonantIndex = 0\n        var consonant\
    \ = \"\"\n        var vowelCount = 0\n        var consonantCount = 0\n       \
    \ var vowelIndex = 0\n        var consonantIndex = 0\n        var vowel = \"\"\
    \n        var consonant = \"\"\n        var vowelCount = 0\n        var consonantCount\
    \ = 0\n        var vowelIndex = 0\n        var consonantIndex = 0\n        var\
    \ vowel = \"\"\n        var consonant = \"\"\n        var vowelCount = 0\n   \
    \     var consonantCount = 0\n        var vowelIndex = 0\n        var consonantIndex\
    \ = 0\n        var vowel = \"\"\n        var consonant = \"\"\n        var vowelCount\
    \ = 0\n        var consonantCount = 0\n        var vowelIndex = 0\n        var\
    \ consonantIndex = 0\n        var vowel = \"\"\n        var consonant = \"\"\n\
    \        var vowelCount = 0\n        var consonantCount = 0\n        var vowelIndex\
    \ = 0\n        var consonantIndex = 0\n        var vowel = \"\"\n        var consonant\
    \ = \"\"\n        var vowelCount = 0\n        var consonantCount = 0\n       \
    \ var vowelIndex = 0\n        var consonantIndex = 0\n        var vowel = \"\"\
    \n        var consonant = \"\"\n        var vowelCount = 0\n        var consonantCount\
    \ = 0\n        var vowelIndex = 0\n        var consonantIndex = 0\n        var\
    \ vowel = \"\"\n        var consonant = \"\"\n        var vowelCount = 0\n   \
    \     var consonantCount = 0\n        var vowelIndex = 0\n        var consonantIndex\
    \ = 0\n        var vowel = \"\"\n        var consonant = \"\"\n        var vowelCount\
    \ = 0\n        var consonantCount = 0\n        var vowelIndex = 0\n        var\
    \ consonantIndex = 0\n        var vowel = \"\"\n        var consonant = \"\"\n\
    \        var vowelCount = 0\n        var consonantCount = 0\n        var vowelIndex\
    \ = 0\n        var consonantIndex = 0\n        var vowel = \"\"\n        var consonant\
    \ = \"\"\n        var vowelCount = 0\n        var consonantCount = 0\n       \
    \ var vowelIndex = 0\n        var consonantIndex = 0\n        var vowel = \"\"\
    \n        var consonant = \"\"\n        var vowelCount = 0\n        var consonantCount\
    \ = 0\n        var vowelIndex = 0\n        var consonantIndex = 0\n        var\
    \ vowel = \"\"\n        var consonant = \"\"\n        var vowelCount = 0\n   \
    \     var consonantCount = 0\n        var vowelIndex = 0\n        var consonantIndex\
    \ = 0\n        var vowel = \"\"\n        var consonant = \"\"\n        var vowelCount\
    \ = 0\n        var consonantCount = 0\n        var vowelIndex = 0\n        var\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpp3710ozd.scala:101:11 --------------------------\e\
    [0m\e[0m\n\e[31m101 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m    |\e[0m    \
    \       ^\e[0m\n\e[31m    |\e[0m           pattern expected\n\e[31m    |\e[0m\n\
    \e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp3710ozd.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mvowelIndex\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mvowelIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp3710ozd.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mconsonantIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantIndex is already defined as \e[33mvariable\e[0m \e\
    [35mconsonantIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpp3710ozd.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mvowel\e[0m = \e[31m\"\"\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowel is\
    \ already defined as \e[33mvariable\e[0m \e[35mvowel\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp3710ozd.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mconsonant\e[0m = \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonant is already defined as \e[33mvariable\e[0m \e[35mconsonant\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp3710ozd.scala:26:12 ------------------"
  stdout: ''
  timestamp: 1659799268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext\
    \ = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb3y0luw3.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb3y0luw3.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb3y0luw3.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNe"
  stdout: ''
  timestamp: 1659799256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxur95krm.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxur95krm.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxur95krm.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxur95krm.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxur95krm.scala"
  stdout: ''
  timestamp: 1659799270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgda95_e1.scala:52:25 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgda95_e1.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet\
    \ = vowels.toSet\n        val vowelsSet2 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 1))\n        val vowelsSet3 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 2))\n        val vowelsSet4 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 3))\n        val vowelsSet5 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 4))\n        val vowelsSet6 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 5))\n        val vowelsSet7 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 6))\n        val vowelsSet8 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 7))\n        val vowelsSet9 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 8))\n        val vowelsSet10 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 9))\n        val vowelsSet11 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 10))\n        val vowelsSet12 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 11))\n        val vowelsSet13 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 12))\n        val vowelsSet14 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 13))\n        val vowelsSet15 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 14))\n        val vowelsSet16 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 15))\n        val vowelsSet17 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 16))\n        val vowelsSet18 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 17))\n        val vowelsSet19 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 18))\n        val vowelsSet20 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 19))\n        val vowelsSet21 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 20))\n        val vowelsSet22 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 21))\n        val vowelsSet23 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 22))\n        val vowelsSet24 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 23))\n        val vowelsSet25 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 24))\n        val vowelsSet26 = vowelsSet.filter(_ != word.charAt(word.length\
    \ - 25))\n        val vowelsSet27 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvhrt8x3e.scala:42:25 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet27\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpvhrt8x3e.scala:17:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowelsSet.filter(_\
    \ != word.charAt(word.length - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m         \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpvhrt8x3e.scala:18:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet3\e[0m = vowelsSet.filter(_\
    \ != word.charAt(word.length - \e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m         \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpvhrt8x3e.scala:19:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet4\e[0m = vowelsSet.filter(_\
    \ != word.charAt(word.length - \e[31m3\e[0m))\n\e[31m\e[31m   |\e[0m         \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpvhrt8x3e.scala:20:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet5\e[0m = vowelsSet.filter(_\
    \ != word.charAt(word.length - \e[31m4\e[0m))\n\e[31m\e[31m   |\e[0m         \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpvhrt8x3e.scala:21:42 ------------------------"
  stdout: ''
  timestamp: 1659799271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.previous\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.previous\n    \
    \    val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextPrev\
    \ = vowelsSetIteratorNextPrev.previous\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.previous\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNextPrev.previous\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextPrev.previous\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextPrev.previous\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextPrev.previous\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextPrev.previous\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextPrev.previous\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPre\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2twwk_pi.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2twwk_pi.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextPrev\e[0m = vowelsSetIteratorNextPrev.previous\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2twwk_pi.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextPrev\e\
    [0m = vowelsSetIteratorNextNextPrev.previous\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2twwk_pi.scala:19:54 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.previous\n\e[31m\e[31m   |\e[0m                      \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        value previous is not a member of Iterator[String]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp2twwk_pi.scala:20:62 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.previous\n\e[31m\e[31m   |\e[0m                    \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                            value previous is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Fou"
  stdout: ''
  timestamp: 1659799270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val consonants = word.filter(x => !vowels.contains(x))\n\
    \        val consonantsCount = consonants.size\n        val vowelsCount = vowelsCount.toDouble\n\
    \        val consonantsCount = consonantsCount.toDouble\n        val vowelsCount\
    \ = vowelsCount.toDouble\n        val consonantsCount = consonantsCount.toDouble\n\
    \        val vowelsCount = vowelsCount.toDouble\n        val consonantsCount =\
    \ consonantsCount.toDouble\n        val vowelsCount = vowelsCount.toDouble\n \
    \       val consonantsCount = consonantsCount.toDouble\n        val vowelsCount\
    \ = vowelsCount.toDouble\n        val consonantsCount = consonantsCount.toDouble\n\
    \        val vowelsCount = vowelsCount.toDouble\n        val consonantsCount =\
    \ consonantsCount.toDouble\n        val vowelsCount = vowelsCount.toDouble\n \
    \       val consonantsCount = consonantsCount.toDouble\n        val vowelsCount\
    \ = vowelsCount.toDouble\n        val consonantsCount = consonantsCount.toDouble\n\
    \        val vowelsCount = vowelsCount.toDouble\n        val consonantsCount =\
    \ consonantsCount.toDouble\n        val vowelsCount = vowelsCount.toDouble\n \
    \       val consonantsCount = consonantsCount.toDouble\n        val vowelsCount\
    \ = vowelsCount.toDouble\n        val consonantsCount = consonantsCount.toDouble\n\
    \        val vowelsCount = vowelsCount.toDouble\n        val consonantsCount =\
    \ consonantsCount.toDouble\n        val vowelsCount = vowelsCount.toDouble\n \
    \       val consonantsCount = consonantsCount.toDouble\n        val vowelsCount\
    \ = vowelsCount.toDouble\n        val consonantsCount = consonantsCount.toDouble\n\
    \        val vowelsCount = vowelsCount.toDouble\n        val consonantsCount =\
    \ consonantsCount.toDouble\n        val vowelsCount = vowelsCount.toDouble\n \
    \       val consonantsCount = consonantsCount.toDouble\n        val vowelsCount\
    \ = vowelsCount.toDouble\n        val consonantsCount = consonantsCount.toDouble\n\
    \        val vowelsCount = vowelsCount.toDouble\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbhiydwz0.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toDouble\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbhiydwz0.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonantsCount.toDouble\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbhiydwz0.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toDouble\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbhiydwz0.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonantsCount.toDouble\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbhiydwz0.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toDouble\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^"
  stdout: ''
  timestamp: 1659799271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n\
    \        var vowel = \"\"\n        var lastVowel = \"\"\n        var lastVowelIndex\
    \ = 0\n        var lastVowelIndexInWord = 0\n        var lastVowelIndexInWordInWord\
    \ = 0\n        var lastVowelIndexInWordInWord = 0\n        var lastVowelIndexInWordInWord\
    \ = 0\n        var lastVowelIndexInWordInWord = 0\n        var lastVowelIndexInWordInWord\
    \ = 0\n        var lastVowelIndexInWordInWord = 0\n        var lastVowelIndexInWordInWord\
    \ = 0\n        var lastVowelIndexInWordInWord = 0\n        var lastVowelIndexInWordInWord\
    \ = 0\n        var lastVowelIndexInWordInWord = 0\n        var lastVowelIndexInWordInWord\
    \ = 0\n        var lastVowelIndexInWordInWord = 0\n        var lastVowelIndexInWordInWord\
    \ = 0\n        var lastVowelIndexInWordInWord = 0\n        var lastVowelIndexInWordInWord\
    \ = 0\n        var lastVowelIndexInWordInWord = 0\n        var lastVowelIndexInWordInWord\
    \ = 0\n        var lastVowelIndexInWordInWord = 0\n        var lastVowelIndexInWordInWord\
    \ = 0\n        var lastVowelIndexInWordInWord = 0\n        var lastVowelIndexInWordInWord\
    \ = 0\n        var lastVowelIndexInWordInWord = 0\n        var lastVowelIndexInWordInWord\
    \ = 0\n        var lastVowelIndexInWordInWord = 0\n        var lastVowelIndexInWordInWord\
    \ = 0\n        var lastVowelIndexInWordInWord = 0\n        var lastVowelIndexInWordInWord\
    \ = 0\n        var lastVowelIndexInWordInWord = 0\n        var lastVowelIndexInWordInWord\
    \ = 0\n        var lastVowelIndexInWordInWord = 0\n        var lastVowelIndexInWordInWord\
    \ = 0\n        var lastVowelIndexInWordInWord = 0\n        var lastVowelIndexInWordInWord\
    \ = 0\n        var lastVowelIndexInWordInWord = 0\n        var lastVowelIndexInWordInWord\
    \ = 0\n        var lastVowelIndexInWordInWord = 0\n        var lastVowelIndexInWordInWord\
    \ = 0\n        var lastVowelIndexInWordInWord = 0\n        var lastVowelIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuosz7hxc.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuosz7hxc.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mlastVowelIndexInWordInWord\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlastVowelIndexInWordInWord\
    \ is already defined as \e[33mvariable\e[0m \e[35mlastVowelIndexInWordInWord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuosz7hxc.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mvar\e[0m \e[36mlastVowelIndexInWordInWord\e[0m = \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastVowelIndexInWordInWord is already defined as \e[33mvariable\e\
    [0m \e[35mlastVowelIndexInWordInWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuosz7hxc.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mlastVowelIndexInWordInWord\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastVowelIndexInWordInWord is already defined as \e[33mvariable\e\
    [0m \e[35mlastVowelIndexInWordInWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuosz7hxc.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mlastVowelIndexInWordInWord\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastVowelIndexInWordInWord is already defined as \e[33mvariable\e\
    [0m \e[35mlastVowelIndexInWordInWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded met"
  stdout: ''
  timestamp: 1659799270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val consonants = word.filter(x => !vowels.contains(x))\n\
    \        val consonantsCount = consonants.size\n        val vowelsCount = vowelsCount\
    \ + consonantsCount\n        val vowelsCount = vowelsCount + 1\n        val consonantsCount\
    \ = consonantsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val\
    \ consonantsCount = consonantsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val consonantsCount = consonantsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val consonantsCount = consonantsCount + 1\n     \
    \   val vowelsCount = vowelsCount + 1\n        val consonantsCount = consonantsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val consonantsCount\
    \ = consonantsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val\
    \ consonantsCount = consonantsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val consonantsCount = consonantsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val consonantsCount = consonantsCount + 1\n     \
    \   val vowelsCount = vowelsCount + 1\n        val consonantsCount = consonantsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val consonantsCount\
    \ = consonantsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val\
    \ consonantsCount = consonantsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val consonantsCount = consonantsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val consonantsCount = consonantsCount + 1\n     \
    \   val vowelsCount = vowelsCount + 1\n        val consonantsCount = consonantsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val consonantsCount\
    \ = consonantsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val\
    \ consonantsCount = consonantsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val consonantsCount = consonantsCount + 1\n        val vowelsCount\
    \ = vowels\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq_i2mm3q.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq_i2mm3q.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq_i2mm3q.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonantsCount\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpq_i2mm3q.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq_i2mm3q.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonantsCount\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^"
  stdout: ''
  timestamp: 1659799272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowels.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5wi86asy.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5wi86asy.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIterator.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5wi86asy.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5wi86asy.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1659799256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet\
    \ = vowels.toSet\n        val vowelsSetIterator = vowelsSet.iterator\n       \
    \ val vowelsSetIteratorNext = vowelsSetIterator.next\n        val vowelsSetIteratorPrev\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextPrevPrev = vowelsSetIteratorNextPrev.prev\n        val\
    \ vowelsSetIteratorNextPrevNext = vowelsSetIteratorNextPrev.next\n        val\
    \ vowelsSetIteratorNextPrevPrevPrev = vowelsSetIteratorNextPrevNext.prev\n   \
    \     val vowelsSetIteratorNextPrevPrevNext = vowelsSetIteratorNextPrevNext.next\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrev = vowelsSetIteratorNextPrevPrevNext.prev\n\
    \        val vowelsSetIteratorNextPrevPrevPrevNext = vowelsSetIteratorNextPrevPrevNext.next\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevPrev = vowelsSetIteratorNextPrevPrevPrevNext.prev\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevNext = vowelsSetIteratorNextPrevPrevPrevNext.next\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrev = vowelsSetIteratorNextPrevPrevPrevPrevNext.prev\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevPrevNext = vowelsSetIteratorNextPrevPrevPrevPrevNext.next\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrev = vowelsSetIteratorNextPrevPrevPrevPrevPrevNext.prev\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevNext = vowelsSetIteratorNextPrevPrevPrevPrevPrevNext.next\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrevPrev = vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevNext.prev\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrevNext = vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevNext.next\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrevPrevPrev = vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrevNext.prev\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrevPrevNext = vowelsSetIteratorNextPrevPrevPrevPrev\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl1f5mvfu.scala:19:54 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpl1f5mvfu.scala:20:62 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpl1f5mvfu.scala:21:62 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpl1f5mvfu.scala:38:5 ---------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowelsSet2.reverse\n\
    \        val vowelsSet4 = vowelsSet3.reverse\n        val vowelsSet5 = vowelsSet4.reverse\n\
    \        val vowelsSet6 = vowelsSet5.reverse\n        val vowelsSet7 = vowelsSet6.reverse\n\
    \        val vowelsSet8 = vowelsSet7.reverse\n        val vowelsSet9 = vowelsSet8.reverse\n\
    \        val vowelsSet10 = vowelsSet9.reverse\n        val vowelsSet11 = vowelsSet10.reverse\n\
    \        val vowelsSet12 = vowelsSet11.reverse\n        val vowelsSet13 = vowelsSet12.reverse\n\
    \        val vowelsSet14 = vowelsSet13.reverse\n        val vowelsSet15 = vowelsSet14.reverse\n\
    \        val vowelsSet16 = vowelsSet15.reverse\n        val vowelsSet17 = vowelsSet16.reverse\n\
    \        val vowelsSet18 = vowelsSet17.reverse\n        val vowelsSet19 = vowelsSet18.reverse\n\
    \        val vowelsSet20 = vowelsSet19.reverse\n        val vowelsSet21 = vowelsSet20.reverse\n\
    \        val vowelsSet22 = vowelsSet21.reverse\n        val vowelsSet23 = vowelsSet22.reverse\n\
    \        val vowelsSet24 = vowelsSet23.reverse\n        val vowelsSet25 = vowelsSet24.reverse\n\
    \        val vowelsSet26 = vowelsSet25.reverse\n        val vowelsSet27 = vowelsSet26.reverse\n\
    \        val vowelsSet28 = vowelsSet27.reverse\n        val vowelsSet29 = vowelsSet28.reverse\n\
    \        val vowelsSet30 = vowelsSet29.reverse\n        val vowelsSet31 = vowelsSet30.reverse\n\
    \        val vowelsSet32 = vowelsSet31.reverse\n        val vowelsSet33 = vowelsSet32.reverse\n\
    \        val vowelsSet34 = vowelsSet33.reverse\n        val vowelsSet35 = vowelsSet34.reverse\n\
    \        val vowelsSet36 = vowelsSet35.reverse\n        val vowelsSet37 = vowelsSet36.reverse\n\
    \        val vowelsSet38 = vowelsSet37.reverse\n        val vowelsSet39 = vowelsSet38.reverse\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp9ya905eu.scala:55:11 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ya905eu.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9ya905eu.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgda95_e1.scala:52:25 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgda95_e1.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n\
    \        var vowelIndex2 = word.length - 1\n        var vowelIndex3 = word.length\
    \ - 1\n        var vowelIndex4 = word.length - 1\n        var vowelIndex5 = word.length\
    \ - 1\n        var vowelIndex6 = word.length - 1\n        var vowelIndex7 = word.length\
    \ - 1\n        var vowelIndex8 = word.length - 1\n        var vowelIndex9 = word.length\
    \ - 1\n        var vowelIndex10 = word.length - 1\n        var vowelIndex11 =\
    \ word.length - 1\n        var vowelIndex12 = word.length - 1\n        var vowelIndex13\
    \ = word.length - 1\n        var vowelIndex14 = word.length - 1\n        var vowelIndex15\
    \ = word.length - 1\n        var vowelIndex16 = word.length - 1\n        var vowelIndex17\
    \ = word.length - 1\n        var vowelIndex18 = word.length - 1\n        var vowelIndex19\
    \ = word.length - 1\n        var vowelIndex20 = word.length - 1\n        var vowelIndex21\
    \ = word.length - 1\n        var vowelIndex22 = word.length - 1\n        var vowelIndex23\
    \ = word.length - 1\n        var vowelIndex24 = word.length - 1\n        var vowelIndex25\
    \ = word.length - 1\n        var vowelIndex26 = word.length - 1\n        var vowelIndex27\
    \ = word.length - 1\n        var vowelIndex28 = word.length - 1\n        var vowelIndex29\
    \ = word.length - 1\n        var vowelIndex30 = word.length - 1\n        var vowelIndex31\
    \ = word.length - 1\n        var vowelIndex32 = word.length - 1\n        var vowelIndex33\
    \ = word.length - 1\n        var vowelIndex34 = word.length - 1\n        var vowelIndex35\
    \ = word.length - 1\n        var vowelIndex36 = word.length - 1\n        var vowelIndex37\
    \ = word.length - 1\n        var vowelIndex38 = word.length - 1\n        var vowelIndex39\
    \ = word.length - 1\n        var vowelIndex40 = word.length - 1\n        var vowelIndex41\
    \ = word.length - 1\n        var vowelIndex42 = word.length - 1\n        var vowelIndex43\
    \ = word.length - 1\n        var vowelIndex44 = word.length - 1\n        var vowelIndex45\
    \ = word.length - 1\n        var vowelIndex46 = word.length - 1\n        var vowelIndex47\
    \ = word.length - 1\n        var vowelIndex48 = word.length - 1\n        var vowelIndex49\
    \ = word.length - 1\n        var vowelIndex50 = word.length - 1\n        var vowelIndex51\
    \ = word.length - 1\n        var vowelIndex52 = word.length - 1\n        var vowelIndex53\
    \ = word.length - 1\n        var vowelIndex54 = word.length - 1\n        var vowelIndex55\
    \ = word.length - 1\n        var vowelIndex56 = word.length - 1\n        var vowelIndex57\
    \ = word.length\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpduiyoyq8.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val consonants\
    \ = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val vowelsCount = vowels.toList.count(vowel => word.contains(vowel))\n\
    \        val consonantsCount = consonants.toList.count(consonant => word.contains(consonant))\n\
    \        val vowelsCountInWord = vowels.toList.count(vowel => word.contains(vowel))\n\
    \        val consonantsCountInWord = consonants.toList.count(consonant => word.contains(consonant))\n\
    \        val vowelsCountInWordInWord = vowels.toList.count(vowel => word.contains(vowel))\n\
    \        val consonantsCountInWordInWord = consonants.toList.count(consonant =>\
    \ word.contains(consonant))\n        val vowelsCountInWordInWordInWord = vowels.toList.count(vowel\
    \ => word.contains(vowel))\n        val consonantsCountInWordInWordInWord = consonants.toList.count(consonant\
    \ => word.contains(consonant))\n        val vowelsCountInWordInWordInWordInWord\
    \ = vowels.toList.count(vowel => word.contains(vowel))\n        val consonantsCountInWordInWordInWordInWord\
    \ = consonants.toList.count(consonant => word.contains(consonant))\n        val\
    \ vowelsCountInWordInWordInWordInWordInWord = vowels.toList.count(vowel => word.contains(vowel))\n\
    \        val consonantsCountInWordInWordInWordInWordInWord = consonants.toList.count(consonant\
    \ => word.contains(consonant))\n        val vowelsCountInWordInWordInWordInWordInWordInWord\
    \ = vowels.toList.count(vowel => word.contains(vowel))\n        val consonantsCountInWordInWordInWordInWordInWordInWord\
    \ = consonants.toList.count(consonant => word.contains(consonant))\n        val\
    \ vowelsCountInWordInWordInWordInWordInWordInWordInWord = vowels.toList.count(vowel\
    \ => word.contains(vowel))\n        val consonantsCountInWordInWordInWordInWordInWordInWordInWord\
    \ = consonants.toList.count(conson\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnlf47u9d.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnlf47u9d.scala:32:96\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantsCountInWordInWordInWordInWordInWordInWordInWord\e[0m = consonants.toList.count(conson\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                        ^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                               Not found: conson\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnlf47u9d.scala:33:5 ---------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowels.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.previous\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextPrev = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextPrev = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNext\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaao42war.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaao42war.scala:19:54\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.previous\n\e[31m\e[31m   |\e\
    [0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      value previous is not a member of Iterator[String]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaao42war.scala:41:5 ---------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n\
    \        var vowelIndex2 = word.length - 1\n        var vowelIndex3 = word.length\
    \ - 1\n        var vowelIndex4 = word.length - 1\n        var vowelIndex5 = word.length\
    \ - 1\n        var vowelIndex6 = word.length - 1\n        var vowelIndex7 = word.length\
    \ - 1\n        var vowelIndex8 = word.length - 1\n        var vowelIndex9 = word.length\
    \ - 1\n        var vowelIndex10 = word.length - 1\n        var vowelIndex11 =\
    \ word.length - 1\n        var vowelIndex12 = word.length - 1\n        var vowelIndex13\
    \ = word.length - 1\n        var vowelIndex14 = word.length - 1\n        var vowelIndex15\
    \ = word.length - 1\n        var vowelIndex16 = word.length - 1\n        var vowelIndex17\
    \ = word.length - 1\n        var vowelIndex18 = word.length - 1\n        var vowelIndex19\
    \ = word.length - 1\n        var vowelIndex20 = word.length - 1\n        var vowelIndex21\
    \ = word.length - 1\n        var vowelIndex22 = word.length - 1\n        var vowelIndex23\
    \ = word.length - 1\n        var vowelIndex24 = word.length - 1\n        var vowelIndex25\
    \ = word.length - 1\n        var vowelIndex26 = word.length - 1\n        var vowelIndex27\
    \ = word.length - 1\n        var vowelIndex28 = word.length - 1\n        var vowelIndex29\
    \ = word.length - 1\n        var vowelIndex30 = word.length - 1\n        var vowelIndex31\
    \ = word.length - 1\n        var vowelIndex32 = word.length - 1\n        var vowelIndex33\
    \ = word.length - 1\n        var vowelIndex34 = word.length - 1\n        var vowelIndex35\
    \ = word.length - 1\n        var vowelIndex36 = word.length - 1\n        var vowelIndex37\
    \ = word.length - 1\n        var vowelIndex38 = word.length - 1\n        var vowelIndex39\
    \ = word.length - 1\n        var vowelIndex40 = word.length - 1\n        var vowelIndex41\
    \ = word.length - 1\n        var vowelIndex42 = word.length - 1\n        var vowelIndex43\
    \ = word.length - 1\n        var vowelIndex44 = word.length - 1\n        var vowelIndex45\
    \ = word.length - 1\n        var vowelIndex46 = word.length - 1\n        var vowelIndex47\
    \ = word.length - 1\n        var vowelIndex48 = word.length - 1\n        var vowelIndex49\
    \ = word.length - 1\n        var vowelIndex50 = word.length - 1\n        var vowelIndex51\
    \ = word.length - 1\n        var vowelIndex52 = word.length - 1\n        var vowelIndex53\
    \ = word.length - 1\n        var vowelIndex54 = word.length - 1\n        var vowelIndex55\
    \ = word.length - 1\n        var vowelIndex56 = word.length - 1\n        var vowelIndex57\
    \ = word.length\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpduiyoyq8.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    ))\n        val vowelsSet3 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"\
    u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet4 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet5 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet6 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\",\
    \ \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet7 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet8 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\",\
    \ \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\",\
    \ \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet9 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\",\
    \ \"o\", \"\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsvyf70w7.scala:24:134 ----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet9\e[0m = vowelsSet.diff(Set(\e\
    [31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"\
    u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                              unclosed string literal\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpsvyf70w7.scala:25:5 ---------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val consonants = word.filter(x => !vowels.contains(x))\n\
    \        val consonantsCount = consonants.size\n        val vowelsCount = vowelsCount\
    \ + consonantsCount\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx0mc0soq.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx0mc0soq.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx0mc0soq.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx0mc0soq.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx0mc0soq.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n"
  stdout: ''
  timestamp: 1659799282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        var vowelsCount\
    \ = vowels.toSeq.length;\n        var vowelsCount2 = vowels.toSeq.length-1;\n\
    \        var vowelsCount3 = vowels.toSeq.length-2;\n        var vowelsCount4 =\
    \ vowels.toSeq.length-3;\n        var vowelsCount5 = vowels.toSeq.length-4;\n\
    \        var vowelsCount6 = vowels.toSeq.length-5;\n        var vowelsCount7 =\
    \ vowels.toSeq.length-6;\n        var vowelsCount8 = vowels.toSeq.length-7;\n\
    \        var vowelsCount9 = vowels.toSeq.length-8;\n        var vowelsCount10\
    \ = vowels.toSeq.length-9;\n        var vowelsCount11 = vowels.toSeq.length-10;\n\
    \        var vowelsCount12 = vowels.toSeq.length-11;\n        var vowelsCount13\
    \ = vowels.toSeq.length-12;\n        var vowelsCount14 = vowels.toSeq.length-13;\n\
    \        var vowelsCount15 = vowels.toSeq.length-14;\n        var vowelsCount16\
    \ = vowels.toSeq.length-15;\n        var vowelsCount17 = vowels.toSeq.length-16;\n\
    \        var vowelsCount18 = vowels.toSeq.length-17;\n        var vowelsCount19\
    \ = vowels.toSeq.length-18;\n        var vowelsCount20 = vowels.toSeq.length-19;\n\
    \        var vowelsCount21 = vowels.toSeq.length-20;\n        var vowelsCount22\
    \ = vowels.toSeq.length-21;\n        var vowelsCount23 = vowels.toSeq.length-22;\n\
    \        var vowelsCount24 = vowels.toSeq.length-23;\n        var vowelsCount25\
    \ = vowels.toSeq.length-24;\n        var vowelsCount26 = vowels.toSeq.length-25;\n\
    \        var vowelsCount27 = vowels.toSeq.length-26; \n        var vowelsCount28\
    \ = vowels.toSeq.length-27;\n        var vowelsCount29 = vowels.toSeq.length-28;\n\
    \        var vowelsCount30 = vowels.toSeq.length-29;\n        var vowelsCount31\
    \ = vowels.toSeq.length-30;\n        var vowelsCount32 = vowels.toSeq.length-31;\n\
    \        var vowelsCount33 = vowels.toSeq.length-32;\n        var vowelsCount34\
    \ = vowels.toSeq.length-33;\n        var vowelsCount35 = vowels.toSeq.length-34;\n\
    \        var vowelsCount36 = vowels.toSeq.length-\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpuvck61rr.scala:51:48 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount36\e[0m = vowels.toSeq.length-\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuvck61rr.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmd8tao15.scala:22:62 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpmd8tao15.scala:36:68 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \ ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmd8tao15.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg3k3b500.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg3k3b500.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowels.toList.map(\e[36mx\e[0m => word.toLowerCase\
    \ contains x).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg3k3b500.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(\e\
    [36mx\e[0m => word.toLowerCase contains x).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg3k3b500.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(\e\
    [36mx\e[0m => word.toLowerCase contains x).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg3k3b500.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(\e\
    [36mx\e[0m => word.toLowerCase contains x).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgda95_e1.scala:52:25 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgda95_e1.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.prev\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNext\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc1hl4_7p.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc1hl4_7p.scala:19:54\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue prev is not a member of Iterator[String] - did you mean vowelsSetIterator.drop?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc1hl4_7p.scala:20:62 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev\
    \ is not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpc1hl4_7p.scala:21:62 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpc1hl4_7p.scala:31:60 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e[0m\
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc1hl4_7p.scala:33:64\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e[0m = vowelsSetIterator"
  stdout: ''
  timestamp: 1659799282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    ))\n        val vowelsSet3 = vowelsSet.diff(vowelsSet2)\n        val vowelsSet4\
    \ = vowelsSet.diff(vowelsSet3)\n        val vowelsSet5 = vowelsSet.diff(vowelsSet4)\n\
    \        val vowelsSet6 = vowelsSet.diff(vowelsSet5)\n        val vowelsSet7 =\
    \ vowelsSet.diff(vowelsSet6)\n        val vowelsSet8 = vowelsSet.diff(vowelsSet7)\n\
    \        val vowelsSet9 = vowelsSet.diff(vowelsSet8)\n        val vowelsSet10\
    \ = vowelsSet.diff(vowelsSet9)\n        val vowelsSet11 = vowelsSet.diff(vowelsSet10)\n\
    \        val vowelsSet12 = vowelsSet.diff(vowelsSet11)\n        val vowelsSet13\
    \ = vowelsSet.diff(vowelsSet12)\n        val vowelsSet14 = vowelsSet.diff(vowelsSet13)\n\
    \        val vowelsSet15 = vowelsSet.diff(vowelsSet14)\n        val vowelsSet16\
    \ = vowelsSet.diff(vowelsSet15)\n        val vowelsSet17 = vowelsSet.diff(vowelsSet16)\n\
    \        val vowelsSet18 = vowelsSet.diff(vowelsSet17)\n        val vowelsSet19\
    \ = vowelsSet.diff(vowelsSet18)\n        val vowelsSet20 = vowelsSet.diff(vowelsSet19)\n\
    \        val vowelsSet21 = vowelsSet.diff(vowelsSet20)\n        val vowelsSet22\
    \ = vowelsSet.diff(vowelsSet21)\n        val vowelsSet23 = vowelsSet.diff(vowelsSet22)\n\
    \        val vowelsSet24 = vowelsSet.diff(vowelsSet23)\n        val vowelsSet25\
    \ = vowelsSet.diff(vowelsSet24)\n        val vowelsSet26 = vowelsSet.diff(vowelsSet25)\n\
    \        val vowelsSet27 = vowelsSet.diff(vowelsSet26)\n        val vowelsSet28\
    \ = vowelsSet.diff(vowelsSet27)\n        val vowelsSet29 = vowelsSet.diff(vowelsSet28)\n\
    \        val vowelsSet30 = vowelsSet.diff(vowelsSet29)\n        val vowelsSet31\
    \ = vowelsSet.diff(vowelsSet30)\n        val vowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_4rkei_b.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_4rkei_b.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val consonants = word.filter(x => !vowels.contains(x))\n\
    \        val consonantsCount = consonants.length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowels\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo_0h2mm3.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo_0h2mm3.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = consonants.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_0h2mm3.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = consonants.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_0h2mm3.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = consonants.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_0h2mm3.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = consonants.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e["
  stdout: ''
  timestamp: 1659799283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount2 = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount3 = word.filter(x => vowels.contains(x)).size\n      \
    \  val vowelsCount4 = word.filter(x => vowels.contains(x)).size\n        val vowelsCount5\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount6 = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount7 = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount8 = word.filter(x => vowels.contains(x)).size\n      \
    \  val vowelsCount9 = word.filter(x => vowels.contains(x)).size\n        val vowelsCount10\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount11 = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount12 = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount13 = word.filter(x => vowels.contains(x)).size\n     \
    \   val vowelsCount14 = word.filter(x => vowels.contains(x)).size\n        val\
    \ vowelsCount15 = word.filter(x => vowels.contains(x)).size\n        val vowelsCount16\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount17 = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount18 = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount19 = word.filter(x => vowels.contains(x)).size\n     \
    \   val vowelsCount20 = word.filter(x => vowels.contains(x)).size\n        val\
    \ vowelsCount21 = word.filter(x => vowels.contains(x)).size\n        val vowelsCount22\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount23 = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount24 = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount25 = word.filter(x => vowels.contains(x)).size\n     \
    \   val vowelsCount26 = word.filter(x => vowels.contains(x)).size\n        val\
    \ vowelsCount27 = word.filter(x => vowels.contains(x)).size\n        val vowelsCount28\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsxzdc99j.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpsxzdc99j.scala:16:59 --------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \  Found:    (x : Char)\n\e[31m   |\e[0m                                     \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsxzdc99j.scala:17:60 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount2\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m                       \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                                    Found:    (x : Char)\n\e[31m   |\e[0m   \
    \                                                 Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsxzdc99j.scala:18:60 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount3\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m                \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                           Found:    (x : Char)\n\e[31m   |\e\
    [0m                                                    Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsxzdc99j.scala:19:60 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount4\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).size\n\e[31m\e["
  stdout: ''
  timestamp: 1659799284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowel = \"\"\n\
    \        var lastVowel = \"\"\n        var lastConsonant = \"\"\n        var lastConsonantIndex\
    \ = 0\n        var lastVowelIndex = 0\n        for(i <- 0 until word.length){\n\
    \            if(vowels.contains(word.charAt(i))){\n                vowel = word.charAt(i)\n\
    \                lastVowelIndex = i\n            }\n            if(word.charAt(i)\
    \ == word.charAt(word.length-1)){\n                lastConsonantIndex = i\n  \
    \              lastConsonant = word.charAt(i)\n            }\n        }\n    \
    \    if(vowel.length == 0){\n            return \"\"\n        }\n        if(lastVowelIndex\
    \ == lastConsonantIndex){\n            return vowel\n        }\n        if(lastVowelIndex\
    \ < lastConsonantIndex){\n            val leftVowel = word.substring(lastVowelIndex+1,\
    \ lastConsonantIndex-1)\n            val rightVowel = word.substring(lastConsonantIndex+1,\
    \ word.length-1)\n            val leftVowelIndex = word.lastIndexOf(leftVowel)\n\
    \            val rightVowelIndex = word.lastIndexOf(rightVowel)\n            if(leftVowelIndex\
    \ < rightVowelIndex){\n                return leftVowel\n            }\n     \
    \       return rightVowel\n        }\n        val leftVowel = word.substring(lastVowelIndex+1,\
    \ lastConsonantIndex-1)\n        val rightVowel = word.substring(lastConsonantIndex+1,\
    \ word.length-1)\n        val leftVowelIndex = word.lastIndexOf(leftVowel)\n \
    \       val rightVowelIndex = word.lastIndexOf(rightVowel)\n        if(leftVowelIndex\
    \ > rightVowelIndex){\n            return leftVowel\n        }\n        return\
    \ rightVowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp45j__iwc.scala:22:42\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m(vowels.contains(word.charAt(i))){\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    Char\n\e[31m   |\e[0m     \
    \                          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp45j__iwc.scala:23:35 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                vowel = word.charAt(i)\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                 Found:    Char\n\e[31m   |\e[0m                        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp45j__iwc.scala:28:43\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m                lastConsonant\
    \ = word.charAt(i)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    Char\n\e[31m   |\e\
    [0m                                Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val consonants = Set(\"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val consonantsCount\
    \ = word.filter(c => consonants.contains(c)).size\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val consonantsCount = word.filter(c =>\
    \ consonants.contains(c)).size\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val consonantsCount = word.filter(c => consonants.contains(c)).size\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).size\n       \
    \ val consonantsCount = word.filter(c => consonants.contains(c)).size\n      \
    \  val vowelsCount = word.filter(c => vowels.contains(c)).size\n        val consonantsCount\
    \ = word.filter(c => consonants.contains(c)).size\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val consonantsCount = word.filter(c =>\
    \ consonants.contains(c)).size\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val consonantsCount = word.filter(c => consonants.contains(c)).size\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).size\n       \
    \ val consonantsCount = word.filter(c => consonants.contains(c)).size\n      \
    \  val vowelsCount = word.filter(c => vowels.contains(c)).size\n        val consonantsCount\
    \ = word.filter(c => consonants.contains(c)).size\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val consonantsCount = word.filter(c =>\
    \ consonants.contains(c)).size\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val consonantsCount = word.filter(c => consonants.contains(c)).size\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).size\n       \
    \ val consonantsCount = word.filter(c => consonants.contains(c)).size\n      \
    \  val vowelsCount = word.filter(c => vowels.contains(c)).size\n        val consonantsCount\
    \ = word.filter(c => consonants.contains(c)).\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdv7gjauc.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpdv7gjauc.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mc\e\
    [0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdv7gjauc.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mc\e[0m => consonants.contains(c)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdv7gjauc.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mc\e[0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdv7gjauc.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mc\e[0m => consonants.contains(c)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcon"
  stdout: ''
  timestamp: 1659799283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.filter(_ != word.charAt(word.length-1))\n\
    \        val vowelsSet3 = vowelsSet.filter(_ != word.charAt(word.length-2))\n\
    \        val vowelsSet4 = vowelsSet.filter(_ != word.charAt(word.length-3))\n\
    \        val vowelsSet5 = vowelsSet.filter(_ != word.charAt(word.length-4))\n\
    \        val vowelsSet6 = vowelsSet.filter(_ != word.charAt(word.length-5))\n\
    \        val vowelsSet7 = vowelsSet.filter(_ != word.charAt(word.length-6))\n\
    \        val vowelsSet8 = vowelsSet.filter(_ != word.charAt(word.length-7))\n\
    \        val vowelsSet9 = vowelsSet.filter(_ != word.charAt(word.length-8))\n\
    \        val vowelsSet10 = vowelsSet.filter(_ != word.charAt(word.length-9))\n\
    \        val vowelsSet11 = vowelsSet.filter(_ != word.charAt(word.length-10))\n\
    \        val vowelsSet12 = vowelsSet.filter(_ != word.charAt(word.length-11))\n\
    \        val vowelsSet13 = vowelsSet.filter(_ != word.charAt(word.length-12))\n\
    \        val vowelsSet14 = vowelsSet.filter(_ != word.charAt(word.length-13))\n\
    \        val vowelsSet15 = vowelsSet.filter(_ != word.charAt(word.length-14))\n\
    \        val vowelsSet16 = vowelsSet.filter(_ != word.charAt(word.length-15))\n\
    \        val vowelsSet17 = vowelsSet.filter(_ != word.charAt(word.length-16))\n\
    \        val vowelsSet18 = vowelsSet.filter(_ != word.charAt(word.length-17))\n\
    \        val vowelsSet19 = vowelsSet.filter(_ != word.charAt(word.length-18))\n\
    \        val vowelsSet20 = vowelsSet.filter(_ != word.charAt(word.length-19))\n\
    \        val vowelsSet21 = vowelsSet.filter(_ != word.charAt(word.length-20))\n\
    \        val vowelsSet22 = vowelsSet.filter(_ != word.charAt(word.length-21))\n\
    \        val vowelsSet23 = vowelsSet.filter(_ != word.charAt(word.length-22))\n\
    \        val vowelsSet24 = vowelsSet.filter(_ != word.charAt(word.length-23))\n\
    \        val vowelsSet25 = vowelsSet.filter(_ != word.charAt(word.length-24))\n\
    \        val vowelsSet26 = vowelsSet.filter(_ != word.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjgrr1n_w.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpjgrr1n_w.scala:17:42\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowelsSet.filter(_ != word.charAt(word.length-\e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpjgrr1n_w.scala:18:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet3\e[0m = vowelsSet.filter(_\
    \ != word.charAt(word.length-\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpjgrr1n_w.scala:19:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet4\e[0m = vowelsSet.filter(_\
    \ != word.charAt(word.length-\e[31m3\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpjgrr1n_w.scala:20:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet5\e[0m = vowelsSet.filter(_\
    \ != word.charAt(word.length-\e[31m4\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpjgrr1n_w.scala:21:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet6\e[0m = vowelsSet.filter(_\
    \ != word.charAt(word.length-\e[31m5\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                    "
  stdout: ''
  timestamp: 1659799285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.split(\"\
    [^aeiou]\").length\n        val vowelsCount2 = word.split(\"[^AEIOU]\").length\n\
    \        val vowelsCount3 = word.split(\"[^AEIOUaeiou]\").length\n        val\
    \ vowelsCount4 = word.split(\"[^aeiouAEIOU]\").length\n        val vowelsCount5\
    \ = word.split(\"[^aeiouAEIOUaeiou]\").length\n        val vowelsCount6 = word.split(\"\
    [^aeiouAEIOUaeiouAEIOU]\").length\n        val vowelsCount7 = word.split(\"[^aeiouAEIOUaeiouAEIOUaeiou]\"\
    ).length\n        val vowelsCount8 = word.split(\"[^aeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).length\n        val vowelsCount9 = word.split(\"[^aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou]\"\
    ).length\n        val vowelsCount10 = word.split(\"[^aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).length\n        val vowelsCount11 = word.split(\"[^aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou]\"\
    ).length\n        val vowelsCount12 = word.split(\"[^aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).length\n        val vowelsCount13 = word.split(\"[^aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou]\"\
    ).length\n        val vowelsCount14 = word.split(\"[^aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).length\n        val vowelsCount15 = word.split(\"[^aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou]\"\
    ).length\n        val vowelsCount16 = word.split(\"[^aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).length\n        val vowelsCount17 = word.split(\"[^aeiouAEIOUaeiouAE\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpn225m3qk.scala:32:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount17\e[0m = word.split(\"\
    [^aeiouAEIOUaeiouAE\n\e[31m\e[31m   |\e[0m                                   \
    \    ^\e[0m\n\e[31m   |\e[0m                                       unclosed string\
    \ literal\n\e[31m\e[31m-- Error: /tmp/tmpn225m3qk.scala:34:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpn225m3qk.scala:33:5 ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn225m3qk.scala:34:4 -------------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m\
    \    Not found: [^aeiouAEIOUaeiouAEdef\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorIterator\
    \ = vowelsSetIterator.iterator\n        val vowelsSetIteratorIteratorIterator\
    \ = vowelsSetIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp43is2pn.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp43is2pn.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpp43is2pn.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Erro"
  stdout: ''
  timestamp: 1659799283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgda95_e1.scala:52:25 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgda95_e1.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n\
    \        var vowelIndex2 = word.length - 1\n        var vowelIndex3 = word.length\
    \ - 1\n        var vowelIndex4 = word.length - 1\n        var vowelIndex5 = word.length\
    \ - 1\n        var vowelIndex6 = word.length - 1\n        var vowelIndex7 = word.length\
    \ - 1\n        var vowelIndex8 = word.length - 1\n        var vowelIndex9 = word.length\
    \ - 1\n        var vowelIndex10 = word.length - 1\n        var vowelIndex11 =\
    \ word.length - 1\n        var vowelIndex12 = word.length - 1\n        var vowelIndex13\
    \ = word.length - 1\n        var vowelIndex14 = word.length - 1\n        var vowelIndex15\
    \ = word.length - 1\n        var vowelIndex16 = word.length - 1\n        var vowelIndex17\
    \ = word.length - 1\n        var vowelIndex18 = word.length - 1\n        var vowelIndex19\
    \ = word.length - 1\n        var vowelIndex20 = word.length - 1\n        var vowelIndex21\
    \ = word.length - 1\n        var vowelIndex22 = word.length - 1\n        var vowelIndex23\
    \ = word.length - 1\n        var vowelIndex24 = word.length - 1\n        var vowelIndex25\
    \ = word.length - 1\n        var vowelIndex26 = word.length - 1\n        var vowelIndex27\
    \ = word.length - 1\n        var vowelIndex28 = word.length - 1\n        var vowelIndex29\
    \ = word.length - 1\n        var vowelIndex30 = word.length - 1\n        var vowelIndex31\
    \ = word.length - 1\n        var vowelIndex32 = word.length - 1\n        var vowelIndex33\
    \ = word.length - 1\n        var vowelIndex34 = word.length - 1\n        var vowelIndex35\
    \ = word.length - 1\n        var vowelIndex36 = word.length - 1\n        var vowelIndex37\
    \ = word.length - 1\n        var vowelIndex38 = word.length - 1\n        var vowelIndex39\
    \ = word.length - 1\n        var vowelIndex40 = word.length - 1\n        var vowelIndex41\
    \ = word.length - 1\n        var vowelIndex42 = word.length - 1\n        var vowelIndex43\
    \ = word.length - 1\n        var vowelIndex44 = word.length - 1\n        var vowelIndex45\
    \ = word.length - 1\n        var vowelIndex46 = word.length - 1\n        var vowelIndex47\
    \ = word.length - 1\n        var vowelIndex48 = word.length - 1\n        var vowelIndex49\
    \ = word.length - 1\n        var vowelIndex50 = word.length - 1\n        var vowelIndex51\
    \ = word.length - 1\n        var vowelIndex52 = word.length - 1\n        var vowelIndex53\
    \ = word.length - 1\n        var vowelIndex54 = word.length - 1\n        var vowelIndex55\
    \ = word.length - 1\n        var vowelIndex56 = word.length - 1\n        var vowelIndex57\
    \ = word.length\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpduiyoyq8.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0pn_suby.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0pn_suby.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIterator.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pn_suby.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pn_suby.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1659799256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        var vowelsCount\
    \ = word.filter(c => vowels.contains(c)).size\n        var vowelsCount2 = word.filter(c\
    \ => vowels.contains(c)).size\n        var vowelsCount3 = word.filter(c => vowels.contains(c)).size\n\
    \        var vowelsCount4 = word.filter(c => vowels.contains(c)).size\n      \
    \  var vowelsCount5 = word.filter(c => vowels.contains(c)).size\n        var vowelsCount6\
    \ = word.filter(c => vowels.contains(c)).size\n        var vowelsCount7 = word.filter(c\
    \ => vowels.contains(c)).size\n        var vowelsCount8 = word.filter(c => vowels.contains(c)).size\n\
    \        var vowelsCount9 = word.filter(c => vowels.contains(c)).size\n      \
    \  var vowelsCount10 = word.filter(c => vowels.contains(c)).size\n        var\
    \ vowelsCount11 = word.filter(c => vowels.contains(c)).size\n        var vowelsCount12\
    \ = word.filter(c => vowels.contains(c)).size\n        var vowelsCount13 = word.filter(c\
    \ => vowels.contains(c)).size\n        var vowelsCount14 = word.filter(c => vowels.contains(c)).size\n\
    \        var vowelsCount15 = word.filter(c => vowels.contains(c)).size\n     \
    \   var vowelsCount16 = word.filter(c => vowels.contains(c)).size\n        var\
    \ vowelsCount17 = word.filter(c => vowels.contains(c)).size\n        var vowelsCount18\
    \ = word.filter(c => vowels.contains(c)).size\n        var vowelsCount19 = word.filter(c\
    \ => vowels.contains(c)).size\n        var vowelsCount20 = word.filter(c => vowels.contains(c)).size\n\
    \        var vowelsCount21 = word.filter(c => vowels.contains(c)).size\n     \
    \   var vowelsCount22 = word.filter(c => vowels.contains(c)).size\n        var\
    \ vowelsCount23 = word.filter(c => vowels.contains(c)).size\n        var vowelsCount24\
    \ = word.filter(c => vowels.contains(c)).size\n        var vowelsCount25 = word.filter(c\
    \ => vowels.contains(c)).size\n        var vowelsCount26 = word.filter(c => vowels.contains(c)).size\n\
    \        var vowelsCount27 = word.filter(c => vowels.contains(c)).size\n     \
    \   var vowelsCount28 = word.filter(c => vowels.contains(c)).size\n        var\
    \ vowelsCount29 = word.filter(c => vowels.contains(c)).size\n        var vowelsCount30\
    \ = word.filter(c => vowels.contains(c)).\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpui5a0i1w.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpui5a0i1w.scala:16:59 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mc\e\
    [0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e[0m                       \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                                   Found:    (c : Char)\n\e[31m   |\e[0m    \
    \                                                Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpui5a0i1w.scala:17:60 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount2\e[0m = word.filter(\e\
    [36mc\e[0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e[0m                \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                           Found:    (c : Char)\n\e[31m   |\e\
    [0m                                                    Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpui5a0i1w.scala:18:60 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount3\e[0m = word.filter(\e\
    [36mc\e[0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e[0m                \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                           Found:    (c : Char)\n\e[31m   |\e\
    [0m                                                    Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpui5a0i1w.scala:19:60 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount4\e[0m = word.filter(\e\
    [36mc\e[0m => vowels.contains(c)).si"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        var vowelIndex\
    \ = 0\n        var vowel = \"\"\n        var consonantIndex = 0\n        var consonant\
    \ = \"\"\n        var vowelCount = 0\n        var consonantCount = 0\n       \
    \ var vowelEndIndex = 0\n        var consonantEndIndex = 0\n        var vowelStartIndex\
    \ = 0\n        var consonantStartIndex = 0\n        var vowelEnd = 0\n       \
    \ var consonantEnd = 0\n        var vowelStart = 0\n        var consonantStart\
    \ = 0\n        var vowelEndCount = 0\n        var consonantEndCount = 0\n    \
    \    var vowelStartCount = 0\n        var consonantStartCount = 0\n        var\
    \ vowelEndIndexCount = 0\n        var consonantEndIndexCount = 0\n        var\
    \ vowelStartIndexCount = 0\n        var consonantStartIndexCount = 0\n       \
    \ var vowelEndCountCount = 0\n        var consonantEndCountCount = 0\n       \
    \ var vowelStartCountCount = 0\n        var consonantStartCountCount = 0\n   \
    \     var vowelEndIndexCountCount = 0\n        var consonantEndIndexCountCount\
    \ = 0\n        var vowelStartIndexCountCount = 0\n        var consonantStartIndexCountCount\
    \ = 0\n        var vowelEndCountCountCount = 0\n        var consonantEndCountCountCount\
    \ = 0\n        var vowelStartCountCountCount = 0\n        var consonantStartCountCountCount\
    \ = 0\n        var vowelEndIndexCountCountCount = 0\n        var consonantEndIndexCountCountCount\
    \ = 0\n        var vowelStartIndexCountCountCount = 0\n        var consonantStartIndexCountCountCount\
    \ = 0\n        var vowelEndCountCountCount = 0\n        var consonantEndCountCountCountCount\
    \ = 0\n        var vowelStartCountCountCount = 0\n        var consonantStartCountCountCountCount\
    \ = 0\n        var vowelEndIndexCountCountCount = 0\n        var consonantEndIndexCountCountCount\
    \ = 0\n        var vowelStartIndexCountCountCount = 0\n        var consonantStartIndexCountCountCount\
    \ = 0\n        var vowelEndCountCountCount = 0\n        var consonantEndCountCountCountCount\
    \ = 0\n        var vowelStartCountCountCount = 0\n        var consonantStartCountCountCountCount\
    \ = 0\n        var vowelEndIndexCountCountCount = 0\n        var consonantEndIndexCountCountCount\
    \ = 0\n        var vowelStartIndexCountCountCount = 0\n        var consonantStartIndexCountCountCount\
    \ = 0\n        var vowelEndCountCountCount = 0\n        var consonantEndCountCountCountCount\
    \ = 0\n        var vowelStartCountCountCount = 0\n        var consonantStartCountCountCountCount\
    \ = 0\n        var vowelEndIndexCountCountCount = 0\n        var con\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3i4qlg5g.scala:76:4 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3i4qlg5g.scala:54:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m54 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mvowelEndCountCountCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelEndCountCountCount\
    \ is already defined as \e[33mvariable\e[0m \e[35mvowelEndCountCountCount\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3i4qlg5g.scala:56:12 ---------------------------\e[0m\e[0m\n\e[31m56\
    \ |\e[0m        \e[33mvar\e[0m \e[36mvowelStartCountCountCount\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelStartCountCountCount is already defined as \e[33mvariable\e[0m\
    \ \e[35mvowelStartCountCountCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3i4qlg5g.scala:58:12 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mvar\e[0m \e[36mvowelEndIndexCountCountCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelEndIndexCountCountCount is already defined as \e[33mvariable\e\
    [0m \e[35mvowelEndIndexCountCountCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3i4qlg5g.scala:59:12 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mvar\e[0m \e[36mconsonantEndIndexCountCountCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantEndIndexCountCountCount is already defined as \e\
    [33mvariable\e[0m \e[35mconsonantEndIndexCountCountCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote tha"
  stdout: ''
  timestamp: 1659799283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val consonants = word.filter(x => !vowels.contains(x))\n\
    \        val consonantsCount = consonants.length\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelIndex = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpi5yt7bm7.scala:44:24 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mvowelIndex\e[0m = \n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpi5yt7bm7.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelIndex\e[0m = consonants.lastIndexWhere(\e\
    [36mx\e[0m => vowels.contains(x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi5yt7bm7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelIndex\e[0m = consonants.lastIndexWhere(\e\
    [36mx\e[0m => vowels.contains(x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi5yt7bm7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelIndex\e[0m = consonants.lastIndexWhere(\e\
    [36mx\e[0m => vowels.contains(x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi5yt7bm7.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvo"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy55p44x9.scala:22:62 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpy55p44x9.scala:34:64 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpy55p44x9.scala:36:68\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy55p44x9.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet\
    \ = vowels.toSet\n        val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3\
    \ = vowelsSet2.reverse\n        val vowelsSet4 = vowelsSet3.reverse\n        val\
    \ vowelsSet5 = vowelsSet4.reverse\n        val vowelsSet6 = vowelsSet5.reverse\n\
    \        val vowelsSet7 = vowelsSet6.reverse\n        val vowelsSet8 = vowelsSet7.reverse\n\
    \        val vowelsSet9 = vowelsSet8.reverse\n        val vowelsSet10 = vowelsSet9.reverse\n\
    \        val vowelsSet11 = vowelsSet10.reverse\n        val vowelsSet12 = vowelsSet11.reverse\n\
    \        val vowelsSet13 = vowelsSet12.reverse\n        val vowelsSet14 = vowelsSet13.reverse\n\
    \        val vowelsSet15 = vowelsSet14.reverse\n        val vowelsSet16 = vowelsSet15.reverse\n\
    \        val vowelsSet17 = vowelsSet16.reverse\n        val vowelsSet18 = vowelsSet17.reverse\n\
    \        val vowelsSet19 = vowelsSet18.reverse\n        val vowelsSet20 = vowelsSet19.reverse\n\
    \        val vowelsSet21 = vowelsSet20.reverse\n        val vowelsSet22 = vowelsSet21.reverse\n\
    \        val vowelsSet23 = vowelsSet22.reverse\n        val vowelsSet24 = vowelsSet23.reverse\n\
    \        val vowelsSet25 = vowelsSet24.reverse\n        val vowelsSet26 = vowelsSet25.reverse\n\
    \        val vowelsSet27 = vowelsSet26.reverse\n        val vowelsSet28 = vowelsSet27.reverse\n\
    \        val vowelsSet29 = vowelsSet28.reverse\n        val vowelsSet30 = vowelsSet29.reverse\n\
    \        val vowelsSet31 = vowelsSet30.reverse\n        val vowelsSet32 = vowelsSet31.reverse\n\
    \        val vowelsSet33 = vowelsSet32.reverse\n        val vowelsSet34 = vowelsSet33.reverse\n\
    \        val vowelsSet35 = vowelsSet34.reverse\n        val vowelsSet36 = vowelsSet35.reverse\n\
    \        val vowelsSet37 = vowelsSet36.reverse\n        val vowelsSet38 = vowelsSet37.reverse\n\
    \        val vowelsSet39 = vowelsSet38.reverse\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprqsdfr0o.scala:55:11 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmprqsdfr0o.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprqsdfr0o.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsBefore = vowels.toList.filter(_.length\
    \ < vowelsCount)\n        val vowelsAfter = vowels.toList.filter(_.length > vowelsCount)\n\
    \        val vowelsBeforeCount = vowelsBefore.toList.map(_.length).sum\n     \
    \   val vowelsAfterCount = vowelsAfter.toList.map(_.length).sum\n        val vowelsBeforeAndAfter\
    \ = vowelsBefore.toList ++ vowelsAfter.toList\n        val vowelsBeforeAndAfterCount\
    \ = vowelsBeforeAndAfter.toList.map(_.length).sum\n        val vowelsBeforeAndAfterCountMinusOne\
    \ = vowelsBeforeAndAfterCount - 1\n        val vowelsBeforeAndAfterCountMinusTwo\
    \ = vowelsBeforeAndAfterCount - 2\n        val vowelsBeforeAndAfterCountMinusThree\
    \ = vowelsBeforeAndAfterCount - 3\n        val vowelsBeforeAndAfterCountMinusFour\
    \ = vowelsBeforeAndAfterCount - 4\n        val vowelsBeforeAndAfterCountMinusFive\
    \ = vowelsBeforeAndAfterCount - 5\n        val vowelsBeforeAndAfterCountMinusSix\
    \ = vowelsBeforeAndAfterCount - 6\n        val vowelsBeforeAndAfterCountMinusSeven\
    \ = vowelsBeforeAndAfterCount - 7\n        val vowelsBeforeAndAfterCountMinusEight\
    \ = vowelsBeforeAndAfterCount - 8\n        val vowelsBeforeAndAfterCountMinusNine\
    \ = vowelsBeforeAndAfterCount - 9\n        val vowelsBeforeAndAfterCountMinusTen\
    \ = vowelsBeforeAndAfterCount - 10\n        val vowelsBeforeAndAfterCountMinusEleven\
    \ = vowelsBeforeAndAfterCount - 11\n        val vowelsBeforeAndAfterCountMinusTwelve\
    \ = vowelsBeforeAndAfterCount - 12\n        val vowelsBeforeAndAfterCountMinusThirteen\
    \ = vowelsBeforeAndAfterCount - 13\n        val vowelsBeforeAndAfterCountMinusFourteen\
    \ = vowelsBeforeAndAfterCount - 14\n        val vowelsBeforeAndAfterCountMinusFifteen\
    \ = vowelsBeforeAndAfterCount - 15\n        val vowelsBeforeAndAfterCountMinusSixteen\
    \ = vowelsBeforeAndAfterCount - 16\n        val vowelsBeforeAndAfterCountMinusSeventeen\
    \ = vowelsBefore\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphrvdmm9w.scala:40:5\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsBefore =\
    \ Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsAfter = Set(\"a\"\
    , \"e\", \"i\", \"o\", \"u\")\n        var vowelsBefore2 = Set(\"a\", \"e\", \"\
    i\", \"o\", \"u\")\n        var vowelsAfter2 = Set(\"a\", \"e\", \"i\", \"o\"\
    , \"u\")\n        var vowelsBefore3 = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        var vowelsAfter3 = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var\
    \ vowelsBefore4 = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsAfter4\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsBefore5 = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsAfter5 = Set(\"a\", \"e\"\
    , \"i\", \"o\", \"u\")\n        var vowelsBefore6 = Set(\"a\", \"e\", \"i\", \"\
    o\", \"u\")\n        var vowelsAfter6 = Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )\n        var vowelsBefore7 = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n      \
    \  var vowelsAfter7 = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsBefore8\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsAfter8 = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsBefore9 = Set(\"a\", \"e\"\
    , \"i\", \"o\", \"u\")\n        var vowelsAfter9 = Set(\"a\", \"e\", \"i\", \"\
    o\", \"u\")\n        var vowelsBefore10 = Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )\n        var vowelsAfter10 = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n      \
    \  var vowelsBefore11 = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsAfter11\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsBefore12 = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsAfter12 = Set(\"a\", \"e\"\
    , \"i\", \"o\", \"u\")\n        var vowelsBefore13 = Set(\"a\", \"e\", \"i\",\
    \ \"o\", \"u\")\n        var vowelsAfter13 = Set(\"a\", \"e\", \"i\", \"o\", \"\
    u\")\n        var vowelsBefore14 = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n  \
    \      var vowelsAfter14 = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var\
    \ vowelsBefore15 = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd_ktuf6u.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet\
    \ = vowels.toSet;\n        val vowelsSet2 = vowelsSet.filter(_ != \"y\");\n  \
    \      val vowelsSet3 = vowelsSet.filter(_ != \"u\");\n        val vowelsSet4\
    \ = vowelsSet.filter(_ != \"i\");\n        val vowelsSet5 = vowelsSet.filter(_\
    \ != \"e\");\n        val vowelsSet6 = vowelsSet.filter(_ != \"a\");\n       \
    \ val vowelsSet7 = vowelsSet.filter(_ != \"o\");\n        val vowelsSet8 = vowelsSet.filter(_\
    \ != \"u\");\n        val vowelsSet9 = vowelsSet.filter(_ != \"i\");\n       \
    \ val vowelsSet10 = vowelsSet.filter(_ != \"e\");\n        val vowelsSet11 = vowelsSet.filter(_\
    \ != \"a\");\n        val vowelsSet12 = vowelsSet.filter(_ != \"o\");\n      \
    \  val vowelsSet13 = vowelsSet.filter(_ != \"u\");\n        val vowelsSet14 =\
    \ vowelsSet.filter(_ != \"i\");\n        val vowelsSet15 = vowelsSet.filter(_\
    \ != \"e\");\n        val vowelsSet16 = vowelsSet.filter(_ != \"a\");\n      \
    \  val vowelsSet17 = vowelsSet.filter(_ != \"o\");\n        val vowelsSet18 =\
    \ vowelsSet.filter(_ != \"u\");\n        val vowelsSet19 = vowelsSet.filter(_\
    \ != \"i\");\n        val vowelsSet20 = vowelsSet.filter(_ != \"e\");\n      \
    \  val vowelsSet21 = vowelsSet.filter(_ != \"a\");\n        val vowelsSet22 =\
    \ vowelsSet.filter(_ != \"o\");\n        val vowelsSet23 = vowelsSet.filter(_\
    \ != \"u\");\n        val vowelsSet24 = vowelsSet.filter(_ != \"i\");\n      \
    \  val vowelsSet25 = vowelsSet.filter(_ != \"e\");\n        val vowelsSet26 =\
    \ vowelsSet.filter(_ != \"a\");\n        val vowelsSet27 = vowelsSet.filter(_\
    \ != \"o\");\n        val vowelsSet28 = vowelsSet.filter(_ != \"u\");\n      \
    \  val vowelsSet29 = vowelsSet.filter(_ != \"i\");\n        val vowelsSet30 =\
    \ vowelsSet.filter(_ != \"e\");\n        val vowelsSet31 = vowelsSet.filter(_\
    \ != \"a\");\n        val vowelsSet32 = vowelsSet.filter(_ != \"o\");\n      \
    \  val vowels\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp31_n7_wd.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp31_n7_wd.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.prev\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvc235lcm.scala:19:54 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpvc235lcm.scala:20:62 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpvc235lcm.scala:21:62 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpvc235lcm.scala:35:72 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.prev\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m    Not found: vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvc235lcm.scala:36:76\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \e[31m\e[31m   |\e[0m                                 "
  stdout: ''
  timestamp: 1659799293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowelsCount = vowels.count(word contains _)\n        val consonantsCount = consonants.count(word\
    \ contains _)\n        val vowelsCount = vowelsCount + consonantsCount\n     \
    \   val vowelsCount = vowelsCount + 1\n        val vowelsCount = vowelsCount +\
    \ 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount = vowelsCount\
    \ + 1\n        val vowelsCount = vowelsCount + 1\n        val vowel\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpopjyt9ju.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpopjyt9ju.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount + consonantsCount\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpopjyt9ju.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpopjyt9ju.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpopjyt9ju.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpopjyt9ju.sca"
  stdout: ''
  timestamp: 1659799293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).length\n        val consonants = word.filter(c => !vowels.contains(c))\n\
    \        val consonantsCount = consonants.length\n        val vowelsCount = consonantsCount\
    \ - vowelsCount\n        val vowelsCount = vowelsCount + vowelsCount - 1\n   \
    \     val vowelsCount = vowelsCount / consonantsCount\n        val vowelsCount\
    \ = vowelsCount + vowelsCount - 1\n        val vowelsCount = vowelsCount / consonantsCount\n\
    \        val vowelsCount = vowelsCount + vowelsCount - 1\n        val vowelsCount\
    \ = vowelsCount / consonantsCount\n        val vowelsCount = vowelsCount + vowelsCount\
    \ - 1\n        val vowelsCount = vowelsCount / consonantsCount\n        val vowelsCount\
    \ = vowelsCount + vowelsCount - 1\n        val vowelsCount = vowelsCount / consonantsCount\n\
    \        val vowelsCount = vowelsCount + vowelsCount - 1\n        val vowelsCount\
    \ = vowelsCount / consonantsCount\n        val vowelsCount = vowelsCount + vowelsCount\
    \ - 1\n        val vowelsCount = vowelsCount / consonantsCount\n        val vowelsCount\
    \ = vowelsCount + vowelsCount - 1\n        val vowelsCount = vowelsCount / consonantsCount\n\
    \        val vowelsCount = vowelsCount + vowelsCount - 1\n        val vowelsCount\
    \ = vowelsCount / consonantsCount\n        val vowelsCount = vowelsCount + vowelsCount\
    \ - 1\n        val vowelsCount = vowelsCount / consonantsCount\n        val vowelsCount\
    \ = vowelsCount + vowelsCount - 1\n        val vowelsCount = vowelsCount / consonantsCount\n\
    \        val vowelsCount = vowelsCount + vowelsCount - 1\n        val vowelsCount\
    \ = vowelsCount / consonantsCount\n        val vowelsCount = vowelsCount + vowelsCount\
    \ - 1\n        val vowelsCount = vowelsCount / consonantsCount\n        val vowelsCount\
    \ = vowelsCount + vowelsCount - 1\n        val vowelsCount = vowelsCount / consonantsCount\n\
    \        val vowelsCount = vowelsCount + vowelsCount - 1\n        val vowelsCount\
    \ = vowelsCount / consonantsCount\n        val vowelsCount = vowelsCount + vowelsCount\
    \ - 1\n        val vowels\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplbphd2rk.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplbphd2rk.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = consonantsCount - vowelsCount\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplbphd2rk.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount + vowelsCount - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplbphd2rk.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount / consonantsCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplbphd2rk.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + vowelsCount\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of "
  stdout: ''
  timestamp: 1659799294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    ))\n        val vowelsSet3 = vowelsSet.diff(vowelsSet2)\n        val vowelsSet4\
    \ = vowelsSet.diff(vowelsSet3)\n        val vowelsSet5 = vowelsSet.diff(vowelsSet4)\n\
    \        val vowelsSet6 = vowelsSet.diff(vowelsSet5)\n        val vowelsSet7 =\
    \ vowelsSet.diff(vowelsSet6)\n        val vowelsSet8 = vowelsSet.diff(vowelsSet7)\n\
    \        val vowelsSet9 = vowelsSet.diff(vowelsSet8)\n        val vowelsSet10\
    \ = vowelsSet.diff(vowelsSet9)\n        val vowelsSet11 = vowelsSet.diff(vowelsSet10)\n\
    \        val vowelsSet12 = vowelsSet.diff(vowelsSet11)\n        val vowelsSet13\
    \ = vowelsSet.diff(vowelsSet12)\n        val vowelsSet14 = vowelsSet.diff(vowelsSet13)\n\
    \        val vowelsSet15 = vowelsSet.diff(vowelsSet14)\n        val vowelsSet16\
    \ = vowelsSet.diff(vowelsSet15)\n        val vowelsSet17 = vowelsSet.diff(vowelsSet16)\n\
    \        val vowelsSet18 = vowelsSet.diff(vowelsSet17)\n        val vowelsSet19\
    \ = vowelsSet.diff(vowelsSet18)\n        val vowelsSet20 = vowelsSet.diff(vowelsSet19)\n\
    \        val vowelsSet21 = vowelsSet.diff(vowelsSet20)\n        val vowelsSet22\
    \ = vowelsSet.diff(vowelsSet21)\n        val vowelsSet23 = vowelsSet.diff(vowelsSet22)\n\
    \        val vowelsSet24 = vowelsSet.diff(vowelsSet23)\n        val vowelsSet25\
    \ = vowelsSet.diff(vowelsSet24)\n        val vowelsSet26 = vowelsSet.diff(vowelsSet25)\n\
    \        val vowelsSet27 = vowelsSet.diff(vowelsSet26)\n        val vowelsSet28\
    \ = vowelsSet.diff(vowelsSet27)\n        val vowelsSet29 = vowelsSet.diff(vowelsSet28)\n\
    \        val vowelsSet30 = vowelsSet.diff(vowelsSet29)\n        val vowelsSet31\
    \ = vowelsSet.diff(vowelsSet30)\n        val vowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_4rkei_b.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_4rkei_b.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgda95_e1.scala:52:25 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgda95_e1.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgda95_e1.scala:52:25 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgda95_e1.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowelsCount = word.count(vowels)\n        val consonantsCount = word.count(consonants)\n\
    \        val vowelsCountInWord = word.count(vowels.toList)\n        val consonantsCountInWord\
    \ = word.count(consonants.toList)\n        val vowelsCountInWordInWord = word.count(vowels.toList\
    \ ++ consonants.toList)\n        val consonantsCountInWordInWord = word.count(consonants.toList\
    \ ++ vowels.toList)\n        val vowelsCountInWordInWordInWord = word.count(vowels.toList\
    \ ++ consonants.toList ++ vowels.toList)\n        val consonantsCountInWordInWordInWord\
    \ = word.count(consonants.toList ++ vowels.toList ++ consonants.toList)\n    \
    \    val vowelsCountInWordInWordInWordInWord = word.count(vowels.toList ++ consonants.toList\
    \ ++ vowels.toList ++ consonants.toList)\n        val consonantsCountInWordInWordInWordInWord\
    \ = word.count(consonants.toList ++ vowels.toList ++ consonants.toList ++ vowels.toList\
    \ ++ consonants.toList)\n        val vowelsCountInWordInWordInWordInWordInWord\
    \ = word.count(vowels.toList ++ consonants.toList ++ vowels.toList ++ consonants.toList\
    \ ++ vowels.toList ++ consonants.toList)\n        val consonantsCountInWordInWordInWordInWordInWord\
    \ = word.count(consonants.toList ++ vowels.toList ++ consonants.toList ++ vowels.toList\
    \ ++ consonants.toList ++ vowels.toList ++ consonants.toList)\n        val vowelsCountInWordInWordInWordInWordInWordInWord\
    \ = word.count(vowels.toList ++ consonants.toList ++ vowels.toList ++ consonants.toList\
    \ ++ vowels.toList ++ consonants.toList ++ vowels.toList ++ consonants.toList)\n\
    \        val consonantsCountInWordInWordIn\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt4xrrx_i.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpt4xrrx_i.scala:17:37 --------------------\e[0m\e[0m\n\e[31m17 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(vowels)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               Found:    (vowels : scala.collection.mutable.Set[String])\n\e\
    [31m   |\e[0m               Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpt4xrrx_i.scala:18:41 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.count(consonants)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m           Found:    (consonants : scala.collection.mutable.Set[String])\n\
    \e[31m   |\e[0m           Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpt4xrrx_i.scala:19:50 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountInWord\e[0m =\
    \ word.count(vowels.toList)\n\e[31m\e[31m   |\e[0m                           \
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                  Found:    List[String]\n\e[31m   |\e[0m                   \
    \                        Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpt4xrrx_i.scala:20:58 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCountInWord\e\
    [0m = word.count(consonants.toList)\n\e[31m\e[31m   |\e[0m                   \
    \                            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                                      Found:    List[String]\n\e[31m   |\e[0m\
    \            "
  stdout: ''
  timestamp: 1659799296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.size\n\
    \        val vowelsSet = vowels.toSet\n        val vowelsSetSize = vowelsSet.size\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorSize\
    \ = vowelsSetIterator.size\n        val vowelsSetIteratorNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextSize\
    \ = vowelsSetIteratorNextNext.size\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextSize\
    \ = vowelsSetIteratorNextNextNext.size\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNext.size\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNextNext.size\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNextNextNext.size\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.size\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.size\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.size\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNext\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjc36d4d7.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjc36d4d7.scala:23:62\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next\n\e[31m\e[31m\
    \   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjc36d4d7.scala:33:60 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e[0m\
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjc36d4d7.scala:35:64\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjc36d4d7.scala:37:68\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextN"
  stdout: ''
  timestamp: 1659799294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgda95_e1.scala:52:25 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgda95_e1.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toSeq.map(x\
    \ => vowels.count(y => x == y))\n        val vowelsCount = vowelsCount.toSeq.sortBy(x\
    \ => x).reverse\n        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word.length).reverse\n\
    \        val vowelsCount = vowelsCount.takeWhile(x => x < word\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphlfb6jxo.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphlfb6jxo.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount.toSeq.sortBy(\e[36mx\e[0m => x).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphlfb6jxo.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.takeWhile(\e\
    [36mx\e[0m => x < word.length).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphlfb6jxo.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.takeWhile(\e\
    [36mx\e[0m => x < word.length).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphlfb6jxo.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.takeWhile(\e\
    [36mx\e[0m => x < word.length).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   "
  stdout: ''
  timestamp: 1659799295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowelsSet = vowels.toSet\n        val consonantsSet = consonants.toSet\n   \
    \     val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = conson\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpztdbb2b1.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetSize\e[0m = vowelsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvowelsSetSize is already defined as \e[33mvalue\e[0m \e[35mvowelsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpztdbb2b1.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetSize\e[0m = consonantsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsSetSize is already defined as \e[33mvalue\e[0m \e[35mconsonantsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpztdbb2b1.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetSize\e[0m = vowelsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvowelsSetSize is already defined as \e[33mvalue\e[0m \e[35mvowelsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpztdbb2b1.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetSize\e[0m = consonantsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsSetSize is already defined as \e[33mvalue\e[0m \e[35mconsonantsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpztdbb2b1.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetSize\e[0m = vowelsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxur95krm.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxur95krm.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxur95krm.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxur95krm.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxur95krm.scala"
  stdout: ''
  timestamp: 1659799270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.count(vowels)\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.count(consonants)\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsBefore = word.substring(vowelsIndex\
    \ - 1, vowelsIndex + vowelsCount)\n        val consonantsBefore = word.substring(consonantsIndex\
    \ - 1, consonantsIndex + consonantsCount)\n        val vowelsAfter = word.substring(vowelsIndex\
    \ + 1, vowelsIndex + vowelsCount + 1)\n        val consonantsAfter = word.substring(consonantsIndex\
    \ + 1, consonantsIndex + consonantsCount + 1)\n        val vowelsBeforeCount =\
    \ vowelsBefore.count(vowels)\n        val consonantsBeforeCount = consonantsBefore.count(consonants)\n\
    \        val vowelsAfterCount = vowelsAfter.count(vowels)\n        val consonantsAfterCount\
    \ = consonantsAfter.count(consonants)\n        val vowelsBeforeIndex = (vowelsIndex\
    \ - vowelsBeforeCount) match {\n            case -1 => \"\"\n            case\
    \ x => vowelsBefore.substring(0, x)\n        }\n        val consonantsBeforeIndex\
    \ = (consonantsIndex - consonantsBeforeCount) match {\n            case -1 =>\
    \ \"\"\n            case x => consonantsBefore.substring(0, x)\n        }\n  \
    \      val vowelsAfterIndex = (vowelsIndex + vowelsCount + 1) match {\n      \
    \      case -1 => \"\"\n            case x => vowelsAfter.substring(x, x + vowelsCount)\n\
    \        }\n        val consonantsAfterIndex = (consonantsIndex + consonantsCount\
    \ + 1) match {\n            case -1 => \"\"\n            case x => consonantsAfter.substring(x,\
    \ x + consonantsCount)\n        }\n        val vowelsBeforeVowel = vowelsBefore.substring(vowelsBeforeIndex.length,\
    \ vowelsBeforeIndex.length + vowelsBeforeCount)\n        val consonantsBeforeVowel\
    \ = consonantsBefore.substring(consonantsBeforeIndex.length, consonantsBeforeIndex.length\
    \ + consonantsBeforeCount)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb2d6ymvk.scala:16:37\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e\
    [0m = word.count(vowels)\n\e[31m\e[31m   |\e[0m                              \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    (vowels : scala.collection.mutable.Set[String])\n\
    \e[31m   |\e[0m               Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb2d6ymvk.scala:18:41 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.count(consonants)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m           Found:    (consonants : scala.collection.mutable.Set[String])\n\
    \e[31m   |\e[0m           Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb2d6ymvk.scala:19:46 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    (elem : Char)\n\
    \e[31m   |\e[0m                                              Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb2d6ymvk.scala:20:50\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e\
    [0m = word.lastIndexWhere(consonants.contains)\n\e[31m\e[31m   |\e[0m        \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                                      Found:    (elem : Char)\n\e[31m   |\e[0m\
    \                                                 Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb2d6ymvk.sc"
  stdout: ''
  timestamp: 1659799297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0pn_suby.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0pn_suby.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIterator.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pn_suby.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pn_suby.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1659799256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    ))\n        val vowelsSet3 = vowelsSet.diff(vowelsSet2)\n        val vowelsSet4\
    \ = vowelsSet.diff(vowelsSet3)\n        val vowelsSet5 = vowelsSet.diff(vowelsSet4)\n\
    \        val vowelsSet6 = vowelsSet.diff(vowelsSet5)\n        val vowelsSet7 =\
    \ vowelsSet.diff(vowelsSet6)\n        val vowelsSet8 = vowelsSet.diff(vowelsSet7)\n\
    \        val vowelsSet9 = vowelsSet.diff(vowelsSet8)\n        val vowelsSet10\
    \ = vowelsSet.diff(vowelsSet9)\n        val vowelsSet11 = vowelsSet.diff(vowelsSet10)\n\
    \        val vowelsSet12 = vowelsSet.diff(vowelsSet11)\n        val vowelsSet13\
    \ = vowelsSet.diff(vowelsSet12)\n        val vowelsSet14 = vowelsSet.diff(vowelsSet13)\n\
    \        val vowelsSet15 = vowelsSet.diff(vowelsSet14)\n        val vowelsSet16\
    \ = vowelsSet.diff(vowelsSet15)\n        val vowelsSet17 = vowelsSet.diff(vowelsSet16)\n\
    \        val vowelsSet18 = vowelsSet.diff(vowelsSet17)\n        val vowelsSet19\
    \ = vowelsSet.diff(vowelsSet18)\n        val vowelsSet20 = vowelsSet.diff(vowelsSet19)\n\
    \        val vowelsSet21 = vowelsSet.diff(vowelsSet20)\n        val vowelsSet22\
    \ = vowelsSet.diff(vowelsSet21)\n        val vowelsSet23 = vowelsSet.diff(vowelsSet22)\n\
    \        val vowelsSet24 = vowelsSet.diff(vowelsSet23)\n        val vowelsSet25\
    \ = vowelsSet.diff(vowelsSet24)\n        val vowelsSet26 = vowelsSet.diff(vowelsSet25)\n\
    \        val vowelsSet27 = vowelsSet.diff(vowelsSet26)\n        val vowelsSet28\
    \ = vowelsSet.diff(vowelsSet27)\n        val vowelsSet29 = vowelsSet.diff(vowelsSet28)\n\
    \        val vowelsSet30 = vowelsSet.diff(vowelsSet29)\n        val vowelsSet31\
    \ = vowelsSet.diff(vowelsSet30)\n        val vowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_4rkei_b.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_4rkei_b.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowelsBefore = vowels.toList.dropRight(word.length)\n        val vowelsAfter\
    \ = vowels.toList.dropLeft(word.length)\n        val consonantsBefore = consonants.toList.dropRight(word.length)\n\
    \        val consonantsAfter = consonants.toList.dropLeft(word.length)\n     \
    \   val vowelsBetween = vowelsBefore.zip(vowelsAfter).filter(_._1.isUpper).filter(_._2.isUpper)\n\
    \        val consonantsBetween = consonantsBefore.zip(consonantsAfter).filter(_._1.isUpper).filter(_._2.isUpper)\n\
    \        val vowelsBeforeAndAfter = vowelsBefore.zip(vowelsAfter).filter(_._1.isLower).filter(_._2.isLower)\n\
    \        val consonantsBeforeAndAfter = consonantsBefore.zip(consonantsAfter).filter(_._1.isLower).filter(_._2.isLower)\n\
    \        val vowelsBeforeAndConsonantsBetween = vowelsBefore.zip(consonantsBefore).filter(_._1.isUpper).filter(_._2.isUpper)\n\
    \        val vowelsBeforeAndConsonantsBeforeAndAfter = vowelsBefore.zip(consonantsBefore).filter(_._1.isLower).filter(_._2.isLower).filter(_._1.isUpper).filter(_._2.isUpper)\n\
    \        val vowelsBeforeAndConsonantsBeforeAndConsonantsBetween = vowelsBefore.zip(consonantsBefore).filter(_._1.isLower).filter(_._2.isLower).filter(_._1.isUpper).filter(_._2.isUpper).filter(_._1.isLower).filter(_._2.isLower)\n\
    \        val vowelsBeforeAndConsonantsBeforeAndConsonantsBetween = vowelsBefore.zip(consonantsBefore).filter(_._1.isLower).filter(_._2.isLower).filter(_._1.isUpper).filter(_._2.isUpper).filter(_._1.isLower).filter(_._2.isLower).filter(_._1.isUpper).filter(_._2.isUpper)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdnteghwc.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsBeforeAndConsonantsBeforeAndConsonantsBetween\e\
    [0m = vowelsBefore.zip(consonantsBefore).filter(_._1.isLower).filter(_._2.isLower).filter(_._1.isUpper).filter(_._2.isUpper).filter(_._1.isLower).filter(_._2.isLower).filter(_._1.isUpper).filter(_._2.isUpper)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsBeforeAndConsonantsBeforeAndConsonantsBetween is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsBeforeAndConsonantsBeforeAndConsonantsBetween\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpdnteghwc.scala:18:40 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsAfter\e[0m = vowels.toList.dropLeft(word.length)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          value dropLeft is not a member of List[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdnteghwc.scala:20:48 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mconsonantsAfter\e[0m = consonants.toList.dropLeft(word.length)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value dropLeft is not a member of\
    \ List[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdnteghwc.scala:21:70\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsBetween\e[0m = vowelsBefore.zip(vowelsAfter).filter(_._1.isUpper).filter(_._2.isUpper)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    "
  stdout: ''
  timestamp: 1659799298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv6fw3cuc.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv6fw3cuc.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv6fw3cuc.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv6fw3cuc.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv6fw3cuc.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.ma"
  stdout: ''
  timestamp: 1659799295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgda95_e1.scala:52:25 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgda95_e1.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextPrev\
    \ = vowelsSetIteratorNextPrev.prev\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNextPrev.prev\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextPrev.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextPrev.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextPrev.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextPrev.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextPrev.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsjut7nhd.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNextPrev.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsjut7nhd.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextPrev\e\
    [0m = vowelsSetIteratorNextNextPrev.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsjut7nhd.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNext is already defined\
    \ as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNext\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpsjut7nhd.scala:19:54 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue prev is not a member of Iterator[String] - did"
  stdout: ''
  timestamp: 1659799296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0pn_suby.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0pn_suby.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIterator.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pn_suby.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pn_suby.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1659799256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsIndex = word.zipWithIndex.filter(_._2\
    \ % vowelsCount == 0).map(_._1).last\n        val vowelsIndex = vowelsIndex.getOrElse(\"\
    \")\n        val vowelsIndex = vowelsIndex.substring(vowelsIndex.length-1)\n \
    \       val vowelsIndex = vowelsIndex.substring(0, vowelsIndex.length-1)\n   \
    \     val vowelsIndex = vowelsIndex.substring(vowelsIndex.length-1)\n        val\
    \ vowelsIndex = vowelsIndex.substring(0, vowelsIndex.length-1)\n        val vowelsIndex\
    \ = vowelsIndex.substring(vowelsIndex.length-1)\n        val vowelsIndex = vowelsIndex.substring(0,\
    \ vowelsIndex.length-1)\n        val vowelsIndex = vowelsIndex.substring(vowelsIndex.length-1)\n\
    \        val vowelsIndex = vowelsIndex.substring(0, vowelsIndex.length-1)\n  \
    \      val vowelsIndex = vowelsIndex.substring(vowelsIndex.length-1)\n       \
    \ val vowelsIndex = vowelsIndex.substring(0, vowelsIndex.length-1)\n        val\
    \ vowelsIndex = vowelsIndex.substring(vowelsIndex.length-1)\n        val vowelsIndex\
    \ = vowelsIndex.substring(0, vowelsIndex.length-1)\n        val vowelsIndex =\
    \ vowelsIndex.substring(vowelsIndex.length-1)\n        val vowelsIndex = vowelsIndex.substring(0,\
    \ vowelsIndex.length-1)\n        val vowelsIndex = vowelsIndex.substring(vowelsIndex.length-1)\n\
    \        val vowelsIndex = vowelsIndex.substring(0, vowelsIndex.length-1)\n  \
    \      val vowelsIndex = vowelsIndex.substring(vowelsIndex.length-1)\n       \
    \ val vowelsIndex = vowelsIndex.substring(0, vowelsIndex.length-1)\n        val\
    \ vowelsIndex = vowelsIndex.substring(vowelsIndex.length-1)\n        val vowelsIndex\
    \ = vowelsIndex.substring(0, vowelsIndex.length-1)\n        val vowelsIndex =\
    \ vowelsIndex.substring(vowelsIndex.length-1)\n        val vowelsIndex = vowelsIndex.substring(0,\
    \ vowelsIndex.length-1)\n        val vowelsIndex = vowelsIndex.substring(vowelsIndex.length-1)\n\
    \        val vowelsIndex = vowelsIndex.substring(0, vowelsIndex.length-1)\n  \
    \      val vowelsIndex = vowelsIndex.substring(vowelsIndex.length-1)\n       \
    \ val vowelsIndex = vowelsIndex.substring(0, vowelsIndex.length-1)\n        val\
    \ vowelsIndex = vowelsIndex.substring(vowelsIndex.length-1)\n        val vowelsIndex\
    \ = vowelsIndex\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplbufk4qt.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.getOrElse(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplbufk4qt.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.substring(vowelsIndex.length-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplbufk4qt.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.substring(\e\
    [31m0\e[0m, vowelsIndex.length-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplbufk4qt.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.substring(vowelsIndex.length-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplbufk4qt.scala:22:1"
  stdout: ''
  timestamp: 1659799296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n\
    \        var vowel = \"\"\n        var index = word.length - 1\n        while(index\
    \ >= 0) {\n            if(vowels.contains(word.charAt(index))) {\n           \
    \     vowelIndex = index\n                vowel = word.charAt(index)\n       \
    \     }\n            index--\n        }\n        if(vowelIndex == 0) return \"\
    \"\n        var vowelIndex2 = word.length - 1\n        var vowel2 = \"\"\n   \
    \     var index2 = word.length - 1\n        while(index2 >= 0) {\n           \
    \ if(vowels.contains(word.charAt(index2))) {\n                vowelIndex2 = index2\n\
    \                vowel2 = word.charAt(index2)\n            }\n            index2--\n\
    \        }\n        if(vowelIndex2 == 0) return \"\"\n        var vowelIndex3\
    \ = word.length - 1\n        var vowel3 = \"\"\n        var index3 = word.length\
    \ - 1\n        while(index3 >= 0) {\n            if(vowels.contains(word.charAt(index3)))\
    \ {\n                vowelIndex3 = index3\n                vowel3 = word.charAt(index3)\n\
    \            }\n            index3--\n        }\n        if(vowelIndex3 == 0)\
    \ return \"\"\n        var vowelIndex4 = word.length - 1\n        var vowel4 =\
    \ \"\"\n        var index4 = word.length - 1\n        while(index4 >= 0) {\n \
    \           if(vowels.contains(word.charAt(index4))) {\n                vowelIndex4\
    \ = index4\n                vowel4 = word.charAt(index4)\n            }\n    \
    \        index4--\n        }\n        if(vowelIndex4 == 0) return \"\"\n     \
    \   var vowelIndex5 = word.length - 1\n        var vowel5 = \"\"\n        var\
    \ index5 = word.length - 1\n        while(index5 >= 0) {\n            if(vowels.contains(word.charAt(index5)))\
    \ {\n                vowelIndex5 = index5\n                vowel5 = word.charAt(index5)\n\
    \            }\n            index5--\n        }\n        if(vowelIndex5 == 0)\
    \ return \"\"\n        var vowelIndex6 = word.length - 1\n        var vowel6 =\
    \ \"\"\n        var index6 = word.length - 1\n        while(index6 >= 0) {\n \
    \           if(vowels.contains(word.charAt(index6))) {\n                vowelIndex6\
    \ = index6\n                vowel6 = word.charAt(index6)\n            }\n    \
    \        index6--\n        }\n        if(vowelIndex6 == 0) return \"\"\n     \
    \   var vowelIndex7 = word.length - 1\n        var vowel7 = \"\"\n        var\
    \ index7 = word.length - 1\n        while(index7 >= 0) {\n            if(vowels.contains(word.charAt(index7)))\
    \ {\n                vowelIndex7 = index7\n                vowel7 = word.charAt(index7)\n\
    \            }\n            index7--\n        }\n        if(vowelIndex7 == 0)\
    \ return \"\"\n        var vowelIndex8 = word.length - 1\n        var vowel8 =\
    \ \"\"\n        var index8 = word.length - 1\n        while(index8 >= 0) {\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1sp05r9j.scala:24:19 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            index--\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1sp05r9j.scala:35:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m            index2--\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmp1sp05r9j.scala:46:20 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m            index3--\n\e[31m\e[31m   |\e[0m         \
    \           ^\e[0m\n\e[31m   |\e[0m                    expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1sp05r9j.scala:57:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m57 |\e[0m            index4--\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmp1sp05r9j.scala:68:20 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m            index5--\n\e[31m\e[31m   |\e[0m         \
    \           ^\e[0m\n\e[31m   |\e[0m                    expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1sp05r9j.scala:79:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m79 |\e[0m            index6--\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m"
  stdout: ''
  timestamp: 1659799299
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsCount = word.filter(c\
    \ => vowels.contains(c)).length\n        var vowelsCount2 = word.filter(c => vowels.contains(c)).dropRight(vowelsCount).length\n\
    \        var vowelsCount3 = word.filter(c => vowels.contains(c)).dropRight(vowelsCount2).dropRight(vowelsCount).length\n\
    \        var vowelsCount4 = word.filter(c => vowels.contains(c)).dropRight(vowelsCount3).dropRight(vowelsCount2).dropRight(vowelsCount).dropRight(vowelsCount).length\n\
    \        var vowelsCount5 = word.filter(c => vowels.contains(c)).dropRight(vowelsCount4).dropRight(vowelsCount3).dropRight(vowelsCount2).dropRight(vowelsCount).dropRight(vowelsCount).dropRight(vowelsCount).length\n\
    \        var vowelsCount6 = word.filter(c => vowels.contains(c)).dropRight(vowelsCount5).dropRight(vowelsCount4).dropRight(vowelsCount3).dropRight(vowelsCount2).dropRight(vowelsCount).dropRight(vowelsCount).dropRight(vowelsCount).dropRight(vowelsCount).length\n\
    \        var vowelsCount7 = word.filter(c => vowels.contains(c)).dropRight(vowelsCount6).dropRight(vowelsCount5).dropRight(vowelsCount4).dropRight(vowelsCount3).dropRight(vowelsCount2).dropRight(vowelsCount).dropRight(vowelsCount).dropRight(vowelsCount).dropRight(vowelsCount).dropRight(vowelsCount).length\n\
    \        var vowelsCount8 = word.filter(c => vowels.contains(c)).dropRight(vowelsCount7).dropRight(vowelsCount6).dropRight(vowelsCount5).dropRight(vowelsCount4).dropRight(vowelsCount3).dropRight(vowelsCount2).dropRight(vowelsCount).dropRight(vowelsCount).dropRight(vowelsCount).dropRight(vowelsCount).dropRight(vowelsCount).dropRight(vowelsCount).length\n\
    \        var vowelsCount9 = word.filter(c => vowels.contains(c)).dropRight(vowelsCount8).dropRight(vowelsCount7).dropRight(vowelsCount6).dropRight(vowelsCount5).dropRight(vowelsCount4).dropRight(vowels\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5c7vqd78.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5c7vqd78.scala:16:59 --------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \        \e[33mvar\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mc\e[0m => vowels.contains(c)).length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \  Found:    (c : Char)\n\e[31m   |\e[0m                                     \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5c7vqd78.scala:17:60 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount2\e[0m = word.filter(\e[36mc\e\
    [0m => vowels.contains(c)).dropRight(vowelsCount).length\n\e[31m\e[31m   |\e[0m\
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                                    Found:    (c : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5c7vqd78.scala:18:60\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount3\e\
    [0m = word.filter(\e[36mc\e[0m => vowels.contains(c)).dropRight(vowelsCount2).dropRight(vowelsCount).length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^\e[0m\n\e[31m   |\e[0m                                                 \
    \   Found:    (c : Char)\n\e[31m   |\e[0m                                    \
    \                Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5c7vqd78.scala:19:60 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mvar\e[0m \e[36mv"
  stdout: ''
  timestamp: 1659799298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0pn_suby.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0pn_suby.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIterator.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pn_suby.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pn_suby.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1659799256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount2 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount3 = word.filter(x => vowels.contains(x)).size\n      \
    \  var vowelsCount4 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount5\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount6 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount7 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount8 = word.filter(x => vowels.contains(x)).size\n      \
    \  var vowelsCount9 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount10\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount11 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount12 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount13 = word.filter(x => vowels.contains(x)).size\n     \
    \   var vowelsCount14 = word.filter(x => vowels.contains(x)).size\n        var\
    \ vowelsCount15 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount16\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount17 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount18 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount19 = word.filter(x => vowels.contains(x)).size\n     \
    \   var vowelsCount20 = word.filter(x => vowels.contains(x)).size\n        var\
    \ vowelsCount21 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount22\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount23 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount24 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount25 = word.filter(x => vowels.contains(x)).size\n     \
    \   var vowelsCount26 = word.filter(x => vowels.contains(x)).size\n        var\
    \ vowelsCount27 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount28\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount29 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount30 = word.filter(x => vowels.contains(x)).size\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4bn4l4m1.scala:16:59\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e\
    [0m                                                           ^\e[0m\n\e[31m \
    \  |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4bn4l4m1.scala:17:60\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount2\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4bn4l4m1.scala:18:60\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount3\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4bn4l4m1.scala:19:60\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount4\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m               "
  stdout: ''
  timestamp: 1659799301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgda95_e1.scala:52:25 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgda95_e1.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.count(vowels)\n\
    \        val vowelsCountReverse = word.count(vowels.reverse)\n        val vowelsCountReverse2\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse3 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse4 = word.count(vowels.reverse)\n        val vowelsCountReverse5\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse6 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse7 = word.count(vowels.reverse)\n        val vowelsCountReverse8\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse9 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse10 = word.count(vowels.reverse)\n        val vowelsCountReverse11\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse12 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse13 = word.count(vowels.reverse)\n        val vowelsCountReverse14\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse15 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse16 = word.count(vowels.reverse)\n        val vowelsCountReverse17\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse18 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse19 = word.count(vowels.reverse)\n        val vowelsCountReverse20\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse21 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse22 = word.count(vowels.reverse)\n        val vowelsCountReverse23\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse24 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse25 = word.count(vowels.reverse)\n        val vowelsCountReverse26\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse27 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse28 = word.count(vowels.reverse)\n        val vowelsCountReverse29\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse30 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse31 = word.count(vowels.reverse)\n        val vowelsCountReverse32\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse33 = word.count(vowels.reverse)\n\
    \        val vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp34v_zuze.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp34v_zuze.scala:16:37 --------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(vowels)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               Found:    (vowels : scala.collection.mutable.Set[String])\n\e\
    [31m   |\e[0m               Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp34v_zuze.scala:17:51 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountReverse\e[0m\
    \ = word.count(vowels.reverse)\n\e[31m\e[31m   |\e[0m                        \
    \                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not\
    \ a member of scala.collection.mutable.Set[String] - did you mean vowels.reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp34v_zuze.scala:18:52 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountReverse2\e[0m\
    \ = word.count(vowels.reverse)\n\e[31m\e[31m   |\e[0m                        \
    \                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not\
    \ a member of scala.collection.mutable.Set[String] - did you mean vowels.reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp34v_zuze.scala:19:52 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountReverse3\e[0m\
    \ = word.count(vowels.reverse)\n\e[31m\e[31m   |\e[0m                        \
    \                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not\
    \ a member of scala.collection.mutable.Set[String] - did you mean vowels.reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp34v_zuze.scala:20:52 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountReverse4\e[0m\
    \ = word.count(vowels.reverse)\n\e[31m\e[31m   |\e[0m                 "
  stdout: ''
  timestamp: 1659799301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val consonantsCount = word.filter(x =>\
    \ !vowels.contains(x)).size\n        val vowelsCount = vowelsCount.toDouble\n\
    \        val consonantsCount = consonantsCount.toDouble\n        val vowelsCountInWord\
    \ = word.filter(x => vowels.contains(x)).size\n        val consonantsCountInWord\
    \ = word.filter(x => !vowels.contains(x)).size\n        val vowelsCountInWord\
    \ = vowelsCountInWord.toDouble\n        val consonantsCountInWord = consonantsCountInWord.toDouble\n\
    \        val vowelsCountInWord = vowelsCountInWord.toDouble\n        val consonantsCountInWord\
    \ = consonantsCountInWord.toDouble\n        val vowelsCountInWord = vowelsCountInWord.toDouble\n\
    \        val consonantsCountInWord = consonantsCountInWord.toDouble\n        val\
    \ vowelsCountInWord = vowelsCountInWord.toDouble\n        val consonantsCountInWord\
    \ = consonantsCountInWord.toDouble\n        val vowelsCountInWord = vowelsCountInWord.toDouble\n\
    \        val consonantsCountInWord = consonantsCountInWord.toDouble\n        val\
    \ vowelsCountInWord = vowelsCountInWord.toDouble\n        val consonantsCountInWord\
    \ = consonantsCountInWord.toDouble\n        val vowelsCountInWord = vowelsCountInWord.toDouble\n\
    \        val consonantsCountInWord = consonantsCountInWord.toDouble\n        val\
    \ vowelsCountInWord = vowelsCountInWord.toDouble\n        val consonantsCountInWord\
    \ = consonantsCountInWord.toDouble\n        val vowelsCountInWord = vowelsCountInWord.toDouble\n\
    \        val consonantsCountInWord = consonantsCountInWord.toDouble\n        val\
    \ vowelsCountInWord = vowelsCountInWord.toDouble\n        val consonantsCountInWord\
    \ = consonantsCountInWord.toDouble\n        val vowelsCountInWord = vowelsCountInWord.toDouble\n\
    \        val consonantsCountInWord = consonantsCountInWord.toDouble\n        val\
    \ vowelsCountInWord = vowelsCountInWord.toDouble\n        val consonantsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfvv344fj.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfvv344fj.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount.toDouble\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfvv344fj.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantsCount\e[0m = consonantsCount.toDouble\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mconsonantsCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfvv344fj.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCountInWord\e[0m = vowelsCountInWord.toDouble\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvowelsCountInWord is already defined as \e[33mvalue\e[0m \e[35mvowelsCountInWord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfvv344fj.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCountInWord\e[0m = consonantsCountInWord.toDouble\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCountInWord is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsCountInWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be"
  stdout: ''
  timestamp: 1659799298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgda95_e1.scala:52:25 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgda95_e1.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet\
    \ = vowels.toSet\n        val vowelsSet2 = vowelsSet.filter(_ != \"y\")\n    \
    \    val vowelsSet3 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet4 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet5 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet6 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet7 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet8 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet9 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet10 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet11 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet12 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet13 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet14 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet15 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet16 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet17 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet18 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet19 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet20 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet21 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet22 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet23 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet24 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet25 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet26 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet27 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet28 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet29 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet30 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet31 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet32 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet33 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet34 = vowelsSet.filter(_\
    \ != \"y\")\n        \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp65iw11jj.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.split(\"\
    [aeiou]\").length\n        val consonants = word.split(\"[^aeiou]\").length\n\
    \        val vowelsCount = word.split(\"[aeiou]\").length\n        val consonantsCount\
    \ = word.split(\"[^aeiou]\").length\n        val vowelsCount = word.split(\"[aeiou]\"\
    ).length\n        val consonantsCount = word.split(\"[^aeiou]\").length\n    \
    \    val vowelsCount = word.split(\"[aeiou]\").length\n        val consonantsCount\
    \ = word.split(\"[^aeiou]\").length\n        val vowelsCount = word.split(\"[aeiou]\"\
    ).length\n        val consonantsCount = word.split(\"[^aeiou]\").length\n    \
    \    val vowelsCount = word.split(\"[aeiou]\").length\n        val consonantsCount\
    \ = word.split(\"[^aeiou]\").length\n        val vowelsCount = word.split(\"[aeiou]\"\
    ).length\n        val consonantsCount = word.split(\"[^aeiou]\").length\n    \
    \    val vowelsCount = word.split(\"[aeiou]\").length\n        val consonantsCount\
    \ = word.split(\"[^aeiou]\").length\n        val vowelsCount = word.split(\"[aeiou]\"\
    ).length\n        val consonantsCount = word.split(\"[^aeiou]\").length\n    \
    \    val vowelsCount = word.split(\"[aeiou]\").length\n        val consonantsCount\
    \ = word.split(\"[^aeiou]\").length\n        val vowelsCount = word.split(\"[aeiou]\"\
    ).length\n        val consonantsCount = word.split(\"[^aeiou]\").length\n    \
    \    val vowelsCount = word.split(\"[aeiou]\").length\n        val consonantsCount\
    \ = word.split(\"[^aeiou]\").length\n        val vowelsCount = word.split(\"[aeiou]\"\
    ).length\n        val consonantsCount = word.split(\"[^aeiou]\").length\n    \
    \    val vowelsCount = word.split(\"[aeiou]\").length\n        val consonantsCount\
    \ = word.split(\"[^aeiou]\").length\n        val vowelsCount = word.split(\"[aeiou]\"\
    ).length\n        val consonantsCount = word.split(\"[^aeiou]\").length\n    \
    \    val vowelsCount = word.split(\"[aeiou]\").length\n        val consonantsCount\
    \ = word.split(\"[^aeiou]\").length\n        val vowelsCount = word.split(\"[aeiou]\"\
    ).length\n        val consonantsCount = word.split(\"[^aeiou]\").length\n    \
    \    val vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1wnkd5ga.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1wnkd5ga.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = word.split(\e[31m\"[aeiou]\"\e[0m).length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1wnkd5ga.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.split(\e[31m\"\
    [aeiou]\"\e[0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1wnkd5ga.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.split(\e\
    [31m\"[^aeiou]\"\e[0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1wnkd5ga.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.split(\e\
    [31m\"[aeiou]\"\e[0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ d"
  stdout: ''
  timestamp: 1659799299
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorIterator\
    \ = vowelsSetIterator.iterator\n        val vowelsSetIteratorIteratorIterator\
    \ = vowelsSetIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp43is2pn.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp43is2pn.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpp43is2pn.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Erro"
  stdout: ''
  timestamp: 1659799283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet\
    \ = vowels.toSet\n        val vowelsSetIterator = vowelsSet.iterator\n       \
    \ val vowelsSetIteratorNext = vowelsSetIterator.next\n        val vowelsSetIteratorPrev\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextPrev = vowelsSetIteratorNextPrev.prev\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNextPrev.prev\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextPrev.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextPrev.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextPrev.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextPrev.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextPrev.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSet\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu6md31_5.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNextPrev.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu6md31_5.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextPrev\e\
    [0m = vowelsSetIteratorNextNextPrev.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu6md31_5.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNext is already defined\
    \ as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNext\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpu6md31_5.scala:19:54 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue prev is not a member of Iterator[Strin"
  stdout: ''
  timestamp: 1659799300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n\
    \        var vowel = \"\"\n        var lastVowel = \"\"\n        var lastConsonant\
    \ = \"\"\n        var lastVowelIndex = 0\n        var lastConsonantIndex = 0\n\
    \        var currentVowel = \"\"\n        var currentConsonant = \"\"\n      \
    \  var currentVowelIndex = 0\n        var currentConsonantIndex = 0\n        var\
    \ currentVowelIndex = 0\n        var currentConsonantIndex = 0\n        var currentVowelIndex\
    \ = 0\n        var currentConsonantIndex = 0\n        var currentVowelIndex =\
    \ 0\n        var currentConsonantIndex = 0\n        var currentVowelIndex = 0\n\
    \        var currentConsonantIndex = 0\n        var currentVowelIndex = 0\n  \
    \      var currentConsonantIndex = 0\n        var currentVowelIndex = 0\n    \
    \    var currentConsonantIndex = 0\n        var currentVowelIndex = 0\n      \
    \  var currentConsonantIndex = 0\n        var currentVowelIndex = 0\n        var\
    \ currentConsonantIndex = 0\n        var currentVowelIndex = 0\n        var currentConsonantIndex\
    \ = 0\n        var currentVowelIndex = 0\n        var currentConsonantIndex =\
    \ 0\n        var currentVowelIndex = 0\n        var currentConsonantIndex = 0\n\
    \        var currentVowelIndex = 0\n        var currentConsonantIndex = 0\n  \
    \      var currentVowelIndex = 0\n        var currentConsonantIndex = 0\n    \
    \    var currentVowelIndex = 0\n        var currentConsonantIndex = 0\n      \
    \  var currentVowelIndex = 0\n        var currentConsonantIndex = 0\n        var\
    \ currentVowelIndex = 0\n        var currentConsonantIndex = 0\n        var currentVowelIndex\
    \ = 0\n        var currentConsonantIndex = 0\n        var currentVowelIndex =\
    \ 0\n        var currentConsonantIndex = 0\n        var currentVowelIndex = 0\n\
    \        var currentConsonantIndex = 0\n        var currentVowelIndex = 0\n  \
    \      var currentConsonantIndex = 0\n        var currentVowelIndex = 0\n    \
    \    var currentConsonantIndex = 0\n        var currentVowelIndex = 0\n      \
    \  var currentConsonantIndex = 0\n        var currentVowelIndex = 0\n        var\
    \ currentConsonantIndex = 0\n        var currentVowelIndex = 0\n        var currentConsonantIndex\
    \ = 0\n        var currentVowelIndex = 0\n        var currentConsonantIndex =\
    \ 0\n        var currentVowelIndex = 0\n        var currentConsonantIndex = 0\n\
    \        var currentVowelIndex = 0\n        var \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpfy6skriv.scala:79:11 ---------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpfy6skriv.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36mcurrentVowelIndex\e[0m =\
    \ \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mcurrentVowelIndex is already defined as \e[33mvariable\e[0m \e[35mcurrentVowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfy6skriv.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mvar\e[0m \e[36mcurrentConsonantIndex\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mcurrentConsonantIndex is already defined as \e[33mvariable\e[0m \e[35mcurrentConsonantIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfy6skriv.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mvar\e[0m \e[36mcurrentVowelIndex\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentVowelIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentVowelIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpfy6skriv.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentConsonantIndex\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcurrentConsonantIndex is already defined as \e[33mvariable\e[0m \e[35mcurrentConsonantIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods "
  stdout: ''
  timestamp: 1659799300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toSeq.map(_.length).sum\n\
    \        val vowelsCount = vowels.toSeq.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toSeq.map(_.length).sum\n        val vowelsCount = vowels.toSeq.map(_.length).sum\n\
    \        val vowelsCount = vowels.toSeq.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toSeq.map(_.length).sum\n        val vowelsCount = vowels.toSeq.map(_.length).sum\n\
    \        val vowelsCount = vowels.toSeq.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toSeq.map(_.length).sum\n        val vowelsCount = vowels.toSeq.map(_.length).sum\n\
    \        val vowelsCount = vowels.toSeq.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toSeq.map(_.length).sum\n        val vowelsCount = vowels.toSeq.map(_.length).sum\n\
    \        val vowelsCount = vowels.toSeq.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toSeq.map(_.length).sum\n        val vowelsCount = vowels.toSeq.map(_.length).sum\n\
    \        val vowelsCount = vowels.toSeq.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toSeq.map(_.length).sum\n        val vowelsCount = vowels.toSeq.map(_.length).sum\n\
    \        val vowelsCount = vowels.toSeq.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toSeq.map(_.length).sum\n        val vowelsCount = vowels.toSeq.map(_.length).sum\n\
    \        val vowelsCount = vowels.toSeq.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toSeq.map(_.length).sum\n        val vowelsCount = vowels.toSeq.map(_.length).sum\n\
    \        val vowelsCount = vowels.toSeq.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toSeq.map(_.length).sum\n        val vowelsCount = vowels.toSeq.map(_.length).sum\n\
    \        val vowelsCount = vowels.toSeq.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toSeq.map(_.length).sum\n        val vowelsCount = vowels.toSeq.map(_.length).sum\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq1ir28nu.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSeq.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq1ir28nu.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSeq.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq1ir28nu.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSeq.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq1ir28nu.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSeq.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq1ir28nu.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSeq.map(_.lengt"
  stdout: ''
  timestamp: 1659799306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).size\n       \
    \ val vowelsCount = word.filter(c => vowels.contains(c)).size\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).size\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).size\n       \
    \ val vowelsCount = word.filter(c => vowels.contains(c)).size\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).size\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).size\n       \
    \ val vowelsCount = word.filter(c => vowels.contains(c)).size\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).size\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).size\n       \
    \ val vowelsCount = word.filter(c => vowels.contains(c)).size\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).size\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).size\n       \
    \ val vowelsCount = word.filter(c => vowels.contains(c)).size\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).size\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).size\n       \
    \ val vowelsCount = word.filter(c => vowels.contains(c)).size\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).size\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy7axx7ju.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mc\e[0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy7axx7ju.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mc\e\
    [0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy7axx7ju.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mc\e\
    [0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy7axx7ju.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mc\e\
    [0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy7axx7ju.scala"
  stdout: ''
  timestamp: 1659799269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n\
    \        var vowel = \"\"\n        var currentIndex = 0\n        var currentChar\
    \ = \"\"\n        val wordLength = word.length\n        while (vowelIndex < wordLength)\
    \ {\n            currentChar = word.charAt(vowelIndex)\n            vowel = vowels.find(_\
    \ == currentChar)\n            if (vowel != None) {\n                vowelIndex\
    \ = vowelIndex + 1\n                currentIndex = vowelIndex\n            } else\
    \ {\n                vowelIndex = vowelIndex + 1\n            }\n        }\n \
    \       if (vowelIndex == wordLength) {\n            return \"\"\n        }\n\
    \        while (vowelIndex < wordLength) {\n            currentChar = word.charAt(vowelIndex)\n\
    \            vowel = vowels.find(_ == currentChar)\n            if (vowel != None)\
    \ {\n                vowelIndex = vowelIndex + 1\n                currentIndex\
    \ = vowelIndex\n            } else {\n                vowelIndex = vowelIndex\
    \ + 1\n            }\n        }\n        return vowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpquaezqqn.scala:22:37\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            currentChar = word.charAt(vowelIndex)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Found:    Char\n\e[31m   |\e[0m       \
    \                   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpquaezqqn.scala:23:31 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            vowel = vowels.find(_ == currentChar)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m                    Required: String\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpquaezqqn.scala:24:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (vowel != None) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m Values of types\
    \ String and object None cannot be compared with == or !=\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpquaezqqn.scala:35:37 --------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m            currentChar = word.charAt(vowelIndex)\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Found:    Char\n\e[31m   |\e[0m            \
    \              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpquaezqqn.scala:36:31 --------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m            vowel = vowels.find(_ == currentChar)\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                 Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e[1m\e\
    [31m]\e[0m\n\e[31m   |\e[0m                    Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explana"
  stdout: ''
  timestamp: 1659799307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet\
    \ = vowels.toSet\n        val vowelsSetIterator = vowelsSet.iterator\n       \
    \ val vowelsSetIteratorNext = vowelsSetIterator.next\n        val vowelsSetIteratorPrev\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextPrev = vowelsSetIteratorNextPrev.prev\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.prev\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnygkyx4i.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNextPrev.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnygkyx4i.scala:19:54 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpnygkyx4i.scala:20:62 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpnygkyx4i.scala:21:62 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpnygkyx4i.scala:26:52 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextPrev\e\
    [0m = vowelsSetIteratorNextNextNextNext.prev\n\e[31m\e[31m   |\e[0m          \
    \                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: vowelsSetIterat"
  stdout: ''
  timestamp: 1659799307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val consonants = word.filter(x => !vowels.contains(x))\n\
    \        val consonantsCount = consonants.length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowels\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo_0h2mm3.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo_0h2mm3.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = consonants.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_0h2mm3.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = consonants.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_0h2mm3.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = consonants.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_0h2mm3.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = consonants.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e["
  stdout: ''
  timestamp: 1659799283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n\
    \        var vowelIndex2 = word.length - 1\n        var vowelIndex3 = word.length\
    \ - 1\n        var vowelIndex4 = word.length - 1\n        var vowelIndex5 = word.length\
    \ - 1\n        var vowelIndex6 = word.length - 1\n        var vowelIndex7 = word.length\
    \ - 1\n        var vowelIndex8 = word.length - 1\n        var vowelIndex9 = word.length\
    \ - 1\n        var vowelIndex10 = word.length - 1\n        var vowelIndex11 =\
    \ word.length - 1\n        var vowelIndex12 = word.length - 1\n        var vowelIndex13\
    \ = word.length - 1\n        var vowelIndex14 = word.length - 1\n        var vowelIndex15\
    \ = word.length - 1\n        var vowelIndex16 = word.length - 1\n        var vowelIndex17\
    \ = word.length - 1\n        var vowelIndex18 = word.length - 1\n        var vowelIndex19\
    \ = word.length - 1\n        var vowelIndex20 = word.length - 1\n        var vowelIndex21\
    \ = word.length - 1\n        var vowelIndex22 = word.length - 1\n        var vowelIndex23\
    \ = word.length - 1\n        var vowelIndex24 = word.length - 1\n        var vowelIndex25\
    \ = word.length - 1\n        var vowelIndex26 = word.length - 1\n        var vowelIndex27\
    \ = word.length - 1\n        var vowelIndex28 = word.length - 1\n        var vowelIndex29\
    \ = word.length - 1\n        var vowelIndex30 = word.length - 1\n        var vowelIndex31\
    \ = word.length - 1\n        var vowelIndex32 = word.length - 1\n        var vowelIndex33\
    \ = word.length - 1\n        var vowelIndex34 = word.length - 1\n        var vowelIndex35\
    \ = word.length - 1\n        var vowelIndex36 = word.length - 1\n        var vowelIndex37\
    \ = word.length - 1\n        var vowelIndex38 = word.length - 1\n        var vowelIndex39\
    \ = word.length - 1\n        var vowelIndex40 = word.length - 1\n        var vowelIndex41\
    \ = word.length - 1\n        var vowelIndex42 = word.length - 1\n        var vowelIndex43\
    \ = word.length - 1\n        var vowelIndex44 = word.length - 1\n        var vowelIndex45\
    \ = word.length - 1\n        var vowelIndex46 = word.length - 1\n        var vowelIndex47\
    \ = word.length - 1\n        var vowelIndex48 = word.length - 1\n        var vowelIndex49\
    \ = word.length - 1\n        var vowelIndex50 = word.length - 1\n        var vowelIndex51\
    \ = word.length - 1\n        var vowelIndex52 = word.length - 1\n        var vowelIndex53\
    \ = word.length - 1\n        var vowelIndex54 = word.length - 1\n        var vowelIndex55\
    \ = word.length - 1\n        var vowelIndex56 = word.length - 1\n        var vowelIndex57\
    \ = word.length\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpduiyoyq8.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0pn_suby.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0pn_suby.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIterator.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pn_suby.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pn_suby.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1659799256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowelsBefore = vowels.filter(x => word.startsWith(x))\n        val vowelsAfter\
    \ = vowels.filter(x => word.endsWith(x))\n        val consonantsBefore = consonants.filter(x\
    \ => word.startsWith(x))\n        val consonantsAfter = consonants.filter(x =>\
    \ word.endsWith(x))\n        val vowelsBetween = vowelsAfter.filter(x => vowelsBefore.contains(x))\n\
    \        val consonantsBetween = consonantsAfter.filter(x => consonantsBefore.contains(x))\n\
    \        val vowelsAfterAndBefore = vowelsAfter.filter(x => vowelsBefore.contains(x))\n\
    \        val consonantsAfterAndBefore = consonantsAfter.filter(x => consonantsBefore.contains(x))\n\
    \        val vowelsBetweenAndBefore = vowelsAfter.filter(x => vowelsBefore.contains(x))\n\
    \        val consonantsBetweenAndBefore = consonantsAfter.filter(x => consonantsBefore.contains(x))\n\
    \        val vowelsAfterAndBeforeAndBetween = vowelsAfter.filter(x => vowelsBefore.contains(x))\n\
    \        val consonantsAfterAndBeforeAndBetween = consonantsAfter.filter(x =>\
    \ consonantsBefore.contains(x))\n        val vowelsBetweenAndBeforeAndBetween\
    \ = vowelsAfter.filter(x => vowelsBefore.contains(x))\n        val consonantsBetweenAndBeforeAndBetween\
    \ = consonantsAfter.filter(x => consonantsBefore.contains(x))\n        val vowelsAfterAndBeforeAndBetweenAndBefore\
    \ = vowelsAfter.filter(x => vowelsBefore.contains(x))\n        val consonantsAfterAndBeforeAndBetweenAndBefore\
    \ = consonantsAfter.filter(x => consonantsBefore.contains(x))\n        val vowelsBetweenAndBeforeAndBetweenAndBefore\
    \ = vowelsAfter.filter(x => vowelsBefore.contains(x))\n        val consonantsBetweenAndBeforeAndBetweenAndBefore\
    \ = consonantsAfter.filter(x => consonantsBefore.contains(x))\n        val vowelsAfterAndBeforeAndBetweenAndBeforeAndBetween\
    \ = vowelsAfter.filter(x \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0ze2sqco.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ze2sqco.scala:35:83\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsAfterAndBeforeAndBetweenAndBeforeAndBetween\e[0m = vowelsAfter.filter(x\
    \ \n\e[31m\e[31m   |\e[0m                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                                      Not found: x\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0ze2sqco.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowelsAndConsonants = vowels ++ consonants\n        val vowelsAndConsonantsList\
    \ = vowelsAndConsonants.toList\n        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListReverse = vowelsAndConsonantsList.reverse\n\
    \        val vowelsAndConsonantsListReverseLength = vowelsAndConsonantsListReverse.length\n\
    \        val vowelsAndConsonantsListReverseIterator = vowelsAndConsonantsListReverse.iterator\n\
    \        val vowelsAndConsonantsListReverseIteratorLength = vowelsAndConsonantsListReverseIterator.length\n\
    \        val vowelsAndConsonantsListReverseIteratorReverse = vowelsAndConsonantsListReverseIterator.reverse\n\
    \        val vowelsAndConsonantsListReverseIteratorReverseLength = vowelsAndConsonantsListReverseIteratorReverse.length\n\
    \        val vowelsAndConsonantsListReverseIteratorReverseIterator = vowelsAndConsonantsListReverseIteratorReverse.iterator\n\
    \        val vowelsAndConsonantsListReverseIteratorReverseIteratorLength = vowelsAndConsonantsListReverseIteratorReverseIterator.length\n\
    \        val vowelsAndConsonantsListReverseIteratorReverseIteratorReverse = vowelsAndConsonantsListReverseIteratorReverseIterator.iterator\n\
    \        val vowelsAndConsonantsListReverseIteratorReverseIteratorReverseLength\
    \ = vowelsAndConsonantsListReverseIteratorReverseIteratorReverse.length\n    \
    \    val vowelsAndConsonantsListReverseIteratorReverseIteratorReverseIterator\
    \ = vowelsAndConsonantsListReverseIteratorReverseIteratorReverse.iterator\n  \
    \      val vowelsAndConsonantsListReverseIteratorReverseIteratorReverseIteratorLength\
    \ = vowelsAndConsonantsListReverseIteratorReverseIteratorReverseIterator.length\n\
    \        val vowelsAndConsonantsListReverseIteratorReverseIteratorReverseIteratorReverse\
    \ = vowelsAndConsonantsListReverseIteratorReverseIteratorReverseIterator.iterator\n\
    \        val vowelsAndConsonantsListReverseIteratorReverseIteratorReverseIteratorReverseLength\
    \ = vowelsAndConsonantsListReverseIteratorReverseIteratorReverseIteratorReverse.length\n\
    \        val vowelsAndConsonantsListReverseIteratorReverseIteratorReverseIteratorReverseIterator\
    \ = vowelsAndConsonantsListReverseIteratorReverseIteratorReverseIteratorReverse.iterator\n\
    \        val vowelsAndConsonantsListReverseIteratorReverseIteratorReverseIteratorReverseIteratorLength\
    \ = vowelsAndConsonants\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8_i271og.scala:24:99 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListReverseIteratorReverse\e\
    [0m = vowelsAndConsonantsListReverseIterator.reverse\n\e[31m\e[31m   |\e[0m  \
    \                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean vowelsAndConsonantsListReverseIterator.reversed?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp8_i271og.scala:36:5 ---------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        var vowelIndex\
    \ = 0;\n        var vowelIndex2 = word.length() - 1;\n        var vowelIndex3\
    \ = word.length() - 2;\n        var vowelIndex4 = word.length() - 3;\n       \
    \ var vowelIndex5 = word.length() - 4;\n        var vowelIndex6 = word.length()\
    \ - 5;\n        var vowelIndex7 = word.length() - 6;\n        var vowelIndex8\
    \ = word.length() - 7;\n        var vowelIndex9 = word.length() - 8;\n       \
    \ var vowelIndex10 = word.length() - 9;\n        var vowelIndex11 = word.length()\
    \ - 10;\n        var vowelIndex12 = word.length() - 11;\n        var vowelIndex13\
    \ = word.length() - 12;\n        var vowelIndex14 = word.length() - 13;\n    \
    \    var vowelIndex15 = word.length() - 14;\n        var vowelIndex16 = word.length()\
    \ - 15;\n        var vowelIndex17 = word.length() - 16;\n        var vowelIndex18\
    \ = word.length() - 17;\n        var vowelIndex19 = word.length() - 18;\n    \
    \    var vowelIndex20 = word.length() - 19;\n        var vowelIndex21 = word.length()\
    \ - 20;\n        var vowelIndex22 = word.length() - 21;\n        var vowelIndex23\
    \ = word.length() - 22;\n        var vowelIndex24 = word.length() - 23;\n    \
    \    var vowelIndex25 = word.length() - 24;\n        var vowelIndex26 = word.length()\
    \ - 25;\n        var vowelIndex27 = word.length() - 26;\n        var vowelIndex28\
    \ = word.length() - 27;\n        var vowelIndex29 = word.length() - 28;\n    \
    \    var vowelIndex30 = word.length() - 29;\n        var vowelIndex31 = word.length()\
    \ - 30;\n        var vowelIndex32 = word.length() - 31;\n        var vowelIndex33\
    \ = word.length() - 32;\n        var vowelIndex34 = word.length() - 33;\n    \
    \    var vowelIndex35 = word.length() - 34;\n        var vowelIndex36 = word.length()\
    \ - 35;\n        var vowelIndex37 = word.length() - 36;\n        var vowelIndex38\
    \ = word.length() - 37;\n        var vowelIndex39 = word.length() - 38;\n    \
    \    var vowelIndex40 = word.length() - 39;\n        var vowelIndex41 = word.length()\
    \ - 40;\n        var vowelIndex42 = word.length() - 41;\n        var vowelIndex43\
    \ = word.length() - 42;\n        var vowelIndex44 = word.length() - 43;\n    \
    \    var vowelIndex45 = word.length() - 44;\n        var vowelIndex46 = word.length()\
    \ - 45;\n        var vowelIndex47 = word.length() - 46;\n        var vowelIndex48\
    \ = word.length() - 47;\n        var vowelIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz2rry9ug.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpz2rry9ug.scala:65:5 ---------------------\e[0m\e[0m\n\e[31m65 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val consonants = word.filter(x => !vowels.contains(x))\n\
    \        val consonantsCount = consonants.length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = consonants.filter(x\
    \ => vowels.contains(x)).length\n        val vowels\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo_0h2mm3.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo_0h2mm3.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = consonants.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_0h2mm3.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = consonants.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_0h2mm3.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = consonants.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_0h2mm3.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = consonants.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e["
  stdout: ''
  timestamp: 1659799283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        var vowelsCount\
    \ = vowels.size\n        var vowelsIndex = 0\n        var vowelsIndex2 = vowelsIndex\
    \ + 1\n        var vowelsIndex3 = vowelsIndex + 2\n        var vowelsIndex4 =\
    \ vowelsIndex + 3\n        var vowelsIndex5 = vowelsIndex + 4\n        var vowelsIndex6\
    \ = vowelsIndex + 5\n        var vowelsIndex7 = vowelsIndex + 6\n        var vowelsIndex8\
    \ = vowelsIndex + 7\n        var vowelsIndex9 = vowelsIndex + 8\n        var vowelsIndex10\
    \ = vowelsIndex + 9\n        var vowelsIndex11 = vowelsIndex + 10\n        var\
    \ vowelsIndex12 = vowelsIndex + 11\n        var vowelsIndex13 = vowelsIndex +\
    \ 12\n        var vowelsIndex14 = vowelsIndex + 13\n        var vowelsIndex15\
    \ = vowelsIndex + 14\n        var vowelsIndex16 = vowelsIndex + 15\n        var\
    \ vowelsIndex17 = vowelsIndex + 16\n        var vowelsIndex18 = vowelsIndex +\
    \ 17\n        var vowelsIndex19 = vowelsIndex + 18\n        var vowelsIndex20\
    \ = vowelsIndex + 19\n        var vowelsIndex21 = vowelsIndex + 20\n        var\
    \ vowelsIndex22 = vowelsIndex + 21\n        var vowelsIndex23 = vowelsIndex +\
    \ 22\n        var vowelsIndex24 = vowelsIndex + 23\n        var vowelsIndex25\
    \ = vowelsIndex + 24\n        var vowelsIndex26 = vowelsIndex + 25\n        var\
    \ vowelsIndex27 = vowelsIndex + 26\n        var vowelsIndex28 = vowelsIndex +\
    \ 27\n        var vowelsIndex29 = vowelsIndex + 28\n        var vowelsIndex30\
    \ = vowelsIndex + 29\n        var vowelsIndex31 = vowelsIndex + 30\n        var\
    \ vowelsIndex32 = vowelsIndex + 31\n        var vowelsIndex33 = vowelsIndex +\
    \ 32\n        var vowelsIndex34 = vowelsIndex + 33\n        var vowelsIndex35\
    \ = vowelsIndex + 34\n        var vowelsIndex36 = vowelsIndex + 35\n        var\
    \ vowelsIndex37 = vowelsIndex + 36\n        var vowelsIndex38 = vowelsIndex +\
    \ 37\n        var vowelsIndex39 = vowelsIndex + 38\n        var vowelsIndex40\
    \ = vowelsIndex + 39\n        var vowelsIndex41 = vowelsIndex + 40\n        var\
    \ vowelsIndex42 = vowelsIndex + 41\n        var vowelsIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdzw3mnkl.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpdzw3mnkl.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextPrev = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextPrev = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNext\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp09j855v9.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp09j855v9.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp09j855v9.scala:19:54 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue prev is not a member of Iterator[String] - did you mean\
    \ vowelsSetIterator.drop?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp09j855v9.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.split(\"\
    [aeiou]\").length\n        val vowelsCount2 = word.split(\"[AEIOU]\").length\n\
    \        val vowelsCount3 = word.split(\"[AEIOUaeiou]\").length\n        val vowelsCount4\
    \ = word.split(\"[aeiouAEIOU]\").length\n        val vowelsCount5 = word.split(\"\
    [aeiouAEIOUaeiou]\").length\n        val vowelsCount6 = word.split(\"[AEIOUaeiouAEIOU]\"\
    ).length\n        val vowelsCount7 = word.split(\"[aeiouAEIOUaeiouAEIOU]\").length\n\
    \        val vowelsCount8 = word.split(\"[AEIOUaeiouAEIOUaeiouAEIOU]\").length\n\
    \        val vowelsCount9 = word.split(\"[aeiouAEIOUaeiouAEIOUaeiouAEIOU]\").length\n\
    \        val vowelsCount10 = word.split(\"[AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).length\n        val vowelsCount11 = word.split(\"[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).length\n        val vowelsCount12 = word.split(\"[AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).length\n        val vowelsCount13 = word.split(\"[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).length\n        val vowelsCount14 = word.split(\"[AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).length\n        val vowelsCount15 = word.split(\"[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).length\n        val vowelsCount16 = word.split(\"[AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).length\n        val vowelsCount17 = word.split(\"[aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmph0k4srrf.scala:32:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount17\e[0m = word.split(\"\
    [aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\n\e[31m\e[31m  \
    \ |\e[0m                                       ^\e[0m\n\e[31m   |\e[0m       \
    \                                unclosed string literal\n\e[31m\e[31m-- Error:\
    \ /tmp/tmph0k4srrf.scala:34:34 -----------------------------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                           \
    \       ^\e[0m\n\e[31m   |\e[0m                                 end of statement\
    \ expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph0k4srrf.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph0k4srrf.scala:34:4\
    \ -------------------------\e[0m\e[0m\n\e[31m34 |\e[0m    \e[33mdef\e[0m \e[36mmain\e\
    [0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m  \
    \ |\e[0m    ^^^\e[0m\n\e[31m   |\e[0mNot found: [aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUdef\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).length\n        val consonants = Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\")\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).length\n        val vowelsCount =\
    \ word.filter(x => vowels.contains(x)).length\n        val consonantsCount = word.filter(x\
    \ => consonants.contains(x)).length\n        val vowelsCount = word.filter(x =>\
    \ vowels.contains(x)).length\n        val consonantsCount = word.filter(x => consonants.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val consonantsCount = word.filter(x => consonants.contains(x)).length\n  \
    \      val vowelsCount = word.filter(x => vowels.contains(x)).length\n       \
    \ val consonantsCount = word.filter(x => consonants.contains(x)).length\n    \
    \    val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ consonantsCount = word.filter(x => consonants.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).length\n        val vowelsCount =\
    \ word.filter(x => vowels.contains(x)).length\n        val consonantsCount = word.filter(x\
    \ => consonants.contains(x)).length\n        val vowelsCount = word.filter(x =>\
    \ vowels.contains(x)).length\n        val consonantsCount = word.filter(x => consonants.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val consonantsCount = word.filter(x => consonants.contains(x)).length\n  \
    \      val vowelsCount = word.filter(x => vowels.contains(x)).length\n       \
    \ val consonantsCount = word.filter(x => consonants.contains(x)).length\n    \
    \    val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ consonantsCount = word.filter(x => consonants.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).length\n        val vowelsCount =\
    \ word.filter(x => vowels.contains(x)).length\n        val consonantsCount = word.filter(x\
    \ => \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkpdxwm28.scala:44:46 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \      ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpkpdxwm28.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkpdxwm28.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mx\e[0m => consonants.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkpdxwm28.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkpdxwm28.scala:22:12 ---------------"
  stdout: ''
  timestamp: 1659799309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet\
    \ = vowels.toSet;\n        val vowelsSetSize = vowelsSet.size;\n        val vowelsSetIterator\
    \ = vowelsSet.iterator;\n        val vowelsSetIteratorNext = vowelsSetIterator.next;\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next;\n       \
    \ val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next;\n      \
    \  val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNext\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0t7s37fm.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0t7s37fm.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0t7s37fm.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next;\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0t7s37fm.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next;\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIter"
  stdout: ''
  timestamp: 1659799310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.prev\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNext\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc1hl4_7p.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc1hl4_7p.scala:19:54\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue prev is not a member of Iterator[String] - did you mean vowelsSetIterator.drop?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc1hl4_7p.scala:20:62 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev\
    \ is not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpc1hl4_7p.scala:21:62 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpc1hl4_7p.scala:31:60 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e[0m\
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc1hl4_7p.scala:33:64\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e[0m = vowelsSetIterator"
  stdout: ''
  timestamp: 1659799282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.prev\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNext\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc1hl4_7p.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc1hl4_7p.scala:19:54\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue prev is not a member of Iterator[String] - did you mean vowelsSetIterator.drop?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc1hl4_7p.scala:20:62 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev\
    \ is not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpc1hl4_7p.scala:21:62 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpc1hl4_7p.scala:31:60 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e[0m\
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc1hl4_7p.scala:33:64\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e[0m = vowelsSetIterator"
  stdout: ''
  timestamp: 1659799282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowel\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcf9efd4w.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcf9efd4w.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIterator.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcf9efd4w.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcf9efd4w.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ de"
  stdout: ''
  timestamp: 1659799308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsCount\
    \ = vowels.toSet.size;\n        val vowelsSet = vowels.toSet;\n        val vowelsSetSize\
    \ = vowelsSet.size;\n        val vowelsSetIterator = vowelsSet.iterator;\n   \
    \     val vowelsSetIteratorSize = vowelsSetIterator.size;\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next;\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size;\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next;\n       \
    \ val vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size;\n      \
    \  val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next;\n     \
    \   val vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size;\n\
    \        val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size;\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNext.size;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNext.size;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNext.size;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.size;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.size;\n\
    \        val vowelsSet\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkfxc3rsi.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkfxc3rsi.scala:23:62\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next;\n\e[31m\e[31m\
    \   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkfxc3rsi.scala:35:64 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next;\n\e[31m\e[31m  \
    \ |\e[0m                                                                ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkfxc3rsi.scala:37:68\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next;\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkfxc3rsi.scala:38:72\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextSize\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.size;\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val vowelsCount2 = word.filter(c => vowels.contains(c.toLowerCase())).size\n\
    \        val vowelsCount3 = word.filter(c => vowels.contains(c.toUpperCase())).size\n\
    \        val vowelsCount4 = word.filter(c => vowels.contains(c.toUpperCase().toLowerCase())).size\n\
    \        val vowelsCount5 = word.filter(c => vowels.contains(c.toUpperCase().toUpperCase())).size\n\
    \        val vowelsCount6 = word.filter(c => vowels.contains(c.toUpperCase().toUpperCase().toLowerCase())).size\n\
    \        val vowelsCount7 = word.filter(c => vowels.contains(c.toUpperCase().toUpperCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount8 = word.filter(c => vowels.contains(c.toUpperCase().toUpperCase().toLowerCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount9 = word.filter(c => vowels.contains(c.toUpperCase().toUpperCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount10 = word.filter(c => vowels.contains(c.toUpperCase().toUpperCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount11 = word.filter(c => vowels.contains(c.toUpperCase().toUpperCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount12 = word.filter(c => vowels.contains(c.toUpperCase().toUpperCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount13 = word.filter(c => vowels.contains(c.toUpperCase().toUpperCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount14 = word.filter(c => vowels.contains(c.toUpperCase().toUpperCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount15 = word.filter(c => vowels.contains(c.toUpperCase().toUpperCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount16 = word.filter(c => vowels.contains(c.toUpperCase().toUpperCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount17 = word.filter(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppn3vpy61.scala:32:40 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount17\e[0m = word.filter(\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppn3vpy61.scala:16:59\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e\
    [0m = word.filter(\e[36mc\e[0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e\
    [0m                                                           ^\e[0m\n\e[31m \
    \  |\e[0m                                                    Found:    (c : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppn3vpy61.scala:17:62\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsCount2\e[0m = word.filter(\e[36mc\e[0m => vowels.contains(c.toLowerCase())).size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value toLowerCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppn3vpy61.scala:18:62\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsCount3\e[0m = word.filter(\e[36mc\e[0m => vowels.contains(c.toUpperCase())).size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value toUpperCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppn3vpy61.scala:19:62\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsCount4\e[0m = word.filter(\e[36mc\e[0m => vowels.contains(c.toUpperCase().toLowerCase())).size\n\
    \e[31m\e[31m   |\e[0m                      "
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val consonants = word.filter(c => !vowels.contains(c))\n\
    \        val consonantsCount = consonants.size\n        val vowelsCount = consonantsCount\
    \ - vowelsCount\n        val vowelsIndex = consonants.indexOfLast(vowels.last)\n\
    \        val vowelsIndex = consonants.indexOfFirst(vowels.first)\n        val\
    \ vowelsIndex = consonants.indexOfLast(vowels.last)\n        val vowelsIndex =\
    \ consonants.indexOfFirst(vowels.first)\n        val vowelsIndex = consonants.indexOfLast(vowels.last)\n\
    \        val vowelsIndex = consonants.indexOfFirst(vowels.first)\n        val\
    \ vowelsIndex = consonants.indexOfLast(vowels.last)\n        val vowelsIndex =\
    \ consonants.indexOfFirst(vowels.first)\n        val vowelsIndex = consonants.indexOfLast(vowels.last)\n\
    \        val vowelsIndex = consonants.indexOfFirst(vowels.first)\n        val\
    \ vowelsIndex = consonants.indexOfLast(vowels.last)\n        val vowelsIndex =\
    \ consonants.indexOfFirst(vowels.first)\n        val vowelsIndex = consonants.indexOfLast(vowels.last)\n\
    \        val vowelsIndex = consonants.indexOfFirst(vowels.first)\n        val\
    \ vowelsIndex = consonants.indexOfLast(vowels.last)\n        val vowelsIndex =\
    \ consonants.indexOfFirst(vowels.first)\n        val vowelsIndex = consonants.indexOfLast(vowels.last)\n\
    \        val vowelsIndex = consonants.indexOfFirst(vowels.first)\n        val\
    \ vowelsIndex = consonants.indexOfLast(vowels.last)\n        val vowelsIndex =\
    \ consonants.indexOfFirst(vowels.first)\n        val vowelsIndex = consonants.indexOfLast(vowels.last)\n\
    \        val vowelsIndex = consonants.indexOfFirst(vowels.first)\n        val\
    \ vowelsIndex = consonants.indexOfLast(vowels.last)\n        val vowelsIndex =\
    \ consonants.indexOfFirst(vowels.first)\n        val vowelsIndex = consonants.indexOfLast(vowels.last)\n\
    \        val vowelsIndex = consonants.indexOfFirst(vowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpabmvf7bp.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpabmvf7bp.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = consonantsCount - vowelsCount\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpabmvf7bp.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = consonants.indexOfFirst(vowels.first)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpabmvf7bp.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = consonants.indexOfLast(vowels.last)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpabmvf7bp.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = consonants.indexOfFirst(vowels.first)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ def"
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val consonants = word.filter(x => !vowels.contains(x))\n\
    \        val consonantsCount = consonants.size\n        val vowelsCount = consonantsCount\
    \ - vowelsCount\n        val vowelsIndex = consonants.lastIndexWhere(x => vowels.contains(x))\n\
    \        val vowelsIndex = vowelsIndex + 1\n        val vowelsIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelsIndex = vowelsIndex + 1\n        val\
    \ vowelsIndex = consonants.lastIndexWhere(x => vowels.contains(x))\n        val\
    \ vowelsIndex = vowelsIndex + 1\n        val vowelsIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelsIndex = vowelsIndex + 1\n        val\
    \ vowelsIndex = consonants.lastIndexWhere(x => vowels.contains(x))\n        val\
    \ vowelsIndex = vowelsIndex + 1\n        val vowelsIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelsIndex = vowelsIndex + 1\n        val\
    \ vowelsIndex = consonants.lastIndexWhere(x => vowels.contains(x))\n        val\
    \ vowelsIndex = vowelsIndex + 1\n        val vowelsIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelsIndex = vowelsIndex + 1\n        val\
    \ vowelsIndex = consonants.lastIndexWhere(x => vowels.contains(x))\n        val\
    \ vowelsIndex = vowelsIndex + 1\n        val vowelsIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelsIndex = vowelsIndex + 1\n        val\
    \ vowelsIndex = consonants.lastIndexWhere(x => vowels.contains(x))\n        val\
    \ vowelsIndex = vowelsIndex + 1\n        val vowelsIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelsIndex = vowelsIndex + 1\n        val\
    \ vowelsIndex = consonants.lastIndexWhere(x => vowels.contains(x))\n        val\
    \ vowelsIndex = vowelsIndex + 1\n        val vowelsIndex = consonants.lastIndexWhere(x\
    \ => vowels.contains(x))\n        val vowelsIndex = vowelsIndex + 1\n        val\
    \ vowelsIndex = consonants.lastIndexWhere(x => vowels.contains(x))\n        val\
    \ vowelsIndex = vowelsIndex + 1\n        val vowels\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjfs106gj.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjfs106gj.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = consonantsCount - vowelsCount\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjfs106gj.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = vowelsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsIndex is\
    \ already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjfs106gj.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = consonants.lastIndexWhere(\e[36mx\e[0m => vowels.contains(x))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjfs106gj.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of tople"
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorIterator\
    \ = vowelsSetIterator.iterator\n        val vowelsSetIteratorIteratorSize = vowelsSetIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIterator = vowelsSetIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIterator = vowelsSetIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIterator = vowelsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = vowelsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n \
    \       val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8o03i_j2.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8o03i_j2.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e[0m\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp8o03i_j2.scala:29:76 ------------------------\e[0m\e[0m\n\
    \e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = vowelsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: vowelsSetIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8o03i_j2.scala:33:100\
    \ -----------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0"
  stdout: ''
  timestamp: 1659799255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextPrev = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextPrev = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowels\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpll42kpzz.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpll42kpzz.scala:19:54\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue prev is not a member of Iterator[String] - did you mean vowelsSetIterator.drop?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpll42kpzz.scala:41:5 ---------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n\
    \        var vowelIndex2 = word.length - 1\n        var vowelIndex3 = word.length\
    \ - 1\n        var vowelIndex4 = word.length - 1\n        var vowelIndex5 = word.length\
    \ - 1\n        var vowelIndex6 = word.length - 1\n        var vowelIndex7 = word.length\
    \ - 1\n        var vowelIndex8 = word.length - 1\n        var vowelIndex9 = word.length\
    \ - 1\n        var vowelIndex10 = word.length - 1\n        var vowelIndex11 =\
    \ word.length - 1\n        var vowelIndex12 = word.length - 1\n        var vowelIndex13\
    \ = word.length - 1\n        var vowelIndex14 = word.length - 1\n        var vowelIndex15\
    \ = word.length - 1\n        var vowelIndex16 = word.length - 1\n        var vowelIndex17\
    \ = word.length - 1\n        var vowelIndex18 = word.length - 1\n        var vowelIndex19\
    \ = word.length - 1\n        var vowelIndex20 = word.length - 1\n        var vowelIndex21\
    \ = word.length - 1\n        var vowelIndex22 = word.length - 1\n        var vowelIndex23\
    \ = word.length - 1\n        var vowelIndex24 = word.length - 1\n        var vowelIndex25\
    \ = word.length - 1\n        var vowelIndex26 = word.length - 1\n        var vowelIndex27\
    \ = word.length - 1\n        var vowelIndex28 = word.length - 1\n        var vowelIndex29\
    \ = word.length - 1\n        var vowelIndex30 = word.length - 1\n        var vowelIndex31\
    \ = word.length - 1\n        var vowelIndex32 = word.length - 1\n        var vowelIndex33\
    \ = word.length - 1\n        var vowelIndex34 = word.length - 1\n        var vowelIndex35\
    \ = word.length - 1\n        var vowelIndex36 = word.length - 1\n        var vowelIndex37\
    \ = word.length - 1\n        var vowelIndex38 = word.length - 1\n        var vowelIndex39\
    \ = word.length - 1\n        var vowelIndex40 = word.length - 1\n        var vowelIndex41\
    \ = word.length - 1\n        var vowelIndex42 = word.length - 1\n        var vowelIndex43\
    \ = word.length - 1\n        var vowelIndex44 = word.length - 1\n        var vowelIndex45\
    \ = word.length - 1\n        var vowelIndex46 = word.length - 1\n        var vowelIndex47\
    \ = word.length - 1\n        var vowelIndex48 = word.length - 1\n        var vowelIndex49\
    \ = word.length - 1\n        var vowelIndex50 = word.length - 1\n        var vowelIndex51\
    \ = word.length - 1\n        var vowelIndex52 = word.length - 1\n        var vowelIndex53\
    \ = word.length - 1\n        var vowelIndex54 = word.length - 1\n        var vowelIndex55\
    \ = word.length - 1\n        var vowelIndex56 = word.length - 1\n        var vowelIndex57\
    \ = word.length\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpduiyoyq8.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe902duye.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe902duye.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe902duye.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe902duye.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe902duye.scala"
  stdout: ''
  timestamp: 1659799313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet\
    \ = vowels.toSet\n        val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3\
    \ = vowelsSet2.toSet\n        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5\
    \ = vowelsSet4.toSet\n        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7\
    \ = vowelsSet6.toSet\n        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9\
    \ = vowelsSet8.toSet\n        val vowelsSet10 = vowelsSet9.toSet\n        val\
    \ vowelsSet11 = vowelsSet10.toSet\n        val vowelsSet12 = vowelsSet11.toSet\n\
    \        val vowelsSet13 = vowelsSet12.toSet\n        val vowelsSet14 = vowelsSet13.toSet\n\
    \        val vowelsSet15 = vowelsSet14.toSet\n        val vowelsSet16 = vowelsSet15.toSet\n\
    \        val vowelsSet17 = vowelsSet16.toSet\n        val vowelsSet18 = vowelsSet17.toSet\n\
    \        val vowelsSet19 = vowelsSet18.toSet\n        val vowelsSet20 = vowelsSet19.toSet\n\
    \        val vowelsSet21 = vowelsSet20.toSet\n        val vowelsSet22 = vowelsSet21.toSet\n\
    \        val vowelsSet23 = vowelsSet22.toSet\n        val vowelsSet24 = vowelsSet23.toSet\n\
    \        val vowelsSet25 = vowelsSet24.toSet\n        val vowelsSet26 = vowelsSet25.toSet\n\
    \        val vowelsSet27 = vowelsSet26.toSet\n        val vowelsSet28 = vowelsSet27.toSet\n\
    \        val vowelsSet29 = vowelsSet28.toSet\n        val vowelsSet30 = vowelsSet29.toSet\n\
    \        val vowelsSet31 = vowelsSet30.toSet\n        val vowelsSet32 = vowelsSet31.toSet\n\
    \        val vowelsSet33 = vowelsSet32.toSet\n        val vowelsSet34 = vowelsSet33.toSet\n\
    \        val vowelsSet35 = vowelsSet34.toSet\n        val vowelsSet36 = vowelsSet35.toSet\n\
    \        val vowelsSet37 = \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_w5fct7w.scala:52:25 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_w5fct7w.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val consonants = word.filter(c => !vowels.contains(c))\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).size\n       \
    \ val consonantsCount = word.filter(c => !vowels.contains(c)).size\n        val\
    \ vowelsCount = word.filter(c => vowels.contains(c)).size\n        val consonantsCount\
    \ = word.filter(c => !vowels.contains(c)).size\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).size\n        val consonantsCount = word.filter(c =>\
    \ !vowels.contains(c)).size\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val consonantsCount = word.filter(c => !vowels.contains(c)).size\n  \
    \      val vowelsCount = word.filter(c => vowels.contains(c)).size\n        val\
    \ consonantsCount = word.filter(c => !vowels.contains(c)).size\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).size\n        val consonantsCount = word.filter(c\
    \ => !vowels.contains(c)).size\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val consonantsCount = word.filter(c => !vowels.contains(c)).size\n  \
    \      val vowelsCount = word.filter(c => vowels.contains(c)).size\n        val\
    \ consonantsCount = word.filter(c => !vowels.contains(c)).size\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).size\n        val consonantsCount = word.filter(c\
    \ => !vowels.contains(c)).size\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val consonantsCount = word.filter(c => !vowels.contains(c)).size\n  \
    \      val vowelsCount = word.filter(c => vowels.contains(c)).size\n        val\
    \ consonantsCount = word.filter(c => !vowels.contains(c)).size\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).size\n        val consonantsCount = word.filter(c\
    \ => !vowels.contains(c)).size\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val consonantsCount = word.filter(c => !vowels.contains(c)).size\n  \
    \      val vowelsCount = word.filter(c => vowels.contains(c)).size\n        val\
    \ consonants\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg8eftrep.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg8eftrep.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = word.filter(\e[36mc\e[0m => vowels.contains(c)).size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg8eftrep.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mc\e\
    [0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg8eftrep.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mc\e[0m => !vowels.contains(c)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpg8eftrep.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mc\e[0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e"
  stdout: ''
  timestamp: 1659799314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowel\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpskel3tmt.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpskel3tmt.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIterator.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpskel3tmt.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpskel3tmt.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded method"
  stdout: ''
  timestamp: 1659799312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.prev\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjmm_djdl.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjmm_djdl.scala:19:54\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue prev is not a member of Iterator[String] - did you mean vowelsSetIterator.drop?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjmm_djdl.scala:20:62 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev\
    \ is not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpjmm_djdl.scala:21:62 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpjmm_djdl.scala:33:64 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjmm_djdl.scala:34:68\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextPrev\e[0m"
  stdout: ''
  timestamp: 1659799315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet3\
    \ = vowelsSet.filter(_ != \"a\")\n        val vowelsSet4 = vowelsSet.filter(_\
    \ != \"e\")\n        val vowelsSet5 = vowelsSet.filter(_ != \"i\")\n        val\
    \ vowelsSet6 = vowelsSet.filter(_ != \"o\")\n        val vowelsSet7 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet8 = vowelsSet.filter(_ != \"a\")\n        val\
    \ vowelsSet9 = vowelsSet.filter(_ != \"e\")\n        val vowelsSet10 = vowelsSet.filter(_\
    \ != \"i\")\n        val vowelsSet11 = vowelsSet.filter(_ != \"o\")\n        val\
    \ vowelsSet12 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet13 = vowelsSet.filter(_\
    \ != \"a\")\n        val vowelsSet14 = vowelsSet.filter(_ != \"e\")\n        val\
    \ vowelsSet15 = vowelsSet.filter(_ != \"i\")\n        val vowelsSet16 = vowelsSet.filter(_\
    \ != \"o\")\n        val vowelsSet17 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet18 = vowelsSet.filter(_ != \"a\")\n        val vowelsSet19 = vowelsSet.filter(_\
    \ != \"e\")\n        val vowelsSet20 = vowelsSet.filter(_ != \"i\")\n        val\
    \ vowelsSet21 = vowelsSet.filter(_ != \"o\")\n        val vowelsSet22 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet23 = vowelsSet.filter(_ != \"a\")\n        val\
    \ vowelsSet24 = vowelsSet.filter(_ != \"e\")\n        val vowelsSet25 = vowelsSet.filter(_\
    \ != \"i\")\n        val vowelsSet26 = vowelsSet.filter(_ != \"o\")\n        val\
    \ vowelsSet27 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet28 = vowelsSet.filter(_\
    \ != \"a\")\n        val vowelsSet29 = vowelsSet.filter(_ != \"e\")\n        val\
    \ vowelsSet30 = vowelsSet.filter(_ != \"i\")\n        val vowelsSet31 = vowelsSet.filter(_\
    \ != \"o\")\n        val vowelsSet32 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet33\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbx8i3ee7.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbx8i3ee7.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).length\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).length\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).length\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).length\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).length\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuckijm0_.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuckijm0_.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuckijm0_.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuckijm0_.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/t"
  stdout: ''
  timestamp: 1659799314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.previous\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.previous\n    \
    \    val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.previous\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.previous\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.previous\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.previous\n\
    \        val vowelsSetIteratorNextNextNext\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmeg2g3uk.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmeg2g3uk.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextPrev\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.previous\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextPrev is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextPrev\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpmeg2g3uk.scala:19:54 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.previous\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value previous is not a member of Iterator[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmeg2g3uk.scala:20:62 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNext.previous\n\e[31m\e[31m   |\e[0m                  \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                              value previous is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpmeg2g3uk.scala:21:62 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp"
  stdout: ''
  timestamp: 1659799320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowelsBefore = vowels.toList.dropRight(word.length)\n        val vowelsAfter\
    \ = vowels.toList.dropLeft(word.length)\n        val consonantsBefore = consonants.toList.dropRight(word.length)\n\
    \        val consonantsAfter = consonants.toList.dropLeft(word.length)\n     \
    \   val vowelsBeforeLength = vowelsBefore.length\n        val vowelsAfterLength\
    \ = vowelsAfter.length\n        val consonantsBeforeLength = consonantsBefore.length\n\
    \        val consonantsAfterLength = consonantsAfter.length\n        val vowelsBeforeLength\
    \ = vowelsBefore.length\n        val vowelsAfterLength = vowelsAfter.length\n\
    \        val consonantsBeforeLength = consonantsBefore.length\n        val consonantsAfterLength\
    \ = consonantsAfter.length\n        val vowelsBeforeLength = vowelsBefore.length\n\
    \        val vowelsAfterLength = vowelsAfter.length\n        val consonantsBeforeLength\
    \ = consonantsBefore.length\n        val consonantsAfterLength = consonantsAfter.length\n\
    \        val vowelsBeforeLength = vowelsBefore.length\n        val vowelsAfterLength\
    \ = vowelsAfter.length\n        val consonantsBeforeLength = consonantsBefore.length\n\
    \        val consonantsAfterLength = consonantsAfter.length\n        val vowelsBeforeLength\
    \ = vowelsBefore.length\n        val vowelsAfterLength = vowelsAfter.length\n\
    \        val consonantsBeforeLength = consonantsBefore.length\n        val consonantsAfterLength\
    \ = consonantsAfter.length\n        val vowelsBeforeLength = vowelsBefore.length\n\
    \        val vowelsAfterLength = vowelsAfter.length\n        val consonantsBeforeLength\
    \ = consonantsBefore.length\n        val consonantsAfterLength = consonantsAfter.length\n\
    \        val vowelsBeforeLength = vowelsBefore.length\n        val vowelsAfterLength\
    \ = vowelsAfter.length\n        val consonantsBeforeLength = consonantsBefore.length\n\
    \        val consonantsAfterLength = consonantsAfter.length\n        val vowelsBeforeLength\
    \ = vowelsBefore.length\n\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi737uem5.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsBeforeLength\e[0m\
    \ = vowelsBefore.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsBeforeLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelsBeforeLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpi737uem5.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsAfterLength\e[0m =\
    \ vowelsAfter.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAfterLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsAfterLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpi737uem5.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mconsonantsBeforeLength\e\
    [0m = consonantsBefore.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsBeforeLength is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsBeforeLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi737uem5.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsAfterLength\e\
    [0m = consonantsAfter.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsAfterLength is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsAfterLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi737uem5.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        "
  stdout: ''
  timestamp: 1659799320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv6fw3cuc.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv6fw3cuc.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv6fw3cuc.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv6fw3cuc.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv6fw3cuc.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.ma"
  stdout: ''
  timestamp: 1659799295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        var vowelIndex\
    \ = 0\n        var vowelIndex2 = word.length - 1\n        var vowelIndex3 = word.length\
    \ - 1\n        var vowelIndex4 = word.length - 1\n        var vowelIndex5 = word.length\
    \ - 1\n        var vowelIndex6 = word.length - 1\n        var vowelIndex7 = word.length\
    \ - 1\n        var vowelIndex8 = word.length - 1\n        var vowelIndex9 = word.length\
    \ - 1\n        var vowelIndex10 = word.length - 1\n        var vowelIndex11 =\
    \ word.length - 1\n        var vowelIndex12 = word.length - 1\n        var vowelIndex13\
    \ = word.length - 1\n        var vowelIndex14 = word.length - 1\n        var vowelIndex15\
    \ = word.length - 1\n        var vowelIndex16 = word.length - 1\n        var vowelIndex17\
    \ = word.length - 1\n        var vowelIndex18 = word.length - 1\n        var vowelIndex19\
    \ = word.length - 1\n        var vowelIndex20 = word.length - 1\n        var vowelIndex21\
    \ = word.length - 1\n        var vowelIndex22 = word.length - 1\n        var vowelIndex23\
    \ = word.length - 1\n        var vowelIndex24 = word.length - 1\n        var vowelIndex25\
    \ = word.length - 1\n        var vowelIndex26 = word.length - 1\n        var vowelIndex27\
    \ = word.length - 1\n        var vowelIndex28 = word.length - 1\n        var vowelIndex29\
    \ = word.length - 1\n        var vowelIndex30 = word.length - 1\n        var vowelIndex31\
    \ = word.length - 1\n        var vowelIndex32 = word.length - 1\n        var vowelIndex33\
    \ = word.length - 1\n        var vowelIndex34 = word.length - 1\n        var vowelIndex35\
    \ = word.length - 1\n        var vowelIndex36 = word.length - 1\n        var vowelIndex37\
    \ = word.length - 1\n        var vowelIndex38 = word.length - 1\n        var vowelIndex39\
    \ = word.length - 1\n        var vowelIndex40 = word.length - 1\n        var vowelIndex41\
    \ = word.length - 1\n        var vowelIndex42 = word.length - 1\n        var vowelIndex43\
    \ = word.length - 1\n        var vowelIndex44 = word.length - 1\n        var vowelIndex45\
    \ = word.length - 1\n        var vowelIndex46 = word.length - 1\n        var vowelIndex47\
    \ = word.length - 1\n        var vowelIndex48 = word.length - 1\n        var vowelIndex49\
    \ = word.length - 1\n        var vowelIndex50 = word.length - 1\n        var vowelIndex51\
    \ = word.length - 1\n        var vowelIndex52 = word.length - 1\n        var vowelIndex53\
    \ = word.length - 1\n        var vowelIndex54 = word.length - 1\n        var vowelIndex55\
    \ = word.length - 1\n        var vowelIndex56 = word.length - 1\n        var vowelIndex57\
    \ = word.length\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptcos33fe.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet\
    \ = vowels.toSet;\n        val vowelsSet2 = vowels.toSet;\n        val vowelsSet3\
    \ = vowels.toSet;\n        val vowelsSet4 = vowels.toSet;\n        val vowelsSet5\
    \ = vowels.toSet;\n        val vowelsSet6 = vowels.toSet;\n        val vowelsSet7\
    \ = vowels.toSet;\n        val vowelsSet8 = vowels.toSet;\n        val vowelsSet9\
    \ = vowels.toSet;\n        val vowelsSet10 = vowels.toSet;\n        val vowelsSet11\
    \ = vowels.toSet;\n        val vowelsSet12 = vowels.toSet;\n        val vowelsSet13\
    \ = vowels.toSet;\n        val vowelsSet14 = vowels.toSet;\n        val vowelsSet15\
    \ = vowels.toSet;\n        val vowelsSet16 = vowels.toSet;\n        val vowelsSet17\
    \ = vowels.toSet;\n        val vowelsSet18 = vowels.toSet;\n        val vowelsSet19\
    \ = vowels.toSet;\n        val vowelsSet20 = vowels.toSet;\n        val vowelsSet21\
    \ = vowels.toSet;\n        val vowelsSet22 = vowels.toSet;\n        val vowelsSet23\
    \ = vowels.toSet;\n        val vowelsSet24 = vowels.toSet;\n        val vowelsSet25\
    \ = vowels.toSet;\n        val vowelsSet26 = vowels.toSet;\n        val vowelsSet27\
    \ = vowels.toSet;\n        val vowelsSet28 = vowels.toSet;\n        val vowelsSet29\
    \ = vowels.toSet;\n        val vowelsSet30 = vowels.toSet;\n        val vowelsSet31\
    \ = vowels.toSet;\n        val vowelsSet32 = vowels.toSet;\n        val vowelsSet33\
    \ = vowels.toSet;\n        val vowelsSet34 = vowels.toSet;\n        val vowelsSet35\
    \ = vowels.toSet;\n        val vowelsSet36 = vowels.toSet;\n        val vowelsSet37\
    \ = vowels.toSet;\n        val vowelsSet38 = vowels.toSet;\n        val vowelsSet39\
    \ = vowels.toSet;\n\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvsb590wq.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowel\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa57i4rbc.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa57i4rbc.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa57i4rbc.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa57i4rbc.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa57i4rbc.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already define"
  stdout: ''
  timestamp: 1659799321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowelsCount = vowels.toList.count(_ == word.charAt(word.length - 1))\n     \
    \   val consonantsCount = consonants.toList.count(_ == word.charAt(word.length\
    \ - 1))\n        val vowelsCount2 = vowels.toList.count(_ == word.charAt(word.length\
    \ - 2))\n        val consonantsCount2 = consonants.toList.count(_ == word.charAt(word.length\
    \ - 2))\n        val vowelsCount3 = vowels.toList.count(_ == word.charAt(word.length\
    \ - 3))\n        val consonantsCount3 = consonants.toList.count(_ == word.charAt(word.length\
    \ - 3))\n        val vowelsCount4 = vowels.toList.count(_ == word.charAt(word.length\
    \ - 4))\n        val consonantsCount4 = consonants.toList.count(_ == word.charAt(word.length\
    \ - 4))\n        val vowelsCount5 = vowels.toList.count(_ == word.charAt(word.length\
    \ - 5))\n        val consonantsCount5 = consonants.toList.count(_ == word.charAt(word.length\
    \ - 5))\n        val vowelsCount6 = vowels.toList.count(_ == word.charAt(word.length\
    \ - 6))\n        val consonantsCount6 = consonants.toList.count(_ == word.charAt(word.length\
    \ - 6))\n        val vowelsCount7 = vowels.toList.count(_ == word.charAt(word.length\
    \ - 7))\n        val consonantsCount7 = consonants.toList.count(_ == word.charAt(word.length\
    \ - 7))\n        val vowelsCount8 = vowels.toList.count(_ == word.charAt(word.length\
    \ - 8))\n        val consonantsCount8 = consonants.toList.count(_ == word.charAt(word.length\
    \ - 8))\n        val vowelsCount9 = vowels.toList.count(_ == word.charAt(word.length\
    \ - 9))\n        val consonantsCount9 = consonants.toList.count(_ == word.charAt(word.length\
    \ - 9))\n        val vowelsCount10 = vowels.toList.count(_ == word.charAt(word.length\
    \ - 10))\n        val consonantsCount10 = consonants.toList.count(_ == word.charAt(word.length\
    \ - 10))\n        val vowelsCount11 = vowels.toList.count(_ == word.charAt(word.length\
    \ - 11))\n        val consonantsCount11 = consonants.toList.count(_ == word.charAt(word.length\
    \ - 11))\n\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8o9wg1x4.scala:17:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.count(_\
    \ == word.charAt(word.length - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m         \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types String and Char cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8o9wg1x4.scala:18:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toList.count(_\
    \ == word.charAt(word.length - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m         \
    \                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8o9wg1x4.scala:19:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount2\e[0m = vowels.toList.count(_\
    \ == word.charAt(word.length - \e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m         \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types String and Char cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8o9wg1x4.scala:20:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount2\e[0m =\
    \ consonants.toList.count(_ == word.charAt(word.length - \e[31m2\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp8o9wg1x4.scala:21:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount3\e[0m = vowels.toList.count(_\
    \ == word.charAt(word.length - \e[31m3\e[0m))\n\e[31m\e[31m   |\e[0m         \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types String and Char can"
  stdout: ''
  timestamp: 1659799324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowelsSet = vowels.toSet\n        val consonantsSet = consonants.toSet\n   \
    \     val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val consonantsSetIterator\
    \ = consonantsSet.iterator\n        val vowelsSetIteratorSize = vowelsSetIterator.size\n\
    \        val consonantsSetIteratorSize = consonantsSetIterator.size\n        val\
    \ vowelsSetIteratorNext = vowelsSetIterator.next\n        val consonantsSetIteratorNext\
    \ = consonantsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val consonantsSetIteratorNextSize = consonantsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ consonantsSetIteratorNextNext = consonantsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ consonantsSetIteratorNextNextSize = consonantsSetIteratorNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n   \
    \     val consonantsSetIteratorNextNextNext = consonantsSetIteratorNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n\
    \        val consonantsSetIteratorNextNextNextSize = consonantsSetIteratorNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val consonantsSetIteratorNextNextNextNext = consonantsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val consonantsSetIteratorNextNextNextNextSize = consonantsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val consonantsSetIteratorNextNextNextNextNext = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphuuo_41o.scala:42:55 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetIteratorNextNextNextNextNext\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \       ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmphuuo_41o.scala:29:62 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphuuo_41o.scala:30:70 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetIteratorNextNext\e\
    [0m = consonantsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ next is not a member of String - did you mean consonantsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphuuo_41o.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowel\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpofoj3rxn.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpofoj3rxn.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpofoj3rxn.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpofoj3rxn.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpofoj3rxn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defi"
  stdout: ''
  timestamp: 1659799320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowelsSet.diff(vowelsSet2)\n\
    \        val vowelsSet4 = vowelsSet.diff(vowelsSet3)\n        val vowelsSet5 =\
    \ vowelsSet.diff(vowelsSet4)\n        val vowelsSet6 = vowelsSet.diff(vowelsSet5)\n\
    \        val vowelsSet7 = vowelsSet.diff(vowelsSet6)\n        val vowelsSet8 =\
    \ vowelsSet.diff(vowelsSet7)\n        val vowelsSet9 = vowelsSet.diff(vowelsSet8)\n\
    \        val vowelsSet10 = vowelsSet.diff(vowelsSet9)\n        val vowelsSet11\
    \ = vowelsSet.diff(vowelsSet10)\n        val vowelsSet12 = vowelsSet.diff(vowelsSet11)\n\
    \        val vowelsSet13 = vowelsSet.diff(vowelsSet12)\n        val vowelsSet14\
    \ = vowelsSet.diff(vowelsSet13)\n        val vowelsSet15 = vowelsSet.diff(vowelsSet14)\n\
    \        val vowelsSet16 = vowelsSet.diff(vowelsSet15)\n        val vowelsSet17\
    \ = vowelsSet.diff(vowelsSet16)\n        val vowelsSet18 = vowelsSet.diff(vowelsSet17)\n\
    \        val vowelsSet19 = vowelsSet.diff(vowelsSet18)\n        val vowelsSet20\
    \ = vowelsSet.diff(vowelsSet19)\n        val vowelsSet21 = vowelsSet.diff(vowelsSet20)\n\
    \        val vowelsSet22 = vowelsSet.diff(vowelsSet21)\n        val vowelsSet23\
    \ = vowelsSet.diff(vowelsSet22)\n        val vowelsSet24 = vowelsSet.diff(vowelsSet23)\n\
    \        val vowelsSet25 = vowelsSet.diff(vowelsSet24)\n        val vowelsSet26\
    \ = vowelsSet.diff(vowelsSet25)\n        val vowelsSet27 = vowelsSet.diff(vowelsSet26)\n\
    \        val vowelsSet28 = vowelsSet.diff(vowelsSet27)\n        val vowelsSet29\
    \ = vowelsSet.diff(vowelsSet28)\n        val vowelsSet30 = vowelsSet.diff(vowelsSet29)\n\
    \        val vowelsSet31 = vowelsSet.diff(vowelsSet30)\n        val vowelsSet32\
    \ = vowelsSet.diff(vowels\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsujcqrxz.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsujcqrxz.scala:17:38\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet2\e[0m = vowels.toSet.reverse\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a\
    \ member of Set[String] - did you mean Set[String].reversed?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpsujcqrxz.scala:48:5 ---------------------\e[0m\e\
    [0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0pn_suby.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0pn_suby.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIterator.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pn_suby.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pn_suby.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1659799256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsCount =\
    \ new mutable.HashMap[String, Int]()\n        var vowelsCount2 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount3 = new mutable.HashMap[String, Int]()\n    \
    \    var vowelsCount4 = new mutable.HashMap[String, Int]()\n        var vowelsCount5\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount6 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount7 = new mutable.HashMap[String, Int]()\n    \
    \    var vowelsCount8 = new mutable.HashMap[String, Int]()\n        var vowelsCount9\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount10 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount11 = new mutable.HashMap[String, Int]()\n   \
    \     var vowelsCount12 = new mutable.HashMap[String, Int]()\n        var vowelsCount13\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount14 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount15 = new mutable.HashMap[String, Int]()\n   \
    \     var vowelsCount16 = new mutable.HashMap[String, Int]()\n        var vowelsCount17\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount18 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount19 = new mutable.HashMap[String, Int]()\n   \
    \     var vowelsCount20 = new mutable.HashMap[String, Int]()\n        var vowelsCount21\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount22 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount23 = new mutable.HashMap[String, Int]()\n   \
    \     var vowelsCount24 = new mutable.HashMap[String, Int]()\n        var vowelsCount25\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount26 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount27 = new mutable.HashMap[String, Int]()\n   \
    \     var vowelsCount28 = new mutable.HashMap[String, Int]()\n        var vowelsCount29\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount30 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount31 = new mutable.HashMap[String, Int]()\n   \
    \     var vowelsCount32 = new mutable.HashMap[String, Int]()\n        var vowelsCount33\
    \ = new mutable.HashMap[String, Int]()\n        var \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpa4dsyn3i.scala:49:11 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa4dsyn3i.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpa4dsyn3i.scala:17:31 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mvar\e[0m \e[36mvowelsCount2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa4dsyn3i.scala:18:31\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e\
    [36mvowelsCount3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa4dsyn3i.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found"
  stdout: ''
  timestamp: 1659799320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        var vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   var vowelsCount = word.filter(x => vowels.contains(x)).length\n        var\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        var vowelsCount\
    \ = word.filter(x => vowels.contains(x)).length\n        var vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        var vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   var vowelsCount = word.filter(x => vowels.contains(x)).length\n        var\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        var vowelsCount\
    \ = word.filter(x => vowels.contains(x)).length\n        var vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        var vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   var vowelsCount = word.filter(x => vowels.contains(x)).length\n        var\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        var vowelsCount\
    \ = word.filter(x => vowels.contains(x)).length\n        var vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        var vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   var vowelsCount = word.filter(x => vowels.contains(x)).length\n        var\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        var vowelsCount\
    \ = word.filter(x => vowels.contains(x)).length\n        var vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        var vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   var vowelsCount = word.filter(x => vowels.contains(x)).length\n        var\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        var vowelsCount\
    \ = word.filter(x => vowels.contains(x)).length\n        var vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        var vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   var vowelsCount = word.filter(x => vowels.contains(x)).length\n        var\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        var vowelsCount\
    \ = word.filter(x \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcgrigelt.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcgrigelt.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvariable\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcgrigelt.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvariable\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcgrigelt.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvariable\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcgrigelt.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defin"
  stdout: ''
  timestamp: 1659799322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCount\
    \ = word.count(vowels)\n        val consonants = Set(\"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"z\")\n        val consonantsCount = word.count(consonants)\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount2\
    \ = vowelsCount + 1\n        val vowelsCount3 = vowelsCount + 2\n        val vowelsCount4\
    \ = vowelsCount + 3\n        val vowelsCount5 = vowelsCount + 4\n        val vowelsCount6\
    \ = vowelsCount + 5\n        val vowelsCount7 = vowelsCount + 6\n        val vowelsCount8\
    \ = vowelsCount + 7\n        val vowelsCount9 = vowelsCount + 8\n        val vowelsCount10\
    \ = vowelsCount + 9\n        val vowelsCount11 = vowelsCount + 10\n        val\
    \ vowelsCount12 = vowelsCount + 11\n        val vowelsCount13 = vowelsCount +\
    \ 12\n        val vowelsCount14 = vowelsCount + 13\n        val vowelsCount15\
    \ = vowelsCount + 14\n        val vowelsCount16 = vowelsCount + 15\n        val\
    \ vowelsCount17 = vowelsCount + 16\n        val vowelsCount18 = vowelsCount +\
    \ 17\n        val vowelsCount19 = vowelsCount + 18\n        val vowelsCount20\
    \ = vowelsCount + 19\n        val vowelsCount21 = vowelsCount + 20\n        val\
    \ vowelsCount22 = vowelsCount + 21\n        val vowelsCount23 = vowelsCount +\
    \ 22\n        val vowelsCount24 = vowelsCount + 23\n        val vowelsCount25\
    \ = vowelsCount + 24\n        val vowelsCount26 = vowelsCount + 25\n        val\
    \ vowelsCount27 = vowelsCount + 26\n        val vowelsCount28 = vowelsCount +\
    \ 27\n        val vowelsCount29 = vowelsCount + 28\n        val vowelsCount30\
    \ = vowelsCount + 29\n        val vowelsCount31 = vowelsCount + 30\n        val\
    \ vowelsCount32 = vowelsCount + 31\n        val vowelsCount33 = vowelsCount +\
    \ 32\n        val vowelsCount34 = vowelsCount + 33\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppdy4rik7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmppdy4rik7.scala:16:37 --------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(vowels)\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m               Found:    (vowels : scala.collection.mutable.Set[String])\n\
    \e[31m   |\e[0m               Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppdy4rik7.scala:18:41 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.count(consonants)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m           Found:    (consonants : scala.collection.mutable.Set[String])\n\
    \e[31m   |\e[0m           Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppdy4rik7.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmd8tao15.scala:22:62 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpmd8tao15.scala:36:68 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \ ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmd8tao15.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.count(vowels)\n\
    \        val vowelsCountReverse = word.count(vowels.reverse)\n        val vowelsCountReverse2\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse3 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse4 = word.count(vowels.reverse)\n        val vowelsCountReverse5\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse6 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse7 = word.count(vowels.reverse)\n        val vowelsCountReverse8\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse9 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse10 = word.count(vowels.reverse)\n        val vowelsCountReverse11\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse12 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse13 = word.count(vowels.reverse)\n        val vowelsCountReverse14\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse15 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse16 = word.count(vowels.reverse)\n        val vowelsCountReverse17\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse18 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse19 = word.count(vowels.reverse)\n        val vowelsCountReverse20\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse21 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse22 = word.count(vowels.reverse)\n        val vowelsCountReverse23\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse24 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse25 = word.count(vowels.reverse)\n        val vowelsCountReverse26\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse27 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse28 = word.count(vowels.reverse)\n        val vowelsCountReverse29\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse30 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse31 = word.count(vowels.reverse)\n        val vowelsCountReverse32\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse33 = word.count(vowels.reverse)\n\
    \        val vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp34v_zuze.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp34v_zuze.scala:16:37 --------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(vowels)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               Found:    (vowels : scala.collection.mutable.Set[String])\n\e\
    [31m   |\e[0m               Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp34v_zuze.scala:17:51 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountReverse\e[0m\
    \ = word.count(vowels.reverse)\n\e[31m\e[31m   |\e[0m                        \
    \                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not\
    \ a member of scala.collection.mutable.Set[String] - did you mean vowels.reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp34v_zuze.scala:18:52 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountReverse2\e[0m\
    \ = word.count(vowels.reverse)\n\e[31m\e[31m   |\e[0m                        \
    \                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not\
    \ a member of scala.collection.mutable.Set[String] - did you mean vowels.reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp34v_zuze.scala:19:52 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountReverse3\e[0m\
    \ = word.count(vowels.reverse)\n\e[31m\e[31m   |\e[0m                        \
    \                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not\
    \ a member of scala.collection.mutable.Set[String] - did you mean vowels.reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp34v_zuze.scala:20:52 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountReverse4\e[0m\
    \ = word.count(vowels.reverse)\n\e[31m\e[31m   |\e[0m                 "
  stdout: ''
  timestamp: 1659799301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowelsCount = vowels.count(word contains _)\n        val consonantsCount = consonants.count(word\
    \ contains _)\n        val vowelsCountInWord = vowels.count(word contains _)\n\
    \        val consonantsCountInWord = consonants.count(word contains _)\n     \
    \   val vowelsCountInWord = vowels.count(word contains _)\n        val consonantsCountInWord\
    \ = consonants.count(word contains _)\n        val vowelsCountInWord = vowels.count(word\
    \ contains _)\n        val consonantsCountInWord = consonants.count(word contains\
    \ _)\n        val vowelsCountInWord = vowels.count(word contains _)\n        val\
    \ consonantsCountInWord = consonants.count(word contains _)\n        val vowelsCountInWord\
    \ = vowels.count(word contains _)\n        val consonantsCountInWord = consonants.count(word\
    \ contains _)\n        val vowelsCountInWord = vowels.count(word contains _)\n\
    \        val consonantsCountInWord = consonants.count(word contains _)\n     \
    \   val vowelsCountInWord = vowels.count(word contains _)\n        val consonantsCountInWord\
    \ = consonants.count(word contains _)\n        val vowelsCountInWord = vowels.count(word\
    \ contains _)\n        val consonantsCountInWord = consonants.count(word contains\
    \ _)\n        val vowelsCountInWord = vowels.count(word contains _)\n        val\
    \ consonantsCountInWord = consonants.count(word contains _)\n        val vowelsCountInWord\
    \ = vowels.count(word contains _)\n        val consonantsCountInWord = consonants.count(word\
    \ contains _)\n        val vowelsCountInWord = vowels.count(word contains _)\n\
    \        val consonantsCountInWord = consonants.count(word contains _)\n     \
    \   val vowelsCountInWord = vowels.count(word contains _)\n        val consonantsCountInWord\
    \ = consonants.count(word contains _)\n        val vowels\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbtbgfwby.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbtbgfwby.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCountInWord\e[0m = vowels.count(word contains _)\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvowelsCountInWord is already defined as \e[33mvalue\e[0m \e[35mvowelsCountInWord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbtbgfwby.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCountInWord\e[0m = consonants.count(word\
    \ contains _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCountInWord is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsCountInWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbtbgfwby.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountInWord\e[0m =\
    \ vowels.count(word contains _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCountInWord is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsCountInWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbtbgfwby.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCountInWord\e\
    [0m = consonants.count(word contains _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCountInWord is already defined as \e[33mvalue\e\
    [0m \e["
  stdout: ''
  timestamp: 1659799322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowelsSet.intersect(vowelsSet2)\n\
    \        val vowelsSet4 = vowelsSet.diff(vowelsSet3)\n        val vowelsSet5 =\
    \ vowelsSet.diff(vowelsSet4)\n        val vowelsSet6 = vowelsSet.intersect(vowelsSet5)\n\
    \        val vowelsSet7 = vowelsSet.diff(vowelsSet6)\n        val vowelsSet8 =\
    \ vowelsSet.intersect(vowelsSet7)\n        val vowelsSet9 = vowelsSet.diff(vowelsSet8)\n\
    \        val vowelsSet10 = vowelsSet.intersect(vowelsSet9)\n        val vowelsSet11\
    \ = vowelsSet.diff(vowelsSet10)\n        val vowelsSet12 = vowelsSet.intersect(vowelsSet11)\n\
    \        val vowelsSet13 = vowelsSet.diff(vowelsSet12)\n        val vowelsSet14\
    \ = vowelsSet.intersect(vowelsSet13)\n        val vowelsSet15 = vowelsSet.diff(vowelsSet14)\n\
    \        val vowelsSet16 = vowelsSet.intersect(vowelsSet15)\n        val vowelsSet17\
    \ = vowelsSet.diff(vowelsSet16)\n        val vowelsSet18 = vowelsSet.intersect(vowelsSet17)\n\
    \        val vowelsSet19 = vowelsSet.diff(vowelsSet18)\n        val vowelsSet20\
    \ = vowelsSet.intersect(vowelsSet19)\n        val vowelsSet21 = vowelsSet.diff(vowelsSet20)\n\
    \        val vowelsSet22 = vowelsSet.intersect(vowelsSet21)\n        val vowelsSet23\
    \ = vowelsSet.diff(vowelsSet22)\n        val vowelsSet24 = vowelsSet.intersect(vowelsSet23)\n\
    \        val vowelsSet25 = vowelsSet.diff(vowelsSet24)\n        val vowelsSet26\
    \ = vowelsSet.intersect(vowelsSet25)\n        val vowelsSet27 = vowelsSet.diff(vowelsSet26)\n\
    \        val vowelsSet28 = vowelsSet.intersect(vowelsSet27)\n        val vowelsSet29\
    \ = vowelsSet.diff(vowelsSet28)\n        val vowelsSet30 = vowelsSet.intersect(vowelsSet29)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm8dlf9ls.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8dlf9ls.scala:47:5 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsCount =\
    \ Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount2 = Array(0, 0, 0, 0, 0, 0)\n\
    \        var vowelsCount3 = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount4\
    \ = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount5 = Array(0, 0, 0, 0, 0, 0)\n\
    \        var vowelsCount6 = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount7\
    \ = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount8 = Array(0, 0, 0, 0, 0, 0)\n\
    \        var vowelsCount9 = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount10\
    \ = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount11 = Array(0, 0, 0, 0, 0,\
    \ 0)\n        var vowelsCount12 = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount13\
    \ = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount14 = Array(0, 0, 0, 0, 0,\
    \ 0)\n        var vowelsCount15 = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount16\
    \ = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount17 = Array(0, 0, 0, 0, 0,\
    \ 0)\n        var vowelsCount18 = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount19\
    \ = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount20 = Array(0, 0, 0, 0, 0,\
    \ 0)\n        var vowelsCount21 = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount22\
    \ = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount23 = Array(0, 0, 0, 0, 0,\
    \ 0)\n        var vowelsCount24 = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount25\
    \ = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount26 = Array(0, 0, 0, 0, 0,\
    \ 0)\n        var vowelsCount27 = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount28\
    \ = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount29 = Array(0, 0, 0, 0, 0,\
    \ 0)\n        var vowelsCount30 = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount31\
    \ = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount32 = Array(0, 0, 0, 0, 0,\
    \ 0)\n        var vowelsCount33 = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount34\
    \ = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount35 = Array(0, 0, 0, 0, 0,\
    \ 0)\n        var vowelsCount36 = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount37\
    \ = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount38 = Array(0, 0, 0, 0, 0,\
    \ 0)\n        var vowelsCount39 = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount40\
    \ = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount41 = Array(0, 0, 0, 0, 0,\
    \ 0)\n        var vowelsCount42 = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount43\
    \ = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount44 = Array(0, 0, 0, 0, 0,\
    \ 0)\n        var vowelsCount45 = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount46\
    \ = Array(0, 0, 0, 0, 0, 0)\n        var vowelsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa3_ifeq3.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpa3_ifeq3.scala:63:5 ---------------------\e[0m\e[0m\n\e[31m63 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).length\n        val vowelsCount =\
    \ word.filter(x => vowels.contains(x)).length\n        val consonantsCount = word.filter(x\
    \ => consonants.contains(x)).length\n        val vowelsCount = word.filter(x =>\
    \ vowels.contains(x)).length\n        val consonantsCount = word.filter(x => consonants.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val consonantsCount = word.filter(x => consonants.contains(x)).length\n  \
    \      val vowelsCount = word.filter(x => vowels.contains(x)).length\n       \
    \ val consonantsCount = word.filter(x => consonants.contains(x)).length\n    \
    \    val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ consonantsCount = word.filter(x => consonants.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).length\n        val vowelsCount =\
    \ word.filter(x => vowels.contains(x)).length\n        val consonantsCount = word.filter(x\
    \ => consonants.contains(x)).length\n        val vowelsCount = word.filter(x =>\
    \ vowels.contains(x)).length\n        val consonantsCount = word.filter(x => consonants.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val consonantsCount = word.filter(x => consonants.contains(x)).length\n  \
    \      val vowelsCount = word.filter(x => vowels.contains(x)).length\n       \
    \ val consonantsCount = word.filter(x => consonants.contains(x)).length\n    \
    \    val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ consonantsCount = word.filter(x => consonants.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).length\n        val vowelsCount =\
    \ word.filter(x => vowels.contains(x)).length\n        val consonantsCount = word.filter(x\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaws8ra8y.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaws8ra8y.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaws8ra8y.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mx\e[0m => consonants.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpaws8ra8y.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaws8ra8y.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mx\e[0m => consonants.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659799269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n\
    \        var vowelIndex2 = word.length - 1\n        var vowelIndex3 = word.length\
    \ - 1\n        var vowelIndex4 = word.length - 1\n        var vowelIndex5 = word.length\
    \ - 1\n        var vowelIndex6 = word.length - 1\n        var vowelIndex7 = word.length\
    \ - 1\n        var vowelIndex8 = word.length - 1\n        var vowelIndex9 = word.length\
    \ - 1\n        var vowelIndex10 = word.length - 1\n        var vowelIndex11 =\
    \ word.length - 1\n        var vowelIndex12 = word.length - 1\n        var vowelIndex13\
    \ = word.length - 1\n        var vowelIndex14 = word.length - 1\n        var vowelIndex15\
    \ = word.length - 1\n        var vowelIndex16 = word.length - 1\n        var vowelIndex17\
    \ = word.length - 1\n        var vowelIndex18 = word.length - 1\n        var vowelIndex19\
    \ = word.length - 1\n        var vowelIndex20 = word.length - 1\n        var vowelIndex21\
    \ = word.length - 1\n        var vowelIndex22 = word.length - 1\n        var vowelIndex23\
    \ = word.length - 1\n        var vowelIndex24 = word.length - 1\n        var vowelIndex25\
    \ = word.length - 1\n        var vowelIndex26 = word.length - 1\n        var vowelIndex27\
    \ = word.length - 1\n        var vowelIndex28 = word.length - 1\n        var vowelIndex29\
    \ = word.length - 1\n        var vowelIndex30 = word.length - 1\n        var vowelIndex31\
    \ = word.length - 1\n        var vowelIndex32 = word.length - 1\n        var vowelIndex33\
    \ = word.length - 1\n        var vowelIndex34 = word.length - 1\n        var vowelIndex35\
    \ = word.length - 1\n        var vowelIndex36 = word.length - 1\n        var vowelIndex37\
    \ = word.length - 1\n        var vowelIndex38 = word.length - 1\n        var vowelIndex39\
    \ = word.length - 1\n        var vowelIndex40 = word.length - 1\n        var vowelIndex41\
    \ = word.length - 1\n        var vowelIndex42 = word.length - 1\n        var vowelIndex43\
    \ = word.length - 1\n        var vowelIndex44 = word.length - 1\n        var vowelIndex45\
    \ = word.length - 1\n        var vowelIndex46 = word.length - 1\n        var vowelIndex47\
    \ = word.length - 1\n        var vowelIndex48 = word.length - 1\n        var vowelIndex49\
    \ = word.length - 1\n        var vowelIndex50 = word.length - 1\n        var vowelIndex51\
    \ = word.length - 1\n        var vowelIndex52 = word.length - 1\n        var vowelIndex53\
    \ = word.length - 1\n        var vowelIndex54 = word.length - 1\n        var vowelIndex55\
    \ = word.length - 1\n        var vowelIndex56 = word.length - 1\n        var vowelIndex57\
    \ = word.length\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpduiyoyq8.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n\
    \        var vowel = \"\"\n        var index = word.length - 1\n        while(index\
    \ >= 0) {\n            val c = word.charAt(index)\n            vowelIndex += 1\n\
    \            if(vowels.contains(c)) {\n                vowel = c\n           \
    \ }\n            index -= 1\n        }\n        if(vowelIndex > 0) {\n       \
    \     vowel = vowel.charAt(vowelIndex - 1)\n        }\n        return vowel\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowjhcdj_.scala:22:31\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m(vowels.contains(c))\
    \ {\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e\
    [0m                               Found:    (c : Char)\n\e[31m   |\e[0m      \
    \                         Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpowjhcdj_.scala:23:24 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                vowel = c\n\e[31m\e[31m   |\e[0m         \
    \               ^\e[0m\n\e[31m   |\e[0m                        Found:    (c :\
    \ Char)\n\e[31m   |\e[0m                        Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowjhcdj_.scala:28:32 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            vowel = vowel.charAt(vowelIndex - \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Found:    Char\n\e[31m   |\e[0m      \
    \              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowelsSet.diff(vowelsSet2)\n\
    \        val vowelsSet4 = vowelsSet.diff(vowelsSet3)\n        val vowelsSet5 =\
    \ vowelsSet.diff(vowelsSet4)\n        val vowelsSet6 = vowelsSet.diff(vowelsSet5)\n\
    \        val vowelsSet7 = vowelsSet.diff(vowelsSet6)\n        val vowelsSet8 =\
    \ vowelsSet.diff(vowelsSet7)\n        val vowelsSet9 = vowelsSet.diff(vowelsSet8)\n\
    \        val vowelsSet10 = vowelsSet.diff(vowelsSet9)\n        val vowelsSet11\
    \ = vowelsSet.diff(vowelsSet10)\n        val vowelsSet12 = vowelsSet.diff(vowelsSet11)\n\
    \        val vowelsSet13 = vowelsSet.diff(vowelsSet12)\n        val vowelsSet14\
    \ = vowelsSet.diff(vowelsSet13)\n        val vowelsSet15 = vowelsSet.diff(vowelsSet14)\n\
    \        val vowelsSet16 = vowelsSet.diff(vowelsSet15)\n        val vowelsSet17\
    \ = vowelsSet.diff(vowelsSet16)\n        val vowelsSet18 = vowelsSet.diff(vowelsSet17)\n\
    \        val vowelsSet19 = vowelsSet.diff(vowelsSet18)\n        val vowelsSet20\
    \ = vowelsSet.diff(vowelsSet19)\n        val vowelsSet21 = vowelsSet.diff(vowelsSet20)\n\
    \        val vowelsSet22 = vowelsSet.diff(vowelsSet21)\n        val vowelsSet23\
    \ = vowelsSet.diff(vowelsSet22)\n        val vowelsSet24 = vowelsSet.diff(vowelsSet23)\n\
    \        val vowelsSet25 = vowelsSet.diff(vowelsSet24)\n        val vowelsSet26\
    \ = vowelsSet.diff(vowelsSet25)\n        val vowelsSet27 = vowelsSet.diff(vowelsSet26)\n\
    \        val vowelsSet28 = vowelsSet.diff(vowelsSet27)\n        val vowelsSet29\
    \ = vowelsSet.diff(vowelsSet28)\n        val vowelsSet30 = vowelsSet.diff(vowelsSet29)\n\
    \        val vowelsSet31 = vowelsSet.diff(vowelsSet30)\n        val vowelsSet32\
    \ = vowelsSet.diff(vowels\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsujcqrxz.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsujcqrxz.scala:17:38\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet2\e[0m = vowels.toSet.reverse\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a\
    \ member of Set[String] - did you mean Set[String].reversed?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpsujcqrxz.scala:48:5 ---------------------\e[0m\e\
    [0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).length\n        val consonants = word.filter(c => !vowels.contains(c)).length\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).length\n     \
    \   val consonantsCount = word.filter(c => !vowels.contains(c)).length\n     \
    \   val vowelsCount = word.filter(c => vowels.contains(c)).length\n        val\
    \ consonantsCount = word.filter(c => !vowels.contains(c)).length\n        val\
    \ vowelsCount = word.filter(c => vowels.contains(c)).length\n        val consonantsCount\
    \ = word.filter(c => !vowels.contains(c)).length\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).length\n        val consonantsCount = word.filter(c =>\
    \ !vowels.contains(c)).length\n        val vowelsCount = word.filter(c => vowels.contains(c)).length\n\
    \        val consonantsCount = word.filter(c => !vowels.contains(c)).length\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).length\n     \
    \   val consonantsCount = word.filter(c => !vowels.contains(c)).length\n     \
    \   val vowelsCount = word.filter(c => vowels.contains(c)).length\n        val\
    \ consonantsCount = word.filter(c => !vowels.contains(c)).length\n        val\
    \ vowelsCount = word.filter(c => vowels.contains(c)).length\n        val consonantsCount\
    \ = word.filter(c => !vowels.contains(c)).length\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).length\n        val consonantsCount = word.filter(c =>\
    \ !vowels.contains(c)).length\n        val vowelsCount = word.filter(c => vowels.contains(c)).length\n\
    \        val consonantsCount = word.filter(c => !vowels.contains(c)).length\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).length\n     \
    \   val consonantsCount = word.filter(c => !vowels.contains(c)).length\n     \
    \   val vowelsCount = word.filter(c => vowels.contains(c)).length\n        val\
    \ consonantsCount = word.filter(c => !vowels.contains(c)).length\n        val\
    \ vowelsCount = word.filter(c => vowels.contains(c)).length\n        val consonantsCount\
    \ = word.filter(c => !vowels.contains(c)).length\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).length\n        val conson\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppeq7ejfv.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppeq7ejfv.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = word.filter(\e[36mc\e[0m => vowels.contains(c)).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppeq7ejfv.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mc\e\
    [0m => vowels.contains(c)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppeq7ejfv.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mc\e[0m => !vowels.contains(c)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmppeq7ejfv.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mc\e[0m => vowels.contains(c)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is alre"
  stdout: ''
  timestamp: 1659799326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n\
    \        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var vowelCount = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp6j68wylm.scala:122:11 --------------------------\e\
    [0m\e[0m\n\e[31m122 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m    |\e[0m    \
    \       ^\e[0m\n\e[31m    |\e[0m           pattern expected\n\e[31m    |\e[0m\n\
    \e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6j68wylm.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mvowelIndex\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mvowelIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6j68wylm.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mvowelCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCount is already defined as \e[33mvariable\e[0m \e[35mvowelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6j68wylm.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mvar\e[0m \e[36mvowel\e[0m = \e[31m\"\"\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowel is already defined\
    \ as \e[33mvariable\e[0m \e[35mvowel\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6j68wylm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mvowelIndex\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mvowelIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6j68wylm.scala:23:12\
    \ ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1659799325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet3\
    \ = vowelsSet.filter(_ != \"u\")\n        val vowelsSet4 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet5 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet6 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet7 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet8 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet9 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet10 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet11 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet12 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet13 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet14 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet15 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet16 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet17 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet18 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet19 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet20 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet21 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet22 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet23 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet24 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet25 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet26 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet27 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet28 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet29 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet30 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet31 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet32 = vowelsSet.filter(_ != \"u\")\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj06r3eh8.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).size\n        val consonants = word.filter(c\
    \ => !vowels.contains(c))\n        val consonantsCount = consonants.size\n   \
    \     val vowelsCount = consonantsCount - vowelsCount\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8zm1u43o.scala:59:39 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + \n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8zm1u43o.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = consonantsCount - vowelsCount\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8zm1u43o.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8zm1u43o.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8zm1u43o.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount is\
    \ a"
  stdout: ''
  timestamp: 1659799328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0pn_suby.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0pn_suby.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIterator.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pn_suby.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pn_suby.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1659799256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowelsAndConsonants = vowels ++ consonants\n        val vowelsAndConsonantsList\
    \ = vowelsAndConsonants.toList\n        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListIterator = vowelsAndConsonantsList.iterator\n\
    \        val vowelsAndConsonantsListIteratorNext = vowelsAndConsonantsListIterator.next\n\
    \        val vowelsAndConsonantsListIteratorNextValue = vowelsAndConsonantsListIteratorNext.value\n\
    \        val vowelsAndConsonantsListIteratorNextKey = vowelsAndConsonantsListIteratorNext.key\n\
    \        val vowelsAndConsonantsListIteratorNextKeyValue = vowelsAndConsonantsListIteratorNext.keyValue\n\
    \        val vowelsAndConsonantsListIteratorNextKeyValue = vowelsAndConsonantsListIteratorNext.keyValue\n\
    \        val vowelsAndConsonantsListIteratorNextKeyValue = vowelsAndConsonantsListIteratorNext.keyValue\n\
    \        val vowelsAndConsonantsListIteratorNextKeyValue = vowelsAndConsonantsListIteratorNext.keyValue\n\
    \        val vowelsAndConsonantsListIteratorNextKeyValue = vowelsAndConsonantsListIteratorNext.keyValue\n\
    \        val vowelsAndConsonantsListIteratorNextKeyValue = vowelsAndConsonantsListIteratorNext.keyValue\n\
    \        val vowelsAndConsonantsListIteratorNextKeyValue = vowelsAndConsonantsListIteratorNext.keyValue\n\
    \        val vowelsAndConsonantsListIteratorNextKeyValue = vowelsAndConsonantsListIteratorNext.keyValue\n\
    \        val vowelsAndConsonantsListIteratorNextKeyValue = vowelsAndConsonantsListIteratorNext.keyValue\n\
    \        val vowelsAndConsonantsListIteratorNextKeyValue = vowelsAndConsonantsListIteratorNext.keyValue\n\
    \        val vowelsAndConsonantsListIteratorNextKeyValue = vowelsAndConsonantsListIteratorNext.keyValue\n\
    \        val vowelsAndConsonantsListIteratorNextKeyValue = vowelsAndConsonantsListIteratorNext.keyValue\n\
    \        val vowelsAndConsonantsListIteratorNextKeyValue = vowelsAndConsonantsListIteratorNext.keyValue\n\
    \        val vowelsAndConsonantsListIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz__762mz.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz__762mz.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsAndConsonantsListIteratorNextKeyValue\e[0m = vowelsAndConsonantsListIteratorNext.keyValue\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsListIteratorNextKeyValue is already defined\
    \ as \e[33mvalue\e[0m \e[35mvowelsAndConsonantsListIteratorNextKeyValue\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpz__762mz.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListIteratorNextKeyValue\e\
    [0m = vowelsAndConsonantsListIteratorNext.keyValue\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsListIteratorNextKeyValue is already defined\
    \ as \e[33mvalue\e[0m \e[35mvowelsAndConsonantsListIteratorNextKeyValue\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpz__762mz.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListIteratorNextKeyValue\e\
    [0m = vowelsAndConsonantsListIteratorNext.keyValue\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsListIteratorNextKeyValue is already defined\
    \ as \e[33mvalue\e[0m \e[35mvowelsAndConsonantsListIteratorNextKeyValue\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel "
  stdout: ''
  timestamp: 1659799327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowelsBefore = vowels.toList.dropRight(word.length)\n        val vowelsAfter\
    \ = vowels.toList.dropLeft(word.length)\n        val consonantsBefore = consonants.toList.dropRight(word.length)\n\
    \        val consonantsAfter = consonants.toList.dropLeft(word.length)\n     \
    \   val vowelsBetween = vowelsBefore.zip(vowelsAfter).filter(_._1.toString.toLowerCase\
    \ == _._2.toString.toLowerCase && _._1.toString.toLowerCase != _._2.toString.toLowerCase\
    \ && _._1.toString.toLowerCase != _._2.toString.toLowerCase && _._1.toString.toLowerCase\
    \ != _._2.toString.toLowerCase && _._1.toString.toLowerCase != _._2.toString.toLowerCase\
    \ && _._1.toString.toLowerCase != _._2.toString.toLowerCase && _._1.toString.toLowerCase\
    \ != _._2.toString.toLowerCase && _._1.toString.toLowerCase != _._2.toString.toLowerCase\
    \ && _._1.toString.toLowerCase != _._2.toString.toLowerCase && _._1.toString.toLowerCase\
    \ != _._2.toString.toLowerCase && _._1.toString.toLowerCase != _._2.toString.toLowerCase\
    \ && _._1.toString.toLowerCase != _._2.toString.toLowerCase && _._1.toString.toLowerCase\
    \ != _._2.toString.toLowerCase && _._1.toString.toLowerCase != _._2.toString.toLowerCase\
    \ && _._1.toString.toLowerCase != _._2.toString.toLowerCase && _._1.toString.toLowerCase\
    \ != _._2.toString.toLowerCase && _._1.toString.toLowerCase != _._2.toString.toLowerCase\
    \ && _._1.toString.toLowerCase != _._2.toString.toLowerCase && _._1.toString.toLowerCase\
    \ != _._2.toString.toLowerCase && _._1.toString.toLowerCase != _._2.toString.toLowerCase\
    \ && \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsys8d2rn.scala:21:1224 -------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsBetween\e[0m = vowelsBefore.zip(vowelsAfter).filter(_._1.toString.toLowerCase\
    \ == _._2.toString.toLowerCase && _._1.toString.toLowerCase != _._2.toString.toLowerCase\
    \ && _._1.toString.toLowerCase != _._2.toString.toLowerCase && _._1.toString.toLowerCase\
    \ != _._2.toString.toLowerCase && _._1.toString.toLowerCase != _._2.toString.toLowerCase\
    \ && _._1.toString.toLowerCase != _._2.toString.toLowerCase && _._1.toString.toLowerCase\
    \ != _._2.toString.toLowerCase && _._1.toString.toLowerCase != _._2.toString.toLowerCase\
    \ && _._1.toString.toLowerCase != _._2.toString.toLowerCase && _._1.toString.toLowerCase\
    \ != _._2.toString.toLowerCase && _._1.toString.toLowerCase != _._2.toString.toLowerCase\
    \ && _._1.toString.toLowerCase != _._2.toString.toLowerCase && _._1.toString.toLowerCase\
    \ != _._2.toString.toLowerCase && _._1.toString.toLowerCase != _._2.toString.toLowerCase\
    \ && _._1.toString.toLowerCase != _._2.toString.toLowerCase && _._1.toString.toLowerCase\
    \ != _._2.toString.toLowerCase && _._1.toString.toLowerCase != _._2.toString.toLowerCase\
    \ && _._1.toString.toLowerCase != _._2.toString.toLowerCase && _._1.toString.toLowerCase\
    \ != _._2.toString.toLowerCase && _._1.toString.toLowerCase != _._2.toString.toLowerCase\
    \ && \n\e[31m\e[31m   |\e[0m                                                 \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                 "
  stdout: ''
  timestamp: 1659799328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgda95_e1.scala:52:25 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgda95_e1.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(_\
    \ == 'a' || _ == 'e' || _ == 'i' || _ == 'o' || _ == 'u').length\n        val\
    \ consonants = word.filter(_ != 'a' && _ != 'e' && _ != 'i' && _ != 'o' && _ !=\
    \ 'u').length\n        val vowelsBetweenConsonants = vowels.filter(_ => word.indexOf(_)\
    \ >= consonants).length\n        val vowelsBetweenConsonantsCount = vowels.filter(_\
    \ => word.indexOf(_) >= consonants && word.indexOf(_) <= consonants + vowelsBetweenConsonants).length\n\
    \        val vowelsBetweenConsonantsCount2 = vowels.filter(_ => word.indexOf(_)\
    \ >= consonants && word.indexOf(_) <= consonants + vowelsBetweenConsonants &&\
    \ word.indexOf(_) != consonants + vowelsBetweenConsonants + vowelsBetweenConsonants).length\n\
    \        val vowelsBetweenConsonantsCount3 = vowels.filter(_ => word.indexOf(_)\
    \ >= consonants && word.indexOf(_) <= consonants + vowelsBetweenConsonants &&\
    \ word.indexOf(_) != consonants + vowelsBetweenConsonants + vowelsBetweenConsonants\
    \ && word.indexOf(_) != consonants + vowelsBetweenConsonants + vowelsBetweenConsonants\
    \ + vowelsBetweenConsonants).length\n        val vowelsBetweenConsonantsCount4\
    \ = vowels.filter(_ => word.indexOf(_) >= consonants && word.indexOf(_) <= consonants\
    \ + vowelsBetweenConsonants && word.indexOf(_) != consonants + vowelsBetweenConsonants\
    \ + vowelsBetweenConsonants && word.indexOf(_) != consonants + vowelsBetweenConsonants\
    \ + vowelsBetweenConsonants + vowelsBetweenConsonants + vowelsBetweenConsonants).length\n\
    \        val vowelsBetweenConsonantsCount5 = vowels.filter(_ => word.indexOf(_)\
    \ >= consonants && word.indexOf(_) <= consonants + vowelsBetweenConsonants &&\
    \ word.indexOf(_) != consonants + vowelsBetweenConsonants + vowelsBetweenConsonants\
    \ && word.indexOf(_) != consonants + vowelsBetweenConsonants + vowelsBetweenConsonants\
    \ + vowelsBetweenConsonants + vowelsBetweenConsonants + vowelsBetweenConsonants).length\n\
    \        val vowelsBetweenConsonantsCount6 = vowels.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2esocmi_.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmp2esocmi_.scala:16:38 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(_ == \e[31m'a'\e\
    [0m || _ == \e[31m'e'\e[0m || _ == \e[31m'i'\e[0m || _ == \e[31m'o'\e[0m || _\
    \ == \e[31m'u'\e[0m).length\n\e[31m\e[31m   |\e[0m                           \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp2esocmi_.scala:17:37 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mconsonants\e[0m = word.filter(_\
    \ != \e[31m'a'\e[0m && _ != \e[31m'e'\e[0m && _ != \e[31m'i'\e[0m && _ != \e[31m'o'\e\
    [0m && _ != \e[31m'u'\e[0m).length\n\e[31m\e[31m   |\e[0m                    \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp2esocmi_.scala:18:70 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsBetweenConsonants\e\
    [0m = vowels.filter(_ => word.indexOf(_) >= consonants).length\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \  ^\e[0m\n\e[31m   |\e[0m  Missing parameter type\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m  I could not infer the type of the parameter _$12 of expanded function:\n\
    \e[31m   |\e[0m  _$12 => word.indexOf(_$12) >= consonants.\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmp2esocmi_.scala:19:75 -----------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsBetweenConsonantsCount\e\
    [0m = vowels.filter(_ => word.indexOf(_) >= consonants && word.indexOf(_) <= consonants\
    \ + vowelsBetweenConsonants).length\n\e[31m\e[31m   |\e[0m                   \
    \                                               "
  stdout: ''
  timestamp: 1659799328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.filter(_ != \"a\")\n        val vowelsSet3\
    \ = vowelsSet.filter(_ != \"e\")\n        val vowelsSet4 = vowelsSet.filter(_\
    \ != \"i\")\n        val vowelsSet5 = vowelsSet.filter(_ != \"o\")\n        val\
    \ vowelsSet6 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet7 = vowelsSet.filter(_\
    \ != \"A\")\n        val vowelsSet8 = vowelsSet.filter(_ != \"E\")\n        val\
    \ vowelsSet9 = vowelsSet.filter(_ != \"I\")\n        val vowelsSet10 = vowelsSet.filter(_\
    \ != \"O\")\n        val vowelsSet11 = vowelsSet.filter(_ != \"U\")\n        val\
    \ vowelsSet12 = vowelsSet.filter(_ != \"a\")\n        val vowelsSet13 = vowelsSet.filter(_\
    \ != \"e\")\n        val vowelsSet14 = vowelsSet.filter(_ != \"i\")\n        val\
    \ vowelsSet15 = vowelsSet.filter(_ != \"o\")\n        val vowelsSet16 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet17 = vowelsSet.filter(_ != \"A\")\n        val\
    \ vowelsSet18 = vowelsSet.filter(_ != \"E\")\n        val vowelsSet19 = vowelsSet.filter(_\
    \ != \"I\")\n        val vowelsSet20 = vowelsSet.filter(_ != \"O\")\n        val\
    \ vowelsSet21 = vowelsSet.filter(_ != \"U\")\n        val vowelsSet22 = vowelsSet.filter(_\
    \ != \"a\")\n        val vowelsSet23 = vowelsSet.filter(_ != \"e\")\n        val\
    \ vowelsSet24 = vowelsSet.filter(_ != \"i\")\n        val vowelsSet25 = vowelsSet.filter(_\
    \ != \"o\")\n        val vowelsSet26 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet27 = vowelsSet.filter(_ != \"A\")\n        val vowelsSet28 = vowelsSet.filter(_\
    \ != \"E\")\n        val vowelsSet29 = vowelsSet.filter(_ != \"I\")\n        val\
    \ vowelsSet30 = vowelsSet.filter(_ != \"O\")\n        val vowelsSet31 = vowelsSet.filter(_\
    \ != \"U\")\n        val vowelsSet32 = vowelsSet.filter(_ != \"a\")\n        val\
    \ vowels\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaiee704y.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpaiee704y.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\"))\n\
    \        val vowelsSet3 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\",\"\
    y\"))\n        val vowelsSet4 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"\
    u\",\"y\",\"r\"))\n        val vowelsSet5 = vowelsSet.diff(Set(\"a\",\"e\",\"\
    i\",\"o\",\"u\",\"y\",\"r\",\"t\"))\n        val vowelsSet6 = vowelsSet.diff(Set(\"\
    a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"r\",\"t\",\"s\"))\n        val vowelsSet7\
    \ = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"r\",\"t\",\"s\",\"\
    d\"))\n        val vowelsSet8 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"\
    u\",\"y\",\"r\",\"t\",\"s\",\"d\",\"g\"))\n        val vowelsSet9 = vowelsSet.diff(Set(\"\
    a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"r\",\"t\",\"s\",\"d\",\"g\",\"h\"))\n    \
    \    val vowelsSet10 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"\
    ,\"r\",\"t\",\"s\",\"d\",\"g\",\"h\",\"j\"))\n        val vowelsSet11 = vowelsSet.diff(Set(\"\
    a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"r\",\"t\",\"s\",\"d\",\"g\",\"h\",\"j\",\"\
    k\"))\n        val vowelsSet12 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"\
    u\",\"y\",\"r\",\"t\",\"s\",\"d\",\"g\",\"h\",\"j\",\"k\",\"l\"))\n        val\
    \ vowelsSet13 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"r\",\"\
    t\",\"s\",\"d\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\"))\n        val vowelsSet14\
    \ = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"r\",\"t\",\"s\",\"\
    d\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\"))\n        val vowelsSet15 = vowelsSet.diff(Set(\"\
    a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"r\",\"t\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfjq3v9ay.scala:30:73 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet15\e[0m = vowelsSet.diff(Set(\e\
    [31m\"a\"\e[0m,\e[31m\"e\"\e[0m,\e[31m\"i\"\e[0m,\e[31m\"o\"\e[0m,\e[31m\"u\"\e\
    [0m,\e[31m\"y\"\e[0m,\e[31m\"r\"\e[0m,\"t\n\e[31m\e[31m   |\e[0m             \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                                 unclosed string literal\n\
    \e[31m\e[31m-- Error: /tmp/tmpfjq3v9ay.scala:32:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfjq3v9ay.scala:31:5 ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpfjq3v9ay.scala:32:4 -------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m\
    \    Not found: tdef\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsCount\
    \ = vowels.toList.map(x => vowels.count(_ == x))\n        val vowelsCount = vowelsCount.sum\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5uehuxbb.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5uehuxbb.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5uehuxbb.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5uehuxbb.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5uehuxbb.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5uehuxbb.scala:21:12 ------------------------"
  stdout: ''
  timestamp: 1659799330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ vowels : mutable.Set[String] = mutable.Set()\n        var vowelsCount : mutable.Set[String]\
    \ = mutable.Set()\n        val vowelsSet = mutable.Set(\"a\", \"e\", \"i\", \"\
    o\", \"u\", \"y\")\n        val vowelsCountSet = mutable.Set(\"a\", \"e\", \"\
    i\", \"o\", \"u\", \"y\")\n        val vowelsSet2 = mutable.Set(\"a\", \"e\",\
    \ \"i\", \"o\", \"u\", \"y\")\n        val vowelsCountSet2 = mutable.Set(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet3 = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCountSet3 = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet4 = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCountSet4 = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet5 = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCountSet5 = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet6 = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCountSet6 = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet7 = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCountSet7 = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet8 = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCountSet8 = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet9 = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCountSet9 = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet10 = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCountSet10 = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet11 = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCountSet11 = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet12 = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCountSet12 = mutable.Set(\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmm7k5rho.scala:40:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountSet12\e[0m =\
    \ mutable.Set(\"\n\e[31m\e[31m   |\e[0m                                      \
    \     ^\e[0m\n\e[31m   |\e[0m                                           unclosed\
    \ string literal\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmm7k5rho.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e\
    [36mvowels\e[0m : mutable.Set[\e[35mString\e[0m] = mutable.Set()\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmm7k5rho.scala:15:43\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e\
    [36mvowels\e[0m : mutable.Set[\e[35mString\e[0m] = mutable.Set()\n\e[31m\e[31m\
    \   |\e[0m                                           ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmm7k5rho.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount\e[0m : mutable.Set[\e\
    [35mString\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmm7k5rho.scala:16:48\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e\
    [36mvowelsCount\e[0m : mutable.Set[\e[35mString\e[0m] = mutable.Set()\n\e[31m\e\
    [31m   |\e[0m                                                ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmm7k5rho.sc"
  stdout: ''
  timestamp: 1659799330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount2 = word.filter(x => vowels.contains(x)).length\n\
    \        var vowelsCount3 = word.filter(x => vowels.contains(x)).length\n    \
    \    var vowelsCount4 = word.filter(x => vowels.contains(x)).length\n        var\
    \ vowelsCount5 = word.filter(x => vowels.contains(x)).length\n        var vowelsCount6\
    \ = word.filter(x => vowels.contains(x)).length\n        var vowelsCount7 = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount8 = word.filter(x => vowels.contains(x)).length\n\
    \        var vowelsCount9 = word.filter(x => vowels.contains(x)).length\n    \
    \    var vowelsCount10 = word.filter(x => vowels.contains(x)).length\n       \
    \ var vowelsCount11 = word.filter(x => vowels.contains(x)).length\n        var\
    \ vowelsCount12 = word.filter(x => vowels.contains(x)).length\n        var vowelsCount13\
    \ = word.filter(x => vowels.contains(x)).length\n        var vowelsCount14 = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount15 = word.filter(x =>\
    \ vowels.contains(x)).length\n        var vowelsCount16 = word.filter(x => vowels.contains(x)).length\n\
    \        var vowelsCount17 = word.filter(x => vowels.contains(x)).length\n   \
    \     var vowelsCount18 = word.filter(x => vowels.contains(x)).length\n      \
    \  var vowelsCount19 = word.filter(x => vowels.contains(x)).length\n        var\
    \ vowelsCount20 = word.filter(x => vowels.contains(x)).length\n        var vowelsCount21\
    \ = word.filter(x => vowels.contains(x)).length\n        var vowelsCount22 = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount23 = word.filter(x =>\
    \ vowels.contains(x)).length\n        var vowelsCount24 = word.filter(x => vowels.contains(x)).length\n\
    \        var vowelsCount25 = word.filter(x => vowels.contains(x)).length\n   \
    \     var vowelsCount26 = word.filter(x => vowels.contains(x)).length\n      \
    \  var vowelsCount27 = word.filter(x => vowels.contains(x)).length\n        var\
    \ vowelsCount28 = word.filter(x => vowels.contains(x)).length\n        var vowelsCount29\
    \ = word.filter(x => vowels.contains(x)).length\n        var vowelsCount30 = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount31 = word.filter(x =>\
    \ vowels.contains(x)).length\n        var vowelsCount32 = word.filter(x => vowels.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_ojx4u0.scala:16:59\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e\
    [0m                                                           ^\e[0m\n\e[31m \
    \  |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_ojx4u0.scala:17:60\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount2\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_ojx4u0.scala:18:60\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount3\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_ojx4u0.scala:19:60\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount4\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m       "
  stdout: ''
  timestamp: 1659799272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount2 = word.filter(x => vowels.contains(x.toLowerCase())).size\n\
    \        val vowelsCount3 = word.filter(x => vowels.contains(x.toUpperCase())).size\n\
    \        val vowelsCount4 = word.filter(x => vowels.contains(x.toUpperCase().toLowerCase())).size\n\
    \        val vowelsCount5 = word.filter(x => vowels.contains(x.toUpperCase().toUpperCase())).size\n\
    \        val vowelsCount6 = word.filter(x => vowels.contains(x.toUpperCase().toUpperCase().toLowerCase())).size\n\
    \        val vowelsCount7 = word.filter(x => vowels.contains(x.toUpperCase().toUpperCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount8 = word.filter(x => vowels.contains(x.toUpperCase().toUpperCase().toLowerCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount9 = word.filter(x => vowels.contains(x.toUpperCase().toUpperCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount10 = word.filter(x => vowels.contains(x.toUpperCase().toUpperCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount11 = word.filter(x => vowels.contains(x.toUpperCase().toUpperCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount12 = word.filter(x => vowels.contains(x.toUpperCase().toUpperCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount13 = word.filter(x => vowels.contains(x.toUpperCase().toUpperCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount14 = word.filter(x => vowels.contains(x.toUpperCase().toUpperCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount15 = word.filter(x => vowels.contains(x.toUpperCase().toUpperCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount16 = word.filter(x => vowels.contains(x.toUpperCase().toUpperCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase())).size\n\
    \        val vowelsCount17 = word.filter(x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpehfaz6ko.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpehfaz6ko.scala:16:59 --------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \  Found:    (x : Char)\n\e[31m   |\e[0m                                     \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpehfaz6ko.scala:17:62 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mvowelsCount2\e[0m = word.filter(\e[36mx\e[0m =>\
    \ vowels.contains(x.toLowerCase())).size\n\e[31m\e[31m   |\e[0m              \
    \                                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toLowerCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpehfaz6ko.scala:18:62 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount3\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x.toUpperCase())).size\n\e[31m\e[31m   |\e[0m  \
    \                                                          ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpehfaz6ko.scala:19:62\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsCount4\e[0m = word.filter(\e[36mx\e[0m => vowels.contains(x.toUpperCase().toLowerCase())).size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value toUpperCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpehfaz6ko.scala:20:62\
    \ -----------------"
  stdout: ''
  timestamp: 1659799332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0pn_suby.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0pn_suby.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIterator.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pn_suby.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pn_suby.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1659799256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet\
    \ = vowels.toSet\n        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator\
    \ = vowelsSet.iterator\n        val vowelsSetIteratorNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpek4q6ao0.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpek4q6ao0.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIterator.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpek4q6ao0.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpek4q6ao0.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ de"
  stdout: ''
  timestamp: 1659799330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCount\
    \ = vowels.toList.map(x => word.length.toDouble).sum\n        val vowelsIndex\
    \ = word.zipWithIndex.filter(x => vowels.contains(x._1)).map(x => x._2).max\n\
    \        val vowelsIndex = vowelsIndex.toDouble\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.toInt\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.toInt\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.toInt\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.toInt\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.toInt\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.toInt\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.toInt\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.toInt\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.toInt\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.toInt\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.toInt\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.toInt\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.toInt\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.toInt\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.toInt\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.toInt\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.toInt\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.toInt\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.toInt\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex.to\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpooh8bi2a.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.toDouble\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpooh8bi2a.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpooh8bi2a.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpooh8bi2a.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpooh8bi2a.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsIndex is already de"
  stdout: ''
  timestamp: 1659799331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowelsAndConsonants = vowels ++ consonants\n        val vowelsAndConsonantsList\
    \ = vowelsAndConsonants.toList\n        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmc0ol7an.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmc0ol7an.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsAndConsonantsListLength\e[0m = vowelsAndConsonantsListLength - \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmc0ol7an.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListLength\e\
    [0m = vowelsAndConsonantsListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsAndConsonantsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmc0ol7an.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListLength\e\
    [0m = vowelsAndConsonantsListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsAndConsonantsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmc0ol7an.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListLength\e\
    [0m = vowelsAndConsonantsLi"
  stdout: ''
  timestamp: 1659799331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgda95_e1.scala:52:25 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgda95_e1.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet\
    \ = vowels.toSet;\n        val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"\
    i\", \"o\", \"u\"));\n        val vowelsSet3 = vowelsSet.diff(Set(\"y\"));\n \
    \       val vowelsSet4 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"y\"));\n        val vowelsSet5 = vowelsSet.diff(Set(\"y\"));\n        val\
    \ vowelsSet6 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n\
    \        val vowelsSet7 = vowelsSet.diff(Set(\"y\"));\n        val vowelsSet8\
    \ = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val\
    \ vowelsSet9 = vowelsSet.diff(Set(\"y\"));\n        val vowelsSet10 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet11 = vowelsSet.diff(Set(\"\
    y\"));\n        val vowelsSet12 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"));\n        val vowelsSet13 = vowelsSet.diff(Set(\"y\"));\n   \
    \     val vowelsSet14 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\",\
    \ \"y\"));\n        val vowelsSet15 = vowelsSet.diff(Set(\"y\"));\n        val\
    \ vowelsSet16 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n\
    \        val vowelsSet17 = vowelsSet.diff(Set(\"y\"));\n        val vowelsSet18\
    \ = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val\
    \ vowelsSet19 = vowelsSet.diff(Set(\"y\"));\n        val vowelsSet20 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet21 = vowelsSet.diff(Set(\"\
    y\"));\n        val vowelsSet22 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"));\n        val vowelsSet23 = vowelsSet.diff(Set(\"y\"));\n   \
    \     val vowelsSet24 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\",\
    \ \"y\"));\n        val vowelsSet25 = vowelsSet.diff(Set(\"y\"));\n        val\
    \ vowels\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxdj1fjfs.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxdj1fjfs.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1lf_7uju.scala:22:62 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp1lf_7uju.scala:36:68 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \ ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1lf_7uju.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowelsCount = vowels.size\n        val consonantsCount = consonants.size\n \
    \       val vowelsIndex = word.indexOf(\"a\")\n        val consonantsIndex = word.lastIndexOf(\"\
    z\")\n        val vowelsEnd = word.indexOf(\"z\", vowelsIndex + 1)\n        val\
    \ consonantsEnd = word.lastIndexOf(\"a\", consonantsIndex - 1)\n        val vowelsStart\
    \ = word.lastIndexOf(\"a\", vowelsIndex - 1)\n        val consonantsStart = word.indexOf(\"\
    z\", consonantsIndex - 1)\n        val vowelsMiddle = word.indexOf(\"a\", vowelsIndex\
    \ - 1, vowelsEnd)\n        val consonantsMiddle = word.lastIndexOf(\"z\", consonantsIndex\
    \ + 1, consonantsEnd)\n        val vowelsMiddle2 = word.indexOf(\"a\", vowelsIndex\
    \ - 1, vowelsEnd)\n        val consonantsMiddle2 = word.lastIndexOf(\"z\", consonantsIndex\
    \ + 1, consonantsEnd)\n        val vowelsMiddle3 = word.indexOf(\"a\", vowelsIndex\
    \ - 1, vowelsEnd)\n        val consonantsMiddle3 = word.lastIndexOf(\"z\", consonantsIndex\
    \ + 1, consonantsEnd)\n        val vowelsMiddle4 = word.indexOf(\"a\", vowelsIndex\
    \ - 1, vowelsEnd)\n        val consonantsMiddle4 = word.lastIndexOf(\"z\", consonantsIndex\
    \ + 1, consonantsEnd)\n        val vowelsMiddle5 = word.indexOf(\"a\", vowelsIndex\
    \ - 1, vowelsEnd)\n        val consonantsMiddle5 = word.lastIndexOf(\"z\", consonantsIndex\
    \ + 1, consonantsEnd)\n        val vowelsMiddle6 = word.indexOf(\"a\", vowelsIndex\
    \ - 1, vowelsEnd)\n        val consonantsMiddle6 = word.lastIndexOf(\"z\", consonantsIndex\
    \ + 1, consonantsEnd)\n        val vowelsMiddle7 = word.indexOf(\"a\", vowelsIndex\
    \ - 1, vowelsEnd)\n        val consonantsMiddle7 = word.lastIndexOf(\"z\", consonantsIndex\
    \ + 1, consonantsEnd)\n        val vowelsMiddle8 = word.indexOf(\"a\", vowelsIndex\
    \ - 1, vowelsEnd)\n        val consonantsMiddle8 = word.lastIndexOf(\"z\", consonantsIndex\
    \ + 1, con\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpewj0mhe0.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpewj0mhe0.scala:25:32\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e\
    [0m \e[36mvowelsMiddle\e[0m = word.indexOf(\e[31m\"a\"\e[0m, vowelsIndex - \e\
    [31m1\e[0m, vowelsEnd)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mindexOf\e[0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e\
    [0m (x$0: String, x$1: Int): Int\n\e[31m   |\e[0m (x$0: String): Int\n\e[31m \
    \  |\e[0m (x$0: Int, x$1: Int): Int\n\e[31m   |\e[0m (x$0: Int): Int\n\e[31m \
    \  |\e[0mmatch arguments ((\e[32m\"a\"\e[0m : String), Int, (vowelsEnd : Int))\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpewj0mhe0.scala:26:36 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsMiddle\e[0m =\
    \ word.lastIndexOf(\e[31m\"z\"\e[0m, consonantsIndex + \e[31m1\e[0m, consonantsEnd)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mlastIndexOf\e\
    [0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String,\
    \ x$1: Int): Int\n\e[31m   |\e[0m (x$0: String): Int\n\e[31m   |\e[0m (x$0: Int,\
    \ x$1: Int): Int\n\e[31m   |\e[0m (x$0: Int): Int\n\e[31m   |\e[0mmatch arguments\
    \ ((\e[32m\"z\"\e[0m : String), Int, (consonantsEnd : Int))\n\e[31m\e[31m-- [E134]\
    \ Type Error: /tmp/tmpewj0mhe0.scala:27:33 -----------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsMiddle2\e[0m = word.indexOf(\e\
    [31m\"a\"\e[0m, vowelsIndex - \e[31m1\e[0m, vowelsEnd)\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mindexOf\e[0m in \e[33mclass\e[0m \e\
    [35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String, x$1: Int): Int\n\e[31m\
    \   |\e[0m (x$0: String): Int\n\e[31m   |\e[0m (x$0: Int, x$1: Int): Int\n\e[31m\
    \   |\e[0m (x$0"
  stdout: ''
  timestamp: 1659799332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsCount = vowels.size\n\
    \        var vowelsSet = vowels.toSet\n        var vowelsSetSize = vowelsSet.size\n\
    \        var vowelsSetIterator = vowelsSet.iterator\n        var vowelsSetIteratorSize\
    \ = vowelsSetIterator.size\n        var vowelsSetIteratorNext = vowelsSetIterator.next\n\
    \        var vowelsSetIteratorNextValue = vowelsSetIteratorNext.value\n      \
    \  var vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        var vowelsSetIteratorNextNextValue\
    \ = vowelsSetIteratorNextNext.value\n        var vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        var vowelsSetIteratorNextNextNextValue\
    \ = vowelsSetIteratorNextNextNext.value\n        var vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        var vowelsSetIteratorNextNextNextNextValue\
    \ = vowelsSetIteratorNextNextNextNext.value\n        var vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        var vowelsSetIteratorNextNextNextNextNextValue\
    \ = vowelsSetIteratorNextNextNextNextNext.value\n        var vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        var vowelsSetIteratorNextNextNextNextNextNextValue\
    \ = vowelsSetIteratorNextNextNextNextNextNext.value\n        var vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.next\n        var vowelsSetIteratorNextNextNextNextNextNextNextValue\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.value\n        var vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n        var vowelsSetIteratorNextNextNextNextNextNextNextNextValue\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.value\n        var vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n        var\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextValue = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.value\n\
    \        var vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0furse1.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmps0furse1.scala:22:63\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mvar\e[0m \e[36mvowelsSetIteratorNextValue\e[0m = vowelsSetIteratorNext.value\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m\e[33mmethod\e[0m \e[35mvalue\e[0m cannot be accessed as a\
    \ member of String from module class Problem$.\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmps0furse1.scala:23:62 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mvar\e[0m \e[36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value next is not a member of String - did you mean\
    \ String.indent?\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps0furse1.scala:33:60\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvariable\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps0furse1.scala:35:64\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvariable\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E0"
  stdout: ''
  timestamp: 1659799332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowelsCount = vowels.size\n        val consonantsCount = consonants.size\n \
    \       val vowelsIndex = word.lastIndexOfAny(vowels)\n        val consonantsIndex\
    \ = word.lastIndexOfAny(consonants)\n        val vowelsIndex2 = word.lastIndexOfAny(vowels.reverse)\n\
    \        val consonantsIndex2 = word.lastIndexOfAny(consonants.reverse)\n    \
    \    val vowelsIndex3 = word.lastIndexOfAny(vowels.reverse.tail)\n        val\
    \ consonantsIndex3 = word.lastIndexOfAny(consonants.reverse.tail)\n        val\
    \ vowelsIndex4 = word.lastIndexOfAny(vowels.reverse.tail.tail)\n        val consonantsIndex4\
    \ = word.lastIndexOfAny(consonants.reverse.tail.tail)\n        val vowelsIndex5\
    \ = word.lastIndexOfAny(vowels.reverse.tail.tail.tail)\n        val consonantsIndex5\
    \ = word.lastIndexOfAny(consonants.reverse.tail.tail.tail)\n        val vowelsIndex6\
    \ = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail)\n        val consonantsIndex6\
    \ = word.lastIndexOfAny(consonants.reverse.tail.tail.tail.tail)\n        val vowelsIndex7\
    \ = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail.tail)\n        val\
    \ consonantsIndex7 = word.lastIndexOfAny(consonants.reverse.tail.tail.tail.tail.tail)\n\
    \        val vowelsIndex8 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail.tail.tail)\n\
    \        val consonantsIndex8 = word.lastIndexOfAny(consonants.reverse.tail.tail.tail.tail.tail.tail)\n\
    \        val vowelsIndex9 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail.tail.tail.tail)\n\
    \        val consonantsIndex9 = word.lastIndexOfAny(consonants.reverse.tail.tail.tail.tail.tail.tail.tail)\n\
    \        val vowelsIndex10 = word.lastIndexOfAny(vowels.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp56vvjb8j.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp56vvjb8j.scala:19:31 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexOfAny(vowels)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue lastIndexOfAny is not a member of String - did you mean word.lastIndexOf?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp56vvjb8j.scala:20:35 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexOfAny(consonants)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue lastIndexOfAny is not a member of String - did you mean word.lastIndexOf?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp56vvjb8j.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex2\e[0m = word.lastIndexOfAny(vowels.reverse)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue lastIndexOfAny is not a member of String - did you mean word.lastIndexOf?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp56vvjb8j.scala:21:54 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex2\e[0m = word.lastIndexOfAny(vowels.reverse)\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of scala.collection.mutable.Set[String]\
    \ - did you mean vowels.reversed?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp56vvjb8j.scala:22:36\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantsIndex2\e[0m = word.lastIndexOfAny(consonants.reverse)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue lastIndexOfAny is not a member of String - did you mean word.lastIndexOf?\n\
    \e[31m\e[31m-- [E008] Not Found E"
  stdout: ''
  timestamp: 1659799334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.split(\"\
    [aeiou]\").map(_.length).sum\n        val consonantsCount = word.split(\"[^aeiou]\"\
    ).map(_.length).sum\n        val vowelsCount = vowelsCount.toInt\n        val\
    \ consonantsCount = consonantsCount.toInt\n        val vowelsCountMinusOne = vowelsCount\
    \ - 1\n        val consonantsCountMinusOne = consonantsCount - 1\n        val\
    \ vowelsCountMinusTwo = vowelsCount - 2\n        val consonantsCountMinusTwo =\
    \ consonantsCount - 2\n        val vowelsCountMinusThree = vowelsCount - 3\n \
    \       val consonantsCountMinusThree = consonantsCount - 3\n        val vowelsCountMinusFour\
    \ = vowelsCount - 4\n        val consonantsCountMinusFour = consonantsCount -\
    \ 4\n        val vowelsCountMinusFive = vowelsCount - 5\n        val consonantsCountMinusFive\
    \ = consonantsCount - 5\n        val vowelsCountMinusSix = vowelsCount - 6\n \
    \       val consonantsCountMinusSix = consonantsCount - 6\n        val vowelsCountMinusSeven\
    \ = vowelsCount - 7\n        val consonantsCountMinusSeven = consonantsCount -\
    \ 7\n        val vowelsCountMinusEight = vowelsCount - 8\n        val consonantsCountMinusEight\
    \ = consonantsCount - 8\n        val vowelsCountMinusNine = vowelsCount - 9\n\
    \        val consonantsCountMinusNine = consonantsCount - 9\n        val vowelsCountMinusTen\
    \ = vowelsCount - 10\n        val consonantsCountMinusTen = consonantsCount -\
    \ 10\n        val vowelsCountMinusEleven = vowelsCount - 11\n        val consonantsCountMinusEleven\
    \ = consonantsCount - 11\n        val vowelsCountMinusTwelve = vowelsCount - 12\n\
    \        val consonantsCountMinusTwelve = consonantsCount - 12\n        val vowelsCountMinusThirteen\
    \ = vowelsCount - 13\n        val consonantsCountMinusThirteen = consonantsCount\
    \ - 13\n        val vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3lp8kjxn.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3lp8kjxn.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3lp8kjxn.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonantsCount.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp3lp8kjxn.scala:47:5 ---------------------\e[0m\e[0m\n\
    \e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList\n\
    \        val vowelsCountReverse = vowelsCount.reverse\n        val vowelsCountReverse2\
    \ = vowelsCountReverse.tail\n        val vowelsCountReverse3 = vowelsCountReverse2.tail\n\
    \        val vowelsCountReverse4 = vowelsCountReverse3.tail\n        val vowelsCountReverse5\
    \ = vowelsCountReverse4.tail\n        val vowelsCountReverse6 = vowelsCountReverse5.tail\n\
    \        val vowelsCountReverse7 = vowelsCountReverse6.tail\n        val vowelsCountReverse8\
    \ = vowelsCountReverse7.tail\n        val vowelsCountReverse9 = vowelsCountReverse8.tail\n\
    \        val vowelsCountReverse10 = vowelsCountReverse9.tail\n        val vowelsCountReverse11\
    \ = vowelsCountReverse10.tail\n        val vowelsCountReverse12 = vowelsCountReverse11.tail\n\
    \        val vowelsCountReverse13 = vowelsCountReverse12.tail\n        val vowelsCountReverse14\
    \ = vowelsCountReverse13.tail\n        val vowelsCountReverse15 = vowelsCountReverse14.tail\n\
    \        val vowelsCountReverse16 = vowelsCountReverse15.tail\n        val vowelsCountReverse17\
    \ = vowelsCountReverse16.tail\n        val vowelsCountReverse18 = vowelsCountReverse17.tail\n\
    \        val vowelsCountReverse19 = vowelsCountReverse18.tail\n        val vowelsCountReverse20\
    \ = vowelsCountReverse19.tail\n        val vowelsCountReverse21 = vowelsCountReverse20.tail\n\
    \        val vowelsCountReverse22 = vowelsCountReverse21.tail\n        val vowelsCountReverse23\
    \ = vowelsCountReverse22.tail\n        val vowelsCountReverse24 = vowelsCountReverse23.tail\n\
    \        val vowelsCountReverse25 = vowelsCountReverse24.tail\n        val vowelsCountReverse26\
    \ = vowelsCountReverse25.tail\n        val vowelsCountReverse27 = vowelsCountReverse26.tail\n\
    \        val vowelsCountReverse28 = vowelsCountReverse27.tail\n        val vowelsCountReverse29\
    \ = vowelsCountReverse28.tail\n        val vowelsCountReverse30 = vowelsCountReverse29.tail\n\
    \        val vowelsCountReverse31 = vowelsCountReverse30.tail\n        val vowelsCountReverse32\
    \ = vowelsCountReverse31.tail\n        val vowelsCountReverse33 = vowelsCountReverse32.tail\n\
    \        val vowels\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt36p9vg0.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpt36p9vg0.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"\
    FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
    ab\") ==> \"\"\n    def getClosestVowel(word : String) : String = {\n        var\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount2 = word.filter(x => vowels.contains(x)).length\n\
    \        var vowelsCount3 = word.filter(x => vowels.contains(x)).length\n    \
    \    var vowelsCount4 = word.filter(x => vowels.contains(x)).length\n        var\
    \ vowelsCount5 = word.filter(x => vowels.contains(x)).length\n        var vowelsCount6\
    \ = word.filter(x => vowels.contains(x)).length\n        var vowelsCount7 = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount8 = word.filter(x => vowels.contains(x)).length\n\
    \        var vowelsCount9 = word.filter(x => vowels.contains(x)).length\n    \
    \    var vowelsCount10 = word.filter(x => vowels.contains(x)).length\n       \
    \ var vowelsCount11 = word.filter(x => vowels.contains(x)).length\n        var\
    \ vowelsCount12 = word.filter(x => vowels.contains(x)).length\n        var vowelsCount13\
    \ = word.filter(x => vowels.contains(x)).length\n        var vowelsCount14 = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount15 = word.filter(x =>\
    \ vowels.contains(x)).length\n        var vowelsCount16 = word.filter(x => vowels.contains(x)).length\n\
    \        var vowelsCount17 = word.filter(x => vowels.contains(x)).length\n   \
    \     var vowelsCount18 = word.filter(x => vowels.contains(x)).length\n      \
    \  var vowelsCount19 = word.filter(x => vowels.contains(x)).length\n        var\
    \ vowelsCount20 = word.filter(x => vowels.contains(x)).length\n        var vowelsCount21\
    \ = word.filter(x => vowels.contains(x)).length\n        var vowelsCount22 = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount23 = word.filter(x =>\
    \ vowels.contains(x)).length\n        var vowelsCount24 = word.filter(x => vowels.contains(x)).length\n\
    \        var vowelsCount25 = word.filter(x => vowels.contains(x)).length\n   \
    \     var vowelsCount26 = word.filter(x => vowels.contains(x)).length\n      \
    \  var vowelsCount27 = word.filter(x => vowels.contains(x)).length\n        var\
    \ vowelsCount28 = word.filter(x => vowels.contains(x)).length\n        var vowelsCount29\
    \ = word.filter(x => vowels.contains(x)).length\n        var vowelsCount30 = word.filter(x\
    \ => vowels.contains(x)).length\n        var vowelsCount31 = word.filter(x =>\
    \ vowels.contains(x)).length\n        var vowelsCount32 = word.filter(x => vowels.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_ojx4u0.scala:16:59\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e\
    [0m                                                           ^\e[0m\n\e[31m \
    \  |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_ojx4u0.scala:17:60\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount2\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_ojx4u0.scala:18:60\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount3\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_ojx4u0.scala:19:60\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount4\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m       "
  stdout: ''
  timestamp: 1659799272
