name: HumanEval_21_rescale_to_unit
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n    // such that the smallest number will become 0 and the largest\
  \ will become 1\n    // >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    // [0.0,\
  \ 0.25, 0.5, 0.75, 1.0]\n    def rescaleToUnit(numbers : List[Float]) : List[Float]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(rescaleToUnit((List[Float](2.0f.toFloat,\
  \ 49.9f.toFloat))).equals((List[Float](0.0f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](100.0f.toFloat,\
  \ 49.9f.toFloat))).equals((List[Float](1.0f.toFloat, 0.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals((List[Float](0.0f.toFloat,\
  \ 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](2.0f.toFloat,\
  \ 1.0f.toFloat, 5.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))).equals((List[Float](0.25f.toFloat,\
  \ 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    assert(rescaleToUnit((List[Float](12.0f.toFloat,\
  \ 11.0f.toFloat, 15.0f.toFloat, 13.0f.toFloat, 14.0f.toFloat))).equals((List[Float](0.25f.toFloat,\
  \ 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    }\n\n}\n"
completions: ["        val min = numbers.min\n        val max = numbers.max\n    \
    \    val range = max - min\n        val scaled: List[Float] = numbers.map(x =>\
    \ (x - min) / range)\n        scaled", "        val minValue = numbers.min\n \
    \       val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n      \
    \  scaledNumbers", "        val minValue = numbers.min\n        val maxValue =\
    \ numbers.max\n        val scale = (maxValue - minValue) / (numbers.size - 1)\n\
    \        numbers.map(x => x - minValue).map(x => x * scale).toList", "       \
    \ val min = numbers.min\n        val max = numbers.max\n        val range = max\
    \ - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - min) / (max\
    \ - min))", "        val minValue = numbers.min\n        val maxValue = numbers.max\n\
    \        val range = maxValue - minValue\n        val newNumbers = numbers.map(x\
    \ => (x - minValue) / range)\n        newNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newNumbers\
    \ = numbers.map(x => (x - min) / range)\n        newNumbers", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newList = numbers.map(x => (x - min) / range)\n        newList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scaled = (numbers - min) / range\n        scaled.map(x\
    \ => x * range + min)", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaled: List[Float] = numbers.map(x\
    \ => (x - min) / range)\n        scaled", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val newRange = range / 2.0\n        val newMinValue = minValue - newRange\n\
    \        val newMaxValue = maxValue + newRange\n        numbers.map(x => (x -\
    \ newMinValue) / newRange)", "        val min = numbers.min\n        val max =\
    \ numbers.max\n        val range = max - min\n        val newRange = range / 2\n\
    \        numbers.map(x => (x - min) / newRange)", "        val minValue = math.min(numbers)\n\
    \        val maxValue = math.max(numbers)\n        val range = (maxValue - minValue).toFloat\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n      \
    \  scaledNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaledNumbers = numbers.map(x => (x\
    \ - min) / range)\n        scaledNumbers", "        val min = numbers.min\n  \
    \      val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map(x => (x - min) / range)\n        newList", "        val min =\
    \ numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        val newMin = min - newRange\n     \
    \   val newMax = max + newRange\n        numbers.map(x => (x - min) / (max - min))",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val rescaled: List[Float] = numbers.map(x => (x - min)\
    \ / range)\n        rescaled", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val scale = (range / 2.0).toFloat\n\
    \        numbers.map(x => (x - min) * scale)", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledList = numbers.map( x => (x - minValue) / range )\n       \
    \ scaledList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaled = (numbers - min) / range\n\
    \        scaled.map(x => if (x == 0.0) 0.0 else x)", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val newNumbers = numbers.map( x => (x - minValue) / range )\n       \
    \ newNumbers", "        val minNum = numbers.min\n        val maxNum = numbers.max\n\
    \        val range = (maxNum - minNum)\n        val scaledList = numbers.map(x\
    \ => (x - minNum) / range)\n        scaledList", "        val minNum = numbers.min\n\
    \        val maxNum = numbers.max\n        val range = (maxNum - minNum)\n   \
    \     val newNums = numbers.map(x => (x - minNum) / range)\n        newNums",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - min) / range\
    \ * newMax + newMin)", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = (maxValue - minValue).toFloat\n        val\
    \ newNumbers = numbers.map(x => (x - minValue) / range)\n        newNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - min) / (max\
    \ - min))", "        val min = numbers.min\n        val max = numbers.max\n  \
    \      val range = max - min\n        val newList = numbers.map(x => (x - min)\
    \ / range)\n        newList", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newRange = range /\
    \ 2\n        val newMin = min - newRange\n        val newMax = max + newRange\n\
    \        numbers.map(x => (x - min) / newRange)", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val newList = numbers.map(x => (x\
    \ - minValue) / (maxValue - minValue))\n        newList", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map( x => (x - min) / range )\n        newList", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newMin = min / range\n        val newMax = max / range\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val scaled\
    \ = (numbers.toList - min) / range\n        scaled.map(x => x * range + min)",
  "        val minNum = numbers.min\n        val maxNum = numbers.max\n        val\
    \ scaled: List[Float] = numbers.map(x => (x - minNum) / (maxNum - minNum))\n \
    \       scaled.sortWith(_ < _)", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newRange = range /\
    \ 2\n        val newMin = min - newRange\n        val newMax = max + newRange\n\
    \        val newNumbers = numbers.map(x => (x - min) / (max - min))\n        val\
    \ newList = newNumbers.toList\n        newList.map(x => if (x < 0) 0f else 1f)",
  "        val minNum = numbers.min\n        val maxNum = numbers.max\n        val\
    \ range = maxNum - minNum\n        val scaledList = numbers.map(x => (x - minNum)\
    \ / range)\n        scaledList", "        val minNum = numbers.min\n        val\
    \ maxNum = numbers.max\n        val range = maxNum - minNum\n        val scaledList\
    \ = numbers.map(x => (x - minNum) / range)\n        scaledList", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val rescaledList = numbers.map(x => (x - min) / range)\n      \
    \  rescaledList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaledNumbers = numbers.map(x => (x\
    \ - min) / range)\n        scaledNumbers", "        val min = numbers.min\n  \
    \      val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - min) / range * newMax + newMin).toList",
  "        val minValue = math.min(numbers)\n        val maxValue = math.max(numbers)\n\
    \        val range = maxValue - minValue\n        val scaledNumbers = numbers.map(x\
    \ => (x - minValue) / range)\n        scaledNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - min) / newRange)", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val range = maxValue\
    \ - minValue\n        val rescaledList = numbers.map(x => (x - minValue) / range)\n\
    \        rescaledList", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val scaledNumbers\
    \ = numbers.map(x => (x - minValue) / range)\n        scaledNumbers.toList", " \
    \       val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scaled: List[Float] = numbers.map(x => (x - min) /\
    \ range)\n        scaled", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newNumbers = numbers.map(x => (x -\
    \ min) / range)\n        newNumbers", "        val minValue = numbers.min\n  \
    \      val maxValue = numbers.max\n        val range = maxValue - minValue\n \
    \       val newList = numbers.map( x => (x - minValue) / range )\n        newList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newList = numbers.map(x => (x - min) / range)\n   \
    \     newList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newList = numbers.map(x => (x - min)\
    \ / range)\n        newList", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newRange = range /\
    \ 2\n        val newMin = min - newRange\n        val newMax = max + newRange\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        val newMin = min - newRange\n     \
    \   val newMax = max + newRange\n        numbers.map(x => (x - newMin) / (newMax\
    \ - newMin))", "        val minValue = numbers.min\n        val maxValue = numbers.max\n\
    \        val range = maxValue - minValue\n        val scaledList = numbers.map(x\
    \ => (x - minValue) / range)\n        scaledList", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map(x => (x - min) / range)\n        newList", "        val min =\
    \ numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        val newMin = min - newRange\n     \
    \   val newMax = max + newRange\n        numbers.map(x => (x - min) / (max - min))",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - min) / (max\
    \ - min))", "        val minValue = math.min(numbers)\n        val maxValue =\
    \ math.max(numbers)\n        val range = maxValue - minValue\n        val scaledList\
    \ = numbers.map((number) => number - minValue) / range\n        scaledList", " \
    \       val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scaled: List[Float] = numbers.map(x => (x - min) /\
    \ range)\n        scaled", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaled = (numbers - min) / range\n\
    \        scaled.map(x => if (x == 0) 0 else x)", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val rescaledList\
    \ = numbers.map(x => (x - min) / range)\n        rescaledList", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        val newMin = min - newRange\n     \
    \   val newMax = max + newRange\n        numbers.map(x => (x - newMin) / (newMax\
    \ - newMin))", "        val minValue = numbers.min\n        val maxValue = numbers.max\n\
    \        val range = maxValue - minValue\n        val newRange = range / 2\n \
    \       val newMinValue = minValue - newRange\n        val newMaxValue = maxValue\
    \ + newRange\n        numbers.map(x => (x - minValue) / range + newMinValue)",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newMin = min - range * 0.01\n        val newMax = max\
    \ + range * 0.01\n        numbers.map(x => (x - min) / (max - min)).toList", " \
    \       val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scaled = (range / numbers.size).toFloat\n        numbers.map(x\
    \ => (x - min) * scaled)", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = (maxValue - minValue).toFloat\n        val\
    \ newValues = numbers.map(x => (x - minValue) / range)\n        newValues.toList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        val newNumbers = numbers.map(x =>\
    \ (x - min) / (max - min))\n        val newNumbersCopy = newNumbers.toList\n \
    \       newNumbersCopy.sortWith(_ < _)\n        newNumbersCopy.map(x => if (x\
    \ == 0) 0 else x)", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - min) / (max - min))", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newRange = range /\
    \ 2\n        val newMin = min - newRange\n        val newMax = max + newRange\n\
    \        numbers.map(x => (x - min) / newRange)", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map(x => (x - min) / range)\n        newList", "        val min =\
    \ numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        numbers.map(x => (x - min) / newRange)",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scaledNumbers = numbers.map(x => (x - min) / range)\n\
    \        scaledNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newNumbers = numbers.map(x => (x -\
    \ min) / range)\n        newNumbers", "        val min = numbers.min\n       \
    \ val max = numbers.max\n        val range = max - min\n        val newList =\
    \ numbers.map(x => (x - min) / range)\n        newList", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val rescaled\
    \ = numbers.map(x => (x - min) / range)\n        rescaled", "        val min =\
    \ numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newList = numbers.map(x => (x - min) / range)\n        newList",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val newNumbers = numbers.map(x =>\
    \ (x - minValue) / range)\n        newNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val scaled:\
    \ List[Float] = numbers.map(x => (x - min) / range)\n        scaled", "      \
    \  val min = numbers.min\n        val max = numbers.max\n        val range = max\
    \ - min\n        val scaled: List[Float] = numbers.map(x => (x - min) / range)\n\
    \        scaled", "        val minValue = numbers.min\n        val maxValue =\
    \ numbers.max\n        val range = (maxValue - minValue).toFloat\n        val\
    \ scaledNumbers = numbers.map(x => (x - minValue) / range)\n        scaledNumbers",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val scaledNumbers = numbers.map(x\
    \ => (x - minValue) / range)\n        scaledNumbers", "        val minValue =\
    \ numbers.min\n        val maxValue = numbers.max\n        val range = maxValue\
    \ - minValue\n        val newList = numbers.map(x => (x - minValue) / range)\n\
    \        newList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - min) / (max - min))", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newRange = range /\
    \ 2\n        val newMin = min - newRange\n        val newMax = max + newRange\n\
    \        numbers.map(x => (x - min) / (max - min))", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n      \
    \  scaledNumbers", "        val minValue = numbers.min\n        val maxValue =\
    \ numbers.max\n        val range = maxValue - minValue\n        val scaledList\
    \ = numbers.map(x => (x - minValue) / range)\n        scaledList", "        val\
    \ minValue = numbers.min\n        val maxValue = numbers.max\n        val range\
    \ = maxValue - minValue\n        val newNumbers = numbers.map(x => (x - minValue)\
    \ / range)\n        newNumbers", "        val minValue = numbers.min\n       \
    \ val maxValue = numbers.max\n        val range = maxValue - minValue\n      \
    \  val newRange = range / 2\n        numbers.map(x => (x - minValue) / newRange)",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newList = numbers.map(x => (x - min) / range)\n   \
    \     newList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - min) / (max - min))", "        val minValue = numbers.min\n        val\
    \ maxValue = numbers.max\n        val range = maxValue - minValue\n        val\
    \ scaledNumbers = numbers.map(x => (x - minValue) / range)\n        scaledNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newNumbers = numbers.map(x => (x - min) / range)\n\
    \        newNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newNumbers = numbers.map(x => (x -\
    \ min) / range)\n        newNumbers", "        val minValue = numbers.min\n  \
    \      val maxValue = numbers.max\n        val range = maxValue - minValue\n \
    \       val newNumbers = numbers.map(x => (x - minValue) / range)\n        newNumbers",
  "        val minNum = numbers.min\n        val maxNum = numbers.max\n        val\
    \ newNumbers = numbers.map(x => (x - minNum) / (maxNum - minNum))\n        newNumbers",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = (maxValue - minValue).toFloat\n        val scaledList = numbers.map(x\
    \ => (x - minValue) / range)\n        scaledList", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newNumbers\
    \ = numbers.map(x => (x - min) / range)\n        newNumbers", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newNumbers = numbers.map(x => (x - min) / range)\n        newNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newNumbers = numbers.map(x => (x -\
    \ min) / range)\n        newNumbers", "        val minValue = numbers.min\n  \
    \      val maxValue = numbers.max\n        val range = maxValue - minValue\n \
    \       val newRange = range / 2\n        val newMinValue = minValue - newRange\n\
    \        val newMaxValue = maxValue + newRange\n        numbers.map(x => (x -\
    \ newMinValue) / (newMaxValue - newMinValue))", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = (maxValue - minValue).toFloat\n\
    \        val newNumbers = numbers.map(x => (x - minValue) / range)\n        newNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        numbers.map(x => (x -\
    \ min) * newRange / range)", "        val minValue = numbers.min\n        val\
    \ maxValue = numbers.max\n        val range = (maxValue - minValue).toFloat\n\
    \        val newList = numbers.map(x => (x - minValue) / range)\n        newList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scaled = (numbers - min) / range\n        scaled.map(x\
    \ => if (x == 0) 0 else x)", "        val min = numbers.min\n        val max =\
    \ numbers.max\n        val range = max - min\n        val newRange = range / 2\n\
    \        val newMin = min - newRange\n        val newMax = max + newRange\n  \
    \      numbers.map(x => (x - min) / range)", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val scaled:\
    \ List[Float] = numbers.map(x => (x - min) / range)\n        scaled", "      \
    \  val minValue = numbers.min\n        val maxValue = numbers.max\n        val\
    \ range = maxValue - minValue\n        val newNumbers = numbers.map(x => (x -\
    \ minValue) / range)\n        newNumbers", "        val min = numbers.min\n  \
    \      val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map(x => (x\
    \ - newMin) / (newMax - newMin))", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val newRange = range\
    \ / 2\n        val newMin = min - newRange\n        val newMax = max + newRange\n\
    \        numbers.map(x => (x - min) / (max - min))", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n      \
    \  scaledNumbers", "        val minNum = numbers.min\n        val maxNum = numbers.max\n\
    \        val range = maxNum - minNum\n        val scaledList = numbers.map(x =>\
    \ (x - minNum) / range)\n        scaledList", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val scaled\
    \ = (numbers - min) / range\n        scaled.map(x => (x - min) / range + 0.5).toList",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val newList = numbers.map(x => (x\
    \ - minValue) / range)\n        newList", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n      \
    \  scaledNumbers.toList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaled: List[Float] = numbers.map(x\
    \ => (x - min) / range)\n        scaled", "        val min = numbers.min\n   \
    \     val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map( x => (x - min) / range )\n        newList", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val range = maxValue\
    \ - minValue\n        val newRange = range / 2\n        val newMinValue = minValue\
    \ + newRange\n        val newMaxValue = maxValue - newRange\n        numbers.map(x\
    \ => (x - minValue) / range)", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newRange = range /\
    \ 2.0\n        numbers.map( x => (x - min) / newRange)", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newNumbers\
    \ = numbers.map(x => (x - min) / range)\n        newNumbers", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newNumbers = numbers.map(x => (x - min) / range)\n        newNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newList = numbers.map(x => (x - min) / range)\n   \
    \     newList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaled: List[Float] = numbers.map(x\
    \ => (x - min) / range)\n        scaled.sortWith((x, y) => x < y)", "        val\
    \ minValue = math.min(numbers)\n        val maxValue = math.max(numbers)\n   \
    \     val range = maxValue - minValue\n        val scaledList = numbers.map(x\
    \ => (x - minValue) / range)\n        scaledList", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = (maxValue - minValue).toFloat\n\
    \        val newNumbers = numbers.map(x => (x - minValue) / range)\n        newNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - min) / newRange)",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scale = (range / 2.0).toFloat\n        numbers.map(x\
    \ => (x - min) * scale)", "        val minNum = numbers.min\n        val maxNum\
    \ = numbers.max\n        val range = maxNum - minNum\n        val newList = numbers.map(x\
    \ => (x - minNum) / range)\n        newList", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val rescaled:\
    \ List[Float] = numbers.map(x => (x - min) / range)\n        rescaled", "    \
    \    val minValue = numbers.min\n        val maxValue = numbers.max\n        val\
    \ range = maxValue - minValue\n        val newRange = range / 2.0\n        val\
    \ newMinValue = minValue - newRange\n        val newMaxValue = maxValue + newRange\n\
    \        val newNumbers = numbers.map(x => (x - minValue) / newRange)\n      \
    \  val newMin = newNumbers.min\n        val newMax = newNumbers.max\n        newNumbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", "   \
    \     val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newList = numbers.map((number: Float) => number - min)\
    \ / range\n        newList", "        val minValue = numbers.min\n        val\
    \ maxValue = numbers.max\n        val range = maxValue - minValue\n        val\
    \ newMinValue = minValue - range * 0.01\n        val newMaxValue = maxValue +\
    \ range * 0.01\n        numbers.map(x => (x - minValue) / (maxValue - minValue))",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scaled: List[Float] = numbers.map(x => (x - min) /\
    \ range)\n        scaled", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - min) / range * newMax - newMin)", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n      \
    \  scaledNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newMin = min / range\n        val\
    \ newMax = max / range\n        numbers.map(x => (x - newMin) / (newMax - newMin))",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newList = numbers.map(x => (x - min) / range)\n   \
    \     newList", "        val minNum = numbers.min\n        val maxNum = numbers.max\n\
    \        val range = maxNum - minNum\n        val newList = numbers.map(x => (x\
    \ - minNum) / range)\n        newList", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val newNumbers = numbers.map(x => (x - minValue) / range)\n        newNumbers",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = (maxValue - minValue).toFloat\n        val scaledNumbers = numbers.map(x\
    \ => (x - minValue) / range)\n        scaledNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map(x => (x - min) / range)\n        newList", "        val min =\
    \ numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        val newMin = min - newRange\n     \
    \   val newMax = max + newRange\n        numbers.map(x => (x - newMin) / (newMax\
    \ - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newNumbers = numbers.map(x => (x -\
    \ min) / range)\n        newNumbers", "        val minValue = math.min(numbers)\n\
    \        val maxValue = math.max(numbers)\n        val range = maxValue - minValue\n\
    \        val scaled: List[Float] = numbers.map(x => (x - minValue) / range)\n\
    \        scaled.sortWith(_ < _)", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val newMin = min /\
    \ range\n        val newMax = max / range\n        numbers.map(x => (x - newMin)\
    \ / (newMax - newMin))", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val newList\
    \ = numbers.map(x => (x - minValue) / range)\n        newList", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val scale = (range / 2.0).toFloat\n        numbers.map(x => (x - min)\
    \ * scale)", "        val min = numbers.min\n        val max = numbers.max\n \
    \       val range = max - min\n        val newRange = range / 2\n        val newMin\
    \ = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - min) / (max - min))", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newNumbers = numbers.map(x\
    \ => (x - min) / range)\n        newNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val scaled\
    \ = (numbers - min) / range\n        scaled.map(x => if (x == 0) 0 else x)", " \
    \       val minValue = numbers.min\n        val maxValue = numbers.max\n     \
    \   val range = maxValue - minValue\n        val newNumbers = numbers.map(x =>\
    \ (x - minValue) / range)\n        newNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map(x => (x - min) / range)\n        newList", "        val min =\
    \ numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        numbers.map(x => (x - min) * newRange\
    \ / range)", "        val minValue = numbers.min\n        val maxValue = numbers.max\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / (maxValue - minValue))\n\
    \        scaledNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - min) / (max - min))", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val scaled: List[Float]\
    \ = numbers.map(x => (x - min) / range)\n        scaled", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val scaled:\
    \ List[Float] = numbers.map(x => (x - min) / range)\n        scaled", "      \
    \  val minValue = math.min(numbers)\n        val maxValue = math.max(numbers)\n\
    \        val range = maxValue - minValue\n        val scaledList = numbers.map(x\
    \ => (x - minValue) / range)\n        scaledList", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", "   \
    \     val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newMin = min / range\n        val newMax = max / range\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newList = numbers.map(x => (x - min) / range)\n        newList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - min) / (max - min))", "        val minNum = numbers.min\n        val\
    \ maxNum = numbers.max\n        val range = maxNum - minNum\n        val scaledList\
    \ = numbers.map(x => (x - minNum) / range)\n        scaledList", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val newMin = min / range\n        val newMax = max / range\n  \
    \      numbers.map(x => (x - newMin) / (newMax - newMin))", "        val min =\
    \ numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val scaled: List[Float] = numbers.map(x => (x - min) / range)\n     \
    \   scaled", "        val min = numbers.min\n        val max = numbers.max\n \
    \       val range = max - min\n        val newRange = range / 2\n        val newMin\
    \ = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - min) / range * newMax - newMin)", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledNumbers = numbers.map { n => (n - minValue) / range }\n   \
    \     scaledNumbers", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val newNumbers\
    \ = numbers.map(x => (x - minValue) / range)\n        newNumbers", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val rescaled: List[Float] = numbers.map(x => (x - min) / range)\n\
    \        rescaled", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val newRange\
    \ = range / 2.0\n        val newMinValue = minValue - newRange\n        val newMaxValue\
    \ = maxValue + newRange\n        numbers.map(x => (x - newMinValue) / newRange)",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = (maxValue - minValue).toFloat\n        val scaledList = numbers.map(x\
    \ => (x - minValue) / range)\n        scaledList", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n      \
    \  scaledNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaledNumbers = numbers.map(x => (x\
    \ - min) / range)\n        scaledNumbers", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val scaledNumbers = numbers.map(x\
    \ => (x - minValue) / (maxValue - minValue))\n        scaledNumbers", "      \
    \  val min = numbers.min\n        val max = numbers.max\n        val range = max\
    \ - min\n        val newList = numbers.map( x => (x - min) / range )\n       \
    \ newList", "        val min = numbers.min\n        val max = numbers.max\n  \
    \      val range = max - min\n        val scaled: List[Float] = numbers.map(x\
    \ => (x - min) / range)\n        scaled", "        val min = numbers.min\n   \
    \     val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map(x => (x\
    \ - newMin) / (newMax - newMin))", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val newList = numbers.map(x\
    \ => (x - min) / range)\n        newList", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n      \
    \  scaledNumbers", "        val minNum = numbers.min\n        val maxNum = numbers.max\n\
    \        val range = maxNum - minNum\n        val newList = numbers.map(x => (x\
    \ - minNum) / range)\n        newList", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n      \
    \  scaledNumbers.toList", "        val minNum = numbers.min\n        val maxNum\
    \ = numbers.max\n        val range = (maxNum - minNum).toFloat\n        val scaledNumbers\
    \ = numbers.map(x => (x - minNum) / range)\n        scaledNumbers", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val newList = numbers.map((number) => number / range)\n       \
    \ newList", "        val minValue = numbers.min\n        val maxValue = numbers.max\n\
    \        val range = maxValue - minValue\n        val newNumbers = numbers.map(x\
    \ => (x - minValue) / range)\n        newNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map(x => (x - min) / range)\n        newList", "        val min =\
    \ numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        numbers.map(x => (x - min) * newRange\
    \ / range)", "        val minValue = numbers.min\n        val maxValue = numbers.max\n\
    \        val range = maxValue - minValue\n        val newNumbers = numbers.map(x\
    \ => (x - minValue) / range)\n        newNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map(x => (x\
    \ - newMin) / (newMax - newMin))", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val newMin = min /\
    \ range\n        val newMax = max / range\n        numbers.map(x => (x - newMin)\
    \ / (newMax - newMin))", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val scaledNumbers\
    \ = numbers.map(x => (x - minValue) / range)\n        scaledNumbers.toList", " \
    \       val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newNumbers = numbers.map(x => (x - min) / range)\n\
    \        newNumbers", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val scaledList\
    \ = numbers.map(x => (x - minValue) / range)\n        scaledList", "        val\
    \ minValue = numbers.min\n        val maxValue = numbers.max\n        val range\
    \ = maxValue - minValue\n        val newList = numbers.map( x => (x - minValue)\
    \ / range )\n        newList", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newRange = range /\
    \ 2\n        val newMin = min - newRange\n        val newMax = max + newRange\n\
    \        numbers.map(x => (x - min) / newRange)", "        val minNum = numbers.min\n\
    \        val maxNum = numbers.max\n        val range = maxNum - minNum\n     \
    \   val scaled: List[Float] = numbers.map(x => (x - minNum) / range)\n       \
    \ scaled", "        val min = numbers.min\n        val max = numbers.max\n   \
    \     val range = max - min\n        val newList = numbers.map(x => (x - min)\
    \ / range)\n        newList", "        val minValue = numbers.min\n        val\
    \ maxValue = numbers.max\n        val range = maxValue - minValue\n        val\
    \ newRange = range / 2\n        val newMinValue = minValue - newRange\n      \
    \  val newMaxValue = maxValue + newRange\n        numbers.map(x => (x - minValue)\
    \ / range)", "        val min = numbers.min\n        val max = numbers.max\n \
    \       val range = max - min\n        val newMin = min / range\n        val newMax\
    \ = max / range\n        numbers.map(x => (x - newMin) / (newMax - newMin))",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val scaledNumbers = numbers.map(n\
    \ => (n - minValue) / range)\n        scaledNumbers", "        val minValue =\
    \ numbers.min\n        val maxValue = numbers.max\n        val range = maxValue\
    \ - minValue\n        val newRange = range / 2\n        val newMinValue = minValue\
    \ + newRange\n        val newMaxValue = maxValue - newRange\n        numbers.map(x\
    \ => (x - minValue) / newRange)", "        val minValue = numbers.min\n      \
    \  val maxValue = numbers.max\n        val range = maxValue - minValue\n     \
    \   val newRange = range / 2\n        numbers.map(x => (x - minValue) / newRange)",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val scaledNumbers = numbers.map(x\
    \ => (x - minValue) / range)\n        scaledNumbers"]
stop_tokens:
- "\n    }\n"
