name: HumanEval_63_fibfib
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) == 0\n   \
  \ // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
  \    // Please write a function to efficiently compute the n-th element of the fibfib\
  \ number sequence.\n    // >>> fibfib(1)\n    // 0\n    // >>> fibfib(5)\n    //\
  \ 4\n    // >>> fibfib(8)\n    // 24\n    def fibfib(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
  \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
  \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n\
  \    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
completions: ["        val fibfib = new mutable.HashMap[Long, Long]()\n        fibfib.put(0,\
    \ 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib.put(n,\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n        fibfib.get(n)", "        val\
    \ fibfibs = mutable.ArrayBuffer.empty[Long]\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n", "        val fibfib = new mutable.HashMap[Long, Long]()\n\
    \        fibfib.put(0, 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n\
    \        fibfib(n) match {\n            case 0 => 0L\n            case 1 => fibfib.get(n-1)\
    \ + fibfib.get(n-2) + fibfib.get(n-3)\n            case 2 => fibfib.get(n-1) +\
    \ fibfib.get(n-2)\n            case n => fibfib.get(n-1) + fibfib.get(n-2) + fibfib.get(n-3)\n\
    \        }", "        val fibfib = new mutable.Array[Long](n)\n        fibfib(0)\
    \ = 0\n        fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n) = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n        fibfib(n)", "        val fibfib = new mutable.MutableList[Long]()\n\
    \        fibfib.clear()\n        fibfib.add(0)\n        fibfib.add(1)\n      \
    \  fibfib(n-1).foreach(x => fibfib.add(x+fibfib(n-2)))\n        fibfib(n-1).foreach(x\
    \ => fibfib.add(x+fibfib(n-3)))\n        fibfib(n-1)", "        val fibfib = new\
    \ mutable.HashSet[Long]()\n        fibfib.add(0)\n        fibfib.add(1)\n    \
    \    fibfib.add(2)\n        fibfib(n) {\n            fibfib.add(fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3))\n        }\n        fibfib(n)", "        if (n <=\
    \ 0) 0\n        else if (n <= 2) 1\n        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
  "        val fibfib = new mutable.HashSet[Long]()\n        fibfib.add(0)\n     \
    \   fibfib.add(1)\n        fibfib.add(2)\n        fibfib(n) {\n            fibfib.add(_\
    \ + _ + _)\n        }\n        fibfib(n)", "        val fibfib = new mutable.HashMap[Long,\
    \ Long]()\n        fibfib.put(0, 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2,\
    \ 1L)\n        fibfib(n) match {\n            case 0 => 0L\n            case 1\
    \ => fibfib.get(1L)\n            case 2 => fibfib.get(2L) + fibfib.get(1L) + fibfib.get(0L)\n\
    \            case n => fibfib.get(n - 3L) + fibfib.get(n - 2L) + fibfib.get(n\
    \ - 1L)\n        }", "        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfib", "        if (n == 0)\
    \ 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n        else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)", "        val fibfibArray = mutable.ArrayBuffer.empty[Long]\n\
    \        fibfibArray(0) = 0\n        fibfibArray(1) = 0\n        fibfibArray(2)\
    \ = 1\n        fibfibArray(n) = fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3)\n\
    \        fibfibArray(n)", "        val fibfib : mutable.MutableList[Long] = mutable.MutableList(1)\n\
    \        fibfib(0) = 0\n        fibfib(1) = 0\n        fibfib(2) = 1\n       \
    \ fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        fibfib(n)", " \
    \       val fibfib = new mutable.Array[Long](5)\n        fibfib(0) = 0\n     \
    \   fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n) = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        fibfib(n)", "        val fibfib = new mutable.MutableList[Long]()\n\
    \        fibfib.clear()\n        fibfib.push(0L)\n        fibfib.push(1L)\n  \
    \      fibfib.push(2L)\n        fibfib(n) match {\n            case 0 => 0\n \
    \           case 1 => 0\n            case 2 => 1\n            case n => {\n  \
    \              fibfib(n-1) match {\n                    case 0 => 0\n        \
    \            case 1 => 0\n                    case 2 => 1\n                  \
    \  case n => {\n                        fibfib(n-2) match {\n                \
    \            case 0 => 0\n                            case 1 => 0\n          \
    \                  case 2 => 1\n                            case n => {\n    \
    \                            fibfib(n-3) match {\n                           \
    \         case 0 => 0\n                                    case 1 => 0\n     \
    \                               case 2 => 1\n                                \
    \    case n => {\n                                        fibfib(n) match {\n\
    \                                            case 0 => 0\n                   \
    \                         case 1 => 0\n                                      \
    \      case 2 => 1\n                                            case n => {\n\
    \                                                fibfib(n-1) match {\n       \
    \                                             case 0 => 0\n                  \
    \                                  case 1 => 0\n                             \
    \                       case 2 => 1\n                                        \
    \            case n => {\n                                                   \
    \     fibfib(n-2) match {\n                                                  \
    \          case 0 => 0\n                                                     \
    \       case 1 => 0\n                                                        \
    \    case 2 => 1\n                                                           \
    \ case n => {\n                                                              \
    \  fibfib(n-3) match {\n                                                     \
    \               case 0 => 0\n                                                \
    \                    case 1 => 0\n                                           \
    \                         case 2 => 1\n                                      \
    \                              case n => {\n                                 \
    \                                       fibfib(n) match {\n                  \
    \                                                          case 0 => 0\n     \
    \                                                                       case 1\
    \ => 0\n                                                                     \
    \       case 2 => 1\n                                                        \
    \                    case n => n\n                                           \
    \                             }\n                                            \
    \                        }\n                                                 \
    \               }\n                                                          \
    \  }\n                                                        }\n            \
    \                                        }\n                                 \
    \               }\n                                            }\n           \
    \                             }\n                                    }\n     \
    \                           }\n                            }\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }", "        val fibfib = new mutable.MutableList[Long]()\n        fibfib.clear()\n\
    \        fibfib(0)\n        fibfib(1)\n        fibfib(2)\n        fibfib(n) {\n\
    \            fibfib(n-1)\n            fibfib(n-2)\n            fibfib(n-3)\n \
    \       }\n        fibfib.last", "        var fib : mutable.MutableList[Long]\
    \ = mutable.MutableList.empty\n        var i : Long = 1\n        while (i <= n)\
    \ {\n            fib += i\n            i += 2\n        }\n        fib(0)", " \
    \       var fib : mutable.MutableList[Long] = mutable.MutableList(1)\n       \
    \ var fibfib : mutable.MutableList[Long] = mutable.MutableList(1)\n        fibfib(0)\
    \ = 0\n        fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n) = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n        fibfib(n)", "        if (n == 0) 0\n  \
    \      else if (n == 1) 1\n        else if (n == 2) 1\n        else if (n > 2)\
    \ fibfib(n-1) + fibfib(n-2)\n        else fibfib(n-1) + fibfib(n-2)", "      \
    \  val fibfib = new mutable.HashMap[Long, Long]()\n        fibfib.put(0, 0L)\n\
    \        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib(n) = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n        fibfib(n)"]
stop_tokens:
- "\n    }\n"
