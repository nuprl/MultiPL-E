name: HumanEval_158_find_max
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts a list of strings.\n    // The list contains\
  \ different words. Return the word with maximum number\n    // of unique characters.\
  \ If multiple strings have maximum number of unique\n    // characters, return the\
  \ one which comes first in lexicographical order.\n    // find_max([\"name\", \"\
  of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"\
  ]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
  \    def findMax(words : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
  name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
  name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
  aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
  abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
  , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
  we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
  we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
  this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
  b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"\
  play\"))).equals((\"play\")));\n    }\n\n}\n"
completions: ["        var max = 0\n        var maxWord = \"\"\n        var maxWordCount\
    \ = 0\n        var maxWordLength = 0\n        var maxWordCharCount = 0\n     \
    \   var maxWordCharLength = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength\
    \ = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength = 0\n \
    \       var maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var\
    \ maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount\
    \ = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount = 0\n \
    \       var maxWordCharLength = 0\n        var maxWordCharCount = 0\n        var\
    \ maxWordCharLength = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength\
    \ = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength = 0\n \
    \       var maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var\
    \ maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount\
    \ = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount = 0\n \
    \       var maxWordCharLength = 0\n        var maxWordCharCount = 0\n        var\
    \ maxWordCharLength = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength\
    \ = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength = 0\n \
    \       var maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var\
    \ maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount\
    \ = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount = 0\n \
    \       var maxWordCharLength = 0\n        var maxWordCharCount = 0\n        var\
    \ maxWordCharLength = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength\
    \ = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength = 0\n \
    \       var maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var\
    \ maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount\
    \ = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount = 0\n \
    \       var maxWordCharLength = 0\n        var maxWordCharCount = 0\n        var\
    \ maxWordCharLength = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength\
    \ = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength = 0\n \
    \       var maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var\
    \ maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount\
    \ = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount = 0\n \
    \       var maxWordCharLength = 0\n        var ", "        val unique = words.map(x\
    \ => x.toSet).reduceLeft(_ ++ _)\n        val maxCount = unique.max\n        val\
    \ maxWord = unique.find(x => x == maxCount).head\n        if (maxCount == 0) \"\
    \"\n        else maxWord", "        val maxCount = mutable.Map[String, Int]()\n\
    \        words.foreach(word => {\n            val count = maxCount(word) match\
    \ {\n                case Some(count) => count + 1\n                case None\
    \ => 1\n            }\n            maxCount(word) = count\n        })\n      \
    \  val maxKey = maxCount.maxBy(_._2)._1\n        words.find(word => maxCount(word)\
    \ == maxCount(maxKey))", "        val counts = words.map(x => x.length).distinct\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(x => x.length\
    \ == maxCount).head\n        val maxWordWithCount = words.filter(x => x.length\
    \ == maxCount).sortBy(x => x).head\n        val maxWordWithCountWithMaxCount =\
    \ words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        ", " \
    \       val counts = words.foldLeft(Map[Char, Int]()){\n            case (acc,\
    \ word) =>\n                val count = acc.getOrElse(word.charAt(0), 0)\n   \
    \             acc + ((word.charAt(0), count) -> (count + 1))\n        }\n    \
    \    val maxCount = counts.maxBy(_._2)._2\n        val maxKey = counts.maxBy(_._1)._1\n\
    \        val maxWord = counts.find(_._2 == maxCount).map(_._1).getOrElse(\"\"\
    )\n        val maxWordIndex = words.indexOf(maxWord)\n        if (maxWordIndex\
    \ < 0) \"\"\n        else words(maxWordIndex)", "        val unique = words.foldLeft(Map[Char,\
    \ Int]())((map, word) => {\n            val uniqueChars = word.distinct\n    \
    \        uniqueChars.foreach(c => map += ((c, map.getOrElse(c, 0) + 1)));\n  \
    \          map\n        })\n        val maxKey = unique.maxBy(_._2)._1\n     \
    \   val maxValue = unique.maxBy(_._2)._2\n        val maxWord = words.find(w =>\
    \ w.contains(maxKey))\n        if (maxWord.isEmpty) \"\"\n        else maxWord.find(w\
    \ => w.contains(maxValue))", "        val unique = mutable.HashSet[Char]()\n \
    \       val maxCount = 0\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                unique.add(c)\n            })\n        })\n        unique.foreach(c\
    \ => {\n            if (unique.count(_ == c) > maxCount) {\n                maxCount\
    \ = unique.count(_ == c)\n            }\n        })\n        if (maxCount == 0)\
    \ {\n            return \"\"\n        }\n        val maxWord = words.find(word\
    \ => unique.count(_ == word(0)) == maxCount)\n        if (maxWord == null) {\n\
    \            return \"\"\n        }\n        val maxWordChars = maxWord.map(c\
    \ => c.toInt)\n        val maxWordCharsSet = maxWordChars.toSet\n        val maxWordCharsSetSize\
    \ = maxWordCharsSet.size\n        val maxWordCharsSetIterator = maxWordCharsSet.iterator\n\
    \        val maxWordCharsSetIteratorNext = maxWordCharsSetIterator.next\n    \
    \    val maxWordCharsSetIteratorNextNext = maxWordCharsSetIteratorNext.next\n\
    \        val maxWordCharsSetIteratorNextNextNext = maxWordCharsSetIteratorNextNext.next\n\
    \        val maxWordCharsSetIteratorNextNextNextNext = maxWordCharsSetIteratorNextNextNext.next\n\
    \        val maxWordCharsSetIteratorNextNextNextNextNext = maxWordCharsSetIteratorNextNextNextNext.next\n\
    \        val maxWordCharsSetIteratorNextNextNextNextNextNext = maxWordCharsSetIteratorNextNextNextNextNext.next\n\
    \        val maxWordCharsSetIteratorNextNextNextNextNextNextNext = maxWordCharsSetIteratorNextNextNextNextNextNext.next\n\
    \        val maxWordCharsSetIteratorNextNextNextNextNextNextNextNext = maxWordCharsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val maxWordCharsSetIteratorNextNextNextNextNextNextNextNextNext = maxWordCharsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val maxWordCharsSetIteratorNextNextNextNextNextNextNextNextNextNext =\
    \ maxWordCharsSetIteratorNextNextNextNextNextNextNextNextNext.next\n        val\
    \ maxWordCharsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = maxWordCharsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val maxWordCharsSetIteratorNextNextNext", "        val unique = mutable.HashSet[Char]()\n\
    \        val maxWord = mutable.StringBuilder()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                if (!unique.contains(c))\
    \ {\n                    unique.add(c)\n                }\n            })\n  \
    \      })\n        if (unique.size == words.size) {\n            unique.toSeq.sortWith(_\
    \ < _).head\n        } else {\n            maxWord.clear()\n            words.foreach(word\
    \ => {\n                word.foreach(c => {\n                    if (!maxWord.contains(c))\
    \ {\n                        maxWord.append(c)\n                    }\n      \
    \          })\n            })\n            maxWord.toString\n        }", "   \
    \     val uniqueChars = mutable.Set[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            maxChars += c -> uniqueChars.count(_ == c)\n        })\n \
    \       val maxCharsSorted = maxChars.toSeq.sortBy(_._2).reverse\n        val\
    \ maxCharsSortedFirst = maxCharsSorted.head\n        val maxCharsSortedFirstKey\
    \ = maxCharsSorted.keys.toSeq.find(_ == maxCharsSortedFirst._1)\n        val maxCharsSortedFirstValue\
    \ = maxCharsSorted.values.toSeq.find(_ == maxCharsSortedFirst._2)\n        val\
    \ maxCharsSortedFirstKeyIndex = maxCharsSortedFirstKey.toString.toInt\n      \
    \  val maxCharsSortedFirstValueIndex = maxCharsSortedFirstValue.toString.toInt\n\
    \        val maxCharsSortedFirstKeyString = maxCharsSortedFirstKey.toString\n\
    \        val maxCharsSortedFirstValueString = maxCharsSortedFirstValue.toString\n\
    \        if (maxCharsSortedFirstKeyIndex < maxCharsSortedFirstValueIndex) {\n\
    \            maxCharsSortedFirstKeyString\n        } else {\n            maxCharsSortedFirstValueString\n\
    \        }", "        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1;\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1", "        val\
    \ maxCount = words.foldLeft(Map[String, Int]())((map, word) => {\n           \
    \ val count = map.get(word) match {\n                case Some(count) => count\
    \ + 1\n                case None => 1\n            }\n            map.put(word,\
    \ count)\n            map\n        })\n        val maxKey = maxCount.keys.max\n\
    \        val maxValue = maxCount.values.max\n        val maxWord = words.find(word\
    \ => maxCount.get(word) == maxValue)\n        maxWord.getOrElse(\"\")", "    \
    \    val uniqueChars = words.map(word => word.distinct).reduceLeft(_ ++ _)\n \
    \       val maxCount = uniqueChars.max\n        val maxWord = words.filter(word\
    \ => word.count(_ == maxCount) == maxCount)\n        val maxWordWithCount = maxWord.map(word\
    \ => word + \": \" + word.count(_ == maxCount))\n        val maxWordWithCountSorted\
    \ = maxWordWithCount.sortBy(_.length)\n        val maxWordWithCountSortedFirst\
    \ = maxWordWithCountSorted.head\n        val maxWordWithCountSortedFirstLength\
    \ = maxWordWithCountSortedFirst.length\n        val maxWordWithCountSortedFirstChars\
    \ = maxWordWithCountSortedFirst.take(maxWordWithCountSortedFirstLength)\n    \
    \    val maxWordWithCountSortedFirstCharsLength = maxWordWithCountSortedFirstChars.length\n\
    \        val maxWordWithCountSortedFirstCharsSorted = maxWordWithCountSortedFirstChars.sortBy(_.length)\n\
    \        val maxWordWithCountSortedFirstCharsSortedFirst = maxWordWithCountSortedFirstCharsSorted.head\n\
    \        val maxWordWithCountSortedFirstCharsSortedFirstLength = maxWordWithCountSortedFirstCharsSortedFirst.length\n\
    \        val maxWordWithCountSortedFirstCharsSortedFirstChars = maxWordWithCountSortedFirstCharsSortedFirst.take(maxWordWithCountSortedFirstCharsSortedFirstLength)\n\
    \        val maxWordWithCountSortedFirstCharsSortedFirstCharsLength = maxWordWithCountSortedFirstCharsSortedFirstChars.length\n\
    \        val maxWordWithCountSortedFirstCharsSortedFirstCharsSorted = maxWordWithCountSortedFirstCharsSortedFirstChars.sortBy(_.length)\n\
    \        val maxWordWithCountSortedFirstCharsSortedFirstCharsSortedFirst = maxWordWithCountSortedFirstCharsSortedFirstCharsSorted.head\n\
    \        val maxWordWithCountSortedFirstCharsSortedFirstCharsSortedFirstLength\
    \ = maxWordWithCountSortedFirstCharsSortedFirstCharsSortedFirst.length\n     \
    \   val maxWordWithCountSortedFirstCharsSortedFirstCharsSortedFirstChars = maxWordWithCountSortedFirstCharsSortedFirstCharsSortedFirst.take(maxWordWithCountSortedFirstCharsSortedFirstCharsSortedFirstLength)\n\
    \        val maxWordWithCountSortedFirstCharsSortedFirstCharsSortedFirstCharsLength\
    \ = maxWordWithCountSortedFirstCharsSortedFirstCharsSortedFirstCharsLength.length\n\
    \        val maxWordWithCount", "        val unique = mutable.HashSet[Char]()\n\
    \        val maxCount = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                unique.add(c)\n        \
    \    })\n        })\n        unique.foreach(c => {\n            val count = unique(c).length\n\
    \            val maxCount = if (maxCount(c) == 0) count else maxCount(c) + 1\n\
    \            maxCount(c) = maxCount\n        })\n        val maxChar = maxCount.keys.max\n\
    \        val maxCount = maxCount(maxChar)\n        val maxWord = words.filter(word\
    \ => word(maxChar) == maxChar).sortWith(_.compareToIgnoreCase(words(0))).head\n\
    \        if (maxCount == 0) maxWord else maxWord", "        val unique = words.map(_.length).distinct\n\
    \        val max = unique.max\n        val maxIndex = unique.indexOf(max)\n  \
    \      words(maxIndex)", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   val count = maxChars.getOrElse(char, 0)\n            maxChars += char -> count\
    \ + 1\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith((a, b)\
    \ => a._2 > b._2)\n        val maxCharsSortedFirst = maxCharsSorted.head._1\n\
    \        val maxCharsSortedLast = maxCharsSorted.last._1\n        val maxCharsSortedFirstIndex\
    \ = words.indexOf(maxCharsSortedFirst)\n        val maxCharsSortedLastIndex =\
    \ words.indexOf(maxCharsSortedLast)\n        if (maxCharsSortedFirstIndex < maxCharsSortedLastIndex)\
    \ {\n            words.take(maxCharsSortedFirstIndex + 1)\n        } else {\n\
    \            words.take(maxCharsSortedLastIndex + 1)\n        }", "        val\
    \ unique = mutable.HashSet[String]()\n        val maxCount = 0\n        val maxWord\
    \ = \"\"\n        words.foreach(word => {\n            val count = unique.count(_\
    \ == word)\n            if (count > maxCount) {\n                maxCount = count\n\
    \                maxWord = word\n            }\n            unique += word\n \
    \       })\n        if (unique.size == maxCount) {\n            maxWord\n    \
    \    } else {\n            \"\"\n        }", "        val unique = words.map(x\
    \ => x.distinct).flatten.toSet\n        val maxCount = unique.max\n        val\
    \ maxWord = unique.find(x => x == maxCount)\n        if (maxWord.isEmpty) \"\"\
    \n        else maxWord", "        val unique = words.map(_.length).distinct\n\
    \        val maxIndex = unique.max\n        val maxWord = words(maxIndex)\n  \
    \      if (maxIndex == 0) \"\"\n        else maxWord", "        val unique = mutable.HashSet[String]()\n\
    \        val maxWord = mutable.ListBuffer[String]()\n        words.foreach(word\
    \ => {\n            val uniqueChars = word.distinct\n            if (uniqueChars.size\
    \ < unique.size) {\n                unique.clear()\n                unique.update(uniqueChars)\n\
    \            }\n            if (uniqueChars.size == unique.size) {\n         \
    \       unique.update(word)\n            }\n        })\n        unique.foreach(word\
    \ => {\n            if (maxWord.size < word.length) {\n                maxWord.clear()\n\
    \                maxWord.append(word)\n            }\n            if (maxWord.size\
    \ == word.length) {\n                maxWord.append(word)\n            }\n   \
    \     })\n        if (maxWord.size == 0) {\n            return \"\"\n        }\n\
    \        maxWord.head", "        val uniqueChars = mutable.HashSet[Char]()\n \
    \       val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \       })\n        })\n        uniqueChars.foreach(c => {\n            val count\
    \ = uniqueChars.count(_ == c)\n            if (count > maxChars(c)) {\n      \
    \          maxChars(c) = count\n            }\n        })\n        val maxKey\
    \ = maxChars.keys.max\n        if (maxChars(maxKey) == 0) {\n            return\
    \ \"\"\n        }\n        words.find(word => maxChars(word.head) == maxChars(maxKey))",
  "        val counts = words.map(word => word.distinct.length).distinct\n       \
    \ val maxCount = counts.max\n        val maxWord = words.filter(word => word.distinct.length\
    \ == maxCount).head\n        val maxWordLength = maxWord.distinct.length\n   \
    \     val maxWordIndex = words.indexOf(maxWord)\n        if (maxWordIndex == 0)\
    \ \"\"\n        else words.take(maxWordIndex).mkString(\"\") + maxWord", "   \
    \     val unique = mutable.HashSet[Char]()\n        val maxCount = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               unique.add(c)\n                maxCount.getOrElseUpdate(c, 0)\
    \ + 1\n            })\n        })\n        val maxKey = maxCount.keys.max\n  \
    \      val maxValue = maxCount.values.max\n        val maxWord = words.find(word\
    \ => word.contains(maxKey))\n        if (maxValue == 1) maxWord.getOrElse(\"\"\
    )\n        else if (maxValue == 0) \"\"\n        else maxWord.getOrElse(\"\")",
  "        val unique = words.map(x => x.toSet).flatten.toSet\n        val maxUnique\
    \ = unique.max\n        val maxIndex = unique.indexOf(maxUnique)\n        val\
    \ maxWord = words(maxIndex)\n        val maxWordSet = maxWord.toSet\n        val\
    \ maxWordLength = maxWordSet.size\n        if(maxWordLength > unique.size) {\n\
    \            \"\"\n        } else {\n            val maxWordSetLength = maxWordSet.size\n\
    \            val maxWordSetIndexes = unique.zipWithIndex.filter(_._2 == maxWordSetLength)\n\
    \            val maxWordSetIndexes = maxWordSetIndexes.map(_._1)\n           \
    \ val maxWordSetIndexesLength = maxWordSetIndexes.size\n            if(maxWordSetIndexesLength\
    \ > unique.size) {\n                \"\"\n            } else {\n             \
    \   val maxWordSetIndexesLength = maxWordSetIndexes.size\n                val\
    \ maxWordSetIndexesLength = maxWordSetIndexes.size\n                val maxWordSetIndexesLength\
    \ = maxWordSetIndexes.size\n                val maxWordSetIndexesLength = maxWordSetIndexes.size\n\
    \                val maxWordSetIndexesLength = maxWordSetIndexes.size\n      \
    \          val maxWordSetIndexesLength = maxWordSetIndexes.size\n            \
    \    val maxWordSetIndexesLength = maxWordSetIndexes.size\n                val\
    \ maxWordSetIndexesLength = maxWordSetIndexes.size\n                val maxWordSetIndexesLength\
    \ = maxWordSetIndexes.size\n                val maxWordSetIndexesLength = maxWordSetIndexes.size\n\
    \                val maxWordSetIndexesLength = maxWordSetIndexes.size\n      \
    \          val maxWordSetIndexesLength = maxWordSetIndexes.size\n            \
    \    val maxWordSetIndexesLength = maxWordSetIndexes.size\n                val\
    \ maxWordSetIndexesLength = maxWordSetIndexes.size\n                val maxWordSetIndexesLength\
    \ = maxWordSetIndexes.size\n                val maxWordSetIndexesLength = maxWordSetIndexes.size\n\
    \                val maxWordSetIndexesLength = maxWordSetIndexes.size\n      \
    \          val maxWordSetIndexesLength = maxWordSetIndexes.size\n            \
    \    val maxWordSetIndexesLength = maxWordSetIndexes.size\n                val\
    \ maxWordSetIndexesLength = maxWordSetIndexes.size\n                val maxWordSetIndexesLength\
    \ = maxWordSetIndexes.size\n                val maxWordSetIndexesLength = maxWordSetIndexes.size\n\
    \                val maxWordSetIndexesLength = maxWordSetIndexes.size\n      \
    \          val max", "        val uniqueChars = words.map(x => x.distinct).flatten\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(x\
    \ => x.distinct.size == maxChars).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordChars = maxWord.distinct\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars)\n        val maxWordCharsLength\
    \ = maxWordChars.length\n        if (maxWordIndex < maxWordCharsIndex) maxWord\n\
    \        else if (maxWordIndex == maxWordCharsIndex) maxWordChars\n        else\
    \ \"\"", "        val chars = words.map(_.toCharArray).flatten\n        val counts\
    \ = chars.groupBy(identity).mapValues(_.length)\n        val max = counts.maxBy(_._2)._1\n\
    \        val maxIndex = chars.indexOf(max)\n        chars.take(maxIndex).mkString(\"\
    \")", "        val uniqueChars = words.map(_.length).distinct\n        val maxChars\
    \ = uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        if (maxWordIndex ==\
    \ 0) \"\"\n        else maxWord", "        val unique = mutable.HashSet[String]()\n\
    \        val maxCount = 0\n        val maxWord = \"\"\n        for (word <- words)\
    \ {\n            val count = unique.size\n            if (count > maxCount) {\n\
    \                maxCount = count\n                maxWord = word\n          \
    \  }\n            unique += word\n        }\n        if (unique.size == maxCount)\
    \ {\n            maxWord\n        } else {\n            \"\"\n        }", "  \
    \      val unique = words.foldLeft(Set.empty[String])((s, word) => s ++ Set(word))\n\
    \        val maxCount = unique.max\n        val maxWord = unique.filter(w => w\
    \ == maxCount).head\n        val maxWords = unique.filter(w => w < maxCount).sortWith(_\
    \ < _).take(1).mkString(\"\")\n        if (maxWords.isEmpty) \"\"\n        else\
    \ maxWord", "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar\
    \ = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars += (c -> 1)\n            })\n        })\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      val count = uniqueChars(c)\n                if (count > maxChar.getOrElse(c,\
    \ 0))\n                    maxChar = uniqueChars.updated(c, count)\n         \
    \   })\n        })\n        val maxCount = maxChar.values.max\n        val maxChars\
    \ = maxChar.filter(_._2 == maxCount).map(_._1)\n        if (maxChars.isEmpty)\n\
    \            \"\"\n        else\n            maxChars.head", "        val unique\
    \ = mutable.HashSet[Char]()\n        val maxCount = 0\n        val maxWord = \"\
    \"\n        words.foreach(word => {\n            word.foreach(c => {\n       \
    \         if (unique.contains(c)) {\n                    unique.remove(c)\n  \
    \              } else {\n                    unique.add(c)\n                }\n\
    \            })\n            if (unique.size == maxCount) {\n                maxCount\
    \ = unique.size\n                maxWord = word\n            }\n        })\n \
    \       maxWord", "        val unique = mutable.HashSet[String]()\n        val\
    \ max = 0\n        val result = \"\"\n        words.foreach(word => {\n      \
    \      val count = unique.count(_ == word)\n            if (count > max) {\n \
    \               max = count\n                result = word\n            }\n  \
    \          unique.add(word)\n        })\n        result", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars && words.indexOf(_) == words.lastIndexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        if (maxWordWithMaxCharsIndex > maxWordWithMaxCharsIndex) maxWordWithMaxChars.max\
    \ else \"\"", "        val uniqueChars = words.map(_.length).distinct\n      \
    \  val maxUniqueChars = uniqueChars.max\n        val maxWord = words.filter(w\
    \ => w.length == maxUniqueChars)\n        val maxWordWithMaxUniqueChars = words.filter(w\
    \ => w.length == maxUniqueChars && w < maxWord)\n        val maxWordWithMaxUniqueCharsFirst\
    \ = words.filter(w => w.length == maxUniqueChars && w > maxWord)\n        val\
    \ maxWordWithMaxUniqueCharsFirstInLexicographicalOrder = words.filter(w => w.length\
    \ == maxUniqueChars && w < maxWordWithMaxUniqueCharsFirst)\n        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(w => w.length == maxUniqueChars && w > maxWordWithMaxUniqueCharsFirst)\n\
    \        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(w => w.length == maxUniqueChars && w < maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInLexicographicalOrder)\n\
    \        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(w => w.length == maxUniqueChars && w > maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder)\n\
    \        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(w => w.length == maxUniqueChars && w < maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder)\n\
    \        val maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(w => w.length == maxUniqueChars && w > maxWordWithMaxUniqueCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder",
  "        val unique = mutable.Set[Char]()\n        val maxCount = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               if (unique.contains(c)) {\n                    unique(c) += 1\n\
    \                } else {\n                    unique(c) += 1\n              \
    \      maxCount(c) += 1\n                }\n            })\n        })\n     \
    \   val maxKey = maxCount.keys.max\n        val maxValue = maxCount.values.max\n\
    \        val maxWord = words.find(word => maxKey(word) == maxValue)\n        if\
    \ (maxWord.isEmpty) \"\"\n        else maxWord.get", "        val unique = words.map(_.length).distinct\n\
    \        val maxCount = unique.max\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   if (maxWordIndex == 0) \"\"\n        else maxWord", "        val unique =\
    \ words.map(x => x.distinct).flatten\n        val maxCount = unique.map(x => x.size).max\n\
    \        val maxIndex = unique.zipWithIndex.filter(_._2 == maxCount).map(_._1).head\n\
    \        unique.map(x => x.take(maxIndex)).mkString(\"\")", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars.getOrElse(c, 0) + 1\n            })\n        })\n        uniqueChars.toList.sortWith((a,\
    \ b) => a._2 > b._2).head._1", "        val unique = mutable.HashSet[String]()\n\
    \        val maxCount = 0\n        val maxWord = \"\"\n        words.foreach(word\
    \ => {\n            val count = unique.count(_ == word)\n            if (count\
    \ > maxCount) {\n                maxCount = count\n                maxWord = word\n\
    \            }\n            unique += word\n        })\n        if (maxCount ==\
    \ 0) \"\"\n        else maxWord", "        val unique = words.map(x => x.toSet).flatten.toSet\n\
    \        val maxCount = unique.max\n        val maxWord = words.filter(x => x.toSet.size\
    \ == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordIndex = words.indexOf(maxWord)",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars.getOrElse(c, 0) + 1\n            })\n        })\n\
    \        uniqueChars.toList.sortWith(_._2 > _._2).head._1", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        val maxChars = mutable.Map[Char, Int]()\n\
    \        val maxWord = mutable.Map[String, String]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1;\n                }\n\
    \            })\n        })\n        uniqueChars.toList.sortWith((a, b) => b._2\
    \ - a._2).head._1", "        val uniqueChars = mutable.Set[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(c => {\n                uniqueChars += c\n            })\n\
    \        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c,\
    \ 0) + 1\n            maxChars += c -> count\n        })\n        val maxKey =\
    \ maxChars.maxBy(_._2)\n        val maxValue = maxChars(maxKey)\n        val maxWord\
    \ = words.filter(w => w.contains(maxKey))\n        if (maxWord.size == 1) {\n\
    \            maxWord(0)\n        } else {\n            val maxWordWithMaxCount\
    \ = maxWord.filter(w => w.contains(maxKey))\n            val maxWordWithMaxCountWithMaxKey\
    \ = maxWordWithMaxCount.filter(w => w.contains(maxKey))\n            if (maxWordWithMaxCountWithMaxKey.size\
    \ == 1) {\n                maxWordWithMaxCountWithMaxKey(0)\n            } else\
    \ {\n                \"\"\n            }\n        }", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars.getOrElse(c, 0) + 1\n            })\n        })\n        uniqueChars.toSeq.sortBy(_._2).lastOption.map(_._1).getOrElse(\"\
    \")", "        val unique = mutable.HashSet[Char]()\n        val maxCount = 0\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      if (unique.contains(c)) {\n                    unique(c) = 0\n        \
    \        }\n                else {\n                    unique(c) += 1\n     \
    \           }\n            })\n        })\n        val maxWord = words.maxBy(_.length)\n\
    \        if (unique.size == maxCount) {\n            maxWord\n        }\n    \
    \    else {\n            findMax(maxWord)\n        }", "        var max = 0\n\
    \        var maxWord = \"\"\n        var maxWordCount = 0\n        words.foreach(word\
    \ => {\n            val count = word.length\n            if (count > max) {\n\
    \                max = count\n                maxWord = word\n               \
    \ maxWordCount = 1\n            } else if (count == max) {\n                maxWordCount\
    \ += 1\n            }\n        })\n        if (maxWordCount == 1) {\n        \
    \    return maxWord\n        } else {\n            return maxWord\n        }",
  "        val unique = mutable.HashSet[Char]()\n        val maxCount = 0\n      \
    \  val maxWord = \"\"\n        for(word <- words) {\n            for(c <- word)\
    \ {\n                unique.add(c)\n            }\n            val count = unique.size\n\
    \            if(count > maxCount) {\n                maxCount = count\n      \
    \          maxWord = word\n            }\n        }\n        maxWord", "     \
    \   val unique = mutable.HashSet[Char]()\n        val maxCount = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               unique.add(c)\n                maxCount.getOrElse(c, 0) + 1\n\
    \            })\n        })\n        val maxKey = maxCount.keys.max\n        val\
    \ maxValue = maxCount.values.max\n        val maxWord = words.find(word => word.contains(maxKey))\n\
    \        if (maxWord.isEmpty) \"\"\n        else maxWord.find(word => word.contains(maxKey))",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars\
    \ += c -> count\n        })\n        val maxKey = maxChars.maxBy(_._2)\n     \
    \   val maxValue = maxChars(maxKey)\n        words.find(word => word.count(_ ==\
    \ maxKey) == maxValue).getOrElse(\"\")", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += (c ->\
    \ 1)\n            })\n        })\n        words.foreach(word => {\n          \
    \  word.foreach(c => {\n                uniqueChars(c) match {\n             \
    \       case Some(count) => maxChar(c) = count\n                    case None\
    \ => maxChar(c) = 1\n                }\n            })\n        })\n        val\
    \ maxCount = maxChar.values.max\n        val maxChars = maxChar.filter(_._2 ==\
    \ maxCount)\n        val maxCharsSorted = maxChars.sortBy(_._1)\n        val maxCharsSortedFirst\
    \ = maxCharsSorted.head\n        val maxCharsSortedFirstKey = maxCharsSorted.head._1\n\
    \        val maxCharsSortedFirstValue = maxCharsSorted.head._2\n        val maxCharsSortedFirstChar\
    \ = maxCharsSorted.head._1\n        val maxCharsSortedFirstCount = maxCharsSorted.head._2\n\
    \        val maxCharsSortedFirstCharCount = maxCharsSorted.head._3\n        val\
    \ maxCharsSortedFirstCharCount = maxCharsSorted.head._4\n        val maxCharsSortedFirstCharCount\
    \ = maxCharsSorted.head._5\n        val maxCharsSortedFirstCharCount = maxCharsSorted.head._6\n\
    \        val maxCharsSortedFirstCharCount = maxCharsSorted.head._7\n        val\
    \ maxCharsSortedFirstCharCount = maxCharsSorted.head._8\n        val maxCharsSortedFirstCharCount\
    \ = maxCharsSorted.head._9\n        val maxCharsSortedFirstCharCount = maxCharsSorted.head._10\n\
    \        val maxCharsSortedFirstCharCount = maxCharsSorted.head._11\n        val\
    \ maxCharsSortedFirstCharCount = maxCharsSorted.head._12\n        val maxCharsSortedFirstCharCount\
    \ = maxCharsSorted.head._13\n        val maxCharsSortedFirstCharCount = maxCharsSorted.head._14\n\
    \        val maxCharsSortedFirstCharCount = maxCharsSorted.head._15\n        val\
    \ maxCharsSortedFirstCharCount = maxCharsSorted.head._16\n        val maxCharsSortedFirstCharCount\
    \ = maxCharsSorted.head._17\n        val maxCharsSortedFirstCharCount = maxCharsSor",
  "        val unique = mutable.HashSet[String]()\n        val maxCount = mutable.Map[String,\
    \ Int]()\n        words.foreach(word => {\n            val count = unique.count(_\
    \ == word)\n            if (count > maxCount(word)) {\n                maxCount(word)\
    \ = count\n            }\n            unique += word\n        })\n        val\
    \ maxWord = maxCount.keys.max\n        if (maxCount.values.max > 1) {\n      \
    \      maxWord\n        } else {\n            \"\"\n        }", "        val unique\
    \ = words.map(x => x.distinct).flatten.toSet\n        val maxCount = unique.max\n\
    \        val maxWord = unique.find(x => x == maxCount)\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        if (maxWordIndex == -1) {\n            \"\"\
    \n        } else {\n            words(maxWordIndex)\n        }", "        val\
    \ uniqueChars = mutable.HashSet[Char]()\n        var maxCount = 0\n        var\
    \ maxWord = \"\"\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars += c\n            })\n        })\n       \
    \ uniqueChars.foreach(c => {\n            if (maxCount < uniqueChars.count(_ ==\
    \ c)) {\n                maxCount = uniqueChars.count(_ == c)\n              \
    \  maxWord = word\n            }\n        })\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        var maxWordCount = 0\n        var maxWordCountIndex\
    \ = 0\n        var maxWordCountIndex2 = 0\n        var maxWordCountIndex3 = 0\n\
    \        var maxWordCountIndex4 = 0\n        var maxWordCountIndex5 = 0\n    \
    \    var maxWordCountIndex6 = 0\n        var maxWordCountIndex7 = 0\n        var\
    \ maxWordCountIndex8 = 0\n        var maxWordCountIndex9 = 0\n        var maxWordCountIndex10\
    \ = 0\n        var maxWordCountIndex11 = 0\n        var maxWordCountIndex12 =\
    \ 0\n        var maxWordCountIndex13 = 0\n        var maxWordCountIndex14 = 0\n\
    \        var maxWordCountIndex15 = 0\n        var maxWordCountIndex16 = 0\n  \
    \      var maxWordCountIndex17 = 0\n        var maxWordCountIndex18 = 0\n    \
    \    var maxWordCountIndex19 = 0\n        var maxWordCountIndex20 = 0\n      \
    \  var maxWordCountIndex21 = 0\n        var maxWordCountIndex22 = 0\n        var\
    \ maxWordCountIndex23 = 0\n        var maxWordCountIndex24 = 0\n        var maxWordCountIndex25\
    \ = 0\n        var maxWordCountIndex26 = 0\n        var maxWordCountIndex27 =\
    \ 0\n        var maxWordCountIndex28 = 0\n        var maxWordCountIndex29 = 0\n\
    \        var maxWordCountIndex30 = 0\n        var maxWordCountIndex31 = 0\n  \
    \      var maxWordCountIndex32 = 0\n        var maxWordCountIndex33 = 0\n    \
    \    var maxWordCountIndex34 = 0\n        var maxWordCountIndex35 = 0\n      \
    \  var maxWordCountIndex36 = 0\n        var maxWordCountIndex37 = 0\n        var\
    \ maxWordCountIndex38 = 0\n        var maxWordCountIndex39 = 0\n        var maxWordCountIndex40\
    \ = 0\n        var maxWordCountIndex41 = 0\n        var maxWordCountIndex42 =\
    \ 0\n        var maxWordCountIndex43 = 0\n        var maxWordCountIndex44 = 0\n\
    \        var maxWordCountIndex45 = 0\n        var maxWordCountIndex46 = 0\n  \
    \      var maxWordCountIndex47 = 0\n        var maxWordCountIndex48 = 0\n    \
    \    var maxWordCountIndex49 = 0\n        var maxWordCountIndex50 = 0\n      \
    \  var maxWordCountIndex51 = 0\n        var maxWordCountIndex52 = 0\n        var\
    \ maxWordCountIndex53 = 0\n        var maxWordCountIndex54 = 0\n        var maxWordCountIndex55\
    \ = 0\n        var maxWordCountIndex56 = 0\n        var maxWordCountIndex57 =\
    \ 0\n        var maxWordCountIndex58 = 0\n        var maxWordCountIndex59 = 0\n\
    \        var maxWordCountIndex60 = 0\n        var maxWordCountIndex61 = 0\n  \
    \      var maxWordCountIndex62 = 0\n        var max", "        val unique = mutable.HashSet[Char]()\n\
    \        val maxCount = 0\n        val maxWord = \"\"\n        for (word <- words)\
    \ {\n            val chars = word.map(c => c.toInt)\n            val count = chars.foldLeft(0)((count,\
    \ c) => count + c)\n            if (count > maxCount) {\n                maxCount\
    \ = count\n                maxWord = word\n            }\n            unique +=\
    \ chars.head\n        }\n        if (unique.size == maxCount) {\n            maxWord\n\
    \        } else {\n            \"\"\n        }", "        val unique = words.map(x\
    \ => x.distinct).flatten\n        val max = unique.max\n        val index = unique.indexOf(max)\n\
    \        if (index == unique.length-1)\n            \"\"\n        else\n     \
    \       unique(index)", "        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += (char\
    \ -> 1)\n            })\n        })\n        words.foreach(word => {\n       \
    \     word.foreach(char => {\n                val count = uniqueChars(char)\n\
    \                if (count > maxChar(char)) {\n                    maxChar(char)\
    \ = count\n                }\n            })\n        })\n        val maxCount\
    \ = maxChar.values.max\n        val maxChars = maxChar.filter(_._2 == maxCount).keys.toList\n\
    \        val maxWord = words.filter(word => maxChars.contains(word(0)))\n    \
    \    if (maxWord.isEmpty) {\n            \"\"\n        } else {\n            maxWord.head\n\
    \        }", "        val uniqueChars = words.map(_.length).distinct\n       \
    \ val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   if (maxWordIndex == 0) \"\"\n        else maxWord", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char\
    \ => {\n            maxChars += char -> uniqueChars.count(_ == char)\n       \
    \ })\n        val maxCharsSorted = maxChars.toSeq.sortWith(_._2 > _._2)\n    \
    \    val maxCharsSortedKeys = maxCharsSorted.map(_._1)\n        val maxCharsSortedValues\
    \ = maxCharsSorted.map(_._2)\n        val maxCharsSortedKeyAndValue = maxCharsSortedKeys.zip(maxCharsSortedValues)\n\
    \        val maxCharsSortedKeyAndValueFirst = maxCharsSortedKeyAndValue.head\n\
    \        val maxCharsSortedKeyAndValueFirstKey = maxCharsSortedKeyAndValueFirst._1\n\
    \        val maxCharsSortedKeyAndValueFirstValue = maxCharsSortedKeyAndValueFirst._2\n\
    \        if (maxCharsSortedKeyAndValueFirstValue == maxCharsSortedKeys.count(_\
    \ == maxCharsSortedKeyAndValueFirstKey)) {\n            maxCharsSortedKeyAndValueFirstKey\n\
    \        } else {\n            \"\"\n        }", "        val chars = words.map(_.toChar).distinct\n\
    \        val maxChars = chars.max\n        val maxWord = words.filter(_.toChar\
    \ == maxChars)\n        if (maxWord.isEmpty) \"\"\n        else maxWord.head",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        if (maxWordWithMaxCharsIndex < words.length)\n\
    \            findMax(words.drop(maxWordWithMaxCharsIndex))\n        else\n   \
    \         maxWordWithMaxChars", "        val unique = words.map(x => x.distinct).flatten\n\
    \        val maxCount = unique.map(x => x.size).max\n        val maxWord = unique.filter(x\
    \ => x.size == maxCount).head\n        val maxWordIndex = unique.indexOf(maxWord)\n\
    \        val maxWordString = words.filter(x => x == maxWord).head\n        if\
    \ (maxWordIndex == words.size-1) {\n            maxWordString\n        } else\
    \ {\n            findMax(words.drop(maxWordIndex+1))\n        }", "        var\
    \ maxCount = 0\n        var maxWord = \"\"\n        var maxWordIndex = 0\n   \
    \     var maxWordCount = 0\n        var maxWordLength = 0\n        words.foreach(word\
    \ => {\n            val count = word.length\n            if (count > maxWordCount)\
    \ {\n                maxWordCount = count\n                maxWord = word\n  \
    \              maxWordIndex = words.indexOf(word)\n                maxWordLength\
    \ = count\n            }\n        })\n        if (maxWordCount > maxWordLength)\
    \ {\n            maxWord = maxWord.substring(0, maxWordLength)\n        }\n  \
    \      return maxWord", "        val unique = mutable.Set[Char]()\n        val\
    \ maxCount = 0\n        val maxWord = \"\"\n        words.foreach(word => {\n\
    \            word.foreach(c => {\n                unique.add(c)\n            })\n\
    \        })\n        unique.foreach(c => {\n            if (unique.count(_ ==\
    \ c) > maxCount) {\n                maxCount = unique.count(_ == c)\n        \
    \        maxWord = word\n            }\n        })\n        maxWord", "      \
    \  val unique = words.map(x => x.distinct).flatten.toSet\n        val maxCount\
    \ = unique.max\n        val maxWord = words.filter(x => x.distinct.size == maxCount).min\n\
    \        val maxWordCount = unique.filter(x => x == maxWord).length\n        if\
    \ (maxWordCount == maxCount) {\n            maxWord\n        } else {\n      \
    \      \"\"\n        }", "        val unique = mutable.Map[Char, Int]()\n    \
    \    val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word => {\n\
    \            word.foreach(c => {\n                unique.getOrElseUpdate(c, 0)\
    \ + 1\n            })\n        })\n        unique.foreach(c => {\n           \
    \ if (maxChar.getOrElse(c, 0) > unique.getOrElse(c, 0))\n                maxChar.update(c,\
    \ unique.getOrElse(c, 0))\n        })\n        maxChar.keys.toList.sortWith(_\
    \ < _).head", "        val uniqueChars = mutable.Map[Char, Int]()\n        val\
    \ maxChar = mutable.Map[Char, Int]()\n        val maxWord = mutable.Map[String,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += (char -> 1)\n            })\n        })\n    \
    \    uniqueChars.toList.sortWith(_._2 > _._2).head._1", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars(c) = uniqueChars(c) + 1\n            })\n        })\n     \
    \   uniqueChars.toList.sortWith(_._2 > _._2).head._1", "        val unique = words.map(_.length).distinct\n\
    \        val max = unique.max\n        val index = unique.indexOf(max)\n     \
    \   if (max != unique.last) {\n            words(index)\n        } else {\n  \
    \          \"\"\n        }", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \          })\n        })\n        uniqueChars.foreach(c => {\n            val\
    \ count = maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n \
    \       })\n        val maxChar = maxChars.maxBy(_._2)._1\n        words.find(word\
    \ => word.contains(maxChar)).getOrElse(\"\")", "        val unique = words.map(x\
    \ => x.toSet).reduce(_|_)\n        val maxCount = words.map(x => x.toSet).reduce(_|_)\n\
    \        val maxWord = words.filter(x => x.toSet.size == maxCount).head\n    \
    \    val maxWordIndex = words.indexOf(maxWord)\n        val maxWordLength = maxWord.length\n\
    \        val maxWordChars = maxWord.map(x => x.toSet).reduce(_|_)\n        val\
    \ maxWordCharIndex = words.indexOf(maxWord.map(x => x.toSet).reduce(_|_))\n  \
    \      val maxWordCharLength = maxWord.map(x => x.toSet).reduce(_|_).length\n\
    \        val maxWordCharIndex = words.indexOf(maxWord.map(x => x.toSet).reduce(_|_))\n\
    \        val maxWordCharLength = maxWord.map(x => x.toSet).reduce(_|_).length\n\
    \        val maxWordCharIndex = words.indexOf(maxWord.map(x => x.toSet).reduce(_|_))\n\
    \        val maxWordCharLength = maxWord.map(x => x.toSet).reduce(_|_).length\n\
    \        val maxWordCharIndex = words.indexOf(maxWord.map(x => x.toSet).reduce(_|_))\n\
    \        val maxWordCharLength = maxWord.map(x => x.toSet).reduce(_|_).length\n\
    \        val maxWordCharIndex = words.indexOf(maxWord.map(x => x.toSet).reduce(_|_))\n\
    \        val maxWordCharLength = maxWord.map(x => x.toSet).reduce(_|_).length\n\
    \        val maxWordCharIndex = words.indexOf(maxWord.map(x => x.toSet).reduce(_|_))\n\
    \        val maxWordCharLength = maxWord.map(x => x.toSet).reduce(_|_).length\n\
    \        val maxWordCharIndex = words.indexOf(maxWord.map(x => x.toSet).reduce(_|_))\n\
    \        val maxWordCharLength = maxWord.map(x => x.toSet).reduce(_|_).length\n\
    \        val maxWordCharIndex = words.indexOf(maxWord.map(x => x.toSet).reduce(_|_))\n\
    \        val maxWordCharLength = maxWord.map(x => x.toSet).reduce(_|_).length\n\
    \        val maxWordCharIndex = words.indexOf(maxWord.map(x => x.toSet).reduce(_|_))\n\
    \        val maxWordCharLength = maxWord.map(x => x.toSet).", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n                maxChars(c) = maxChars(c).max(uniqueChars(c)).getOrElse(0)+1\n\
    \            })\n        })\n        uniqueChars.toList.sortWith(_ < _).head",
  "        val unique = mutable.HashSet[Char]()\n        val maxCount = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               if (unique.contains(c)) {\n                    unique(c) += 1\n\
    \                } else {\n                    unique(c) += 1\n              \
    \      maxCount(c) += 1\n                }\n            })\n        })\n     \
    \   val maxKey = maxCount.keys.max\n        val maxValue = maxCount.values.max\n\
    \        val maxWord = words.find(word => word(maxKey) == maxValue)\n        if\
    \ (maxWord.isEmpty) \"\"\n        else maxWord.get", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        val maxChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars(c) += 1\n            })\n        })\n        uniqueChars.toList.sortWith(_._2\
    \ > _._2).head._1", "        var max = 0\n        var maxWord = \"\"\n       \
    \ var maxWordCount = 0\n        var maxWordCountIndex = 0\n        var i = 0\n\
    \        while(i < words.length) {\n            var word = words(i)\n        \
    \    var count = word.length\n            if(count > max) {\n                max\
    \ = count\n                maxWord = word\n                maxWordCount = count\n\
    \                maxWordCountIndex = i\n            }\n            i += 1\n  \
    \      }\n        if(maxWordCount > maxWordCountIndex) {\n            return maxWord\n\
    \        } else {\n            return maxWord\n        }", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n                maxChars += c -> 0\n            })\n\
    \        })\n        uniqueChars.toList.sortWith(_ < _).headOption.getOrElse(\"\
    \")", "        val counts = words.map(x => x.length).groupBy(x => x).mapValues(_.size)\n\
    \        val max = counts.maxBy(_._2)._1\n        val maxCount = counts.maxBy(_._2)._2\n\
    \        val maxIndex = words.indexOf(max)\n        val maxWord = words(maxIndex)\n\
    \        if (maxCount > counts(max)._2) {\n            findMax(words.take(maxIndex\
    \ + 1))\n        } else {\n            maxWord\n        }", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars(c) match {\n                    case Some(count)\
    \ => uniqueChars(c) = uniqueChars(c) + 1;\n                    case None => uniqueChars(c)\
    \ = 1\n                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1",
  "        val unique = mutable.HashSet[Char]()\n        val maxCount = 0\n      \
    \  var maxWord = \"\"\n        for(word <- words) {\n            for(c <- word)\
    \ {\n                unique.add(c)\n            }\n            val count = unique.size\n\
    \            if(count > maxCount) {\n                maxCount = count\n      \
    \          maxWord = word\n            }\n        }\n        if(maxCount == 0)\
    \ {\n            \"\"\n        } else {\n            val sortedWords = words.sortWith((word1,\
    \ word2) => word1.compare(word2) < 0)\n            val firstWord = sortedWords.head\n\
    \            val firstWordCount = unique.count(firstWord)\n            if(firstWordCount\
    \ > maxCount) {\n                maxWord = firstWord\n                maxCount\
    \ = firstWordCount\n            }\n        }\n        return maxWord", "     \
    \   val chars = words.map(_.toCharArray).flatten\n        val counts = chars.groupBy(identity).mapValues(_.size)\n\
    \        val maxCount = counts.max\n        val maxChar = counts.maxBy(_._2)._1\n\
    \        val maxCharIndex = chars.indexOf(maxChar)\n        val maxCharIndex =\
    \ if (maxCharIndex < 0) \"\" else chars(maxCharIndex)\n        val maxWord = words.filter(w\
    \ => w.toCharArray.indexOf(maxCharIndex) == 0)\n        val maxWordIndex = words.indexOf(maxWord(0))\n\
    \        val maxWordIndex = if (maxWordIndex < 0) \"\" else words(maxWordIndex)\n\
    \        if (maxWordIndex == maxWord.size - 1) maxWord(0) else maxWord(maxWordIndex)",
  "        val unique = words.map(x => x.distinct).flatten\n        val maxCount =\
    \ unique.count(_ == unique.max)\n        if(maxCount > 1) unique.min\n       \
    \ else \"\"", "        val unique = mutable.HashSet[String]()\n        val maxCount\
    \ = 0\n        val maxWord = \"\"\n        words.foreach(word => {\n         \
    \   val count = unique.count(_ == word)\n            if (count > maxCount) {\n\
    \                maxCount = count\n                maxWord = word\n          \
    \  }\n            unique += word\n        })\n        maxWord", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         uniqueChars += (char, 1) \n            })\n        })\n        uniqueChars.toList.sortBy(_._2).lastOption.map\
    \ { case (k, v) => k }.getOrElse(\"\")", "        val unique = mutable.HashSet[Char]()\n\
    \        val maxWord = mutable.StringBuilder()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                if (unique.contains(c))\
    \ {\n                    unique.remove(c)\n                } else {\n        \
    \            unique.add(c)\n                }\n            })\n            if\
    \ (unique.size == word.length) {\n                maxWord.append(word)\n     \
    \       }\n        })\n        if (unique.size == words.length) {\n          \
    \  maxWord.toString\n        } else {\n            \"\"\n        }", "       \
    \ val uniqueChars = mutable.Set[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1 \n            maxChars\
    \ += c -> count\n        })\n        val maxKey = maxChars.maxBy(_._2)._1\n  \
    \      words.find(word => word.contains(maxKey))", "        val uniqueChars =\
    \ mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars(c) += 1\n            })\n        })\n    \
    \    val maxKey = uniqueChars.maxBy(_._2)._1\n        words.find(word => word.count(_\
    \ == maxKey) == uniqueChars(maxKey)).getOrElse(\"\")", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            maxChars += c -> uniqueChars.count(_ == c)\n        })\n \
    \       uniqueChars.toList.sortWith(_._2 > _._2).head", "        val chars = mutable.Map[String,\
    \ Int]()\n        words.foreach(word => {\n            val charCount = chars.getOrElse(word,\
    \ 0) + word.count(_ == 'a')\n            chars += (word -> charCount)\n      \
    \  })\n        chars.maxBy(_._2)._1", "        val unique = words.map(x => x.distinct).flatten\n\
    \        val maxUnique = unique.max\n        val maxIndex = unique.indexOf(maxUnique)\n\
    \        if (maxIndex == -1) \"\"\n        else unique.take(maxIndex).mkString(\"\
    \")", "        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1;\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1", "        val\
    \ uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            maxChars(c) = uniqueChars.count(_ == c)\n        })\n    \
    \    uniqueChars.toList.sortWith(_ < _).headOption.getOrElse(\"\")", "       \
    \ val counts = words.map(word => word.distinct.length).distinct\n        val maxCount\
    \ = counts.max\n        val maxWord = words.filter(word => word.distinct.length\
    \ == maxCount).head\n        val maxWordWithCount = words.filter(word => word.distinct.length\
    \ == maxCount).sortBy(word => word.distinct).head\n        val maxWordWithCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCount = words.filter(word => word.distinct.length\
    \ == maxCount).sortBy(word => word.distinct).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWith",
  "        var max = 0\n        var maxWord = \"\"\n        var maxWordCount = 0\n\
    \        words.foreach(word => {\n            val count = word.length\n      \
    \      if (count > max) {\n                max = count\n                maxWord\
    \ = word\n                maxWordCount = 1\n            } else if (count == max)\
    \ {\n                maxWordCount += 1\n            }\n        })\n        if\
    \ (maxWordCount == 1) {\n            return maxWord\n        } else {\n      \
    \      return maxWord\n        }", "        val unique = mutable.HashSet[Char]()\n\
    \        val maxCount = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                unique.add(c)\n        \
    \    })\n        })\n        unique.foreach(c => {\n            val count = unique(c).length\n\
    \            val maxCount = if (maxCount(c) == 0) count else maxCount(c) + 1\n\
    \            maxCount(c) = maxCount\n        })\n        val maxKey = maxCount.maxBy(_._2)._1\n\
    \        words.find(word => word(maxKey.length) == maxKey)", "        val unique\
    \ = words.map(x => x.distinct).flatten\n        val count = unique.map(x => x.size).max\n\
    \        unique.find(x => x.size == count).getOrElse(\"\")", "        val unique\
    \ = mutable.HashSet[Char]()\n        val maxChar = mutable.HashMap[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      unique.add(c)\n                maxChar.getOrElseUpdate(c, unique.size)\
    \ += 1\n            })\n        })\n        val maxCharCount = maxChar.map(_._2).max\n\
    \        val maxCharMap = maxChar.map(_._1)\n        val maxCharList = maxCharMap.sortBy(_._2).reverse\n\
    \        val maxCharListWithMaxCount = maxCharList.takeWhile(_._2 != maxCharCount)\n\
    \        maxCharListWithMaxCount.head._1", "        val unique = words.map(x =>\
    \ x.distinct).flatten.toSet\n        val maxCount = unique.max\n        val maxWord\
    \ = words.filter(x => x.distinct.size == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        if (maxWordIndex == 0) \"\"\n        else\
    \ maxWord", "        val unique = words.map(x => x.distinct).flatten.toSet\n \
    \       val maxCount = unique.max\n        val maxWord = words.filter(x => x.distinct.size\
    \ == maxCount).head\n        val maxWordWithCount = words.filter(x => x.distinct.size\
    \ == maxCount).sortWith(_ < _).head\n        val maxWordWithCountWithMax = words.filter(x\
    \ => x.distinct.size == maxCount).sortWith(_ < _).last\n        val maxWordWithCountWithMaxWithMax\
    \ = words.filter(x => x.distinct.size == maxCount).sortWith(_ < _).last\n    \
    \    val maxWordWithCountWithMaxWithMaxWithMax = words.filter(x => x.distinct.size\
    \ == maxCount).sortWith(_ < _).last\n        val maxWordWithCountWithMaxWithMaxWithMaxWithMax\
    \ = words.filter(x => x.distinct.size == maxCount).sortWith(_ < _).last\n    \
    \    val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(x\
    \ => x.distinct.size == maxCount).sortWith(_ < _).last\n        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = words.filter(x => x.distinct.size == maxCount).sortWith(_ < _).last\n    \
    \    val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(x\
    \ => x.distinct.size == maxCount).sortWith(_ < _).last\n        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = words.filter(x => x.distinct.size == maxCount).sortWith(_ < _).last\n    \
    \    val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = words.filter(x => x.distinct.size == maxCount).sortWith(_ < _).last\n    \
    \    val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = words.filter(x => x.distinct.size == maxCount).sortWith(_ < _).last\n    \
    \    val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = words.filter(x => x.distinct.size == maxCount).sortWith(_ < _).last\n    \
    \    val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax",
  "        val unique = mutable.HashSet[Char]()\n        val maxCount = 0\n      \
    \  val maxWord = \"\"\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                unique.add(c)\n            })\n        })\n        unique.foreach(c\
    \ => {\n            if (unique.count(_ == c) > maxCount) {\n                maxCount\
    \ = unique.count(_ == c)\n                maxWord = c\n            }\n       \
    \ })\n        maxWord", "        val unique = mutable.HashSet[String]()\n    \
    \    val maxCount = 0\n        words.foreach(word => {\n            val count\
    \ = unique.count(_ == word)\n            if (count > maxCount) {\n           \
    \     maxCount = count\n                unique = unique.filter(_ != word)\n  \
    \          }\n            unique.add(word)\n        })\n        if (maxCount ==\
    \ 0) \"\"\n        else unique.maxBy(_.length)", "        val unique = mutable.HashSet[String]()\n\
    \        val maxCount = 0\n        val maxWord = \"\"\n        words.foreach(word\
    \ => {\n            val count = unique.count(_ == word)\n            if (count\
    \ > maxCount) {\n                maxCount = count\n                maxWord = word\n\
    \            }\n            unique += word\n        })\n        maxWord", "  \
    \      var maxCount = 0\n        var maxWord = \"\"\n        for (word <- words)\
    \ {\n            var count = 1\n            for (c <- word) {\n              \
    \  if (word.indexOf(c) > 0) {\n                    count += 1\n              \
    \  }\n            }\n            if (count > maxCount) {\n                maxCount\
    \ = count\n                maxWord = word\n            }\n        }\n        if\
    \ (maxCount == 0) {\n            return \"\"\n        }\n        return maxWord",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        val maxWord = mutable.Map[String, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars += (char\
    \ -> 1)\n            })\n        })\n        uniqueChars.foreach {\n         \
    \   case (k, v) => maxChar += (k -> v)\n        }\n        maxChar.foreach {\n\
    \            case (k, v) => maxWord += (k -> v)\n        }\n        maxWord.foreach\
    \ {\n            case (k, v) => maxWord += (k -> v)\n        }\n        maxWord.maxBy(_._2)",
  "        val unique = mutable.HashSet[Char]()\n        val maxCount = 0\n      \
    \  val maxWord = \"\"\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                unique.add(c)\n            })\n        })\n        unique.foreach(c\
    \ => {\n            if (unique.count(_ == c) > maxCount) {\n                maxCount\
    \ = unique.count(_ == c)\n                maxWord = word\n            }\n    \
    \    })\n        maxWord", "        val unique = mutable.HashSet[String]()\n \
    \       val maxWord = mutable.HashMap[String, Int]()\n        words.foreach(word\
    \ => {\n            val count = unique.count(_ == word)\n            if (count\
    \ > maxWord(word)) {\n                maxWord(word) = count\n            }\n \
    \           unique += word\n        })\n        val maxCount = maxWord.values.max\n\
    \        val maxWords = maxWord.filter(_._2 == maxCount)\n        if (maxWords.isEmpty)\
    \ {\n            \"\"\n        } else {\n            maxWords.keys.headOption.getOrElse(\"\
    \")\n        }", "        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        val maxWord = mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val chars = word.map(c => c.toInt)\n\
    \            val uniqueCharsCount = chars.distinct.length\n            val maxCharsCount\
    \ = uniqueCharsCount.max\n            val maxChar = chars.max\n            val\
    \ maxCharCount = chars.count(_ == maxChar)\n            if (maxCharsCount > maxCharCount)\
    \ {\n                maxWord.append(word)\n                maxChars.put(maxChar,\
    \ maxCharsCount)\n            }\n        }\n        if (maxWord.size == 1) {\n\
    \            return maxWord.head\n        }\n        if (maxWord.size > 1) {\n\
    \            val maxWordCount = maxWord.count(_ == maxWord.max)\n            if\
    \ (maxWordCount == 1) {\n                return maxWord.head\n            }\n\
    \        }\n        return \"\"", "        val unique = mutable.HashSet[Char]()\n\
    \        val maxCount = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                unique.add(c)\n        \
    \        maxCount.getOrElseUpdate(c, 0) + 1\n            })\n        })\n    \
    \    unique.maxBy(maxCount.getOrElse(_, 0))", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars(c) match {\n                    case Some(count) =>\
    \ uniqueChars(c) = uniqueChars(c) + 1;\n                    case None => uniqueChars(c)\
    \ = 1\n                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1",
  "        val unique = words.map(_.length).distinct\n        val maxCount = unique.max\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        if (maxWordIndex < 0) \"\"\n        else words.take(maxWordIndex).mkString(\"\
    \")", "        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars\
    \ = chars.distinct\n        val maxCount = uniqueChars.count(_ == chars.max)\n\
    \        if(maxCount > 1) uniqueChars.min\n        else \"\"", "        val unique\
    \ = mutable.HashSet[String]()\n        val maxCount = 0\n        words.foreach(word\
    \ => {\n            val count = unique.count(_ == word)\n            if (count\
    \ > maxCount) {\n                maxCount = count\n                unique = unique\
    \ + word\n            }\n        })\n        if (unique.size == maxCount) {\n\
    \            unique.head\n        } else {\n            \"\"\n        }", "  \
    \      val unique = words.map(x => x.distinct).flatten\n        val maxCount =\
    \ unique.map(x => x.size).max\n        unique.find(x => x.size == maxCount).head",
  "        val chars = mutable.HashSet[Char]()\n        val unique = mutable.HashSet[String]()\n\
    \        val maxChars = mutable.HashMap[String, Int]()\n        val maxWord =\
    \ mutable.HashMap[String, String]()\n        for (word <- words) {\n         \
    \   val charCount = word.count(_ == 'a')\n            val uniqueCount = word.count(_\
    \ == 'a')\n            if (uniqueCount > maxChars(word)) {\n                maxChars(word)\
    \ = uniqueCount\n                maxWord(word) = word\n            }\n       \
    \     chars ++= word.map(c => c.toChar)\n            unique += word\n        }\n\
    \        if (maxChars.isEmpty) \"\"\n        else maxWord(maxChars.maxBy(_._2))",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars.getOrElse(c, 0) + 1\n            })\n        })\n\
    \        uniqueChars.toList.sortWith((a, b) => b._2 - a._2).head._1", "      \
    \  val unique = words.map(x => x.distinct).flatten\n        val maxCount = unique.map(x\
    \ => x.size).max\n        val maxWord = unique.filter(x => x.size == maxCount).head\n\
    \        val maxWordIndex = unique.indexOf(maxWord)\n        val maxWordString\
    \ = words.filter(x => x.equals(maxWord)).head\n        if (maxWordIndex == words.length\
    \ - 1) {\n            maxWordString\n        } else {\n            findMax(words.drop(maxWordIndex\
    \ + 1))\n        }", "        val unique = mutable.HashSet[Char]()\n        val\
    \ maxWord = mutable.Array[String]()\n        for (word <- words) {\n         \
    \   val uniqueChars = word.distinct\n            val maxChars = uniqueChars.max\n\
    \            if (uniqueChars.size == maxChars) {\n                maxWord += word\n\
    \            } else {\n                uniqueChars.foreach(unique(_))\n      \
    \      }\n        }\n        if (maxWord.size > 0) {\n            val maxWordIndex\
    \ = maxWord.indexOf(0)\n            val maxWord = maxWord(maxWordIndex)\n    \
    \        val maxWordChars = maxWord.distinct\n            if (maxWordChars.size\
    \ == maxChars) {\n                return maxWord\n            } else {\n     \
    \           maxWordChars.foreach(unique(_))\n            }\n        }\n      \
    \  return \"\"", "        val unique = mutable.HashSet[Char]()\n        val maxCount\
    \ = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                unique.add(c)\n            })\n        })\n        unique.foreach(c\
    \ => {\n            val count = unique(c).length\n            val maxKey = maxCount(c)\
    \ match {\n                case None => c\n                case Some(max) => if\
    \ (count > max) c else max\n            }\n            maxCount(c) = Some(count)\n\
    \        })\n        unique.maxBy(c => maxCount(c).getOrElse(0))", "        val\
    \ uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars(c) match {\n                    case Some(count) =>\
    \ uniqueChars(c) = uniqueChars(c) + 1;\n                    case None => uniqueChars(c)\
    \ = 1\n                }\n            })\n        })\n        uniqueChars.toSeq.sortBy(_._2).lastOption.map\
    \ { case (c, count) => c }.getOrElse(\"\")", "        val unique = mutable.HashSet[Char]()\n\
    \        val maxCount = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                unique.add(c)\n        \
    \        maxCount.getOrElseUpdate(c, 0) + 1\n            })\n        })\n    \
    \    unique.maxBy(maxCount.get(_))", "        var maxCount = 0\n        var maxWord\
    \ = \"\"\n        var maxWordIndex = 0\n        var i = 0\n        while(i < words.length)\
    \ {\n            var count = 1\n            var word = words[i]\n            for(j\
    \ <- 0 until word.length) {\n                if(word.charAt(j) == word.charAt(j))\
    \ {\n                    count += 1\n                }\n            }\n      \
    \      if(count > maxCount) {\n                maxCount = count\n            \
    \    maxWord = word\n                maxWordIndex = i\n            }\n       \
    \     i += 1\n        }\n        if(maxCount == 0) {\n            return \"\"\n\
    \        }\n        if(maxCount > 1) {\n            return maxWord\n        }\n\
    \        return words[maxWordIndex]", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars.getOrElse(c,\
    \ 0) + 1\n            })\n        })\n        uniqueChars.toList.sortWith(_._2\
    \ > _._2).head._1", "        val unique = mutable.HashSet[String]()\n        val\
    \ maxWord = mutable.HashSet[String]()\n        words.foreach(word => {\n     \
    \       val uniqueChar = word.distinct\n            uniqueChar.foreach(c => unique.add(c))\n\
    \        })\n        unique.foreach(c => {\n            if (maxWord.contains(c))\
    \ {\n                maxWord.remove(c)\n            } else {\n               \
    \ maxWord.add(c)\n            }\n        })\n        if (maxWord.size == words.size)\
    \ {\n            maxWord.foreach(c => words.indexOf(c))\n        } else {\n  \
    \          \"\"\n        }", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   val count = uniqueChars.count(_ == char)\n            if (count > maxChars(char))\
    \ {\n                maxChars(char) = count\n            }\n        })\n     \
    \   val maxCharsSorted = maxChars.toSeq.sortWith(_._2 < _._2)\n        if (maxCharsSorted.isEmpty)\
    \ {\n            \"\"\n        } else {\n            maxCharsSorted.head._1\n\
    \        }", "        val chars = words.map(_.toCharArray).flatten\n        val\
    \ uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n     \
    \   val maxWord = words.filter(w => w.toCharArray.distinct.length == maxChars)\n\
    \        val maxWordString = maxWord.mkString(\"\")\n        val maxWordIndex\
    \ = words.indexOf(maxWordString)\n        val maxWordString = words(maxWordIndex)\n\
    \        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString\
    \ = words(maxWordIndex)\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words(maxWordIndex)\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words(maxWordIndex)\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words(maxWordIndex)\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words(maxWordIndex)\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words(maxWordIndex)\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words(maxWordIndex)\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words(maxWordIndex)\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words(maxWordIndex)\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words(maxWordIndex)\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words(maxWordIndex)\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words(maxWordIndex)\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words(maxWordIndex)\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words(maxWordIndex)\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words(maxWordIndex)\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words(maxWordIndex)\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words(maxWordIndex)\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words(maxWordIndex)\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words(maxWordIndex)\n        val maxWordIndex = words.indexOf(",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1 \n            maxChars\
    \ += c -> count\n        })\n        val maxCharsSorted = maxChars.toSeq.sortBy(_._2).reverse\n\
    \        if (maxCharsSorted.size == 1) {\n            maxCharsSorted.head._1\n\
    \        } else {\n            maxCharsSorted.head._1\n        }", "        val\
    \ unique = words.foldLeft(Map[Char, Int]())((map, word) => {\n            val\
    \ chars = word.map(c => c.toInt)\n            val count = chars.foldLeft(0)((count,\
    \ c) => count + c)\n            map + (chars.maxBy(_ == count) -> (count + 1))\n\
    \        })\n        val maxKey = unique.maxBy(_._2)._1\n        val maxValue\
    \ = unique.maxBy(_._2)._2\n        words.find(word => word.contains(maxKey)).getOrElse(\"\
    \")", "        val counts = words.foldLeft(Map[Char, Int]()){\n            case\
    \ (m, w) => m.updated(w.charAt(0), m.getOrElse(w.charAt(0), 0) + 1)\n        }\n\
    \        val maxCount = counts.maxBy(_._2)._1\n        val maxWord = counts.filter(_._2\
    \ == maxCount).keys.head\n        val maxWordWithCount = words.filter(_ == maxWord).head\n\
    \        if (maxWordWithCount.length == words.length)\n            maxWordWithCount\n\
    \        else\n            \"\"", "        val unique = mutable.HashSet[Char]()\n\
    \        val maxCount = 0\n        val maxWord = \"\"\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                unique.add(c)\n     \
    \       })\n        })\n        unique.foreach(c => {\n            if (unique.count(_\
    \ == c) > maxCount) {\n                maxCount = unique.count(_ == c)\n     \
    \           maxWord = word\n            }\n        })\n        maxWord", "   \
    \     val uniqueChars = words.map(x => x.distinct).flatten.toSet\n        val\
    \ maxChars = uniqueChars.max\n        val maxWord = words.filter(x => x.distinct.size\
    \ == maxChars)\n        if (maxWord.isEmpty) \"\"\n        else maxWord.head",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += (c -> 1)\n                maxChar = maxChar.updated(c,\
    \ uniqueChars(c))\n            })\n        })\n        val maxChars = maxChar.filter(_._2\
    \ > uniqueChars(_))\n        if (maxChars.isEmpty) \"\"\n        else maxChars.min._1",
  "        val unique = words.map(x => x.toSet).reduceLeft(_ ++ _)\n        val maxUnique\
    \ = unique.max\n        val maxIndex = unique.indexWhere(x => x == maxUnique)\n\
    \        words(maxIndex)", "        val counts = words.map(word => word.distinct.length).distinct\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.distinct.length == maxCount).head\n        val maxWordWithCount = words.filter(word\
    \ => word.distinct.length == maxCount).sortBy(word => word.distinct).head\n  \
    \      val maxWordWithCountWithMaxCount = words.filter(word => word.distinct.length\
    \ == maxCount).sortBy(word => word.distinct).last\n        val maxWordWithCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word\
    \ => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n  \
    \      val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount =\
    \ words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWith",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += (c -> 1)\n            })\n        })\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                val count = uniqueChars(c)\n\
    \                if (count > maxChars(c)) {\n                    maxChars(c) =\
    \ count\n                }\n            })\n        })\n        val maxKey = maxChars.keys.max\n\
    \        val maxValue = maxChars(maxKey)\n        val maxWord = words.find(word\
    \ => word.contains(maxKey))\n        if (maxWord == null) {\n            return\
    \ \"\"\n        }\n        val maxIndex = words.indexOf(maxWord)\n        if (maxIndex\
    \ == words.size) {\n            return \"\"\n        }\n        val maxWord2 =\
    \ words.take(maxIndex).mkString(\"\")\n        if (maxWord2.length == maxWord.length)\
    \ {\n            return maxWord2\n        }\n        return findMax(words.drop(maxIndex))",
  "        val unique = mutable.HashSet[String]()\n        val maxWord = mutable.HashMap[String,\
    \ Int]()\n        words.foreach(word => {\n            val count = unique.count(_\
    \ == word)\n            if (count > maxWord(word)) {\n                maxWord(word)\
    \ = count\n            }\n            unique += word\n        })\n        val\
    \ maxWordWithCount = maxWord.maxBy(_._2)\n        if (maxWordWithCount._2 > 1)\
    \ {\n            maxWordWithCount._1\n        } else {\n            \"\"\n   \
    \     }", "        val unique = words.map(_.length).distinct\n        val max\
    \ = unique.max\n        val result = words.filter(w => w.length == max)\n    \
    \    val sorted = result.sortWith(_.length > _.length)\n        sorted.head",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n                maxChars += c -> 0\n       \
    \     })\n        })\n        uniqueChars.toList.sortWith((a, b) => maxChars(b)\
    \ - maxChars(a)).headOption.getOrElse(\"\")", "        val unique = words.map(x\
    \ => x.distinct).flatten\n        val maxCount = unique.count(x => x.size < x.size)\n\
    \        val maxWord = unique.find(x => x.size == maxCount).getOrElse(\"\")\n\
    \        val maxIndex = unique.indexOf(maxWord)\n        val maxWord2 = unique.take(maxIndex).mkString(\"\
    \")\n        val maxWord3 = unique.drop(maxIndex).mkString(\"\")\n        val\
    \ maxWord4 = unique.takeWhile(x => x.size < maxCount).mkString(\"\")\n       \
    \ val maxWord5 = unique.dropWhile(x => x.size < maxCount).mkString(\"\")\n   \
    \     val maxWord6 = unique.take(maxIndex).mkString(\"\")\n        val maxWord7\
    \ = unique.drop(maxIndex).mkString(\"\")\n        val maxWord8 = unique.takeWhile(x\
    \ => x.size < maxCount).mkString(\"\")\n        val maxWord9 = unique.dropWhile(x\
    \ => x.size < maxCount).mkString(\"\")\n        val maxWord10 = unique.take(maxIndex).mkString(\"\
    \")\n        val maxWord11 = unique.drop(maxIndex).mkString(\"\")\n        val\
    \ maxWord12 = unique.takeWhile(x => x.size < maxCount).mkString(\"\")\n      \
    \  val maxWord13 = unique.dropWhile(x => x.size < maxCount).mkString(\"\")\n \
    \       val maxWord14 = unique.take(maxIndex).mkString(\"\")\n        val maxWord15\
    \ = unique.drop(maxIndex).mkString(\"\")\n        val maxWord16 = unique.takeWhile(x\
    \ => x.size < maxCount).mkString(\"\")\n        val maxWord17 = unique.dropWhile(x\
    \ => x.size < maxCount).mkString(\"\")\n        val maxWord18 = unique.take(maxIndex).mkString(\"\
    \")\n        val maxWord19 = unique.drop(maxIndex).mkString(\"\")\n        val\
    \ maxWord20 = unique.takeWhile(x => x.size < maxCount).mkString(\"\")\n      \
    \  val maxWord21 = unique.dropWhile(x => x.size < maxCount).mkString(\"\")\n \
    \       val maxWord22 = unique.take(maxIndex).mkString(\"\")\n        val maxWord23\
    \ = unique.drop(maxIndex).mkString(\"\")\n        val maxWord24 = unique.takeWhile(x\
    \ => x.size < maxCount).mkString(\"\")\n        val maxWord25 = unique", "   \
    \     val chars = words.map(_.toCharArray).flatten\n        val unique = chars.distinct\n\
    \        val max = unique.max\n        val maxIndex = unique.indexOf(max)\n  \
    \      val maxWord = words(maxIndex)\n        if (maxWord.isEmpty) \"\" else maxWord",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = uniqueChars.count(_ == c)\n            if (count\
    \ > maxChars(c)) {\n                maxChars(c) = count\n            }\n     \
    \   })\n        val maxChar = maxChars.maxBy(_._2)._1\n        words.find(word\
    \ => word.contains(maxChar))", "        val counts = words.map(word => word.distinct).groupBy(identity).mapValues(_.size)\n\
    \        val maxCount = counts.max\n        val maxWord = counts.find(_._2 ==\
    \ maxCount).get._1\n        val maxWordIndex = words.indexOf(maxWord)\n      \
    \  if (maxWordIndex < 0) \"\"\n        else words(maxWordIndex)", "        val\
    \ unique = mutable.HashSet[Char]()\n        val maxCount = 0\n        val maxWord\
    \ = \"\"\n        for (word <- words) {\n            val uniqueChars = word.distinct\n\
    \            uniqueChars.foreach { c =>\n                if (unique(c) == 1) {\n\
    \                    unique(c) += 1\n                } else {\n              \
    \      unique(c) -= 1\n                }\n            }\n            if (uniqueChars.size\
    \ >= maxCount) {\n                maxCount = uniqueChars.size\n              \
    \  maxWord = word\n            }\n        }\n        maxWord", "        val unique\
    \ = words.map(x => x.distinct).flatten\n        val max = unique.max\n       \
    \ val index = unique.indexOf(max)\n        if (index == 0) \"\"\n        else\
    \ words(index)", "        val unique = words.map(_.length).distinct\n        val\
    \ maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).sortBy(_.length).head\n\
    \        val maxWordLength = maxWord.length\n        val maxWordWithMaxLength\
    \ = words.filter(_.length == maxWordLength).sortBy(_.length).head\n        if\
    \ (maxWordWithMaxLength.length > maxWord.length) maxWordWithMaxLength else maxWord",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1;\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1", "        val\
    \ unique = mutable.HashSet[String]()\n        val maxWord = mutable.StringBuilder()\n\
    \        words.foreach(word => {\n            val uniqueChars = word.distinct\n\
    \            if (uniqueChars.size == unique.size) {\n                unique.clear()\n\
    \                unique.add(word)\n            } else {\n                unique.clear()\n\
    \                unique.addAll(uniqueChars)\n            }\n        })\n     \
    \   unique.foreach(word => {\n            maxWord.append(word)\n        })\n \
    \       maxWord.toString", "        var maxCount = 0\n        var maxWord = \"\
    \"\n        var maxWordIndex = 0\n        var maxWordCount = 0\n        words.foreach(word\
    \ => {\n            var wordCount = word.distinct().length\n            if(wordCount\
    \ > maxCount) {\n                maxCount = wordCount\n                maxWord\
    \ = word\n                maxWordIndex = words.indexOf(word)\n               \
    \ maxWordCount = wordCount\n            }\n        })\n        if(maxCount > maxWordCount)\
    \ {\n            words.remove(maxWordIndex)\n        }\n        return maxWord",
  "        val unique = words.map(x => x.distinct).flatten\n        val maxCount =\
    \ unique.count(_ == unique.max)\n        val maxWord = unique.take(maxCount)\n\
    \        val maxWordString = maxWord.mkString(\"\")\n        val maxWordIndex\
    \ = words.indexOf(maxWordString)\n        if (maxWordIndex == -1)\n          \
    \  \"\"\n        else\n            words(maxWordIndex)", "        val uniqueChars\
    \ = words.foldLeft(Map[Char, Int]()){\n            case (m, word) =>\n       \
    \         val chars = word.map(c => c.toInt)\n                val count = chars.foldLeft(0)(_\
    \ + _)\n                m + (chars.maxBy(_ == _) -> (count))\n        }\n    \
    \    uniqueChars.maxBy(_._2)._1", "        val unique = mutable.HashSet[String]()\n\
    \        val maxCount = 0\n        words.foreach(word => {\n            val count\
    \ = unique.count(_ == word)\n            if (count > maxCount) {\n           \
    \     maxCount = count\n            }\n            unique += word\n        })\n\
    \        if (maxCount == 0) {\n            \"\"\n        } else {\n          \
    \  unique.minBy(_.length)\n        }", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \              maxChars(c) = maxChars.getOrElse(c, 0) + 1\n            })\n  \
    \      })\n        val maxCharsCount = maxChars.values.max\n        val maxCharsKey\
    \ = maxChars.keys.max\n        val maxCharsValue = maxChars(maxCharsKey)\n   \
    \     val maxCharsKeyString = maxCharsKey.toString\n        val maxCharsValueString\
    \ = maxCharsValue.toString\n        if (maxCharsValue == 1) {\n            words.find(word\
    \ => word.contains(maxCharsKeyString))\n        } else {\n            words.find(word\
    \ => word.contains(maxCharsKeyString) && word.contains(maxCharsValueString))\n\
    \        }", "        val unique = mutable.HashSet[String]()\n        val maxWord\
    \ = mutable.HashSet[String]()\n        val maxCount = mutable.HashMap[String,\
    \ Int]()\n        for (word <- words) {\n            val count = unique.size\n\
    \            val newCount = count + 1\n            unique.add(word)\n        \
    \    maxCount.put(word, newCount)\n            if (newCount > maxCount.get(word))\
    \ {\n                maxCount.put(word, newCount)\n                maxWord.put(word,\
    \ word)\n            }\n        }\n        if (maxCount.size == 1) {\n       \
    \     maxWord.keys.head\n        } else {\n            maxWord.keys.sortWith(_.compareTo(_)\
    \ < 0).head\n        }", "        val unique = mutable.HashSet[String]()\n   \
    \     val maxCount = 0\n        val maxWord = \"\"\n        words.foreach(word\
    \ => {\n            val count = unique.count(_ == word)\n            if (count\
    \ > maxCount) {\n                maxCount = count\n                maxWord = word\n\
    \            }\n            unique += word\n        })\n        maxWord", "  \
    \      val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += char\n            })\n        })\n        uniqueChars.toList.sortWith(_\
    \ < _).take(1).foreach(char => {\n            maxChars += char -> uniqueChars.count(char)\n\
    \        })\n        maxChars.toList.sortWith(_._2 < _._2).head._1", "       \
    \ val unique = mutable.HashSet[Char]()\n        val maxWord = mutable.HashMap[String,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               unique.add(c)\n            })\n            val count = unique.size\n\
    \            if (count > maxWord(word)) {\n                maxWord(word) = count\n\
    \            }\n        })\n        val maxCount = maxWord.values.max\n      \
    \  val maxWords = maxWord.filter(_._2 == maxCount).map(_._1)\n        if (maxWords.size\
    \ == 1) {\n            maxWords.head\n        } else {\n            \"\"\n   \
    \     }", "        val unique = words.map(x => x.distinct).flatten\n        val\
    \ count = unique.map(x => x.length).max\n        unique.find(x => x.length ==\
    \ count).getOrElse(\"\")", "        val unique = words.map(x => x.toSet).reduceLeft(_\
    \ ++ _)\n        val maxKey = unique.maxBy(x => x.length)\n        val maxValue\
    \ = unique.find(x => x.contains(maxKey))\n        val maxIndex = unique.indexOf(maxValue)\n\
    \        val maxWord = unique.take(maxIndex).mkString(\"\")\n        val maxWordIndex\
    \ = unique.indexOf(maxWord)\n        val maxWordLength = unique.map(x => x.length).max\n\
    \        val maxWordLength = unique.map(x => x.length).max\n        val maxWordLength\
    \ = unique.map(x => x.length).max\n        val maxWordLength = unique.map(x =>\
    \ x.length).max\n        val maxWordLength = unique.map(x => x.length).max\n \
    \       val maxWordLength = unique.map(x => x.length).max\n        val maxWordLength\
    \ = unique.map(x => x.length).max\n        val maxWordLength = unique.map(x =>\
    \ x.length).max\n        val maxWordLength = unique.map(x => x.length).max\n \
    \       val maxWordLength = unique.map(x => x.length).max\n        val maxWordLength\
    \ = unique.map(x => x.length).max\n        val maxWordLength = unique.map(x =>\
    \ x.length).max\n        val maxWordLength = unique.map(x => x.length).max\n \
    \       val maxWordLength = unique.map(x => x.length).max\n        val maxWordLength\
    \ = unique.map(x => x.length).max\n        val maxWordLength = unique.map(x =>\
    \ x.length).max\n        val maxWordLength = unique.map(x => x.length).max\n \
    \       val maxWordLength = unique.map(x => x.length).max\n        val maxWordLength\
    \ = unique.map(x => x.length).max\n        val maxWordLength = unique.map(x =>\
    \ x.length).max\n        val maxWordLength = unique.map(x => x.length).max\n \
    \       val maxWordLength = unique.map(x => x.length).max\n        val maxWordLength\
    \ = unique.map(x => x.length).max\n        val maxWordLength = unique.map(x =>\
    \ x.length).max\n        val maxWordLength = unique.map(x => x.length).max\n \
    \       val maxWordLength = unique.map(x => x.length).max\n        val maxWordLength\
    \ = unique.map(x => x.length).max\n        val maxWordLength = unique.map(x =>\
    \ x.length).max\n        val maxWordLength = unique.map(x => x.length).max\n \
    \       val maxWordLength = unique.map(x => x.length).max\n        val maxWordLength\
    \ = ", "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar\
    \ = mutable.Map[Char, Int]()\n        val maxWord = mutable.Map[String, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars(c) match {\n                    case Some(count) =>\n     \
    \                   uniqueChars(c) += 1\n                    case None =>\n  \
    \                      uniqueChars(c) = 1\n                }\n            })\n\
    \        })\n        uniqueChars.toSeq.sortBy(_._2).reverse.foreach(c => {\n \
    \           val count = uniqueChars(c)\n            if (count > maxChar.getOrElse(c,\
    \ 0))\n                maxChar(c) = (count, c)\n        })\n        uniqueChars.toSeq.sortBy(_._1).reverse.foreach(c\
    \ => {\n            val count = uniqueChars(c)\n            if (count > maxWord.getOrElse(c,\
    \ 0))\n                maxWord(c) = (count, c)\n        })\n        maxChar.toSeq.sortBy(_._1).reverse.head._2._1",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n                maxChars += c -> 0\n       \
    \     })\n        })\n        uniqueChars.toList.sortWith(_ < _).headOption.getOrElse(\"\
    \")", "        val chars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               chars += c\n                maxChars(c) = maxChars.getOrElse(c,\
    \ 0) + 1\n            })\n        })\n        chars.toList.sortWith((a, b) =>\
    \ maxChars(b) - maxChars(a))(0)", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsFirstInLexicographicalOrder\
    \ = maxWordWithMaxChars.sortBy(_.toString.length)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderFirst\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderFirst.head\n        val maxWordWithMaxCharsFirstInLexicographicalOrderFirstInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderFirstInLexicographicalOrder.head\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderFirstInLexicographicalOrderInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderFirstInLexicographicalOrderInLexicographicalOrder.head\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder.head\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder.head\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder.head\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstIn", "        val uniqueChars = words.map(x => x.distinct).reduceLeft(_\
    \ ++ _)\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(x\
    \ => x.distinct.length == maxChars)\n        val maxWordWithMaxChars = words.filter(x\
    \ => x.distinct.length == maxChars && x.distinct.toSet.size == maxChars)\n   \
    \     val maxWordWithMaxCharsFirst = words.filter(x => x.distinct.length == maxChars\
    \ && x.distinct.toSet.size == maxChars && x.toSet.head == maxChars)\n        val\
    \ maxWordWithMaxCharsFirstWithMaxChars = words.filter(x => x.distinct.length ==\
    \ maxChars && x.distinct.toSet.size == maxChars && x.toSet.head == maxChars &&\
    \ x.toSet.head == maxChars)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.filter(x => x.distinct.length == maxChars && x.distinct.toSet.size ==\
    \ maxChars && x.toSet.head == maxChars && x.toSet.head == maxChars && x.toSet.head\
    \ == maxChars)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(x => x.distinct.length == maxChars && x.distinct.toSet.size ==\
    \ maxChars && x.toSet.head == maxChars && x.toSet.head == maxChars && x.toSet.head\
    \ == maxChars && x.toSet.head == maxChars)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.filter(x => x.distinct.length == maxChars && x.distinct.toSet.size ==\
    \ maxChars && x.toSet.head == maxChars && x.toSet.head == maxChars && x.toSet.head\
    \ == maxChars && x.toSet.head == maxChars && x.toSet.head == maxChars)\n     \
    \   val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(x => x.distinct.length == maxChars && x.distinct.toSet.size ==\
    \ maxChars && x.toSet.head == maxChars && x.toSet.head == maxChars && x.toSet.head\
    \ == maxChars && x.toSet.head == maxChars && x.toSet.head == maxChars && x.toSet.head\
    \ == maxChars)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.filter(x => x.distinct.length == ", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += (c -> 1)\n            })\n        })\n        val\
    \ maxKey = uniqueChars.maxBy(_._2)._1\n        words.find(word => word.count(_\
    \ == maxKey) == uniqueChars(maxKey)).getOrElse(\"\")", "        val unique = words.map(x\
    \ => x.distinct).flatten.toSet\n        val maxCount = unique.max\n        val\
    \ maxWord = words.filter(x => x.distinct.size == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        if (maxWordIndex == 0) \"\"\n        else\
    \ maxWord", "        val unique = mutable.Map[Char, Int]()\n        val maxWord\
    \ = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                unique.getOrElse(c, 0) + 1\n            })\n        })\n\
    \        unique.foreach(c => {\n            val count = unique.get(c)\n      \
    \      if (count > maxWord.getOrElse(c, 0))\n                maxWord.put(c, count)\n\
    \        })\n        maxWord.keys.toList.sortWith(_ < _).head", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char\
    \ => {\n            val count = maxChars.getOrElse(char, 0)\n            maxChars\
    \ += char -> count + 1\n        })\n        val maxChar = maxChars.maxBy(_._2)\n\
    \        if (maxChar._2 == 0) \"\"\n        else maxChar._1", "        val unique\
    \ = mutable.HashSet[Char]()\n        val maxCount = 0\n        val maxWord = \"\
    \"\n        words.foreach(word => {\n            word.foreach(c => {\n       \
    \         if (unique.contains(c)) {\n                    unique(c)\n         \
    \       } else {\n                    unique.add(c)\n                }\n     \
    \       })\n        })\n        unique.foreach(c => {\n            if (unique.count(_\
    \ == c) > maxCount) {\n                maxCount = unique.count(_ == c)\n     \
    \           maxWord = c\n            }\n        })\n        maxWord", "      \
    \  val uniqueChars = words.map(x => x.distinct).reduceLeft(_ ++ _)\n        val\
    \ maxChars = uniqueChars.max\n        val maxWord = words.filter(x => x.distinct.size\
    \ == maxChars)\n        val maxWordString = maxWord.mkString(\"\")\n        val\
    \ maxWordIndex = words.indexOf(maxWordString)\n        val maxWordIndex = if (maxWordIndex\
    \ < 0) \"\" else maxWordIndex.toString\n        val maxWordString = if (maxWordIndex\
    \ == \"\") \"\" else maxWordString.substring(0,maxWordIndex+1) + maxWordString.substring(maxWordIndex+1)\n\
    \        val maxWordString = if (maxWordString.length == 0) \"\" else maxWordString\n\
    \        val maxWordString = if (maxWordString.length == 0) \"\" else maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = if (maxWordString.length == 0) \"\" else maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = if (maxWordString.length == 0) \"\" else maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = if (maxWordString.length == 0) \"\" else maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = if (maxWordString.length == 0) \"\" else maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = if (maxWordString.length == 0) \"\" else maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = if (maxWordString.length == 0) \"\" else maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = if (maxWordString.length == 0) \"\" else maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = if (maxWordString.length == 0) \"\" else maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = if (maxWordString.length == 0) \"\" else maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = if (maxWordString.length == 0) \"\" else maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = if (maxWordString.length == 0) \"\" else maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = if (maxWordString.length == 0) \"\" else maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = if (maxWordString.length == 0) \"\" else maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = if (maxWordString.length == 0) \"\" else maxWordString.substring(0,maxWordString.",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars\
    \ = maxChars + (c -> count)\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith(_.value\
    \ < _.value)\n        val maxCharsSortedFirst = maxCharsSorted.head\n        val\
    \ maxCharsSortedFirstKey = maxCharsSorted.keySet().toSeq.find(_.value == maxCharsSortedFirst.value).getOrElse(\"\
    \")\n        val maxCharsSortedFirstValue = maxCharsSorted.get(maxCharsSortedFirstKey)\n\
    \        val maxCharsSortedFirstKeyValue = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKey + maxCharsSortedFirstValue.toString\n\
    \        val maxCharsSortedFirstKeyValueStringLength = maxCharsSortedFirstKeyValueString.length\n\
    \        val maxCharsSortedFirstKeyValueStringLength = maxCharsSortedFirstKeyValueStringLength\
    \ - maxCharsSortedFirstKeyValueStringLength\n        val maxCharsSortedFirstKeyValueStringLength\
    \ = maxCharsSortedFirstKeyValueStringLength + maxCharsSortedFirstKeyValueStringLength\n\
    \        val maxCharsSortedFirstKeyValueStringLength = maxCharsSortedFirstKeyValueStringLength\
    \ + maxCharsSortedFirstKeyValueStringLength\n        val maxCharsSortedFirstKeyValueStringLength\
    \ = maxCharsSortedFirstKeyValueStringLength + maxCharsSortedFirstKeyValueStringLength\n\
    \        val maxCharsSortedFirstKeyValueStringLength = maxCharsSortedFirstKeyValueStringLength\
    \ + maxCharsSortedFirstKeyValueStringLength\n        val maxCharsSortedFirstKeyValueStringLength\
    \ = maxCharsSortedFirstKeyValueStringLength + maxCharsSortedFirstKeyValueStringLength\n\
    \        val maxCharsSortedFirstKeyValueStringLength = maxCharsSortedFirstKeyValueStringLength\
    \ + maxCharsSortedFirstKeyValueStringLength\n        val maxCharsSortedFirstKeyValueStringLength\
    \ = maxCharsSortedFirstKeyValueStringLength + maxCharsSortedFirstKeyValueStringLength\n\
    \        val maxCharsSortedFirstKeyValueStringLength = maxCharsSortedFirstKeyValue",
  "        val unique = mutable.HashSet[String]()\n        val maxWord = mutable.ListBuffer[String]()\n\
    \        words.foreach(word => {\n            val uniqueChar = word.distinct\n\
    \            uniqueChar.foreach(c => {\n                unique.add(c)\n      \
    \      })\n            unique.foreach(c => {\n                if (unique.count(_\
    \ == c) > unique.count(_ == c)) {\n                    unique.remove(c)\n    \
    \            }\n            })\n            maxWord.append(word)\n        })\n\
    \        if (unique.size == 1) {\n            maxWord.head\n        } else {\n\
    \            maxWord.last\n        }", "        val unique = words.map(w => w.length).distinct\n\
    \        val maxUnique = unique.max\n        val maxWord = words.filter(w => w.length\
    \ == maxUnique).sortBy(w => w.head).head\n        val maxWordLength = maxWord.length\n\
    \        val maxWordWithMaxLength = words.filter(w => w.length == maxWordLength).sortBy(w\
    \ => w.head).head\n        val maxWordWithMaxLengthLength = maxWordWithMaxLength.length\n\
    \        val maxWordWithMaxLengthLengthLength = maxWordWithMaxLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLength = maxWordWithMaxLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWith", "        var maxCount = 0\n        var maxWord = \"\
    \"\n        var maxWordCount = 0\n        for (word <- words) {\n            var\
    \ count = word.distinct().length\n            if (count > maxCount) {\n      \
    \          maxCount = count\n                maxWord = word\n                maxWordCount\
    \ = count\n            }\n        }\n        if (maxWordCount == maxCount) {\n\
    \            return maxWord\n        }\n        return \"\"", "        val chars\
    \ = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n\
    \        val maxUniqueChars = uniqueChars.max\n        val maxChars = chars.filter(c\
    \ => c == maxUniqueChars)\n        val maxWord = words.filter(w => w.toCharArray.forall(c\
    \ => c == maxUniqueChars)).head\n        val maxCharsWord = words.filter(w =>\
    \ w.toCharArray.forall(c => c == maxChars)).head\n        if(maxUniqueChars ==\
    \ maxChars) maxWord\n        else maxCharsWord", "        val unique = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               unique.getOrElseUpdate(c, 0) += 1\n            })\n        })\n\
    \        val maxKey = unique.maxBy(_._2)._1\n        words.find(word => word(maxKey)\
    \ == unique.maxBy(_._2)._1)", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        if (maxWordWithMaxCharsIndex <\
    \ words.length - 1) {\n            findMax(words.drop(maxWordWithMaxCharsIndex\
    \ + 1))\n        } else {\n            maxWordWithMaxChars\n        }", "    \
    \    val unique = mutable.Map[Char, Int]()\n        words.foreach(word => {\n\
    \            word.foreach(c => {\n                unique.getOrElseUpdate(c, 0)\
    \ += 1\n            })\n        })\n        val maxKey = unique.maxBy(_._2)._1\n\
    \        words.find(word => word.toString.contains(maxKey))", "        val unique\
    \ = mutable.HashSet[String]()\n        val maxWord = mutable.StringBuilder()\n\
    \        words.foreach(word => {\n            val uniqueChar = word.distinct\n\
    \            uniqueChar.foreach(c => unique.add(c))\n            val uniqueCount\
    \ = unique.count(_ == word)\n            if (uniqueCount > maxWord.length)\n \
    \               maxWord.clear()\n            if (uniqueCount > 0)\n          \
    \      maxWord.append(word)\n        })\n        if (maxWord.length == 0)\n  \
    \          \"\"\n        else\n            maxWord.toString", "        val unique\
    \ = mutable.HashSet[Char]()\n        val maxCount = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      if (!unique.contains(c)) {\n                    unique.add(c)\n       \
    \             maxCount.getOrElseUpdate(c, 0) + 1\n                }\n        \
    \    })\n        })\n        val maxKey = maxCount.keys.max\n        val maxValue\
    \ = maxCount.values.max\n        val maxWord = words.find(word => word.contains(maxKey))\n\
    \        if (maxWord.isEmpty) \"\"\n        else maxWord.find(word => word.contains(maxValue))",
  "        val unique = mutable.HashSet[Char]()\n        val maxCount = 0\n      \
    \  val maxWord = \"\"\n        for (word <- words) {\n            val chars =\
    \ word.map(c => c.toInt)\n            val count = chars.foldLeft(0)(_ + _)\n \
    \           if (count > maxCount) {\n                maxCount = count\n      \
    \          maxWord = word\n            }\n            unique += chars.head\n \
    \       }\n        if (unique.size == maxCount) {\n            maxWord\n     \
    \   } else {\n            \"\"\n        }", "        val counts = words.map(word\
    \ => word.distinct).groupBy(identity).mapValues(_.size)\n        val maxCount\
    \ = counts.max\n        val maxWord = counts.find(_._2 == maxCount).get._1\n \
    \       val maxWordIndex = words.indexOf(maxWord)\n        if (maxWordIndex ==\
    \ -1) {\n            \"\"\n        } else {\n            words.take(maxWordIndex).mkString(\"\
    \ \")\n        }", "        val unique = words.map(x => x.distinct).flatten\n\
    \        val max = unique.max\n        val index = unique.indexOf(max)\n     \
    \   if (index == -1) \"\"\n        else unique.take(index).mkString(\"\")", " \
    \       val uniqueChars = mutable.HashSet[Char]()\n        var maxChar = \"\"\n\
    \        var maxCount = 0\n        for (word <- words) {\n            val chars\
    \ = word.map(c => c.toChar)\n            uniqueChars ++= chars\n            val\
    \ count = chars.count(_ == maxChar)\n            if (count > maxCount) {\n   \
    \             maxChar = chars.max\n                maxCount = count\n        \
    \    }\n        }\n        if (uniqueChars.size == 0) \"\"\n        else maxChar",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        val maxWord = mutable.Map[String, Int]()\n        for (word\
    \ <- words) {\n            val chars = word.map(c => c.toInt)\n            val\
    \ uniqueCharsCount = chars.foldLeft(0)(_ + _)\n            val maxCharCount =\
    \ chars.foldLeft(0)(_ + _)\n            if (uniqueCharsCount > maxCharCount) {\n\
    \                maxChar.clear()\n                maxChar.putAll(chars)\n    \
    \            maxWord.clear()\n                maxWord.put(word, uniqueCharsCount)\n\
    \            } else if (uniqueCharsCount == maxCharCount) {\n                maxChar.putAll(chars)\n\
    \                maxWord.put(word, uniqueCharsCount)\n            }\n        }\n\
    \        val maxCharCount = maxChar.foldLeft(0)(_ + _)\n        if (maxCharCount\
    \ > 0) {\n            val maxChar = maxChar.maxBy(_._1)\n            val maxWord\
    \ = maxWord.maxBy(_._2)\n            if (maxWord._2 > maxCharCount) {\n      \
    \          return \"\"\n            } else if (maxWord._2 == maxCharCount) {\n\
    \                return maxWord._1\n            } else {\n                return\
    \ \"\"\n            }\n        } else {\n            return \"\"\n        }",
  "        val unique = mutable.HashSet[Char]()\n        val maxCount = 0\n      \
    \  val maxWord = \"\"\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                unique.add(c)\n            })\n        })\n        unique.foreach(c\
    \ => {\n            if (unique.count(_ == c) > maxCount) {\n                maxCount\
    \ = unique.count(_ == c)\n                maxWord = word\n            }\n    \
    \    })\n        maxWord", "        val unique = words.map(x => x.toSet).flatten.toList\n\
    \        val maxCount = unique.max\n        val maxWord = unique.find(x => x ==\
    \ maxCount)\n        if (maxCount == 0) \"\"\n        else maxWord", "       \
    \ val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        val maxWord = mutable.Map[String, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += (c, 1)\n\
    \            })\n        })\n        uniqueChars.toList.sortWith(_._2 > _._2).head._1",
  "        val unique = words.foldLeft(Map[Char, Int]()){\n            case (acc,\
    \ word) => acc + (word -> (acc(word) + 1))\n        }\n        val maxKey = unique.maxBy(_._2)._1\n\
    \        unique.find(_._2 == maxKey).map(_._1)", "        val unique = words.map(x\
    \ => x.distinct).flatten.toSet\n        val maxCount = unique.max\n        val\
    \ maxWord = words.filter(x => x.distinct.size == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        if (maxWordIndex == 0) \"\"\n        else\
    \ maxWord", "        val unique = mutable.HashSet[Char]()\n        val maxChar\
    \ = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                unique.add(c)\n                maxChar.getOrElseUpdate(c,\
    \ unique.size) += 1\n            })\n        })\n        val maxCharCount = maxChar.mapValues(_.toInt).max\n\
    \        val maxCharCountIndex = maxChar.mapValues(_.toInt).indexWhere(_ == maxCharCount)\n\
    \        val maxCharCountKey = maxChar.mapValues(_.toInt).keys.toList.apply(maxCharCountIndex)\n\
    \        val maxCharCountValue = maxChar.mapValues(_.toInt).values.toList.apply(maxCharCountIndex)\n\
    \        val maxCharCountKeyIndex = maxChar.mapValues(_.toInt).indexWhere(_ ==\
    \ maxCharCountKey)\n        val maxCharCountKeyValue = maxChar.mapValues(_.toInt).keys.toList.apply(maxCharCountKeyIndex)\n\
    \        val maxCharCountValueIndex = maxChar.mapValues(_.toInt).indexWhere(_\
    \ == maxCharCountValue)\n        val maxCharCountValueKey = maxChar.mapValues(_.toInt).keys.toList.apply(maxCharCountValueIndex)\n\
    \        val maxCharCountValueValue = maxChar.mapValues(_.toInt).values.toList.apply(maxCharCountValueIndex)\n\
    \        val maxCharCountKeyIndex = maxChar.mapValues(_.toInt).indexWhere(_ ==\
    \ maxCharCountKey)\n        val maxCharCountKeyValue = maxChar.mapValues(_.toInt).keys.toList.apply(maxCharCountKeyIndex)\n\
    \        val maxCharCountValueIndex = maxChar.mapValues(_.toInt).indexWhere(_\
    \ == maxCharCountValueKey)\n        val maxCharCountValueKey = maxChar.mapValues(_.toInt).keys.toList.apply(maxCharCountValueIndex)\n\
    \        val maxCharCountValueValue = maxChar.mapValues(_.toInt).values.toList.apply(maxCharCountValueIndex)\n\
    \        val maxCharCountKeyIndex = maxChar.mapValues(_.toInt).indexWhere(_ ==\
    \ maxCharCountKey)\n        val maxCharCountKeyValue = maxChar.mapValues(_.toInt).keys.toList.apply(maxCharCountKeyIndex)\n\
    \        val maxCharCountValueIndex = maxChar.mapValues(_.toInt).indexWhere(_\
    \ == maxCharCountValueKey)\n        val maxCharCountValueKey = maxChar.mapValues(_.toInt).keys.toList.apply(maxChar",
  "        val unique = words.groupBy(identity).mapValues(_.size)\n        val max\
    \ = unique.maxBy(_._2)._1\n        unique.find(_._2 == max).map(_._1)", "    \
    \    val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += (c -> 1)\n            })\n        })\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                val count = uniqueChars(c)\n\
    \                if (count > maxChar.getOrElse(c, 0))\n                    maxChar\
    \ = uniqueChars.updated(c, count)\n            })\n        })\n        maxChar.keys.toList.sortBy(uniqueChars.reverseOrder).head",
  "        val unique = mutable.Map[Char, Int]()\n        words.foreach(word => {\n\
    \            word.foreach(c => {\n                unique.getOrElseUpdate(c, unique.getOrElse(c,\
    \ 0) + 1)\n            })\n        })\n        unique.maxBy(_._2)._1", "     \
    \   val unique = words.map(x => x.distinct).flatten\n        val maxCount = unique.count\n\
    \        val maxWord = unique.max\n        if (maxCount > 1) {\n            val\
    \ maxWordIndex = unique.indexOf(maxWord)\n            val maxWordIndex = maxWordIndex.min(unique.length\
    \ - maxCount)\n            unique.take(maxWordIndex).mkString(\"\")\n        }\
    \ else {\n            maxWord\n        }", "        val unique = mutable.HashSet[Char]()\n\
    \        val maxCount = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                unique.add(c)\n        \
    \        maxCount.getOrElseUpdate(c, 0) + 1\n            })\n        })\n    \
    \    val maxKey = maxCount.keys.max\n        val maxValue = maxCount.values.max\n\
    \        val maxWord = words.find(word => word.contains(maxKey))\n        if (maxValue\
    \ == 1) maxWord.getOrElse(\"\")\n        else maxWord.getOrElse(maxWord.head)",
  "        val counts = words.map(word => word.distinct).map(word => word -> word.length)\n\
    \        val maxCount = counts.max\n        val maxWord = counts.find(_._2 ==\
    \ maxCount).get._1\n        val maxWordIndex = words.indexOf(maxWord)\n      \
    \  if (maxWordIndex == 0) \"\"\n        else words(maxWordIndex)", "        val\
    \ uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = maxWord.head\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(words.indexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(words.indexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(words.indexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(words.indexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(words.indexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(words.indexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(words.indexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(words.indexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(words.indexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(words.indexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(words.indexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(words.indexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(words.indexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(words.indexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(words.indexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(words.indexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(words.indexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(words.indexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(words.indexOf(_))\n\
    \        val maxWordWithMaxChars", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \           maxChars(c) = maxChars.getOrElse(c, 0) + 1\n            })\n     \
    \   })\n        uniqueChars.toList.sortWith(_ < _).headOption.getOrElse(\"\")",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars\
    \ = maxChars + (c -> count)\n        })\n        val maxKey = maxChars.keys.max\n\
    \        val maxValue = maxChars(maxKey)\n        val maxWord = words.filter(w\
    \ => w.contains(maxKey)).sortWith(_.compareToIgnoreCase(maxKey))(0)\n        if\
    \ (maxValue == 1) maxWord\n        else maxWord.substring(0, maxWord.indexOf(maxKey))",
  "        val unique = mutable.HashSet[String]()\n        val maxWord = mutable.StringBuilder()\n\
    \        words.foreach(word => {\n            val uniqueChar = word.distinct\n\
    \            uniqueChar.foreach(c => unique.add(c))\n            val count = unique.count(_\
    \ == word)\n            if (count > unique.max)\n                maxWord.clear()\n\
    \            maxWord.append(word)\n        })\n        if (maxWord.length == 0)\n\
    \            \"\"\n        else\n            maxWord.toString", "        val unique\
    \ = mutable.HashSet[String]()\n        val maxCount = 0\n        val maxWord =\
    \ \"\"\n        words.foreach(word => {\n            val count = unique.count(_\
    \ == word)\n            if (count > maxCount) {\n                maxCount = count\n\
    \                maxWord = word\n            }\n            unique += word\n \
    \       })\n        if (unique.size == maxCount) {\n            unique.head\n\
    \        } else {\n            \"\"\n        }", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \          })\n        })\n        uniqueChars.foreach(c => {\n            val\
    \ count = maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n \
    \       })\n        val maxKey = maxChars.keys.max\n        val maxValue = maxChars.get(maxKey)\n\
    \        val maxWord = words.find(word => word.contains(maxKey))\n        if (maxValue\
    \ == 0) \"\"\n        else maxWord.get", "        val unique = mutable.HashSet[Char]()\n\
    \        val max = 0\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                unique.add(c)\n            })\n        })\n        val\
    \ result = words.find(word => unique.size == word.length)\n        if(result !=\
    \ None) result else \"\""]
stop_tokens:
- "\n    }\n"
