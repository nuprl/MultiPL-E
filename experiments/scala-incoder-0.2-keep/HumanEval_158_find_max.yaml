name: HumanEval_158_find_max
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts a list of strings.\n    // The list contains\
  \ different words. Return the word with maximum number\n    // of unique characters.\
  \ If multiple strings have maximum number of unique\n    // characters, return the\
  \ one which comes first in lexicographical order.\n    // find_max([\"name\", \"\
  of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"\
  ]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
  \    def findMax(words : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
  name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
  name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
  aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
  abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
  , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
  we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
  we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
  this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
  b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"\
  play\"))).equals((\"play\")));\n    }\n\n}\n"
completions: ["        var max = 0\n        var maxWord = \"\"\n        var maxWordCount\
    \ = 0\n        var maxWordLength = 0\n        var maxWordCharCount = 0\n     \
    \   var maxWordCharLength = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength\
    \ = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength = 0\n \
    \       var maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var\
    \ maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount\
    \ = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount = 0\n \
    \       var maxWordCharLength = 0\n        var maxWordCharCount = 0\n        var\
    \ maxWordCharLength = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength\
    \ = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength = 0\n \
    \       var maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var\
    \ maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount\
    \ = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount = 0\n \
    \       var maxWordCharLength = 0\n        var maxWordCharCount = 0\n        var\
    \ maxWordCharLength = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength\
    \ = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength = 0\n \
    \       var maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var\
    \ maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount\
    \ = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount = 0\n \
    \       var maxWordCharLength = 0\n        var maxWordCharCount = 0\n        var\
    \ maxWordCharLength = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength\
    \ = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength = 0\n \
    \       var maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var\
    \ maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount\
    \ = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount = 0\n \
    \       var maxWordCharLength = 0\n        var maxWordCharCount = 0\n        var\
    \ maxWordCharLength = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength\
    \ = 0\n        var maxWordCharCount = 0\n        var maxWordCharLength = 0\n \
    \       var maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var\
    \ maxWordCharCount = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount\
    \ = 0\n        var maxWordCharLength = 0\n        var maxWordCharCount = 0\n \
    \       var maxWordCharLength = 0\n        var ", "        val unique = words.map(x\
    \ => x.toSet).reduceLeft(_ ++ _)\n        val maxCount = unique.max\n        val\
    \ maxWord = unique.find(x => x == maxCount).head\n        if (maxCount == 0) \"\
    \"\n        else maxWord", "        val maxCount = mutable.Map[String, Int]()\n\
    \        words.foreach(word => {\n            val count = maxCount(word) match\
    \ {\n                case Some(count) => count + 1\n                case None\
    \ => 1\n            }\n            maxCount(word) = count\n        })\n      \
    \  val maxKey = maxCount.maxBy(_._2)._1\n        words.find(word => maxCount(word)\
    \ == maxCount(maxKey))", "        val counts = words.map(x => x.length).distinct\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(x => x.length\
    \ == maxCount).head\n        val maxWordWithCount = words.filter(x => x.length\
    \ == maxCount).sortBy(x => x).head\n        val maxWordWithCountWithMaxCount =\
    \ words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(x => x.length == maxCount).sortBy(x => x).last\n        ", " \
    \       val counts = words.foldLeft(Map[Char, Int]()){\n            case (acc,\
    \ word) =>\n                val count = acc.getOrElse(word.charAt(0), 0)\n   \
    \             acc + ((word.charAt(0), count) -> (count + 1))\n        }\n    \
    \    val maxCount = counts.maxBy(_._2)._2\n        val maxKey = counts.maxBy(_._1)._1\n\
    \        val maxWord = counts.find(_._2 == maxCount).map(_._1).getOrElse(\"\"\
    )\n        val maxWordIndex = words.indexOf(maxWord)\n        if (maxWordIndex\
    \ < 0) \"\"\n        else words(maxWordIndex)", "        val unique = words.foldLeft(Map[Char,\
    \ Int]())((map, word) => {\n            val uniqueChars = word.distinct\n    \
    \        uniqueChars.foreach(c => map += ((c, map.getOrElse(c, 0) + 1)));\n  \
    \          map\n        })\n        val maxKey = unique.maxBy(_._2)._1\n     \
    \   val maxValue = unique.maxBy(_._2)._2\n        val maxWord = words.find(w =>\
    \ w.contains(maxKey))\n        if (maxWord.isEmpty) \"\"\n        else maxWord.find(w\
    \ => w.contains(maxValue))", "        val unique = mutable.HashSet[Char]()\n \
    \       val maxCount = 0\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                unique.add(c)\n            })\n        })\n        unique.foreach(c\
    \ => {\n            if (unique.count(_ == c) > maxCount) {\n                maxCount\
    \ = unique.count(_ == c)\n            }\n        })\n        if (maxCount == 0)\
    \ {\n            return \"\"\n        }\n        val maxWord = words.find(word\
    \ => unique.count(_ == word(0)) == maxCount)\n        if (maxWord == null) {\n\
    \            return \"\"\n        }\n        val maxWordChars = maxWord.map(c\
    \ => c.toInt)\n        val maxWordCharsSet = maxWordChars.toSet\n        val maxWordCharsSetSize\
    \ = maxWordCharsSet.size\n        val maxWordCharsSetIterator = maxWordCharsSet.iterator\n\
    \        val maxWordCharsSetIteratorNext = maxWordCharsSetIterator.next\n    \
    \    val maxWordCharsSetIteratorNextNext = maxWordCharsSetIteratorNext.next\n\
    \        val maxWordCharsSetIteratorNextNextNext = maxWordCharsSetIteratorNextNext.next\n\
    \        val maxWordCharsSetIteratorNextNextNextNext = maxWordCharsSetIteratorNextNextNext.next\n\
    \        val maxWordCharsSetIteratorNextNextNextNextNext = maxWordCharsSetIteratorNextNextNextNext.next\n\
    \        val maxWordCharsSetIteratorNextNextNextNextNextNext = maxWordCharsSetIteratorNextNextNextNextNext.next\n\
    \        val maxWordCharsSetIteratorNextNextNextNextNextNextNext = maxWordCharsSetIteratorNextNextNextNextNextNext.next\n\
    \        val maxWordCharsSetIteratorNextNextNextNextNextNextNextNext = maxWordCharsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val maxWordCharsSetIteratorNextNextNextNextNextNextNextNextNext = maxWordCharsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val maxWordCharsSetIteratorNextNextNextNextNextNextNextNextNextNext =\
    \ maxWordCharsSetIteratorNextNextNextNextNextNextNextNextNext.next\n        val\
    \ maxWordCharsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = maxWordCharsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val maxWordCharsSetIteratorNextNextNext", "        val unique = mutable.HashSet[Char]()\n\
    \        val maxWord = mutable.StringBuilder()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                if (!unique.contains(c))\
    \ {\n                    unique.add(c)\n                }\n            })\n  \
    \      })\n        if (unique.size == words.size) {\n            unique.toSeq.sortWith(_\
    \ < _).head\n        } else {\n            maxWord.clear()\n            words.foreach(word\
    \ => {\n                word.foreach(c => {\n                    if (!maxWord.contains(c))\
    \ {\n                        maxWord.append(c)\n                    }\n      \
    \          })\n            })\n            maxWord.toString\n        }", "   \
    \     val uniqueChars = mutable.Set[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            maxChars += c -> uniqueChars.count(_ == c)\n        })\n \
    \       val maxCharsSorted = maxChars.toSeq.sortBy(_._2).reverse\n        val\
    \ maxCharsSortedFirst = maxCharsSorted.head\n        val maxCharsSortedFirstKey\
    \ = maxCharsSorted.keys.toSeq.find(_ == maxCharsSortedFirst._1)\n        val maxCharsSortedFirstValue\
    \ = maxCharsSorted.values.toSeq.find(_ == maxCharsSortedFirst._2)\n        val\
    \ maxCharsSortedFirstKeyIndex = maxCharsSortedFirstKey.toString.toInt\n      \
    \  val maxCharsSortedFirstValueIndex = maxCharsSortedFirstValue.toString.toInt\n\
    \        val maxCharsSortedFirstKeyString = maxCharsSortedFirstKey.toString\n\
    \        val maxCharsSortedFirstValueString = maxCharsSortedFirstValue.toString\n\
    \        if (maxCharsSortedFirstKeyIndex < maxCharsSortedFirstValueIndex) {\n\
    \            maxCharsSortedFirstKeyString\n        } else {\n            maxCharsSortedFirstValueString\n\
    \        }", "        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1;\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1", "        val\
    \ maxCount = words.foldLeft(Map[String, Int]())((map, word) => {\n           \
    \ val count = map.get(word) match {\n                case Some(count) => count\
    \ + 1\n                case None => 1\n            }\n            map.put(word,\
    \ count)\n            map\n        })\n        val maxKey = maxCount.keys.max\n\
    \        val maxValue = maxCount.values.max\n        val maxWord = words.find(word\
    \ => maxCount.get(word) == maxValue)\n        maxWord.getOrElse(\"\")", "    \
    \    val uniqueChars = words.map(word => word.distinct).reduceLeft(_ ++ _)\n \
    \       val maxCount = uniqueChars.max\n        val maxWord = words.filter(word\
    \ => word.count(_ == maxCount) == maxCount)\n        val maxWordWithCount = maxWord.map(word\
    \ => word + \": \" + word.count(_ == maxCount))\n        val maxWordWithCountSorted\
    \ = maxWordWithCount.sortBy(_.length)\n        val maxWordWithCountSortedFirst\
    \ = maxWordWithCountSorted.head\n        val maxWordWithCountSortedFirstLength\
    \ = maxWordWithCountSortedFirst.length\n        val maxWordWithCountSortedFirstChars\
    \ = maxWordWithCountSortedFirst.take(maxWordWithCountSortedFirstLength)\n    \
    \    val maxWordWithCountSortedFirstCharsLength = maxWordWithCountSortedFirstChars.length\n\
    \        val maxWordWithCountSortedFirstCharsSorted = maxWordWithCountSortedFirstChars.sortBy(_.length)\n\
    \        val maxWordWithCountSortedFirstCharsSortedFirst = maxWordWithCountSortedFirstCharsSorted.head\n\
    \        val maxWordWithCountSortedFirstCharsSortedFirstLength = maxWordWithCountSortedFirstCharsSortedFirst.length\n\
    \        val maxWordWithCountSortedFirstCharsSortedFirstChars = maxWordWithCountSortedFirstCharsSortedFirst.take(maxWordWithCountSortedFirstCharsSortedFirstLength)\n\
    \        val maxWordWithCountSortedFirstCharsSortedFirstCharsLength = maxWordWithCountSortedFirstCharsSortedFirstChars.length\n\
    \        val maxWordWithCountSortedFirstCharsSortedFirstCharsSorted = maxWordWithCountSortedFirstCharsSortedFirstChars.sortBy(_.length)\n\
    \        val maxWordWithCountSortedFirstCharsSortedFirstCharsSortedFirst = maxWordWithCountSortedFirstCharsSortedFirstCharsSorted.head\n\
    \        val maxWordWithCountSortedFirstCharsSortedFirstCharsSortedFirstLength\
    \ = maxWordWithCountSortedFirstCharsSortedFirstCharsSortedFirst.length\n     \
    \   val maxWordWithCountSortedFirstCharsSortedFirstCharsSortedFirstChars = maxWordWithCountSortedFirstCharsSortedFirstCharsSortedFirst.take(maxWordWithCountSortedFirstCharsSortedFirstCharsSortedFirstLength)\n\
    \        val maxWordWithCountSortedFirstCharsSortedFirstCharsSortedFirstCharsLength\
    \ = maxWordWithCountSortedFirstCharsSortedFirstCharsSortedFirstCharsLength.length\n\
    \        val maxWordWithCount", "        val unique = mutable.HashSet[Char]()\n\
    \        val maxCount = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                unique.add(c)\n        \
    \    })\n        })\n        unique.foreach(c => {\n            val count = unique(c).length\n\
    \            val maxCount = if (maxCount(c) == 0) count else maxCount(c) + 1\n\
    \            maxCount(c) = maxCount\n        })\n        val maxChar = maxCount.keys.max\n\
    \        val maxCount = maxCount(maxChar)\n        val maxWord = words.filter(word\
    \ => word(maxChar) == maxChar).sortWith(_.compareToIgnoreCase(words(0))).head\n\
    \        if (maxCount == 0) maxWord else maxWord", "        val unique = words.map(_.length).distinct\n\
    \        val max = unique.max\n        val maxIndex = unique.indexOf(max)\n  \
    \      words(maxIndex)", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   val count = maxChars.getOrElse(char, 0)\n            maxChars += char -> count\
    \ + 1\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith((a, b)\
    \ => a._2 > b._2)\n        val maxCharsSortedFirst = maxCharsSorted.head._1\n\
    \        val maxCharsSortedLast = maxCharsSorted.last._1\n        val maxCharsSortedFirstIndex\
    \ = words.indexOf(maxCharsSortedFirst)\n        val maxCharsSortedLastIndex =\
    \ words.indexOf(maxCharsSortedLast)\n        if (maxCharsSortedFirstIndex < maxCharsSortedLastIndex)\
    \ {\n            words.take(maxCharsSortedFirstIndex + 1)\n        } else {\n\
    \            words.take(maxCharsSortedLastIndex + 1)\n        }", "        val\
    \ unique = mutable.HashSet[String]()\n        val maxCount = 0\n        val maxWord\
    \ = \"\"\n        words.foreach(word => {\n            val count = unique.count(_\
    \ == word)\n            if (count > maxCount) {\n                maxCount = count\n\
    \                maxWord = word\n            }\n            unique += word\n \
    \       })\n        if (unique.size == maxCount) {\n            maxWord\n    \
    \    } else {\n            \"\"\n        }", "        val unique = words.map(x\
    \ => x.distinct).flatten.toSet\n        val maxCount = unique.max\n        val\
    \ maxWord = unique.find(x => x == maxCount)\n        if (maxWord.isEmpty) \"\"\
    \n        else maxWord", "        val unique = words.map(_.length).distinct\n\
    \        val maxIndex = unique.max\n        val maxWord = words(maxIndex)\n  \
    \      if (maxIndex == 0) \"\"\n        else maxWord", "        val unique = mutable.HashSet[String]()\n\
    \        val maxWord = mutable.ListBuffer[String]()\n        words.foreach(word\
    \ => {\n            val uniqueChars = word.distinct\n            if (uniqueChars.size\
    \ < unique.size) {\n                unique.clear()\n                unique.update(uniqueChars)\n\
    \            }\n            if (uniqueChars.size == unique.size) {\n         \
    \       unique.update(word)\n            }\n        })\n        unique.foreach(word\
    \ => {\n            if (maxWord.size < word.length) {\n                maxWord.clear()\n\
    \                maxWord.append(word)\n            }\n            if (maxWord.size\
    \ == word.length) {\n                maxWord.append(word)\n            }\n   \
    \     })\n        if (maxWord.size == 0) {\n            return \"\"\n        }\n\
    \        maxWord.head", "        val uniqueChars = mutable.HashSet[Char]()\n \
    \       val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \       })\n        })\n        uniqueChars.foreach(c => {\n            val count\
    \ = uniqueChars.count(_ == c)\n            if (count > maxChars(c)) {\n      \
    \          maxChars(c) = count\n            }\n        })\n        val maxKey\
    \ = maxChars.keys.max\n        if (maxChars(maxKey) == 0) {\n            return\
    \ \"\"\n        }\n        words.find(word => maxChars(word.head) == maxChars(maxKey))"]
stop_tokens:
- "\n    }\n"
