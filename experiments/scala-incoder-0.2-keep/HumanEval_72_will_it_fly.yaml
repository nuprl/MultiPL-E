name: HumanEval_72_will_it_fly
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that returns True if the object q will fly, and False otherwise.\n\
  \    // The object q will fly if it's balanced (it is a palindromic list) and the\
  \ sum of its elements is less than or equal the maximum possible weight w.\n   \
  \ // Example:\n    // will_it_fly([1, 2], 5) \u279E False \n    // # 1+2 is less\
  \ than the maximum possible weight, but it's unbalanced.\n    // will_it_fly([3,\
  \ 2, 3], 1) \u279E False\n    // # it's balanced, but 3+2+3 is more than the maximum\
  \ possible weight.\n    // will_it_fly([3, 2, 3], 9) \u279E True\n    // # 3+2+3\
  \ is less than the maximum possible weight, and it's balanced.\n    // will_it_fly([3],\
  \ 5) \u279E True\n    // # 3 is less than the maximum possible weight, and it's\
  \ balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
  \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
  \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
  \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
  \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
  \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
  \    }\n\n}\n"
completions: ["        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n\
    \        val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced\
    \ = q.foldLeft(0)(_ + _) == maxSum\n        isPalindromic && isBalanced && maxWeight\
    \ <= q.sum", "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ +\
    \ _)\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n        val\
    \ isBalanced = maxSum < maxWeight\n        val isFlippable = maxSum > maxWeight\n\
    \        val isFlippableAndBalanced = isFlippable && isBalanced\n        val isFlippableAndBalancedAndPalindromic\
    \ = isFlippableAndBalanced && isPalindromic\n        isFlippableAndBalancedAndPalindromic",
  "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum\
    \ < maxWeight\n        isPalindromic && isBalanced", "        val maxWeight =\
    \ w\n        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_\
    \ == q)\n        val isBalanced = maxSum < maxWeight\n        isPalindromic &&\
    \ isBalanced", "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(x => x == q.head)\n     \
    \   val isBalanced = maxSum < maxWeight\n        val isFlippable = q.forall(x\
    \ => x != q.head && x != q.last)\n        isPalindromic && isBalanced && isFlippable",
  "        val maxWeight = w\n        val sumOfElements = q.sum\n        val isBalanced\
    \ = sumOfElements <= maxWeight\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isLessThanMaxWeight = sumOfElements < maxWeight\n\
    \        val isLessThanMaxWeightAndBalanced = isLessThanMaxWeight && isBalanced\n\
    \        val isLessThanMaxWeightAndPalindromic = isLessThanMaxWeight && isPalindromic\n\
    \        isLessThanMaxWeightAndBalanced || isLessThanMaxWeightAndPalindromic",
  "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum\
    \ < maxWeight\n        val isLessThanMaxWeight = maxSum < maxWeight\n        val\
    \ isLessThanMaxSum = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalanced\
    \ = isLessThanMaxWeight && isBalanced\n        val isLessThanMaxSumAndBalanced\
    \ = isLessThanMaxSum && isBalanced\n        isPalindromic && isBalanced && isLessThanMaxWeightAndBalanced\
    \ && isLessThanMaxSumAndBalanced", "        val maxWeight = w.toInt\n        val\
    \ maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_\
    \ == q(0))\n        val isBalanced = maxSum < maxWeight\n        val isFly = isPalindromic\
    \ && isBalanced\n        val isNotFly = !isPalindromic || !isBalanced\n      \
    \  isFly", "        val maxWeight = w\n        val maxSum = q.sum\n        val\
    \ isPalindromic = q.reverse.forall(_ == q.head)\n        val isBalanced = maxSum\
    \ - q.sum < maxWeight\n        val isFlipped = q.tail.forall(_ == q.head)\n  \
    \      isPalindromic && isBalanced && isFlipped", "        val maxWeight = w\n\
    \        val palindromic = q.reverse.forall(x => x != q)\n        val sumOfElements\
    \ = q.sum\n        val isBalanced = sumOfElements <= maxWeight\n        val isFlipped\
    \ = palindromic && isBalanced\n        val isFlippedOrBalanced = isFlipped ||\
    \ isBalanced\n        isFlippedOrBalanced", "        val maxWeight = w\n     \
    \   val maxSum = q.sum\n        val palindromic = q.reverse.forall(x => x == q(0))\n\
    \        val balanced = palindromic && q.forall(x => x <= maxWeight)\n       \
    \ val sumLessThanMax = q.sum < maxWeight\n        val sumLessThanMaxButNotBalanced\
    \ = q.sum < maxWeight && !balanced\n        val sumGreaterThanMaxButNotBalanced\
    \ = q.sum > maxWeight && !balanced\n        val sumGreaterThanMax = q.sum > maxWeight\n\
    \        val sumLessThanMaxButBalanced = q.sum < maxWeight && balanced\n     \
    \   val sumGreaterThanMaxButBalanced = q.sum > maxWeight && balanced\n       \
    \ val sumLessThanMaxButNotBalanced = q.sum < maxWeight && !balanced\n        val\
    \ sumGreaterThanMaxButNotBalanced = q.sum > maxWeight && !balanced\n        val\
    \ sumLessThanMaxButBalancedAndNotPalindromic = q.sum < maxWeight && balanced &&\
    \ !palindromic\n        val sumGreaterThanMaxButBalancedAndNotPalindromic = q.sum\
    \ > maxWeight && balanced && !palindromic\n        val sumLessThanMaxButNotBalancedAndNotPalindromic\
    \ = q.sum < maxWeight && !balanced && !palindromic\n        val sumGreaterThanMaxButNotBalancedAndNotPalindromic\
    \ = q.sum > maxWeight && !balanced && !palindromic\n        val sumLessThanMaxButBalancedAndPalindromic\
    \ = q.sum < maxWeight && balanced && palindromic\n        val sumGreaterThanMaxButBalancedAndPalindromic\
    \ = q.sum > maxWeight && balanced && palindromic\n        val sumLessThanMaxButNotBalancedAndPalindromic\
    \ = q.sum < maxWeight && !balanced && palindromic\n        val sumGreaterThanMaxButNotBalancedAndPalindromic\
    \ = q.sum > maxWeight && !balanced && palindromic\n        val sumLessThanMaxButBalancedAndNotPalindromicAndNotBalanced\
    \ = q.sum < maxWeight && balanced && !palindromic && !balanced\n        val sumGreaterThanMaxButBalancedAndNotPalindromicAndNotBalanced\
    \ = q.sum > maxWeight && balanced && !palindromic && !balance", "        val maxWeight\
    \ = w\n        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isBalanced = maxSum < maxWeight\n        val isFlight\
    \ = maxSum <= maxWeight && isPalindromic && isBalanced\n        isFlight", " \
    \       val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n       \
    \ val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced\
    \ = q.forall(x => x <= maxWeight && x >= maxWeight - q.length)\n        val isLessOrEqual\
    \ = maxSum - q.sum <= maxWeight\n        val isLessOrEqualPalindromic = maxSum\
    \ - q.reverse.sum <= maxWeight\n        val isLessOrEqualBalanced = maxSum - q.sum\
    \ <= maxWeight - q.length\n        val isLessOrEqualBalancedPalindromic = maxSum\
    \ - q.reverse.sum <= maxWeight - q.length\n        val isLessOrEqualBalancedAndPalindromic\
    \ = maxSum - q.sum <= maxWeight - q.length && maxSum - q.reverse.sum <= maxWeight\
    \ - q.length\n        val isLessOrEqualBalancedAndPalindromicPalindromic = maxSum\
    \ - q.sum <= maxWeight - q.length && maxSum - q.reverse.sum <= maxWeight - q.length\
    \ && maxSum - q.reverse.reverse.sum <= maxWeight - q.length\n        val isLessOrEqualBalancedAndPalindromicPalindromicPalindromic\
    \ = maxSum - q.sum <= maxWeight - q.length && maxSum - q.reverse.sum <= maxWeight\
    \ - q.length && maxSum - q.reverse.reverse.sum <= maxWeight - q.length && maxSum\
    \ - q.reverse.reverse.reverse.sum <= maxWeight - q.length\n        val isLessOrEqualBalancedAndPalindromicPalindromicPalindromicPalindromic\
    \ = maxSum - q.sum <= maxWeight - q.length && maxSum - q.reverse.sum <= maxWeight\
    \ - q.length && maxSum - q.reverse.reverse.sum <= maxWeight - q.length && maxSum\
    \ - q.reverse.reverse.reverse.sum <= maxWeight - q.length && maxSum - q.reverse.reverse.reverse.reverse.sum\
    \ <= maxWeight - q.length\n        val isLessOrEqualBalancedAndPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxSum - q.sum <= maxWeight - q.length && maxSum - q.reverse.sum <= maxWeight\
    \ - q.length && maxSum - q.reverse.reverse.sum <= maxWeight - q.length && maxSum\
    \ - q.reverse.reverse.reverse.sum <= maxWeight - q.length", "        val maxSum\
    \ = w.toLong\n        val maxWeight = w.toLong\n        val maxSumOfElements =\
    \ q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfElements <= maxWeight\n\
    \        val isPalindromic = q.reverse.forall(_ == q.head)\n        val isLessOrEqualToMaxWeight\
    \ = maxSumOfElements <= maxWeight\n        val isLessOrEqualToMaxSum = maxSumOfElements\
    \ <= maxSum\n        val isLessOrEqualToMaxSumOfElements = maxSumOfElements <=\
    \ maxSumOfElements.toLong\n        val isLessOrEqualToMaxSumOfElementsAndIsBalanced\
    \ = isLessOrEqualToMaxSumOfElements && isBalanced\n        val isLessOrEqualToMaxSumOfElementsAndIsPalindromic\
    \ = isLessOrEqualToMaxSumOfElements && isPalindromic\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxWeight\
    \ = isLessOrEqualToMaxSumOfElements && isLessOrEqualToMaxWeight\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSum\
    \ = isLessOrEqualToMaxSumOfElements && isLessOrEqualToMaxSum\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements\
    \ = isLessOrEqualToMaxSumOfElements && isLessOrEqualToMaxSumOfElements.toLong\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsBalanced\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxWeight && isBalanced\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsPalindromic\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxWeight && isPalindromic\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxWeight\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxWeight && isLessOrEqualToMaxWeight\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSum\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSum", "        val maxWeight\
    \ = w\n        val sumOfElements = q.foldLeft(0)(_ + _)\n        sumOfElements\
    \ <= maxWeight", "        val maxSum = q.reduce((x, y) => x + y)\n        val\
    \ maxWeight = q.reduce((x, y) => if (x > y) x else y)\n        val isPalindromic\
    \ = q.reverse.forall(_ == q(0))\n        val isBalanced = maxWeight <= w\n   \
    \     val isLessThanMax = maxSum - w <= 0\n        val isLessThanMaxOrBalanced\
    \ = isLessThanMax || isBalanced\n        isPalindromic && isLessThanMaxOrBalanced",
  "        val maxSum = w.toLong\n        val maxSumOfElements = q.foldLeft(0)(_ +\
    \ _)\n        val isPalindromic = maxSumOfElements.toLong == maxSum\n        val\
    \ isBalanced = isPalindromic && maxSumOfElements.toLong <= w\n        val isFlippable\
    \ = isBalanced && maxSumOfElements.toLong <= maxSum\n        isFlippable", " \
    \       val maxWeight = w\n        val maxSum = q.sum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isBalanced = q.forall(x => x\
    \ <= maxWeight && x >= maxWeight - q.sum)\n        val isLessThanMax = q.sum <\
    \ maxWeight\n        val isLessThanMaxAndBalanced = q.sum < maxWeight && q.forall(x\
    \ => x <= maxWeight && x >= maxWeight - q.sum)\n        val isLessThanMaxAndBalancedAndPalindromic\
    \ = q.sum < maxWeight && q.forall(x => x <= maxWeight && x >= maxWeight - q.sum)\
    \ && q.reverse.forall(x => x == q(0))\n        val isLessThanMaxAndBalancedAndPalindromicAndNotZero\
    \ = q.sum < maxWeight && q.forall(x => x <= maxWeight && x >= maxWeight - q.sum)\
    \ && q.reverse.forall(x => x == q(0)) && q.forall(x => x != 0)\n        val isLessThanMaxAndBalancedAndPalindromicAndNotZeroAndNotZero\
    \ = q.sum < maxWeight && q.forall(x => x <= maxWeight && x >= maxWeight - q.sum)\
    \ && q.reverse.forall(x => x == q(0)) && q.forall(x => x != 0) && (q.forall(x\
    \ => x != 0))\n        val isLessThanMaxAndBalancedAndPalindromicAndNotZeroAndNotZeroAndNotZero\
    \ = q.sum < maxWeight && q.forall(x => x <= maxWeight && x >= maxWeight - q.sum)\
    \ && q.reverse.forall(x => x == q(0)) && q.forall(x => x != 0) && (q.forall(x\
    \ => x != 0)) && (q.forall(x => x != 0))\n        val isLessThanMaxAndBalancedAndPalindromicAndNotZeroAndNotZeroAndNotZeroAndNotZero\
    \ = q.sum < maxWeight && q.forall(x => x <= maxWeight && x >= maxWeight - q.sum)\
    \ && q.reverse.forall(x => x == q(0)) && q.forall(x => x != 0) && (q.forall(x\
    \ => x != 0)) && (q.forall(x => x != 0)) && (q.forall(x => x != 0))\n        val\
    \ isLessThanMaxAndBalancedAndPalindromicAndNotZeroAndNotZeroAndNotZeroAndNotZeroAndNotZero\
    \ = q.sum < maxWeight && q.forall(x => x <= maxWeight && x >= maxWeight - q.sum",
  "        val maxWeight = w\n        val maxSum = q.sum\n        val maxList = q.max\n\
    \        val maxListSum = maxList.sum\n        val maxListWeight = maxList.max\n\
    \        val maxListWeightSum = maxListWeight.sum\n        val maxListWeightSumLessOrEqualToMaxWeight\
    \ = maxListWeightSum < maxWeight\n        val maxListSumLessOrEqualToMaxSum =\
    \ maxListSum < maxSum\n        val maxListSumLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxWeight\
    \ = maxListSumLessOrEqualToMaxWeight && maxListWeightSumLessOrEqualToMaxWeight\n\
    \        val maxListSumLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxSum\
    \ = maxListSumLessOrEqualToMaxWeight && maxListWeightSumLessOrEqualToMaxSum\n\
    \        val maxListSumLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxWeight\
    \ = maxListSumLessOrEqualToMaxWeight && maxListWeightSumLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxWeight\n\
    \        val maxListSumLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxSum\
    \ = maxListSumLessOrEqualToMaxWeight && maxListWeightSumLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxSum\n\
    \        val maxListSumLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxWeight\
    \ = maxListSumLessOrEqualToMaxWeight && maxListWeightSumLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxWeight\n\
    \        val maxListSumLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxSum\
    \ = maxListSumLessOrEqualToMaxWeight && maxListWeightSumLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxSum\n\
    \        val maxListSumLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxWeightAndListWeightLessOrEqualToMaxSum\
    \ = maxListSumLessOrEqualToMaxWeight ", "        val maxWeight = w\n        val\
    \ sumOfElements = q.foldLeft(0)(_ + _)\n        sumOfElements <= maxWeight", " \
    \       val maxWeight = w\n        val maxSum = q.reduce(_ + _)\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum == maxWeight\n\
    \        val isLessThanMax = maxSum < maxWeight\n        val isLessThanMaxButNotBalanced\
    \ = maxSum < maxWeight && !isBalanced\n        val isLessThanMaxButBalanced =\
    \ maxSum < maxWeight && isBalanced\n        isPalindromic && isBalanced && isLessThanMax\
    \ && isLessThanMaxButNotBalanced && isLessThanMaxButBalanced", "        val maxWeight\
    \ = w\n        val maxSum = q.reduce(_ + _)\n        val isPalindromic = q.isEmpty\
    \ || q.reverse == q\n        val isBalanced = maxSum == maxWeight\n        val\
    \ isLessThanMaxWeight = maxSum < maxWeight\n        val isLessThanMaxSum = maxSum\
    \ < q.reduce(_ + _)\n        isPalindromic && isBalanced && isLessThanMaxWeight\
    \ && isLessThanMaxSum", "        val maxWeight = w\n        val maxSum = q.reduce(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n       \
    \ val isBalanced = maxSum == maxWeight\n        val isLessThanMax = maxSum < maxWeight\n\
    \        val isLessThanMaxButNotBalanced = maxSum < maxWeight && !isBalanced\n\
    \        val isLessThanMaxButBalanced = maxSum < maxWeight && isBalanced\n   \
    \     val isLessThanMaxButNotBalancedAndPalindromic = maxSum < maxWeight && !isBalanced\
    \ && !isPalindromic\n        val isLessThanMaxButBalancedAndPalindromic = maxSum\
    \ < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxButNotBalancedAndPalindromicAndBalanced\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && isBalanced\n      \
    \  val isLessThanMaxButBalancedAndPalindromicAndBalanced = maxSum < maxWeight\
    \ && isBalanced && isPalindromic && isBalanced\n        val isLessThanMaxButNotBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && isBalanced && !isPalindromic\n\
    \        val isLessThanMaxButBalancedAndPalindromicAndBalancedAndPalindromic =\
    \ maxSum < maxWeight && isBalanced && isPalindromic && isBalanced && !isPalindromic\n\
    \        val isLessThanMaxButNotBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && isBalanced && !isPalindromic\
    \ && !isBalanced\n        val isLessThanMaxButBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && isBalanced && !isPalindromic\
    \ && !isBalanced\n        val isLessThanMaxButNotBalancedAndPalindromicAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && !isBalanced && !isPalindromic && isBalanced && !isPalindromic\
    \ && !isBalanced && !isP", "        val maxWeight = w\n        val maxSum = q.reduce(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n       \
    \ val isBalanced = maxSum < maxWeight\n        val isLessThanMaxWeight = maxSum\
    \ < maxWeight * 2\n        val isLessThanMaxSum = maxSum < maxWeight * 3\n   \
    \     val isLessThanMaxWeightAndBalanced = isLessThanMaxWeight && isBalanced\n\
    \        val isLessThanMaxSumAndBalanced = isLessThanMaxSum && isBalanced\n  \
    \      isPalindromic && isBalanced && isLessThanMaxWeightAndBalanced && isLessThanMaxSumAndBalanced",
  "        val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong\n  \
    \      val palindromic = q.reverse.forall(x => x <= maxWeight)\n        val sum\
    \ = q.sum\n        val isBalanced = sum <= maxSum\n        val isPalindromic =\
    \ palindromic && sum == sum.reverse\n        isBalanced && isPalindromic", " \
    \       val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n       \
    \ val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced\
    \ = q.forall(x => x <= maxWeight && x >= maxWeight - q.length)\n        val isLessOrEqual\
    \ = q.forall(x => x <= maxWeight && x >= maxWeight - q.length)\n        val isLessOrEqualPalindromic\
    \ = q.reverse.forall(x => x <= maxWeight && x >= maxWeight - q.length)\n     \
    \   val isLessOrEqualBalanced = q.forall(x => x <= maxWeight && x >= maxWeight\
    \ - q.length)\n        val isLessOrEqualPalindromicBalanced = q.reverse.forall(x\
    \ => x <= maxWeight && x >= maxWeight - q.length)\n        val isLessOrEqualBalancedPalindromic\
    \ = q.reverse.forall(x => x <= maxWeight && x >= maxWeight - q.length)\n     \
    \   val isLessOrEqualBalancedPalindromicBalanced = q.reverse.forall(x => x <=\
    \ maxWeight && x >= maxWeight - q.length)\n        val isLessOrEqualBalancedPalindromicBalancedPalindromic\
    \ = q.reverse.forall(x => x <= maxWeight && x >= maxWeight - q.length)\n     \
    \   val isLessOrEqualBalancedPalindromicBalancedPalindromicBalanced = q.reverse.forall(x\
    \ => x <= maxWeight && x >= maxWeight - q.length)\n        val isLessOrEqualBalancedPalindromicBalancedPalindromicBalancedPalindromic\
    \ = q.reverse.forall(x => x <= maxWeight && x >= maxWeight - q.length)\n     \
    \   val isLessOrEqualBalancedPalindromicBalancedPalindromicBalancedPalindromicBalanced\
    \ = q.reverse.forall(x => x <= maxWeight && x >= maxWeight - q.length)\n     \
    \   val isLessOrEqualBalancedPalindromicBalancedPalindromicBalancedPalindromicBalancedPalindromic\
    \ = q.reverse.forall(x => x <= maxWeight && x >= maxWeight - q.length)\n     \
    \   val isLessOrEqualBalancedPalindromicBalancedPalindromicBalancedPalindromicBalancedPalindromicBalanced\
    \ = q.reverse.forall(x => x <= maxWeight && x >= maxWeight - q.length)\n     \
    \   val isLessOrEqualBalancedPalindromicBalancedPalindromicBalancedPalindromicBalancedPalindromic",
  "        val maxWeight = w\n        val maxSum = q.sum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q.head)\n        val isBalanced = q.forall(x =>\
    \ x <= maxWeight && x >= 0)\n        val isLessThanMax = maxSum - q.sum < maxWeight\n\
    \        isPalindromic && isBalanced && isLessThanMax", "        val maxWeight\
    \ = w\n        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_\
    \ == q(0))\n        val isBalanced = maxSum < maxWeight\n        isPalindromic\
    \ && isBalanced", "        val maxSum = w.toLong * q.length\n        val maxWeight\
    \ = w.toLong * q.length\n        val maxWeight2 = w.toLong * q.length\n      \
    \  val maxWeight3 = w.toLong * q.length\n        val maxWeight4 = w.toLong * q.length\n\
    \        val maxWeight5 = w.toLong * q.length\n        val maxWeight6 = w.toLong\
    \ * q.length\n        val maxWeight7 = w.toLong * q.length\n        val maxWeight8\
    \ = w.toLong * q.length\n        val maxWeight9 = w.toLong * q.length\n      \
    \  val maxWeight10 = w.toLong * q.length\n        val maxWeight11 = w.toLong *\
    \ q.length\n        val maxWeight12 = w.toLong * q.length\n        val maxWeight13\
    \ = w.toLong * q.length\n        val maxWeight14 = w.toLong * q.length\n     \
    \   val maxWeight15 = w.toLong * q.length\n        val maxWeight16 = w.toLong\
    \ * q.length\n        val maxWeight17 = w.toLong * q.length\n        val maxWeight18\
    \ = w.toLong * q.length\n        val maxWeight19 = w.toLong * q.length\n     \
    \   val maxWeight20 = w.toLong * q.length\n        val maxWeight21 = w.toLong\
    \ * q.length\n        val maxWeight22 = w.toLong * q.length\n        val maxWeight23\
    \ = w.toLong * q.length\n        val maxWeight24 = w.toLong * q.length\n     \
    \   val maxWeight25 = w.toLong * q.length\n        val maxWeight26 = w.toLong\
    \ * q.length\n        val maxWeight27 = w.toLong * q.length\n        val maxWeight28\
    \ = w.toLong * q.length\n        val maxWeight29 = w.toLong * q.length\n     \
    \   val maxWeight30 = w.toLong * q.length\n        val maxWeight31 = w.toLong\
    \ * q.length\n        val maxWeight32 = w.toLong * q.length\n        val maxWeight33\
    \ = w.toLong * q.length\n        val maxWeight34 = w.toLong * q.length\n     \
    \   val maxWeight35 = w.toLong * q.length\n        val maxWeight36 = w.toLong\
    \ * q.length\n        val maxWeight37 = w.toLong * q.length\n        val maxWeight38\
    \ = w.toLong * q.length\n        val maxWeight39 = w.toLong * q.length\n     \
    \   val maxWeight40", "        val maxSum = w.toLong * q.length\n        val maxWeight\
    \ = w.toLong * q.sum\n        val palindromic = q.reverse.forall(x => x <= maxWeight)\n\
    \        val balanced = palindromic && q.sum <= maxSum\n        !balanced", " \
    \       val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n       \
    \ val isPalindromic = q.reverse.forall(x => x == q.head)\n        val isBalanced\
    \ = maxSum < maxWeight\n        val isFly = isPalindromic && isBalanced\n    \
    \    val isNotFly = !isPalindromic && !isBalanced\n        isFly", "        val\
    \ maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum < maxWeight\n\
    \        val isLessThanMaxWeight = maxSum < maxWeight\n        val isLessThanMaxSum\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalanced = maxSum < maxWeight\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromic = maxSum < maxWeight\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeight = maxSum\
    \ < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeightAndIsPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeightAndIsPalindromicAndIsBalanced\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeightAndIsPalindromicAndIsBalancedAndIsLessThanMaxWeight\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeightAndIsPalindromicAndIsBalancedAndIsLessThanMaxWeightAndIsPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeightAndIsPalindromicAndIsBalancedAndIsLessThanMaxWeightAndIsPalindromicAndIsBalanced\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeightAndIsPalindromicAndIsBalancedAndIsLessThanMaxWeightAndIsPalindromicAndIsBalancedAndIsLessThanMaxWeight\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeightAndIsPalindromicAndIsBalancedAndIsLessThanMaxWeightAndIsPalindromicAndIsBalancedAndIsLessThanMaxWeightAndIsPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeightAndIsPalindromicAndIsBalance",
  "        val maxSum = q.foldLeft(0)(_ + _)\n        val maxWeight = q.foldLeft(0)(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n       \
    \ val sumOfElements = q.foldLeft(0)(_ + _)\n        val isBalanced = sumOfElements\
    \ <= maxWeight\n        val isFly = isPalindromic && isBalanced\n        val isNotFly\
    \ = !isFly\n        val isNotBalanced = !isBalanced\n        val isNotPalindromic\
    \ = !isPalindromic\n        val isNotFly_or_NotBalanced = isNotFly || isNotBalanced\n\
    \        val isNotPalindromic_or_NotBalanced = isNotPalindromic || isNotBalanced\n\
    \        val isNotFly_or_NotPalindromic = isNotFly_or_NotBalanced || isNotPalindromic_or_NotBalanced\n\
    \        isFly_or_NotPalindromic", "        val maxWeight = w\n        val maxSum\
    \ = q.sum\n        val maxPalindrome = q.reverse.mkString\n        val maxPalindromeLength\
    \ = maxPalindrome.length\n        val maxPalindromeWeight = maxPalindromeLength\
    \ * maxWeight\n        val maxPalindromeSum = maxPalindromeWeight.times(maxPalindromeLength)\n\
    \        val maxPalindromeSumLessOrEqualToMaxWeight = maxPalindromeSum.lt(maxWeight)\n\
    \        val maxPalindromeSumLessOrEqualToMaxWeightAndBalanced = maxPalindromeSumLessOrEqualToMaxWeight\
    \ && maxPalindromeLength.lt(maxPalindromeWeight)\n        val maxPalindromeSumLessOrEqualToMaxWeightAndBalancedAndNotPalindrome\
    \ = maxPalindromeSumLessOrEqualToMaxWeightAndBalanced && !maxPalindrome.isPalindrome\n\
    \        val maxPalindromeSumLessOrEqualToMaxWeightAndBalancedAndNotPalindromeAndNotEmpty\
    \ = maxPalindromeSumLessOrEqualToMaxWeightAndBalancedAndNotPalindrome && !maxPalindrome.isEmpty\n\
    \        val maxPalindromeSumLessOrEqualToMaxWeightAndBalancedAndNotPalindromeAndNotEmptyAndNotEmpty\
    \ = maxPalindromeSumLessOrEqualToMaxWeightAndBalancedAndNotPalindromeAndNotEmpty\
    \ && !maxPalindrome.isEmpty && !maxPalindrome.isEmpty\n        val maxPalindromeSumLessOrEqualToMaxWeightAndBalancedAndNotPalindromeAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = maxPalindromeSumLessOrEqualToMaxWeightAndBalancedAndNotPalindromeAndNotEmptyAndNotEmpty\
    \ && !maxPalindrome.isEmpty && !maxPalindrome.isEmpty && !maxPalindrome.isEmpty\n\
    \        val maxPalindromeSumLessOrEqualToMaxWeightAndBalancedAndNotPalindromeAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = maxPalindromeSumLessOrEqualToMaxWeightAndBalancedAndNotPalindromeAndNotEmptyAndNotEmptyAndNotEmpty\
    \ && !maxPalindrome.isEmpty && !maxPalindrome.isEmpty && !max", "        val maxWeight\
    \ = w\n        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isBalanced = maxSum < maxWeight\n        val isFlipped\
    \ = isPalindromic && isBalanced\n        !isFlipped", "        val maxSum = w.toLong\
    \ * q.length\n        val sums = q.map(x => x.toLong)\n        val isPalindromic\
    \ = sums.reverse.forall(x => x == sums.head)\n        val isBalanced = sums.forall(x\
    \ => x <= maxSum)\n        isPalindromic && isBalanced", "        val maxWeight\
    \ = w\n        val maxSum = q.reduce(_ + _)\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isBalanced = maxSum == maxWeight\n        val isLessOrEqual\
    \ = maxSum < maxWeight\n        isPalindromic && isBalanced && isLessOrEqual",
  "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum\
    \ == maxWeight\n        val isLessThanMaxWeight = maxSum < maxWeight\n       \
    \ val isLessThanMaxSum = maxSum < q.reduceLeft(_ + _)\n        isPalindromic &&\
    \ isBalanced && isLessThanMaxWeight && isLessThanMaxSum", "        val maxSum\
    \ = w.toLong * q.length\n        val maxWeight = w.toLong\n        val maxSumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val isPalindromic = maxSumOfElements == maxSum\n\
    \        val isBalanced = isPalindromic && maxSumOfElements <= maxWeight\n   \
    \     val isLessThanMaxWeight = maxSumOfElements < maxWeight\n        isBalanced\
    \ && isLessThanMaxWeight", "        val maxWeight = w\n        val maxSum = q.reduceLeft(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(_ == q.head)\n        val\
    \ isBalanced = maxSum < maxWeight\n        val isFly = isPalindromic && isBalanced\n\
    \        \n        val result = isFly\n        println(s\"$q => $result\")\n \
    \       result", "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n       \
    \ val isBalanced = q.foldRight(true)((x, y) => x && y <= maxWeight)\n        val\
    \ isLessThanMaxWeight = q.foldRight(false)((x, y) => x && y <= maxWeight)\n  \
    \      val isLessThanMaxSum = q.foldRight(false)((x, y) => x && y <= maxSum)\n\
    \        isPalindromic && isBalanced && isLessThanMaxWeight && isLessThanMaxSum",
  "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = q.forall(x\
    \ => x <= maxWeight && x >= maxWeight - q.last)\n        val isLessThanMax = q.forall(x\
    \ => x <= maxWeight && x >= maxSum)\n        isPalindromic && isBalanced && isLessThanMax",
  "        val maxWeight = w\n        val sumOfElements = q.sum\n        val isPalindromic\
    \ = q.isPalindromic\n        val isBalanced = isPalindromic && sumOfElements <=\
    \ maxWeight\n        val isFlipped = !isPalindromic && !isBalanced\n        isFlipped",
  "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum\
    \ < maxWeight\n        isPalindromic && isBalanced", "        val maxWeight =\
    \ w\n        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_\
    \ == q.head)\n        val isBalanced = maxSum < maxWeight\n        val isFlipped\
    \ = isPalindromic && isBalanced\n        isFlipped", "        val maxSum = w.toLong\
    \ * q.length\n        val maxWeight = w.toLong\n        val maxSumOfWeights =\
    \ q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfWeights <= maxWeight\n\
    \        val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isLessThanMax\
    \ = maxSumOfWeights < maxSum\n        val isLessThanMaxButBalanced = isLessThanMax\
    \ && isBalanced\n        val isLessThanMaxButPalindromic = isLessThanMax && isPalindromic\n\
    \        val isLessThanMaxButNotBalanced = isLessThanMax && !isBalanced\n    \
    \    val isLessThanMaxButNotPalindromic = isLessThanMax && !isPalindromic\n  \
    \      val isLessThanMaxButNotBalancedAndPalindromic = isLessThanMaxButNotBalanced\
    \ && !isPalindromic\n        val isLessThanMaxButNotBalancedAndNotPalindromic\
    \ = isLessThanMaxButNotBalanced && !isPalindromic && !isBalanced\n        val\
    \ isLessThanMaxButNotBalancedAndNotPalindromicAndBalanced = isLessThanMaxButNotBalanced\
    \ && !isPalindromic && !isBalanced && !isPalindromic\n        val isLessThanMaxButNotBalancedAndNotPalindromicAndBalancedAndPalindromic\
    \ = isLessThanMaxButNotBalanced && !isPalindromic && !isBalanced && !isPalindromic\
    \ && !isBalanced\n        val isLessThanMaxButNotBalancedAndNotPalindromicAndBalancedAndPalindromicAndNotBalanced\
    \ = isLessThanMaxButNotBalanced && !isPalindromic && !isBalanced && !isPalindromic\
    \ && !isBalanced && !isPalindromic\n        val isLessThanMaxButNotBalancedAndNotPalindromicAndBalancedAndPalindromicAndNotBalancedAndPalindromic\
    \ = isLessThanMaxButNotBalanced && !isPalindromic && !isBalanced && !isPalindromic\
    \ && !isBalanced && !isPalindromic && !isBalanced\n        val isLessThanMaxButNotBalancedAndNotPalindromicAndBalancedAndPalindromicAndNotBalancedAndPalindromicAndNotPalin",
  "        val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong * q.sum\n\
    \        val maxWeight2 = w.toLong * q.foldLeft(0)(_ + _)\n        val maxWeight3\
    \ = w.toLong * q.foldRight(0)(_ + _)\n        val maxWeight4 = w.toLong * q.foldRight(BigInt(0))(_\
    \ + _)\n        val maxWeight5 = w.toLong * q.foldRight(BigInt(0))(_ + _)\n  \
    \      val maxWeight6 = w.toLong * q.foldRight(BigInt(0))(_ + _)\n        val\
    \ maxWeight7 = w.toLong * q.foldRight(BigInt(0))(_ + _)\n        val maxWeight8\
    \ = w.toLong * q.foldRight(BigInt(0))(_ + _)\n        val maxWeight9 = w.toLong\
    \ * q.foldRight(BigInt(0))(_ + _)\n        val maxWeight10 = w.toLong * q.foldRight(BigInt(0))(_\
    \ + _)\n        val maxWeight11 = w.toLong * q.foldRight(BigInt(0))(_ + _)\n \
    \       val maxWeight12 = w.toLong * q.foldRight(BigInt(0))(_ + _)\n        val\
    \ maxWeight13 = w.toLong * q.foldRight(BigInt(0))(_ + _)\n        val maxWeight14\
    \ = w.toLong * q.foldRight(BigInt(0))(_ + _)\n        val maxWeight15 = w.toLong\
    \ * q.foldRight(BigInt(0))(_ + _)\n        val maxWeight16 = w.toLong * q.foldRight(BigInt(0))(_\
    \ + _)\n        val maxWeight17 = w.toLong * q.foldRight(BigInt(0))(_ + _)\n \
    \       val maxWeight18 = w.toLong * q.foldRight(BigInt(0))(_ + _)\n        val\
    \ maxWeight19 = w.toLong * q.foldRight(BigInt(0))(_ + _)\n        val maxWeight20\
    \ = w.toLong * q.foldRight(BigInt(0))(_ + _)\n        val maxWeight21 = w.toLong\
    \ * q.foldRight(BigInt(0))(_ + _)\n        val maxWeight22 = w.toLong * q.foldRight(BigInt(0))(_\
    \ + _)\n        val maxWeight23 = w.toLong * q.foldRight(BigInt(0))(_ + _)\n \
    \       val maxWeight24 = w.toLong * q.foldRight(BigInt(0))(_ + ", "        val\
    \ maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic\
    \ = q.reverse.forall(_ == q(0))\n        val isBalanced = maxSum < maxWeight\n\
    \        val isFlippable = q.forall(_ < maxWeight)\n        isPalindromic && isBalanced\
    \ && isFlippable", "        val maxSum = w.toLong * q.length\n        val maxWeight\
    \ = w.toLong * q.sum\n        val maxWeightSum = w.toLong * q.sum\n        val\
    \ maxWeightSumOfQ = q.sum\n        val maxWeightSumOfQAndQ = q.sum * q.length\n\
    \        val maxWeightSumOfQAndQAndQ = q.sum * q.length * q.length\n        val\
    \ maxWeightSumOfQAndQAndQAndQ = q.sum * q.length * q.length * q.length\n     \
    \   val maxWeightSumOfQAndQAndQAndQAndQAndQ = q.sum * q.length * q.length * q.length\
    \ * q.length * q.length\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.sum * q.length * q.length * q.length * q.length * q.length * q.length *\
    \ q.length\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQ = q.sum\
    \ * q.length * q.length * q.length * q.length * q.length * q.length * q.length\
    \ * q.length\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.sum * q.length * q.length * q.length * q.length * q.length * q.length *\
    \ q.length * q.length * q.length * q.length\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.sum * q.length * q.length * q.length * q.length * q.length * q.length *\
    \ q.length * q.length * q.length * q.length * q.length\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.sum * q.length * q.length * q.length * q.length * q.length * q.length *\
    \ q.length * q.length * q.length * q.length * q.length * q.length * q.length\n\
    \        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ =\
    \ q.sum * q.length * q.length * q.length * q.length * q.length * q.length * q.length\
    \ * q.length * q.length * q.length * q.length", "        val maxWeight = w\n \
    \       val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isBalanced = maxSum < maxWeight\n        val isFlippable\
    \ = q.forall(x => x > maxWeight)\n        val isFlippableAndBalanced = isFlippable\
    \ && isBalanced\n        isFlippableAndBalanced", "        val maxWeight = w\n\
    \        val maxSum = q.sum\n        val palindromic = q.reverse.forall(x => x\
    \ == q.head)\n        val balanced = palindromic && maxSum < maxWeight\n     \
    \   val unbalanced = !palindromic && maxSum > maxWeight\n        balanced && unbalanced",
  "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum\
    \ < maxWeight\n        isPalindromic && isBalanced", "        val maxWeight =\
    \ w\n        val maxSum = q.reduce(_ + _)\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isBalanced = maxSum < maxWeight\n        val isFlippable\
    \ = q.forall(x => x < maxWeight)\n        isPalindromic && isBalanced && isFlippable",
  "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val\
    \ balanced = q.reverse.foldLeft(false)((acc, x) => acc && x == maxSum)\n     \
    \   val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced\
    \ = balanced && isPalindromic\n        val isLessThanMaxWeight = maxSum - q.sum\
    \ <= maxWeight\n        isBalanced && isLessThanMaxWeight", "        val maxWeight\
    \ = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic =\
    \ q.reverse.forall(_ == q.head)\n        val isBalanced = maxSum < maxWeight\n\
    \        isPalindromic && isBalanced", "        val maxWeight = w\n        val\
    \ maxSum = q.reduce(_ + _)\n        val isPalindromic = q.reverse.forall(x =>\
    \ x == q(0))\n        val isBalanced = q.forall(x => x <= maxWeight && x >= 0)\n\
    \        val isLessThanMax = maxSum - maxWeight < 0\n        val isLessThanMaxBalanced\
    \ = isLessThanMax && isBalanced\n        val isLessThanMaxPalindromic = isLessThanMax\
    \ && isPalindromic\n        val isLessThanMaxPalindromicBalanced = isLessThanMaxPalindromic\
    \ && isBalanced\n        val isLessThanMaxPalindromicBalancedAndPalindromic =\
    \ isLessThanMaxPalindromicBalanced && isPalindromic\n        val isLessThanMaxPalindromicBalancedAndPalindromicBalanced\
    \ = isLessThanMaxPalindromicBalancedAndPalindromic && isBalanced\n        val\
    \ isLessThanMaxPalindromicBalancedAndPalindromicBalancedAndPalindromic = isLessThanMaxPalindromicBalancedAndPalindromicBalanced\
    \ && isPalindromic && isBalanced\n        val isLessThanMaxPalindromicBalancedAndPalindromicBalancedAndPalindromicBalanced\
    \ = isLessThanMaxPalindromicBalancedAndPalindromicBalancedAndPalindromic && isBalanced\
    \ && isPalindromic\n        val isLessThanMaxPalindromicBalancedAndPalindromicBalancedAndPalindromicBalancedAndPalindromic\
    \ = isLessThanMaxPalindromicBalancedAndPalindromicBalancedAndPalindromic && isBalanced\
    \ && isPalindromic && isPalindromic\n        val isLessThanMaxPalindromicBalancedAndPalindromicBalancedAndPalindromicBalancedAndPalindromicBalanced\
    \ = isLessThanMaxPalindromicBalancedAndPalindromicBalancedAndPalindromicBalanced\
    \ && isPalindromic && isPalindromic && isBalanced\n        val isLessThanMaxPalindromicBalancedAndPalindromicBalancedAndPalindromicBalancedAndPalindromicBalancedAndPalindromic\
    \ = isLessThanMax", "        val maxWeight = w\n        val maxSum = q.reduceLeft(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(_ == q(0))\n        val isBalanced\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeight = maxSum < maxWeight\n\
    \        val isLessThanMaxSum = maxSum < maxWeight\n        val isLessThanMaxSumAndBalanced\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeight\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeightAndIsPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeightAndIsPalindromicAndIsBalanced\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeightAndIsPalindromicAndIsBalancedAndIsLessThanMaxWeight\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeightAndIsPalindromicAndIsBalancedAndIsLessThanMaxWeightAndIsPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeightAndIsPalindromicAndIsBalancedAndIsLessThanMaxWeightAndIsPalindromicAndIsBalanced\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeightAndIsPalindromicAndIsBalancedAndIsLessThanMaxWeightAndIsPalindromicAndIsBalancedAndIsLessThanMaxWeight\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeightAndIsPalindromicAndIsBalancedAndIsLessThanMaxWeightAndIsPalindromicAndIsBalancedAndIsLessThanMaxWeightAndIsPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeightAndIsPalindromicAndIsBalanced",
  "        val maxWeight = w\n        val sumOfElements = q.sum\n        val isPalindromic\
    \ = q.isPalindromic\n        val isBalanced = isPalindromic && sumOfElements <=\
    \ maxWeight\n        val isLessThanMaxWeight = sumOfElements < maxWeight\n   \
    \     isBalanced && isLessThanMaxWeight", "        val maxWeight = w\n       \
    \ val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic = q.reverse.forall(_\
    \ == q.head)\n        val isBalanced = q.forall(_ <= maxWeight)\n        val isFlippable\
    \ = q.forall(_ <= maxSum)\n        isPalindromic && isBalanced && isFlippable",
  "        val maxWeight = w\n        val maxSum = q.reduce(_ + _)\n        val isPalindromic\
    \ = q == q.reverse\n        val isBalanced = maxSum < maxWeight\n        val isLessOrEqual\
    \ = maxSum == maxWeight\n        isPalindromic && isBalanced && isLessOrEqual",
  "        val maxSum = w.toLong * q.length\n        val maxSumOfElements = q.foldLeft(0)(_\
    \ + _)\n        val isPalindromic = q == q.reverse\n        val isBalanced = maxSumOfElements\
    \ <= maxSum\n        val isFlippable = isPalindromic && isBalanced\n        val\
    \ isLessThanMax = maxSumOfElements < maxSum\n        val isLessThanMaxAndBalanced\
    \ = isLessThanMax && isBalanced\n        isFlippable && isLessThanMaxAndBalanced",
  "        val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong\n  \
    \      val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val isPalindromic\
    \ = maxSumOfElements.toLong == maxSum\n        val isBalanced = maxSumOfElements.toLong\
    \ <= maxWeight\n        val isFlippable = maxSumOfElements.toLong <= maxSum\n\
    \        val isFlippableAndBalanced = isFlippable && isBalanced\n        val isFlippableAndBalancedAndPalindromic\
    \ = isFlippableAndBalanced && isPalindromic\n        isFlippableAndBalancedAndPalindromic",
  "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(_ == q.head)\n        val isBalanced = maxSum\
    \ < maxWeight\n        val isFlippable = q.forall(_ < 0)\n        val isFlippableAndBalanced\
    \ = isFlippable && isBalanced\n        isPalindromic && isBalanced && isFlippableAndBalanced",
  "        val maxSum = w.toLong * q.length\n        val sum = 0L\n        q.foreach\
    \ { x => sum += x }\n        sum < maxSum && sum == sum.reverse", "        val\
    \ maxSum = w.toLong * q.length\n        val maxWeight = w.toLong\n        val\
    \ maxWeightSum = w.toLong * q.length\n        val maxWeightSumOfQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n \
    \       val maxWeightSumOfQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n     \
    \   val maxWeightSumOfQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n     \
    \   val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n \
    \       val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ =\
    \ q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val max", "        val maxWeight = w\n     \
    \   val maxSum = q.sum\n        val maxSumOfElements = q.map(x => math.abs(x -\
    \ maxSum)).max\n        val isPalindromic = q.isPalindromic\n        val isBalanced\
    \ = isPalindromic && maxSumOfElements <= maxWeight\n        val isLessThanMaxWeight\
    \ = maxSumOfElements < maxWeight\n        val isLessThanMaxSum = maxSumOfElements\
    \ < maxSum\n        val isLessThanMaxSumOfElements = maxSumOfElements < maxSumOfElements\n\
    \        val isLessThanMaxSumOfElementsAndBalanced = isLessThanMaxSumOfElements\
    \ && isBalanced\n        val isLessThanMaxSumOfElementsAndNotBalanced = isLessThanMaxSumOfElements\
    \ && !isBalanced\n        isLessThanMaxWeight || isLessThanMaxSum || isLessThanMaxSumOfElements\
    \ || isLessThanMaxSumOfElementsAndBalanced || isLessThanMaxSumOfElementsAndNotBalanced",
  "        val maxSum = w.toLong * q.length\n        val sums = q.map(x => x.toLong).sum\n\
    \        sums <= maxSum", "        val maxSum = w.toLong * q.length\n        val\
    \ sums = q.map(x => x.toLong).sum\n        sums <= maxSum", "        val maxWeight\
    \ = w\n        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_\
    \ == q(0))\n        val isBalanced = maxSum < maxWeight\n        isPalindromic\
    \ && isBalanced", "        val maxSum = w.toLong * q.length\n        val maxSumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n\
    \        val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isLessOrEqualToMaxSum\
    \ = maxSumOfElements <= maxSum\n        isBalanced && isPalindromic && isLessOrEqualToMaxSum",
  "        val maxWeight = w\n        val sumOfElements = q.sum\n        val isPalindromic\
    \ = q.isReverse.forall(x => x == q.head)\n        val isBalanced = sumOfElements\
    \ <= maxWeight\n        val isFlippable = q.tail.forall(x => x == q.head)\n  \
    \      val isFlippable = q.tail.forall(x => x == q.tail.head)\n        val isFlippable\
    \ = q.tail.forall(x => x == q.tail.tail.head)\n        val isFlippable = q.tail.forall(x\
    \ => x == q.tail.tail.tail.head)\n        val isFlippable = q.tail.forall(x =>\
    \ x == q.tail.tail.tail.tail.head)\n        val isFlippable = q.tail.forall(x\
    \ => x == q.tail.tail.tail.tail.tail.head)\n        val isFlippable = q.tail.forall(x\
    \ => x == q.tail.tail.tail.tail.tail.tail.head)\n        val isFlippable = q.tail.forall(x\
    \ => x == q.tail.tail.tail.tail.tail.tail.tail.head)\n        val isFlippable\
    \ = q.tail.forall(x => x == q.tail.tail.tail.tail.tail.tail.tail.tail.head)\n\
    \        val isFlippable = q.tail.forall(x => x == q.tail.tail.tail.tail.tail.tail.tail.tail.tail.head)\n\
    \        val isFlippable = q.tail.forall(x => x == q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head)\n\
    \        val isFlippable = q.tail.forall(x => x == q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head)\n\
    \        val isFlippable = q.tail.forall(x => x == q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head)\n\
    \        val isFlippable = q.tail.forall(x => x == q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head)\n\
    \        val isFlippable = q.tail.forall(x => x == q.tail.tail.tail.tail.tail.tail",
  "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum\
    \ < maxWeight\n        val isLessThanMaxWeight = maxSum < maxWeight\n        val\
    \ isLessThanMaxSum = maxSum < maxWeight\n        val isLessThanMaxSumAndBalanced\
    \ = maxSum < maxWeight && maxSum == maxWeight\n        val isLessThanMaxWeightAndBalanced\
    \ = maxSum < maxWeight && maxSum == maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic\n        val isLessThanMaxWeightAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeight\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && isLessThanMaxWeight\n\
    \        val isLessThanMaxWeightAndBalancedAndPalindromicAndLessThanMaxWeight\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && isLessThanMaxWeight\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeightAndLessThanMaxSum\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && isLessThanMaxWeight\
    \ && isLessThanMaxSum\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndLessThanMaxWeightAndLessThanMaxSum\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && isLessThanMaxWeight\
    \ && isLessThanMaxSum\n        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxWeightAndLessThanMaxSumAndLessThanMaxWeight\
    \ = maxSum < maxWeight && maxSum == maxWeight && isPalindromic && isLessThanMaxWeight\
    \ && isLessThanMaxSum && isLessThanMaxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndLessThanMaxWeightAndLessThanMaxSumAndLessThanMaxWeight\
    \ = maxSum < maxWeight && maxSum == maxWeight && is", "        val maxSum = w.toLong\
    \ * q.length\n        val sums = q.map(x => x.toLong).sum\n        sums <= maxSum",
  "        val maxWeight = w\n        val maxSum = q.sum\n        val isPalindromic\
    \ = q.reverse.forall(_ == q.head)\n        val isBalanced = maxSum - q.sum < maxWeight\n\
    \        isPalindromic && isBalanced", "        val maxSum = w.toLong * q.length\n\
    \        val maxWeight = w.toLong\n        val maxWeightSum = w.toLong * q.length\n\
    \        val maxWeightSumOfElements = w.toLong * q.sum\n        val maxWeightSumOfElementsOfElements\
    \ = w.toLong * q.sum * q.length\n        val maxWeightSumOfElementsOfElementsOfElements\
    \ = w.toLong * q.sum * q.sum * q.length\n        val maxWeightSumOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong * q.sum * q.sum * q.sum * q.length\n        val maxWeightSumOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong * q.sum * q.sum * q.sum * q.sum * q.length\n        val maxWeightSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong * q.sum * q.sum * q.sum * q.sum * q.sum * q.length\n        val maxWeightSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong * q.sum * q.sum * q.sum * q.sum * q.sum * q.sum * q.sum\n       \
    \ val maxWeightSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong * q.sum * q.sum * q.sum * q.sum * q.sum * q.sum * q.sum * q.sum\n\
    \        val maxWeightSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong * q.sum * q.sum * q.sum * q.sum * q.sum * q.sum * q.sum * q.sum *\
    \ q.sum\n        val maxWeightSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong * q.sum * q.sum * q.sum * q.sum * q.sum * q.sum * q.sum * q.sum *\
    \ q.sum * q.sum\n        val maxWeightSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = w.toLong * q.sum * q.", "        val maxWeight = w.toLong\n        val maxSum\
    \ = q.reduce(_ + _)\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n\
    \        val isBalanced = maxSum < maxWeight\n        val isLessThanMaxWeight\
    \ = maxSum < maxWeight * 2\n        val isLessThanMaxSum = maxSum < maxWeight\
    \ * 3\n        val isLessThanMaxWeightAndBalanced = isLessThanMaxWeight && isBalanced\n\
    \        val isLessThanMaxSumAndBalanced = isLessThanMaxSum && isBalanced\n  \
    \      val isLessThanMaxWeightAndBalancedAndPalindromic = isLessThanMaxWeightAndBalanced\
    \ && isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromic = isLessThanMaxSumAndBalanced\
    \ && isPalindromic\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromic\
    \ = isLessThanMaxWeightAndBalancedAndPalindromic && !isPalindromic\n        val\
    \ isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromic = isLessThanMaxSumAndBalancedAndPalindromic\
    \ && !isPalindromic\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced\
    \ = isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromic && !isPalindromic\
    \ && !isBalanced\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced\
    \ = isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromic && !isPalindromic\
    \ && !isBalanced\n        isLessThanMaxWeightAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced",
  "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(_ == q.head)\n        val isBalanced = maxSum\
    \ < maxWeight\n        val isLessThanMaxWeight = maxSum - maxWeight < 0\n    \
    \    val isLessThanMaxSum = maxSum < 0\n        val isLessThanMaxSumAndBalanced\
    \ = isLessThanMaxWeight && isBalanced\n        val isLessThanMaxWeightAndBalanced\
    \ = isLessThanMaxSum && isBalanced\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = isLessThanMaxWeightAndBalanced && isPalindromic\n        val isLessThanMaxWeightAndBalancedAndPalindromic\
    \ = isLessThanMaxSumAndBalancedAndPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = isLessThanMaxSumAndBalancedAndPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = isLessThanMaxSumAndBalancedAndPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = isLessThanMaxSumAndBalancedAndPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = isLessThanMaxSumAndBalancedAndPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = isLessThanMaxSumAndBalancedAndPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = isLessThanMaxSumAndBalancedAndPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = isLessThanMaxSumAndBalancedAndPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = isLessThanMaxSumAndBalancedAndPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = isLessThanMaxSumAndBalancedAndPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = isLessThanMaxSumAndBalancedAndPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = isLessThanMaxSumAndBalancedAndPalindromic\n        val isLessThanMaxSumAndBalancedAndP",
  "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum\
    \ < maxWeight\n        val isLessThanMaxWeight = maxSum < maxWeight\n        val\
    \ isLessThanMaxSum = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalanced\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalanced = maxSum < maxWeight\n\
    \        val isLessThanMaxWeightAndBalancedAndPalindromic = maxSum < maxWeight\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromic = maxSum < maxWeight\n\
    \        val isLessThanMaxWeightAndBalancedAndPalindromicAndPalindromic = maxSum\
    \ < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndPalindromicAndPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndPalindromicAndPalindromicAndPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndPalindromicAndPalindromicAndPalindromicAndPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndPalindromicAndPalindromicAndPalindromicAndPalindromicAndPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndPalindromicAndPalindromicAndPalindromicAndPalindromicAndPalindromicAndPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalancedAndPalindromicAndPalindromicAndPalindromicAndPalindromicAndPalindromicAndPalindromicAndPalindromicAndPalindromic\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndPalindromicAndPalindromicAndPalindromicAndPalindro",
  "        val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong * q.last\n\
    \        val palindromic = q.reverse.forall(x => x <= maxWeight)\n        val\
    \ sum = palindromic && q.sum <= maxSum\n        sum", "        val maxWeight =\
    \ w\n        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isBalanced = maxSum == maxWeight\n        val isLessOrEqual\
    \ = maxSum <= maxWeight\n        isPalindromic && isBalanced && isLessOrEqual",
  "        val maxWeight = w\n        val maxSum = q.reduce(_ + _)\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum == maxWeight\n\
    \        val isLessOrEqual = maxSum < maxWeight\n        val isLessOrEqualBalanced\
    \ = maxSum < maxWeight && isBalanced\n        val isLessOrEqualPalindromic = maxSum\
    \ < maxWeight && isPalindromic\n        val isLessOrEqualBalancedPalindromic =\
    \ maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessOrEqualPalindromicBalanced\
    \ = maxSum < maxWeight && isPalindromic && isBalanced\n        val isLessOrEqualBalancedPalindromicBalanced\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && isBalanced\n        val\
    \ isLessOrEqualPalindromicBalancedPalindromic = maxSum < maxWeight && isPalindromic\
    \ && isBalanced && isPalindromic\n        val isLessOrEqualBalancedPalindromicBalancedPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && isBalanced && isPalindromic\n\
    \        val isLessOrEqualPalindromicBalancedPalindromicBalanced = maxSum < maxWeight\
    \ && isPalindromic && isBalanced && isPalindromic && isBalanced\n        val isLessOrEqualBalancedPalindromicBalancedPalindromicBalanced\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && isBalanced && isPalindromic\
    \ && isBalanced\n        val isLessOrEqualPalindromicBalancedPalindromicBalancedPalindromic\
    \ = maxSum < maxWeight && isPalindromic && isBalanced && isPalindromic && isBalanced\
    \ && isPalindromic\n        val isLessOrEqualBalancedPalindromicBalancedPalindromicBalancedPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && isBalanced && isPalindromic\
    \ && isBalanced && isPalindromic\n        val isLessOrEqualPalindromicBalancedPalindromicBalancedPalindromicBalancedPalindro",
  "        val maxWeight = w\n        val sumOfElements = q.foldLeft(0)(_ + _)\n \
    \       sumOfElements <= maxWeight", "        val maxWeight = w\n        val maxSum\
    \ = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(x => x ==\
    \ q(0))\n        val isBalanced = maxSum < maxWeight\n        val isFly = isPalindromic\
    \ && isBalanced\n        val isNotFly = !isPalindromic && !isBalanced\n      \
    \  isFly", "        val maxWeight = w\n        val sumOfElements = q.sum\n   \
    \     val isPalindromic = q.reverse.forall(_ == q.head)\n        val isBalanced\
    \ = sumOfElements <= maxWeight\n        val isFly = isPalindromic && isBalanced\n\
    \        val isNotFly = !isPalindromic && !isBalanced\n        isFly", "     \
    \   val maxSum = w.toLong * q.length\n        val maxSumOfElements = q.foldLeft(0)(_\
    \ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isLessOrEqualToMaxSum = maxSumOfElements\
    \ <= maxSum\n        val isLessOrEqualToMaxSumOfElements = q.foldLeft(0)(_ + _)\
    \ <= maxSumOfElements\n        isBalanced && isPalindromic && isLessOrEqualToMaxSum\
    \ && isLessOrEqualToMaxSumOfElements", "        val maxWeight = w\n        val\
    \ maxSum = q.reduce(_ + _)\n        val isPalindromic = q.reverse.forall(x =>\
    \ x == q(0))\n        val isBalanced = maxSum - q.length <= maxWeight\n      \
    \  isPalindromic && isBalanced", "        val maxWeight = w\n        val maxSum\
    \ = q.foldLeft(0)(_ + _)\n        val isPalindromic = q.reverse.forall(_ == q.head)\n\
    \        val isBalanced = maxSum < maxWeight\n        val isFlippable = q.forall(x\
    \ => x != q.head)\n        val isFlippableAndBalanced = isFlippable && isBalanced\n\
    \        val isFlippableAndPalindromic = isFlippable && isPalindromic\n      \
    \  val isFlippableAndBalancedAndPalindromic = isFlippableAndBalanced && isPalindromic\n\
    \        isFlippableAndBalancedAndPalindromic", "        val maxSum = w.toLong\n\
    \        val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val isPalindromic\
    \ = q.isEmpty || q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSumOfElements\
    \ <= maxSum\n        isPalindromic && isBalanced", "        val maxSum = w.toLong\n\
    \        val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSumOfElements\
    \ <= maxSum\n        val isFlipped = q.forall(x => x == q.reverse(0))\n      \
    \  isPalindromic && isBalanced && isFlipped", "        val maxWeight = w\n   \
    \     val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isBalanced = q.forall(x => x <= maxWeight && x >=\
    \ maxWeight - q(0))\n        val isLessThanMax = q.forall(x => x <= maxWeight\
    \ && x >= maxSum)\n        isPalindromic && isBalanced && isLessThanMax", "  \
    \      val maxWeight = w\n        val maxSum = q.sum\n        val isPalindromic\
    \ = q.isPalindromic\n        val isBalanced = isPalindromic && maxSum == maxWeight\n\
    \        val isLessThanMax = maxSum < maxWeight\n        val isLessThanMaxAndBalanced\
    \ = isLessThanMax && isBalanced\n        val isLessThanMaxAndBalancedAndNotPalindromic\
    \ = isLessThanMaxAndBalanced && !isPalindromic\n        val isLessThanMaxAndBalancedAndPalindromic\
    \ = isLessThanMaxAndBalanced && isPalindromic\n        val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromic\
    \ = isLessThanMaxAndBalancedAndPalindromic && !isPalindromic\n        val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced\
    \ = isLessThanMaxAndBalancedAndPalindromicAndNotPalindromic && !isBalanced\n \
    \       val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = isLessThanMaxAndBalancedAndPalindromicAndNotPalindromic && !isBalanced &&\
    \ !isPalindromic\n        val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromic\
    \ = isLessThanMaxAndBalancedAndPalindromicAndNotPalindromic && !isBalanced &&\
    \ !isPalindromic && !isPalindromic\n        val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromicAndNotBalanced\
    \ = isLessThanMaxAndBalancedAndPalindromicAndNotPalindromic && !isBalanced &&\
    \ !isPalindromic && !isPalindromic && !isBalanced\n        val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = isLessThanMaxAndBalancedAndPalindromicAndNotPalindromic && !isBalanced &&\
    \ !isPalin", "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ +\
    \ _)\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n        val\
    \ isBalanced = maxSum < maxWeight\n        val isFlipped = q.forall(x => x !=\
    \ q(0))\n        val isLessThanMaxWeight = maxSum < maxWeight\n        val isLessThanMaxSum\
    \ = maxSum < maxWeight\n        val isLessThanMaxSumAndBalanced = maxSum < maxWeight\
    \ && maxSum == q.reduceLeft(_ + _)\n        val isLessThanMaxSumAndFlipped = maxSum\
    \ < maxWeight && maxSum == q.reduceLeft(_ + _) && q.forall(x => x != q(0))\n \
    \       val isLessThanMaxSumAndFlippedAndBalanced = maxSum < maxWeight && maxSum\
    \ == q.reduceLeft(_ + _) && q.forall(x => x != q(0)) && q.forall(x => x == q(0))\n\
    \        val isLessThanMaxSumAndFlippedAndBalancedAndPalindromic = maxSum < maxWeight\
    \ && maxSum == q.reduceLeft(_ + _) && q.forall(x => x != q(0)) && q.forall(x =>\
    \ x == q(0)) && q.reverse.forall(x => x == q(0))\n        val isLessThanMaxSumAndFlippedAndBalancedAndPalindromicAndFlipped\
    \ = maxSum < maxWeight && maxSum == q.reduceLeft(_ + _) && q.forall(x => x !=\
    \ q(0)) && q.forall(x => x == q(0)) && q.reverse.forall(x => x == q(0)) && q.forall(x\
    \ => x != q(0))\n        val isLessThanMaxSumAndFlippedAndBalancedAndPalindromicAndFlippedAndBalanced\
    \ = maxSum < maxWeight && maxSum == q.reduceLeft(_ + _) && q.forall(x => x !=\
    \ q(0)) && q.forall(x => x == q(0)) && q.reverse.forall(x => x == q(0)) && q.forall(x\
    \ => x != q(0)) && q.forall(x => x == q(0))\n        val isLessThanMaxSumAndFlippedAndBalancedAndPalindromicAndFlippedAndBalancedAndFlipped\
    \ = maxSum < maxWeight && max", "        val maxWeight = w\n        val maxSum\
    \ = q.foldLeft(0)(_ + _)\n        val isPalindromic = q.reverse.forall(x => x\
    \ == q.head)\n        val isBalanced = maxSum < maxWeight\n        val isLessThanMaxWeight\
    \ = maxSum < w\n        val isLessThanMaxSum = maxSum < q.foldLeft(0)(_ + _)\n\
    \        isPalindromic && isBalanced && isLessThanMaxWeight && isLessThanMaxSum",
  "        val maxWeight = w\n        val maxSum = q.reduce(_ + _)\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q.reduceRight(_ + _))\n        val isBalanced =\
    \ q.forall(x => x <= maxWeight && x >= 0)\n        val isLessOrEqual = q.forall(x\
    \ => x <= maxWeight && x >= 0)\n        isPalindromic && isBalanced && isLessOrEqual\
    \ && maxSum < maxWeight", "        val maxSum = w.toLong\n        val maxSumOfQ\
    \ = q.sum\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n    \
    \    val isBalanced = q.forall(x => x <= maxSum)\n        val isLessThanMax =\
    \ maxSumOfQ - q.sum < maxSum\n        val isLessThanMaxOfQ = q.sum - maxSumOfQ\
    \ < maxSum\n        isPalindromic && isBalanced && isLessThanMax && isLessThanMaxOfQ",
  "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum\
    \ < maxWeight\n        isPalindromic && isBalanced", "        val maxWeight =\
    \ w\n        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isBalanced = maxSum < maxWeight\n        val isFly\
    \ = isPalindromic && isBalanced\n        val isNotFly = !isPalindromic && !isBalanced\n\
    \        isFly", "        val maxWeight = w\n        val sumOfElements = q.foldLeft(0)(_\
    \ + _)\n        sumOfElements <= maxWeight", "        val maxWeight = w\n    \
    \    val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isBalanced = maxSum == maxWeight\n        isPalindromic\
    \ && isBalanced", "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(x => x == q.head)\n     \
    \   val isBalanced = maxSum - q.sum < maxWeight\n        isPalindromic && isBalanced",
  "        val maxWeight = w\n        val maxSum = q.reduce(_ + _)\n        val isPalindromic\
    \ = q.isReverse.forall(x => x == q(0))\n        val isBalanced = maxSum < maxWeight\n\
    \        val isLessThanMaxWeight = maxSum < maxWeight\n        val isLessThanMaxSum\
    \ = maxSum < maxWeight\n        val isLessThanMaxWeightAndBalanced = maxSum <\
    \ maxWeight && isBalanced\n        val isLessThanMaxSumAndBalanced = maxSum <\
    \ maxWeight && isBalanced\n        val isLessThanMaxWeightAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxWeightAndBalancedAndPalindromicAndLessThanMaxSum\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && isLessThanMaxSum\n  \
    \      val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxSum = maxSum\
    \ < maxWeight && isBalanced && isPalindromic && isLessThanMaxSum\n        val\
    \ isLessThanMaxWeightAndBalancedAndPalindromicAndLessThanMaxSumAndLessThanMaxWeight\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && isLessThanMaxSumAndLessThanMaxWeight\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxSumAndLessThanMaxWeight\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && isLessThanMaxSumAndLessThanMaxWeight\n\
    \        val isLessThanMaxWeightAndBalancedAndPalindromicAndLessThanMaxSumAndLessThanMaxWeightAndBalanced\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && isLessThanMaxSumAndLessThanMaxWeightAndBalanced\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromicAndLessThanMaxSumAndLessThanMaxWeightAndBalanced\
    \ = maxSum < maxWeight && isBalanced && isPalindromic && isLessThanMaxSumAndLessThanMaxWeightAndBalanced\n\
    \        val isLessThanMaxWeightAndBalancedAndPalindromic", "        val maxWeight\
    \ = w\n        val maxSum = q.sum\n        val palindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val balanced = palindromic && q.forall(x => x <= maxWeight)\n\
    \        val sumLessThanMax = q.sum < maxWeight\n        val sumLessThanMaxButNotBalanced\
    \ = q.sum < maxWeight && !balanced\n        val sumLessThanMaxButBalanced = q.sum\
    \ < maxWeight && balanced\n        val sumGreaterThanMax = q.sum > maxWeight\n\
    \        val sumGreaterThanMaxButNotBalanced = q.sum > maxWeight && !balanced\n\
    \        val sumGreaterThanMaxButBalanced = q.sum > maxWeight && balanced\n  \
    \      val sumEqualMax = q.sum == maxWeight\n        val sumEqualMaxButNotBalanced\
    \ = q.sum == maxWeight && !balanced\n        val sumEqualMaxButBalanced = q.sum\
    \ == maxWeight && balanced\n        val sumLessThanMaxButNotBalancedButEqualMax\
    \ = q.sum < maxWeight && !balanced && q.sum == maxWeight\n        val sumLessThanMaxButBalancedButEqualMax\
    \ = q.sum < maxWeight && balanced && q.sum == maxWeight\n        val sumGreaterThanMaxButNotBalancedButEqualMax\
    \ = q.sum > maxWeight && !balanced && q.sum == maxWeight\n        val sumGreaterThanMaxButBalancedButEqualMax\
    \ = q.sum > maxWeight && balanced && q.sum == maxWeight\n        val sumEqualMaxButNotBalancedButEqualMax\
    \ = q.sum == maxWeight && !balanced && q.sum == maxWeight\n        val sumEqualMaxButBalancedButEqualMax\
    \ = q.sum == maxWeight && balanced && q.sum == maxWeight\n        val sumLessThanMaxButNotBalancedButEqualMaxButNotBalanced\
    \ = q.sum < maxWeight && !balanced && q.sum == maxWeight && !balanced\n      \
    \  val sumLessThanMaxButBalancedButEqualMaxButNotBalanced = q.sum < maxWeight\
    \ && balanced && q.sum == maxWeight && !balanced\n        val sumGreaterThanMaxButNotBalancedButEqualMaxButNotBalanced\
    \ = q.sum > maxWeight && !balanced && q.sum == maxWeight && !balanced\n      \
    \  val sumGreaterThanMaxButBalancedButEqualMaxButNotBalanced = q.sum > maxWeight\
    \ && balanced && q.sum == maxWeight && !balance", "        val maxWeight = w\n\
    \        val maxSum = q.reduce(_ + _)\n        val isPalindromic = q.isEmpty ||\
    \ q.reverse.forall(x => x == q(0))\n        val isBalanced = q.reduce(_ + _) <=\
    \ maxWeight\n        val isLessThanMaxWeight = maxSum < maxWeight\n        val\
    \ isLessThanMaxSum = maxSum < q.reduce(_ + _)\n        isPalindromic && isBalanced\
    \ && isLessThanMaxWeight && isLessThanMaxSum", "        val maxWeight = w\n  \
    \      val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isBalanced = q.foldLeft(false)((acc, x) => acc &&\
    \ x <= maxWeight && isPalindromic && x == q(q.length - 1))\n        val isLessThanMaxWeight\
    \ = q.foldLeft(false)((acc, x) => acc && x <= maxWeight && isBalanced && x ==\
    \ q(q.length - 1))\n        isLessThanMaxWeight", "        val maxWeight = w\n\
    \        val maxSum = q.sum\n        val maxSumOfElements = q.sum\n        val\
    \ maxSumOfElementsOfPalindromes = q.sum\n        val maxSumOfElementsOfPalindromesOfPalindromes\
    \ = q.sum\n        val maxSumOfElementsOfPalindromesOfPalindromesOfPalindromes\
    \ = q.sum\n        val maxSumOfElementsOfPalindromesOfPalindromesOfPalindromesOfPalindromes\
    \ = q.sum\n        val maxSumOfElementsOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromes\
    \ = q.sum\n        val maxSumOfElementsOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromes\
    \ = q.sum\n        val maxSumOfElementsOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromes\
    \ = q.sum\n        val maxSumOfElementsOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromes\
    \ = q.sum\n        val maxSumOfElementsOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromes\
    \ = q.sum\n        val maxSumOfElementsOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromes\
    \ = q.sum\n        val maxSumOfElementsOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromes\
    \ = q.sum\n        val maxSumOfElementsOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindromesOfPalindro",
  "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = q.forall(x\
    \ => x <= maxWeight && x >= maxWeight - q.reduceLeft(_ + _))\n        val isLessThanMax\
    \ = q.forall(x => x <= maxWeight && x >= maxSum)\n        isPalindromic && isBalanced\
    \ && isLessThanMax", "        val maxWeight = w\n        val maxSum = q.reduce(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(x => x == q.reduceRight(_\
    \ + _))\n        val isBalanced = maxSum < maxWeight\n        isPalindromic &&\
    \ isBalanced", "        val maxSum = w.toLong * q.length\n        val maxSumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n\
    \        val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isLessThanMax\
    \ = maxSumOfElements < w\n        val isLessThanMaxOfElements = q.foldLeft(0)(_\
    \ + _) < w\n        isBalanced && isPalindromic && isLessThanMax && isLessThanMaxOfElements",
  "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum\
    \ == maxWeight\n        val isLessOrEqual = maxSum < maxWeight\n        isPalindromic\
    \ && isBalanced && isLessOrEqual", "        val maxWeight = w\n        val maxSum\
    \ = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(x => x ==\
    \ q(0))\n        val isBalanced = maxSum == maxWeight\n        val isLessOrEqual\
    \ = maxSum < maxWeight\n        isPalindromic && isBalanced && isLessOrEqual",
  "        val maxWeight = w\n        val maxSum = q.reduce(_ + _)\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum == maxWeight\n\
    \        val isLessThanMaxWeight = maxSum < maxWeight\n        val isLessThanMaxSum\
    \ = maxSum < q.reduce(_ + _)\n        isPalindromic && isBalanced && isLessThanMaxWeight\
    \ && isLessThanMaxSum", "        val maxWeight = w\n        val maxSum = q.sum\n\
    \        val palindromic = q.reverse.forall(x => x == q.head)\n        val balanced\
    \ = palindromic && q.sum < maxWeight\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q.head)\n        val isBalanced = palindromic && q.sum < maxWeight\n\
    \        val isLessThanMax = q.sum < maxWeight\n        val isLessThanMaxPalindromic\
    \ = q.reverse.forall(x => x == q.head)\n        val isLessThanMaxPalindromicBalanced\
    \ = palindromic && q.sum < maxWeight\n        val isLessThanMaxPalindromicBalancedAndSumLessThanMax\
    \ = q.sum < maxWeight && palindromic\n        val isLessThanMaxPalindromicBalancedAndSumLessThanMaxPalindromic\
    \ = q.reverse.forall(x => x == q.head)\n        val isLessThanMaxPalindromicBalancedAndSumLessThanMaxPalindromicBalanced\
    \ = palindromic && q.sum < maxWeight\n        val isLessThanMaxPalindromicBalancedAndSumLessThanMaxPalindromicBalancedAndIsPalindromic\
    \ = q.sum < maxWeight && palindromic && isPalindromic\n        val isLessThanMaxPalindromicBalancedAndSumLessThanMaxPalindromicBalancedAndIsPalindromicBalanced\
    \ = palindromic && q.sum < maxWeight && palindromic && isPalindromic && isBalanced\n\
    \        val isLessThanMaxPalindromicBalancedAndSumLessThanMaxPalindromicBalancedAndIsPalindromicBalancedAndIsPalindromic\
    \ = q.sum < maxWeight && palindromic && isPalindromic && isBalanced && isPalindromic\n\
    \        val isLessThanMaxPalindromicBalancedAndSumLessThanMaxPalindromicBalancedAndIsPalindromicBalancedAndIsPalindromicBalanced\
    \ = palindromic && q.sum < maxWeight && palindromic && isPalindromic && isBalanced\
    \ && isPalindromic && isBalanced\n        val isLessThanMaxPalindromicBalancedAndSumLessThanMax",
  "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = q.forall(x\
    \ => x <= maxWeight && x >= maxWeight - q.last)\n        val isFlippable = q.forall(x\
    \ => x <= maxWeight && x >= maxWeight - q.last)\n        val isFlippableAndBalanced\
    \ = isFlippable && isBalanced\n        val isFlippableAndPalindromic = isFlippable\
    \ && isPalindromic\n        val isFlippableAndBalancedPalindromic = isFlippableAndPalindromic\
    \ && isBalanced\n        val isFlippableAndBalancedPalindromicPalindromic = isFlippableAndPalindromic\
    \ && isBalanced && isPalindromic\n        val isFlippableAndBalancedPalindromicPalindromicPalindromic\
    \ = isFlippableAndPalindromic && isBalanced && isPalindromic && isPalindromic\n\
    \        val isFlippableAndBalancedPalindromicPalindromicPalindromicPalindromic\
    \ = isFlippableAndPalindromic && isBalanced && isPalindromic && isPalindromic\
    \ && isPalindromic\n        val isFlippableAndBalancedPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = isFlippableAndPalindromic && isBalanced && isPalindromic && isPalindromic\
    \ && isPalindromic && isPalindromic\n        val isFlippableAndBalancedPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = isFlippableAndPalindromic && isBalanced && isPalindromic && isPalindromic\
    \ && isPalindromic && isPalindromic && isPalindromic\n        val isFlippableAndBalancedPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = isFlippableAndPalindro", "        val maxWeight = w\n        val maxSum =\
    \ q.foldLeft(0)(_ + _)\n        val isPalindromic = q.reverse.forall(x => x ==\
    \ q(0))\n        val isBalanced = q.foldLeft(false)((acc, x) => acc && x != q(0))\n\
    \        val isLessThanMax = maxSum < maxWeight\n        val isLessThanMaxAndBalanced\
    \ = isLessThanMax && isBalanced\n        val isLessThanMaxAndPalindromic = isLessThanMax\
    \ && isPalindromic\n        isLessThanMaxAndBalanced || isLessThanMaxAndPalindromic",
  "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = q.forall(x\
    \ => x <= maxWeight && x >= maxWeight - q.length)\n        val isLessOrEqual =\
    \ q.forall(x => x <= maxWeight && x >= maxWeight - q.length)\n        isPalindromic\
    \ && isBalanced && isLessOrEqual", "        val maxSum = w.toLong * q.length\n\
    \        val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val isBalanced =\
    \ maxSumOfElements <= maxSum\n        val isPalindromic = q.reverse.forall(x =>\
    \ x == q(0))\n        val isLessThanMax = maxSumOfElements < w\n        isBalanced\
    \ && isPalindromic && isLessThanMax", "        val maxWeight = w\n        val\
    \ maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isBalanced = maxSum == maxWeight\n        val isFlippable\
    \ = isPalindromic && isBalanced\n        val isFlippable = q.reverse.forall(x\
    \ => x == q(0))\n        isFlippable", "        val maxWeight = w\n        val\
    \ maxSum = q.sum\n        val isPalindromic = q.reverse.forall(x => x == q.head)\n\
    \        val isBalanced = q.forall(x => x <= maxWeight && x >= 0)\n        val\
    \ isLessThanMax = q.sum < maxWeight\n        val isLessThanMaxButNotBalanced =\
    \ q.sum < maxWeight && isBalanced\n        val isLessThanMaxButNotPalindromic\
    \ = q.sum < maxWeight && !isPalindromic\n        val isLessThanMaxButNotBalancedAndNotPalindromic\
    \ = q.sum < maxWeight && !isPalindromic && !isBalanced\n        val isLessThanMaxButNotBalancedAndNotPalindromicAndNotZero\
    \ = q.sum < maxWeight && !isPalindromic && !isBalanced && !q.exists(x => x ==\
    \ 0)\n        val isLessThanMaxButNotBalancedAndNotPalindromicAndNotZeroAndNotZero\
    \ = q.sum < maxWeight && !isPalindromic && !isBalanced && !q.exists(x => x ==\
    \ 0) && !q.exists(x => x == 0)\n        val isLessThanMaxButNotBalancedAndNotPalindromicAndNotZeroAndNotZeroAndNotZero\
    \ = q.sum < maxWeight && !isPalindromic && !isBalanced && !q.exists(x => x ==\
    \ 0) && !q.exists(x => x == 0) && !q.exists(x => x == 0)\n        val isLessThanMaxButNotBalancedAndNotPalindromicAndNotZeroAndNotZeroAndNotZeroAndNotZero\
    \ = q.sum < maxWeight && !isPalindromic && !isBalanced && !q.exists(x => x ==\
    \ 0) && !q.exists(x => x == 0) && !q.exists(x => x == 0) && !q.exists(x => x ==\
    \ 0)\n        val isLessThanMaxButNotBalancedAndNotPalindromicAndNotZeroAndNotZeroAndNotZeroAndNotZeroAndNotZero\
    \ = q.sum < maxWeight && !isPalindromic && !isBalanced && !q.exists(x => x ==\
    \ 0) && !q.exists(x => x == 0) && !q.exists(x => x == 0) && !q.exists(x => x ==\
    \ 0) && !q.exists(x => x == 0)\n        val isLessThanMaxButNotBalancedAndNotPalindromicAndNotZeroAndNotZeroAndNotZeroAndNotZeroAndNotZeroAndNotZero\
    \ = q.sum < maxWeight && !isPalindromic && !is", "        val maxWeight = w\n\
    \        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_\
    \ == q.head)\n        val isBalanced = maxSum == maxWeight\n        val isLessThanMaxWeight\
    \ = maxSum < maxWeight\n        val isLessThanMaxSum = maxSum < q.reduceLeft(_\
    \ + _)\n        val isLessThanMaxSumAndBalanced = isLessThanMaxWeight && isBalanced\n\
    \        val isLessThanMaxSumAndPalindromic = isLessThanMaxWeight && isPalindromic\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromic = isLessThanMaxWeight &&\
    \ isBalanced && isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromic\
    \ = isLessThanMaxWeight && isBalanced && !isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced\
    \ = isLessThanMaxWeight && !isBalanced && !isPalindromic && !isLessThanMaxWeight\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = isLessThanMaxWeight && !isBalanced && !isPalindromic && !isLessThanMaxWeight\
    \ && !isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromic\
    \ = isLessThanMaxWeight && !isBalanced && !isPalindromic && !isLessThanMaxWeight\
    \ && !isPalindromic && !isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromicAndNotPalindromic\
    \ = isLessThanMaxWeight && !isBalanced && !isPalindromic && !isLessThanMaxWeight\
    \ && !isPalindromic && !isPalindromic && !isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromicAndNotPalindromicAndNot",
  "        val maxWeight = w\n        val sumOfElements = q.sum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q.head)\n        val isBalanced = sumOfElements\
    \ <= maxWeight\n        val isFlippable = q.tail.forall(x => x <= maxWeight)\n\
    \        isPalindromic && isBalanced && isFlippable", "        val maxWeight =\
    \ w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isBalanced = q.forall(x => x <= maxWeight && x >=\
    \ 0)\n        val isLessThanMax = q.forall(x => x <= maxWeight && x >= 0)\n  \
    \      val isLessThanMaxAndBalanced = q.forall(x => x <= maxWeight && x >= 0 &&\
    \ isBalanced)\n        isPalindromic && isBalanced && isLessThanMax && isLessThanMaxAndBalanced",
  "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = q.forall(x\
    \ => x <= maxWeight && x >= maxWeight - q.length)\n        val isLessThanMax =\
    \ q.forall(x => x <= maxWeight && x >= maxSum)\n        isPalindromic && isBalanced\
    \ && isLessThanMax", "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n       \
    \ val isBalanced = q.forall(x => x <= maxWeight && x >= maxWeight - q.length)\n\
    \        val isLessThanMax = q.forall(x => x <= maxWeight && x >= maxSum)\n  \
    \      isPalindromic && isBalanced && isLessThanMax", "        val maxWeight =\
    \ w\n        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_\
    \ == q)\n        val isBalanced = maxSum < maxWeight\n        val isFlipped =\
    \ q.forall(_ < w)\n        val isFlippedAndBalanced = isFlipped && isBalanced\n\
    \        isPalindromic && isBalanced && isFlippedAndBalanced", "        val maxWeight\
    \ = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic =\
    \ q.reverse.forall(x => x == q(0))\n        val isBalanced = q.forall(x => x <=\
    \ maxWeight && x >= maxWeight - q.last)\n        val isLessThanMax = q.forall(x\
    \ => x <= maxWeight && x >= maxSum)\n        isPalindromic && isBalanced && isLessThanMax",
  "        val maxWeight = w\n        val maxSum = q.sum\n        val palindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val balanced = palindromic && maxSum\
    \ - q.sum <= maxWeight\n        val unbalanced = palindromic && maxSum - q.sum\
    \ > maxWeight\n        balanced && unbalanced", "        val maxWeight = w\n \
    \       val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isBalanced = maxSum < maxWeight\n        val isFlippable\
    \ = q.forall(x => x != q(0))\n        val isFlippableAndBalanced = isFlippable\
    \ && isBalanced\n        isPalindromic && isBalanced && isFlippableAndBalanced",
  "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(_ == q(0))\n        val isBalanced = maxSum\
    \ < maxWeight\n        val isLessOrEqual = maxSum == maxWeight\n        isPalindromic\
    \ && isBalanced && isLessOrEqual", "        val maxWeight = w\n        val maxSum\
    \ = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(x => x ==\
    \ q(0))\n        val isBalanced = q.reduceLeft(_ + _) <= maxWeight\n        val\
    \ isLessOrEqual = maxSum - q.reduceLeft(_ + _) <= maxWeight\n        isPalindromic\
    \ && isBalanced && isLessOrEqual", "        val maxWeight = w\n        val maxSum\
    \ = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_ == q.head)\n\
    \        val isBalanced = maxSum < maxWeight\n        val isFlippable = q.forall(_\
    \ < maxWeight)\n        val isFlippable = q.forall(_ < maxWeight)\n        val\
    \ isFlippable = q.forall(_ < maxWeight)\n        val isFlippable = q.forall(_\
    \ < maxWeight)\n        val isFlippable = q.forall(_ < maxWeight)\n        val\
    \ isFlippable = q.forall(_ < maxWeight)\n        val isFlippable = q.forall(_\
    \ < maxWeight)\n        val isFlippable = q.forall(_ < maxWeight)\n        val\
    \ isFlippable = q.forall(_ < maxWeight)\n        val isFlippable = q.forall(_\
    \ < maxWeight)\n        val isFlippable = q.forall(_ < maxWeight)\n        val\
    \ isFlippable = q.forall(_ < maxWeight)\n        val isFlippable = q.forall(_\
    \ < maxWeight)\n        val isFlippable = q.forall(_ < maxWeight)\n        val\
    \ isFlippable = q.forall(_ < maxWeight)\n        val isFlippable = q.forall(_\
    \ < maxWeight)\n        val isFlippable = q.forall(_ < maxWeight)\n        val\
    \ isFlippable = q.forall(_ < maxWeight)\n        val isFlippable = q.forall(_\
    \ < maxWeight)\n        val isFlippable = q.forall(_ < maxWeight)\n        val\
    \ isFlippable = q.forall(_ < maxWeight)\n        val isFlippable = q.forall(_\
    \ < maxWeight)\n        val isFlippable = q.forall(_ < maxWeight)\n        val\
    \ isFlippable = q.forall(_ < maxWeight)\n        val isFlippable = q.forall(_\
    \ < maxWeight)\n        val isFlippable = q.forall(_ < maxWeight)\n        val\
    \ isFlippable = q.forall(_ < maxWeight)\n        val isFlippable = q.forall(_\
    \ < maxWeight)\n        val isFlippable = q.forall(_ < ", "        val maxWeight\
    \ = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic =\
    \ q.reverse.forall(x => x == q(0))\n        val isBalanced = q.foldLeft(0)(_ +\
    \ _) == maxSum\n        val isLessThanMax = maxWeight - maxSum < 0\n        val\
    \ isLessThanMaxAndBalanced = isLessThanMax && isBalanced\n        isPalindromic\
    \ && isLessThanMaxAndBalanced", "        val maxWeight = w\n        val sumOfElements\
    \ = q.sum\n        val isPalindromic = q.isPalindromic\n        val isBalanced\
    \ = isPalindromic && sumOfElements <= maxWeight\n        val isFlipped = !isPalindromic\
    \ && sumOfElements > maxWeight\n        isBalanced && isFlipped", "        val\
    \ maxWeight = w.toInt\n        val sumOfElements = q.sum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q.head)\n        val isBalanced = sumOfElements\
    \ <= maxWeight\n        val isFlippable = q.tail.forall(x => x == q.head)\n  \
    \      val isFlippableAndBalanced = isFlippable && isBalanced\n        val isFlippableAndBalancedAndPalindromic\
    \ = isFlippableAndBalanced && isPalindromic\n        isFlippableAndBalancedAndPalindromic",
  "        val maxSum = q.foldLeft(0)(_ + _)\n        val maxWeight = q.foldLeft(0)(_\
    \ + _)\n        val maxSumOfWeight = q.foldLeft(0)(_ + _)\n        val maxSumOfWeightOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxSumOfWeightOfElementsOfElements = q.foldLeft(0)(_\
    \ + _)\n        val maxSumOfWeightOfElementsOfElementsOfElements = q.foldLeft(0)(_\
    \ + _)\n        val maxSumOfWeightOfElementsOfElementsOfElementsOfElements = q.foldLeft(0)(_\
    \ + _)\n        val maxSumOfWeightOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxSumOfWeightOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxSumOfWeightOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxSumOfWeightOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxSumOfWeightOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxSumOfWeightOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxSumOfWeightOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxSumOfWeightOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxSumOfWeightOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements",
  "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q == q.sort\n        val isBalanced = isPalindromic && maxSum\
    \ == maxWeight\n        val isLessOrEqual = maxSum < maxWeight\n        isBalanced\
    \ && isLessOrEqual", "        val maxSum = w.toLong * q.length\n        val sum\
    \ = 0L\n        for (i <- 0 until q.length) {\n            sum += q(i)\n     \
    \   }\n        sum <= maxSum", "        val maxSum = w.toLong * q.length\n   \
    \     val maxWeight = w.toLong\n        val maxPalindromic = q.reverse.forall(x\
    \ => x <= maxWeight)\n        val maxPalindromicSum = maxPalindromic.foldLeft(0)(_\
    \ + _)\n        val isPalindromic = maxPalindromicSum == maxSum\n        val isBalanced\
    \ = q.forall(x => x <= maxWeight)\n        isPalindromic && isBalanced", "   \
    \     val maxSum = w.toLong\n        val maxWeight = w.toLong\n        val maxSumOfElements\
    \ = q.foldLeft(0L) { (sum, element) => sum + element }\n        val isPalindromic\
    \ = maxSumOfElements == maxSum\n        val isBalanced = maxSumOfElements <= maxWeight\n\
    \        val isLessThanMaxWeight = maxSumOfElements < maxWeight\n        val isLessThanMaxSum\
    \ = maxSumOfElements < maxSum\n        val isLessThanMaxSumOfElements = maxSumOfElements\
    \ < q.foldLeft(0L) { (sum, element) => sum + element }\n        val isLessThanMaxSumOfElementsOrEqualToMaxSum\
    \ = maxSumOfElements <= q.foldLeft(0L) { (sum, element) => sum + element }\n \
    \       val isLessThanMaxSumOfElementsOrEqualToMaxSumOrEqualToMaxWeight = maxSumOfElements\
    \ <= q.foldLeft(0L) { (sum, element) => sum + element } || maxSumOfElements ==\
    \ maxWeight\n        val isLessThanMaxSumOfElementsOrEqualToMaxSumOrEqualToMaxWeightOrEqualToMaxSum\
    \ = maxSumOfElements <= q.foldLeft(0L) { (sum, element) => sum + element } ||\
    \ maxSumOfElements == maxSum || maxSumOfElements == maxWeight\n        val isLessThanMaxSumOfElementsOrEqualToMaxSumOrEqualToMaxWeightOrEqualToMaxSumOrEqualToMaxWeight\
    \ = maxSumOfElements <= q.foldLeft(0L) { (sum, element) => sum + element } ||\
    \ maxSumOfElements == maxSum || maxSumOfElements == maxSum || maxSumOfElements\
    \ == maxWeight\n        val isLessThanMaxSumOfElementsOrEqualToMaxSumOrEqualToMaxWeightOrEqualToMaxSumOrEqualToMaxWeightOrEqualToMaxSum\
    \ = maxSumOfElements <= q.foldLeft(0L) { (sum, element) => sum + element } ||\
    \ maxSumOfElements == maxSum || maxSumOfElements == maxSum || maxSumOfElements\
    \ == maxSum || maxSumOfElements == maxWeight\n        val isLessThanMaxSumOfElementsOrEqualToMaxSumOrEqualToMaxWeightOrEqualToMaxSumOrEqualToMaxWeightOrEqualToMaxSumOrEqualTo",
  "        val maxSum = q.reduce(_ + _)\n        val maxWeight = q.reduce(_ + _)\n\
    \        val isPalindromic = q.isEmpty || q.head == q.reverse.head\n        val\
    \ isBalanced = maxSum == w\n        val isFlipped = q.tail == q.reverse.tail\n\
    \        val isLessThanMaxWeight = maxWeight < w\n        val isLessThanMaxSum\
    \ = maxSum < w\n        isPalindromic && isBalanced && isFlipped && isLessThanMaxWeight\
    \ && isLessThanMaxSum", "        val maxWeight = w\n        val sumOfElements\
    \ = q.sum\n        val isPalindromic = q.isReverse.forall(_ == q.head)\n     \
    \   val isBalanced = sumOfElements <= maxWeight\n        val isFly = isPalindromic\
    \ && isBalanced\n        val isNotFly = !isPalindromic && !isBalanced\n      \
    \  isFly", "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ +\
    \ _)\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n        val\
    \ isBalanced = q.foldLeft(false)((acc, x) => acc && x <= maxWeight && x == q(q.length\
    \ - 1))\n        val isLessThanMax = q.foldLeft(false)((acc, x) => acc && x <=\
    \ maxWeight && x == q(q.length - 1))\n        val isLessThanMaxAndBalanced = q.foldLeft(false)((acc,\
    \ x) => acc && x <= maxWeight && x == q(q.length - 1))\n        val isLessThanMaxAndBalancedAndPalindromic\
    \ = q.foldLeft(false)((acc, x) => acc && x <= maxWeight && x == q(q.length - 1))\n\
    \        isPalindromic && isBalanced && isLessThanMax && isLessThanMaxAndBalanced\
    \ && isLessThanMaxAndBalancedAndPalindromic", "        val maxSum = w.toLong *\
    \ q.length\n        val sums = q.map(x => x.toLong)\n        val isPalindromic\
    \ = sums.reverse == sums\n        val isBalanced = sums.sum < maxSum\n       \
    \ isPalindromic && isBalanced", "        val maxWeight = w\n        val maxSum\
    \ = q.sum\n        val palindromic = q.reverse.forall(x => x == q(0))\n      \
    \  val balanced = palindromic && q.sum <= maxWeight\n        val unbalanced =\
    \ palindromic && q.sum > maxWeight\n        val isFlipping = balanced && unbalanced\n\
    \        val isNotFlipping = !isFlipping\n        isFlipping || isNotFlipping",
  "        val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong\n  \
    \      val maxWeightSum = w.toLong * q.length\n        val maxWeightSumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfElementsOfElements = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfElementsOfElementsOfElements = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfElementsOfElementsOfElementsOfElements = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements\
    \ = q.foldLeft(0)(_ + ", "        val maxSum = w.toLong * q.length\n        val\
    \ maxWeight = w.toLong\n        val maxWeightSum = w.toLong * q.length\n     \
    \   val maxWeightSumOfQ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n     \
    \   val maxWeightSumOfQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val max", "        val maxSum = w.toLong * q.length\n\
    \        val maxSumOfElements = q.foldLeft(0)(_ + _)\n        return maxSumOfElements\
    \ <= maxSum", "        val maxWeight = w\n        val sumOfElements = q.sum\n\
    \        val isPalindromic = q.isEmpty\n        val isBalanced = sumOfElements\
    \ <= maxWeight\n        val isFlipped = q.tail == q.init.reverse\n        val\
    \ isLessOrEqual = sumOfElements <= maxWeight && sumOfElements >= sumOfElements.max\n\
    \        val isLessOrEqualAndBalanced = sumOfElements <= maxWeight && sumOfElements\
    \ >= sumOfElements.max && isBalanced\n        val isLessOrEqualAndFlipped = sumOfElements\
    \ <= maxWeight && sumOfElements >= sumOfElements.max && isFlipped\n        val\
    \ isLessOrEqualAndPalindromic = sumOfElements <= maxWeight && sumOfElements >=\
    \ sumOfElements.max && isPalindromic\n        isLessOrEqual || isLessOrEqualAndBalanced\
    \ || isLessOrEqualAndFlipped || isLessOrEqualAndPalindromic", "        val maxSum\
    \ = q.reduce(_ + _)\n        val maxWeight = q.reduce(_ + _)\n        val isPalindromic\
    \ = q.isEmpty || q.reverse.forall(x => x == q(0))\n        val isBalanced = isPalindromic\
    \ && maxSum < w\n        val isLessThanMaxWeight = maxWeight < w\n        val\
    \ isLessThanMaxSum = maxSum < w\n        isBalanced && isLessThanMaxWeight &&\
    \ isLessThanMaxSum", "        val maxSum = w.toLong * q.length\n        val maxWeight\
    \ = w.toLong * q.sum\n        val maxWeightPalindromic = maxWeight / 2\n     \
    \   val maxWeightPalindromicPalindromic = maxWeightPalindromic / 2\n        val\
    \ maxWeightPalindromicPalindromicPalindromic = maxWeightPalindromicPalindromic\
    \ / 2\n        val maxWeightPalindromicPalindromicPalindromicPalindromic = maxWeightPalindromicPalindromicPalindromic\
    \ / 2\n        val maxWeightPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxWeightPalindromicPalindromicPalindromicPalindromic / 2\n        val maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxWeightPalindromicPalindromicPalindromicPalindromicPalindromic / 2\n   \
    \     val maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ / 2\n        val maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ / 2\n        val maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ / 2\n        val maxWeightPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxWeightPalindromicPalindromicPalindromic", "        val maxSum = w.toLong\
    \ * q.length\n        val sumOfQ = q.foldLeft(0)(_ + _)\n        sumOfQ <= maxSum",
  "        val maxSum = w.toLong * q.length\n        val maxSumOfElements = q.foldLeft(0)(_\
    \ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isLessThanMax = maxSumOfElements\
    \ < w\n        val isLessThanMaxAndBalanced = isLessThanMax && isBalanced\n  \
    \      val isLessThanMaxAndPalindromic = isLessThanMax && isPalindromic\n    \
    \    isLessThanMaxAndBalanced || isLessThanMaxAndPalindromic", "        val maxSum\
    \ = w.toLong * q.length\n        val maxSumOfElements = q.foldLeft(0)(_ + _)\n\
    \        val isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isLessThanMaxSum = maxSumOfElements\
    \ < maxSum\n        isBalanced && isPalindromic && isLessThanMaxSum", "      \
    \  val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong * q.sum\n\
    \        val maxWeightSum = w.toLong * q.foldLeft(0)(_ + _)\n        val maxWeightSumLessOrEqualToMaxSum\
    \ = maxWeightSum <= maxSum\n        val isPalindromic = q.reverse.forall(x =>\
    \ x == q(0))\n        val isBalanced = isPalindromic && maxWeightSumLessOrEqualToMaxSum\n\
    \        val isFlipped = q.forall(x => x == q.reverse.head)\n        val isFlippedAndBalanced\
    \ = isFlipped && isBalanced\n        isFlippedAndBalanced", "        val maxWeight\
    \ = w\n        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_\
    \ == q.head)\n        val isBalanced = maxSum < maxWeight\n        val isFly =\
    \ isPalindromic && isBalanced\n        \n        !isFly", "        val maxSum\
    \ = w.toLong * q.length\n        val maxWeight = w.toLong * q.sum\n        val\
    \ maxSumOfWeight = q.sum\n        val maxWeightOfSum = q.sum * q.length\n    \
    \    val maxSumOfWeightOfSum = q.sum * q.length\n        val maxWeightOfSumOfWeight\
    \ = q.sum * q.sum\n        val maxWeightOfSumOfWeightOfSum = q.sum * q.sum * q.length\n\
    \        val maxWeightOfSumOfWeightOfSumOfWeight = q.sum * q.sum * q.sum * q.length\n\
    \        val maxWeightOfSumOfWeightOfSumOfWeightOfSum = q.sum * q.sum * q.sum\
    \ * q.sum * q.length\n        val maxWeightOfSumOfWeightOfSumOfWeightOfSumOfWeight\
    \ = q.sum * q.sum * q.sum * q.sum * q.sum * q.length\n        val maxWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSum\
    \ = q.sum * q.sum * q.sum * q.sum * q.sum * q.sum * q.length\n        val maxWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeight\
    \ = q.sum * q.sum * q.sum * q.sum * q.sum * q.sum * q.sum * q.sum * q.length\n\
    \        val maxWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSum\
    \ = q.sum * q.sum * q.sum * q.sum * q.sum * q.sum * q.sum * q.sum * q.sum * q.sum\n\
    \        val maxWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeightOfSumOfWeight",
  "        val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong * q.length\n\
    \        val maxWeightSum = w.toLong * q.length\n        val maxWeightSumOfQ =\
    \ q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQ2 = q.foldLeft(0)(_ + _)\n\
    \        val maxWeightSumOfQ3 = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQ4\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQ5 = q.foldLeft(0)(_ + _)\n\
    \        val maxWeightSumOfQ6 = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQ7\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQ8 = q.foldLeft(0)(_ + _)\n\
    \        val maxWeightSumOfQ9 = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQ10\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQ11 = q.foldLeft(0)(_ + _)\n\
    \        val maxWeightSumOfQ12 = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQ13\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQ14 = q.foldLeft(0)(_ + _)\n\
    \        val maxWeightSumOfQ15 = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQ16\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQ17 = q.foldLeft(0)(_ + _)\n\
    \        val maxWeightSumOfQ18 = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQ19\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQ20 = q.foldLeft(0)(_ + _)\n\
    \        val maxWeightSumOfQ21 = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQ22\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQ23 = q.foldLeft(0)(_ + _)\n\
    \        val maxWeightSumOfQ24 = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQ",
  "        val maxWeight = w\n        val maxSum = q.reduce(_ + _)\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q.reduceRight(_ + _))\n        val isBalanced =\
    \ q.forall(x => x <= maxWeight && x >= maxSum)\n        isPalindromic && isBalanced",
  "        val maxWeight = w.toInt\n        val maxSum = q.reduceLeft(_ + _)\n   \
    \     val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced\
    \ = maxSum < maxWeight\n        isPalindromic && isBalanced", "        val maxSum\
    \ = w.toLong * q.length\n        val maxSumOfElements = q.foldLeft(0)(_ + _)\n\
    \        val isBalanced = maxSumOfElements <= maxSum\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isLessOrEqualToMaxWeight = maxSumOfElements\
    \ <= w\n        val isLessOrEqualToMaxWeightAndBalanced = isLessOrEqualToMaxWeight\
    \ && isBalanced\n        isPalindromic && isLessOrEqualToMaxWeightAndBalanced",
  "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = q.forall(x\
    \ => x <= maxWeight && x >= 0)\n        val isLessThanMax = q.foldLeft(false)((acc,\
    \ x) => acc && x <= maxWeight)\n        val isLessThanMaxOrBalanced = q.foldLeft(false)((acc,\
    \ x) => acc && (x <= maxWeight && x >= 0))\n        val isLessThanMaxOrBalancedOrPalindromic\
    \ = q.foldLeft(false)((acc, x) => acc && (x <= maxWeight && x >= 0 && x == q(0)))\n\
    \        val isLessThanMaxOrBalancedOrPalindromicOrFalse = q.foldLeft(false)((acc,\
    \ x) => acc && (x <= maxWeight && x >= 0 || x == q(0)))\n        val isLessThanMaxOrBalancedOrPalindromicOrFalseOrFalse\
    \ = q.foldLeft(false)((acc, x) => acc && (x <= maxWeight && x >= 0 || x == q(0)\
    \ || x == q(0)))\n        val isLessThanMaxOrBalancedOrPalindromicOrFalseOrFalseOrFalse\
    \ = q.foldLeft(false)((acc, x) => acc && (x <= maxWeight && x >= 0 || x == q(0)\
    \ || x == q(0) || x == q(0)))\n        val isLessThanMaxOrBalancedOrPalindromicOrFalseOrFalseOrFalseOrFalse\
    \ = q.foldLeft(false)((acc, x) => acc && (x <= maxWeight && x >= 0 || x == q(0)\
    \ || x == q(0) || x == q(0) || x == q(0)))\n        val isLessThanMaxOrBalancedOrPalindromicOrFalseOrFalseOrFalseOrFalseOrFalse\
    \ = q.foldLeft(false)((acc, x) => acc && (x <= maxWeight && x >= 0 || x == q(0)\
    \ || x == q(0) || x == q(0) || x == q(0) || x == q(0)))\n        val isLessThanMaxOrBalancedOrPalindromicOrFalseOrFalseOrFalseOrFalseOrFalseOrFalse\
    \ = q.foldLeft(false)((acc, x) => acc && (x <= maxWeight && x >= 0 || x == q(0)\
    \ || x == q(0) || x == q(0) || x == q(0) || x == q(0) || x == q(0)))\n       \
    \ val isLessThanMaxOrBalancedOrPalindromicOrFalseOrFalseOrFalseOrFalseOrFalse",
  "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum\
    \ < maxWeight\n        val isLessOrEqual = maxSum == maxWeight\n        val isLessOrEqualPalindromic\
    \ = maxSum == maxWeight && isPalindromic\n        val isLessOrEqualBalanced =\
    \ maxSum == maxWeight && isBalanced\n        val isLessOrEqualBalancedPalindromic\
    \ = maxSum == maxWeight && isBalanced && isPalindromic\n        val isLessOrEqualBalancedPalindromicAndLessOrEqual\
    \ = maxSum == maxWeight && isBalanced && isPalindromic && isLessOrEqual\n    \
    \    val isLessOrEqualBalancedPalindromicAndLessOrEqualPalindromic = maxSum ==\
    \ maxWeight && isBalanced && isPalindromic && isLessOrEqual && isPalindromic\n\
    \        val isLessOrEqualBalancedPalindromicAndLessOrEqualBalanced = maxSum ==\
    \ maxWeight && isBalanced && isPalindromic && isLessOrEqual && isBalanced\n  \
    \      val isLessOrEqualBalancedPalindromicAndLessOrEqualBalancedPalindromic =\
    \ maxSum == maxWeight && isBalanced && isPalindromic && isLessOrEqual && isBalanced\
    \ && isPalindromic\n        val isLessOrEqualBalancedPalindromicAndLessOrEqualBalancedPalindromicAndLessOrEqual\
    \ = maxSum == maxWeight && isBalanced && isPalindromic && isLessOrEqual && isBalanced\
    \ && isPalindromic && isLessOrEqual\n        val isLessOrEqualBalancedPalindromicAndLessOrEqualBalancedPalindromicAndLessOrEqualPalindromic\
    \ = maxSum == maxWeight && isBalanced && isPalindromic && isLessOrEqual && isBalanced\
    \ && isPalindromic && isLessOrEqual && isPalindromic\n        val isLessOrEqualBalancedPalindromicAndLessOrEqualBalancedPalindromicAndLessOrEqualBalanced\
    \ = maxSum == maxWeight && isBalanced && isPalindromic && isLessOrEqual && isBalanced\
    \ && ", "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n\
    \        val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced\
    \ = q.forall(x => x <= maxWeight && x >= maxWeight - q.length)\n        val isFlight\
    \ = maxSum < maxWeight\n        val isFlightAndBalanced = isFlight && isBalanced\n\
    \        val isFlightAndPalindromic = isFlight && isPalindromic\n        val isFlightAndNotBalanced\
    \ = isFlight && !isBalanced\n        val isFlightAndNotPalindromic = isFlight\
    \ && !isPalindromic\n        val isFlightAndNotBalancedAndNotPalindromic = isFlight\
    \ && !isBalanced && !isPalindromic\n        val isFlightAndNotBalancedAndPalindromic\
    \ = isFlight && !isBalanced && isPalindromic\n        val isFlightAndNotBalancedAndNotPalindromic\
    \ = isFlight && !isBalanced && !isPalindromic\n        val isFlightAndNotBalancedAndNotPalindromicAndNotBalanced\
    \ = isFlight && !isBalanced && !isPalindromic && !isBalanced\n        val isFlightAndNotBalancedAndNotPalindromicAndBalanced\
    \ = isFlight && !isBalanced && !isPalindromic && !isBalanced && !isPalindromic\n\
    \        val isFlightAndNotBalancedAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = isFlight && !isBalanced && !isPalindromic && !isBalanced && !isPalindromic\
    \ && !isBalanced && !isPalindromic\n        val isFlightAndNotBalancedAndNotPalindromicAndNotBalancedAndPalindromic\
    \ = isFlight && !isBalanced && !isPalindromic && !isBalanced && !isPalindromic\
    \ && !isBalanced && isPalindromic\n        val isFlightAndNotBalancedAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotBalanced\
    \ = isFlight && !isBalanced && !isPalindromic && !isBalanced && !isPalindromic\
    \ && !isBalanced && !isPalindromic && !isBalanced && !isPalindro", "        val\
    \ maxWeight = w\n        val maxSum = q.sum\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q.head)\n        val isBalanced = maxSum - q.sum < maxWeight\n     \
    \   val isLessThanMaxWeight = maxSum - q.sum >= maxWeight\n        val isLessThanMaxSum\
    \ = maxSum - q.sum < maxWeight\n        val isLessThanMaxSumButNotBalanced = maxSum\
    \ - q.sum < maxWeight && !isBalanced\n        val isLessThanMaxWeightButNotBalanced\
    \ = maxSum - q.sum < maxWeight && !isBalanced && !isPalindromic\n        val isLessThanMaxWeightButIsBalanced\
    \ = maxSum - q.sum < maxWeight && isBalanced\n        val isLessThanMaxWeightButIsPalindromic\
    \ = maxSum - q.sum < maxWeight && isPalindromic\n        val isLessThanMaxWeightButIsBalancedAndIsPalindromic\
    \ = maxSum - q.sum < maxWeight && isBalanced && isPalindromic\n        val isLessThanMaxWeightButIsBalancedAndIsPalindromicButNotAllElementsAreEqual\
    \ = maxSum - q.sum < maxWeight && isBalanced && isPalindromic && !q.forall(x =>\
    \ x == q.head)\n        val isLessThanMaxWeightButIsBalancedAndIsPalindromicButAllElementsAreEqual\
    \ = maxSum - q.sum < maxWeight && isBalanced && isPalindromic && q.forall(x =>\
    \ x == q.head)\n        val isLessThanMaxWeightButIsBalancedAndIsPalindromicButAllElementsAreEqualButNotAllElementsAreEqual\
    \ = maxSum - q.sum < maxWeight && isBalanced && isPalindromic && q.forall(x =>\
    \ x == q.head) && !q.forall(x => x == q.head)\n        val isLessThanMaxWeightButIsBalancedAndIsPalindromicButAllElementsAreEqualButNotAllElementsAreEqualButNotAllElementsAreEqual\
    \ = maxSum - q.sum < maxWeight && isBalanced && isPalindromic && q.forall(x =>\
    \ x == q.head) && !q.forall(x => x == q.head) && !q.forall(x => x == q.head)\n\
    \        val isLessThanMaxWeightButIsBalancedAndIsPalindromicButAllElementsAreEqualButNot",
  "        val maxWeight = w\n        val maxSum = q.sum\n        val palindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val balanced = palindromic && maxSum\
    \ < maxWeight\n        val unbalanced = !palindromic && maxSum > maxWeight\n \
    \       balanced && unbalanced", "        val maxWeight = w\n        val maxSum\
    \ = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(x => x ==\
    \ q(0))\n        val isBalanced = q.reduceLeft(_ + _) == maxSum\n        val isLessThanMaxWeight\
    \ = maxSum < maxWeight\n        val isLessThanMaxSum = maxSum < q.reduceLeft(_\
    \ + _)\n        isPalindromic && isBalanced && isLessThanMaxWeight && isLessThanMaxSum",
  "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(_ == q.head)\n        val isBalanced = maxSum\
    \ < maxWeight\n        val isFly = isPalindromic && isBalanced\n        \n   \
    \     return isFly", "        val maxSum = w.toLong\n        val maxSumOfElements\
    \ = q.foldLeft(0)(_ + _)\n        val isBalanced = maxSumOfElements <= maxSum\n\
    \        val isPalindromic = q.reverse.forall(x => x == q(0))\n        val isLessOrEqualToMaxSum\
    \ = maxSumOfElements <= maxSum\n        val isLessOrEqualToMaxSumOfElements =\
    \ maxSumOfElements <= maxSumOfElements\n        val isLessOrEqualToMaxSumOfElementsAndIsBalanced\
    \ = isLessOrEqualToMaxSumOfElements && isBalanced\n        val isLessOrEqualToMaxSumOfElementsAndIsPalindromic\
    \ = isLessOrEqualToMaxSumOfElements && isPalindromic\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSum\
    \ = isLessOrEqualToMaxSumOfElements && isLessOrEqualToMaxSum\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSum\n        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsBalanced\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements && isBalanced\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsPalindromic\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements && isPalindromic\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSum\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements && isLessOrEqualToMaxSum\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElements && isLessOrEqualToMaxSumOfElements\n\
    \        val isLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsLessOrEqualToMaxSumOfElementsAndIsBalanced\
    \ = isLessOrEqualToMaxSumOfElementsAndIsLessOr", "        val maxSum = w.toLong\
    \ * q.length\n        val maxWeight = w.toLong * q.sum\n        val palindromic\
    \ = q.reverse.forall(x => x <= maxWeight)\n        val balanced = q.forall(x =>\
    \ x <= maxWeight && x <= maxSum)\n        (palindromic && balanced)", "      \
    \  val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isBalanced = q.forall(x => x\
    \ == q(0) + q(1))\n        val isLessThanMax = maxSum - maxWeight < 0\n      \
    \  val isLessThanMaxButNotBalanced = maxSum - maxWeight > 0 && !isBalanced\n \
    \       isPalindromic && isBalanced && isLessThanMax && isLessThanMaxButNotBalanced",
  "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum\
    \ < maxWeight\n        val isFly = isPalindromic && isBalanced\n        \n   \
    \     isFly", "        val maxWeight = w\n        val maxSum = q.reduceLeft(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(_ == q.head)\n        val\
    \ isBalanced = maxSum < maxWeight\n        val isFlippable = q.forall(_ < maxWeight)\n\
    \        isPalindromic && isBalanced && isFlippable", "        val maxWeight =\
    \ w\n        val maxSum = q.reduce(_ + _)\n        val isPalindromic = q.isEmpty\
    \ || q.reverse == q\n        val isBalanced = maxSum < maxWeight\n        val\
    \ isFlipped = q.reverse.head == q.head\n        isPalindromic && isBalanced &&\
    \ isFlipped", "        val maxSum = w.toLong * q.length\n        val sums = q.map(x\
    \ => x.toLong).sum\n        sums <= maxSum", "        val maxSum = w.toLong *\
    \ q.length\n        val maxSumOfElements = q.foldLeft(0)(_ + _)\n        val isPalindromic\
    \ = maxSumOfElements == maxSum\n        val isBalanced = isPalindromic && q.size\
    \ == q.reverse.size && maxSumOfElements <= w\n        isBalanced", "        val\
    \ maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val balanced\
    \ = maxSum == maxWeight\n        val palindromic = q.reverse.forall(x => x ==\
    \ q(0))\n        val sum = q.sum\n        val isLessOrEqual = sum <= maxWeight\n\
    \        val isBalanced = balanced && palindromic && isLessOrEqual\n        isBalanced",
  "        val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong * q.sum\n\
    \        val maxWeightSum = w.toLong * q.foldLeft(0)(_ + _)\n        val maxWeightSumLessOrEqual\
    \ = w.toLong * q.foldLeft(0)(_ + _)\n        val maxWeightSumLessOrEqualEqual\
    \ = w.toLong * q.foldLeft(0)(_ + _)\n        val maxWeightSumLessOrEqualEqualEqual\
    \ = w.toLong * q.foldLeft(0)(_ + _)\n        val maxWeightSumLessOrEqualEqualEqualEqual\
    \ = w.toLong * q.foldLeft(0)(_ + _)\n        val maxWeightSumLessOrEqualEqualEqualEqualEqual\
    \ = w.toLong * q.foldLeft(0)(_ + _)\n        val maxWeightSumLessOrEqualEqualEqualEqualEqual\
    \ = w.toLong * q.foldLeft(0)(_ + _)\n        val maxWeightSumLessOrEqualEqualEqualEqualEqualEqual\
    \ = w.toLong * q.foldLeft(0)(_ + _)\n        val maxWeightSumLessOrEqualEqualEqualEqualEqualEqualEqual\
    \ = w.toLong * q.foldLeft(0)(_ + _)\n        val maxWeightSumLessOrEqualEqualEqualEqualEqualEqualEqualEqual\
    \ = w.toLong * q.foldLeft(0)(_ + _)\n        val maxWeightSumLessOrEqualEqualEqualEqualEqualEqualEqualEqual\
    \ = w.toLong * q.foldLeft(0)(_ + _)\n        val maxWeightSumLessOrEqualEqualEqualEqualEqualEqualEqualEqual\
    \ = w.toLong * q.foldLeft(0)(_ + _)\n        val maxWeightSumLessOrEqualEqualEqualEqualEqualEqualEqualEqual\
    \ = w.toLong * q.foldLeft(0)(_ + _)\n        val maxWeightSumLessOrEqualEqualEqualEqualEqualEqualEqualEqualEqual\
    \ = w.toLong * q.foldLeft(0)(_ + _)\n        val maxWeightSumLessOrEqualEqualEqualEqualEqualEqualEqualEqualEqualEqual\
    \ = w.toLong * q.foldLeft(0)(_ + _)\n        val maxWeightSumLessOrEqualEqualEqualEqualEqualEqualEqualEqualEqual\
    \ = w.toLong * q.foldLeft(0)(_ + _)\n        val maxWeightSumLessOrEqualEqualEqualEqualEqualEqualEqualEqualEqualEqual\
    \ = w.toLong * q.foldLeft(0)(_", "        val maxSum = w.toLong * q.length\n \
    \       val sums = q.foldLeft(List[Long]())((sums, x) => sums.updated(x, sums(x)\
    \ + x))\n        sums.last <= maxSum", "        val maxSum = q.reduce((a, b) =>\
    \ a + b)\n        val maxWeight = q.reduce((a, b) => math.max(math.abs(a), math.abs(b)))\n\
    \        val isPalindromic = q.reverse.forall(_ == q(0))\n        val sumOfElements\
    \ = q.sum\n        val isBalanced = sumOfElements <= maxWeight && isPalindromic\n\
    \        val isFlipped = q.forall(_ < 0)\n        val isFlippedBackwards = q.forall(_\
    \ > 0)\n        isBalanced && isFlipped && isFlippedBackwards && maxSum <= w",
  "        val maxWeight = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = q.foldLeft(0)(_\
    \ + _) <= maxWeight\n        val isLessThanMax = maxSum - q.sum <= maxWeight\n\
    \        isPalindromic && isBalanced && isLessThanMax", "        val maxWeight\
    \ = w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic =\
    \ q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum < maxWeight\n\
    \        val isFlipped = q.forall(x => x == q.reverse.head)\n        isPalindromic\
    \ && isBalanced && isFlipped", "        val maxSum = w.toLong * q.length\n   \
    \     val maxWeight = w.toLong\n        val maxSumOfElements = q.foldLeft(0)(_\
    \ + _)\n        val isPalindromic = q.reverse.forall(x => x == q(0))\n       \
    \ val isBalanced = maxSumOfElements <= maxWeight\n        val isFlippable = isPalindromic\
    \ && isBalanced\n        val isFlippableAndLessThanMaxWeight = isFlippable &&\
    \ maxSumOfElements < maxWeight\n        isFlippableAndLessThanMaxWeight", "  \
    \      val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(_ == q.head)\n        val isBalanced = maxSum\
    \ - maxWeight <= 0\n        val isLessThanMax = maxSum - maxWeight < 0\n     \
    \   val isLessThanMaxAndBalanced = maxSum - maxWeight < 0 && maxSum - maxWeight\
    \ > 0\n        val isLessThanMaxAndBalancedAndPalindromic = maxSum - maxWeight\
    \ < 0 && maxSum - maxWeight > 0 && isPalindromic\n        val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromic\
    \ = maxSum - maxWeight < 0 && maxSum - maxWeight > 0 && isPalindromic && !isPalindromic\n\
    \        val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced\
    \ = maxSum - maxWeight < 0 && maxSum - maxWeight > 0 && isPalindromic && !isPalindromic\
    \ && !isBalanced\n        val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = maxSum - maxWeight < 0 && maxSum - maxWeight > 0 && isPalindromic && !isPalindromic\
    \ && !isBalanced && !isPalindromic\n        val isLessThanMaxAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromic\
    \ = maxSum - maxWeight < 0 && maxSum - maxWeight > 0 && isPalindromic && !isPalindromic\
    \ && !isBalanced && !isPalindromic && !isPalindromic && !isBalanced\n        val\
    \ isLessThanMaxAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromicAndNotPalindromic\
    \ = maxSum - maxWeight < 0 && maxSum - maxWeight > 0 && isPalindromic && !isPalindromic\
    \ && !isBalanced && !isPalindromic && !isPalindromic && !isBalanced && !isPalindromic\
    \ && !isPalindromic && !isBalanced\n        val isLessThanMaxAndBalancedAndPalindromic",
  "        val maxWeight = w\n        val sumOfElements = q.sum\n        val isPalindromic\
    \ = q.isReverse.forall(x => x == q(0))\n        val isBalanced = sumOfElements\
    \ <= maxWeight\n        val isFlippable = q.forall(x => x == q(q(q.length - 1)))\n\
    \        isPalindromic && isBalanced && isFlippable", "        val maxWeight =\
    \ w\n        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_\
    \ == q(0))\n        val isBalanced = maxSum == maxWeight\n        val isLessThanMax\
    \ = maxSum < maxWeight\n        val isLessThanMaxAndBalanced = isLessThanMax &&\
    \ isBalanced\n        val isLessThanMaxAndBalancedAndPalindromic = isLessThanMaxAndBalanced\
    \ && isPalindromic\n        isLessThanMaxAndBalancedAndPalindromic", "       \
    \ val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic\
    \ = q.reverse.forall(_ == q.head)\n        val isBalanced = maxSum < maxWeight\n\
    \        val isFly = isPalindromic && isBalanced\n        val isNotFly = !isPalindromic\
    \ || !isBalanced\n        isFly", "        val maxWeight = w\n        val maxSum\
    \ = q.reduceLeft(_ + _)\n        val isPalindromic = q.reverse.forall(_ == q(0))\n\
    \        val isBalanced = maxSum - q.reduceLeft(_ + _) <= maxWeight\n        isPalindromic\
    \ && isBalanced", "        val maxWeight = w\n        val palindromic = q.reverse.forall(x\
    \ => x != q)\n        val sumOfElements = q.sum\n        val isBalanced = sumOfElements\
    \ <= maxWeight\n        val isFlippable = palindromic && isBalanced\n        isFlippable",
  "        val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val\
    \ isPalindromic = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum\
    \ < maxWeight\n        val isLessThanMaxWeight = maxSum < maxWeight\n        val\
    \ isLessThanMaxSum = maxSum < maxWeight\n        val isLessThanMaxSumAndBalanced\
    \ = maxSum < maxWeight && maxWeight < maxSum\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = maxSum < maxWeight && maxWeight < maxSum && isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight && maxWeight < maxSum && isPalindromic && !isPalindromic\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced\
    \ = maxSum < maxWeight && maxWeight < maxSum && isPalindromic && !isPalindromic\
    \ && !isBalanced\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = maxSum < maxWeight && maxWeight < maxSum && isPalindromic && !isPalindromic\
    \ && !isBalanced && !isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight && maxWeight < maxSum && isPalindromic && !isPalindromic\
    \ && !isBalanced && !isPalindromic && !isPalindromic && !isBalanced\n        val\
    \ isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotPalindromicAndNotPalindromic\
    \ = maxSum < maxWeight && maxWeight < maxSum && isPalindromic && !isPalindromic\
    \ && !isBalanced && !isPalindromic && !isPalindromic && !isPalindromic && !isBalanced\
    \ && !isPalindromic && !isPalindromic && !", "        val maxWeight = w\n    \
    \    val maxSum = q.sum\n        val palindromic = q.reverse.forall(x => x ==\
    \ q(0))\n        val balanced = palindromic && maxSum < maxWeight\n        val\
    \ unbalanced = !palindromic && maxSum > maxWeight\n        balanced && unbalanced",
  "        val maxSum = w.toLong\n        val maxSumOfElements = q.foldLeft(0)(_ +\
    \ _)\n        val isPalindromic = maxSumOfElements == maxSum\n        val isBalanced\
    \ = maxSumOfElements <= w\n        val isFlippable = q.forall(x => x == x.reverse)\n\
    \        val isFlippableAndBalanced = isFlippable && isBalanced\n        isPalindromic\
    \ && isBalanced && isFlippableAndBalanced", "        val maxWeight = w\n     \
    \   val maxSum = q.reduce(_ + _)\n        val isPalindromic = q == q.reverse\n\
    \        val isBalanced = maxSum < maxWeight\n        val isLessThanMaxWeight\
    \ = maxSum < maxWeight * 2\n        val isLessThanMaxSum = maxSum < maxWeight\
    \ * 3\n        val isLessThanMaxSumAndBalanced = maxSum < maxWeight * 4\n    \
    \    val isLessThanMaxSumAndBalancedAndPalindromic = maxSum < maxWeight * 5\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromic = maxSum\
    \ < maxWeight * 6\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalanced\
    \ = maxSum < maxWeight * 7\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = maxSum < maxWeight * 8\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotBalanced\
    \ = maxSum < maxWeight * 9\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = maxSum < maxWeight * 10\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotBalanced\
    \ = maxSum < maxWeight * 11\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotBalancedAndNotPalindromic\
    \ = maxSum < maxWeight * 12\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotBalancedAndNotPalindromicAndNotBalanced\
    \ = maxSum < maxWeight * 13\n        val isLessThanMaxSumAndBalancedAndPalindromicAndNotPalindromicAnd",
  "        val maxSum = w.toLong * q.length\n        val maxWeight = w.toLong\n  \
    \      val maxWeightSum = w.toLong * q.length\n        val maxWeightSumOfQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n \
    \       val maxWeightSumOfQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n     \
    \   val maxWeightSumOfQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n     \
    \   val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_ + _)\n \
    \       val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQ = q.foldLeft(0)(_\
    \ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ =\
    \ q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val maxWeightSumOfQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQAndQ\
    \ = q.foldLeft(0)(_ + _)\n        val max", "        val maxWeight = w\n     \
    \   val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isBalanced = maxSum < maxWeight\n        val isFly\
    \ = isPalindromic && isBalanced\n        val isNotFly = !isPalindromic || !isBalanced\n\
    \        isFly", "        val maxWeight = w\n        val palindrome = q.reverse.forall(x\
    \ => x == q.last)\n        val sumOfElements = q.sum\n        val isBalanced =\
    \ sumOfElements <= maxWeight\n        val isPalindromic = palindrome\n       \
    \ val isFlippable = isBalanced && isPalindromic\n        isFlippable", "     \
    \   val maxWeight = w\n        val maxSum = q.reduceLeft(_ + _)\n        val isPalindromic\
    \ = q.reverse.forall(x => x == q(0))\n        val isBalanced = maxSum - q.sum\
    \ <= maxWeight\n        isPalindromic && isBalanced", "        val maxWeight =\
    \ w\n        val maxSum = q.foldLeft(0)(_ + _)\n        val isPalindromic = q.reverse.forall(x\
    \ => x == q(0))\n        val isBalanced = q.forall(x => x == q(0))\n        val\
    \ isLessThanMaxWeight = maxSum - maxWeight <= 0\n        val isLessThanMaxSum\
    \ = maxSum - maxWeight <= 0\n        val isLessThanMaxSumAndBalanced = maxSum\
    \ - maxWeight <= 0 && isBalanced\n        val isLessThanMaxSumAndPalindromic =\
    \ maxSum - maxWeight <= 0 && isPalindromic\n        val isLessThanMaxSumAndBalancedPalindromic\
    \ = maxSum - maxWeight <= 0 && isPalindromic && isBalanced\n        val isLessThanMaxSumAndBalancedAndPalindromic\
    \ = maxSum - maxWeight <= 0 && isPalindromic && isBalanced && isPalindromic\n\
    \        val isLessThanMaxSumAndBalancedAndPalindromicPalindromic = maxSum - maxWeight\
    \ <= 0 && isPalindromic && isBalanced && isPalindromic && isPalindromic\n    \
    \    val isLessThanMaxSumAndBalancedAndPalindromicPalindromicPalindromic = maxSum\
    \ - maxWeight <= 0 && isPalindromic && isBalanced && isPalindromic && isPalindromic\
    \ && isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicPalindromicPalindromicPalindromic\
    \ = maxSum - maxWeight <= 0 && isPalindromic && isBalanced && isPalindromic &&\
    \ isPalindromic && isPalindromic && isPalindromic\n        val isLessThanMaxSumAndBalancedAndPalindromicPalindromicPalindromicPalindromicPalindromic\
    \ = maxSum - maxWeight <= 0 && isPalindromic && isBalanced && isPalindromic &&\
    \ isPalindromic && isPalindromic && isPalindromic && isPalindromic\n        val\
    \ isLessThanMaxSumAndBalancedAndPalindromicPalindromicPalindromicPalindromicPalindromicPalindromic",
  "        val maxWeight = w\n        val sumOfElements = q.sum\n        val isPalindromic\
    \ = q.isPalindromic\n        val isBalanced = isPalindromic && sumOfElements <=\
    \ maxWeight\n        val isFlippable = q.tail.isEmpty && q.head.isEmpty\n    \
    \    val isFlippableAndBalanced = isFlippable && isBalanced\n        val isFlippableAndBalancedAndNotPalindromic\
    \ = isFlippable && isBalanced && !isPalindromic\n        val isFlippableAndBalancedAndPalindromic\
    \ = isFlippable && isBalanced && isPalindromic\n        val isFlippableAndBalancedAndNotPalindromicAndNotFlippable\
    \ = isFlippable && isBalanced && !isPalindromic && !isFlippable\n        val isFlippableAndBalancedAndPalindromicAndNotFlippable\
    \ = isFlippable && isBalanced && isPalindromic && !isFlippable\n        val isFlippableAndBalancedAndNotPalindromicAndFlippable\
    \ = isFlippable && isBalanced && !isPalindromic && isFlippable\n        val isFlippableAndBalancedAndPalindromicAndFlippable\
    \ = isFlippable && isBalanced && isPalindromic && isFlippable\n        val isFlippableAndBalancedAndNotPalindromicAndFlippableAndNotFlippable\
    \ = isFlippable && isBalanced && !isPalindromic && isFlippable && !isFlippable\n\
    \        val isFlippableAndBalancedAndPalindromicAndFlippableAndNotFlippable =\
    \ isFlippable && isBalanced && isPalindromic && isFlippable && !isFlippable\n\
    \        val isFlippableAndBalancedAndNotPalindromicAndFlippableAndFlippable =\
    \ isFlippable && isBalanced && !isPalindromic && isFlippable && isFlippable\n\
    \        val isFlippableAndBalancedAndPalindromicAndFlipp", "        val maxWeight\
    \ = w.toInt\n        val palindromic = q.reverse.forall(x => x == x.reverse)\n\
    \        val sumOfElements = q.sum\n        val isBalanced = sumOfElements <=\
    \ maxWeight\n        val isFlippable = palindromic && isBalanced\n        isFlippable",
  "        val maxSum = w.toLong * q.length\n        val sumOfQ = q.foldLeft(0)(_\
    \ + _)\n        sumOfQ <= maxSum", "        val maxSum = w.toLong * q.length\n\
    \        val sums = q.map(x => x.toLong)\n        val isPalindromic = sums.reverse\
    \ == sums\n        val isBalanced = sums.sum <= maxSum\n        val isFlippable\
    \ = q.forall(x => x > 0 && x < w)\n        val isFlippableAndBalanced = isFlippable\
    \ && isBalanced\n        isPalindromic && isFlippableAndBalanced"]
stop_tokens:
- "\n    }\n"
