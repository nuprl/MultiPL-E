name: HumanEval_107_even_odd_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return a tuple that has the number of even and\
  \ odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n\
  \    // Example 1:\n    // Input: 3\n    // Output: (1, 2)\n    // Explanation:\n\
  \    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are\
  \ odd.\n    // Example 2:\n    // Input: 12\n    // Output: (4, 6)\n    // Explanation:\n\
  \    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
  \ and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned\
  \ tuple has the number of even and odd integer palindromes respectively.\n    def\
  \ evenOddPalindrome(n : Long) : Tuple2[Long, Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddPalindrome((123l)).equals(((8l,\
  \ 13l))));\n    assert(evenOddPalindrome((12l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals(((1l,\
  \ 2l))));\n    assert(evenOddPalindrome((63l)).equals(((6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals(((5l,\
  \ 6l))));\n    assert(evenOddPalindrome((19l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals(((4l,\
  \ 5l))));\n    assert(evenOddPalindrome((1l)).equals(((0l, 1l))));\n    }\n\n}\n"
completions: ["        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        var even = 0\n        var\
    \ odd = 0\n        var i = 0\n        var j = 0\n        while (i < n) {\n   \
    \         val temp = i\n            while (temp > 0) {\n                val temp\
    \ = temp / 10\n                evenPalindromes += temp\n                even =\
    \ even + 1\n            }\n            i = 0\n            while (j < n) {\n  \
    \              val temp = j\n                while (temp > 0) {\n            \
    \        val temp = temp / 10\n                    oddPalindromes += temp\n  \
    \                  odd = odd + 1 \n                }\n                j = 0\n\
    \            }\n            i = i + 1\n            j = j + 1\n        }\n    \
    \    val evenPalindrome = evenPalindromes.toList\n        val oddPalindrome =\
    \ oddPalindromes.toList\n        val evenPalindromeCount = evenPalindrome.size\n\
    \        val oddPalindromeCount = oddPalindrome.size\n        val evenPalindromeSum\
    \ = evenPalindrome.reduceLeft(_ + _)\n        val oddPalindromeSum = oddPalindrome.reduceLeft(_\
    \ + _)\n        val evenPalindromeAverage = evenPalindromeSum / evenPalindromeCount\n\
    \        val oddPalindromeAverage = oddPalindromeSum / oddPalindromeCount\n  \
    \      val evenPalindromeVariance = evenPalindromeAverage * (evenPalindromeCount\
    \ - 1)\n        val oddPalindromeVariance = oddPalindromeAverage * (oddPalindromeCount\
    \ - 1)\n        val evenPalindromeStandardDeviation = math.sqrt(evenPalindromeVariance)\n\
    \        val oddPalindromeStandardDeviation = math.sqrt(oddPalindromeVariance)\n\
    \        val evenPalindromeMedian = evenPalindromeSum / evenPalindromeCount\n\
    \        val oddPalindromeMedian = oddPalindromeSum / oddPalindromeCount\n   \
    \     val evenPalindromeRange = evenPalindromeSum - evenPalindromeAverage\n  \
    \      val oddPalindromeRange = oddPalindromeSum - oddPalindromeAverage\n    \
    \    val evenPalindromeVarianceRatio = evenPalindromeVari", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        var even = 0\n        var odd = 0\n        var i = 0\n        var j =\
    \ 0\n        while (i < n) {\n            val temp = i\n            while (temp\
    \ > 0) {\n                val remainder = temp % 10\n                val remainder2\
    \ = remainder / 10\n                if (remainder == 0) {\n                  \
    \  evenPalindromes += i\n                    even += 1\n                }\n  \
    \              if (remainder2 == 0) {\n                    oddPalindromes += i\n\
    \                    odd += 1\n                }\n                temp = temp\
    \ / 10\n            }\n            i += 1\n        }\n        val evenPalindrome\
    \ = evenPalindromes.toList\n        val oddPalindrome = oddPalindromes.toList\n\
    \        val evenPalindromeTuple = evenPalindrome.zip(evenPalindrome).map(x =>\
    \ x._1 + x._2)\n        val oddPalindromeTuple = oddPalindrome.zip(oddPalindrome).map(x\
    \ => x._1 + x._2)\n        val evenPalindromeTuple2 = evenPalindromeTuple.zip(evenPalindromeTuple).map(x\
    \ => x._1 + x._2)\n        val oddPalindromeTuple2 = oddPalindromeTuple.zip(oddPalindromeTuple).map(x\
    \ => x._1 + x._2)\n        val evenPalindromeTuple3 = evenPalindromeTuple2.zip(evenPalindromeTuple2).map(x\
    \ => x._1 + x._2)\n        val oddPalindromeTuple3 = oddPalindromeTuple2.zip(oddPalindromeTuple2).map(x\
    \ => x._1 + x._2)\n        val evenPalindromeTuple4 = evenPalindromeTuple3.zip(evenPalindromeTuple3).map(x\
    \ => x._1 + x._2)\n        val oddPalindromeTuple4 = oddPalindromeTuple3.zip(oddPalindromeTuple3).map(x\
    \ => x._1 + x._2)\n        val evenPalindromeTuple5 = evenPalindromeTuple4.zip(evenPalindromeTuple4).map(x\
    \ => x._1 + x._2)\n        val oddPalindromeTuple5 = oddPalindromeTuple4.zip(oddPalindromeTuple4).map(x\
    \ => x._1 + x._2)\n        val evenPalin", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCountMap = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap3 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap5 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap7 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap9 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n \
    \       val evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val\
    \ oddPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap12 = mutable.Map[",
  "        var even = 0\n        var odd = 0\n        var evenPalindrome = 0\n   \
    \     var oddPalindrome = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeSum = 0\n        var oddPalindromeSum\
    \ = 0\n        var evenPalindromeSumCount = 0\n        var oddPalindromeSumCount\
    \ = 0\n        var evenPalindromeSumOfEven = 0\n        var oddPalindromeSumOfEven\
    \ = 0\n        var evenPalindromeSumOfOdd = 0\n        var oddPalindromeSumOfOdd\
    \ = 0\n        var evenPalindromeSumOfEvenCount = 0\n        var oddPalindromeSumOfEvenCount\
    \ = 0\n        var evenPalindromeSumOfOddCount = 0\n        var oddPalindromeSumOfOddCount\
    \ = 0\n        var evenPalindromeSumOfEvenSum = 0\n        var oddPalindromeSumOfEvenSum\
    \ = 0\n        var evenPalindromeSumOfOddSum = 0\n        var oddPalindromeSumOfOddSum\
    \ = 0\n        var evenPalindromeSumOfEvenSumCount = 0\n        var oddPalindromeSumOfEvenSumCount\
    \ = 0\n        var evenPalindromeSumOfOddSumCount = 0\n        var oddPalindromeSumOfOddSumCount\
    \ = 0\n        var evenPalindromeSumOfEvenSumOfEven = 0\n        var oddPalindromeSumOfEvenSumOfEven\
    \ = 0\n        var evenPalindromeSumOfOddSumOfEven = 0\n        var oddPalindromeSumOfEvenSumOfEven\
    \ = 0\n        var evenPalindromeSumOfEvenSumOfOdd = 0\n        var oddPalindromeSumOfEvenSumOfOdd\
    \ = 0\n        var evenPalindromeSumOfOddSumOfOdd = 0\n        var oddPalindromeSumOfEvenSumOfOdd\
    \ = 0\n        var evenPalindromeSumOfEvenSumOfEvenCount = 0\n        var oddPalindromeSumOfEvenSumOfEvenCount\
    \ = 0\n        var evenPalindromeSumOfOddSumOfEvenCount = 0\n        var oddPalindromeSumOfEvenSumOfOddCount\
    \ = 0\n        var evenPalindromeSumOfEvenSumOfOddCount = 0\n        var oddPalindromeSumOfOddSumOfOddCount\
    \ = 0\n        var evenPalindromeSumOfOddSumOfOddCount = 0\n        var even",
  "        var even = 0\n        var odd = 0\n        var evenPalindrome = 0\n   \
    \     var oddPalindrome = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var even", "        var even = 0\n        var odd = 0\n        var evenPalindrome\
    \ = 0\n        var oddPalindrome = 0\n        var evenPalindromeCount = 0\n  \
    \      var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n     \
    \   var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var even", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList = mutable.Set[Long]()\n        val evenPalindromeCountList2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList3 = mutable.Set[Long]()\n        val oddPalindromeCountList3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList4 = mutable.Set[Long]()\n        val evenPalindromeCountList5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList6 = mutable.Set[Long]()\n        val oddPalindromeCountList6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList7 = mutable.Set[Long]()\n        val evenPalindromeCountList8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList9 = mutable.Set[Long]()\n        val oddPalindromeCountList9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList10 = mutable.Set[Long]()\n        val evenPalindromeCountList11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList12 = mutable.Set[Long]()\n        val oddPalindromeCountList12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList13 = mutable.Set[Long]()",
  "        var even = 0\n        var odd = 0\n        var evenPalindrome = 0\n   \
    \     var oddPalindrome = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var even", "        var evenPalindrome = 0\n        var oddPalindrome = 0\n\
    \        var even = 0\n        var odd = 0\n        var evenCount = 0\n      \
    \  var oddCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeEven = 0\n        var evenPalindromeOdd = 0\n\
    \        var oddPalindromeEven = 0\n        var oddPalindromeOdd = 0\n       \
    \ var evenPalindromeEvenCount = 0\n        var evenPalindromeOddCount = 0\n  \
    \      var oddPalindromeEvenCount = 0\n        var oddPalindromeOddCount = 0\n\
    \        var evenPalindromeEvenEven = 0\n        var evenPalindromeEvenOdd = 0\n\
    \        var evenPalindromeOddEven = 0\n        var evenPalindromeOddOdd = 0\n\
    \        var oddPalindromeEvenEven = 0\n        var oddPalindromeEvenOdd = 0\n\
    \        var oddPalindromeOddEven = 0\n        var oddPalindromeOddOdd = 0\n \
    \       var evenPalindromeEvenEvenCount = 0\n        var evenPalindromeEvenOddCount\
    \ = 0\n        var evenPalindromeOddEvenCount = 0\n        var evenPalindromeOddOddCount\
    \ = 0\n        var oddPalindromeEvenEvenCount = 0\n        var oddPalindromeEvenOddCount\
    \ = 0\n        var oddPalindromeOddEvenCount = 0\n        var oddPalindromeOddOddCount\
    \ = 0\n        var evenPalindromeEvenEven = 0\n        var evenPalindromeEvenOdd\
    \ = 0\n        var evenPalindromeOddEven = 0\n        var evenPalindromeOddOdd\
    \ = 0\n        var oddPalindromeEvenEven = 0\n        var oddPalindromeEvenOdd\
    \ = 0\n        var oddPalindromeOddEven = 0\n        var oddPalindromeOddOdd =\
    \ 0\n        var evenPalindromeEvenEven = 0\n        var evenPalindromeEvenOdd\
    \ = 0\n        var evenPalindromeOddEven = 0\n        var evenPalindromeOddOdd\
    \ = 0\n        var oddPalindromeEvenEven = 0\n        var oddPalindromeEvenOdd\
    \ = 0\n        var oddPalindromeOddEven = 0\n        var oddPalindromeOddOdd =\
    \ 0\n        var evenPalindromeEvenEven = 0\n        var evenPalindromeEvenOdd\
    \ = 0", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeRange = Range(1, n).filter(x => x % 2 == 0)\n\
    \        val oddPalindromeRange = Range(1, n).filter(x => x % 2 != 0)\n      \
    \  evenPalindromeRange foreach { x =>\n            val reverse = x.toString.reverse\n\
    \            if (reverse == x) {\n                evenPalindromes += x\n     \
    \           evenPalindromeCount += 1\n            }\n        }\n        oddPalindromeRange\
    \ foreach { x =>\n            val reverse = x.toString.reverse\n            if\
    \ (reverse == x) {\n                oddPalindromes += x\n                oddPalindromeCount\
    \ += 1\n            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeCountEven = 0\n        val oddPalindromeCountEven\
    \ = 0\n        val evenPalindromeCountOdd = 0\n        val oddPalindromeCountOdd\
    \ = 0\n        val evenPalindromeCountEvenOdd = 0\n        val oddPalindromeCountEvenOdd\
    \ = 0\n        val evenPalindromeCountOddOdd = 0\n        val oddPalindromeCountEvenOddOdd\
    \ = 0\n        val evenPalindromeCountEvenOddEven = 0\n        val oddPalindromeCountEvenOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOdd = 0\n        val oddPalindromeCountEvenOddEvenOdd\
    \ = 0\n        val evenPalindromeCountEvenOddOdd = 0\n        val oddPalindromeCountEvenOddOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOdd = 0\n        val oddPalindromeCountEvenOddEvenOdd\
    \ = 0\n        val evenPalindromeCountEvenOddOdd = 0\n        val oddPalindromeCountEvenOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOdd = 0\n        val oddPalindromeCountEvenOddOdd\
    \ = 0\n        val evenPalindromeCountEvenOddEven = 0\n        val oddPalindromeCountEvenOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOdd = 0\n        val oddPalindromeCountEvenOddOdd\
    \ = 0\n        val evenPalindromeCountEvenOddEven = 0\n        val oddPalindromeCountEvenOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOdd = 0\n        val oddPalindromeCountEvenOddOdd\
    \ = 0\n        val evenPalindromeCountEvenOddEven = 0\n        val oddPalindromeCountEvenOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOdd = 0\n        val oddPalindromeCountEvenOdd",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.Set[Long]()\n        val\
    \ oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCounts\
    \ = mutable.Set[Long]()\n        val oddPalindromeCounts = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPair = mutable.Set[Tuple2[Long, Long]]()\n   \
    \     val oddPalindromeCountPair = mutable.Set[Tuple2[Long, Long]]()\n       \
    \ val evenPalindromeCountPairs = mutable.Set[Tuple2[Long, Long]]()\n        val\
    \ oddPalindromeCountPairs = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeCountPairsSet\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeCountPairsSet\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeCountPairsSet2\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeCountPairsSet2\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeCountPairsSet3\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeCountPairsSet3\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeCountPairsSet4\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeCountPairsSet4\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeCountPairsSet5\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeCountPairsSet5\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeCountPairsSet6\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeCountPairsSet6\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeCountPairsSet7\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeCountPairsSet7\
    \ = mutable.", "        var even = 0\n        var odd = 0\n        var evenPalindrome\
    \ = 0\n        var oddPalindrome = 0\n        var evenPalindromeCount = 0\n  \
    \      var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n     \
    \   var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var even", "        val evenPalindromes = mutable.Set[Long]()\n     \
    \   val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCountMap = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap3 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap5 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap7 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap9 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n \
    \       val evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val\
    \ oddPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap12 = mutable.Map[",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        var evenPalindromeCountIndex\
    \ = 0\n        var oddPalindromeCountIndex = 0\n        var evenPalindromeCountMax\
    \ = 0\n        var oddPalindromeCountMax = 0\n        var evenPalindromeCountMin\
    \ = 0\n        var oddPalindromeCountMin = 0\n        var evenPalindromeCountSum\
    \ = 0\n        var oddPalindromeCountSum = 0\n        var evenPalindromeCountSumMax\
    \ = 0\n        var oddPalindromeCountSumMax = 0\n        var evenPalindromeCountSumMin\
    \ = 0\n        var oddPalindromeCountSumMin = 0\n        var evenPalindromeCountSumSum\
    \ = 0\n        var oddPalindromeCountSumSum = 0\n        var evenPalindromeCountSumSumMax\
    \ = 0\n        var oddPalindromeCountSumSumMax = 0\n        var evenPalindromeCountSumSumMin\
    \ = 0\n        var oddPalindromeCountSumSumMin = 0\n        var evenPalindromeCountSumSumSum\
    \ = 0\n        var oddPalindromeCountSumSumSum = 0\n        var evenPalindromeCountSumSumSumMax\
    \ = 0\n        var oddPalindromeCountSumSumSumMax = 0\n        var evenPalindromeCountSumSumSumMin\
    \ = 0\n        var oddPalindromeCountSumSumSumMin = 0\n        var evenPalindromeCountSumSumSumSum\
    \ = 0\n        var oddPalindromeCountSumSumSumSum = 0\n        var evenPalindromeCountSumSumSumSumMax\
    \ = 0\n        var oddPalindromeCountSumSumSumMax = 0\n        var evenPalindromeCountSumSumSumMin\
    \ = 0\n        var oddPalindromeCountSumSumSumMin = 0\n        var evenPalindromeCountSumSumSumSum\
    \ = 0\n        var oddPalindromeCountSumSumSumSum = 0\n        var evenPalindromeCountSumSumSumSumMax\
    \ = 0\n        var oddPalindromeCountSumSumSumMax = 0\n        var evenPalindromeCountSumSumSumSumMin\
    \ = 0\n        var oddPalindromeCountSumSumSumMin = 0\n        var evenPalindromeCountSumSumSumSum\
    \ = 0\n        var odd", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        var evenPalindrome\
    \ = 0\n        var oddPalindrome = 0\n        var i = 0\n        var j = 0\n \
    \       while (i < n) {\n            val currentNum = i + 1\n            while\
    \ (j < n) {\n                val nextNum = j + 1\n                if (currentNum\
    \ == nextNum) {\n                    j++\n                }\n                else\
    \ {\n                    val currentNumStr = currentNum.toString\n           \
    \         val nextNumStr = nextNum.toString\n                    if (currentNumStr\
    \ == nextNumStr) {\n                        evenPalindromes += currentNum\n  \
    \                      evenPalindrome = evenPalindrome + 1\n                 \
    \   }\n                    else {\n                        oddPalindromes += currentNum\n\
    \                        oddPalindrome = oddPalindrome + 1\n                 \
    \   }\n                    j++\n                }\n            }\n           \
    \ i += 1\n            j = 0\n        }\n        val evenPalindromeCount = evenPalindromes.toSeq.distinct\n\
    \        val oddPalindromeCount = oddPalindromes.toSeq.distinct\n        val evenPalindromeTuple\
    \ = evenPalindromeCount.toSeq.map(x => (x, evenPalindromeCount.count(_ == x))).toList\n\
    \        val oddPalindromeTuple = oddPalindromeCount.toSeq.map(x => (x, oddPalindromeCount.count(_\
    \ == x))).toList\n        evenPalindromeTuple.sortBy(_._1).reverse.head._2\n \
    \       oddPalindromeTuple.sortBy(_._1).reverse.head._2", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n     \
    \   val evenPalindromeRange = range(1, n).filter(x => x % 2 == 0)\n        val\
    \ oddPalindromeRange = range(1, n).filter(x => x % 2 != 0)\n        for (i <-\
    \ evenPalindromeRange) {\n            val reverse = i.reverse\n            if\
    \ (reverse == i) {\n                evenPalindromes += i\n                evenPalindromeCount\
    \ += 1\n            }\n        }\n        for (i <- oddPalindromeRange) {\n  \
    \          val reverse = i.reverse\n            if (reverse == i) {\n        \
    \        oddPalindromes += i\n                oddPalindromeCount += 1\n      \
    \      }\n        }\n        Tuple2(evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = 0\n    \
    \    val oddPalindromeCount = 0\n        val palindromes = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount = 0\n        val evenPalindrome = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindrome = mutable.ListBuffer.empty[Long]\n        val palindrome\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val palindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val palindromeCount = 0\n        val\
    \ evenPalindrome = mutable.ListBuffer.empty[Long]\n        val oddPalindrome =\
    \ mutable.ListBuffer.empty[Long]\n        val palindrome = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val palindromes = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount = 0\n        val evenPalindrome = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindrome = mutable.ListBuffer.empty[Long]\n        val palindrome\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val palindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val palindromeCount = 0\n        val\
    \ evenPalindrome = mutable.ListBuffer.empty[Long]\n        val oddPalindrome =\
    \ mutable.ListBuffer.empty[Long]\n        val palindrome = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val palindromes = mutable.ListBuffer.empty[Long]\n\
    \        val palindrome", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCounts = mutable.Set[Long]()\n        val oddPalindromeCounts\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountMap = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap = mutable.Map[Long, Long]()\n   \
    \     val evenPalindromeCountMaps = mutable.Map[Long, mutable.Set[Long]]()\n \
    \       val oddPalindromeCountMaps = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val evenPalindromeCountMaps2 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val oddPalindromeCountMaps2 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val evenPalindromeCountMaps3 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val oddPalindromeCountMaps3 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val evenPalindromeCountMaps4 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val oddPalindromeCountMaps4 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val evenPalindromeCountMaps5 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val oddPalindromeCountMaps5 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val evenPalindromeCountMaps6 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val oddPalindromeCountMaps6 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val evenPalindromeCountMaps7 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val oddPalindromeCountMaps7 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val evenPalindromeCountMaps8 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val oddPalindromeCountMaps8 = mutable.Map[Long, mutable.Set[Long]]",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeCountPerRange = mutable.Set[Long]()\n       \
    \ val oddPalindromeCountPerRange = mutable.Set[Long]()\n        val evenPalindromeCountPerRangePerRange\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPerRangePerRangePerRange",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.Set[Long]()\n        val\
    \ oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCountList\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList2 = mutable.Set[Long]()\n        val oddPalindromeCountList2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList3 = mutable.Set[Long]()\n        val evenPalindromeCountList4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList5 = mutable.Set[Long]()\n        val oddPalindromeCountList5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList6 = mutable.Set[Long]()\n        val evenPalindromeCountList7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList8 = mutable.Set[Long]()\n        val oddPalindromeCountList8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList9 = mutable.Set[Long]()\n        val evenPalindromeCountList10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList11 = mutable.Set[Long]()\n        val oddPalindromeCountList11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList12 = mutable.Set[Long]()\n        val evenPalindromeCountList13\
    \ = mutable.Set[Long]()", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeSum = 0\n\
    \        val oddPalindromeSum = 0\n        val evenPalindromeSum2 = 0\n      \
    \  val oddPalindromeSum2 = 0\n        val evenPalindromeSum3 = 0\n        val\
    \ oddPalindromeSum3 = 0\n        val evenPalindromeSum4 = 0\n        val oddPalindromeSum4\
    \ = 0\n        val evenPalindromeSum5 = 0\n        val oddPalindromeSum5 = 0\n\
    \        val evenPalindromeSum6 = 0\n        val oddPalindromeSum6 = 0\n     \
    \   val evenPalindromeSum7 = 0\n        val oddPalindromeSum7 = 0\n        val\
    \ evenPalindromeSum8 = 0\n        val oddPalindromeSum8 = 0\n        val evenPalindromeSum9\
    \ = 0\n        val oddPalindromeSum9 = 0\n        val evenPalindromeSum10 = 0\n\
    \        val oddPalindromeSum10 = 0\n        val evenPalindromeSum11 = 0\n   \
    \     val oddPalindromeSum11 = 0\n        val evenPalindromeSum12 = 0\n      \
    \  val oddPalindromeSum12 = 0\n        val evenPalindromeSum13 = 0\n        val\
    \ oddPalindromeSum13 = 0\n        val evenPalindromeSum14 = 0\n        val oddPalindromeSum14\
    \ = 0\n        val evenPalindromeSum15 = 0\n        val oddPalindromeSum15 = 0\n\
    \        val evenPalindromeSum16 = 0\n        val oddPalindromeSum16 = 0\n   \
    \     val evenPalindromeSum17 = 0\n        val oddPalindromeSum17 = 0\n      \
    \  val evenPalindromeSum18 = 0\n        val oddPalindromeSum18 = 0\n        val\
    \ evenPalindromeSum19 = 0\n        val oddPalindromeSum19 = 0\n        val evenPalindromeSum20\
    \ = 0\n        val oddPalindromeSum20 = 0\n        val evenPalindromeSum21 = 0\n\
    \        val oddPalindromeSum21 = 0\n", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverse = mutable.ListBuffer[Long]()\n       \
    \ val oddPalindromeCountReverse = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverse =\
    \ mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple2 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple2 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple3 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple3 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple4 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple4 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple5 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple5 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple6 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple6 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple7 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple7 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple8 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple8 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple9 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple9 = Tuple2(evenPalindromeCount, ",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        var even = 0\n        var odd = 0\n  \
    \      for(i <- 1 to n) {\n            val reverse = i.toString.reverse\n    \
    \        val isEven = reverse.forall(x => x % 2 == 0)\n            if(isEven)\
    \ {\n                even += 1\n                evenPalindromes += i\n       \
    \     } else {\n                odd += 1\n                oddPalindromes += i\n\
    \            }\n        }\n        (even, odd)", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14 = ", "     \
    \   val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverse = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverseReverse = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountReverseReverse = mutable.ListBuffer[Long]()\n \
    \       val evenPalindromeCountReverseReverseReverse = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountReverseReverseReverse = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverseReverseReverseReverse = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountReverseReverseReverseReverse = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverseReverseReverseReverse = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountReverseReverseReverseReverse = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverseReverseReverseReverseReverse = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountReverseReverseReverseReverseReverse = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverseReverseReverseReverseReverse = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountReverseReverseReverseReverseReverse = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverseReverseReverseReverseReverse = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountReverseReverseReverseReverseReverse = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverseReverseReverseReverseReverseReverse = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountReverseReverseReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCountMap = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap3 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap5 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap7 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap9 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n \
    \       val evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val\
    \ oddPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap12 = mutable.Map[",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeSum = 0\n        val oddPalindromeSum = 0\n \
    \       val evenPalindromeSum2 = 0\n        val oddPalindromeSum2 = 0\n      \
    \  val evenPalindromeSum3 = 0\n        val oddPalindromeSum3 = 0\n        val\
    \ evenPalindromeSum4 = 0\n        val oddPalindromeSum4 = 0\n        val evenPalindromeSum5\
    \ = 0\n        val oddPalindromeSum5 = 0\n        val evenPalindromeSum6 = 0\n\
    \        val oddPalindromeSum6 = 0\n        val evenPalindromeSum7 = 0\n     \
    \   val oddPalindromeSum7 = 0\n        val evenPalindromeSum8 = 0\n        val\
    \ oddPalindromeSum8 = 0\n        val evenPalindromeSum9 = 0\n        val oddPalindromeSum9\
    \ = 0\n        val evenPalindromeSum10 = 0\n        val oddPalindromeSum10 = 0\n\
    \        val evenPalindromeSum11 = 0\n        val oddPalindromeSum11 = 0\n   \
    \     val evenPalindromeSum12 = 0\n        val oddPalindromeSum12 = 0\n      \
    \  val evenPalindromeSum13 = 0\n        val oddPalindromeSum13 = 0\n        val\
    \ evenPalindromeSum14 = 0\n        val oddPalindromeSum14 = 0\n        val evenPalindromeSum15\
    \ = 0\n        val oddPalindromeSum15 = 0\n        val evenPalindromeSum16 = 0\n\
    \        val oddPalindromeSum16 = 0\n        val evenPalindromeSum17 = 0\n   \
    \     val oddPalindromeSum17 = 0\n        val evenPalindromeSum18 = 0\n      \
    \  val oddPalindromeSum18 = 0\n        val evenPalindromeSum19 = 0\n        val\
    \ oddPalindromeSum19 = 0\n        val evenPalindromeSum20 = 0\n        val oddPalindromeSum20\
    \ = 0\n        val evenPalindromeSum21 = 0\n        val oddPalindromeSum21 = 0\n",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeRange = Range(1, n).filter(x => x % 2 == 0)\n\
    \        val oddPalindromeRange = Range(1, n).filter(x => x % 2 != 0)\n      \
    \  evenPalindromeRange foreach { x =>\n            val reversed = x.reverse\n\
    \            if (evenPalindromes.contains(reversed)) evenPalindromeCount += 1\n\
    \            else evenPalindromes += reversed\n        }\n        oddPalindromeRange\
    \ foreach { x =>\n            val reversed = x.reverse\n            if (oddPalindromes.contains(reversed))\
    \ oddPalindromeCount += 1\n            else oddPalindromes += reversed\n     \
    \   }\n        (evenPalindromeCount, oddPalindromeCount)", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n     \
    \   val evenPalindromeCounts = mutable.Set[Long]()\n        val oddPalindromeCounts\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountArray = mutable.Array[Long]()\n\
    \        val oddPalindromeCountArray = mutable.Array[Long]()\n        val evenPalindromeCountArray2\
    \ = mutable.Array[Long]()\n        val oddPalindromeCountArray2 = mutable.Array[Long]()\n\
    \        val evenPalindromeCountArray3 = mutable.Array[Long]()\n        val oddPalindromeCountArray3\
    \ = mutable.Array[Long]()\n        val evenPalindromeCountArray4 = mutable.Array[Long]()\n\
    \        val oddPalindromeCountArray4 = mutable.Array[Long]()\n        val evenPalindromeCountArray5\
    \ = mutable.Array[Long]()\n        val oddPalindromeCountArray5 = mutable.Array[Long]()\n\
    \        val evenPalindromeCountArray6 = mutable.Array[Long]()\n        val oddPalindromeCountArray6\
    \ = mutable.Array[Long]()\n        val evenPalindromeCountArray7 = mutable.Array[Long]()\n\
    \        val oddPalindromeCountArray7 = mutable.Array[Long]()\n        val evenPalindromeCountArray8\
    \ = mutable.Array[Long]()\n        val oddPalindromeCountArray8 = mutable.Array[Long]()\n\
    \        val evenPalindromeCountArray9 = mutable.Array[Long]()\n        val oddPalindromeCountArray9\
    \ = mutable.Array[Long]()\n        val evenPalindromeCountArray10 = mutable.Array[Long]()\n\
    \        val oddPalindromeCountArray10 = mutable.Array[Long]()\n        val evenPalindromeCountArray11\
    \ = mutable.Array[Long]()\n        val oddPalindromeCountArray11 = mutable.Array[Long]()\n\
    \        val evenPalindromeCountArray12 = mutable.Array[Long]()\n        val oddPalindromeCountArray12\
    \ = mutable.", "        val evenPalindromes = mutable.Set[Long]()\n        val\
    \ oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCounts\
    \ = mutable.Set[Long]()\n        val oddPalindromeCounts = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList = mutable.Set[Long]()\n        val oddPalindromeCountList\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountLists = mutable.Set[Long]()\n\
    \        val oddPalindromeCountLists = mutable.Set[Long]()\n        val evenPalindromeCountListss\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountListss = mutable.Set[Long]()\n\
    \        val evenPalindromeCountListsss = mutable.Set[Long]()\n        val oddPalindromeCountListsss\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountListssss = mutable.Set[Long]()\n\
    \        val oddPalindromeCountListssss = mutable.Set[Long]()\n        val evenPalindromeCountListsssss\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountListsssss = mutable.Set[Long]()\n\
    \        val evenPalindromeCountListssssss = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountListssssss = mutable.Set[Long]()\n        val evenPalindromeCountListssssss\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountListssssss = mutable.Set[Long]()\n\
    \        val evenPalindromeCountListssssss = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountListssssss = mutable.Set[Long]()\n        val evenPalindromeCountListssssss\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountListssssss = mutable.Set[Long]()\n\
    \        val evenPalindromeCountListssssss = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountListss", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuples = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val oddPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val evenPalindromeTuples\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuples = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val oddPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val evenPalindromeTuples\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuples = mutable.",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long, Long]()\n\
    \        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n        val\
    \ evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap11\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap12 = mutable.Map[", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindrome = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        var even = 0\n        var odd = 0\n        var\
    \ i = 0\n        var j = 0\n        while (i < n) {\n            while (j < n)\
    \ {\n                if (i % 10 == j % 10) {\n                    evenPalindromes\
    \ += i\n                    oddPalindromes += j\n                    j++\n   \
    \             } else {\n                    j++\n                }\n         \
    \   }\n            even++\n            odd++\n            i += 1\n           \
    \ j = 0\n        }\n        (even, odd)", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCountMap = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap3 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap5 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap7 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap9 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n \
    \       val evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val\
    \ oddPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap12 = mutable.Map[",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeSum = 0\n        val oddPalindromeSum = 0\n \
    \       val evenPalindromeSum2 = 0\n        val oddPalindromeSum2 = 0\n      \
    \  val evenPalindromeSum3 = 0\n        val oddPalindromeSum3 = 0\n        val\
    \ evenPalindromeSum4 = 0\n        val oddPalindromeSum4 = 0\n        val evenPalindromeSum5\
    \ = 0\n        val oddPalindromeSum5 = 0\n        val evenPalindromeSum6 = 0\n\
    \        val oddPalindromeSum6 = 0\n        val evenPalindromeSum7 = 0\n     \
    \   val oddPalindromeSum7 = 0\n        val evenPalindromeSum8 = 0\n        val\
    \ oddPalindromeSum8 = 0\n        val evenPalindromeSum9 = 0\n        val oddPalindromeSum9\
    \ = 0\n        val evenPalindromeSum10 = 0\n        val oddPalindromeSum10 = 0\n\
    \        val evenPalindromeSum11 = 0\n        val oddPalindromeSum11 = 0\n   \
    \     val evenPalindromeSum12 = 0\n        val oddPalindromeSum12 = 0\n      \
    \  val evenPalindromeSum13 = 0\n        val oddPalindromeSum13 = 0\n        val\
    \ evenPalindromeSum14 = 0\n        val oddPalindromeSum14 = 0\n        val evenPalindromeSum15\
    \ = 0\n        val oddPalindromeSum15 = 0\n        val evenPalindromeSum16 = 0\n\
    \        val oddPalindromeSum16 = 0\n        val evenPalindromeSum17 = 0\n   \
    \     val oddPalindromeSum17 = 0\n        val evenPalindromeSum18 = 0\n      \
    \  val oddPalindromeSum18 = 0\n        val evenPalindromeSum19 = 0\n        val\
    \ oddPalindromeSum19 = 0\n        val evenPalindromeSum20 = 0\n        val oddPalindromeSum20\
    \ = 0\n        val evenPalindromeSum21 = 0\n        val oddPalindromeSum21 = 0\n",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeRange = Range(1, n).filter(x => x % 2 == 0)\n\
    \        val oddPalindromeRange = Range(1, n).filter(x => x % 2 != 0)\n      \
    \  evenPalindromeRange foreach { x =>\n            val reversed = x.reverse\n\
    \            if (reversed == x) {\n                evenPalindromes += x\n    \
    \            evenPalindromeCount += 1\n            }\n        }\n        oddPalindromeRange\
    \ foreach { x =>\n            val reversed = x.reverse\n            if (reversed\
    \ == x) {\n                oddPalindromes += x\n                oddPalindromeCount\
    \ += 1\n            }\n        }\n        val evenPalindromeTuple = evenPalindromes.toSeq.sortBy(x\
    \ => x).reverse.take(n)\n        val oddPalindromeTuple = oddPalindromes.toSeq.sortBy(x\
    \ => x).reverse.take(n)\n        evenPalindromeCount -> oddPalindromeCount", " \
    \       val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n       \
    \ val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountMap = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap3 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap5 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap7 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap9 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n \
    \       val evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val\
    \ oddPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap", "        val\
    \ evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        var even = 0\n\
    \        var odd = 0\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        var evenPalindrome = 0\n        var oddPalindrome = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount2 =\
    \ 0\n        var oddPalindromeCount2 = 0\n        var evenPalindromeCount3 = 0\n\
    \        var oddPalindromeCount3 = 0\n        var evenPalindromeCount4 = 0\n \
    \       var oddPalindromeCount4 = 0\n        var evenPalindromeCount5 = 0\n  \
    \      var oddPalindromeCount5 = 0\n        var evenPalindromeCount6 = 0\n   \
    \     var oddPalindromeCount6 = 0\n        var evenPalindromeCount7 = 0\n    \
    \    var oddPalindromeCount7 = 0\n        var evenPalindromeCount8 = 0\n     \
    \   var oddPalindromeCount8 = 0\n        var evenPalindromeCount9 = 0\n      \
    \  var oddPalindromeCount9 = 0\n        var evenPalindromeCount10 = 0\n      \
    \  var oddPalindromeCount10 = 0\n        var evenPalindromeCount11 = 0\n     \
    \   var oddPalindromeCount11 = 0\n        var evenPalindromeCount12 = 0\n    \
    \    var oddPalindromeCount12 = 0\n        var evenPalindromeCount13 = 0\n   \
    \     var oddPalindromeCount13 = 0\n        var evenPalindromeCount14 = 0\n  \
    \      var oddPalindromeCount14 = 0\n        var evenPalindromeCount15 = 0\n \
    \       var oddPalindromeCount15 = 0\n        var evenPalindromeCount16 = 0\n\
    \        var oddPalindromeCount16 = 0\n        var evenPalindromeCount17 = 0\n\
    \        var oddPalindromeCount17 = 0\n        var evenPalindromeCount18 = 0\n\
    \        var oddPalindromeCount18 = 0\n        var evenPalindromeCount19 = 0\n\
    \        var oddPalindromeCount19 = 0\n        var evenPalindromeCount20 = 0\n\
    \        var oddPalindromeCount20 = 0\n        var evenPalindromeCount21 = 0\n\
    \        var oddPalindromeCount21 = 0\n        var evenPalindromeCount22 = 0\n\
    \        var oddPalindromeCount22 = 0\n        var evenPalindro", "        val\
    \ evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        val oddPalindromeCount10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount11 = mutable.Set[Long]()\n        val evenPalindromeCount12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount13 = mutable.Set[Long]()\n        val oddPalindromeCount13\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount14 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount14 = mutable.Set[Long]()\n        val ", "    \
    \    val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n     \
    \   val evenPalindromeCountPerNumber = mutable.Map[Long, Long]()\n        val\
    \ oddPalindromeCountPerNumber = mutable.Map[Long, Long]()\n        val evenPalindromeCountPerNumberPerNumber\
    \ = mutable.Map[Long, mutable.Map[Long, Long]]()\n        val oddPalindromeCountPerNumberPerNumber\
    \ = mutable.Map[Long, mutable.Map[Long, Long]]()\n        val evenPalindromeCountPerNumberPerNumberPerNumber\
    \ = mutable.Map[Long, mutable.Map[mutable.Map[Long, Long], mutable.Map[Long, Long]]]()\n\
    \        val oddPalindromeCountPerNumberPerNumberPerNumber = mutable.Map[Long,\
    \ mutable.Map[mutable.Map[Long, Long], mutable.Map[Long, Long]]]()\n        val\
    \ evenPalindromeCountPerNumberPerNumberPerNumberPerNumber = mutable.Map[Long,\
    \ mutable.Map[mutable.Map[mutable.Map[Long, Long], mutable.Map[Long, Long]], mutable.Map[Long,\
    \ Long]]]()\n        val oddPalindromeCountPerNumberPerNumberPerNumberPerNumber\
    \ = mutable.Map[Long, mutable.Map[mutable.Map[mutable.Map[mutable.Map[Long, Long],\
    \ mutable.Map[Long, Long]], mutable.Map[Long, Long]]]()\n        val evenPalindromeCountPerNumberPerNumberPerNumberPerNumber\
    \ = mutable.Map[Long, mutable.Map[mutable.Map[mutable.Map[mutable.Map[mutable.Map[Long,\
    \ Long], mutable.Map[Long, Long]], mutable.Map[Long, Long]]]()\n        val oddPalindromeCountPerNumberPerNumberPerNumberPerNumberPerNumber\
    \ = mutable.Map[Long, mutable.Map[mutable.Map[mutable.Map[mutable.Map[mutable.Map[mutable.Map[Long,\
    \ Long], mutable.Map[Long, Long]], mutable.Map[Long, Long]]], mutable.Map[Long,\
    \ Long]]]()\n        val evenPalindromeCountPerNumberPerNumberPerNumberPerNumberPerNumber\
    \ = mutable.Map[Long, mutable.Map[mutable.Map[mutable.Map[mutable.Map[mutable.Map[mutable.Map[mutable.Map[mutable.Map[Long,\
    \ Long], mutable.Map[Long, Long]], mutable.", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountEven\
    \ = 0\n        val oddPalindromeCountEven = 0\n        val evenPalindromeCountOdd\
    \ = 0\n        val oddPalindromeCountOdd = 0\n        val evenPalindromeCountEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOdd = 0\n        val evenPalindromeCountOddOdd\
    \ = 0\n        val oddPalindromeCountOddOdd = 0\n        val evenPalindromeCountEvenOddOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOdd = 0\n        val evenPalindromeCountOddOddOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddOdd = 0\n        val evenPalindromeCountEvenOddOddOdd\
    \ = 0\n        val oddPalindromeCountOddOddOddOdd = 0\n        val evenPalindromeCountEvenOddOddOddOdd\
    \ = 0\n        val oddPalindromeCountOddOddOddOddOdd = 0\n        val evenPalindromeCountEvenOddOddOddOddOdd\
    \ = 0\n        val oddPalindromeCountOddOddOddOddOddOdd = 0\n        val evenPalindromeCountEvenOddOddOddOddOddOdd\
    \ = 0\n        val oddPalindromeCountOddOddOddOddOddOddOdd = 0\n        val evenPalindromeCountEvenOddOddOddOddOddOddOdd\
    \ = 0\n        val oddPalindromeCountOddOddOddOddOddOddOddOdd = 0\n        val\
    \ evenPalindromeCountEvenOddOddOddOddOddOddOddOdd = 0\n        val oddPalindromeCountOddOddOddOddOddOddOddOddOdd\
    \ = 0\n        val evenPalindromeCountEvenOddOddOddOddOddOddOddOdd = 0\n", " \
    \       val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        var even = 0\n        var odd = 0\n  \
    \      var i = 0\n        var j = 0\n        while (i < n) {\n            val\
    \ temp = i\n            while (temp > 0) {\n                val remainder = temp\
    \ % 10\n                if (remainder % 2 == 0) {\n                    evenPalindromes\
    \ += i\n                    even = even + 1\n                }\n             \
    \   temp = temp / 10\n            }\n            while (j > 0) {\n           \
    \     val remainder = j % 10\n                if (remainder % 2 == 1) {\n    \
    \                oddPalindromes += j\n                    odd = odd + 1 \n   \
    \             }\n                j = j / 10\n            }\n            i = i\
    \ + 1\n            j = j + 1\n        }\n        val evenPalindrome = evenPalindromes.toList\n\
    \        val oddPalindrome = oddPalindromes.toList\n        val evenPalindromeTuple\
    \ = evenPalindrome.size\n        val oddPalindromeTuple = oddPalindrome.size\n\
    \        (evenPalindromeTuple, oddPalindromeTuple)", "        val evenPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n       \
    \ val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList = mutable.Set[Long]()\n        val oddPalindromeCountList\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList2 = mutable.Set[Long]()\n        val evenPalindromeCountList3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList4 = mutable.Set[Long]()\n        val oddPalindromeCountList4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList5 = mutable.Set[Long]()\n        val evenPalindromeCountList6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList7 = mutable.Set[Long]()\n        val oddPalindromeCountList7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList8 = mutable.Set[Long]()\n        val evenPalindromeCountList9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList10 = mutable.Set[Long]()\n        val oddPalindromeCountList10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList11 = mutable.Set[Long]()\n        val evenPalindromeCountList12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList13 = mutable.Set[Long]()", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCounts = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCounts = mutable.ListBuffer[Long]()\n        val evenPalindromeCountPair\
    \ = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val oddPalindromeCountPair\
    \ = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val evenPalindromeCountPairs\
    \ = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val oddPalindromeCountPairs\
    \ = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val evenPalindromeCountPair\
    \ = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val oddPalindromeCountPair\
    \ = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val evenPalindromeCountPairs\
    \ = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val oddPalindromeCountPairs\
    \ = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val evenPalindromeCountPair\
    \ = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val oddPalindromeCountPair\
    \ = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val evenPalindromeCountPairs\
    \ = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val oddPalindromeCountPairs\
    \ = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val evenPalindromeCountPair\
    \ = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val oddPalindromeCountPair\
    \ = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val evenPalindromeCountPairs\
    \ = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val oddPalindromeCountPairs\
    \ = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val evenPalindromeCountPair\
    \ = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val oddPalindromeCountPair\
    \ = mutable.ListBuffer[Tuple2[", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeSum = 0\n\
    \        val oddPalindromeSum = 0\n        val evenPalindromeMax = 0\n       \
    \ val oddPalindromeMax = 0\n        val evenPalindromeMin = 0\n        val oddPalindromeMin\
    \ = 0\n        val evenPalindromeSumOfEven = 0\n        val oddPalindromeSumOfEven\
    \ = 0\n        val evenPalindromeSumOfOdd = 0\n        val oddPalindromeSumOfOdd\
    \ = 0\n        val evenPalindromeMaxOfEven = 0\n        val oddPalindromeMaxOfEven\
    \ = 0\n        val evenPalindromeMaxOfOdd = 0\n        val oddPalindromeMaxOfOdd\
    \ = 0\n        val evenPalindromeMinOfEven = 0\n        val oddPalindromeMinOfEven\
    \ = 0\n        val evenPalindromeMinOfOdd = 0\n        val oddPalindromeMinOfOdd\
    \ = 0\n        val evenPalindromeSumOfEvenPalindromes = 0\n        val oddPalindromeSumOfEvenPalindromes\
    \ = 0\n        val evenPalindromeSumOfOddPalindromes = 0\n        val oddPalindromeSumOfOddPalindromes\
    \ = 0\n        val evenPalindromeMaxOfEvenPalindromes = 0\n        val oddPalindromeMaxOfEvenPalindromes\
    \ = 0\n        val evenPalindromeMaxOfOddPalindromes = 0\n        val oddPalindromeMaxOfOddPalindromes\
    \ = 0\n        val evenPalindromeMinOfEvenPalindromes = 0\n        val oddPalindromeMinOfEvenPalindromes\
    \ = 0\n        val evenPalindromeMinOfOddPalindromes = 0\n        val oddPalindromeMinOfOddPalindromes\
    \ = 0\n        val evenPalindromeSumOfEvenPalindrome = 0\n        val oddPalindromeSumOfEvenPalindrome\
    \ = 0\n        val evenPalindromeSumOfOddPalindrome = 0\n        val odd", " \
    \       val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuplesSet\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuplesSet2 = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val oddPalindromeTuplesSet2 = mutable.Set[Tuple2[Long, Long]]()\n   \
    \     val evenPalindromeTuplesSet3 = mutable.Set[Tuple2[Long, Long]]()\n     \
    \   val oddPalindromeTuplesSet3 = mutable.Set[Tuple2[Long, Long]]()\n        val\
    \ evenPalindromeTuplesSet4 = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet4\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuplesSet5 =\
    \ mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet5 = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuplesSet6 = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val oddPalindromeTuplesSet6 = mutable.Set[Tuple2[Long, Long]]()\n   \
    \     val evenPalindromeTuplesSet7 = mutable.Set[Tuple2[Long, Long]]()\n     \
    \   val oddPalindromeTuplesSet7 = mutable.Set[Tuple2[Long, Long]]()\n        val\
    \ evenPalindromeTuplesSet8 = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet8\
    \ = mutable.Set[Tuple2[Long, Long]]", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = 1\
    \ to n\n        val oddPalindromeRange = 1 to n\n        evenPalindromeRange foreach\
    \ { x =>\n            val reversed = x.reverse\n            val isEven = reversed.toString.toInt\
    \ == x\n            if (isEven) {\n                evenPalindromes += x\n    \
    \            evenPalindromeCount += 1\n            } else {\n                oddPalindromes\
    \ += x\n                oddPalindromeCount += 1\n            }\n        }\n  \
    \      (evenPalindromeCount, oddPalindromeCount)", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountMap = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap = mutable.Map[Long, Long]()\n   \
    \     val evenPalindromeCountMap2 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap2\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap3 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap3 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap4 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap4\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap5 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap5 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap6 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap6\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap7 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap7 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap8 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap8\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap9 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap9 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap10 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap10\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap11 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap11 = mutable.Map[Long, Long]()\n \
    \       val evenPalindromeCountMap12 = mutable.Map[Long, Long]()\n        val\
    \ oddPalindromeCountMap12 = mutable.Map[", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = range(1,\
    \ n).filter(x => x % 2 == 0)\n        val oddPalindromeRange = range(1, n).filter(x\
    \ => x % 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val\
    \ reversed = x.reverse\n            if (x == reversed) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            }\n        }\n \
    \       oddPalindromeRange foreach { x =>\n            val reversed = x.reverse\n\
    \            if (x == reversed) {\n                oddPalindromes += x\n     \
    \           oddPalindromeCount += 1\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountEven\
    \ = 0\n        val oddPalindromeCountEven = 0\n        val evenPalindromeCountOdd\
    \ = 0\n        val oddPalindromeCountOdd = 0\n        val evenPalindromeCountEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOdd = 0\n        val evenPalindromeCountOddOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOdd = 0\n        val evenPalindromeCountOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddEvenOdd = 0\n        val evenPalindromeCountOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOdd = 0\n        val evenPalindromeCountOddEvenOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOddOdd = 0\n        val evenPalindromeCountOddEvenOddOddEvenOddOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOddOddEvenOdd = 0\n       \
    \ val evenPalindromeCountOddOddEvenOddOddEvenOddOdd = 0\n        val oddPalindromeCountEvenOddOddOddEvenOddOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOddOddOddEvenOddOddEvenOdd = 0\n\
    \        val oddPalindromeCountEvenOddOddOddEvenOddOddOddEvenOddOdd = 0\n    \
    \    val evenPalindromeCountOddEvenOddOddOddEvenOddOddOddEvenOdd = 0\n       \
    \ val oddPalindromeCountEvenOddOddOddEvenOddOddOddOddEvenOddOdd = 0\n        val\
    \ evenPalindromeCountOddEvenOddOddOddOddOddEvenOddOddEvenOdd = 0\n        val\
    \ oddPalindromeCountEvenOddO", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet2 = mutable.Set[Long]()\n        val oddPalindromeCountSet2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet3 = mutable.Set[Long]()\n        val evenPalindromeCountSet4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet5 = mutable.Set[Long]()\n        val oddPalindromeCountSet5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet6 = mutable.Set[Long]()\n        val evenPalindromeCountSet7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet8 = mutable.Set[Long]()\n        val oddPalindromeCountSet8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet9 = mutable.Set[Long]()\n        val evenPalindromeCountSet10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet11 = mutable.Set[Long]()\n        val oddPalindromeCountSet11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet12 = mutable.Set[Long]()\n        val evenPalindromeCountSet13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14 = ", "     \
    \   var even = 0\n        var odd = 0\n        var evenPalindrome = 0\n      \
    \  var oddPalindrome = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ even", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        var evenPalindrome = 0\n    \
    \    var oddPalindrome = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount2 = 0\n        var oddPalindromeCount2 =\
    \ 0\n        var evenPalindromeCount3 = 0\n        var oddPalindromeCount3 = 0\n\
    \        var evenPalindromeCount4 = 0\n        var oddPalindromeCount4 = 0\n \
    \       var evenPalindromeCount5 = 0\n        var oddPalindromeCount5 = 0\n  \
    \      var evenPalindromeCount6 = 0\n        var oddPalindromeCount6 = 0\n   \
    \     var evenPalindromeCount7 = 0\n        var oddPalindromeCount7 = 0\n    \
    \    var evenPalindromeCount8 = 0\n        var oddPalindromeCount8 = 0\n     \
    \   var evenPalindromeCount9 = 0\n        var oddPalindromeCount9 = 0\n      \
    \  var evenPalindromeCount10 = 0\n        var oddPalindromeCount10 = 0\n     \
    \   var evenPalindromeCount11 = 0\n        var oddPalindromeCount11 = 0\n    \
    \    var evenPalindromeCount12 = 0\n        var oddPalindromeCount12 = 0\n   \
    \     var evenPalindromeCount13 = 0\n        var oddPalindromeCount13 = 0\n  \
    \      var evenPalindromeCount14 = 0\n        var oddPalindromeCount14 = 0\n \
    \       var evenPalindromeCount15 = 0\n        var oddPalindromeCount15 = 0\n\
    \        var evenPalindromeCount16 = 0\n        var oddPalindromeCount16 = 0\n\
    \        var evenPalindromeCount17 = 0\n        var oddPalindromeCount17 = 0\n\
    \        var evenPalindromeCount18 = 0\n        var oddPalindromeCount18 = 0\n\
    \        var evenPalindromeCount19 = 0\n        var oddPalindromeCount19 = 0\n\
    \        var evenPalindromeCount20 = 0\n        var oddPalindromeCount20 = 0\n\
    \        var evenPalindromeCount21 = 0\n        var oddPalindromeCount21 = 0\n\
    \        var evenPalindromeCount22 = 0\n        var oddPalindromeCount22 = 0\n\
    \        var evenPalindromeCount23 = 0\n        var oddPalindromeCount23 = 0\n\
    \        var evenPalindromeCount24 = 0\n        var oddPalindromeCount24 = 0\n\
    \        var evenPalindromeCount25 = 0\n        var oddPalindromeCount25", " \
    \       val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCountList\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList2 = mutable.Set[Long]()\n        val oddPalindromeCountList2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList3 = mutable.Set[Long]()\n        val evenPalindromeCountList4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList5 = mutable.Set[Long]()\n        val oddPalindromeCountList5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList6 = mutable.Set[Long]()\n        val evenPalindromeCountList7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList8 = mutable.Set[Long]()\n        val oddPalindromeCountList8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList9 = mutable.Set[Long]()\n        val evenPalindromeCountList10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList11 = mutable.Set[Long]()\n        val oddPalindromeCountList11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList12 = mutable.Set[Long]()\n        val evenPalindromeCountList13\
    \ = mutable.Set[Long]()", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList = mutable.Set[Long]()\n        val oddPalindromeCountList\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList2 = mutable.Set[Long]()\n        val evenPalindromeCountList3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList4 = mutable.Set[Long]()\n        val oddPalindromeCountList4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList5 = mutable.Set[Long]()\n        val evenPalindromeCountList6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList7 = mutable.Set[Long]()\n        val oddPalindromeCountList7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList8 = mutable.Set[Long]()\n        val evenPalindromeCountList9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList10 = mutable.Set[Long]()\n        val oddPalindromeCountList10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList11 = mutable.Set[Long]()\n        val evenPalindromeCountList12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList13 = mutable.Set[Long]()", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n     \
    \   val evenPalindromeRange = Range(1, n).filter(x => x % 2 == 0)\n        val\
    \ oddPalindromeRange = Range(1, n).filter(x => x % 2 != 0)\n        evenPalindromeRange\
    \ foreach { x =>\n            val reversed = x.reverse\n            if (reversed\
    \ == x) {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            }\n        }\n        oddPalindromeRange foreach { x =>\n\
    \            val reversed = x.reverse\n            if (reversed == x) {\n    \
    \            oddPalindromes += x\n                oddPalindromeCount += 1\n  \
    \          }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", " \
    \       val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuplesSet\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuplesSet2 = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val oddPalindromeTuplesSet2 = mutable.Set[Tuple2[Long, Long]]()\n   \
    \     val evenPalindromeTuplesSet3 = mutable.Set[Tuple2[Long, Long]]()\n     \
    \   val oddPalindromeTuplesSet3 = mutable.Set[Tuple2[Long, Long]]()\n        val\
    \ evenPalindromeTuplesSet4 = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet4\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuplesSet5 =\
    \ mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet5 = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuplesSet6 = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val oddPalindromeTuplesSet6 = mutable.Set[Tuple2[Long, Long]]()\n   \
    \     val evenPalindromeTuplesSet7 = mutable.Set[Tuple2[Long, Long]]()\n     \
    \   val oddPalindromeTuplesSet7 = mutable.Set[Tuple2[Long, Long]]()\n        val\
    \ evenPalindromeTuplesSet8 = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet8\
    \ = mutable.Set[Tuple2[Long, Long]]", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountMap\
    \ = new mutable.HashMap[Long, Long]()\n        val oddPalindromeCountMap = new\
    \ mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap2 = new mutable.HashMap[Long,\
    \ Long]()\n        val oddPalindromeCountMap2 = new mutable.HashMap[Long, Long]()\n\
    \        val evenPalindromeCountMap3 = new mutable.HashMap[Long, Long]()\n   \
    \     val oddPalindromeCountMap3 = new mutable.HashMap[Long, Long]()\n       \
    \ val evenPalindromeCountMap4 = new mutable.HashMap[Long, Long]()\n        val\
    \ oddPalindromeCountMap4 = new mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap5\
    \ = new mutable.HashMap[Long, Long]()\n        val oddPalindromeCountMap5 = new\
    \ mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap6 = new mutable.HashMap[Long,\
    \ Long]()\n        val oddPalindromeCountMap6 = new mutable.HashMap[Long, Long]()\n\
    \        val evenPalindromeCountMap7 = new mutable.HashMap[Long, Long]()\n   \
    \     val oddPalindromeCountMap7 = new mutable.HashMap[Long, Long]()\n       \
    \ val evenPalindromeCountMap8 = new mutable.HashMap[Long, Long]()\n        val\
    \ oddPalindromeCountMap8 = new mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap9\
    \ = new mutable.HashMap[Long, Long]()\n        val oddPalindromeCountMap9 = new\
    \ mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap10 = new mutable.HashMap[Long,\
    \ Long]()\n        val oddPalindromeCountMap10 = new mutable.HashMap[Long, Long]()\n\
    \        val evenPalindromeCountMap11 = new mutable.HashMap[Long, Long]()\n  \
    \      val oddPalindromeCountMap11 = new mutable.HashMap[Long, Long]()\n", " \
    \       val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        var even = 0\n        var odd = 0\n        for(i\
    \ <- 1 to n){\n            val str = i.toString\n            val reverseStr =\
    \ str.reverse\n            if(str == reverseStr){\n                odd += 1\n\
    \                oddPalindromes += i\n            }else{\n                even\
    \ += 1\n                evenPalindromes += i\n            }\n        }\n     \
    \   Tuple2(even, odd)", "        val evenPalindromes = mutable.Set[Long]()\n \
    \       val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountTmp\
    \ = 0\n        val oddPalindromeCountTmp = 0\n        val evenPalindromeCountTmp2\
    \ = 0\n        val oddPalindromeCountTmp2 = 0\n        val evenPalindromeCountTmp3\
    \ = 0\n        val oddPalindromeCountTmp3 = 0\n        val evenPalindromeCountTmp4\
    \ = 0\n        val oddPalindromeCountTmp4 = 0\n        val evenPalindromeCountTmp5\
    \ = 0\n        val oddPalindromeCountTmp5 = 0\n        val evenPalindromeCountTmp6\
    \ = 0\n        val oddPalindromeCountTmp6 = 0\n        val evenPalindromeCountTmp7\
    \ = 0\n        val oddPalindromeCountTmp7 = 0\n        val evenPalindromeCountTmp8\
    \ = 0\n        val oddPalindromeCountTmp8 = 0\n        val evenPalindromeCountTmp9\
    \ = 0\n        val oddPalindromeCountTmp9 = 0\n        val evenPalindromeCountTmp10\
    \ = 0\n        val oddPalindromeCountTmp10 = 0\n        val evenPalindromeCountTmp11\
    \ = 0\n        val oddPalindromeCountTmp11 = 0\n        val evenPalindromeCountTmp12\
    \ = 0\n        val oddPalindromeCountTmp12 = 0\n        val evenPalindromeCountTmp13\
    \ = 0\n        val oddPalindromeCountTmp13 = 0\n        val evenPalindromeCountTmp14\
    \ = 0\n        val oddPalindromeCountTmp14 = 0\n        val evenPalindromeCountTmp15\
    \ = 0\n        val oddPalindromeCountTmp15 = 0\n        val evenPalindromeCountTmp16\
    \ = 0\n        val oddPalindromeCountTmp16 = 0\n        val evenPalindromeCountTmp17\
    \ = 0\n        val oddPalindromeCountTmp17 = 0\n        val evenPalindromeCountTmp18\
    \ = 0\n        val oddPalindrome", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountPerRange\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRange = mutable.Set[Long]()\n     \
    \   val oddPalindromeCountPerRangePerRange = mutable.Set[Long]()\n        val\
    \ evenPalindromeCountPerRangePerRangePerRange = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountPerRangePerRangePerRange = mutable.Set[Long]()\n        val\
    \ evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPerRangePerRangePerRange",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long, Long]()\n\
    \        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n        val\
    \ evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap11\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap12 = mutable.Map[", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        var evenCount = 0\n        var oddCount = 0\n        var start = 0\n\
    \        var end = n\n        while (start < end) {\n            val mid = (start\
    \ + end) / 2\n            val midPalindromes = evenPalindromes ++ oddPalindromes\n\
    \            val midPalindrome = midPalindromes.find(palindrome => palindrome\
    \ == mid)\n            if (midPalindrome == None) {\n                evenPalindromes\
    \ += mid\n                evenCount += 1\n            } else {\n             \
    \   val palindrome = midPalindrome.get\n                if (palindrome % 2 ==\
    \ 0) {\n                    evenPalindromes += palindrome\n                  \
    \  evenCount += 1\n                } else {\n                    oddPalindromes\
    \ += palindrome\n                    oddCount += 1\n                }\n      \
    \      }\n            start = mid + 1\n            end = mid - 1\n        }\n\
    \        val evenPalindrome = evenPalindromes.sum\n        val oddPalindrome =\
    \ oddPalindromes.sum\n        (evenPalindrome, oddPalindrome)", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n     \
    \   val evenPalindromeCountPer = 0\n        val oddPalindromeCountPer = 0\n  \
    \      val evenPalindromeCountPerPer = 0\n        val oddPalindromeCountPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPer = 0\n        val oddPalindromeCountPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPerPer = 0\n        val oddPalindromeCountPerPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPerPerPer = 0\n        val oddPalindromeCountPerPerPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPerPerPer = 0\n        val oddPalindromeCountPerPerPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPerPerPer = 0\n        val oddPalindromeCountPerPerPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPerPerPer = 0\n        val oddPalindromeCountPerPerPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPerPerPerPer = 0\n        val oddPalindromeCountPerPerPerPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPerPerPerPer = 0\n        val oddPalindromeCountPerPerPerPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPerPerPerPer = 0\n        val oddPalindromeCountPerPerPerPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPerPerPerPer = 0\n        val oddPalindromeCountPerPerPerPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPerPerPerPerPer = 0\n        val oddPalindromeCountPerPerPerPerPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPerPerPerPerPer = 0\n        val oddPalindromeCountPerPerPerPerPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPerPerPerPerPer = 0\n        val oddPalindromeCountPerPerPerPerPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPer", "        val evenPalindromes =\
    \ mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n    \
    \    val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n       \
    \ val evenPalindromeCountPerRange = mutable.Set[Long]()\n        val oddPalindromeCountPerRange\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRange = mutable.Set[Long]()\n      \
    \  val evenPalindromeCountPerRangePerRangePerRange = mutable.Set[Long]()\n   \
    \     val oddPalindromeCountPerRangePerRangePerRange = mutable.Set[Long]()\n \
    \       val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPerRangePerRangePerRange",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long, Long]()\n\
    \        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n        val\
    \ evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap11\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap12 = mutable.Map[", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14 = ", "     \
    \   val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeSum = 0\n        val oddPalindromeSum = 0\n        val\
    \ evenPalindromeSum2 = 0\n        val oddPalindromeSum2 = 0\n        val evenPalindromeSum3\
    \ = 0\n        val oddPalindromeSum3 = 0\n        val evenPalindromeSum4 = 0\n\
    \        val oddPalindromeSum4 = 0\n        val evenPalindromeSum5 = 0\n     \
    \   val oddPalindromeSum5 = 0\n        val evenPalindromeSum6 = 0\n        val\
    \ oddPalindromeSum6 = 0\n        val evenPalindromeSum7 = 0\n        val oddPalindromeSum7\
    \ = 0\n        val evenPalindromeSum8 = 0\n        val oddPalindromeSum8 = 0\n\
    \        val evenPalindromeSum9 = 0\n        val oddPalindromeSum9 = 0\n     \
    \   val evenPalindromeSum10 = 0\n        val oddPalindromeSum10 = 0\n        val\
    \ evenPalindromeSum11 = 0\n        val oddPalindromeSum11 = 0\n        val evenPalindromeSum12\
    \ = 0\n        val oddPalindromeSum12 = 0\n        val evenPalindromeSum13 = 0\n\
    \        val oddPalindromeSum13 = 0\n        val evenPalindromeSum14 = 0\n   \
    \     val oddPalindromeSum14 = 0\n        val evenPalindromeSum15 = 0\n      \
    \  val oddPalindromeSum15 = 0\n        val evenPalindromeSum16 = 0\n        val\
    \ oddPalindromeSum16 = 0\n        val evenPalindromeSum17 = 0\n        val oddPalindromeSum17\
    \ = 0\n        val evenPalindromeSum18 = 0\n        val oddPalindromeSum18 = 0\n\
    \        val evenPalindromeSum19 = 0\n        val oddPalindromeSum19 = 0\n   \
    \     val evenPalindromeSum20 = 0\n        val oddPalindromeSum20 = 0\n      \
    \  val evenPalindromeSum21 = 0\n        val oddPalindromeSum21 = 0\n", "     \
    \   val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = 0\n    \
    \    val oddPalindromeCount = 0\n        val evenPalindromeSum = 0\n        val\
    \ oddPalindromeSum = 0\n        val evenPalindromeSum2 = 0\n        val oddPalindromeSum2\
    \ = 0\n        val evenPalindromeSum3 = 0\n        val oddPalindromeSum3 = 0\n\
    \        val evenPalindromeSum4 = 0\n        val oddPalindromeSum4 = 0\n     \
    \   val evenPalindromeSum5 = 0\n        val oddPalindromeSum5 = 0\n        val\
    \ evenPalindromeSum6 = 0\n        val oddPalindromeSum6 = 0\n        val evenPalindromeSum7\
    \ = 0\n        val oddPalindromeSum7 = 0\n        val evenPalindromeSum8 = 0\n\
    \        val oddPalindromeSum8 = 0\n        val evenPalindromeSum9 = 0\n     \
    \   val oddPalindromeSum9 = 0\n        val evenPalindromeSum10 = 0\n        val\
    \ oddPalindromeSum10 = 0\n        val evenPalindromeSum11 = 0\n        val oddPalindromeSum11\
    \ = 0\n        val evenPalindromeSum12 = 0\n        val oddPalindromeSum12 = 0\n\
    \        val evenPalindromeSum13 = 0\n        val oddPalindromeSum13 = 0\n   \
    \     val evenPalindromeSum14 = 0\n        val oddPalindromeSum14 = 0\n      \
    \  val evenPalindromeSum15 = 0\n        val oddPalindromeSum15 = 0\n        val\
    \ evenPalindromeSum16 = 0\n        val oddPalindromeSum16 = 0\n        val evenPalindromeSum17\
    \ = 0\n        val oddPalindromeSum17 = 0\n        val evenPalindromeSum18 = 0\n\
    \        val oddPalindromeSum18 = 0\n        val evenPalindromeSum19 = 0\n   \
    \     val oddPalindromeSum19 = 0\n        val evenPalindromeSum20 = 0\n      \
    \  val oddPalindromeSum20 = 0\n        val evenPalindromeSum21 = 0\n        val\
    \ oddPalindromeSum21", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val palindromes = mutable.Set[Long]()\n       \
    \ val palindromeCount = 0\n        val palindromeTuple = Tuple2(palindromeCount,\
    \ palindromes)\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple2 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple2 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple3 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple3 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple4 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple4 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple5 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple5 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple6 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple6 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple7 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple7 = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCoun", "        val evenPalindromes = mutable.Set[Long]()\n   \
    \     val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        for(i <- 1 to n){\n       \
    \     val reverse = i.toString.reverse\n            val isEven = reverse.startsWith(\"\
    0\")\n            val isOdd = reverse.startsWith(\"1\")\n            if(isEven){\n\
    \                evenPalindromes += i\n                evenPalindromeCount +=\
    \ 1\n            }\n            if(isOdd){\n                oddPalindromes +=\
    \ i\n                oddPalindromeCount += 1\n            }\n        }\n     \
    \   (evenPalindromeCount, oddPalindromeCount)", "        val evenPalindromes =\
    \ mutable.ListBuffer.empty[Long]\n        val oddPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCounts = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountPair = mutable.ListBuffer.empty[(Long, Long)]\n\
    \        val oddPalindromeCountPair = mutable.ListBuffer.empty[(Long, Long)]\n\
    \        val evenPalindromeCountPairs = mutable.ListBuffer.empty[(Long, Long)]\n\
    \        val oddPalindromeCountPairs = mutable.ListBuffer.empty[(Long, Long)]\n\
    \        val evenPalindromeCountPairsPair = mutable.ListBuffer.empty[(Long, Long)]\n\
    \        val oddPalindromeCountPairsPair = mutable.ListBuffer.empty[(Long, Long)]\n\
    \        val evenPalindromeCountPairsPairs = mutable.ListBuffer.empty[(Long, Long)]\n\
    \        val oddPalindromeCountPairsPairs = mutable.ListBuffer.empty[(Long, Long)]\n\
    \        val evenPalindromeCountPairsPairsPair = mutable.ListBuffer.empty[(Long,\
    \ Long)]\n        val oddPalindromeCountPairsPairsPair = mutable.ListBuffer.empty[(Long,\
    \ Long)]\n        val evenPalindromeCountPairsPairsPairs = mutable.ListBuffer.empty[(Long,\
    \ Long)]\n        val oddPalindromeCountPairsPairsPairs = mutable.ListBuffer.empty[(Long,\
    \ Long)]\n        val evenPalindromeCountPairsPairsPairsPair = mutable.ListBuffer.empty[(Long,\
    \ Long)]\n        val oddPalindromeCountPairsPairsPairsPair = mutable.ListBuffer.empty[(Long,\
    \ Long)]\n        val evenPalindromeCountPairsPairsPairsPairs = mutable.ListBuffer.empty[(Long,\
    \ Long)]\n        val oddPalindromeCountPairsPairsPairsPairsPair = mutable.ListBuffer.empty[(Long,\
    \ Long)]\n        val evenPalindromeCountPairsPairsPairsPairsPair = mutable.ListBuffer.",
  "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = 0\n    \
    \    val oddPalindromeCount = 0\n        val evenPalindromeRange = 1 to n\n  \
    \      val oddPalindromeRange = 1 to n\n        evenPalindromeRange foreach {\
    \ x =>\n            val reverse = x.reverse\n            if (reverse == x) {\n\
    \                evenPalindromes += x\n                evenPalindromeCount +=\
    \ 1\n            }\n        }\n        oddPalindromeRange foreach { x =>\n   \
    \         val reverse = x.reverse\n            if (reverse == x) {\n         \
    \       oddPalindromes += x\n                oddPalindromeCount += 1\n       \
    \     }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", "    \
    \    val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCounts\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCounts = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountPair = mutable.ListBuffer[(Long, Long)]()\n  \
    \      val oddPalindromeCountPair = mutable.ListBuffer[(Long, Long)]()\n     \
    \   val evenPalindromeCountPairs = mutable.ListBuffer[(Long, Long)]()\n      \
    \  val oddPalindromeCountPairs = mutable.ListBuffer[(Long, Long)]()\n        val\
    \ evenPalindromeCountPair = mutable.ListBuffer[(Long, Long)]()\n        val oddPalindromeCountPair\
    \ = mutable.ListBuffer[(Long, Long)]()\n        val evenPalindromeCountPairs =\
    \ mutable.ListBuffer[(Long, Long)]()\n        val oddPalindromeCountPairs = mutable.ListBuffer[(Long,\
    \ Long)]()\n        val evenPalindromeCountPair = mutable.ListBuffer[(Long, Long)]()\n\
    \        val oddPalindromeCountPair = mutable.ListBuffer[(Long, Long)]()\n   \
    \     val evenPalindromeCountPairs = mutable.ListBuffer[(Long, Long)]()\n    \
    \    val oddPalindromeCountPairs = mutable.ListBuffer[(Long, Long)]()\n      \
    \  val evenPalindromeCountPair = mutable.ListBuffer[(Long, Long)]()\n        val\
    \ oddPalindromeCountPairs = mutable.ListBuffer[(Long, Long)]()\n        val evenPalindromeCountPair\
    \ = mutable.ListBuffer[(Long, Long)]()\n        val oddPalindromeCountPairs =\
    \ mutable.ListBuffer[(Long, Long)]()\n        val evenPalindromeCountPair = mutable.ListBuffer[(Long,\
    \ Long)]()\n        val oddPalindromeCountPairs = mutable.ListBuffer[(Long, Long)]()\n\
    \        val evenPalindromeCountPair = mutable.ListBuffer[(Long, Long)]()\n  \
    \      val oddPalindromeCountPair", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).filter(x => x % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(x\
    \ => x % 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val\
    \ reversed = x.reverse\n            val isEven = reversed.toString.equals(x.toString)\n\
    \            if (isEven) {\n                evenPalindromes += x\n           \
    \     evenPalindromeCount += 1\n            }\n        }\n        oddPalindromeRange\
    \ foreach { x =>\n            val reversed = x.reverse\n            val isOdd\
    \ = reversed.toString.equals(x.toString)\n            if (isOdd) {\n         \
    \       oddPalindromes += x\n                oddPalindromeCount += 1\n       \
    \     }\n        }\n        Tuple2(evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        var evenPalindromeCountSum\
    \ = 0\n        var oddPalindromeCountSum = 0\n        var evenPalindromeSum =\
    \ 0\n        var oddPalindromeSum = 0\n        var evenPalindromeCount = 0\n \
    \       var oddPalindromeCount = 0\n        var evenPalindromeSum = 0\n      \
    \  var oddPalindromeSum = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeSum = 0\n        var oddPalindromeSum\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeSum = 0\n        var oddPalindromeSum = 0\n       \
    \ var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeSum = 0\n        var oddPalindromeSum = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeSum = 0\n\
    \        var oddPalindromeSum = 0\n        var evenPalindromeCount = 0\n     \
    \   var oddPalindromeCount = 0\n        var evenPalindromeSum = 0\n        var\
    \ oddPalindromeSum = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeSum = 0\n        var oddPalindromeSum = 0\n \
    \       var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n    \
    \    var evenPalindromeSum = 0\n        var oddPalindromeSum = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeSum\
    \ = 0\n        var oddPalindromeSum = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeSum = 0\n     \
    \   var oddPalindromeSum = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeSum = 0\n        var oddPalindromeSum\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindro", "      \
    \  val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet = mutable.Set[Long]()\n        val evenPalindromeCountSet2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet3 = mutable.Set[Long]()\n        val oddPalindromeCountSet3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet4 = mutable.Set[Long]()\n        val evenPalindromeCountSet5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet6 = mutable.Set[Long]()\n        val oddPalindromeCountSet6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet7 = mutable.Set[Long]()\n        val evenPalindromeCountSet8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet9 = mutable.Set[Long]()\n        val oddPalindromeCountSet9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet10 = mutable.Set[Long]()\n        val evenPalindromeCountSet11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet12 = mutable.Set[Long]()\n        val oddPalindromeCountSet12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet13 = mutable.Set[Long",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        var even = 0L\n        var odd\
    \ = 0L\n        var evenPalindrome = 0L\n        var oddPalindrome = 0L\n    \
    \    var evenPalindromeCount = 0L\n        var oddPalindromeCount = 0L\n     \
    \   var evenPalindromeSum = 0L\n        var oddPalindromeSum = 0L\n        var\
    \ evenPalindromeSumCount = 0L\n        var oddPalindromeSumCount = 0L\n      \
    \  var evenPalindromeSumSum = 0L\n        var oddPalindromeSumSum = 0L\n     \
    \   var evenPalindromeSumSumCount = 0L\n        var oddPalindromeSumSumCount =\
    \ 0L\n        var evenPalindromeSumSumSum = 0L\n        var oddPalindromeSumSumSum\
    \ = 0L\n        var evenPalindromeSumSumSumCount = 0L\n        var oddPalindromeSumSumSumCount\
    \ = 0L\n        var evenPalindromeSumSumSumSum = 0L\n        var oddPalindromeSumSumSumSum\
    \ = 0L\n        var evenPalindromeSumSumSumSumCount = 0L\n        var oddPalindromeSumSumSumSumCount\
    \ = 0L\n        var evenPalindromeSumSumSumSumSum = 0L\n        var oddPalindromeSumSumSumSumCount\
    \ = 0L\n        var evenPalindromeSumSumSumSumSum = 0L\n        var oddPalindromeSumSumSumSumCount\
    \ = 0L\n        var evenPalindromeSumSumSumSumSum = 0L\n        var oddPalindromeSumSumSumSumCount\
    \ = 0L\n        var evenPalindromeSumSumSumSumSum = 0L\n        var oddPalindromeSumSumSumSumCount\
    \ = 0L\n        var evenPalindromeSumSumSumSumSum = 0L\n        var oddPalindromeSumSumSumSumCount\
    \ = 0L\n        var evenPalindromeSumSumSumSumSum = 0L\n        var oddPalindromeSumSumSumSumCount\
    \ = 0L\n        var evenPalindromeSumSumSumSumSum = 0L\n        var oddPalindromeSumSumSumSumCount\
    \ = 0L\n        var evenPalindromeSumSumSumSumSum = 0L\n        var oddPalindromeSumSumSumSumCount\
    \ = 0L\n        var evenPalindromeSumSumSumSumSum = 0L\n        var oddPalindromeSumSumSumSumCount\
    \ = 0L\n        var evenPalindromeSumSumSumSumSum = 0L\n        var oddPalindrome",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountMap = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap3 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap5 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap7 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap9 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n \
    \       val evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val\
    \ oddPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap", "        val\
    \ evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14 = ", "     \
    \   var even = 0\n        var odd = 0\n        var evenPalindrome = 0\n      \
    \  var oddPalindrome = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ even", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        var even = 0\n        var odd = 0\n        for(i\
    \ <- 1 to n){\n            val str = i.toString\n            val reverseStr =\
    \ str.reverse\n            val isEven = str.equals(reverseStr)\n            if(isEven){\n\
    \                even += 1\n                evenPalindromes += i\n           \
    \ }else{\n                odd += 1\n                oddPalindromes += i\n    \
    \        }\n        }\n        (even, odd)", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeSum = 0\n\
    \        val oddPalindromeSum = 0\n        val evenPalindromeMax = 0\n       \
    \ val oddPalindromeMax = 0\n        val evenPalindromeMin = 0\n        val oddPalindromeMin\
    \ = 0\n        val evenPalindromeAvg = 0\n        val oddPalindromeAvg = 0\n \
    \       val evenPalindromeMedian = 0\n        val oddPalindromeMedian = 0\n  \
    \      val evenPalindromeStdDev = 0\n        val oddPalindromeStdDev = 0\n   \
    \     val evenPalindromeVariance = 0\n        val oddPalindromeVariance = 0\n\
    \        val evenPalindromeStdDeviation = 0\n        val oddPalindromeStdDeviation\
    \ = 0\n        val evenPalindromeVariance = 0\n        val oddPalindromeVariance\
    \ = 0\n        val evenPalindromeSum = 0\n        val oddPalindromeSum = 0\n \
    \       val evenPalindromeMax = 0\n        val oddPalindromeMax = 0\n        val\
    \ evenPalindromeMin = 0\n        val oddPalindromeMin = 0\n        val evenPalindromeAvg\
    \ = 0\n        val oddPalindromeAvg = 0\n        val evenPalindromeMedian = 0\n\
    \        val oddPalindromeMedian = 0\n        val evenPalindromeStdDev = 0\n \
    \       val oddPalindromeStdDev = 0\n        val evenPalindromeVariance = 0\n\
    \        val oddPalindromeVariance = 0\n        val evenPalindromeStdDeviation\
    \ = 0\n        val oddPalindromeStdDeviation = 0\n        val evenPalindromeVariance\
    \ = 0\n        val oddPalindromeVariance = 0\n        val evenPalindromeSum =\
    \ 0\n        val oddPalindromeSum = 0\n        val evenPalindromeMax = 0\n   \
    \     val oddPalindromeMax = 0\n        val evenPalindromeMin = 0\n        val\
    \ oddPalindromeMin = 0\n        val evenPalindromeAvg = 0\n        val ", "  \
    \      val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindrome = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindrome = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindrome\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindrome = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer.", "        val evenPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long, Long]()\n\
    \        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n        val\
    \ evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap11\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap12 = mutable.Map[", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        val oddPalindromeCount10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount11 = mutable.Set[Long]()\n        val evenPalindromeCount12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount13 = mutable.Set[Long]()\n        val oddPalindromeCount13\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount14 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount14 = mutable.Set[Long]()\n        val ", "    \
    \    val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeRange = Range(1, n).filter(x => x % 2 == 0)\n\
    \        val oddPalindromeRange = Range(1, n).filter(x => x % 2 != 0)\n      \
    \  evenPalindromeRange foreach { x =>\n            val reversed = x.reverse\n\
    \            if (reversed == x) {\n                evenPalindromes += x\n    \
    \            evenPalindromeCount += 1\n            }\n        }\n        oddPalindromeRange\
    \ foreach { x =>\n            val reversed = x.reverse\n            if (reversed\
    \ == x) {\n                oddPalindromes += x\n                oddPalindromeCount\
    \ += 1\n            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.Set[Long]()\n        val\
    \ oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long, Long]()\n\
    \        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n        val\
    \ evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap11\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap12 = mutable.Map[", "        val evenPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        var even = 0\n\
    \        var odd = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeSum = 0\n        var oddPalindromeSum = 0\n \
    \       var evenPalindromeSum2 = 0\n        var oddPalindromeSum2 = 0\n      \
    \  var evenPalindromeSum3 = 0\n        var oddPalindromeSum3 = 0\n        var\
    \ evenPalindromeSum4 = 0\n        var oddPalindromeSum4 = 0\n        var evenPalindromeSum5\
    \ = 0\n        var oddPalindromeSum5 = 0\n        var evenPalindromeSum6 = 0\n\
    \        var oddPalindromeSum6 = 0\n        var evenPalindromeSum7 = 0\n     \
    \   var oddPalindromeSum7 = 0\n        var evenPalindromeSum8 = 0\n        var\
    \ oddPalindromeSum8 = 0\n        var evenPalindromeSum9 = 0\n        var oddPalindromeSum9\
    \ = 0\n        var evenPalindromeSum10 = 0\n        var oddPalindromeSum10 = 0\n\
    \        var evenPalindromeSum11 = 0\n        var oddPalindromeSum11 = 0\n   \
    \     var evenPalindromeSum12 = 0\n        var oddPalindromeSum12 = 0\n      \
    \  var evenPalindromeSum13 = 0\n        var oddPalindromeSum13 = 0\n        var\
    \ evenPalindromeSum14 = 0\n        var oddPalindromeSum14 = 0\n        var evenPalindromeSum15\
    \ = 0\n        var oddPalindromeSum15 = 0\n        var evenPalindromeSum16 = 0\n\
    \        var oddPalindromeSum16 = 0\n        var evenPalindromeSum17 = 0\n   \
    \     var oddPalindromeSum17 = 0\n        var evenPalindromeSum18 = 0\n      \
    \  var oddPalindromeSum18 = 0\n        var evenPalindromeSum19 = 0\n        var\
    \ oddPalindromeSum19 = 0\n        var evenPalindromeSum20 = 0\n        var oddPalindromeSum20\
    \ = 0\n        var evenPalindromeSum21 = 0\n        var oddPalindromeSum21 = 0\n",
  "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        var even = 0\n        var odd = 0\n\
    \        for(i <- 1 to n){\n            val str = i.toString\n            val\
    \ reverse = str.reverse\n            val isEven = str == reverse\n           \
    \ if(isEven){\n                even += 1\n                evenPalindromes += i\n\
    \            }else{\n                odd += 1\n                oddPalindromes\
    \ += i\n            }\n        }\n        (even, odd)", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      var even = 0\n        var odd = 0\n        var i = 0\n        var j = 0\n\
    \        while (i < n) {\n            while (j < n) {\n                if (i %\
    \ 10 == j % 10) {\n                    evenPalindromes += i\n                \
    \    oddPalindromes += j\n                    i += 1\n                    j +=\
    \ 1\n                }\n                else {\n                    i += 1\n \
    \                   j += 1\n                }\n            }\n            evenPalindromes\
    \ += i\n            oddPalindromes += i\n            i += 1\n        }\n     \
    \   evenPalindromes.toList.sortWith(_ < _).zipWithIndex.foreach { case (v, i)\
    \ => if (v % 2 == 0) even += 1 else odd += 1 }\n        oddPalindromes.toList.sortWith(_\
    \ < _).zipWithIndex.foreach { case (v, i) => if (v % 2 == 0) even += 1 else odd\
    \ += 1 }\n        even.toLong, odd.toLong", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeSum = 0\n\
    \        val oddPalindromeSum = 0\n        val evenPalindromeSum2 = 0\n      \
    \  val oddPalindromeSum2 = 0\n        val evenPalindromeSum3 = 0\n        val\
    \ oddPalindromeSum3 = 0\n        val evenPalindromeSum4 = 0\n        val oddPalindromeSum4\
    \ = 0\n        val evenPalindromeSum5 = 0\n        val oddPalindromeSum5 = 0\n\
    \        val evenPalindromeSum6 = 0\n        val oddPalindromeSum6 = 0\n     \
    \   val evenPalindromeSum7 = 0\n        val oddPalindromeSum7 = 0\n        val\
    \ evenPalindromeSum8 = 0\n        val oddPalindromeSum8 = 0\n        val evenPalindromeSum9\
    \ = 0\n        val oddPalindromeSum9 = 0\n        val evenPalindromeSum10 = 0\n\
    \        val oddPalindromeSum10 = 0\n        val evenPalindromeSum11 = 0\n   \
    \     val oddPalindromeSum11 = 0\n        val evenPalindromeSum12 = 0\n      \
    \  val oddPalindromeSum12 = 0\n        val evenPalindromeSum13 = 0\n        val\
    \ oddPalindromeSum13 = 0\n        val evenPalindromeSum14 = 0\n        val oddPalindromeSum14\
    \ = 0\n        val evenPalindromeSum15 = 0\n        val oddPalindromeSum15 = 0\n\
    \        val evenPalindromeSum16 = 0\n        val oddPalindromeSum16 = 0\n   \
    \     val evenPalindromeSum17 = 0\n        val oddPalindromeSum17 = 0\n      \
    \  val evenPalindromeSum18 = 0\n        val oddPalindromeSum18 = 0\n        val\
    \ evenPalindromeSum19 = 0\n        val oddPalindromeSum19 = 0\n        val evenPalindromeSum20\
    \ = 0\n        val oddPalindromeSum20 = 0\n        val evenPalindromeSum21 = 0\n\
    \        val oddPalindromeSum21 = 0\n", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = range(1,\
    \ n).filter(_ % 2 == 0)\n        val oddPalindromeRange = range(1, n).filter(_\
    \ % 2 == 1)\n        evenPalindromeRange foreach { x =>\n            val reversed\
    \ = x.reverse\n            if (x == reversed) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            } else {\n     \
    \           oddPalindromes += x\n                oddPalindromeCount += 1\n   \
    \         }\n        }\n        evenPalindromeCount -> evenPalindromes\n     \
    \   oddPalindromeCount -> oddPalindromes", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        var even\
    \ = 0\n        var odd = 0\n        var i = 0\n        var j = 0\n        while\
    \ (i < n) {\n            while (j < n) {\n                if (i % 10 == j % 10)\
    \ {\n                    evenPalindromes += i\n                    oddPalindromes\
    \ += j\n                    i += 1\n                    j += 1\n             \
    \   } else {\n                    i += 1\n                    j += 1\n       \
    \         }\n            }\n            even = evenPalindromes.filter(_ % 2 ==\
    \ 0).length\n            odd = oddPalindromes.filter(_ % 2 == 1).length\n    \
    \        i += 1\n            j += 1\n        }\n        Tuple2(even, odd)", " \
    \       val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        var even = 0\n    \
    \    var odd = 0\n        var i = 0\n        var j = 0\n        while (i < n)\
    \ {\n            val temp = i\n            while (temp > 0) {\n              \
    \  val remainder = temp % 10\n                if (remainder == 0) {\n        \
    \            evenPalindromes += temp\n                    evenPalindromes += temp\n\
    \                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalindromes += temp\n                    evenPalindromes\
    \ += temp\n                    evenPalin", "        var even = 0\n        var\
    \ odd = 0\n        var evenPalindrome = 0\n        var oddPalindrome = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var even", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeRange = 1 to n\n        val oddPalindromeRange = 1 to\
    \ n\n        evenPalindromeRange foreach { x =>\n            val reverse = x.toString.reverse\n\
    \            if (reverse == x)\n                evenPalindromes += x\n       \
    \     else\n                oddPalindromes += x\n        }\n        evenPalindromeCount\
    \ += evenPalindromes.size\n        oddPalindromeCount += oddPalindromes.size\n\
    \        (evenPalindromeCount, oddPalindromeCount)", "        var even = 0\n \
    \       var odd = 0\n        var evenPalindrome = 0\n        var oddPalindrome\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var even",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        var evenCount = 0\n        var oddCount = 0\n \
    \       var evenPalindrome = 0\n        var oddPalindrome = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalin", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeRange = Range(1, n).filter(x => x % 2 == 0)\n        val\
    \ oddPalindromeRange = Range(1, n).filter(x => x % 2 != 0)\n        evenPalindromeRange\
    \ foreach { x =>\n            val reversedString = x.toString\n            val\
    \ reversedStringArray = reversedString.toCharArray\n            val reversedStringArrayLength\
    \ = reversedStringArray.length\n            val reversedStringArrayReversed =\
    \ reversedStringArray.reverse\n            val reversedStringArrayReversedLength\
    \ = reversedStringArrayReversed.length\n            val evenPalindrome = reversedStringArrayReversed.take(reversedStringArrayLength\
    \ - reversedStringArrayReversedLength)\n            val oddPalindrome = reversedStringArrayReversed.drop(reversedStringArrayLength\
    \ - reversedStringArrayReversedLength)\n            evenPalindromes += evenPalindrome\n\
    \            oddPalindromes += oddPalindrome\n        }\n        evenPalindromeCount\
    \ += evenPalindromes.size\n        oddPalindromeCount += oddPalindromes.size\n\
    \        Tuple2(evenPalindromeCount, oddPalindromeCount)", "        var even =\
    \ 0\n        var odd = 0\n        var evenPalindrome = 0\n        var oddPalindrome\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var even",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14 = ", "     \
    \   val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeRange = Range(1, n).filter(x => x % 2 == 0)\n        val\
    \ oddPalindromeRange = Range(1, n).filter(x => x % 2 != 0)\n        evenPalindromeRange\
    \ foreach { x =>\n            val reversed = x.reverse\n            val reversedReversed\
    \ = reversed.reverse\n            if (x == reversed) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            }\n            if\
    \ (x == reversedReversed) {\n                oddPalindromes += x\n           \
    \     oddPalindromeCount += 1\n            }\n        }\n        evenPalindromeCount\
    \ -> oddPalindromeCount", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val ", "        val evenPalindromes =\
    \ mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n    \
    \    val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountMap = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap = mutable.Map[Long, Long]()\n   \
    \     val evenPalindromeCountMap2 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap2\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap3 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap3 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap4 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap4\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap5 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap5 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap6 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap6\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap7 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap7 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap8 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap8\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap9 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap9 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap10 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap10\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap11 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap11 = mutable.Map[Long, Long]()\n \
    \       val evenPalindromeCountMap12 = mutable.Map[Long, Long]()\n        val\
    \ oddPalindromeCountMap12 = mutable.Map[", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCountMap = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap3 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap5 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap7 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap9 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n \
    \       val evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val\
    \ oddPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap12 = mutable.Map[",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet = mutable.Set[Long]()\n        val oddPalindromeCountSet\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSetSet = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSet = mutable.Set[Long]",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.Set[Long]()\n        val\
    \ oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.Set[Long]()\n        val\
    \ oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n\
    \        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).filter(x => x % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(x\
    \ => x % 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val\
    \ reversed = x.reverse\n            if (reversed == x) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            }\n        }\n \
    \       oddPalindromeRange foreach { x =>\n            val reversed = x.reverse\n\
    \            if (reversed == x) {\n                oddPalindromes += x\n     \
    \           oddPalindromeCount += 1\n            }\n        }\n        Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.Set[Long]()\n \
    \       val oddPalindromes = mutable.Set[Long]()\n        var evenCount = 0\n\
    \        var oddCount = 0\n        var evenPalindrome = 0\n        var oddPalindrome\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeSum = 0\n        var oddPalindromeSum = 0\n       \
    \ var evenPalindromeSumOfEven = 0\n        var oddPalindromeSumOfEven = 0\n  \
    \      var evenPalindromeSumOfOdd = 0\n        var oddPalindromeSumOfOdd = 0\n\
    \        var evenPalindromeSumOfEvenAndOdd = evenPalindromeSumOfEven\n       \
    \ var oddPalindromeSumOfEvenAndOdd = oddPalindromeSumOfOdd\n        var evenPalindromeSumOfOddAndEven\
    \ = evenPalindromeSumOfOdd\n        var oddPalindromeSumOfOddAndEven = oddPalindromeSumOfEven\n\
    \        var evenPalindromeSumOfEvenAndOdd = evenPalindromeSumOfEven\n       \
    \ var oddPalindromeSumOfEvenAndOdd = oddPalindromeSumOfOdd\n        var evenPalindromeSumOfOddAndEven\
    \ = evenPalindromeSumOfOdd\n        var oddPalindromeSumOfOddAndEven = oddPalindromeSumOfEven\n\
    \        var evenPalindromeSumOfEvenAndOdd = evenPalindromeSumOfEven\n       \
    \ var oddPalindromeSumOfEvenAndOdd = oddPalindromeSumOfOdd\n        var evenPalindromeSumOfOddAndEven\
    \ = evenPalindromeSumOfOdd\n        var oddPalindromeSumOfOddAndEven = oddPalindromeSumOfEven\n\
    \        var evenPalindromeSumOfEvenAndOdd = evenPalindromeSumOfEven\n       \
    \ var oddPalindromeSumOfEvenAndOdd = oddPalindromeSumOfOdd\n        var evenPalindromeSumOfOddAndEven\
    \ = evenPalindromeSumOfOdd\n        var oddPalindromeSumOfOddAndEven = oddPalindromeSumOfEven\n\
    \        var evenPalindromeSumOfEvenAndOd", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = range(1,\
    \ n).filter(_ % 2 == 0)\n        val oddPalindromeRange = range(1, n).filter(_\
    \ % 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val reverse\
    \ = x.reverse\n            if (reverse == x) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            }\n        }\n \
    \       oddPalindromeRange foreach { x =>\n            val reverse = x.reverse\n\
    \            if (reverse == x) {\n                oddPalindromes += x\n      \
    \          oddPalindromeCount += 1\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.Set[Long]()\n \
    \       val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet2 = mutable.Set[Long]()\n        val oddPalindromeCountSet2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet3 = mutable.Set[Long]()\n        val evenPalindromeCountSet4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet5 = mutable.Set[Long]()\n        val oddPalindromeCountSet5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet6 = mutable.Set[Long]()\n        val evenPalindromeCountSet7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet8 = mutable.Set[Long]()\n        val oddPalindromeCountSet8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet9 = mutable.Set[Long]()\n        val evenPalindromeCountSet10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet11 = mutable.Set[Long]()\n        val oddPalindromeCountSet11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet12 = mutable.Set[Long]()\n        val evenPalindromeCountSet13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n     \
    \   val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuplesSet\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuplesSet = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val oddPalindromeTuplesSet = mutable.Set[Tuple2[Long, Long]]()\n    \
    \    val evenPalindromeTuplesSet = mutable.Set[Tuple2[Long, Long]]()\n       \
    \ val oddPalindromeTuplesSet = mutable.Set[Tuple2[Long, Long]]()\n        val\
    \ evenPalindromeTuplesSet = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuplesSet = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeTuplesSet = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val evenPalindromeTuplesSet = mutable.Set[Tuple2[Long, Long]]()\n   \
    \     val oddPalindromeTuplesSet = mutable.Set[Tuple2[Long, Long]]()\n       \
    \ val evenPalindromeTuplesSet = mutable.Set[Tuple2[Long, Long]]()\n        val\
    \ oddPalindromeTuplesSet = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuplesSet\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet = mutable.Set[Tuple2[Long,\
    \ Long]]", "        val evenPalindromes = mutable.ListBuffer[Long]()\n       \
    \ val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeSum = 0\n\
    \        val oddPalindromeSum = 0\n        val evenPalindromeSum2 = 0\n      \
    \  val oddPalindromeSum2 = 0\n        val evenPalindromeSum3 = 0\n        val\
    \ oddPalindromeSum3 = 0\n        val evenPalindromeSum4 = 0\n        val oddPalindromeSum4\
    \ = 0\n        val evenPalindromeSum5 = 0\n        val oddPalindromeSum5 = 0\n\
    \        val evenPalindromeSum6 = 0\n        val oddPalindromeSum6 = 0\n     \
    \   val evenPalindromeSum7 = 0\n        val oddPalindromeSum7 = 0\n        val\
    \ evenPalindromeSum8 = 0\n        val oddPalindromeSum8 = 0\n        val evenPalindromeSum9\
    \ = 0\n        val oddPalindromeSum9 = 0\n        val evenPalindromeSum10 = 0\n\
    \        val oddPalindromeSum10 = 0\n        val evenPalindromeSum11 = 0\n   \
    \     val oddPalindromeSum11 = 0\n        val evenPalindromeSum12 = 0\n      \
    \  val oddPalindromeSum12 = 0\n        val evenPalindromeSum13 = 0\n        val\
    \ oddPalindromeSum13 = 0\n        val evenPalindromeSum14 = 0\n        val oddPalindromeSum14\
    \ = 0\n        val evenPalindromeSum15 = 0\n        val oddPalindromeSum15 = 0\n\
    \        val evenPalindromeSum16 = 0\n        val oddPalindromeSum16 = 0\n   \
    \     val evenPalindromeSum17 = 0\n        val oddPalindromeSum17 = 0\n      \
    \  val evenPalindromeSum18 = 0\n        val oddPalindromeSum18 = 0\n        val\
    \ evenPalindromeSum19 = 0\n        val oddPalindromeSum19 = 0\n        val evenPalindromeSum20\
    \ = 0\n        val oddPalindromeSum20 = 0\n        val evenPalindromeSum21 = 0\n\
    \        val oddPalindromeSum21", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = 1\
    \ to n\n        val oddPalindromeRange = 1 to n\n        evenPalindromeRange foreach\
    \ { x =>\n            val reverse = x.toString().reverse\n            if (reverse\
    \ == x) {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            }\n        }\n        oddPalindromeRange foreach { x =>\n\
    \            val reverse = x.toString().reverse\n            if (reverse == x)\
    \ {\n                oddPalindromes += x\n                oddPalindromeCount +=\
    \ 1\n            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCounts =\
    \ mutable.Set[Long]()\n        val oddPalindromeCounts = mutable.Set[Long]()\n\
    \        val evenPalindromeCountMap = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap3 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap5 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap7 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap9 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n \
    \       val evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val\
    \ oddPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12\
    \ = ", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long, Long]()\n \
    \       val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9 = mutable.Map[Long,\
    \ Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long, Long]()\n\
    \        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n        val\
    \ evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap11\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap12 = mutable.Map[", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n     \
    \   val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuplesSet\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuplesSet2 = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val oddPalindromeTuplesSet2 = mutable.Set[Tuple2[Long, Long]]()\n   \
    \     val evenPalindromeTuplesSet3 = mutable.Set[Tuple2[Long, Long]]()\n     \
    \   val oddPalindromeTuplesSet3 = mutable.Set[Tuple2[Long, Long]]()\n        val\
    \ evenPalindromeTuplesSet4 = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet4\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuplesSet5 =\
    \ mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet5 = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuplesSet6 = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val oddPalindromeTuplesSet6 = mutable.Set[Tuple2[Long, Long]]()\n   \
    \     val evenPalindromeTuplesSet7 = mutable.Set[Tuple2[Long, Long]]()\n     \
    \   val oddPalindromeTuplesSet7 = mutable.Set[Tuple2[Long, Long]]()\n        val\
    \ evenPalindromeTuplesSet8 = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet8\
    \ = mutable.Set[Tuple2[Long, Long]]", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n     \
    \   val evenPalindromeSum = 0\n        val oddPalindromeSum = 0\n        val evenPalindromeSumOfEven\
    \ = 0\n        val oddPalindromeSumOfEven = 0\n        val evenPalindromeSumOfOdd\
    \ = 0\n        val oddPalindromeSumOfOdd = 0\n        val evenPalindromeSumOfEvenEven\
    \ = 0\n        val oddPalindromeSumOfEvenEven = 0\n        val evenPalindromeSumOfOddOdd\
    \ = 0\n        val oddPalindromeSumOfOddOdd = 0\n        val evenPalindromeSumOfEvenEvenEven\
    \ = 0\n        val oddPalindromeSumOfEvenEvenEven = 0\n        val evenPalindromeSumOfOddOddOdd\
    \ = 0\n        val oddPalindromeSumOfOddOddOdd = 0\n        val evenPalindromeSumOfEvenEvenEvenEven\
    \ = 0\n        val oddPalindromeSumOfEvenEvenEvenEven = 0\n        val evenPalindromeSumOfOddOddOddOdd\
    \ = 0\n        val oddPalindromeSumOfOddOddOddOdd = 0\n        val evenPalindromeSumOfEvenEvenEvenEven\
    \ = 0\n        val oddPalindromeSumOfEvenEvenEvenEven = 0\n        val evenPalindromeSumOfOddOddOddOddOdd\
    \ = 0\n        val oddPalindromeSumOfOddOddOddOddOdd = 0\n        val evenPalindromeSumOfEvenEvenEvenEven\
    \ = 0\n        val oddPalindromeSumOfEvenEvenEvenEven = 0\n        val evenPalindromeSumOfOddOddOddOddOdd\
    \ = 0\n        val oddPalindromeSumOfOddOddOddOddOdd = 0\n        val evenPalindromeSumOfEvenEvenEvenEven\
    \ = 0\n        val oddPalindromeSumOfEvenEvenEvenEven = 0\n        val evenPalindromeSumOfOddOddOddOddOdd\
    \ = 0\n        val oddPalindromeSumOf", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeSum = 0\n\
    \        val oddPalindromeSum = 0\n        val evenPalindromeSum2 = 0\n      \
    \  val oddPalindromeSum2 = 0\n        val evenPalindromeSum3 = 0\n        val\
    \ oddPalindromeSum3 = 0\n        val evenPalindromeSum4 = 0\n        val oddPalindromeSum4\
    \ = 0\n        val evenPalindromeSum5 = 0\n        val oddPalindromeSum5 = 0\n\
    \        val evenPalindromeSum6 = 0\n        val oddPalindromeSum6 = 0\n     \
    \   val evenPalindromeSum7 = 0\n        val oddPalindromeSum7 = 0\n        val\
    \ evenPalindromeSum8 = 0\n        val oddPalindromeSum8 = 0\n        val evenPalindromeSum9\
    \ = 0\n        val oddPalindromeSum9 = 0\n        val evenPalindromeSum10 = 0\n\
    \        val oddPalindromeSum10 = 0\n        val evenPalindromeSum11 = 0\n   \
    \     val oddPalindromeSum11 = 0\n        val evenPalindromeSum12 = 0\n      \
    \  val oddPalindromeSum12 = 0\n        val evenPalindromeSum13 = 0\n        val\
    \ oddPalindromeSum13 = 0\n        val evenPalindromeSum14 = 0\n        val oddPalindromeSum14\
    \ = 0\n        val evenPalindromeSum15 = 0\n        val oddPalindromeSum15 = 0\n\
    \        val evenPalindromeSum16 = 0\n        val oddPalindromeSum16 = 0\n   \
    \     val evenPalindromeSum17 = 0\n        val oddPalindromeSum17 = 0\n      \
    \  val evenPalindromeSum18 = 0\n        val oddPalindromeSum18 = 0\n        val\
    \ evenPalindromeSum19 = 0\n        val oddPalindromeSum19 = 0\n        val evenPalindromeSum20\
    \ = 0\n        val oddPalindromeSum20 = 0\n        val evenPalindromeSum21 = 0\n\
    \        val oddPalindromeSum21 = 0\n", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCounts = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCounts = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCountPair\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val oddPalindromeCountPair\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val evenPalindromeCountPairs\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val oddPalindromeCountPairs\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val evenPalindromeCountPairsPair\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val oddPalindromeCountPairsPair\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val evenPalindromeCountPairsPairs\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val oddPalindromeCountPairsPairs\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val evenPalindromeCountPairsPairsPair\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val oddPalindromeCountPairsPairsPair\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val evenPalindromeCountPairsPairsPairs\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val oddPalindromeCountPairsPairsPairs\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val evenPalindromeCountPairsPairsPairsPair\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val oddPalindromeCountPairsPairsPairsPair\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val evenPalindromeCountPairsPairsPairsPairs\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val oddPalindromeCountPairsPairsPairsPairsPair\
    \ = mutable.ListBuffer.empty[(Long, Long)]\n        val evenPalindromeCountPairsPairsPairsPairsPair\
    \ = mutable.ListBuffer.", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverse = mutable.ListBuffer[Long]()\n       \
    \ val oddPalindromeCountReverse = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverse =\
    \ mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalin", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        for(i <- 1 to n){\n       \
    \     val reverse = i.toString.reverse\n            val isEven = reverse.charAt(0).toInt\
    \ == i\n            if(isEven){\n                evenPalindromes += i\n      \
    \          evenPalindromeCount += 1\n            }else{\n                oddPalindromes\
    \ += i\n                oddPalindromeCount += 1\n            }\n        }\n  \
    \      (evenPalindromeCount, oddPalindromeCount)", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14 = ", "     \
    \   val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        var even = 0\n        var odd = 0\n\
    \        for(i <- 1 to n) {\n            val str = i.toString\n            val\
    \ reverse = str.tails.reverse\n            if(str == reverse) {\n            \
    \    even += 1\n                evenPalindromes += i\n            } else {\n \
    \               odd += 1\n                oddPalindromes += i\n            }\n\
    \        }\n        (even, odd)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCounts = mutable.Set[Long]()\n        val oddPalindromeCounts\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet = mutable.Set[Long]()\n        val evenPalindromeCountSets\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSets = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSet = mutable.Set[Long]()\n        val oddPalindromeCountSetSet\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSetSets = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSetSets = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSets = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountSetSetSets = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSets\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSets = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSetSetSet = mutable.Set[Long]()\n      \
    \  val oddPalindromeCountSetSetSetSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSetSets\
    \ = mutable.", "        val evenPalindromes = mutable.ListBuffer[Long]()\n   \
    \     val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = range(1,\
    \ n).filter(x => x % 2 == 0)\n        val oddPalindromeRange = range(1, n).filter(x\
    \ => x % 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val\
    \ reverse = x.toString().reverse\n            if (reverse == x) {\n          \
    \      evenPalindromes += x\n                evenPalindromeCount += 1\n      \
    \      }\n        }\n        oddPalindromeRange foreach { x =>\n            val\
    \ reverse = x.toString().reverse\n            if (reverse == x) {\n          \
    \      oddPalindromes += x\n                oddPalindromeCount += 1\n        \
    \    }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", "     \
    \   val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeRange = 1 to n\n        val oddPalindromeRange = 1 to\
    \ n\n        evenPalindromeRange foreach { x =>\n            val reversed = x.reverse\n\
    \            val isEven = reversed.toString.toInt == x\n            if (isEven)\
    \ {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else {\n                oddPalindromes += x\n          \
    \      oddPalindromeCount += 1\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.Set[Long]()\n \
    \       val oddPalindromes = mutable.Set[Long]()\n        var evenPalindrome =\
    \ 0\n        var oddPalindrome = 0\n        var evenPalindromeCount = 0\n    \
    \    var oddPalindromeCount = 0\n        var evenPalindromeCount2 = 0\n      \
    \  var oddPalindromeCount2 = 0\n        var evenPalindromeCount3 = 0\n       \
    \ var oddPalindromeCount3 = 0\n        var evenPalindromeCount4 = 0\n        var\
    \ oddPalindromeCount4 = 0\n        var evenPalindromeCount5 = 0\n        var oddPalindromeCount5\
    \ = 0\n        var evenPalindromeCount6 = 0\n        var oddPalindromeCount6 =\
    \ 0\n        var evenPalindromeCount7 = 0\n        var oddPalindromeCount7 = 0\n\
    \        var evenPalindromeCount8 = 0\n        var oddPalindromeCount8 = 0\n \
    \       var evenPalindromeCount9 = 0\n        var oddPalindromeCount9 = 0\n  \
    \      var evenPalindromeCount10 = 0\n        var oddPalindromeCount10 = 0\n \
    \       var evenPalindromeCount11 = 0\n        var oddPalindromeCount11 = 0\n\
    \        var evenPalindromeCount12 = 0\n        var oddPalindromeCount12 = 0\n\
    \        var evenPalindromeCount13 = 0\n        var oddPalindromeCount13 = 0\n\
    \        var evenPalindromeCount14 = 0\n        var oddPalindromeCount14 = 0\n\
    \        var evenPalindromeCount15 = 0\n        var oddPalindromeCount15 = 0\n\
    \        var evenPalindromeCount16 = 0\n        var oddPalindromeCount16 = 0\n\
    \        var evenPalindromeCount17 = 0\n        var oddPalindromeCount17 = 0\n\
    \        var evenPalindromeCount18 = 0\n        var oddPalindromeCount18 = 0\n\
    \        var evenPalindromeCount19 = 0\n        var oddPalindromeCount19 = 0\n\
    \        var evenPalindromeCount20 = 0\n        var oddPalindromeCount20 = 0\n\
    \        var evenPalindromeCount21 = 0\n        var oddPalindromeCount21 = 0\n\
    \        var evenPalindromeCount22 = 0\n        var oddPalindromeCount22 = 0\n\
    \        var evenPalindromeCount23 = 0\n        var oddPalindromeCount23 = 0\n\
    \        var evenPalindrome", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountEven\
    \ = 0\n        val oddPalindromeCountEven = 0\n        val evenPalindromeCountOdd\
    \ = 0\n        val oddPalindromeCountOdd = 0\n        val evenPalindromeCountEvenEven\
    \ = 0\n        val oddPalindromeCountEvenOdd = 0\n        val evenPalindromeCountOddOdd\
    \ = 0\n        val oddPalindromeCountOddEven = 0\n        val evenPalindromeCountEvenOddOdd\
    \ = 0\n        val oddPalindromeCountOddEvenOdd = 0\n        val evenPalindromeCountEvenOddOddEven\
    \ = 0\n        val oddPalindromeCountOddEvenOddOdd = 0\n        val evenPalindromeCountEvenOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountOddEvenOddOddOdd = 0\n        val evenPalindromeCountEvenOddOddEvenOddOdd\
    \ = 0\n        val oddPalindromeCountOddEvenOddOddOddEvenOdd = 0\n        val\
    \ evenPalindromeCountEvenOddOddEvenOddOddOdd = 0\n        val oddPalindromeCountOddEvenOddOddOddEvenOddOdd\
    \ = 0\n        val evenPalindromeCountEvenOddOddEvenOddOddOddEvenOdd = 0\n   \
    \     val oddPalindromeCountOddEvenOddOddOddEvenOddOddOddEvenOdd = 0\n       \
    \ val evenPalindromeCountEvenOddOddEvenOddOddOddEvenOddOddEvenOdd = 0\n      \
    \  val oddPalindromeCountOddEvenOddOddOddEvenOddOddOddEvenOddOddEvenOdd = 0\n\
    \        val evenPalindromeCountEvenOddOddEvenOddOddOddOddEvenOddOddEvenOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountOddEvenOddOddOdd", "        var even = 0\n\
    \        var odd = 0\n        var palindrome = 0\n        var evenPalindrome =\
    \ 0\n        var oddPalindrome = 0\n        var evenPalindromeCount = 0\n    \
    \    var oddPalindromeCount = 0\n        var evenPalindromeCount2 = 0\n      \
    \  var oddPalindromeCount2 = 0\n        var evenPalindromeCount3 = 0\n       \
    \ var oddPalindromeCount3 = 0\n        var evenPalindromeCount4 = 0\n        var\
    \ oddPalindromeCount4 = 0\n        var evenPalindromeCount5 = 0\n        var oddPalindromeCount5\
    \ = 0\n        var evenPalindromeCount6 = 0\n        var oddPalindromeCount6 =\
    \ 0\n        var evenPalindromeCount7 = 0\n        var oddPalindromeCount7 = 0\n\
    \        var evenPalindromeCount8 = 0\n        var oddPalindromeCount8 = 0\n \
    \       var evenPalindromeCount9 = 0\n        var oddPalindromeCount9 = 0\n  \
    \      var evenPalindromeCount10 = 0\n        var oddPalindromeCount10 = 0\n \
    \       var evenPalindromeCount11 = 0\n        var oddPalindromeCount11 = 0\n\
    \        var evenPalindromeCount12 = 0\n        var oddPalindromeCount12 = 0\n\
    \        var evenPalindromeCount13 = 0\n        var oddPalindromeCount13 = 0\n\
    \        var evenPalindromeCount14 = 0\n        var oddPalindromeCount14 = 0\n\
    \        var evenPalindromeCount15 = 0\n        var oddPalindromeCount15 = 0\n\
    \        var evenPalindromeCount16 = 0\n        var oddPalindromeCount16 = 0\n\
    \        var evenPalindromeCount17 = 0\n        var oddPalindromeCount17 = 0\n\
    \        var evenPalindromeCount18 = 0\n        var oddPalindromeCount18 = 0\n\
    \        var evenPalindromeCount19 = 0\n        var oddPalindromeCount19 = 0\n\
    \        var evenPalindromeCount20 = 0\n        var oddPalindromeCount20 = 0\n\
    \        var evenPalindromeCount21 = 0\n        var oddPalindromeCount21 = 0\n\
    \        var evenPalindromeCount22 = 0\n        var oddPalindromeCount22 = 0\n\
    \        var evenPalindromeCount23 = 0\n        var oddPalindromeCount23 = 0\n\
    \        var evenPalindromeCount24 = 0\n        var oddPalindromeCount24 = 0\n\
    \        var evenP", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountMap = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap3 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap5 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap7 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap9 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n \
    \       val evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val\
    \ oddPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap", "        val\
    \ evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     for(i <- 1 to n) {\n            val reverse = i.toString().reverse\n   \
    \         val isEven = reverse.startsWith(i)\n            if(isEven) {\n     \
    \           evenPalindromes += i\n                evenPalindromeCount += 1\n \
    \           } else {\n                oddPalindromes += i\n                oddPalindromeCount\
    \ += 1\n            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)",
  "        var even = 0\n        var odd = 0\n        var evenPalindrome = 0\n   \
    \     var oddPalindrome = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeSum = 0\n        var oddPalindromeSum\
    \ = 0\n        var evenPalindromeSum2 = 0\n        var oddPalindromeSum2 = 0\n\
    \        var evenPalindromeSum3 = 0\n        var oddPalindromeSum3 = 0\n     \
    \   var evenPalindromeSum4 = 0\n        var oddPalindromeSum4 = 0\n        var\
    \ evenPalindromeSum5 = 0\n        var oddPalindromeSum5 = 0\n        var evenPalindromeSum6\
    \ = 0\n        var oddPalindromeSum6 = 0\n        var evenPalindromeSum7 = 0\n\
    \        var oddPalindromeSum7 = 0\n        var evenPalindromeSum8 = 0\n     \
    \   var oddPalindromeSum8 = 0\n        var evenPalindromeSum9 = 0\n        var\
    \ oddPalindromeSum9 = 0\n        var evenPalindromeSum10 = 0\n        var oddPalindromeSum10\
    \ = 0\n        var evenPalindromeSum11 = 0\n        var oddPalindromeSum11 = 0\n\
    \        var evenPalindromeSum12 = 0\n        var oddPalindromeSum12 = 0\n   \
    \     var evenPalindromeSum13 = 0\n        var oddPalindromeSum13 = 0\n      \
    \  var evenPalindromeSum14 = 0\n        var oddPalindromeSum14 = 0\n        var\
    \ evenPalindromeSum15 = 0\n        var oddPalindromeSum15 = 0\n        var evenPalindromeSum16\
    \ = 0\n        var oddPalindromeSum16 = 0\n        var evenPalindromeSum17 = 0\n\
    \        var oddPalindromeSum17 = 0\n        var evenPalindromeSum18 = 0\n   \
    \     var oddPalindromeSum18 = 0\n        var evenPalindromeSum19 = 0\n      \
    \  var oddPalindromeSum19 = 0\n        var evenPalindromeSum20 = 0\n        var\
    \ oddPalindromeSum20 = 0\n        var evenPalindromeSum21 = 0\n        var oddPalindromeSum21\
    \ = 0\n        var evenPalindromeSum22 = 0\n        var oddPalindromeSum22 = 0\n\
    \        var evenPalindromeSum23 = 0\n        var oddPalindromeSum23 = 0\n   \
    \     var evenPalindromeSum24 = 0\n        var odd", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        val oddPalindromeCount10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount11 = mutable.Set[Long]()\n        val evenPalindromeCount12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount13 = mutable.Set[Long]()\n        val oddPalindromeCount13\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount14 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount14 = mutable.Set[Long]()\n        val ", "    \
    \    val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList = mutable.Set[Long]()\n        val evenPalindromeCountList2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList3 = mutable.Set[Long]()\n        val oddPalindromeCountList3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList4 = mutable.Set[Long]()\n        val evenPalindromeCountList5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList6 = mutable.Set[Long]()\n        val oddPalindromeCountList6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList7 = mutable.Set[Long]()\n        val evenPalindromeCountList8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList9 = mutable.Set[Long]()\n        val oddPalindromeCountList9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList10 = mutable.Set[Long]()\n        val evenPalindromeCountList11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList12 = mutable.Set[Long]()\n        val oddPalindromeCountList12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList13 = mutable.Set[Long]()",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeRange = Range(1, n).filter(x => x % 2 == 0)\n\
    \        val oddPalindromeRange = Range(1, n).filter(x => x % 2 != 0)\n      \
    \  evenPalindromeRange foreach { x =>\n            val reverse = x.toString().reverse\n\
    \            if (reverse == x) {\n                evenPalindromes += x\n     \
    \           evenPalindromeCount += 1\n            }\n        }\n        oddPalindromeRange\
    \ foreach { x =>\n            val reverse = x.toString().reverse\n           \
    \ if (reverse == x) {\n                oddPalindromes += x\n                oddPalindromeCount\
    \ += 1\n            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet = mutable.Set[Long]()\n        val oddPalindromeCountSet\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet2 = mutable.Set[Long]()\n        val evenPalindromeCountSet3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet4 = mutable.Set[Long]()\n        val oddPalindromeCountSet4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet5 = mutable.Set[Long]()\n        val evenPalindromeCountSet6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet7 = mutable.Set[Long]()\n        val oddPalindromeCountSet7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet8 = mutable.Set[Long]()\n        val evenPalindromeCountSet9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet10 = mutable.Set[Long]()\n        val oddPalindromeCountSet10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet11 = mutable.Set[Long]()\n        val evenPalindromeCountSet12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet13 = mutable.Set[Long", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     for(i <- 1 to n){\n            val reversedString = reverseString(i)\n \
    \           if(reversedString.equals(i)){\n                evenPalindromeCount\
    \ += 1\n            }\n            else{\n                oddPalindromeCount +=\
    \ 1\n            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)"]
stop_tokens:
- "\n    }\n"
