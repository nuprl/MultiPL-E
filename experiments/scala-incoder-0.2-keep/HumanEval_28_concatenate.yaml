name: HumanEval_28_concatenate
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n\
  \    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    def concatenate(strings\
  \ : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
  \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\"\
  )));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
  xyzwk\")));\n    }\n\n}\n"
completions: ['        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)']
stop_tokens:
- "\n    }\n"
