language: scala
name: HumanEval_86_anti_shuffle
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val newWords = words.map(word => {\n           \
    \ val chars = word.split(\"\").map(_.toUpperCase)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            val newChars = sortedChars.map(c => if\
    \ (c == ' ') c else c.toLowerCase + c.toUpperCase)\n            val newWord =\
    \ newChars.mkString(\"\")\n            newWord\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp95h6bao8.scala:18:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnewChars\e[0m = sortedChars.map(\e\
    [36mc\e[0m => \e[33mif\e[0m (c == \e[31m' '\e[0m) c \e[33melse\e[0m c.toLowerCase\
    \ + c.toUpperCase)\n\e[31m\e[31m   |\e[0m                                    \
    \                ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").map(_.toInt)\n            val sortedChars\
    \ = chars.sortWith(_ > _)\n            sortedChars.mkString(\"\")\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpylyb9u7z.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpylyb9u7z.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpylyb9u7z.scala:19)\n\
    \tat Problem$.main(tmpylyb9u7z.scala:23)\n\tat Problem.main(tmpylyb9u7z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").map(_.toInt)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            sortedChars.map(_.toString).mkString(\"\
    \")\n        }).toList\n        newWords.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpcl1uu3w0.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpcl1uu3w0.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpcl1uu3w0.scala:19)\n\
    \tat Problem$.main(tmpcl1uu3w0.scala:23)\n\tat Problem.main(tmpcl1uu3w0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        var newString = \"\"\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n  \
    \      var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n  \
    \      var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n  \
    \      var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n  \
    \      var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n  \
    \      var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n  \
    \      var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n  \
    \      var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n  \
    \      var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n  \
    \      var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n  \
    \      var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n  \
    \      var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n  \
    \      var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n  \
    \      var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n  \
    \      var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n  \
    \      var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n  \
    \      var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n  \
    \      var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n  \
    \      var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n  \
    \      var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n  \
    \      var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n  \
    \      var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n  \
    \      var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n  \
    \      var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n  \
    \      var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n  \
    \      var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n  \
    \      var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n  \
    \      var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n  \
    \      var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n  \
    \      var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n  \
    \      var g = 0\n        var \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpezqg8olc.scala:144:11 --------------------------\e\
    [0m\e[0m\n\e[31m144 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m    |\e[0m    \
    \       ^\e[0m\n\e[31m    |\e[0m           pattern expected\n\e[31m    |\e[0m\n\
    \e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpezqg8olc.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined\
    \ as \e[33mvariable\e[0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpezqg8olc.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mvar\e[0m \e[36mj\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mj is already defined\
    \ as \e[33mvariable\e[0m \e[35mj\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpezqg8olc.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mvar\e[0m \e[36mk\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mk is already defined\
    \ as \e[33mvariable\e[0m \e[35mk\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpezqg8olc.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mvar\e[0m \e[36ml\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined\
    \ as \e[33mvariable\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpezqg8olc.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mvar\e[0m \e[36mm\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is alread"
  stdout: ''
  timestamp: 1659800533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val result = new StringBuilder\n        val\
    \ wordMap = new mutable.HashMap[String, String]()\n        val blankMap = new\
    \ mutable.HashMap[String, String]()\n        val blankCount = 0\n        val wordCount\
    \ = 0\n        for (word <- words) {\n            val chars = word.split(\"\"\
    ).map(_.toInt)\n            val sortedChars = chars.sortWith(_ < _)\n        \
    \    val sortedWord = sortedChars.mkString(\"\")\n            val sortedCharsString\
    \ = sortedChars.map(_.toString).mkString(\"\")\n            val sortedWordString\
    \ = sortedWord.toString\n            val sortedWordChars = sortedWord.split(\"\
    \").map(_.toInt)\n            val sortedWordCharsString = sortedWordChars.map(_.toString).mkString(\"\
    \")\n            val sortedWordCharsSortedString = sortedWordCharsString.substring(sortedWordCharsString.length\
    \ - sortedWordChars.size)\n            val sortedWordCharsSortedString = sortedWordCharsSortedString.substring(0,sortedWordCharsSortedString.length\
    \ - sortedWordChars.size)\n            val sortedWordCharsSortedString = sortedWordCharsSortedString.substring(0,sortedWordCharsSortedString.length\
    \ - sortedWordChars.size)\n            val sortedWordCharsSortedString = sortedWordCharsSortedString.substring(0,sortedWordCharsSortedString.length\
    \ - sortedWordChars.size)\n            val sortedWordCharsSortedString = sortedWordCharsSortedString.substring(0,sortedWordCharsSortedString.length\
    \ - sortedWordChars.size)\n            val sortedWordCharsSortedString = sortedWordCharsSortedString.substring(0,sortedWordCharsSortedString.length\
    \ - sortedWordChars.size)\n            val sortedWordCharsSortedString = sortedWordCharsSortedString.substring(0,sortedWordCharsSortedString.length\
    \ - sortedWordChars.size)\n            val sortedWordCharsSortedString = sortedWordCharsSortedString.substring(0,sortedWordCharsSortedString.length\
    \ - sortedWordChars.size)\n            val sortedWordCharsSortedString = sortedWordCharsSortedString.substring(0,sortedWordCharsSortedString.length\
    \ - sortedWordChars.size)\n            val sortedWordCharsSortedString = sortedWordCharsSortedString.substring(0,sortedWordCharsSortedString.length\
    \ - sortedWordChars.size)\n            val sortedWordCharsSortedString = sortedWordCharsSortedString.substring(0,sortedWordCharsSortedString.length\
    \ - sortedWordChars.size)\n            val sortedWordCharsSortedString = sortedWordCharsSortedString.substring(0,sortedWordCharsSortedString.length\
    \ - sortedWordChars.\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3ff171rm.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp3ff171rm.scala:52:0 ----------------------------\e[0m\e[0m\n\e[31m52\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ff171rm.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwordMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3ff171rm.scala:17:27 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mblankMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3ff171rm.scala:29:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e\
    [0m \e[36msortedWordCharsSortedString\e[0m = sortedWordCharsSortedString.substring(\e\
    [31m0\e[0m,sortedWordCharsSortedString.length - sortedWordChars.size)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msortedWordCharsSortedString is already defined as \e[33mvalue\e\
    [0m \e[35msortedWordCharsSortedString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3ff171rm.scala:30:16 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mso"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toInt).mkString(\"\")\n            newChars\n     \
    \   })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpal4m3o8_.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpal4m3o8_.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpal4m3o8_.scala:20)\n\
    \tat Problem$.main(tmpal4m3o8_.scala:24)\n\tat Problem.main(tmpal4m3o8_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase)\n        val sortedWords = words.sortBy(_.toString.toInt)\n\
    \        val newWords = sortedWords.map(w => w.toString.replaceAll(\"\\\\s\",\
    \ \"\")).mkString(\" \")\n        newWords\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyeufkn4s.scala:20)\n\tat Problem.main(tmpyeufkn4s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase)\n        val sortedWords = words.sortWith(_ < _)\n      \
    \  val result = sortedWords.mkString(\" \")\n        val blankSpaces = result.count(_\
    \ == \" \")\n        val blankSpace = if (blankSpaces == 0) \"\" else \" \"\n\
    \        result + blankSpace\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnmb1x98k.scala:17:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mblankSpaces\e[0m = result.count(_\
    \ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \       ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(x => x.toUpperCase)\n        val newWordsSorted\
    \ = newWords.sortWith((x, y) => x.compareTo(y))\n        val newString = newWordsSorted.mkString(\"\
    \ \")\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfzznabtf.scala:16:68\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewWordsSorted\e\
    [0m = newWords.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e\
    [31m   |\e[0m                                                         ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Int\n\e[31m   |\e[0m                                                    \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toInt).mkString(\"\")\n            newChars\n     \
    \   })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpal4m3o8_.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpal4m3o8_.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpal4m3o8_.scala:20)\n\
    \tat Problem$.main(tmpal4m3o8_.scala:24)\n\tat Problem.main(tmpal4m3o8_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newWord\
    \ = sortedChars.mkString(\"\")\n            newWord\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val charsSorted = chars.sortWith(_ > _)\n            val charsSortedString\
    \ = charsSorted.mkString(\"\")\n            charsSortedString\n        })\n  \
    \      newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2_remm_r.scala:24)\n\tat Problem.main(tmp2_remm_r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val sortedWords = words.sortWith(_ < _)\n\
    \        val newWords = sortedWords.map(word => word.map(c => c.toInt).map(c =>\
    \ c.toChar).map(c => c.toString.toInt).map(c => c.toChar).mkString(\"\"))\n  \
    \      val newString = newWords.mkString(\" \")\n        return newString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3$$anonfun$3(tmpz0hirkeq.scala:16)\n\
    \tat Problem$.$anonfun$3$$anonfun$adapted$3(tmpz0hirkeq.scala:16)\n\tat scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)\n\
    \tat scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)\n\tat Problem$.$anonfun$3(tmpz0hirkeq.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpz0hirkeq.scala:16)\n\
    \tat Problem$.main(tmpz0hirkeq.scala:21)\n\tat Problem.main(tmpz0hirkeq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$"
  stdout: ''
  timestamp: 1659800535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val result = new StringBuilder\n        val\
    \ chars = words.map(_.toChar)\n        val charsSorted = chars.sortWith(_ < _)\n\
    \        charsSorted.foreach(c => result.append(c))\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo__jp6e1.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              value toChar is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpo__jp6e1.scala:17:43 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcharsSorted\e[0m = chars.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                                         ^^^\e[0m\n\
    \e[31m   |\e[0mvalue < is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\
    \e[31m   |\e[0m  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpo__jp6e1.scala:18:40\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        charsSorted.foreach(\e\
    [36mc\e[0m => result.append(c))\n\e[31m\e[31m   |\e[0m                       \
    \          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mclass\e[0m \e[35mStringBuilder\e\
    [0m with types\n\e[31m   |\e[0m (x: Char): StringBuilder\n\e[31m   |\e[0m (x:\
    \ Double): StringBuilder\n\e[31m   |\e[0m (x: Float): StringBuilder\n\e[31m  \
    \ |\e[0m (x: Long): StringBuilder\n\e[31m   |\e[0m (x: Int): StringBuilder\n\e\
    [31m   |\e[0m (x: Short): StringBuilder\n\e[31m   |\e[0m (x: Byte): StringBuilder\n\
    \e[31m   |\e[0m (x: Boolean): StringBuilder\n\e[31m   |\e[0m (s: StringBuilder):\
    \ StringBuilder\n\e[31m   |\e[0m (cs: CharSequence): StringBuilder\n\e[31m   |\e\
    [0m (s: String): StringBuilder\n\e[31m   |\e[0m (x:"
  stdout: ''
  timestamp: 1659800534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val sortedWords = words.sortWith((x, y) => x.compareTo(y))\n\
    \        val result = sortedWords.mkString(\" \")\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcqg31wll.scala:15:62\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msortedWords\e\
    [0m = words.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e\
    [31m   |\e[0m                                                   ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    Int\n\e[31m   |\e[0m                                                   Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(x => x.toUpperCase)\n        val sortedWords\
    \ = newWords.sortWith(_ < _)\n        val newSentence = sortedWords.mkString(\"\
    \ \")\n        val newSentenceWithSpace = newSentence.trim\n        newSentenceWithSpace\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb8nswne7.scala:22)\n\tat Problem.main(tmpb8nswne7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val sortedWords = words.sortBy(_.toString.toInt)\n\
    \        val result = sortedWords.mkString(\" \")\n        val blankSpaces = result.length\
    \ - result.split(\" \").length\n        val blankSpace = \" \" * blankSpaces\n\
    \        val newWords = result.split(\" \").map(_.toString.toInt).map(_.toString).map(c\
    \ => if (c == \" \") blankSpace else c).mkString(\" \")\n        newWords + blankSpace\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"HI\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmp5df8gma_.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmp5df8gma_.scala:19)\n\
    \tat Problem$.main(tmp5df8gma_.scala:23)\n\tat Problem.main(tmp5df8gma_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newWord\
    \ = sortedChars.mkString(\"\")\n            newWord\n        })\n        val newString\
    \ = newWords.mkString(\" \")\n        newString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").map(_.toInt)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            val newChars = sortedChars.map(c => c.toChar).mkString\n\
    \            newChars\n        })\n        newWords.mkString(\" \")\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpyggghcov.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpyggghcov.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpyggghcov.scala:20)\n\
    \tat Problem$.main(tmpyggghcov.scala:24)\n\tat Problem.main(tmpyggghcov.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").map(_.toInt)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\")\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmprh_g66sm.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmprh_g66sm.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmprh_g66sm.scala:19)\n\
    \tat Problem$.main(tmprh_g66sm.scala:23)\n\tat Problem.main(tmprh_g66sm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val sortedWords = words.sortBy(_.toString.toInt)\n\
    \        val result = sortedWords.mkString(\" \")\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbjzz3mjj.scala:20)\n\tat Problem.main(tmpbjzz3mjj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val charsSorted = chars.sortWith((x, y) => x.compareTo(y))\n\
    \            charsSorted.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp4jemac0.scala:17:66\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e\
    [36mcharsSorted\e[0m = chars.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Int\n\e[31m   |\e[0m                                                    \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toString.toInt)\n            val newWord = newChars.mkString(\"\
    \")\n            newWord\n        })\n        newWords.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpbfrlb_y1.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpbfrlb_y1.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpbfrlb_y1.scala:21)\n\
    \tat Problem$.main(tmpbfrlb_y1.scala:25)\n\tat Problem.main(tmpbfrlb_y1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val charsSorted = chars.sortWith(_ < _)\n            charsSorted.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(x => x.toUpperCase)\n        val sortedWords\
    \ = newWords.sortWith((x, y) => x.toString.compareTo(y.toString))\n        val\
    \ newSentence = sortedWords.mkString(\" \")\n        newSentence\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp35u2g_8q.scala:16:74\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msortedWords\e\
    [0m = newWords.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.toString.compareTo(y.toString))\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                      Found:\
    \    Int\n\e[31m   |\e[0m                                                    \
    \  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800543
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").map(_.toInt)\n            val sortedChars\
    \ = chars.sortWith(_ > _)\n            val newChars = sortedChars.map(_.toChar).mkString(\"\
    \")\n            newChars\n        }).toList\n        val newString = newWords.mkString(\"\
    \ \")\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpjm1v7ut1.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpjm1v7ut1.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpjm1v7ut1.scala:20)\n\
    \tat Problem$.main(tmpjm1v7ut1.scala:25)\n\tat Problem.main(tmpjm1v7ut1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val sortedWords = words.sortWith(_ < _)\n      \
    \  val newWords = sortedWords.map(_.toChar).mkString(\"\")\n        newWords\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxt5fuvmz.scala:16:41 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewWords\e[0m = sortedWords.map(_.toChar).mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmpxt5fuvmz.scala:16:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewWords\e[0m = sortedWords.map(_.toChar).mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                        \
    \        ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800546
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.mkString(\"\")\n            newChars\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val sortedWords = words.sortWith(_ > _)\n      \
    \  val result = sortedWords.mkString(\" \")\n        val blankSpaces = result.count(_\
    \ == \" \")\n        val blankSpace = if (blankSpaces == 0) \"\" else \" \"\n\
    \        result + blankSpace\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp67crs4qz.scala:17:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mblankSpaces\e[0m = result.count(_\
    \ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \       ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659800545
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val newWords = words.map(w => {\n            val\
    \ chars = w.toCharArray\n            val sortedChars = chars.sortWith(_ < _)\n\
    \            val newChars = sortedChars.map(c => c.toInt)\n            val newWord\
    \ = new String(newChars)\n            newWord\n        })\n        val newSentence\
    \ = newWords.mkString(\" \")\n        newSentence\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpd1e2ci5x.scala:19:30 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = \e[33mnew\e\
    [0m \e[35mString\e[0m(newChars)\n\e[31m\e[31m   |\e[0m                       \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mconstructor\e[0m \e[35mString\e[0m in \e[33mclass\e[0m \e[35mString\e[0m with\
    \ types\n\e[31m   |\e[0m (x$0: StringBuilder): String\n\e[31m   |\e[0m (x$0: StringBuffer):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Byte]): String\n\e[31m   |\e[0m (x$0: Array[Byte],\
    \ x$1: Int, x$2: Int): String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1: String): String\n\e[31m   |\e\
    [0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\
    \e[31m   |\e[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\e\
    [31m   |\e[0m (x$0: Array[Byte], x$1: Int): String\n\e[31m   |\e[0m (x$0: Array[Byte],\
    \ x$1: Int, x$2: Int, x$3: Int): String\n\e[31m   |\e[0m (x$0: Array[Int], x$1:\
    \ Int, x$2: Int): String\n\e[31m   |\e[0m (x$0: Array[Char], x$1: Int, x$2: Int):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Char]): String\n\e[31m   |\e[0m (x$0: String):\
    \ String\n\e[31m   |\e[0m (): String\n\e[31m   |\e[0mmatch arguments ((newChars\
    \ : Array[Int]))\n\e[31m\e[31m-- Error: /tmp/tmpd1e2ci5x.scala:21:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        })\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e\
    [31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m          where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800545
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val sortedWords = words.sortWith(_ < _)\n\
    \        val sortedString = sortedWords.mkString(\" \")\n        sortedString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpt2src8.scala:20)\n\tat Problem.main(tmpnpt2src8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800547
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toString.toInt)\n            val newWord = newChars.mkString(\"\
    \")\n            newWord\n        })\n        newWords.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpbfrlb_y1.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpbfrlb_y1.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpbfrlb_y1.scala:21)\n\
    \tat Problem$.main(tmpbfrlb_y1.scala:25)\n\tat Problem.main(tmpbfrlb_y1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val sortedWords = words.sortWith((x, y) =>\
    \ x.compareTo(y))\n        val newWords = sortedWords.map(x => x.toChar).mkString(\"\
    \")\n        val newSentence = newWords + \" \" + s\n        newSentence\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmple0z8ua9.scala:15:62\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msortedWords\e\
    [0m = words.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e\
    [31m   |\e[0m                                                   ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    Int\n\e[31m   |\e[0m                                                   Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmple0z8ua9.scala:16:46\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mnewWords\e[0m = sortedWords.map(\e[36mx\e[0m => x.toChar).mkString(\e[31m\"\
    \"\e[0m)\n\e[31m\e[31m   |\e[0m                                            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659800546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val newWords = words.map(word => {\n           \
    \ val chars = word.split(\"\").map(_.toUpperCase)\n            val sortedChars\
    \ = chars.sortWith((x, y) => x.compareTo(y))\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj0iotfkm.scala:17:66\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e\
    [36msortedChars\e[0m = chars.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Int\n\e[31m   |\e[0m                                                    \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800545
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase)\n        val chars = words.map(_.toChar)\n        val charsSorted\
    \ = chars.sortWith((x,y) => x.toInt < y.toInt)\n        val charsSortedString\
    \ = charsSorted.mkString(\"\")\n        val wordsSorted = words.map(_.toLowerCase)\n\
    \        val wordsSortedString = wordsSorted.mkString(\"\")\n        val result\
    \ = charsSortedString + wordsSortedString\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpet5ixphb.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              value toChar is not a member of String\n\e[31m\e\
    [31m-- Error: /tmp/tmpet5ixphb.scala:15:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                       where:    B\
    \ is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase)\n        val newWords = words.toList.sortWith((x, y) => x.compareTo(y))\n\
    \        val newString = newWords.mkString(\" \")\n        newString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxx0xtg3h.scala:15:66\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnewWords\e\
    [0m = words.toList.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e\
    [31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Int\n\e[31m   |\e[0m                                                    \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800546
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toInt).mkString(\"\")\n            newChars\n     \
    \   })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpal4m3o8_.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpal4m3o8_.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpal4m3o8_.scala:20)\n\
    \tat Problem$.main(tmpal4m3o8_.scala:24)\n\tat Problem.main(tmpal4m3o8_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(x => x.toUpperCase).sortWith(_ < _)\n    \
    \    val newString = newWords.mkString(\" \")\n        newString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7t5wher9.scala:20)\n\tat Problem.main(tmp7t5wher9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val newWords = words.map(w => w.toCharArray.sortWith(_\
    \ < _).mkString).mkString(\" \")\n        newWords\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr3atae_t.scala:19)\n\tat Problem.main(tmpr3atae_t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(word => word.swapCase)\n        val sortedWords = words.sortWith(_ < _)\n\
    \        val result = sortedWords.mkString(\" \")\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5b8ctt_5.scala:14:50 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = s.split(\e\
    [31m\" \"\e[0m).map(\e[36mword\e[0m => word.swapCase)\n\e[31m\e[31m   |\e[0m \
    \                                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value swapCase is not a member of String\n\e\
    [31m\e[31m-- Error: /tmp/tmp5b8ctt_5.scala:14:59 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = s.split(\e\
    [31m\" \"\e[0m).map(\e[36mword\e[0m => word.swapCase)\n\e[31m\e[31m   |\e[0m \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                          No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800547
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val sortedWords = words.sortBy(_.toInt)\n\
    \        val result = sortedWords.mkString(\" \")\n        result + \" \"\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_8yd2jok.scala:20)\n\tat Problem.main(tmp_8yd2jok.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val charsSorted = chars.sortWith(_ < _)\n            charsSorted.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800546
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(x => x.toUpperCase).sortWith(_ > _)\n    \
    \    val newString = newWords.mkString(\" \")\n        newString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxzcn98t1.scala:20)\n\tat Problem.main(tmpxzcn98t1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800547
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val newWords = words.map(word => {\n           \
    \ val chars = word.split(\"\").map(_.toUpperCase)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\")\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp618445s9.scala:23)\n\tat Problem.main(tmp618445s9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase)\n        val sortedWords = words.sortBy(_.toString.toInt)\n\
    \        val result = sortedWords.mkString(\" \")\n        val blankSpaces = result.count(_\
    \ == \" \")\n        val blankSpace = if (blankSpaces == 0) \"\" else \" \"\n\
    \        val newWords = result.split(\" \").map(word => if (word == \"\") \"\"\
    \ else (word + blankSpace))\n        newWords.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpu02xr928.scala:17:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mblankSpaces\e[0m = result.count(_\
    \ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \       ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659800547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val chars = words.map(_.toUpperCase.map(_.toInt))\n\
    \        val charsSorted = chars.sortWith(_ < _)\n        val charsSortedString\
    \ = charsSorted.mkString(\"\")\n        val wordsSorted = words.map(_.toUpperCase)\n\
    \        val wordsSortedString = wordsSorted.mkString(\"\")\n        val wordsSortedString2\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString3\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString4\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString5\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString6\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString7\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString8\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString9\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString10\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString11\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString12\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString13\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString14\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString15\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString16\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString17\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString18\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString19\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString20\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString21\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString22\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString23\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSortedString24\
    \ = wordsSorted.map(_.toUpperCase).mkString(\"\")\n        val wordsSorted\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf0e5v4tl.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf0e5v4tl.scala:16:43\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcharsSorted\e[0m = chars.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m          \
    \                               ^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member\
    \ of IndexedSeq[Int], but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf0e5v4tl.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800549
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase)\n        val chars = words.map(_.toChar)\n        val charsSorted\
    \ = chars.sortWith(_ < _)\n        val charsSortedString = charsSorted.mkString(\"\
    \")\n        val wordsSorted = words.map(_.toLowerCase)\n        val wordsSortedString\
    \ = wordsSorted.mkString(\"\")\n        val result = charsSortedString + wordsSortedString\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2vosg_9n.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              value toChar is not a member of String\n\e[31m\e\
    [31m-- Error: /tmp/tmp2vosg_9n.scala:15:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                       where:    B\
    \ is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800547
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val newWords = words.map(word => {\n           \
    \ val chars = word.split(\"\").map(_.toUpperCase)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\")\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp618445s9.scala:23)\n\tat Problem.main(tmp618445s9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val sortedWords = words.sortWith((x, y) => x.toString.compareTo(y.toString))\n\
    \        val result = sortedWords.mkString(\" \")\n        val blankSpaces = result.count(_\
    \ == \" \")\n        val blankSpace = if (blankSpaces == 0) \"\" else \" \"\n\
    \        val newWords = result.split(blankSpace)\n        val newWord = newWords.map(_.toUpperCase)\n\
    \        val newWordsString = newWords.mkString(\" \")\n        val newWordsString\
    \ = if (newWordsString.isEmpty) \"\" else newWordsString + blankSpace\n      \
    \  newWordsString + blankSpace\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbqoekozo.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnewWordsString\e[0m = \e\
    [33mif\e[0m (newWordsString.isEmpty) \e[31m\"\"\e[0m \e[33melse\e[0m newWordsString\
    \ + blankSpace\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewWordsString is already defined as \e[33mvalue\e[0m \e[35mnewWordsString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpbqoekozo.scala:15:71 --------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36msortedWords\e[0m = words.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x.toString.compareTo(y.toString))\n\e[31m\e[31m \
    \  |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    Int\n\e[31m   |\e[0m                                                   Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpbqoekozo.scala:17:39\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mblankSpaces\e[0m = result.count(_ == \e[31m\" \"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1659800547
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val sortedWords = words.sortWith(_ < _)\n      \
    \  val result = sortedWords.mkString(\" \")\n        result + \" \"\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5m21g0ho.scala:20)\n\tat Problem.main(tmp5m21g0ho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val charsSorted = chars.sortWith(_ < _)\n            charsSorted.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800546
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").map(_.toInt)\n            val sortedChars\
    \ = chars.sortWith(_ > _)\n            sortedChars.mkString(\"\")\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpylyb9u7z.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpylyb9u7z.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpylyb9u7z.scala:19)\n\
    \tat Problem$.main(tmpylyb9u7z.scala:23)\n\tat Problem.main(tmpylyb9u7z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val chars = words.map(_.toChar).toList\n\
    \        val charsSorted = chars.sortWith((x, y) => x.compareTo(y))\n        val\
    \ charsSortedString = charsSorted.mkString(\"\")\n        val wordsSorted = words.map(_.toLowerCase).toList\n\
    \        val wordsSortedString = wordsSorted.mkString(\"\")\n        val result\
    \ = charsSortedString + wordsSortedString\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_nbpy5f.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar).toList\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              value toChar is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpf_nbpy5f.scala:16:53 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcharsSorted\e[0m = chars.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e[31m   |\e[0m          \
    \                                         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ compareTo is not a member of Nothing, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import concurrent.duration.pairIntToDuration\n\
    \e[31m   |\e[0m  import concurrent.duration.pairLongToDuration\n\e[31m   |\e[0m\
    \  import math.BigDecimal.int2bigDecimal\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m  import math.BigInt.javaBigInteger2bigInt\n\
    \e[31m   |\e[0m  import math.BigDecimal.long2bigDecimal\n\e[31m   |\e[0m  import\
    \ math.BigInt.long2bigInt\n\e[31m   |\e[0m  import math.BigDecimal.double2bigDecimal\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659800556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        var newString = \"\"\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        var tempString\
    \ = \"\"\n        var tempString2 = \"\"\n        var tempString3 = \"\"\n   \
    \     var tempString4 = \"\"\n        var tempString5 = \"\"\n        var tempString6\
    \ = \"\"\n        var tempString7 = \"\"\n        var tempString8 = \"\"\n   \
    \     var tempString9 = \"\"\n        var tempString10 = \"\"\n        var tempString11\
    \ = \"\"\n        var tempString12 = \"\"\n        var tempString13 = \"\"\n \
    \       var tempString14 = \"\"\n        var tempString15 = \"\"\n        var\
    \ tempString16 = \"\"\n        var tempString17 = \"\"\n        var tempString18\
    \ = \"\"\n        var tempString19 = \"\"\n        var tempString20 = \"\"\n \
    \       var tempString21 = \"\"\n        var tempString22 = \"\"\n        var\
    \ tempString23 = \"\"\n        var tempString24 = \"\"\n        var tempString25\
    \ = \"\"\n        var tempString26 = \"\"\n        var tempString27 = \"\"\n \
    \       var tempString28 = \"\"\n        var tempString29 = \"\"\n        var\
    \ tempString30 = \"\"\n        var tempString31 = \"\"\n        var tempString32\
    \ = \"\"\n        var tempString33 = \"\"\n        var tempString34 = \"\"\n \
    \       var tempString35 = \"\"\n        var tempString36 = \"\"\n        var\
    \ tempString37 = \"\"\n        var tempString38 = \"\"\n        var tempString39\
    \ = \"\"\n        var tempString40 = \"\"\n        var tempString41 = \"\"\n \
    \       var tempString42 = \"\"\n        var tempString43 = \"\"\n        var\
    \ tempString44 = \"\"\n        var tempString45 = \"\"\n        var tempString46\
    \ = \"\"\n        var tempString47 = \"\"\n        var tempString48 = \"\"\n \
    \       var tempString49 = \"\"\n        var tempString50 = \"\"\n        var\
    \ tempString51 = \"\"\n        var tempString52 = \"\"\n        var tempString53\
    \ = \"\"\n        var tempString54 = \"\"\n        var tempString55 = \"\"\n \
    \       var tempString56 = \"\"\n        var tempString57 = \"\"\n        var\
    \ tempString58 = \"\"\n        var tempString59 = \"\"\n        var tempString60\
    \ = \"\"\n        var tempString61 = \"\"\n        var tempString62 = \"\"\n \
    \       var tempString63 = \"\"\n        var tempString64 = \"\"\n        var\
    \ tempString65 = \"\"\n        var tempString66 = \"\"\n        var tempString67\
    \ = \"\"\n        var tempString68 = \"\"\n        var tempString69 = \"\"\n \
    \       var tempString70 = \"\"\n        var tempString71 = \"\"\n        var\
    \ tempString72 = \"\"\n        var tempString73 = \"\"\n        var tempString74\
    \ = \"\"\n        var tempString75 = \"\"\n        var tempString76 = \"\"\n \
    \       var tempString77 = \"\"\n        var tempString78 = \"\"\n        var\
    \ tempString79 = \"\"\n        var tempString80 = \"\"\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprz56gaew.scala:99:5\
    \ ---------------------\e[0m\e[0m\n\e[31m99 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(x => x.toUpperCase)\n        val newWordsSorted\
    \ = newWords.sortWith((x, y) => x.toString.compareToIgnoreCase(y.toString))\n\
    \        val newString = newWordsSorted.mkString(\" \")\n        newString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph7rp0vp8.scala:16:87\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewWordsSorted\e\
    [0m = newWords.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.toString.compareToIgnoreCase(y.toString))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                            Found:    Int\n\e[31m   |\e[0m  \
    \                                                     Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800556
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newWord\
    \ = sortedChars.mkString(\"\")\n            newWord\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase)\n        val sortedWords = words.sortWith(_ < _)\n      \
    \  val result = sortedWords.mkString(\" \")\n        val blankSpaces = s.replaceAll(\"\
    \\\\s+\", \" \")\n        blankSpaces.replaceAll(\"\\\\s+\", \" \")\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpayc328i2.scala:22)\n\tat Problem.main(tmpayc328i2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800559
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase)\n        val newWords = words.map(word => {\n           \
    \ val chars = word.split(\"\").map(_.toInt)\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmp1po83whm.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmp1po83whm.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmp1po83whm.scala:19)\n\
    \tat Problem$.main(tmp1po83whm.scala:23)\n\tat Problem.main(tmp1po83whm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800559
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toInt)\n            val newWord = newChars.mkString(\"\
    \")\n            newWord\n        })\n        newWords.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpshs16hb7.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpshs16hb7.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpshs16hb7.scala:21)\n\
    \tat Problem$.main(tmpshs16hb7.scala:25)\n\tat Problem.main(tmpshs16hb7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val sortedWords = words.sortWith(_ < _)\n      \
    \  val result = sortedWords.mkString(\" \")\n        val blankSpaces = result.count(_\
    \ == \" \")\n        val blankSpaceCount = blankSpaces.toDouble\n        val blankSpacePercentage\
    \ = blankSpaceCount * 100 / result.length\n        val blankSpacePercentageString\
    \ = blankSpacePercentage.toString.toDouble\n        val blankSpacePercentageStringWithCommas\
    \ = blankSpacePercentageString.toString.replace(\",\", \".\")\n        val blankSpacePercentageStringWithCommasWithSpaces\
    \ = blankSpacePercentageStringWithCommas.replace(\".\", \" \")\n        val blankSpacePercentageStringWithCommasWithSpacesWithSpaces\
    \ = blankSpacePercentageStringWithCommasWithSpaces.replace(\",\", \" \")\n   \
    \     val blankSpacePercentageStringWithCommasWithSpacesWithSpacesWithSpaces =\
    \ blankSpacePercentageStringWithCommasWithSpacesWithSpaces.replace(\",\", \" \"\
    )\n        val blankSpacePercentageStringWithCommasWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = blankSpacePercentageStringWithCommasWithSpacesWithSpacesWithSpaces.replace(\"\
    ,\", \" \")\n        val blankSpacePercentageStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = blankSpacePercentageStringWithCommasWithSpacesWithSpacesWithSpacesWithSpaces.replace(\"\
    ,\", \" \")\n        val blankSpacePercentageStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = blankSpacePercentageStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.replace(\"\
    ,\", \" \")\n        val blankSpacePercentageStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = blankSpacePercentageStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.replace(\"\
    ,\", \" \")\n        val blankSpacePercentageStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = blankSpacePercentageStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.replace(\"\
    ,\", \" \")\n        val blankSpacePercentageStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = blankSpacePercentageStringWithCommasWithSpacesWith\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl2s4edxe.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mblankSpacePercentageStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\e\
    [0m = blankSpacePercentageStringWithCommasWithSpacesWith\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mblankSpacePercentageStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  blankSpacePercentageStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ Error: /tmp/tmpl2s4edxe.scala:17:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mblankSpaces\e[0m = result.count(_\
    \ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \       ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpl2s4edxe.scala:31:5 ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800558
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").map(_.toInt)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\")\n        }).toList\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpiex4aexx.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpiex4aexx.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpiex4aexx.scala:19)\n\
    \tat Problem$.main(tmpiex4aexx.scala:23)\n\tat Problem.main(tmpiex4aexx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toInt).mkString(\"\")\n            newChars\n     \
    \   })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpal4m3o8_.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpal4m3o8_.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpal4m3o8_.scala:20)\n\
    \tat Problem$.main(tmpal4m3o8_.scala:24)\n\tat Problem.main(tmpal4m3o8_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").map(_.toInt)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            sortedChars.map(_.toChar).mkString(\"\"\
    )\n        }).sortWith(_ < _)\n        newWords.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmplcdv7ery.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmplcdv7ery.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmplcdv7ery.scala:19)\n\
    \tat Problem$.main(tmplcdv7ery.scala:23)\n\tat Problem.main(tmplcdv7ery.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800559
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val sortedWords = words.sortWith(_.compareTo(_)\
    \ < 0)\n        val result = sortedWords.mkString(\" \")\n        val blankSpaces\
    \ = s.replaceAll(\"\\\\s+\", \" \")\n        blankSpaces.replaceAll(\"\\\\s+\"\
    , \" \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc93kxzo6.scala:22)\n\tat Problem.main(tmpc93kxzo6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val sortedWords = words.sortWith(_.compareTo(_)\
    \ < 0)\n        val newWords = sortedWords.map(word => word.map(c => c.toInt).map(c\
    \ => c.toChar).mkString).mkString(\" \")\n        newWords\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9nm2jv4z.scala:20)\n\tat Problem.main(tmp9nm2jv4z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        var newString = \"\"\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n  \
    \      var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n  \
    \      var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n  \
    \      var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n  \
    \      var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n  \
    \      var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n  \
    \      var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n  \
    \      var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n  \
    \      var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n  \
    \      var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n  \
    \      var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n  \
    \      var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n  \
    \      var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n  \
    \      var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n  \
    \      var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n  \
    \      var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n  \
    \      var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n  \
    \      var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n  \
    \      var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n  \
    \      var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n  \
    \      var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n  \
    \      var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n  \
    \      var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n  \
    \      var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n  \
    \      var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n  \
    \      var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n  \
    \      var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n  \
    \      var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n  \
    \      var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n  \
    \      var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n  \
    \      var g = 0\n        var \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpezqg8olc.scala:144:11 --------------------------\e\
    [0m\e[0m\n\e[31m144 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m    |\e[0m    \
    \       ^\e[0m\n\e[31m    |\e[0m           pattern expected\n\e[31m    |\e[0m\n\
    \e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpezqg8olc.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined\
    \ as \e[33mvariable\e[0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpezqg8olc.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mvar\e[0m \e[36mj\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mj is already defined\
    \ as \e[33mvariable\e[0m \e[35mj\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpezqg8olc.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mvar\e[0m \e[36mk\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mk is already defined\
    \ as \e[33mvariable\e[0m \e[35mk\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpezqg8olc.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mvar\e[0m \e[36ml\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined\
    \ as \e[33mvariable\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpezqg8olc.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mvar\e[0m \e[36mm\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is alread"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newWord\
    \ = sortedChars.mkString(\"\")\n            newWord\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.mkString(\"\")\n            newChars\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800547
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val chars = words.map(_.toChar)\n       \
    \ val charsSorted = chars.sortWith(_ < _)\n        val charsSortedString = charsSorted.mkString(\"\
    \")\n        val wordsSorted = words.sortWith(_ < _)\n        val wordsSortedString\
    \ = wordsSorted.mkString(\"\")\n        val blankSpaces = chars.filter(c => c\
    \ == ' ')\n        val blankSpacesString = blankSpaces.mkString(\"\")\n      \
    \  val newWord = blankSpacesString + charsSortedString\n        val newWordString\
    \ = newWord.toLowerCase\n        val newWordList = newWordString.split(\" \")\n\
    \        val newWordListString = newWordList.mkString(\" \")\n        val newWordListSortedString\
    \ = newWordListString.sortWith(_ < _)\n        val newWordListSortedString = newWordListSortedString.mkString(\"\
    \ \")\n        val newWordListSortedString = newWordListSortedString.replaceAll(\"\
    \\\\s+\", \"\")\n        val newWordListSortedString = newWordListSortedString.replaceAll(\"\
    \\\\s+\", \"\")\n        val newWordListSortedString = newWordListSortedString.replaceAll(\"\
    \\\\s+\", \"\")\n        val newWordListSortedString = newWordListSortedString.replaceAll(\"\
    \\\\s+\", \"\")\n        val newWordListSortedString = newWordListSortedString.replaceAll(\"\
    \\\\s+\", \"\")\n        val newWordListSortedString = newWordListSortedString.replaceAll(\"\
    \\\\s+\", \"\")\n        val newWordListSortedString = newWordListSortedString.replaceAll(\"\
    \\\\s+\", \"\")\n        val newWordListSortedString = newWordListSortedString.replaceAll(\"\
    \\\\s+\", \"\")\n        val newWordListSortedString = newWordListSortedString.replaceAll(\"\
    \\\\s+\", \"\")\n        val newWordListSortedString = newWordListSortedString.replaceAll(\"\
    \\\\s+\", \"\")\n        val newWordListSortedString = newWordListSortedString.replaceAll(\"\
    \\\\s+\", \"\")\n        val newWordListSortedString = newWordListSortedString.replaceAll(\"\
    \\\\s+\", \"\")\n        val newWordListSortedString = newWordListSortedString.replaceAll(\"\
    \\\\s+\", \"\")\n        val newWordListSortedString = newWordListSortedString.replaceAll(\"\
    \\\\s+\", \"\")\n        val newWordListSortedString = newWordListSortedString.replaceAll(\"\
    \\\\s+\", \"\")\n        val newWordListSortedString = newWordListSortedString.replaceAll(\"\
    \\\\s+\", \"\")\n        val newWordListSortedString = newWordListSortedString.replaceAll(\"\
    \\\\s+\", \"\")\n        val newWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpevv6fwsu.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpevv6fwsu.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewWordListSortedString\e[0m = newWordListSortedString.mkString(\e[31m\"\
    \ \"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewWordListSortedString is already defined as \e[33mvalue\e\
    [0m \e[35mnewWordListSortedString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpevv6fwsu.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnewWordListSortedString\e\
    [0m = newWordListSortedString.replaceAll(\e[31m\"\\\\s+\"\e[0m, \e[31m\"\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewWordListSortedString is already defined as \e[33mvalue\e\
    [0m \e[35mnewWordListSortedString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpevv6fwsu.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnewWordListSortedString\e\
    [0m = newWordListSortedString.replaceAll(\e[31m\"\\\\s+\"\e[0m, \e[31m\"\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewWordListSortedString is already defined as \e[33mvalue\e\
    [0m \e[35mnewWordListSortedString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpevv6fwsu.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnewWordListSortedString\e\
    [0m = newWordListSortedStri"
  stdout: ''
  timestamp: 1659800559
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.mkString(\"\")\n            newChars\n        })\n        val\
    \ newString = newWords.mkString(\" \")\n        newString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").map(_.toInt)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            sortedChars.map(_.toString).mkString(\"\
    \")\n        }).toList\n        newWords.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpcl1uu3w0.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpcl1uu3w0.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpcl1uu3w0.scala:19)\n\
    \tat Problem$.main(tmpcl1uu3w0.scala:23)\n\tat Problem.main(tmpcl1uu3w0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").map(_.toInt)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            sortedChars.map(c => chars.indexOf(c) +\
    \ 1).mkString(\"\")\n        }).sortWith(_ < _)\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmp89ixrvfy.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmp89ixrvfy.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmp89ixrvfy.scala:19)\n\
    \tat Problem$.main(tmp89ixrvfy.scala:23)\n\tat Problem.main(tmp89ixrvfy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800561
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").map(_.toInt)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\")\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmprh_g66sm.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmprh_g66sm.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmprh_g66sm.scala:19)\n\
    \tat Problem$.main(tmprh_g66sm.scala:23)\n\tat Problem.main(tmprh_g66sm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toInt)\n            val newWord = String.fromChars(newChars)\n\
    \            newWord\n        })\n        newWords.mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyqsiq1hc.scala:19:33 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = String.fromChars(newChars)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                        value fromChars is not a member of object String\n\
    \e[31m\e[31m-- Error: /tmp/tmpyqsiq1hc.scala:21:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        })\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e\
    [31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m          where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(x => x.replaceAll(\"[^a-zA-Z]\", \"\").toLowerCase)\n\
    \        val sortedWords = newWords.sortWith(_ < _)\n        val newString = sortedWords.mkString(\"\
    \ \")\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ufkgsm_.scala:21)\n\tat Problem.main(tmp1ufkgsm_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val sortedWords = words.sortWith((x, y) => x.toString.compareToIgnoreCase(y.toString))\n\
    \        val newWords = sortedWords.map((x) => x.toString.replaceAll(\"\\\\s\"\
    , \"\")).mkString(\" \")\n        newWords\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphzdp18lw.scala:15:81\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msortedWords\e\
    [0m = words.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.toString.compareToIgnoreCase(y.toString))\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    Int\n\e[31m   |\e[0m                                                   Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800559
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.mkString(\"\")\n            newChars\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800547
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val charsSorted = chars.sortWith(_ < _)\n            charsSorted.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase)\n        val sortedWords = words.sortWith((x, y) => x.compareTo(y))\n\
    \        val newWords = sortedWords.map(x => x.toChar).mkString(\"\")\n      \
    \  newWords\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp630m58ah.scala:15:62\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msortedWords\e\
    [0m = words.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e\
    [31m   |\e[0m                                                   ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    Int\n\e[31m   |\e[0m                                                   Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp630m58ah.scala:16:46\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mnewWords\e[0m = sortedWords.map(\e[36mx\e[0m => x.toChar).mkString(\e[31m\"\
    \"\e[0m)\n\e[31m\e[31m   |\e[0m                                            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmp630m58ah.scala:16:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewWords\e[0m = sortedWords.map(\e\
    [36mx\e[0m => x.toChar).mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                     No ClassTag available for B\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                          where:    B is a\
    \ type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659800560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val sortedWords = words.sortWith(_ < _)\n      \
    \  val result = sortedWords.mkString(\" \")\n        val blankSpaces = result.length\
    \ - result.trim().length\n        val blankSpace = \" \" * blankSpaces\n     \
    \   result + blankSpace\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7fa345x7.scala:22)\n\tat Problem.main(tmp7fa345x7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        var newString = \"\"\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        var l = s.length\n\
    \        while (i < l) {\n            if (s.charAt(i) == ' ') {\n            \
    \    newString += s.charAt(j)\n                j++\n            } else {\n   \
    \             newString += s.charAt(i)\n                i += 1\n            }\n\
    \        }\n        return newString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpi2qjk180.scala:22:19 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                j++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toChar).mkString\n            newChars\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdhlfpk21.scala:18:50 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnewChars\e[0m = sortedChars.map(\e\
    [36mc\e[0m => c.toChar).mkString\n\e[31m\e[31m   |\e[0m                      \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \              value toChar is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmpdhlfpk21.scala:18:57\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \     \e[33mval\e[0m \e[36mnewChars\e[0m = sortedChars.map(\e[36mc\e[0m => c.toChar).mkString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmpdhlfpk21.scala:20:10\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ })\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e[31m   |\e[0m          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m          where:    B is a\
    \ type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659800560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val sortedWords = words.sortBy(_.toString.toInt)\n\
    \        val newWords = sortedWords.map(word => word.takeWhile(_ <= ' ').mkString(\"\
    \") + word.dropWhile(_ <= ' ').mkString(\"\"))\n        val result = newWords.mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsroq0z1x.scala:21)\n\tat Problem.main(tmpsroq0z1x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val chars = words.map(_.toChar)\n        val charsSorted\
    \ = chars.sortWith(_ < _)\n        val charsSortedString = charsSorted.mkString(\"\
    \")\n        val wordsSorted = words.map(_.toUpperCase)\n        val wordsSortedString\
    \ = wordsSorted.mkString(\"\")\n        val result = charsSortedString + wordsSortedString\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6sybt4vm.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              value toChar is not a member of String\n\e[31m\e\
    [31m-- Error: /tmp/tmp6sybt4vm.scala:15:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                       where:    B\
    \ is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800561
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.mkString(\"\")\n            newChars\n        })\n        val\
    \ newString = newWords.mkString(\" \")\n        newString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val charsSorted = chars.sortWith(_ < _)\n            val charsSortedString\
    \ = charsSorted.mkString(\"\")\n            charsSortedString\n        })\n  \
    \      val newString = newWords.mkString(\" \")\n        newString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        var newString = \"\"\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        var l = s.length\n\
    \        while (i < l) {\n            while (j < l) {\n                if (s.charAt(i)\
    \ == s.charAt(j)) {\n                    newString += s.charAt(i)\n          \
    \          i += 1\n                    j += 1\n                } else {\n    \
    \                newString += s.charAt(j)\n                    j += 1\n      \
    \          }\n            }\n            i += 1\n        }\n        return newString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprddylux3.scala:36)\n\tat Problem.main(tmprddylux3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800566
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val sortedString\
    \ = sortedChars.mkString(\"\")\n            sortedString\n        })\n       \
    \ newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val sortedWords = words.sortWith((x, y) => x.toString.compareTo(y.toString))\n\
    \        val result = sortedWords.mkString(\" \")\n        result + \" \"\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7hmadxnl.scala:15:71\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msortedWords\e\
    [0m = words.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.toString.compareTo(y.toString))\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    Int\n\e[31m   |\e[0m                                                   Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(word => word.swapCase)\n        val sortedWords = words.sortWith(_.compareTo(_)\
    \ < 0)\n        val result = sortedWords.mkString(\" \")\n        result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjip2h2r4.scala:14:50 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = s.split(\e\
    [31m\" \"\e[0m).map(\e[36mword\e[0m => word.swapCase)\n\e[31m\e[31m   |\e[0m \
    \                                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value swapCase is not a member of String\n\e\
    [31m\e[31m-- Error: /tmp/tmpjip2h2r4.scala:14:59 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = s.split(\e\
    [31m\" \"\e[0m).map(\e[36mword\e[0m => word.swapCase)\n\e[31m\e[31m   |\e[0m \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                          No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.mkString\n            newChars\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val chars = words.map(_.toChar)\n        val charsSorted\
    \ = chars.sortWith(_ < _)\n        val charsSortedString = charsSorted.mkString(\"\
    \")\n        val wordsSorted = words.sortWith(_ < _)\n        val wordsSortedString\
    \ = wordsSorted.mkString(\"\")\n        val wordsSortedStringWithSpace = wordsSortedString.replace(\"\
    \ \", \"\")\n        val charsSortedStringWithSpace = charsSortedString.replace(\"\
    \ \", \"\")\n        val wordsSortedStringWithSpaceWithSpace = wordsSortedStringWithSpace.replace(\"\
    \ \", \"\")\n        val charsSortedStringWithSpaceWithSpace = charsSortedStringWithSpace.replace(\"\
    \ \", \"\")\n        val wordsSortedStringWithSpaceWithSpaceWithSpace = wordsSortedStringWithSpaceWithSpace.replace(\"\
    \ \", \"\")\n        val charsSortedStringWithSpaceWithSpaceWithSpace = charsSortedStringWithSpaceWithSpace.replace(\"\
    \ \", \"\")\n        val wordsSortedStringWithSpaceWithSpaceWithSpaceWithSpace\
    \ = wordsSortedStringWithSpaceWithSpaceWithSpace.replace(\" \", \"\")\n      \
    \  val charsSortedStringWithSpaceWithSpaceWithSpaceWithSpace = charsSortedStringWithSpaceWithSpaceWithSpace.replace(\"\
    \ \", \"\")\n        val wordsSortedStringWithSpaceWithSpaceWithSpaceWithSpace\
    \ = wordsSortedStringWithSpaceWithSpaceWithSpace.replace(\" \", \"\")\n      \
    \  val charsSortedStringWithSpaceWithSpaceWithSpaceWithSpace = charsSortedStringWithSpaceWithSpaceWithSpace.replace(\"\
    \ \", \"\")\n        val wordsSortedStringWithSpaceWithSpaceWithSpaceWithSpaceWithSpace\
    \ = wordsSortedStringWithSpaceWithSpaceWithSpace.replace(\" \", \"\")\n      \
    \  val charsSortedStringWithSpaceWithSpaceWithSpaceWithSpaceWithSpace = charsSortedStringWithSpaceWithSpaceWithSpace.replace(\"\
    \ \", \"\")\n        val wordsSortedStringWithSpaceWithSpaceWithSpaceWithSpaceWithSpace\
    \ = wordsSortedStringWithSpaceWithSpaceWithSpace.replace(\" \", \"\")\n      \
    \  val charsSortedStringWithSpaceWithSpaceWithSpaceWithSpaceWithSpace = charsSortedStringWithSpaceWithSpaceWithSpace.replace(\"\
    \ \", \"\")\n        val wordsSortedStringWithSpaceWithSpaceWithSpaceWithSpaceWithSpaceWithSpace\
    \ = wordsSortedStringWithSpaceWithSpaceWithSpace.replace(\" \", \"\")\n      \
    \  val charsSortedStringWithSpaceWithSpaceWithSpaceWithSpaceWithSpaceWithSpace\
    \ = charsSortedStringWithSpaceWithSpaceWithSpace.replace(\" \", \"\")\n      \
    \  val wordsSortedStringWithSpaceWithSpaceWithSpaceWithSpaceWithSpaceWithSpaceWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgbdh3unj.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgbdh3unj.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mwordsSortedStringWithSpaceWithSpaceWithSpaceWithSpace\e[0m = wordsSortedStringWithSpaceWithSpaceWithSpace.replace(\e\
    [31m\" \"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsSortedStringWithSpaceWithSpaceWithSpaceWithSpace is already\
    \ defined as \e[33mvalue\e[0m \e[35mwordsSortedStringWithSpaceWithSpaceWithSpaceWithSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbdh3unj.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mcharsSortedStringWithSpaceWithSpaceWithSpaceWithSpace\e\
    [0m = charsSortedStringWithSpaceWithSpaceWithSpace.replace(\e[31m\" \"\e[0m, \e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcharsSortedStringWithSpaceWithSpaceWithSpaceWithSpace is already\
    \ defined as \e[33mvalue\e[0m \e[35mcharsSortedStringWithSpaceWithSpaceWithSpaceWithSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbdh3unj.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mwordsSortedStringWithSpaceWithSpaceWithSpaceWithSpaceWithSpace\e\
    [0m = wordsSortedStringWithSpaceWithSpaceWithSpace.replace(\e[31m\" \"\e[0m, \e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toInt)\n            val newWord = sortedChars.mkString(\"\
    \")\n            newWord\n        })\n        newWords.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpyoomz5g4.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpyoomz5g4.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpyoomz5g4.scala:21)\n\
    \tat Problem$.main(tmpyoomz5g4.scala:25)\n\tat Problem.main(tmpyoomz5g4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(word => word.trim).filter(word => !word.isEmpty)\n        val sortedWords\
    \ = words.sortWith((x, y) => x.toString.compareToIgnoreCase(y.toString))\n   \
    \     val newWords = sortedWords.map(word => word.map(c => c.toString.toInt).map(c\
    \ => c.toString.toChar).map(c => c.toString.toInt).map(c => c.toString.toChar).map(c\
    \ => c.toString.toInt).map(c => c.toString.toChar).map(c => c.toString.toInt).map(c\
    \ => c.toString.toChar).map(c => c.toString.toInt).map(c => c.toString.toChar).map(c\
    \ => c.toString.toInt).map(c => c.toString.toChar).map(c => c.toString.toInt).map(c\
    \ => c.toString.toChar).map(c => c.toString.toInt).map(c => c.toString.toChar).map(c\
    \ => c.toString.toInt).map(c => c.toString.toChar).map(c => c.toString.toInt).map(c\
    \ => c.toString.toChar).map(c => c.toString.toInt).map(c => c.toString.toChar).map(c\
    \ => c.toString.toInt).map(c => c.toString.toChar).map(c => c.toString.toInt).map(c\
    \ => c.toString.toChar).map(c => c.toString.toInt).map(c => c.toString.toChar).map(c\
    \ => c.toString.toInt).map(c => c.toString.toChar).map(c => c.toString.toInt).map(c\
    \ => c.toString.toChar).map(c => c.toString.toInt).map(c => c.toString.toChar).map(c\
    \ => c.toString.toInt).map(c => c.toString.toChar).map(c => c.toString.toInt).map(c\
    \ => c.toString.toChar).map(c => c.toString.toInt).map(c => c.toString.toChar).map(c\
    \ => c.toString.toInt).map(c => c.toString.toChar).map(c => c.toString.toInt).map(c\
    \ => c.toString.toChar).map(c => c.toString.toInt).map(c => c.toString.toChar).map(c\
    \ => c.toString.toInt).map(c => c.toString.toChar).map(c => c.toString.toInt).map(c\
    \ => c.toString.toChar).map(c => c.to\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyurc3pcm.scala:17:4 ----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyurc3pcm.scala:15:81 --------------------\e[0m\e[0m\n\e[31m15 |\e[0m\
    \        \e[33mval\e[0m \e[36msortedWords\e[0m = words.sortWith((\e[36mx\e[0m,\
    \ \e[36my\e[0m) => x.toString.compareToIgnoreCase(y.toString))\n\e[31m\e[31m \
    \  |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    Int\n\e[31m   |\e[0m                                                   Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyurc3pcm.scala:16:99\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mnewWords\e[0m = sortedWords.map(\e[36mword\e[0m => word.map(\e[36mc\e[0m =>\
    \ c.toString.toInt).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m =>\
    \ c.toString.toInt).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m =>\
    \ c.toString.toInt).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m =>\
    \ c.toString.toInt).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m =>\
    \ c.toString.toInt).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m =>\
    \ c.toString.toInt).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m =>\
    \ c.toString.toInt).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m =>\
    \ c.toString.toInt).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m =>\
    \ c.toString.toInt).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m =>\
    \ c.toString.toInt).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m =>\
    \ c.toString.toInt).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m =>\
    \ c.toString.toInt).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m =>\
    \ c.toString.toInt).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m =>\
    \ c.toString.toInt).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m =>\
    \ c.toString.toInt).m"
  stdout: ''
  timestamp: 1659800575
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        var result = \"\"\n     \
    \   var i = 0\n        var j = 0\n        var k = 0\n        var l = s.length\n\
    \        while (i < l) {\n            while (j < l) {\n                if (s.charAt(i)\
    \ == s.charAt(j)) {\n                    result += s.charAt(i)\n             \
    \       i += 1\n                    j += 1\n                } else {\n       \
    \             result += s.charAt(j)\n                    j += 1\n            \
    \    }\n            }\n            i += 1\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbtzhwj5a.scala:36)\n\tat Problem.main(tmpbtzhwj5a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val sortedWords = words.sortWith(_.compareTo(_)\
    \ < 0)\n        val newWords = sortedWords.map(word => word.map(c => (c.toInt,\
    \ c)).toMap).flatten.toList\n        val newString = newWords.mkString(\" \")\n\
    \        newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk6hrj5ik.scala:21)\n\tat Problem.main(tmpk6hrj5ik.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800573
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val sortedWords = words.sortWith(_.compareTo(_)\
    \ < 0)\n        val result = sortedWords.mkString(\" \")\n        result + (if\
    \ (result.isEmpty) \"\" else \" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbtfuvlaj.scala:20)\n\tat Problem.main(tmpbtfuvlaj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800573
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val sortedWords = words.sortWith(_ < _)\n\
    \        val result = sortedWords.mkString(\" \")\n        result + \" \"\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfutcv08f.scala:20)\n\tat Problem.main(tmpfutcv08f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(word => word.split(\"\"))\n        val newWords = words.map(word => word.map(c\
    \ => c.toInt).sortWith(_ < _))\n        val newString = newWords.map(word => word.mkString(\"\
    \")).mkString(\" \")\n        newString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$2$$anonfun$1(tmpz6eujzb3.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpz6eujzb3.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpz6eujzb3.scala:15)\n\
    \tat Problem$.main(tmpz6eujzb3.scala:20)\n\tat Problem.main(tmpz6eujzb3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val sortedWords = words.sortWith(_.compareTo(_) < 0)\n        val newWords\
    \ = sortedWords.map(word => word.map(c => c.toInt).map(c => c.toChar).map(c =>\
    \ c.toString.toInt).map(c => c.toChar).map(c => c.toString.toChar).map(c => c.toString.toChar).map(c\
    \ => c.toString.toChar).map(c => c.toString.toChar).map(c => c.toString.toChar).map(c\
    \ => c.toString.toChar).map(c => c.toString.toChar).map(c => c.toString.toChar).map(c\
    \ => c.toString.toChar).map(c => c.toString.toChar).map(c => c.toString.toChar).map(c\
    \ => c.toString.toChar).map(c => c.toString.toChar).map(c => c.toString.toChar).map(c\
    \ => c.toString.toChar).map(c => c.toString.toChar).map(c => c.toString.toChar).map(c\
    \ => c.toString.toChar).map(c => c.toString.toChar).map(c => c.toString.toChar).map(c\
    \ => c.toString.toChar).map(c => c.toString.toChar).map(c => c.toString.toChar).map(c\
    \ => c.toString.toChar).map(c => c.toString.toChar).map(c => c.toString.toChar).map(c\
    \ => c.toString.toChar).map(c => c.toString.toChar).map(c => c.toString.toChar).map(c\
    \ => c.toString.toChar).map(c => c.toString.toChar).map(c => c.toString.toChar).map(c\
    \ => c.toString.toChar).map(c => c.toString.toChar).map(c => c.toString.toChar).map(c\
    \ => c.toString.toChar).map(c => c.toString.toChar).map(c => c.toString.toChar).map(c\
    \ => c.toString.toChar).map(c => c.toString.toChar).map(c => c.toString.toChar).map(c\
    \ => c.toString.toChar).map(c => c.toString.toChar).map(c => c.toString.toChar).map(c\
    \ => c.toString.toChar).map(c => c.toString.toChar).map(c => c.toString.toChar).map(c\
    \ => c.toString.toChar).map(c => c.toString.toChar).map(c => c.toString.to\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbivzzthv.scala:17:4 ----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbivzzthv.scala:16:155\
    \ -----------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mnewWords\e[0m = sortedWords.map(\e[36mword\e[0m => word.map(\e[36mc\e[0m =>\
    \ c.toInt).map(\e[36mc\e[0m => c.toChar).map(\e[36mc\e[0m => c.toString.toInt).map(\e\
    [36mc\e[0m => c.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.toChar).map(\e[36mc\e[0m => c.toString.toChar).map(\e[36mc\e[0m\
    \ => c.toString.t"
  stdout: ''
  timestamp: 1659800578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val result = words.foldLeft(\"\")( (acc,\
    \ word) => acc + (word.foldLeft(\"\")( (acc, c) => acc + c.toAscii).reverse))\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppm52goem.scala:15:102 -----------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = words.foldLeft(\e\
    [31m\"\"\e[0m)( (\e[36macc\e[0m, \e[36mword\e[0m) => acc + (word.foldLeft(\e[31m\"\
    \"\e[0m)( (\e[36macc\e[0m, \e[36mc\e[0m) => acc + c.toAscii).reverse))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                          value toAscii is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val sortedWords = words.sortWith(_ < _)\n        val result = sortedWords.mkString(\"\
    \ \")\n        result + \" \"\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0b1zl7by.scala:20)\n\tat Problem.main(tmp0b1zl7by.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(x => x.replaceAll(\"\\\\p{L}\", \"a\"))\n\
    \        val newWordsString = newWords.mkString(\" \")\n        newWordsString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp26fsk9ds.scala:20)\n\tat Problem.main(tmp26fsk9ds.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val charsSorted = chars.sortWith(_ > _)\n            val charsSortedString\
    \ = charsSorted.mkString(\"\")\n            charsSortedString\n        })\n  \
    \      newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2_remm_r.scala:24)\n\tat Problem.main(tmp2_remm_r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        var newString = \"\"\n  \
    \      var newStringArray = s.split(\" \")\n        var newStringArray2 = newStringArray.map(x\
    \ => x.toUpperCase)\n        var newStringArray3 = newStringArray2.map(x => x.toChar)\n\
    \        var newStringArray4 = newStringArray3.map(x => x.toInt)\n        var\
    \ newStringArray5 = newStringArray4.map(x => x.toInt)\n        var newStringArray6\
    \ = newStringArray5.map(x => x.toInt)\n        var newStringArray7 = newStringArray6.map(x\
    \ => x.toInt)\n        var newStringArray8 = newStringArray7.map(x => x.toInt)\n\
    \        var newStringArray9 = newStringArray8.map(x => x.toInt)\n        var\
    \ newStringArray10 = newStringArray9.map(x => x.toInt)\n        var newStringArray11\
    \ = newStringArray10.map(x => x.toInt)\n        var newStringArray12 = newStringArray11.map(x\
    \ => x.toInt)\n        var newStringArray13 = newStringArray12.map(x => x.toInt)\n\
    \        var newStringArray14 = newStringArray13.map(x => x.toInt)\n        var\
    \ newStringArray15 = newStringArray14.map(x => x.toInt)\n        var newStringArray16\
    \ = newStringArray15.map(x => x.toInt)\n        var newStringArray17 = newStringArray16.map(x\
    \ => x.toInt)\n        var newStringArray18 = newStringArray17.map(x => x.toInt)\n\
    \        var newStringArray19 = newStringArray18.map(x => x.toInt)\n        var\
    \ newStringArray20 = newStringArray19.map(x => x.toInt)\n        var newStringArray21\
    \ = newStringArray20.map(x => x.toInt)\n        var newStringArray22 = newStringArray21.map(x\
    \ => x.toInt)\n        var newStringArray23 = newStringArray22.map(x => x.toInt)\n\
    \        var newStringArray24 = newStringArray23.map(x => x.toInt)\n        var\
    \ newStringArray25 = newStringArray24.map(x => x.toInt)\n        var newStringArray26\
    \ = newStringArray25.map(x => x.toInt)\n        var newStringArray27 = newStringArray26.map(x\
    \ => x.toInt)\n        var newStringArray28 = newStringArray27.map(x => x.toInt)\n\
    \        var newStringArray29 = newStringArray28.map(x => x.toInt)\n        var\
    \ newStringArray30 = newStringArray29.map(x => x.toInt)\n        var newStringArray31\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpiz_i0os7.scala:45:30 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mvar\e[0m \e[36mnewStringArray31\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m\
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiz_i0os7.scala:17:57\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e\
    [36mnewStringArray3\e[0m = newStringArray2.map(\e[36mx\e[0m => x.toChar)\n\e[31m\e\
    [31m   |\e[0m                                                       ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmpiz_i0os7.scala:17:64 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mnewStringArray3\e[0m = newStringArray2.map(\e\
    [36mx\e[0m => x.toChar)\n\e[31m\e[31m   |\e[0m                               \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                      No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiz_i0os7.scala:46:5 ---------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659800572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(x => x.replaceAll(\"\\\\W\", \"\"))\n    \
    \    val sortedWords = newWords.sortWith(_ < _)\n        val newString = sortedWords.mkString(\"\
    \ \")\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprqyikbw6.scala:22)\n\tat Problem.main(tmprqyikbw6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800573
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val sortedWords = words.sortWith(_ < _)\n      \
    \  val sortedString = sortedWords.mkString(\" \")\n        sortedString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfy80g15i.scala:20)\n\tat Problem.main(tmpfy80g15i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800573
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val newWords = words.map(word => {\n           \
    \ val chars = word.split(\"\").map(_.toUpperCase)\n            val charsSorted\
    \ = chars.sortWith(_ < _)\n            charsSorted.mkString(\"\")\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoya8wf7d.scala:23)\n\tat Problem.main(tmpoya8wf7d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800574
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val newWords = words.map(word => {\n           \
    \ val chars = word.split(\"\").map(_.toUpperCase)\n            val sortedChars\
    \ = chars.sortBy(_.toInt)\n            sortedChars.mkString(\"\")\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"I\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$4(tmpg9chlin4.scala:17)\n\
    \tat scala.math.Ordering$$anon$1.compare(Ordering.scala:141)\n\tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)\n\
    \tat java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1233)\n\
    \tat scala.collection.ArrayOps$.sorted$extension(ArrayOps.scala:597)\n\tat scala.collection.ArrayOps$.sortBy$extension(ArrayOps.scala:646)\n\
    \tat Problem$.$anonfun$2(tmpg9chlin4.scala:17)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.antiShuffle(tmpg9chlin4.scala:19)\n\tat Problem$.main(tmpg9chlin4.scala:23)\n\
    \tat Problem.main(tmpg9chlin4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner"
  stdout: ''
  timestamp: 1659800575
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").map(_.toInt)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\")\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmprh_g66sm.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmprh_g66sm.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmprh_g66sm.scala:19)\n\
    \tat Problem$.main(tmprh_g66sm.scala:23)\n\tat Problem.main(tmprh_g66sm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").toList\n            val sortedChars = chars.sortBy(_.toInt)\n\
    \            val newChars = sortedChars.map(c => c.toChar).mkString\n        \
    \    newChars\n        }).toList\n        val newString = newWords.mkString(\"\
    \ \")\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4quvc6yl.scala:18:50 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnewChars\e[0m = sortedChars.map(\e\
    [36mc\e[0m => c.toChar).mkString\n\e[31m\e[31m   |\e[0m                      \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \              value toChar is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659800578
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val sortedWords = words.sortWith(_ < _)\n      \
    \  val result = sortedWords.mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp40_q6_0n.scala:20)\n\tat Problem.main(tmp40_q6_0n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.mkString\n            newChars\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.mkString\n            newChars\n        })\n        val newString\
    \ = newWords.mkString(\" \")\n        newString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase)\n        val newWords = words.map(word => {\n           \
    \ val chars = word.split(\"\").map(_.toInt)\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => if (c == 0) '!' else c.toString)\n\
    \            val newWord = newChars.mkString(\"\")\n            newWord\n    \
    \    })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmp09i9y5nh.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmp09i9y5nh.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmp09i9y5nh.scala:21)\n\
    \tat Problem$.main(tmp09i9y5nh.scala:25)\n\tat Problem.main(tmp09i9y5nh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toString.toInt).mkString(\"\")\n            val newWord\
    \ = newChars.mkString(\"\")\n            newWord\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmp231j1msj.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmp231j1msj.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmp231j1msj.scala:21)\n\
    \tat Problem$.main(tmp231j1msj.scala:25)\n\tat Problem.main(tmp231j1msj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val sortedWords = words.sortWith(_ < _)\n      \
    \  val result = sortedWords.mkString(\" \")\n        val blankSpaces = s.replaceAll(\"\
    \\\\s+\", \" \")\n        val blankSpaceWords = blankSpaces.split(\" \").map(_.toUpperCase)\n\
    \        val sortedBlankSpaceWords = blankSpaceWords.sortWith(_ < _)\n       \
    \ val blankSpaceWordsResult = sortedBlankSpaceWords.mkString(\" \")\n        val\
    \ result = result + blankSpaceWordsResult\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqcdme1he.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result + blankSpaceWordsResult\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659800579
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").map(_.toInt)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\")\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmprh_g66sm.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmprh_g66sm.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmprh_g66sm.scala:19)\n\
    \tat Problem$.main(tmprh_g66sm.scala:23)\n\tat Problem.main(tmprh_g66sm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase)\n        val chars = words.map(_.toChar)\n        val charsSorted\
    \ = chars.sortWith((a, b) => a.compareTo(b) < 0)\n        val charsSortedString\
    \ = charsSorted.mkString(\"\")\n        val wordsSortedString = words.mkString(\"\
    \")\n        val result = charsSortedString + wordsSortedString\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8wm39bh9.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              value toChar is not a member of String\n\e[31m\e\
    [31m-- Error: /tmp/tmp8wm39bh9.scala:15:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                       where:    B\
    \ is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        var newString = \"\"\n  \
    \      var i = 0\n        while (i < s.length()) {\n            var j = i + 1\n\
    \            while (j < s.length()) {\n                if (s(i) > s(j)) {\n  \
    \                  newString += s(j)\n                    j++\n              \
    \  } else {\n                    newString += s(i)\n                    i++\n\
    \                }\n            }\n            newString += s(i)\n           \
    \ i += 1\n        }\n        newString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpy13eok_7.scala:21:23 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    j++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpy13eok_7.scala:24:23 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                    i++\n\e[31m\e[31m   |\e[0m                       ^\e\
    [0m\n\e[31m   |\e[0m                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800578
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val charsSorted = chars.sortWith(_ < _)\n            charsSorted.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800546
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val sortedWords = words.sortBy(_.toString.toInt)\n\
    \        val newWords = sortedWords.map(word => word + word.charAt(0))\n     \
    \   val newString = newWords.mkString(\" \")\n        newString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpai4sjn2y.scala:21)\n\tat Problem.main(tmpai4sjn2y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(x => x.replaceAll(\"[^a-zA-Z]\", \"\").toLowerCase)\n\
    \        val sortedWords = newWords.sortWith((x, y) => x.compareTo(y))\n     \
    \   val newString = sortedWords.mkString(\" \")\n        newString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqxofn4ab.scala:16:65\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msortedWords\e\
    [0m = newWords.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e\
    [31m   |\e[0m                                                      ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                      Found:\
    \    Int\n\e[31m   |\e[0m                                                    \
    \  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.mkString(\"\")\n            newChars\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800547
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toInt).mkString\n            newChars\n        }).mkString(\"\
    \ \")\n        newWords\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpjfybpobt.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpjfybpobt.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpjfybpobt.scala:20)\n\
    \tat Problem$.main(tmpjfybpobt.scala:24)\n\tat Problem.main(tmpjfybpobt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800585
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").map(_.toInt)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            val newChars = sortedChars.map(c => if\
    \ (c == 0) 'z' else if (c == 26) 'a' else 'a' + c - 26).mkString\n           \
    \ val newWord = newChars + word.substring(word.length)\n            newWord\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmplh4ilo6x.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmplh4ilo6x.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmplh4ilo6x.scala:21)\n\
    \tat Problem$.main(tmplh4ilo6x.scala:25)\n\tat Problem.main(tmplh4ilo6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").map(_.toInt)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            sortedChars.map(_.toString).mkString(\"\
    \")\n        }).toList\n        newWords.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpcl1uu3w0.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpcl1uu3w0.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpcl1uu3w0.scala:19)\n\
    \tat Problem$.main(tmpcl1uu3w0.scala:23)\n\tat Problem.main(tmpcl1uu3w0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toString.toInt).mkString(\"\")\n            newChars\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpuul3v9cv.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpuul3v9cv.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpuul3v9cv.scala:20)\n\
    \tat Problem$.main(tmpuul3v9cv.scala:24)\n\tat Problem.main(tmpuul3v9cv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val chars = words.map(_.toChar).toList\n\
    \        val charsSorted = chars.sortWith(_ < _)\n        val charsSortedString\
    \ = charsSorted.mkString(\"\")\n        val wordsSorted = words.sortWith(_ < _)\n\
    \        val wordsSortedString = wordsSorted.mkString(\"\")\n        val result\
    \ = charsSortedString + wordsSortedString\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfs3ij5ex.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar).toList\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              value toChar is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpfs3ij5ex.scala:16:43 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcharsSorted\e[0m = chars.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                                         ^^^\e[0m\n\
    \e[31m   |\e[0mvalue < is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\
    \e[31m   |\e[0m  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659800585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val sortedWords = words.sortWith(_.compareTo(_)\
    \ < 0)\n        val newWords = sortedWords.map(word => word.zipWithIndex.map(_.swap))\n\
    \        val newString = newWords.map(word => word.mkString(\"\"))\n        newString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3yonc1o0.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        newString\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (newString\
    \ : Array[String])\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        var newString = \"\"\n  \
    \      var word = \"\"\n        var newWord = \"\"\n        var char = \"\"\n\
    \        var newChar = \"\"\n        var i = 0\n        var j = 0\n        var\
    \ k = 0\n        var count = 0\n        var lastChar = \"\"\n        var lastWord\
    \ = \"\"\n        var lastCount = -1\n        var lastCharCount = 0\n        var\
    \ lastWordCount = 0\n        var lastCharWordCount = 0\n        var lastWordCharCount\
    \ = 0\n        var lastCharWordWordCount = 0\n        var lastWordCharWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWordWordWordCount = 0\n        var lastWordCharWordWordCount\
    \ = 0\n        var lastCharWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqn83ct4o.scala:79:4 ----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqn83ct4o.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mlastCharWordWordWordCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlastCharWordWordWordCount\
    \ is already defined as \e[33mvariable\e[0m \e[35mlastCharWordWordWordCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqn83ct4o.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mvar\e[0m \e[36mlastWordCharWordWordCount\e[0m = \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mlastWordCharWordWordCount is already defined as \e[33mvariable\e\
    [0m \e[35mlastWordCharWordWordCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqn83ct4o.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mvar\e[0m \e[36mlastCharWordWordWordCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharWordWordWordCount is already defined as \e[33mvariable\e\
    [0m \e[35mlastCharWordWordWordCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqn83ct4o.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mvar\e[0m \e[36mlastWordCharWordWordCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastWordCharWordWordCount is already defined as \e[33mvariable\e\
    [0m \e[35mlastWordCharWordWordCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be"
  stdout: ''
  timestamp: 1659800583
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(x => x.replaceAll(\"\\\\W\", \"\"))\n    \
    \    val sortedWords = newWords.sortWith(_ > _)\n        val newString = sortedWords.mkString(\"\
    \ \")\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx77ss4nb.scala:22)\n\tat Problem.main(tmpx77ss4nb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toInt)\n            val newWord = newChars.mkString(\"\
    \")\n            newWord\n        })\n        newWords.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpshs16hb7.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpshs16hb7.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpshs16hb7.scala:21)\n\
    \tat Problem$.main(tmpshs16hb7.scala:25)\n\tat Problem.main(tmpshs16hb7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800558
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").map(_.toInt)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            sortedChars.map(_.toString).mkString(\"\
    \")\n        }).sortWith(_ < _)\n        newWords.mkString(\" \")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmp1_ztv2mn.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmp1_ztv2mn.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmp1_ztv2mn.scala:19)\n\
    \tat Problem$.main(tmp1_ztv2mn.scala:23)\n\tat Problem.main(tmp1_ztv2mn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800587
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toString.toInt).mkString(\"\")\n            newChars\n\
    \        }).mkString(\" \")\n        newWords\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpol71te9y.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpol71te9y.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpol71te9y.scala:20)\n\
    \tat Problem$.main(tmpol71te9y.scala:24)\n\tat Problem.main(tmpol71te9y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val sortedWords = words.sortWith(_ < _)\n      \
    \  val result = sortedWords.mkString(\" \")\n        val blankSpaces = result.length\
    \ - result.split(\" \").length\n        val blankSpaceString = \" \" * blankSpaces\n\
    \        result + blankSpaceString\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7r73tdvx.scala:22)\n\tat Problem.main(tmp7r73tdvx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.mkString(\"\")\n            newChars\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800547
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase)\n        val sortedWords = words.sortWith(_ > _)\n      \
    \  val newWords = sortedWords.map(word => word.zipWithIndex.map { case (letter,\
    \ i) => letter + i })\n        val newString = newWords.mkString(\" \")\n    \
    \    newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9enkncdu.scala:21)\n\tat Problem.main(tmp9enkncdu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val chars = words.map(_.toChar).toList\n\
    \        val charsSorted = chars.sortBy(_.toInt)\n        val newWord = charsSorted.mkString(\"\
    \")\n        val newWordList = newWord.split(\"\").toList\n        val newWordSorted\
    \ = newWordList.sortBy(_.toInt)\n        newWordSorted.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjr5k_cjq.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar).toList\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              value toChar is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpjr5k_cjq.scala:16:41 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcharsSorted\e[0m = chars.sortBy(_.toInt)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue toInt is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\
    \e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- Error: /tmp/tmpjr5k_cjq.scala:16:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcharsSorted\e[0m = chars.sortBy(_.toInt)\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mInt\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659800587
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toInt).mkString\n            newChars\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmp0fijwn0r.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmp0fijwn0r.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmp0fijwn0r.scala:20)\n\
    \tat Problem$.main(tmp0fijwn0r.scala:24)\n\tat Problem.main(tmp0fijwn0r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.mkString(\"\")\n            newChars\n        })\n        val\
    \ newString = newWords.mkString(\" \")\n        newString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").map(_.toInt)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\")\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmprh_g66sm.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmprh_g66sm.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmprh_g66sm.scala:19)\n\
    \tat Problem$.main(tmprh_g66sm.scala:23)\n\tat Problem.main(tmprh_g66sm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.mkString(\"\")\n            newChars\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val sortedWords = words.sortWith((x, y) =>\
    \ x.compareTo(y))\n        val result = sortedWords.mkString(\" \")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpknaqvx_i.scala:15:62\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msortedWords\e\
    [0m = words.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e\
    [31m   |\e[0m                                                   ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    Int\n\e[31m   |\e[0m                                                   Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val sortedWords = words.sortBy(_.toString.toInt)\n\
    \        val newWords = sortedWords.map(w => w.reverse).mkString(\" \")\n    \
    \    newWords\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplzty4mex.scala:20)\n\tat Problem.main(tmplzty4mex.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newWord\
    \ = sortedChars.mkString(\"\")\n            newWord\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val sortedWords = words.sortWith(_ > _)\n      \
    \  val newWords = sortedWords.map(_.toChar).mkString(\"\")\n        val newString\
    \ = newWords.reverse\n        newString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphsq8ubaf.scala:16:41 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewWords\e[0m = sortedWords.map(_.toChar).mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmphsq8ubaf.scala:16:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewWords\e[0m = sortedWords.map(_.toChar).mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                        \
    \        ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase)\n        val sortedWords = words.sortWith(_ < _)\n      \
    \  val result = sortedWords.mkString(\" \")\n        val blankSpaces = result.count(_\
    \ == \" \")\n        val blankSpace = if (blankSpaces == 0) \"\" else \" \"\n\
    \        result + blankSpace\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnmb1x98k.scala:17:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mblankSpaces\e[0m = result.count(_\
    \ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \       ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659800533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase)\n        val sortedWords = words.sorted\n        val newWords\
    \ = sortedWords.map(word => word.zip(words.map(_.toString.toInt)).map(_._2).mkString(\"\
    \"))\n        val newString = newWords.mkString(\" \")\n        newString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"hi\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$2$$anonfun$1(tmpgw4nn_n_.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpgw4nn_n_.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpgw4nn_n_.scala:16)\n\
    \tat Problem$.main(tmpgw4nn_n_.scala:21)\n\tat Problem.main(tmpgw4nn_n_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(x => x.toUpperCase).sorted\n        val newString\
    \ = newWords.mkString(\" \")\n        newString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcmo1iani.scala:20)\n\tat Problem.main(tmpcmo1iani.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase)\n        val newWords = words.map(w => {\n            val\
    \ chars = w.toCharArray\n            val charArray = chars.sortWith(_ < _)\n \
    \           val charArrayString = charArray.toString\n            charArrayString.reverse\n\
    \        }).mkString(\" \")\n        newWords\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7byw7sgx.scala:24)\n\tat Problem.main(tmp7byw7sgx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.mkString\n            newChars\n        })\n        val newString\
    \ = newWords.mkString(\" \")\n        newString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        var newString = \"\"\n  \
    \      var i = 0\n        while (i < s.length){\n            var j = 0\n     \
    \       while (j < s.length){\n                if (s.charAt(i) == s.charAt(j)){\n\
    \                    newString += s.charAt(i)\n                    i += 1\n  \
    \                  j += 1\n                }\n                else{\n        \
    \            newString += s.charAt(j)\n                    j += 1\n          \
    \      }\n            }\n            newString += s.charAt(i)\n            i +=\
    \ 1\n        }\n        return newString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 2\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.antiShuffle(tmpnih1v0ca.scala:29)\n\tat Problem$.main(tmpnih1v0ca.scala:35)\n\
    \tat Problem.main(tmpnih1v0ca.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        var newString = \"\"\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        var tempString\
    \ = \"\"\n        var tempString2 = \"\"\n        var tempString3 = \"\"\n   \
    \     var tempString4 = \"\"\n        var tempString5 = \"\"\n        var tempString6\
    \ = \"\"\n        var tempString7 = \"\"\n        var tempString8 = \"\"\n   \
    \     var tempString9 = \"\"\n        var tempString10 = \"\"\n        var tempString11\
    \ = \"\"\n        var tempString12 = \"\"\n        var tempString13 = \"\"\n \
    \       var tempString14 = \"\"\n        var tempString15 = \"\"\n        var\
    \ tempString16 = \"\"\n        var tempString17 = \"\"\n        var tempString18\
    \ = \"\"\n        var tempString19 = \"\"\n        var tempString20 = \"\"\n \
    \       var tempString21 = \"\"\n        var tempString22 = \"\"\n        var\
    \ tempString23 = \"\"\n        var tempString24 = \"\"\n        var tempString25\
    \ = \"\"\n        var tempString26 = \"\"\n        var tempString27 = \"\"\n \
    \       var tempString28 = \"\"\n        var tempString29 = \"\"\n        var\
    \ tempString30 = \"\"\n        var tempString31 = \"\"\n        var tempString32\
    \ = \"\"\n        var tempString33 = \"\"\n        var tempString34 = \"\"\n \
    \       var tempString35 = \"\"\n        var tempString36 = \"\"\n        var\
    \ tempString37 = \"\"\n        var tempString38 = \"\"\n        var tempString39\
    \ = \"\"\n        var tempString40 = \"\"\n        var tempString41 = \"\"\n \
    \       var tempString42 = \"\"\n        var tempString43 = \"\"\n        var\
    \ tempString44 = \"\"\n        var tempString45 = \"\"\n        var tempString46\
    \ = \"\"\n        var tempString47 = \"\"\n        var tempString48 = \"\"\n \
    \       var tempString49 = \"\"\n        var tempString50 = \"\"\n        var\
    \ tempString51 = \"\"\n        var tempString52 = \"\"\n        var tempString53\
    \ = \"\"\n        var tempString54 = \"\"\n        var tempString55 = \"\"\n \
    \       var tempString56 = \"\"\n        var tempString57 = \"\"\n        var\
    \ tempString58 = \"\"\n        var tempString59 = \"\"\n        var tempString60\
    \ = \"\"\n        var tempString61 = \"\"\n        var tempString62 = \"\"\n \
    \       var tempString63 = \"\"\n        var tempString64 = \"\"\n        var\
    \ tempString65 = \"\"\n        var tempString66 = \"\"\n        var tempString67\
    \ = \"\"\n        var tempString68 = \"\"\n        var tempString69 = \"\"\n \
    \       var tempString70 = \"\"\n        var tempString71 = \"\"\n        var\
    \ tempString72 = \"\"\n        var tempString73 = \"\"\n        var tempString74\
    \ = \"\"\n        var tempString75 = \"\"\n        var tempString76 = \"\"\n \
    \       var tempString77 = \"\"\n        var tempString78 = \"\"\n        var\
    \ tempString79 = \"\"\n        var tempString80 = \"\"\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprz56gaew.scala:99:5\
    \ ---------------------\e[0m\e[0m\n\e[31m99 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800555
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val newWords = words.map(word => {\n           \
    \ val chars = word.split(\"\").map(_.toUpperCase)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\")\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp618445s9.scala:23)\n\tat Problem.main(tmp618445s9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val newWords = words.map(word => {\n           \
    \ val chars = word.split(\"\").map(c => c.toInt)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            val newChars = sortedChars.map(c => c.toChar)\n\
    \            val newWord = newChars.mkString(\"\")\n            newWord\n    \
    \    })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpag6gd973.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpag6gd973.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpag6gd973.scala:21)\n\
    \tat Problem$.main(tmpag6gd973.scala:25)\n\tat Problem.main(tmpag6gd973.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val charsSorted = chars.sortWith(_ < _)\n            charsSorted.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800546
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val sortedWords = words.sortWith(_ < _)\n      \
    \  val result = sortedWords.mkString(\" \")\n        result + \" \"\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5m21g0ho.scala:20)\n\tat Problem.main(tmp5m21g0ho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val sortedWords = words.sorted\n        val newWords\
    \ = sortedWords.map(w => w.replaceAll(\"[^a-zA-Z]\", \"\"))\n        val newString\
    \ = newWords.mkString(\" \")\n        newString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7nbv1kf6.scala:21)\n\tat Problem.main(tmp7nbv1kf6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val sortedWords = words.sortWith(_.compareTo(_) < 0)\n        val result\
    \ = sortedWords.mkString(\" \")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn981py_3.scala:21)\n\tat Problem.main(tmpn981py_3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        var newString = \"\"\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        var l = s.length()\n\
    \        while (i < l) {\n            if (s.charAt(i) == ' ') {\n            \
    \    newString += s.charAt(j)\n                j = j + 1\n                k =\
    \ k + 1\n            }\n            else {\n                newString += s.charAt(i)\n\
    \                i = i + 1\n                j = j + 1\n                k = k +\
    \ 1\n            }\n        }\n        return newString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6hos_cmw.scala:36)\n\tat Problem.main(tmp6hos_cmw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").toList\n            val sortedChars = chars.sortBy(_.toInt)\n\
    \            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"i\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmp9tlqvwef.scala:17)\n\
    \tat scala.math.Ordering$$anon$1.compare(Ordering.scala:141)\n\tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)\n\
    \tat java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1233)\n\
    \tat scala.collection.SeqOps.sorted(Seq.scala:700)\n\tat scala.collection.SeqOps.sorted$(Seq.scala:692)\n\
    \tat scala.collection.immutable.List.scala$collection$immutable$StrictOptimizedSeqOps$$super$sorted(List.scala:79)\n\
    \tat scala.collection.immutable.StrictOptimizedSeqOps.sorted(StrictOptimizedSeqOps.scala:78)\n\
    \tat scala.collection.immutable.StrictOptimizedSeqOps.sorted$(StrictOptimizedSeqOps.scala:78)\n\
    \tat scala.collection.immutable.List.sorted(List.scala:79)\n\tat scala.collection.SeqOps.sortBy(Seq.scala:754)\n\
    \tat scala.collection.SeqOps.sortBy$(Seq.scala:754)\n\tat scala.collection.AbstractSeq.sortBy(Seq.scala:1161)\n\
    \tat Problem$.$anonfun$2(tmp9tlqvwef.scala:17)\n\tat scala.collection.immutable.List.map(List.scala:246)\n\
    \tat Problem$.antiShuffle(tmp9tlqvwef.scala:19)\n\tat Problem$.main(tmp9tlqvwef.scala:23)\n\
    \tat Problem.main(tmp9tlqvwef.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner"
  stdout: ''
  timestamp: 1659800593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val sortedChars = chars.sortWith(_ < _)\n            val newChars\
    \ = sortedChars.map(c => c.toInt).mkString(\"\")\n            newChars\n     \
    \   })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpal4m3o8_.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpal4m3o8_.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpal4m3o8_.scala:20)\n\
    \tat Problem$.main(tmpal4m3o8_.scala:24)\n\tat Problem.main(tmpal4m3o8_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val newWords = words.map(word => {\n    \
    \        val chars = word.split(\"\").map(_.toInt)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            val newChars = sortedChars.map(c => if\
    \ (c > 127) c else (c - 32)).mkString\n            val newWord = newChars + word.substring(word.length)\n\
    \            newWord\n        }).toList\n        val newString = newWords.mkString(\"\
    \ \")\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"h\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpvme5sgt4.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$2(tmpvme5sgt4.scala:16)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.antiShuffle(tmpvme5sgt4.scala:21)\n\
    \tat Problem$.main(tmpvme5sgt4.scala:26)\n\tat Problem.main(tmpvme5sgt4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800594
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val charsSorted = chars.sortWith(_ < _)\n            charsSorted.mkString(\"\
    \")\n        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val chars = words.map(_.toChar)\n        val charsSorted\
    \ = chars.sortWith(_ < _)\n        val charsSortedString = charsSorted.mkString(\"\
    \")\n        val wordsSorted = words.map(_.toUpperCase)\n        val wordsSortedString\
    \ = wordsSorted.mkString(\"\")\n        val wordsSortedStringWithSpace = wordsSortedString.replace(\"\
    \ \", \"\")\n        val charsSortedStringWithSpace = charsSortedString.replace(\"\
    \ \", \"\")\n        val wordsSortedStringWithSpaceAndChars = wordsSortedStringWithSpace\
    \ + charsSortedStringWithSpace\n        val wordsSortedStringWithSpaceAndCharsString\
    \ = wordsSortedStringWithSpaceAndChars.mkString(\"\")\n        val wordsSortedStringWithSpaceAndCharsStringWithSpace\
    \ = wordsSortedStringWithSpaceAndCharsString.replace(\" \", \"\")\n        val\
    \ wordsSortedStringWithSpaceAndCharsStringWithSpaceAndChars = wordsSortedStringWithSpaceAndCharsStringWithSpace\
    \ + charsSortedStringWithSpaceAndCharsStringWithSpace\n        val wordsSortedStringWithSpaceAndCharsStringWithSpaceAndCharsString\
    \ = wordsSortedStringWithSpaceAndCharsStringWithSpaceAndChars.mkString(\"\")\n\
    \        val wordsSortedStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpace\
    \ = wordsSortedStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpace.replace(\"\
    \ \", \"\")\n        val wordsSortedStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpaceAndChars\
    \ = wordsSortedStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpaceAndChars.replace(\"\
    \ \", \"\")\n        val wordsSortedStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpace\
    \ = wordsSortedStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpace.replace(\"\
    \ \", \"\")\n        val wordsSortedStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpaceAndChars\
    \ = wordsSortedStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpaceAndChars.replace(\"\
    \ \", \"\")\n        val wordsSortedStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpace\
    \ = wordsSortedStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpaceAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfdbgg8qu.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              value toChar is not a member of String\n\e[31m\e\
    [31m-- Error: /tmp/tmpfdbgg8qu.scala:15:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                       where:    B\
    \ is a type variable\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdbgg8qu.scala:25:124\
    \ -----------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsSortedStringWithSpaceAndCharsStringWithSpaceAndChars\e[0m = wordsSortedStringWithSpaceAndCharsStringWithSpace\
    \ + charsSortedStringWithSpaceAndCharsStringWithSpace\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: charsSortedStringWithSpaceAndCharsStringWithSpace\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfdbgg8qu.scala:27:87\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mwordsSortedStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpace\e\
    [0m = wordsSortedStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpace.replace(\e\
    [31m\" \"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \                                                                 ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35mwordsSortedStringWithSpaceAndCharsStringWithSpaceAndCharsStringWithSpace\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-expla"
  stdout: ''
  timestamp: 1659800594
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val newWords = words.map(word => {\n           \
    \ val chars = word.split(\"\").map(_.toUpperCase)\n            val charsSorted\
    \ = chars.sortWith(_ < _)\n            charsSorted.mkString(\"\")\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoya8wf7d.scala:23)\n\tat Problem.main(tmpoya8wf7d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val chars = words.map(_.toChar)\n        val sortedChars\
    \ = chars.sortWith(_ < _)\n        val newWord = sortedChars.mkString(\"\")\n\
    \        words.map(word => word + \" \" + newWord).mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbfcgmmtk.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              value toChar is not a member of String\n\e[31m\e\
    [31m-- Error: /tmp/tmpbfcgmmtk.scala:15:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                       where:    B\
    \ is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toLowerCase).toList\n        val sortedWords = words.sortWith(_ < _)\n\
    \        val newWords = sortedWords.map(x => x.toChar).mkString(\"\")\n      \
    \  newWords\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcvp2wptm.scala:16:46 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewWords\e[0m = sortedWords.map(\e\
    [36mx\e[0m => x.toChar).mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value toChar is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659800593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    ).map(_.toUpperCase)\n        val newWords = words.map(word => {\n           \
    \ val chars = word.split(\"\").map(_.toUpperCase)\n            val sortedChars\
    \ = chars.sortWith(_ < _)\n            sortedChars.mkString(\"\")\n        })\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp618445s9.scala:23)\n\tat Problem.main(tmp618445s9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns\
    \ 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \
    \  def antiShuffle(s : String) : String = {\n        val words = s.split(\" \"\
    )\n        val newWords = words.map(word => {\n            val chars = word.split(\"\
    \")\n            val charsSorted = chars.sortWith(_ < _)\n            val charsSortedString\
    \ = charsSorted.mkString(\"\")\n            charsSortedString\n        })\n  \
    \      newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800594
