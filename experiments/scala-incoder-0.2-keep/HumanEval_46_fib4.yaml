name: HumanEval_46_fib4
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    // fib4(2)\
  \ -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
  \ + fib4(n-4).\n    // Please write a function to efficiently compute the n-th element\
  \ of the fib4 number sequence.  Do not use recursion.\n    // >>> fib4(5)\n    //\
  \ 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n    // 14\n    def fib4(n\
  \ : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
  \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
  \ == (386l));\n    }\n\n}\n"
completions: ["        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4\
    \ += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 -> 2\n        fib4 += 3\
    \ -> 0\n        fib4 += 4 -> 4\n        fib4 += 5 -> 0\n        fib4 += 6 -> 8\n\
    \        fib4 += 7 -> 14\n        fib4 += 8 -> 0\n        fib4 += 9 -> 8\n   \
    \     fib4 += 10 -> 16\n        fib4 += 11 -> 0\n        fib4 += 12 -> 16\n  \
    \      fib4 += 13 -> 32\n        fib4 += 14 -> 0\n        fib4 += 15 -> 32\n \
    \       fib4 += 16 -> 64\n        fib4 += 17 -> 0\n        fib4 += 18 -> 64\n\
    \        fib4 += 19 -> 128\n        fib4 += 20 -> 0\n        fib4 += 21 -> 128\n\
    \        fib4 += 22 -> 256\n        fib4 += 23 -> 0\n        fib4 += 24 -> 256\n\
    \        fib4 += 25 -> 512\n        fib4 += 26 -> 0\n        fib4 += 27 -> 512\n\
    \        fib4 += 28 -> 1024\n        fib4 += 29 -> 0\n        fib4 += 30 -> 1024\n\
    \        fib4 += 31 -> 2048\n        fib4 += 32 -> 0\n        fib4 += 33 -> 2048\n\
    \        fib4 += 34 -> 4096\n        fib4 += 35 -> 0\n        fib4 += 36 -> 4096\n\
    \        fib4 += 37 -> 8192\n        fib4 += 38 -> 0\n        fib4 += 39 -> 8192\n\
    \        fib4 += 40 -> 16384\n        fib4 += 41 -> 0\n        fib4 += 42 -> 16384\n\
    \        fib4 += 43 -> 32768\n        fib4 += 44 -> 0\n        fib4 += 45 -> 32768\n\
    \        fib4 += 46 -> 65536\n        fib4 += 47 -> 0\n        fib4 += 48 -> 65536\n\
    \        fib4 += 49 -> 131072\n        fib4 += 50 -> 0\n        fib4 += 51 ->\
    \ 131072\n        fib4 += 52 -> 262144\n        fib4 += 53 -> 0\n        fib4\
    \ += 54 -> 262144\n        fib4 += 55 -> 524288\n        fib4 += 56 -> 0\n   \
    \     fib4 += 57 -> 524288\n        fib4 += 58 -> 10", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n) match {\n            case None => 0L\n            case Some(fib4Value)\
    \ => fib4Value\n        }", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n  \
    \      fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n\
    \        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n \
    \       fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n  \
    \      fib4.put(7, 14L)\n        fib4.get(n)", "        val fib4 = new mutable.Array[Long](n)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0,\
    \ 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n\
    \        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n \
    \       fib4.put(7, 14L)\n        fib4.get(n)", "        var fib : Long = 0\n\
    \        var fib2 : Long = 1\n        var fib3 : Long = 1\n        var fib4 :\
    \ Long = 1\n        for(i <- 0 until n) {\n            fib = fib2 + fib3\n   \
    \         fib2 = fib3\n            fib3 = fib4\n            fib4 = fib\n     \
    \   }\n        fib4", "        var fib : mutable.MutableList[Long] = mutable.MutableList[Long]()\n\
    \        fib += 0\n        fib += 0\n        fib += 2\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n", "    \
    \    val fib4 = new mutable.Array[Long](4)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n  \
    \      fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0)\n\
    \        fib4.put(1, 0)\n        fib4.put(2, 2)\n        fib4.put(3, 0)\n    \
    \    fib4.put(4, 0)\n        fib4.put(5, 4)\n        fib4.put(6, 8)\n        fib4.put(7,\
    \ 14)\n        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n  \
    \      fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.Array[Long](4L)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n).asInstanceOf[Long]", "        val fib4 = new mutable.Array[Long](n)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0,\
    \ 0)\n        fib4.put(1, 0)\n        fib4.put(2, 2)\n        fib4.put(3, 0)\n\
    \        fib4.put(4, 0)\n        fib4.put(5, 4)\n        fib4.put(6, 8)\n    \
    \    fib4.put(7, 14)\n        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "  \
    \      val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n\
    \        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n \
    \       fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n  \
    \      fib4.put(7, 14L)\n        fib4.get(n)", "        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.Array[Long](n)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\n        fib4(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n  \
    \      fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n\
    \        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n \
    \       fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n  \
    \      fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]", "        val\
    \ fib4 = new mutable.Array[Long](4)\n        fib4(0) = 0\n        fib4(1) = 0\n\
    \        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new mutable.Array[Long](n)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0,\
    \ 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n\
    \        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n \
    \       fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]", "        val\
    \ fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n  \
    \      fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]",
  "        if (n <= 0) 0\n        else if (n <= 1) 1\n        else if (n <= 2) 2\n\
    \        else if (n <= 3) 3\n        else fib4(n - 1) + fib4(n - 2) + fib4(n -\
    \ 3) + fib4(n - 4)", "        val fib4 = new mutable.HashMap[Long, Long]()\n \
    \       fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n  \
    \      fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n   \
    \     fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "     \
    \   val fib4 = new mutable.Array[Long](4)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\n        fib4(n)", "        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4.add(0)\n        fib4.add(1)\n        fib4.add(2)\n        fib4.add(3)\n\
    \        fib4.add(4)\n        fib4.add(5)\n        fib4.add(6)\n        fib4.add(7)\n\
    \        fib4.add(8)\n        fib4.add(9)\n        fib4.add(10)\n        fib4.add(11)\n\
    \        fib4.add(12)\n        fib4.add(13)\n        fib4.add(14)\n        fib4.add(15)\n\
    \        fib4.add(16)\n        fib4.add(17)\n        fib4.add(18)\n        fib4.add(19)\n\
    \        fib4.add(20)\n        fib4.add(21)\n        fib4.add(22)\n        fib4.add(23)\n\
    \        fib4.add(24)\n        fib4.add(25)\n        fib4.add(26)\n        fib4.add(27)\n\
    \        fib4.add(28)\n        fib4.add(29)\n        fib4.add(30)\n        fib4.add(31)\n\
    \        fib4.add(32)\n        fib4.add(33)\n        fib4.add(34)\n        fib4.add(35)\n\
    \        fib4.add(36)\n        fib4.add(37)\n        fib4.add(38)\n        fib4.add(39)\n\
    \        fib4.add(40)\n        fib4.add(41)\n        fib4.add(42)\n        fib4.add(43)\n\
    \        fib4.add(44)\n        fib4.add(45)\n        fib4.add(46)\n        fib4.add(47)\n\
    \        fib4.add(48)\n        fib4.add(49)\n        fib4.add(50)\n        fib4.add(51)\n\
    \        fib4.add(52)\n        fib4.add(53)\n        fib4.add(54)\n        fib4.add(55)\n\
    \        fib4.add(56)\n        fib4.add(57)\n        fib4.add(58)\n        fib4.add(59)\n\
    \        fib4.add(60)\n        fib4.add(61)\n        fib4.add(62)\n        fib4.add(63)\n\
    \        fib4.add(64)\n        fib4.add(65)\n        fib4.add(66)\n        fib4.add(67)\n\
    \        fib4.add(68)\n        fib4.add(69)\n        fib4.add(70)\n        fib4.add(71)\n\
    \        fib4.add(72)\n        fib4.add(73)\n        fib4.add(74)\n        fib4.add(",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n\
    \        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n \
    \       fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n  \
    \      fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]", "        val\
    \ fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n).asInstanceOf[Long]", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "  \
    \      val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n\
    \        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n \
    \       fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n  \
    \      fib4.put(7, 14L)\n        fib4.get(n)", "        val fib4 = new mutable.Array[Long](4)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)", "        if (n == 0) 0\n        else if (n == 1) 1\n        else\
    \ if (n == 2) 2\n        else if (n == 3) 0\n        else fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "  \
    \      val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0)\n\
    \        fib4.put(1, 0)\n        fib4.put(2, 2)\n        fib4.put(3, 0)\n    \
    \    fib4.put(4, 0)\n        fib4.put(5, 4)\n        fib4.put(6, 8)\n        fib4.put(7,\
    \ 14)\n        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n  \
    \      fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "    \
    \    if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n \
    \       else if (n == 3) 0\n        else fib4(n - 1) + fib4(n - 2) + fib4(n -\
    \ 3) + fib4(n - 4)", "        val fib4 = new mutable.MutableList[Long]\n     \
    \   fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n     \
    \   fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", " \
    \       val fib4 = new mutable.MutableList[Long]\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new mutable.Array[Long](4)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0,\
    \ 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n\
    \        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n \
    \       fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]", "        var\
    \ fib : mutable.MutableList[Long] = mutable.MutableList.empty\n        fib +=\
    \ 0\n        fib += 0\n        fib += 2\n        fib += 0\n        fib += fib(n-1)\
    \ + fib(n-2) + fib(n-3) + fib(n-4)\n        fib.head", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n  \
    \      fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "    \
    \    val fib4 = new mutable.HashMap[Long, Long]()\n        fib4 += 0 -> 0\n  \
    \      fib4 += 1 -> 0\n        fib4 += 2 -> 2\n        fib4 += 3 -> 0\n      \
    \  fib4 += 4 -> 4\n        fib4 += 5 -> 0\n        fib4 += 6 -> 8\n        fib4\
    \ += 7 -> 14\n        fib4 += 8 -> 0\n        fib4 += 9 -> 16\n        fib4 +=\
    \ 10 -> 0\n        fib4 += 11 -> 32\n        fib4 += 12 -> 0\n        fib4 +=\
    \ 13 -> 64\n        fib4 += 14 -> 0\n        fib4 += 15 -> 128\n        fib4 +=\
    \ 16 -> 0\n        fib4 += 17 -> 256\n        fib4 += 18 -> 0\n        fib4 +=\
    \ 19 -> 512\n        fib4 += 20 -> 0\n        fib4 += 21 -> 1024\n        fib4\
    \ += 22 -> 0\n        fib4 += 23 -> 2048\n        fib4 += 24 -> 0\n        fib4\
    \ += 25 -> 4096\n        fib4 += 26 -> 0\n        fib4 += 27 -> 8192\n       \
    \ fib4 += 28 -> 0\n        fib4 += 29 -> 16384\n        fib4 += 30 -> 0\n    \
    \    fib4 += 31 -> 32768\n        fib4 += 32 -> 0\n        fib4 += 33 -> 65536\n\
    \        fib4 += 34 -> 0\n        fib4 += 35 -> 131072\n        fib4 += 36 ->\
    \ 0\n        fib4 += 37 -> 262144\n        fib4 += 38 -> 0\n        fib4 += 39\
    \ -> 524288\n        fib4 += 40 -> 0\n        fib4 += 41 -> 1048576\n        fib4\
    \ += 42 -> 0\n        fib4 += 43 -> 2097152\n        fib4 += 44 -> 0\n       \
    \ fib4 += 45 -> 4194304\n        fib4 += 46 -> 0\n        fib4 += 47 -> 8388608\n\
    \        fib4 += 48 -> 0\n        fib4 += 49 -> 16777216\n        fib4 += 50 ->\
    \ 0\n        fib4 += 51 -> 33554432\n        fib4 += 52 -> 0\n        fib4 +=\
    \ 53 -> 67108864\n        fib4 += 54 -> 0\n        fib4 += 55 -> 134217728\n \
    \       fib4 += 56 -> 0\n        fib4 += 57 -> 26", "        if (n == 0) 0\n \
    \       else if (n == 1) 1\n        else if (n == 2) 2\n        else if (n ==\
    \ 3) 0\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", " \
    \       val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0)\n\
    \        fib4.put(1, 0)\n        fib4.put(2, 2)\n        fib4.put(3, 0)\n    \
    \    fib4.put(4, 0)\n        fib4.put(5, 4)\n        fib4.put(6, 8)\n        fib4.put(7,\
    \ 14)\n        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n  \
    \      fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "    \
    \    val fib4 = new mutable.Array[Long](4)\n        fib4(0) \u2190 0\n       \
    \ fib4(1) \u2190 0\n        fib4(2) \u2190 2\n        fib4(3) \u2190 0\n     \
    \   fib4(4) \u2190 fib4(3) + fib4(2) + fib4(1)\n        fib4(5) \u2190 fib4(4)\
    \ + fib4(3)\n        fib4(6) \u2190 fib4(5) + fib4(4)\n        fib4(7) \u2190\
    \ fib4(6) + fib4(5)\n        fib4(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n\
    \        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n \
    \       fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n  \
    \      fib4.put(7, 14L)\n        fib4.get(n)", "        if (n == 0) 0\n      \
    \  else if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 3\n\
    \        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", "      \
    \  val fib4 = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)", "    \
    \    val fib4 = new mutable.HashMap[Long, Long]()\n        fib4 += 0 -> 0\n  \
    \      fib4 += 1 -> 0\n        fib4 += 2 -> 2\n        fib4 += 3 -> 0\n      \
    \  fib4 += 4 -> fib4(4) + fib4(3) + fib4(2)\n        fib4 += 5 -> fib4(5) + fib4(4)\
    \ + fib4(3)\n        fib4 += 6 -> fib4(6) + fib4(5) + fib4(4)\n        fib4 +=\
    \ 7 -> fib4(7) + fib4(6) + fib4(5)\n        fib4 += 8 -> fib4(8) + fib4(7) + fib4(6)\n\
    \        fib4 += 9 -> fib4(9) + fib4(8) + fib4(7)\n        fib4 += 10 -> fib4(10)\
    \ + fib4(9) + fib4(8)\n        fib4 += 11 -> fib4(11) + fib4(10) + fib4(9)\n \
    \       fib4 += 12 -> fib4(12) + fib4(11) + fib4(10)\n        fib4 += 13 -> fib4(13)\
    \ + fib4(12) + fib4(11)\n        fib4 += 14 -> fib4(14) + fib4(13) + fib4(12)\n\
    \        fib4 += 15 -> fib4(15) + fib4(14) + fib4(13)\n        fib4 += 16 -> fib4(16)\
    \ + fib4(15) + fib4(14)\n        fib4 += 17 -> fib4(17) + fib4(16) + fib4(15)\n\
    \        fib4 += 18 -> fib4(18) + fib4(17) + fib4(16)\n        fib4 += 19 -> fib4(19)\
    \ + fib4(18) + fib4(17)\n        fib4 += 20 -> fib4(20) + fib4(19) + fib4(18)\n\
    \        fib4 += 21 -> fib4(21) + fib4(20) + fib4(19)\n        fib4 += 22 -> fib4(22)\
    \ + fib4(21) + fib4(20)\n        fib4 += 23 -> fib4(23) + fib4(22) + fib4(21)\n\
    \        fib4 += 24 -> fib4(24) + fib4(23) + fib4(22)\n        fib4 += 25 -> fib4(25)\
    \ + fib4(24) + fib4(23)\n        fib4 += 26 -> fib4(26) + fib4(25) + fib4(24)\n\
    \        fib4 += 27 -> fib4(27) + fib4(26) + fib4(25)\n        fib4 += 28 -> fib4(28)\
    \ + fib4(27) + fib4(26)\n        fib4 += 29 -> fib4(29) + fib4(28", "        val\
    \ fib4 = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4 += 0\n \
    \       fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n) match\
    \ {\n            case Some(x) => x\n            case None => 0L\n        }", " \
    \       val fib4 = new mutable.MutableList[Long]()\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n  \
    \      fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "    \
    \    val fib4 = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "  \
    \      val fib4 = new mutable.HashMap[Long, Long]()\n        fib4 += 0 -> 0\n\
    \        fib4 += 1 -> 0\n        fib4 += 2 -> 2\n        fib4 += 3 -> 0\n    \
    \    fib4 += 4 -> fib4(4) + fib4(3) + fib4(2)\n        fib4 += 5 -> fib4(5) +\
    \ fib4(4) + fib4(3)\n        fib4 += 6 -> fib4(6) + fib4(5) + fib4(4)\n      \
    \  fib4 += 7 -> fib4(7) + fib4(6) + fib4(5)\n        fib4 += 8 -> fib4(8) + fib4(7)\
    \ + fib4(6)\n        fib4 += 9 -> fib4(9) + fib4(8) + fib4(7)\n        fib4 +=\
    \ 10 -> fib4(10) + fib4(9) + fib4(8)\n        fib4 += 11 -> fib4(11) + fib4(10)\
    \ + fib4(9)\n        fib4 += 12 -> fib4(12) + fib4(11) + fib4(10)\n        fib4\
    \ += 13 -> fib4(13) + fib4(12) + fib4(11)\n        fib4 += 14 -> fib4(14) + fib4(13)\
    \ + fib4(12)\n        fib4 += 15 -> fib4(15) + fib4(14) + fib4(13)\n        fib4\
    \ += 16 -> fib4(16) + fib4(15) + fib4(14)\n        fib4 += 17 -> fib4(17) + fib4(16)\
    \ + fib4(15)\n        fib4 += 18 -> fib4(18) + fib4(17) + fib4(16)\n        fib4\
    \ += 19 -> fib4(19) + fib4(18) + fib4(17)\n        fib4 += 20 -> fib4(20) + fib4(19)\
    \ + fib4(18)\n        fib4 += 21 -> fib4(21) + fib4(20) + fib4(19)\n        fib4\
    \ += 22 -> fib4(22) + fib4(21) + fib4(20)\n        fib4 += 23 -> fib4(23) + fib4(22)\
    \ + fib4(21)\n        fib4 += 24 -> fib4(24) + fib4(23) + fib4(22)\n        fib4\
    \ += 25 -> fib4(25) + fib4(24) + fib4(23)\n        fib4 += 26 -> fib4(26) + fib4(25)\
    \ + fib4(24)\n        fib4 += 27 -> fib4(27) + fib4(26) + fib4(25)\n        fib4\
    \ += 28 -> fib4(28) + fib4(27) + fib4(26)\n        fib4 += 29 -> fib4(29) + fib4(28",
  "        val fib4 = new mutable.Array[Long](n)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n)", "        var fib : mutable.MutableList[Int] = mutable.MutableList[Int]()\n\
    \        fib.clear()\n        fib(0) = 0\n        fib(1) = 0\n        fib(2) =\
    \ 2\n        fib(3) = 0\n        fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 3)\
    \ + fib(n - 4)\n        fib(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n\
    \        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n \
    \       fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n  \
    \      fib4.put(7, 14L)\n        fib4.get(n)", "        var fib : mutable.MutableList[Long]\
    \ = mutable.MutableList(0,0)\n        var i : Long = 1\n        while (i < n)\
    \ {\n            fib.add(i)\n            i = i + 2\n        }\n        fib(n-1)",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0)\n\
    \        fib4.put(1, 0)\n        fib4.put(2, 2)\n        fib4.put(3, 0)\n    \
    \    fib4.put(4, 0)\n        fib4.put(5, 4)\n        fib4.put(6, 8)\n        fib4.put(7,\
    \ 14)\n        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n  \
    \      fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "    \
    \    val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0)\n  \
    \      fib4.put(1, 0)\n        fib4.put(2, 2)\n        fib4.put(3, 0)\n      \
    \  fib4.put(4, 0)\n        fib4.put(5, 4)\n        fib4.put(6, 8)\n        fib4.put(7,\
    \ 14)\n        fib4.get(n)", "        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.Array[Long](4)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n).asInstanceOf[Long]", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "  \
    \      val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n\
    \        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n \
    \       fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n  \
    \      fib4.put(7, 14L)\n        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)", "    \
    \    val fib4 = new mutable.Array[Long](n)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n).asInstanceOf[Long]", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 ->\
    \ 2\n        fib4 += 3 -> 0\n        fib4 += 4 -> 0\n        fib4 += 5 -> 4\n\
    \        fib4 += 6 -> 8\n        fib4 += 7 -> 14\n        fib4 += 8 -> 0\n   \
    \     fib4 += 9 -> 4\n        fib4 += 10 -> 8\n        fib4 += 11 -> 14\n    \
    \    fib4 += 12 -> 0\n        fib4 += 13 -> 4\n        fib4 += 14 -> 8\n     \
    \   fib4 += 15 -> 14\n        fib4 += 16 -> 0\n        fib4 += 17 -> 4\n     \
    \   fib4 += 18 -> 8\n        fib4 += 19 -> 14\n        fib4 += 20 -> 0\n     \
    \   fib4 += 21 -> 4\n        fib4 += 22 -> 8\n        fib4 += 23 -> 14\n     \
    \   fib4 += 24 -> 0\n        fib4 += 25 -> 4\n        fib4 += 26 -> 8\n      \
    \  fib4 += 27 -> 14\n        fib4 += 28 -> 0\n        fib4 += 29 -> 4\n      \
    \  fib4 += 30 -> 8\n        fib4 += 31 -> 14\n        fib4 += 32 -> 0\n      \
    \  fib4 += 33 -> 4\n        fib4 += 34 -> 8\n        fib4 += 35 -> 14\n      \
    \  fib4 += 36 -> 0\n        fib4 += 37 -> 4\n        fib4 += 38 -> 8\n       \
    \ fib4 += 39 -> 14\n        fib4 += 40 -> 0\n        fib4 += 41 -> 4\n       \
    \ fib4 += 42 -> 8\n        fib4 += 43 -> 14\n        fib4 += 44 -> 0\n       \
    \ fib4 += 45 -> 4\n        fib4 += 46 -> 8\n        fib4 += 47 -> 14\n       \
    \ fib4 += 48 -> 0\n        fib4 += 49 -> 4\n        fib4 += 50 -> 8\n        fib4\
    \ += 51 -> 14\n        fib4 += 52 -> 0\n        fib4 += 53 -> 4\n        fib4\
    \ += 54 -> 8\n        fib4 += 55 -> 14\n        fib4 += 56 -> 0\n        fib4\
    \ += 57 -> 4\n        fib4 += 58 -> 8\n        fib4 += 59 -> 14\n        fib4\
    \ += 60 -> 0\n        fib4 ", "        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4 += 0 -> 0\n\
    \        fib4 += 1 -> 0\n        fib4 += 2 -> 2\n        fib4 += 3 -> 0\n    \
    \    fib4 += 4 -> 4\n        fib4 += 5 -> 8\n        fib4 += 6 -> 14\n       \
    \ fib4 += 7 -> 20\n        fib4 += 8 -> 28\n        fib4 += 9 -> 36\n        fib4\
    \ += 10 -> 45\n        fib4 += 11 -> 56\n        fib4 += 12 -> 68\n        fib4\
    \ += 13 -> 78\n        fib4 += 14 -> 88\n        fib4 += 15 -> 98\n        fib4\
    \ += 16 -> 108\n        fib4 += 17 -> 117\n        fib4 += 18 -> 126\n       \
    \ fib4 += 19 -> 136\n        fib4 += 20 -> 146\n        fib4 += 21 -> 156\n  \
    \      fib4 += 22 -> 156\n        fib4 += 23 -> 156\n        fib4 += 24 -> 156\n\
    \        fib4 += 25 -> 156\n        fib4 += 26 -> 156\n        fib4 += 27 -> 156\n\
    \        fib4 += 28 -> 156\n        fib4 += 29 -> 156\n        fib4 += 30 -> 156\n\
    \        fib4 += 31 -> 156\n        fib4 += 32 -> 156\n        fib4 += 33 -> 156\n\
    \        fib4 += 34 -> 156\n        fib4 += 35 -> 156\n        fib4 += 36 -> 156\n\
    \        fib4 += 37 -> 156\n        fib4 += 38 -> 156\n        fib4 += 39 -> 156\n\
    \        fib4 += 40 -> 156\n        fib4 += 41 -> 156\n        fib4 += 42 -> 156\n\
    \        fib4 += 43 -> 156\n        fib4 += 44 -> 156\n        fib4 += 45 -> 156\n\
    \        fib4 += 46 -> 156\n        fib4 += 47 -> 156\n        fib4 += 48 -> 156\n\
    \        fib4 += 49 -> 156\n        fib4 += 50 -> 156\n        fib4 += 51 -> 156\n\
    \        fib4 += 52 -> 156\n        fib4 += 53 -> 156\n        fib4 += 54 -> 156\n\
    \        fib4 += 55 -> 156\n        fib4 += 56 -> 156\n        fib4 += 57 -> 156\n\
    \        fib4 += 58 -> 156\n        fib4 += 59 -> 156\n        fib4 += 60 -> 156\n\
    \        fib4 ", "        val fib4 = new mutable.HashMap[Long, Long]()\n     \
    \   fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n      \
    \  fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n       \
    \ fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "        val\
    \ fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n).asInstanceOf[Long]", "        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.MutableList[Long]()\n        fib4 += 0\n       \
    \ fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n)", "        val fib4 = new mutable.Array[Long](4L)\n     \
    \   fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3) = 0\n\
    \        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.HashSet[Long]()\n        fib4.add(0)\n        fib4.add(1)\n\
    \        fib4.add(2)\n        fib4.add(3)\n        fib4.add(4)\n        fib4.add(5)\n\
    \        fib4.add(6)\n        fib4.add(7)\n        fib4.add(8)\n        fib4.add(9)\n\
    \        fib4.add(10)\n        fib4.add(11)\n        fib4.add(12)\n        fib4.add(13)\n\
    \        fib4.add(14)\n        fib4.add(15)\n        fib4.add(16)\n        fib4.add(17)\n\
    \        fib4.add(18)\n        fib4.add(19)\n        fib4.add(20)\n        fib4.add(21)\n\
    \        fib4.add(22)\n        fib4.add(23)\n        fib4.add(24)\n        fib4.add(25)\n\
    \        fib4.add(26)\n        fib4.add(27)\n        fib4.add(28)\n        fib4.add(29)\n\
    \        fib4.add(30)\n        fib4.add(31)\n        fib4.add(32)\n        fib4.add(33)\n\
    \        fib4.add(34)\n        fib4.add(35)\n        fib4.add(36)\n        fib4.add(37)\n\
    \        fib4.add(38)\n        fib4.add(39)\n        fib4.add(40)\n        fib4.add(41)\n\
    \        fib4.add(42)\n        fib4.add(43)\n        fib4.add(44)\n        fib4.add(45)\n\
    \        fib4.add(46)\n        fib4.add(47)\n        fib4.add(48)\n        fib4.add(49)\n\
    \        fib4.add(50)\n        fib4.add(51)\n        fib4.add(52)\n        fib4.add(53)\n\
    \        fib4.add(54)\n        fib4.add(55)\n        fib4.add(56)\n        fib4.add(57)\n\
    \        fib4.add(58)\n        fib4.add(59)\n        fib4.add(60)\n        fib4.add(61)\n\
    \        fib4.add(62)\n        fib4.add(63)\n        fib4.add(64)\n        fib4.add(65)\n\
    \        fib4.add(66)\n        fib4.add(67)\n        fib4.add(68)\n        fib4.add(69)\n\
    \        fib4.add(70)\n        fib4.add(71)\n        fib4.add(72)\n        fib4.add(73)\n\
    \        fib4.add(74)\n        fib4.add(", "        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4 += 0 -> 0\n\
    \        fib4 += 1 -> 0\n        fib4 += 2 -> 2\n        fib4 += 3 -> 0\n    \
    \    fib4 += 4 -> fib4(4) + fib4(3) + fib4(2)\n        fib4 += 5 -> fib4(5) +\
    \ fib4(4) + fib4(3)\n        fib4 += 6 -> fib4(6) + fib4(5) + fib4(4)\n      \
    \  fib4 += 7 -> fib4(7) + fib4(6) + fib4(5)\n        fib4 += 8 -> fib4(8) + fib4(7)\
    \ + fib4(6)\n        fib4 += 9 -> fib4(9) + fib4(8) + fib4(7)\n        fib4 +=\
    \ 10 -> fib4(10) + fib4(9) + fib4(8)\n        fib4 += 11 -> fib4(11) + fib4(10)\
    \ + fib4(9)\n        fib4 += 12 -> fib4(12) + fib4(11) + fib4(10)\n        fib4\
    \ += 13 -> fib4(13) + fib4(12) + fib4(11)\n        fib4 += 14 -> fib4(14) + fib4(13)\
    \ + fib4(12)\n        fib4 += 15 -> fib4(15) + fib4(14) + fib4(13)\n        fib4\
    \ += 16 -> fib4(16) + fib4(15) + fib4(14)\n        fib4 += 17 -> fib4(17) + fib4(16)\
    \ + fib4(15)\n        fib4 += 18 -> fib4(18) + fib4(17) + fib4(16)\n        fib4\
    \ += 19 -> fib4(19) + fib4(18) + fib4(17)\n        fib4 += 20 -> fib4(20) + fib4(19)\
    \ + fib4(18)\n        fib4 += 21 -> fib4(21) + fib4(20) + fib4(19)\n        fib4\
    \ += 22 -> fib4(22) + fib4(21) + fib4(20)\n        fib4 += 23 -> fib4(23) + fib4(22)\
    \ + fib4(21)\n        fib4 += 24 -> fib4(24) + fib4(23) + fib4(22)\n        fib4\
    \ += 25 -> fib4(25) + fib4(24) + fib4(23)\n        fib4 += 26 -> fib4(26) + fib4(25)\
    \ + fib4(24)\n        fib4 += 27 -> fib4(27) + fib4(26) + fib4(25)\n        fib4\
    \ += 28 -> fib4(28) + fib4(27) + fib4(26)\n        fib4 += 29 -> fib4(29) + fib4(28",
  "        val fib4 = new mutable.Array[Long](4)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        if (n == 0) 0\n\
    \        else if (n == 1) 1\n        else if (n == 2) 2\n        else if (n ==\
    \ 3) 0\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", " \
    \       val fib4 = new mutable.HashMap[Long, Long]()\n        fib4 += 0 -> 0\n\
    \        fib4 += 1 -> 0\n        fib4 += 2 -> 2\n        fib4 += 3 -> 0\n    \
    \    fib4 += 4 -> fib4(3) + fib4(4) + fib4(5)\n        fib4 += 5 -> fib4(5) +\
    \ fib4(6) + fib4(7)\n        fib4 += 6 -> fib4(6) + fib4(7) + fib4(8)\n      \
    \  fib4 += 7 -> fib4(7) + fib4(8) + fib4(9)\n        fib4 += 8 -> fib4(8) + fib4(9)\
    \ + fib4(10)\n        fib4 += 9 -> fib4(9) + fib4(10) + fib4(11)\n        fib4\
    \ += 10 -> fib4(10) + fib4(11) + fib4(12)\n        fib4 += 11 -> fib4(11) + fib4(12)\
    \ + fib4(13)\n        fib4 += 12 -> fib4(12) + fib4(13) + fib4(14)\n        fib4\
    \ += 13 -> fib4(13) + fib4(14) + fib4(15)\n        fib4 += 14 -> fib4(14) + fib4(15)\
    \ + fib4(16)\n        fib4 += 15 -> fib4(15) + fib4(16) + fib4(17)\n        fib4\
    \ += 16 -> fib4(16) + fib4(17) + fib4(18)\n        fib4 += 17 -> fib4(17) + fib4(18)\
    \ + fib4(19)\n        fib4 += 18 -> fib4(18) + fib4(19) + fib4(20)\n        fib4\
    \ += 19 -> fib4(19) + fib4(20) + fib4(21)\n        fib4 += 20 -> fib4(20) + fib4(21)\
    \ + fib4(22)\n        fib4 += 21 -> fib4(21) + fib4(22) + fib4(23)\n        fib4\
    \ += 22 -> fib4(22) + fib4(23) + fib4(24)\n        fib4 += 23 -> fib4(23) + fib4(24)\
    \ + fib4(25)\n        fib4 += 24 -> fib4(24) + fib4(25) + fib4(26)\n        fib4\
    \ += 25 -> fib4(25) + fib4(26) + fib4(27)\n        fib4 += 26 -> fib4(26) + fib4(27)\
    \ + fib4(28)\n        fib4 += 27 -> fib4(27) + fib4(28) + fib4(29)\n        fib4\
    \ += 28 -> fib4(28) + fib4(29) + fib4(30)\n        fib4 += 29 -> fib4(29) + ",
  "        val fib4 = new mutable.MutableList[Long]()\n        fib4 += 0\n       \
    \ fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        if (n == 0) 0\n\
    \        else if (n == 1) 1\n        else if (n == 2) 2\n        else if (n ==\
    \ 3) 0\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", " \
    \       val fib4 = new mutable.Array[Long](n)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.Array[Long](4)\n        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2)\
    \ = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 ->\
    \ 2\n        fib4 += 3 -> 0\n        fib4 += 4 -> 4\n        fib4 += 5 -> 0\n\
    \        fib4 += 6 -> 8\n        fib4 += 7 -> 14\n        fib4 += 8 -> 0\n   \
    \     fib4 += 9 -> 8\n        fib4 += 10 -> 16\n        fib4 += 11 -> 0\n    \
    \    fib4 += 12 -> 16\n        fib4 += 13 -> 0\n        fib4 += 14 -> 32\n   \
    \     fib4 += 15 -> 0\n        fib4 += 16 -> 32\n        fib4 += 17 -> 0\n   \
    \     fib4 += 18 -> 64\n        fib4 += 19 -> 0\n        fib4 += 20 -> 64\n  \
    \      fib4 += 21 -> 0\n        fib4 += 22 -> 128\n        fib4 += 23 -> 0\n \
    \       fib4 += 24 -> 128\n        fib4 += 25 -> 0\n        fib4 += 26 -> 256\n\
    \        fib4 += 27 -> 0\n        fib4 += 28 -> 256\n        fib4 += 29 -> 0\n\
    \        fib4 += 30 -> 512\n        fib4 += 31 -> 0\n        fib4 += 32 -> 512\n\
    \        fib4 += 33 -> 0\n        fib4 += 34 -> 1024\n        fib4 += 35 -> 0\n\
    \        fib4 += 36 -> 1024\n        fib4 += 37 -> 0\n        fib4 += 38 -> 2048\n\
    \        fib4 += 39 -> 0\n        fib4 += 40 -> 2048\n        fib4 += 41 -> 0\n\
    \        fib4 += 42 -> 4096\n        fib4 += 43 -> 0\n        fib4 += 44 -> 4096\n\
    \        fib4 += 45 -> 0\n        fib4 += 46 -> 8192\n        fib4 += 47 -> 0\n\
    \        fib4 += 48 -> 8192\n        fib4 += 49 -> 0\n        fib4 += 50 -> 16384\n\
    \        fib4 += 51 -> 0\n        fib4 += 52 -> 16384\n        fib4 += 53 -> 0\n\
    \        fib4 += 54 -> 32768\n        fib4 += 55 -> 0\n        fib4 += 56 -> 32768\n\
    \        fib4 += 57 -> 0\n        fib4 += 58 -> 65536\n        fib4 += 59 -> 0\n\
    \        fib4 += ", "        if (n <= 0) 0\n        else if (n <= 2) 2\n     \
    \   else if (n <= 5) 0\n        else if (n <= 7) 5\n        else fib4(n - 4) +\
    \ fib4(n - 3) + fib4(n - 2) + fib4(n - 1)", "        val fib4 = new mutable.Array[Long](4)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)", "        val fib4 = new mutable.Array[Long](n)\n        fib4(0)\
    \ = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3) = 0\n       \
    \ fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", " \
    \       val fib4 = new mutable.Array[Long](n)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n\
    \        fib4.put(2, 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n    \
    \    fib4.put(5, 4)\n        fib4.put(6, 8)\n        fib4.put(7, 14)\n       \
    \ fib4.get(n)", "        val fib4 = new mutable.HashSet[Long]()\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4\
    \ += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "      \
    \  val fib4 = new mutable.Array[Long](5)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\n        fib4(n)", "        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.Array[Long](4)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n\
    \        fib4.put(2, 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n    \
    \    fib4.put(5, 4)\n        fib4.put(6, 8)\n        fib4.put(7, 14)\n       \
    \ fib4.get(n)", "        val fib4 = new mutable.MutableList[Long]()\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4\
    \ += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "      \
    \  val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n   \
    \     fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n    \
    \    fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n     \
    \   fib4.put(7, 14L)\n        fib4.get(n)", "        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.MutableList[Long]()\n        fib4 += 0\n       \
    \ fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n)", "        var fib : mutable.MutableList[Long] = mutable.MutableList[Long]()\n\
    \        var i : Long = 0\n        fib.add(0)\n        fib.add(0)\n        fib.add(2)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n).asInstanceOf[Long]", "        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", "        val\
    \ fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0)\n        fib4.put(1,\
    \ 0)\n        fib4.put(2, 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n\
    \        fib4.put(5, 4)\n        fib4.put(6, 8)\n        fib4.put(7, 14)\n   \
    \     fib4.get(n)", "        if (n == 0) 0\n        else if (n == 1) 1\n     \
    \   else if (n == 2) 2\n        else if (n == 3) 0\n        else fib4(n - 1) +\
    \ fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "  \
    \      val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n\
    \        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n \
    \       fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n  \
    \      fib4.put(7, 14L)\n        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n\
    \        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n \
    \       fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n  \
    \      fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]", "        val\
    \ fib4 = new mutable.HashMap[Long, Long]()\n        fib4 += 0 -> 0\n        fib4\
    \ += 1 -> 0\n        fib4 += 2 -> 2\n        fib4 += 3 -> 0\n        fib4 += 4\
    \ -> 0\n        fib4 += 5 -> 4\n        fib4 += 6 -> 8\n        fib4 += 7 -> 14\n\
    \        fib4 += 8 -> 0\n        fib4 += 9 -> 4\n        fib4 += 10 -> 8\n   \
    \     fib4 += 11 -> 14\n        fib4 += 12 -> 0\n        fib4 += 13 -> 4\n   \
    \     fib4 += 14 -> 8\n        fib4 += 15 -> 14\n        fib4 += 16 -> 0\n   \
    \     fib4 += 17 -> 4\n        fib4 += 18 -> 8\n        fib4 += 19 -> 14\n   \
    \     fib4 += 20 -> 0\n        fib4 += 21 -> 4\n        fib4 += 22 -> 8\n    \
    \    fib4 += 23 -> 14\n        fib4 += 24 -> 0\n        fib4 += 25 -> 4\n    \
    \    fib4 += 26 -> 8\n        fib4 += 27 -> 14\n        fib4 += 28 -> 0\n    \
    \    fib4 += 29 -> 4\n        fib4 += 30 -> 8\n        fib4 += 31 -> 14\n    \
    \    fib4 += 32 -> 0\n        fib4 += 33 -> 4\n        fib4 += 34 -> 8\n     \
    \   fib4 += 35 -> 14\n        fib4 += 36 -> 0\n        fib4 += 37 -> 4\n     \
    \   fib4 += 38 -> 8\n        fib4 += 39 -> 14\n        fib4 += 40 -> 0\n     \
    \   fib4 += 41 -> 4\n        fib4 += 42 -> 8\n        fib4 += 43 -> 14\n     \
    \   fib4 += 44 -> 0\n        fib4 += 45 -> 4\n        fib4 += 46 -> 8\n      \
    \  fib4 += 47 -> 14\n        fib4 += 48 -> 0\n        fib4 += 49 -> 4\n      \
    \  fib4 += 50 -> 8\n        fib4 += 51 -> 14\n        fib4 += 52 -> 0\n      \
    \  fib4 += 53 -> 4\n        fib4 += 54 -> 8\n        fib4 += 55 -> 14\n      \
    \  fib4 += 56 -> 0\n        fib4 += 57 -> 4\n        fib4 += 58 -> 8\n       \
    \ fib4 += 59 -> 14\n        fib4 += 60 -> 0\n        fib4 ", "        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n).asInstanceOf[Long]", "        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 3\n    \
    \    else if (n == 4) 5\n        else fib4(n - 4) + fib4(n - 3) + fib4(n - 2)\
    \ + fib4(n - 1)", "        val fib4 = new mutable.MutableList[Long]\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4\
    \ += fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n        fib4(n)",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n\
    \        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n \
    \       fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n  \
    \      fib4.put(7, 14L)\n        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 ->\
    \ 2\n        fib4 += 3 -> 0\n        fib4 += 4 -> 0\n        fib4 += 5 -> 0\n\
    \        fib4 += 6 -> 0\n        fib4 += 7 -> 0\n        fib4 += 8 -> 2\n    \
    \    fib4 += 9 -> 0\n        fib4 += 10 -> 0\n        fib4 += 11 -> 0\n      \
    \  fib4 += 12 -> 0\n        fib4 += 13 -> 0\n        fib4 += 14 -> 0\n       \
    \ fib4 += 15 -> 0\n        fib4 += 16 -> 0\n        fib4 += 17 -> 0\n        fib4\
    \ += 18 -> 0\n        fib4 += 19 -> 0\n        fib4 += 20 -> 2\n        fib4 +=\
    \ 21 -> 0\n        fib4 += 22 -> 0\n        fib4 += 23 -> 0\n        fib4 += 24\
    \ -> 0\n        fib4 += 25 -> 0\n        fib4 += 26 -> 0\n        fib4 += 27 ->\
    \ 0\n        fib4 += 28 -> 2\n        fib4 += 29 -> 0\n        fib4 += 30 -> 0\n\
    \        fib4 += 31 -> 0\n        fib4 += 32 -> 0\n        fib4 += 33 -> 0\n \
    \       fib4 += 34 -> 0\n        fib4 += 35 -> 0\n        fib4 += 36 -> 0\n  \
    \      fib4 += 37 -> 0\n        fib4 += 38 -> 2\n        fib4 += 39 -> 0\n   \
    \     fib4 += 40 -> 0\n        fib4 += 41 -> 0\n        fib4 += 42 -> 0\n    \
    \    fib4 += 43 -> 0\n        fib4 += 44 -> 0\n        fib4 += 45 -> 0\n     \
    \   fib4 += 46 -> 0\n        fib4 += 47 -> 0\n        fib4 += 48 -> 2\n      \
    \  fib4 += 49 -> 0\n        fib4 += 50 -> 0\n        fib4 += 51 -> 0\n       \
    \ fib4 += 52 -> 0\n        fib4 += 53 -> 0\n        fib4 += 54 -> 0\n        fib4\
    \ += 55 -> 0\n        fib4 += 56 -> 0\n        fib4 += 57 -> 0\n        fib4 +=\
    \ 58 -> 2\n        fib4 += 59 -> 0\n        fib4 += 60 -> 0\n        fib4 ", " \
    \       var fib : Long = 0\n        var fib2 : Long = 0\n        var fib3 : Long\
    \ = 0\n        var fib4 : Long = 0\n        var fib5 : Long = 0\n        var fib6\
    \ : Long = 0\n        var fib7 : Long = 0\n        var fib8 : Long = 0\n     \
    \   var fib9 : Long = 0\n        var fib10 : Long = 0\n        var fib11 : Long\
    \ = 0\n        var fib12 : Long = 0\n        var fib13 : Long = 0\n        var\
    \ fib14 : Long = 0\n        var fib15 : Long = 0\n        var fib16 : Long = 0\n\
    \        var fib17 : Long = 0\n        var fib18 : Long = 0\n        var fib19\
    \ : Long = 0\n        var fib20 : Long = 0\n        var fib21 : Long = 0\n   \
    \     var fib22 : Long = 0\n        var fib23 : Long = 0\n        var fib24 :\
    \ Long = 0\n        var fib25 : Long = 0\n        var fib26 : Long = 0\n     \
    \   var fib27 : Long = 0\n        var fib28 : Long = 0\n        var fib29 : Long\
    \ = 0\n        var fib30 : Long = 0\n        var fib31 : Long = 0\n        var\
    \ fib32 : Long = 0\n        var fib33 : Long = 0\n        var fib34 : Long = 0\n\
    \        var fib35 : Long = 0\n        var fib36 : Long = 0\n        var fib37\
    \ : Long = 0\n        var fib38 : Long = 0\n        var fib39 : Long = 0\n   \
    \     var fib40 : Long = 0\n        var fib41 : Long = 0\n        var fib42 :\
    \ Long = 0\n        var fib43 : Long = 0\n        var fib44 : Long = 0\n     \
    \   var fib45 : Long = 0\n        var fib46 : Long = 0\n        var fib47 : Long\
    \ = 0\n        var fib48 : Long = 0\n        var fib49 : Long = 0\n        var\
    \ fib50 : Long = 0\n        var fib51 : Long = 0\n        var fib52 : Long = 0\n\
    \        var fib53 : Long = 0\n        var fib54 : Long = 0\n        var fib55\
    \ : Long = 0\n        var fib56 : Long = 0\n        var fib57 : Long = 0\n   \
    \     var fib58 : Long = 0\n        var fib59 : Long = 0\n        var fib60 :\
    \ Long = 0\n        var fib61 : Long = 0\n        var fib62 : Long = 0\n     \
    \   var fib63 : Long = 0\n        var fib64 : Long = 0\n        var fib65 : Long\
    \ = 0\n        var fib66 : Long = 0\n        var fib67 : Long = 0\n        var\
    \ fib68 : Long = 0\n        var fib69 : Long = 0\n        var fib70 : Long = 0\n\
    \        var fib71 : Long = 0\n        var fib72 : Long = 0\n        var fib73\
    \ : Long = 0\n", "        val fib4 = new mutable.HashMap[Long, Long]()\n     \
    \   fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n      \
    \  fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n       \
    \ fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "        if\
    \ (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n       \
    \ else if (n == 3) 0\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)", "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0,\
    \ 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n\
    \        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n \
    \       fib4.put(7, 14L)\n        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0)\n\
    \        fib4.put(1, 0)\n        fib4.put(2, 2)\n        fib4.put(3, 0)\n    \
    \    fib4.put(4, 0)\n        fib4.put(5, 4)\n        fib4.put(6, 8)\n        fib4.put(7,\
    \ 14)\n        fib4.get(n)", "        var fib : mutable.MutableList[Long] = mutable.MutableList(0)\n\
    \        var i : Long = 1\n        while (fib(n) != 0) {\n            fib.add(i)\n\
    \            i = i + 2\n        }\n        fib(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)", "    \
    \    val fib4 = new mutable.HashMap[Long, Long]()\n        fib4 += 0 -> 0\n  \
    \      fib4 += 1 -> 0\n        fib4 += 2 -> 2\n        fib4 += 3 -> 0\n      \
    \  fib4 += 4 -> 0\n        fib4 += 5 -> 0\n        fib4 += 6 -> 0\n        fib4\
    \ += 7 -> 0\n        fib4 += 8 -> 2\n        fib4 += 9 -> 0\n        fib4 += 10\
    \ -> 0\n        fib4 += 11 -> 0\n        fib4 += 12 -> 0\n        fib4 += 13 ->\
    \ 0\n        fib4 += 14 -> 0\n        fib4 += 15 -> 0\n        fib4 += 16 -> 0\n\
    \        fib4 += 17 -> 0\n        fib4 += 18 -> 0\n        fib4 += 19 -> 0\n \
    \       fib4 += 20 -> 2\n        fib4 += 21 -> 0\n        fib4 += 22 -> 0\n  \
    \      fib4 += 23 -> 0\n        fib4 += 24 -> 0\n        fib4 += 25 -> 0\n   \
    \     fib4 += 26 -> 0\n        fib4 += 27 -> 0\n        fib4 += 28 -> 2\n    \
    \    fib4 += 29 -> 0\n        fib4 += 30 -> 0\n        fib4 += 31 -> 0\n     \
    \   fib4 += 32 -> 0\n        fib4 += 33 -> 0\n        fib4 += 34 -> 0\n      \
    \  fib4 += 35 -> 0\n        fib4 += 36 -> 0\n        fib4 += 37 -> 0\n       \
    \ fib4 += 38 -> 2\n        fib4 += 39 -> 0\n        fib4 += 40 -> 0\n        fib4\
    \ += 41 -> 0\n        fib4 += 42 -> 0\n        fib4 += 43 -> 0\n        fib4 +=\
    \ 44 -> 0\n        fib4 += 45 -> 0\n        fib4 += 46 -> 0\n        fib4 += 47\
    \ -> 0\n        fib4 += 48 -> 2\n        fib4 += 49 -> 0\n        fib4 += 50 ->\
    \ 0\n        fib4 += 51 -> 0\n        fib4 += 52 -> 0\n        fib4 += 53 -> 0\n\
    \        fib4 += 54 -> 0\n        fib4 += 55 -> 0\n        fib4 += 56 -> 0\n \
    \       fib4 += 57 -> 0\n        fib4 += 58 -> 2\n        fib4 += 59 -> 0\n  \
    \      fib4 += 60 -> 0\n        fib4 ", "        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.MutableList[Long]()\n        fib4 += 0\n       \
    \ fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n\
    \        fib4.put(2, 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n    \
    \    fib4.put(5, 4)\n        fib4.put(6, 8)\n        fib4.put(7, 14)\n       \
    \ fib4.get(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n      \
    \  fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n       \
    \ fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6,\
    \ 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "        if (n <= 0) 0\n\
    \        else if (n <= 2) 2\n        else if (n <= 4) 0\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "  \
    \      var fib : mutable.MutableList[Int] = mutable.MutableList.empty\n      \
    \  fib.clear()\n        fib(0) = 0\n        fib(1) = 0\n        fib(2) = 2\n \
    \       fib(3) = 0\n        fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n\
    \ - 4)\n        fib.head", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n  \
    \      fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "    \
    \    if (n <= 0) 0\n        else if (n <= 2) 2\n        else if (n <= 4) 0\n \
    \       else if (n <= 8) 4\n        else if (n <= 16) 8\n        else if (n <=\
    \ 32) 16\n        else if (n <= 64) 32\n        else 64", "        if (n == 0)\
    \ 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n        else if (n\
    \ == 3) 0\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0)\n\
    \        fib4.put(1, 0)\n        fib4.put(2, 2)\n        fib4.put(3, 0)\n    \
    \    fib4.put(4, 0)\n        fib4.put(5, 4)\n        fib4.put(6, 8)\n        fib4.put(7,\
    \ 14)\n        fib4.get(n)", "        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        if (n <= 0) 0\n        else if (n <= 2) 2\n        else fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "  \
    \      val fib4 = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n        fib4.get(n)", "        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0)\n\
    \        fib4.put(1, 0)\n        fib4.put(2, 2)\n        fib4.put(3, 0)\n    \
    \    fib4.put(4, 0)\n        fib4.put(5, 4)\n        fib4.put(6, 8)\n        fib4.put(7,\
    \ 14)\n        fib4.get(n)", "        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0)\n\
    \        fib4.put(1, 0)\n        fib4.put(2, 2)\n        fib4.put(3, 0)\n    \
    \    fib4.put(4, 0)\n        fib4.put(5, 4)\n        fib4.put(6, 8)\n        fib4.put(7,\
    \ 14)\n        fib4.get(n)", "        if (n <= 0) 0\n        else if (n <= 2)\
    \ 2\n        else if (n <= 4) 0\n        else if (n <= 7) 4\n        else fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", "        if (n == 0) 0\n  \
    \      else if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3)\
    \ 0\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", "  \
    \      val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n\
    \        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n \
    \       fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n  \
    \      fib4.put(7, 14L)\n        fib4.get(n)", "        if (n == 0) 0\n      \
    \  else if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 0\n\
    \        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", "      \
    \  val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n   \
    \     fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n    \
    \    fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n     \
    \   fib4.put(7, 14L)\n        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "  \
    \      val fib4 = new mutable.MutableList[Long]()\n        fib4 += 0\n       \
    \ fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n).asInstanceOf[Long]", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "  \
    \      var fib : mutable.MutableList[Long] = mutable.MutableList[Long]()\n   \
    \     fib.clear()\n        fib(0) = 0\n        fib(1) = 0\n        fib(2) = 2\n\
    \        fib(3) = 0\n        fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n\
    \ - 4)\n        fib(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2, 2)\n    \
    \    fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n        fib4.put(6,\
    \ 8)\n        fib4.put(7, 14)\n        fib4.get(n) match {\n            case Some(x)\
    \ => x\n            case None => 0\n        }", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "  \
    \      val fib4 = new mutable.Array[Long](4)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        var fib : mutable.MutableList[Long]\
    \ = mutable.MutableList.empty\n        fib += 0\n        fib += 0\n        fib\
    \ += 2\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib", "        var fib : mutable.MutableList[Long]\
    \ = mutable.MutableList()\n        fib += 0\n        fib += 0\n        fib +=\
    \ 2\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += ", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)", "    \
    \    val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n \
    \       fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n  \
    \      fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n   \
    \     fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]", "        val\
    \ fib4 = new mutable.MutableList[Long]\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4)\n        fib4(n)", "        var fib : mutable.MutableList[Long]\
    \ = mutable.MutableList.empty\n        fib += 0\n        fib += 0\n        fib\
    \ += 2\n        fib += 0\n        fib += fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\n\
    \        fib.last", "        val fib4 = new mutable.HashMap[Long, Long]()\n  \
    \      fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2, 2)\n      \
    \  fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n        fib4.put(6,\
    \ 8)\n        fib4.put(7, 14)\n        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)", "    \
    \    val fib4 = new mutable.Array[Long](n + 1)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashSet[Long]()\n        fib4.add(0)\n        fib4.add(1)\n        fib4.add(2)\n\
    \        fib4.add(3)\n        fib4.add(4)\n        fib4.add(5)\n        fib4.add(6)\n\
    \        fib4.add(7)\n        fib4.add(8)\n        fib4.add(9)\n        fib4.add(10)\n\
    \        fib4.add(11)\n        fib4.add(12)\n        fib4.add(13)\n        fib4.add(14)\n\
    \        fib4.add(15)\n        fib4.add(16)\n        fib4.add(17)\n        fib4.add(18)\n\
    \        fib4.add(19)\n        fib4.add(20)\n        fib4.add(21)\n        fib4.add(22)\n\
    \        fib4.add(23)\n        fib4.add(24)\n        fib4.add(25)\n        fib4.add(26)\n\
    \        fib4.add(27)\n        fib4.add(28)\n        fib4.add(29)\n        fib4.add(30)\n\
    \        fib4.add(31)\n        fib4.add(32)\n        fib4.add(33)\n        fib4.add(34)\n\
    \        fib4.add(35)\n        fib4.add(36)\n        fib4.add(37)\n        fib4.add(38)\n\
    \        fib4.add(39)\n        fib4.add(40)\n        fib4.add(41)\n        fib4.add(42)\n\
    \        fib4.add(43)\n        fib4.add(44)\n        fib4.add(45)\n        fib4.add(46)\n\
    \        fib4.add(47)\n        fib4.add(48)\n        fib4.add(49)\n        fib4.add(50)\n\
    \        fib4.add(51)\n        fib4.add(52)\n        fib4.add(53)\n        fib4.add(54)\n\
    \        fib4.add(55)\n        fib4.add(56)\n        fib4.add(57)\n        fib4.add(58)\n\
    \        fib4.add(59)\n        fib4.add(60)\n        fib4.add(61)\n        fib4.add(62)\n\
    \        fib4.add(63)\n        fib4.add(64)\n        fib4.add(65)\n        fib4.add(66)\n\
    \        fib4.add(67)\n        fib4.add(68)\n        fib4.add(69)\n        fib4.add(70)\n\
    \        fib4.add(71)\n        fib4.add(72)\n        fib4.add(73)\n        fib4.add(74)\n\
    \        fib4.add(", "        if (n <= 0) 0\n        else if (n <= 2) 1\n    \
    \    else if (n <= 3) 2\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4)", "        val fib4 = new mutable.MutableList[Long]()\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n      \
    \  fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", " \
    \       val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n\
    \        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n \
    \       fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n  \
    \      fib4.put(7, 14L)\n        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "  \
    \      val fib4 = new mutable.MutableList[Long]()\n        fib4 += 0\n       \
    \ fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n)", "        if (n == 0) 0\n        else if (n == 1) 1\n  \
    \      else if (n == 2) 2\n        else if (n == 3) 0\n        else fib4(n - 1)\
    \ + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0)\n\
    \        fib4.put(1, 0)\n        fib4.put(2, 2)\n        fib4.put(3, 0)\n    \
    \    fib4.put(4, 0)\n        fib4.put(5, 4)\n        fib4.put(6, 8)\n        fib4.put(7,\
    \ 14)\n        fib4.get(n).asInstanceOf[Long]", "        if (n == 0) 0\n     \
    \   else if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 0\n\
    \        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", "      \
    \  val fib4 = new mutable.Array[Long](5)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)"]
stop_tokens:
- "\n    }\n"
