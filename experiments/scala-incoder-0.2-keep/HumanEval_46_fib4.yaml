name: HumanEval_46_fib4
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    // fib4(2)\
  \ -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
  \ + fib4(n-4).\n    // Please write a function to efficiently compute the n-th element\
  \ of the fib4 number sequence.  Do not use recursion.\n    // >>> fib4(5)\n    //\
  \ 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n    // 14\n    def fib4(n\
  \ : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
  \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
  \ == (386l));\n    }\n\n}\n"
completions: ["        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4\
    \ += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 -> 2\n        fib4 += 3\
    \ -> 0\n        fib4 += 4 -> 4\n        fib4 += 5 -> 0\n        fib4 += 6 -> 8\n\
    \        fib4 += 7 -> 14\n        fib4 += 8 -> 0\n        fib4 += 9 -> 8\n   \
    \     fib4 += 10 -> 16\n        fib4 += 11 -> 0\n        fib4 += 12 -> 16\n  \
    \      fib4 += 13 -> 32\n        fib4 += 14 -> 0\n        fib4 += 15 -> 32\n \
    \       fib4 += 16 -> 64\n        fib4 += 17 -> 0\n        fib4 += 18 -> 64\n\
    \        fib4 += 19 -> 128\n        fib4 += 20 -> 0\n        fib4 += 21 -> 128\n\
    \        fib4 += 22 -> 256\n        fib4 += 23 -> 0\n        fib4 += 24 -> 256\n\
    \        fib4 += 25 -> 512\n        fib4 += 26 -> 0\n        fib4 += 27 -> 512\n\
    \        fib4 += 28 -> 1024\n        fib4 += 29 -> 0\n        fib4 += 30 -> 1024\n\
    \        fib4 += 31 -> 2048\n        fib4 += 32 -> 0\n        fib4 += 33 -> 2048\n\
    \        fib4 += 34 -> 4096\n        fib4 += 35 -> 0\n        fib4 += 36 -> 4096\n\
    \        fib4 += 37 -> 8192\n        fib4 += 38 -> 0\n        fib4 += 39 -> 8192\n\
    \        fib4 += 40 -> 16384\n        fib4 += 41 -> 0\n        fib4 += 42 -> 16384\n\
    \        fib4 += 43 -> 32768\n        fib4 += 44 -> 0\n        fib4 += 45 -> 32768\n\
    \        fib4 += 46 -> 65536\n        fib4 += 47 -> 0\n        fib4 += 48 -> 65536\n\
    \        fib4 += 49 -> 131072\n        fib4 += 50 -> 0\n        fib4 += 51 ->\
    \ 131072\n        fib4 += 52 -> 262144\n        fib4 += 53 -> 0\n        fib4\
    \ += 54 -> 262144\n        fib4 += 55 -> 524288\n        fib4 += 56 -> 0\n   \
    \     fib4 += 57 -> 524288\n        fib4 += 58 -> 10", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n) match {\n            case None => 0L\n            case Some(fib4Value)\
    \ => fib4Value\n        }", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n  \
    \      fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n\
    \        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n \
    \       fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n  \
    \      fib4.put(7, 14L)\n        fib4.get(n)", "        val fib4 = new mutable.Array[Long](n)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0,\
    \ 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n\
    \        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n \
    \       fib4.put(7, 14L)\n        fib4.get(n)", "        var fib : Long = 0\n\
    \        var fib2 : Long = 1\n        var fib3 : Long = 1\n        var fib4 :\
    \ Long = 1\n        for(i <- 0 until n) {\n            fib = fib2 + fib3\n   \
    \         fib2 = fib3\n            fib3 = fib4\n            fib4 = fib\n     \
    \   }\n        fib4", "        var fib : mutable.MutableList[Long] = mutable.MutableList[Long]()\n\
    \        fib += 0\n        fib += 0\n        fib += 2\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n", "    \
    \    val fib4 = new mutable.Array[Long](4)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n  \
    \      fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0)\n\
    \        fib4.put(1, 0)\n        fib4.put(2, 2)\n        fib4.put(3, 0)\n    \
    \    fib4.put(4, 0)\n        fib4.put(5, 4)\n        fib4.put(6, 8)\n        fib4.put(7,\
    \ 14)\n        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n  \
    \      fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.Array[Long](4L)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n        fib4.put(1,\
    \ 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n\
    \        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n\
    \        fib4.get(n).asInstanceOf[Long]", "        val fib4 = new mutable.Array[Long](n)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0,\
    \ 0)\n        fib4.put(1, 0)\n        fib4.put(2, 2)\n        fib4.put(3, 0)\n\
    \        fib4.put(4, 0)\n        fib4.put(5, 4)\n        fib4.put(6, 8)\n    \
    \    fib4.put(7, 14)\n        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)", "  \
    \      val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0L)\n\
    \        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n        fib4.put(3, 0L)\n \
    \       fib4.put(4, 0L)\n        fib4.put(5, 4L)\n        fib4.put(6, 8L)\n  \
    \      fib4.put(7, 14L)\n        fib4.get(n)", "        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)"]
stop_tokens:
- "\n    }\n"
