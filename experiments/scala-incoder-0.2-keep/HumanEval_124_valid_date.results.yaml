language: scala
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateToCheck = dateFormat.parse(date)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n   \
    \     val daysInMonth2 = Array(31,29,31,30,31,30,31,30,31,30,31,30,31)\n     \
    \   val daysInMonth3 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31)\n       \
    \ val daysInMonth4 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ daysInMonth5 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth6\
    \ = Array(31,30,31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth7 =\
    \ Array(31,30,31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth8 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth9 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31)\n  \
    \      val daysInMonth10 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31)\n   \
    \     val daysInMonth11 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31)\n    \
    \    val daysInMonth12 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31)\n     \
    \   val daysInMonth = daysInMonth.zip(daysInMonth2).zip(daysInMonth3).zip(daysInMonth4).zip(daysInMonth5).zip(daysInMonth6).zip(daysInMonth7).zip(daysInMonth8).zip(daysInMonth9).zip(daysInMonth10).zip(daysInMonth11).zip(daysInMonth12)\n\
    \        val months = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val months2 =\
    \ Array(4,6,9,11,12)\n        val months3 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val months4 = Array(4,6,9,11,12)\n        val months5 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val months6 = Array(4,6,9,11,12)\n        val months7 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val months8 = Array(4,6,9,11,12)\n        val months9 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val months10 = Array(4,6,9,11,12)\n        val months11 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val months12 = Array(4,6,9,11,12)\n        val months = months.zip(months2).\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps7866rzh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmps7866rzh.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth.zip(daysInMonth2).zip(daysInMonth3).zip(daysInMonth4).zip(daysInMonth5).zip(daysInMonth6).zip(daysInMonth7).zip(daysInMonth8).zip(daysInMonth9).zip(daysInMonth10).zip(daysInMonth11).zip(daysInMonth12)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps7866rzh.scala:45:12 ---------------------------\e[0m\e[0m\n\e\
    [31m45 |\e[0m        \e[33mval\e[0m \e[36mmonths\e[0m = months.zip(months2).\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mmonths is already defined as \e[33mvalue\e[0m \e[35mmonths\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmps7866rzh.scala:18:29 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e\
    [0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps7866rzh.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     "
  stdout: ''
  timestamp: 1659800629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val monthArray = dateArray(0).toString.toInt\n        val dayArray\
    \ = dateArray(1).toString.toInt\n        val year = dateArray(2).toString.toInt\n\
    \        val monthDays = monthArray*30 + dayArray\n        val months = monthArray*31\
    \ + dayArray\n        val days = dayArray\n        val valid = monthDays > 0 &&\
    \ monthDays < 29 && months < 12 && days > 0 && days < 31\n        valid\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_uq76eh9.scala:29)\n\tat Problem.main(tmp_uq76eh9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthIndex = monthArray.indexOf(month)\n        val dayIndex = dayArray.indexOf(day)\n\
    \        val yearIndex = yearArray.indexOf(year)\n        if (monthIndex < 1 ||\
    \ monthIndex > 12) false\n        if (dayIndex < 1 || dayIndex > 31) false\n \
    \       if (monthIndex == 2 && dayIndex > 29) false\n        if (monthIndex ==\
    \ 2 && dayIndex < 1) false\n        if (monthIndex == 3 && dayIndex > 31) false\n\
    \        if (monthIndex == 3 && dayIndex < 1) false\n        if (monthIndex ==\
    \ 4 && dayIndex > 30) false\n        if (monthIndex == 4 && dayIndex < 1) false\n\
    \        if (monthIndex == 5 && dayIndex > 31) false\n        if (monthIndex ==\
    \ 5 && dayIndex < 1) false\n        if (monthIndex == 6 && dayIndex > 30) false\n\
    \        if (monthIndex == 6 && dayIndex < 1) false\n        if (monthIndex ==\
    \ 7 && dayIndex > 31) false\n        if (monthIndex == 7 && dayIndex < 1) false\n\
    \        if (monthIndex == 8 && dayIndex > 31) false\n        if (monthIndex ==\
    \ 8 && dayIndex < 1) false\n        if (monthIndex == 9 && dayIndex > 30) false\n\
    \        if (monthIndex == 9 && dayIndex < 1) false\n        if (monthIndex ==\
    \ 10 && dayIndex > 31) false\n        if (monthIndex == 10 && dayIndex < 1) false\n\
    \        if (monthIndex == 11 && dayIndex > 30) false\n        if (monthIndex\
    \ == 11 && dayIndex < 1) false\n        if (monthIndex == 12 && dayIndex > 31)\
    \ false\n        if (monthIndex == 12 && dayIndex < 1) false\n        true\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi5w4f0zx.scala:56)\n\tat Problem.main(tmpi5w4f0zx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        dateParsed != null\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpenxp_5zt.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString = dateFormat.parse(date)\n\
    \        dateString.toString().length != 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4si7ir53.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        val dateInMillis = dateObject.getTime\n        val dateInDays = dateInMillis\
    \ / 1000L\n        val dateInMonths = dateInDays / 30L\n        val dateInYears\
    \ = dateInMonths / 12L\n        val dateInDaysLessOneMonth = dateInDays - dateInMonths\n\
    \        val dateInDaysLessOneYear = dateInDays - dateInYears\n        val dateInDaysLessOneYearAndOneMonth\
    \ = dateInDays - dateInYears - dateInMonths\n        val dateInDaysLessOneYearAndOneMonthAndOneDay\
    \ = dateInDays - dateInYears - dateInMonths - dateInDays\n        val dateInDaysLessOneYearAndOneMonthAndOneDayAndOneHour\
    \ = dateInDays - dateInYears - dateInMonths - dateInDays - dateInHours\n     \
    \   val dateInDaysLessOneYearAndOneMonthAndOneDayAndOneHourAndOneMinute = dateInDays\
    \ - dateInYears - dateInMonths - dateInDays - dateInHours - dateInMinutes\n  \
    \      val dateInDaysLessOneYearAndOneMonthAndOneDayAndOneHourAndOneMinuteAndOneSecond\
    \ = dateInDays - dateInYears - dateInMonths - dateInDays - dateInHours - dateInMinutes\
    \ - dateInSeconds\n        val dateInDaysLessOneYearAndOneMonthAndOneDayAndOneHourAndOneMinuteAndOneSecondAndOneMillisecond\
    \ = dateInDays - dateInYears - dateInMonths - dateInDays - dateInHours - dateInMinutes\
    \ - dateInSeconds - dateInMilliseconds\n        val dateInDaysLessOneYearAndOneMonthAndOneDayAndOneHourAndOneMinuteAndOneSecondAndOneMillisecond\
    \ = dateInDays - dateInYears - dateInMonths - dateInDays - dateInHours - dateInMinutes\
    \ - dateInSeconds - dateInMilliseconds\n        val dateInDaysLessOneYearAndOneMonthAndOneDayAndOneHourAndOneMinuteAndOneSecondAndOneMillisecond\
    \ = dateInDays - dateInYears - dateInMonths - dateInDays - dateInHours - dateInMinutes\
    \ - dateInSeconds - dateInMilliseconds\n        val dateInDaysLessOneYearAndOneMonthAndOneDayAndOne\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn8tfbw5p.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn8tfbw5p.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateInDaysLessOneYearAndOneMonthAndOneDayAndOneHourAndOneMinuteAndOneSecondAndOneMillisecond\e\
    [0m = dateInDays - dateInYears - dateInMonths - dateInDays - dateInHours - dateInMinutes\
    \ - dateInSeconds - dateInMilliseconds\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateInDaysLessOneYearAndOneMonthAndOneDayAndOneHourAndOneMinuteAndOneSecondAndOneMillisecond\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  dateInDaysLessOneYearAndOneMonthAndOneDayAndOneHourAndOneMinuteAndOneSecondAndOneMillisecond\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpn8tfbw5p.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mdateInDaysLessOneYearAndOneMonthAndOneDayAndOneHourAndOneMinuteAndOneSecondAndOneMillisecond\e\
    [0m = dateInDays - dateInYears - dateInMonths - dateInDays - dateInHours - dateInMinutes\
    \ - dateInSeconds - dateInMilliseconds\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateInDaysLessOneYearAndOneMonthAndOneDayAndOneHourAndOneMinuteAndOneSecondAndOneMillisecond\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  dateInDaysLessOneYearAndOneMonthAndOneDayAndOneHourAndOneMinuteAndOneSecondAndOneMillise"
  stdout: ''
  timestamp: 1659800628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthValid = monthArray.contains(month)\n        val dayValid = dayArray.contains(day)\n\
    \        val yearValid = yearArray.contains(year)\n        val monthValid2 = monthArray.contains(month+1)\n\
    \        val dayValid2 = dayArray.contains(day+1)\n        val yearValid2 = yearArray.contains(year+1)\n\
    \        val monthValid3 = monthArray.contains(month+2)\n        val dayValid3\
    \ = dayArray.contains(day+2)\n        val yearValid3 = yearArray.contains(year+2)\n\
    \        val monthValid4 = monthArray.contains(month+3)\n        val dayValid4\
    \ = dayArray.contains(day+3)\n        val yearValid4 = yearArray.contains(year+3)\n\
    \        val monthValid5 = monthArray.contains(month+4)\n        val dayValid5\
    \ = dayArray.contains(day+4)\n        val yearValid5 = yearArray.contains(year+4)\n\
    \        val monthValid6 = monthArray.contains(month+5)\n        val dayValid6\
    \ = dayArray.contains(day+5)\n        val yearValid6 = yearArray.contains(year+5)\n\
    \        val monthValid7 = monthArray.contains(month+6)\n        val dayValid7\
    \ = dayArray.contains(day+6)\n        val yearValid7 = yearArray.contains(year+6)\n\
    \        val monthValid8 = monthArray.contains(month+7)\n        val dayValid8\
    \ = dayArray.contains(day+7)\n        val yearValid8 = yearArray.contains(year+7)\n\
    \        val monthValid9 = monthArray.contains(month+8)\n        val dayValid9\
    \ = dayArray.contains(day+8)\n        val yearValid9 = yearArray.contains(year+8)\n\
    \        val monthValid10 = monthArray.contains(month+9)\n        val dayValid10\
    \ = dayArray.contains(day+9)\n        val yearValid10 = yearArray.contains(year+9)\n\
    \        val monthValid11 = monthArray.contains(month+10)\n        val dayValid11\
    \ = dayArray.contains(day+10)\n        val yearValid11 = yearArray.contains(year+10)\n\
    \        val monthValid12 = monthArray.contains(month+11)\n        val dayValid12\
    \ = dayArray.\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppjg24zir.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppjg24zir.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val monthArray = dateArray(0).toString.split(\"-\")\n        val\
    \ dayArray = dateArray(1).toString.split(\"-\")\n        val month = monthArray(0).toInt\n\
    \        val day = dayArray(0).toInt\n        val year = dateArray(2).toInt\n\
    \        val daysInMonth = scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scal\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0w4wr8_4.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp0w4wr8_4.scala:24:772\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e\
    [33mval\e[0m \e[36mdaysInMonth\e[0m = scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scala.math.max(scala.math.min(scal\n\
    \e[31m\e[31m   |\e[0m             "
  stdout: ''
  timestamp: 1659800639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwkmgod7f.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj = dateFormat.parse(date)\n\
    \        dateObj.getTime < 0\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuvjsq9xp.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val daysInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val monthArray = Array.ofDim[Int](month)\n        val daysInYear = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val daysInYearArray = Array.ofDim[Int](daysInYear)\n        val daysInYearArray2\
    \ = Array.ofDim[Int](daysInYear)\n        val daysInYearArray3 = Array.ofDim[Int](daysInYear)\n\
    \        val daysInYearArray4 = Array.ofDim[Int](daysInYear)\n        val daysInYearArray5\
    \ = Array.ofDim[Int](daysInYear)\n        val daysInYearArray6 = Array.ofDim[Int](daysInYear)\n\
    \        val daysInYearArray7 = Array.ofDim[Int](daysInYear)\n        val daysInYearArray8\
    \ = Array.ofDim[Int](daysInYear)\n        val daysInYearArray9 = Array.ofDim[Int](daysInYear)\n\
    \        val daysInYearArray10 = Array.ofDim[Int](daysInYear)\n        val daysInYearArray11\
    \ = Array.ofDim[Int](daysInYear)\n        val daysInYearArray12 = Array.ofDim[Int](daysInYear)\n\
    \        val daysInYearArray13 = Array.ofDim[Int](daysInYear)\n        val daysInYearArray14\
    \ = Array.ofDim[Int](daysInYear)\n        val daysInYearArray15 = Array.ofDim[Int](daysInYear)\n\
    \        val daysInYearArray16 = Array.ofDim[Int](daysInYear)\n        val daysInYearArray17\
    \ = Array.ofDim[Int](daysInYear)\n        val daysInYearArray18 = Array.ofDim[Int](daysInYear)\n\
    \        val daysInYearArray19 = Array.ofDim[Int](daysInYear)\n        val daysInYearArray20\
    \ = Array.ofDim[Int](daysInYear)\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp277nz2r0.scala:47:11 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp277nz2r0.scala:22:37 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp277nz2r0.scala:24:19 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ value Calendar is not a member of util\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp277nz2r0.scala:26:36 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        \e[33mval\e[0m \e[36mdaysInYear\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp277nz2r0.scala:48:5 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val daysInMonth = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthArray = scala.collection.mutable.ListBuffer(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val validDay = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val validMonth = scala.collection.mutable.ListBuffer(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val validYear = scala.collection.mutable.ListBuffer(2000,2012,2040,2020,2010,2008,2006,2004,2002,2000)\n\
    \        val validMonthDay = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val validYearDay = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val validMonthYear = scala.collection.mutable.ListBuffer(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val validYearMonth = scala.collection.mutable.ListBuffer(2000,2012,2040,2020,2010,2008,2006,2004,2002,2000)\n\
    \        val validYearDayMonth = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val validMonthYearDay = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val validYearMonthYear = scala.collection.mutable.ListBuffer(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val validYearDayMonthYear = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val validMonthYearDayMonth = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val validYearDayMonthYearDay = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val validYearMonthYearDayMonth = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val validYearDayMonthYearDayMonth = scala.collection.mutable.ListBuffer(31,30,29,28,31,30,31,30,31,\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmoa4mmk1.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmoa4mmk1.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject != null\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa0zrdznc.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed2\
    \ = dateFormat2.parse(date)\n        val dateFormat3 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed3 = dateFormat3.parse(date)\n        val\
    \ dateFormat4 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed4\
    \ = dateFormat4.parse(date)\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed5 = dateFormat5.parse(date)\n        val\
    \ dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed6\
    \ = dateFormat6.parse(date)\n        val dateFormat7 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed7 = dateFormat7.parse(date)\n        val\
    \ dateFormat8 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed8\
    \ = dateFormat8.parse(date)\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed9 = dateFormat9.parse(date)\n        val\
    \ dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed10\
    \ = dateFormat10.parse(date)\n        val dateFormat11 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed11 = dateFormat11.parse(date)\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed12\
    \ = dateFormat12.parse(date)\n        val dateFormat13 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed13 = dateFormat13.parse(date)\n        val\
    \ dateFormat14 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed14\
    \ = dateFormat14.parse(date)\n        val dateFormat15 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed15 = dateFormat15.parse(date)\n        val\
    \ dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed16\
    \ = dateFormat16.parse(date)\n        val dateFormat17 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed17 = dateFormat17.parse(date)\n        val\
    \ dateFormat18 = new SimpleDateFormat(\"MM-dd-yyyy\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcpirbkf.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpvcpirbkf.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcpirbkf.scala:22:30 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcpirbkf.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcpirbkf.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateFormat5\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m           "
  stdout: ''
  timestamp: 1659800629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val validMonth = month <= 12 &&\
    \ month >= 1\n        val validDay = day <= 31 && day >= 1\n        val validYear\
    \ = year <= 9999 && year >= 2000\n        val validDate = (month == dateArray(0).toInt\
    \ && day == dateArray(1).toInt && year == dateArray(2).toInt)\n        validMonth\
    \ && validDay && validYear && validDate\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmpgd29x2an.scala:19)\n\
    \tat Problem$.main(tmpgd29x2an.scala:35)\n\tat Problem.main(tmpgd29x2an.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        val dateInDays = dateParsed.getTime() / 1000\n        val dateInDaysMinusOne\
    \ = dateInDays - 1\n        val dateInDaysMinusOneMinusOne = dateInDaysMinusOne\
    \ - 1\n        val dateInDaysMinusOneMinusOneMinusOne = dateInDaysMinusOneMinusOne\
    \ - 1\n        val dateInDaysMinusOneMinusOneMinusOneMinusOne = dateInDaysMinusOneMinusOneMinusOne\
    \ - 1\n        val dateInDaysMinusOneMinusOneMinusOneMinusOneMinusOne = dateInDaysMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val dateInDaysMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = dateInDaysMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val dateInDaysMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = dateInDaysMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val\
    \ dateInDaysMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne =\
    \ dateInDaysMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n   \
    \     val dateInDaysMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = dateInDaysMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val dateInDaysMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = dateInDaysMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val dateInDaysMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = dateIn\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp_ad31dz.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpp_ad31dz.scala:31:113 -----------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mdateInDaysMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\e\
    [0m = dateIn\n\e[31m\e[31m   |\e[0m                                          \
    \                                                                       ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Not\
    \ found: dateIn\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp_ad31dz.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwkmgod7f.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800625
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        \n        if(months < 1 || months\
    \ > 12) \n            return false\n        if(days < 1 || days > 31) \n     \
    \       return false\n        if(days > 29) \n            return false\n     \
    \   if(months == 2 && days > 30) \n            return false\n        if(months\
    \ == 3 && days > 31) \n            return false\n        if(months == 4 && days\
    \ > 30) \n            return false\n        if(months == 5 && days > 31) \n  \
    \          return false\n        if(months == 6 && days > 30) \n            return\
    \ false\n        if(months == 7 && days > 31) \n            return false\n   \
    \     if(months == 8 && days > 31) \n            return false\n        if(months\
    \ == 9 && days > 30) \n            return false\n        if(months == 10 && days\
    \ > 31) \n            return false\n        if(months == 11 && days > 30) \n \
    \           return false\n        if(months == 12 && days > 31) \n           \
    \ return false\n        if(year < 1000 || year > 2999) \n            return false\n\
    \        true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmp5p31co2k.scala:19)\n\
    \tat Problem$.main(tmp5p31co2k.scala:62)\n\tat Problem.main(tmp5p31co2k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800630
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2012,2040,2020)\n        if(date.isEmpty){\n        \
    \    return false\n        }\n        if(monthArray.contains(month) && dayArray.contains(day)\
    \ && yearArray.contains(year)){\n            return true\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgs_93erw.scala:34)\n\tat Problem.main(tmpgs_93erw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat2 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat4 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat8 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat18 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat23 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat28 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpm91tmwrb.scala:48:11 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateToValidate = dateFormat.parse(date)\n\
    \        val currentDate = Calendar.getInstance()\n        val currentDateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val currentDateToValidate =\
    \ currentDateFormat.parse(currentDate.format(dateToValidate))\n        val currentDateDay\
    \ = currentDate.getActualMaximum(Calendar.DAY_OF_MONTH)\n        val currentDateMonth\
    \ = currentDate.getActualMaximum(Calendar.MONTH)\n        val currentDateYear\
    \ = currentDate.getActualMaximum(Calendar.YEAR)\n        val currentDateDays =\
    \ currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonths\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateYears\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonthDays\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonthDays\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonthDays\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonthDays\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonthDays\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonthDays\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonthDays\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonthDays\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonthDays\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonthDays\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonthDays\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonthDays\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonthDays\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonthDays\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonthDays\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonthDays\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonthDays\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonthDays\
    \ = currentDateToValidate.getTimeInMillis / 1000\n        val currentDateMonthDays\
    \ = current\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9vj13vj9.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mcurrentDateMonthDays\e[0m\
    \ = currentDateToValidate.getTimeInMillis / \e[31m1000\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentDateMonthDays is already defined as \e[33mvalue\e[0m\
    \ \e[35mcurrentDateMonthDays\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9vj13vj9.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mcurrentDateMonthDays\e[0m\
    \ = currentDateToValidate.getTimeInMillis / \e[31m1000\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentDateMonthDays is already defined as \e[33mvalue\e[0m\
    \ \e[35mcurrentDateMonthDays\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9vj13vj9.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mcurrentDateMonthDays\e[0m\
    \ = currentDateToValidate.getTimeInMillis / \e[31m1000\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentDateMonthDays is already defined as \e[33mvalue\e[0m\
    \ \e[35mcurrentDateMonthDays\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9vj13vj9.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mcurrentDateMonthDays\e[0m\
    \ = currentDateToValidate.getTimeInMillis / \e[31m1000\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentDateMonthDays is already defined as \e[33mvalue\e[0m\
    \ \e[35mcurrentDateMonthDays\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659800628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfeeua_4r.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfeeua_4r.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfeeua_4r.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        val dateInMillis = dateObject.getTime\n        val currentTimeInMillis\
    \ = System.currentTimeMillis()\n        val dateInSeconds = dateInMillis / 1000\n\
    \        val currentTimeInSeconds = currentTimeInMillis / 1000\n        val currentYear\
    \ = currentTimeInSeconds / 31536000\n        val currentMonth = currentTimeInSeconds\
    \ / 2628000\n        val currentDay = currentTimeInSeconds / 86400\n        val\
    \ currentHour = currentTimeInSeconds / 3600\n        val currentMinute = currentTimeInSeconds\
    \ / 60\n        val currentSecond = currentTimeInSeconds\n        val currentYearInt\
    \ = currentYear.toInt\n        val currentMonthInt = currentMonth.toInt\n    \
    \    val currentDayInt = currentDay.toInt\n        val currentHourInt = currentHour.toInt\n\
    \        val currentMinuteInt = currentMinute.toInt\n        val currentSecondInt\
    \ = currentSecond.toInt\n        val currentYearMonthDay = currentYearInt * 100\
    \ + currentMonthInt * 10 + currentDayInt\n        val currentYearMonthDayInt =\
    \ currentYearMonthDay.toInt\n        val currentYearMonthDayHour = currentYearMonthDayInt\
    \ * 100 + currentHourInt\n        val currentYearMonthDayHourInt = currentYearMonthDayHour.toInt\n\
    \        val currentYearMonthDayMinute = currentYearMonthDayHourInt * 100 + currentMinuteInt\n\
    \        val currentYearMonthDayMinuteInt = currentYearMonthDayMinute.toInt\n\
    \        val currentYearMonthDaySeconds = currentYearMonthDayMinuteInt * 100 +\
    \ currentSecondInt\n        val currentYearMonthDaySecondsInt = currentYearMonthDaySeconds.toInt\n\
    \        val currentYearMonthDaySecondsHour = currentYearMonthDaySecondsInt *\
    \ 100 + currentHourInt\n        val currentYearMonthDaySecondsHourInt = currentYearMonthDaySecondsHour.toInt\n\
    \        val currentYearMonthDaySecondsMinute = currentYearMonthDaySecondsHourInt\
    \ * 100 + currentMinuteInt\n        val currentYearMonthDaySecondsMinuteInt =\
    \ currentYearMonthDaySecondsMinute.toInt\n        val currentYearMonthDaySecondsSeconds\
    \ = currentYearMonthDaySecondsMinuteInt * 100 + currentSecondInt\n        val\
    \ currentYearMonthDaySecondsSecondsInt = currentYearMonthDaySecondsSeconds.toInt\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpaagk3jtj.scala:50:11 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaagk3jtj.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpaagk3jtj.scala:51:5 ---------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        if(dateArray.length != 3)\n            return false\n        val\
    \ months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n       \
    \ val year = dateArray(2).toInt\n        if(months < 1 || months > 12)\n     \
    \       return false\n        if(days < 1 || days > 31)\n            return false\n\
    \        if(months == 2 && days > 29)\n            return false\n        if(months\
    \ == 2 && days == 29)\n            return false\n        if(months == 3 && days\
    \ > 30)\n            return false\n        if(months == 4 && days > 30)\n    \
    \        return false\n        if(months == 5 && days > 30)\n            return\
    \ false\n        if(months == 6 && days > 30)\n            return false\n    \
    \    if(months == 7 && days > 30)\n            return false\n        if(months\
    \ == 8 && days > 30)\n            return false\n        if(months == 9 && days\
    \ > 30)\n            return false\n        if(months == 10 && days > 30)\n   \
    \         return false\n        if(months == 11 && days > 30)\n            return\
    \ false\n        if(months == 12 && days > 30)\n            return false\n   \
    \     if(months == 1 && days > 31)\n            return false\n        if(months\
    \ == 2 && days == 31)\n            return false\n        if(months == 3 && days\
    \ == 31)\n            return false\n        if(months == 4 && days == 31)\n  \
    \          return false\n        if(months == 5 && days == 31)\n            return\
    \ false\n        if(months == 6 && days == 31)\n            return false\n   \
    \     if(months == 7 && days == 31)\n            return false\n        if(months\
    \ == 8 && days == 31)\n            return false\n        if(months == 9 && days\
    \ == 31)\n            return false\n        if(months == 10 && days == 31)\n \
    \           return false\n        if(months == 11 && days == 31)\n           \
    \ return false\n        if(months == 12 && days == 31)\n            return false\n\
    \        if(months == 1 && days == 30)\n            return false\n        if(months\
    \ == 2 && days == 30)\n            return false\n        if(months == 3 && days\
    \ == 30)\n            return false\n        if(months == 4 && days == 30)\n  \
    \          return false\n        if(months == 5 && days == 30)\n            return\
    \ false\n        if(months == 6 && days == 30)\n            return false\n   \
    \     if(months == 7 && days == 30)\n            return false\n        if(months\
    \ == 8 && days == 30)\n            return false\n        if(months == 9 && days\
    \ == 30)\n            return false\n        if(months == 10 && days == 30)\n \
    \           return false\n        if(months == 11 && days == 30)\n           \
    \ return false\n        if(months == 12 && days == 30)\n            return false\n\
    \        if(month\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp52t3uvk5.scala:101:4 ---------------------------\e\
    [0m\e[0m\n\e[31m101 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp52t3uvk5.scala:100:11\
    \ -----------------------\e[0m\e[0m\n\e[31m100 |\e[0m        \e[33mif\e[0m(month\n\
    \e[31m\e[31m    |\e[0m           ^^^^^\e[0m\n\e[31m    |\e[0m           Not found:\
    \ month\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val monthArray = dateArray(0).toString.split(\"-\")\n        val\
    \ dayArray = dateArray(1).toString.split(\"-\")\n        val monthDayArray = monthArray(0).toString.split(\"\
    -\")\n        val dayMonthArray = dayArray(0).toString.split(\"-\")\n        val\
    \ dayMonthArrayLength = dayMonthArray.length\n        val monthArrayLength = monthArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArrayLength\n        val monthArrayLength = monthArrayLength\n        val\
    \ dayArrayLength = dayArray.length\n        val dayArrayLength = dayArrayLength\n\
    \        val monthArrayLength = monthArrayLength\n        val dayMonthArrayLength\
    \ = dayMonthArrayLength\n        val monthDayArrayLength = monthDayArrayLength\n\
    \        val monthDayArrayLength = monthDayArrayLength\n        val monthDayArrayLength\
    \ = monthDayArrayLength\n        val monthDayArrayLength = monthDayArrayLength\n\
    \        val monthDayArrayLength = monthDayArrayLength\n        val monthDayArrayLength\
    \ = monthDayArrayLength\n        val monthDayArrayLength = monthDayArrayLength\n\
    \        val monthDayArrayLength = monthDayArrayLength\n        val monthDayArrayLength\
    \ = monthDayArrayLength\n        val monthDayArrayLength = monthDayArrayLength\n\
    \        val monthDayArrayLength = monthDayArrayLength\n        val monthDayArrayLength\
    \ = monthDayArrayLength\n        val monthDayArrayLength = monthDayArrayLength\n\
    \        val monthDayArrayLength = monthDayArrayLength\n        val monthDayArrayLength\
    \ = monthDayArrayLength\n        val monthDayArrayLength = monthDayArrayLength\n\
    \        val monthDayArrayLength = monthDayArrayLength\n        val monthDayArrayLength\
    \ = monthDayArrayLength\n        val monthDayArrayLength = monthDayArrayLength\n\
    \        val monthDayArrayLength = monthDayArrayLength\n        val monthDayArrayLength\
    \ = monthDayArrayLength\n        val monthDayArrayLength = monthDayArrayLength\n\
    \        val monthDayArrayLength = monthDayArrayLength\n        val monthDayArrayLength\
    \ = monthDayArrayLength\n        val monthDayArrayLength = monthDayArrayLength\n\
    \        val monthDayArrayLength = monthDayArrayLength\n        val monthDayArrayLength\
    \ = monthDayArrayLength\n        val monthDayArrayLength = monthDayArrayLength\n\
    \        val monthDayArrayLength = monthDayArrayLength\n        val monthDayArrayLength\
    \ = monthDayArrayLength\n        val monthDayArrayLength = monthDayArrayLength\n\
    \        val monthDayArrayLength = monthDayArrayLength\n        val monthDayArrayLength\
    \ = monthDayArrayLength\n        \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw9o5pspd.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw9o5pspd.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmonthArrayLength\e[0m = monthArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmonthArrayLength is already defined as \e[33mvalue\e[0m \e[35mmonthArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw9o5pspd.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mdayArrayLength\e[0m = dayArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdayArrayLength is already defined as \e[33mvalue\e[0m \e[35mdayArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw9o5pspd.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mmonthArrayLength\e[0m = monthArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmonthArrayLength is already defined as \e[33mvalue\e[0m \e[35mmonthArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw9o5pspd.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mdayMonthArrayLength\e[0m = dayMonthArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31)\n        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val monthsInLeapYear\
    \ = List(12, 4, 6, 9, 11)\n        val daysInMonthsInMonth = List(31, 28, 31,\
    \ 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYear = List(31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val daysInMonthLeapYearLeapYearLeapYear\
    \ = List(31, 28, 31, 30, 31, 30, \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbcohfx2u.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbcohfx2u.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonthLeapYearLeapYearLeapYearLeapYear\e[0m = List(\e[31m31\e[0m,\
    \ \e[31m28\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e\
    [31m31\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthLeapYearLeapYearLeapYearLeapYear is already defined\
    \ as \e[33mvalue\e[0m \e[35mdaysInMonthLeapYearLeapYearLeapYearLeapYear\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbcohfx2u.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthLeapYearLeapYearLeapYearLeapYear\e\
    [0m = List(\e[31m31\e[0m, \e[31m28\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e\
    [0m, \e[31m30\e[0m, \e[31m31\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e[0m,\
    \ \e[31m30\e[0m, \e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthLeapYearLeapYearLeapYearLeapYear is already defined\
    \ as \e[33mvalue\e[0m \e[35mdaysInMonthLeapYearLeapYearLeapYearLeapYear\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbcohfx2u.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthLeapYearLeapYearLeapYearLeapYear\e\
    [0m = List(\e[31m31\e[0m, \e[31m28\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e\
    [0m, \e[31m30\e[0m, \e[31m31\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e[0m,\
    \ \e[31m30\e[0m, \e[31m31\e[0m)\n\e[31m\e[31m   |"
  stdout: ''
  timestamp: 1659800635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        if(dateArray.length != 3)\n            return false\n        val\
    \ month = dateArray(0)\n        val day = dateArray(1)\n        val year = dateArray(2)\n\
    \        if(month.length != 2 || month.charAt(0) > '0' || month.charAt(0) > '1')\n\
    \            return false\n        if(day.length != 2 || day.charAt(0) > '0' ||\
    \ day.charAt(0) > '1')\n            return false\n        if(year.length != 4\
    \ || year.charAt(3) > '0' || year.charAt(3) > '9')\n            return false\n\
    \        if(month.charAt(0) == '0' && month.charAt(1) == '0' && month.charAt(2)\
    \ == '0' && month.charAt(3) == '0')\n            return false\n        if(month.charAt(0)\
    \ == '0' && month.charAt(1) == '0' && month.charAt(2) == '0' && month.charAt(3)\
    \ == '1')\n            return false\n        if(month.charAt(0) == '0' && month.charAt(1)\
    \ == '0' && month.charAt(2) == '0' && month.charAt(3) == '2')\n            return\
    \ false\n        if(month.charAt(0) == '0' && month.charAt(1) == '0' && month.charAt(2)\
    \ == '0' && month.charAt(3) == '3')\n            return false\n        if(month.charAt(0)\
    \ == '0' && month.charAt(1) == '0' && month.charAt(2) == '0' && month.charAt(3)\
    \ == '4')\n            return false\n        if(month.charAt(0) == '0' && month.charAt(1)\
    \ == '0' && month.charAt(2) == '0' && month.charAt(3) == '5')\n            return\
    \ false\n        if(month.charAt(0) == '0' && month.charAt(1) == '0' && month.charAt(2)\
    \ == '0' && month.charAt(3) == '6')\n            return false\n        if(month.charAt(0)\
    \ == '0' && month.charAt(1) == '0' && month.charAt(2) == '0' && month.charAt(3)\
    \ == '7')\n            return false\n        if(month.charAt(0) == '0' && month.charAt(1)\
    \ == '0' && month.charAt(2) == '0' && month.charAt(3) == '8')\n            return\
    \ false\n        if(month.charAt(0) == '0' && month.charAt(1) == '0' && month.charAt(2)\
    \ == '0' && month.charAt(3) == '9')\n            return false\n        if(month.charAt(0)\
    \ == '0' && month.charAt(1) == '0' && month.charAt(2) == '0' && month.charAt(3)\
    \ == '10')\n            return false\n        if(month.charAt(0) == '0' && month.charAt(1)\
    \ == '0' && month.charAt(2) == '0' && month.charAt(3) == '11')\n            return\
    \ false\n        if(month.charAt(0) == '0' && month\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpo3e816mr.scala:50:108 ----------------------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mif\e[0m(month.charAt(\e[31m0\e[0m) == \e\
    [31m'0'\e[0m && month.charAt(\e[31m1\e[0m) == \e[31m'0'\e[0m && month.charAt(\e\
    [31m2\e[0m) == \e[31m'0'\e[0m && month.charAt(\e[31m3\e[0m) == '1\e[31m0\e[0m')\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                    ^\e[0m\n\e[31m   |\e[0m \
    \                                             unclosed character literal\n\e[31m\e\
    [31m-- Error: /tmp/tmpo3e816mr.scala:50:111 ----------------------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mif\e[0m(month.charAt(\e[31m0\e[0m) == \e\
    [31m'0'\e[0m && month.charAt(\e[31m1\e[0m) == \e[31m'0'\e[0m && month.charAt(\e\
    [31m2\e[0m) == \e[31m'0'\e[0m && month.charAt(\e[31m3\e[0m) == '1\e[31m0\e[0m')\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                              unclosed character literal\n\e\
    [31m\e[31m-- Error: /tmp/tmpo3e816mr.scala:52:108 ----------------------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mif\e[0m(month.charAt(\e[31m0\e[0m) == \e\
    [31m'0'\e[0m && month.charAt(\e[31m1\e[0m) == \e[31m'0'\e[0m && month.charAt(\e\
    [31m2\e[0m) == \e[31m'0'\e[0m && month.charAt(\e[31m3\e[0m) == '1\e[31m1\e[0m')\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                    ^\e[0m\n\e[31m   |\e[0m \
    \                                             unclosed character literal\n\e[31m\e\
    [31m-- Error: /tmp/tmpo3e816mr.scala:52:111 ----------------------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mif\e[0m(month.charAt(\e[31m0\e[0m) == \e\
    [31m'0'\e[0m && month.charAt(\e[31m1\e[0m) == \e[31m'0'\e[0m && month.charAt(\e\
    [31m2\e[0m) == \e[31m'0'\e[0m && month.charAt(\e[31m3\e[0m) == '1\e[31m1\e[0m')\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \               "
  stdout: ''
  timestamp: 1659800632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfeeua_4r.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfeeua_4r.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfeeua_4r.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val dayArray2 = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val yearArray2 = Array(2010,2011,2012)\n        val monthArray3 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray3 = Array(0,31,30,31,30,31,30,31)\n        val yearArray3\
    \ = Array(2001,2003,2005,2007,2009,2011,2013)\n        val monthArray4 = Array(4,6,9,11)\n\
    \        val dayArray4 = Array(0,31,30,31,30,31,30)\n        val yearArray4 =\
    \ Array(2004,2006,2010,2012)\n        val monthArray5 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray5 = Array(0,31,30,31,30,31,30)\n        val yearArray5 =\
    \ Array(2002,2004,2006,2010,2012)\n        val monthArray6 = Array(4,6,9,11)\n\
    \        val dayArray6 = Array(0,31,30,31,30,31)\n        val yearArray6 = Array(2003,2005,2007,2009,2011,2013)\n\
    \        val monthArray7 = Array(1,3,5,7,8,10,12)\n        val dayArray7 = Array(0,31,30,31,30,31)\n\
    \        val yearArray7 = Array(2004,2006,2010,2012)\n        val monthArray8\
    \ = Array(4,6,9,11)\n        val dayArray8 = Array(0,31,30,31,30,31)\n       \
    \ val yearArray8 = Array(2005,2007,2009,2011,2013)\n        val monthArray9 =\
    \ Array(1,3,5,7,8,10,12)\n        val dayArray9 = Array(0,31,30,31,30,31)\n  \
    \      val yearArray9 = Array(2006,2010,2012)\n        val monthArray10 = Array(4,6,9,11)\n\
    \        val dayArray10 = Array(0,31,30,31,30,31)\n        val yearArray10 = Array(2007,2009,2011,2013)\n\
    \        val monthArray11 = Array(1,3,5,7,8,10,12)\n        val day\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph6ce0wq9.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmph6ce0wq9.scala:54:5 ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        dateParsed.getTime > System.currentTimeMillis\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptn88apdt.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val monthArray = dateArray(0).toString.toInt\n        val dayArray\
    \ = dateArray(1).toString.toInt\n        val yearArray = dateArray(2).toString.toInt\n\
    \        val monthDaysArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthDaysArray2\
    \ = Array(4,6,9,11)\n        val monthDaysArray3 = Array(2)\n        val monthDaysArray4\
    \ = Array(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val monthDaysArray5 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val\
    \ monthDaysArray6 = Array(4,6,9,11)\n        val monthDaysArray7 = Array(2)\n\
    \        val monthDaysArray8 = Array(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val monthDaysArray9 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val\
    \ monthDaysArray10 = Array(4,6,9,11)\n        val monthDaysArray11 = Array(2)\n\
    \        val monthDaysArray12 = Array(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val monthDaysArray13 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val\
    \ monthDaysArray14 = Array(4,6,9,11)\n        val monthDaysArray15 = Array(2)\n\
    \        val monthDaysArray16 = Array(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val monthDaysArray17 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val\
    \ monthDaysArray18 = Array(4,6,9,11)\n        val monthDaysArray19 = Array(2)\n\
    \        val monthDaysArray20 = Array(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val monthDaysArray21 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val\
    \ monthDaysArray22 = Array(4,6,9,11)\n        val monthDaysArray23 = Array(2)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ijsnjuw.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800637
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2012,2040,2020,2020,2020,2020,2020,2020,2020,2020,2020,2020,2020,2020,2020,2020)\n\
    \        if(dateArray.length != 3){\n            return false\n        }\n   \
    \     if(monthArray.contains(month) == false){\n            return false\n   \
    \     }\n        if(dayArray.contains(day) == false){\n            return false\n\
    \        }\n        if(yearArray.contains(year) == false){\n            return\
    \ false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfz0v6poi.scala:40)\n\tat Problem.main(tmpfz0v6poi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        dateParsed != null\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpenxp_5zt.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfeeua_4r.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfeeua_4r.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfeeua_4r.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2012,2040,2020)\n        val monthArray2 = Array(4,6,9,11)\n\
    \        val daysArray2 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray2 = Array(2020,2012,2040,2000)\n        val monthArray3 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray3 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray3 = Array(2000,2012,2040,2020)\n        val monthArray4 = Array(4,6,9,11)\n\
    \        val daysArray4 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray4 = Array(2000,2012,2040,2020)\n        val monthArray5 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysArray5 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray5 = Array(2000,2012,2040,2020)\n        val monthArray6 = Array(4,6,9,11)\n\
    \        val daysArray6 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray6 = Array(2000,2012,2040,2020)\n        val monthArray7 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysArray7 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray7 = Array(2000,2012,2040,2020)\n        val monthArray8 = Array(4,6,9,11)\n\
    \        val daysArray8 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray8 = Array(2000,2012,2040,2020)\n        val monthArray9 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysArray9 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray9 = Array(2000,2012,2040,2020)\n        val monthArray10 = Array(4,6,9,11)\n\
    \        val daysArray10 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n       \
    \ val yearArray10 = Array(2000,2012,2040,\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprm9mg1km.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprm9mg1km.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj = dateFormat.parse(date)\n\
    \        dateObj.getTime < System.currentTimeMillis()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyu9ovtby.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val monthArray = dateArray(0).toString.split(\"-\")\n        val\
    \ dayArray = dateArray(1).toString.split(\"-\")\n        val monthLength = monthArray.length\n\
    \        val dayLength = dayArray.length\n        val monthValid = monthArray.forall(month\
    \ => month >= 1 && month <= 12)\n        val dayValid = dayArray.forall(day =>\
    \ day >= 1 && day <= 31)\n        val dayNotValid = dayArray.forall(day => day\
    \ >= 1 && day <= 30)\n        val dayNotValid2 = dayArray.forall(day => day >=\
    \ 1 && day <= 29)\n        val monthNotValid = monthArray.forall(month => month\
    \ >= 1 && month <= 12)\n        val dateValid = monthLength == 2 && dayLength\
    \ == 2 && monthValid && dayValid && dayNotValid && dayNotValid2 && monthNotValid\n\
    \        dateValid\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoqowq0_s.scala:23:61\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmonthValid\e\
    [0m = monthArray.forall(\e[36mmonth\e[0m => month >= \e[31m1\e[0m && month <=\
    \ \e[31m12\e[0m)\n\e[31m\e[31m   |\e[0m                                      \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \                       Found:    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m      \
    \                                               Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoqowq0_s.scala:23:75 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmonthValid\e[0m = monthArray.forall(\e\
    [36mmonth\e[0m => month >= \e[31m1\e[0m && month <= \e[31m12\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \        ^^\e[0m\n\e[31m   |\e[0m                                            \
    \        Found:    (\e[31m12\e[0m : Int)\n\e[31m   |\e[0m                    \
    \                                Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpoqowq0_s.scala:24:53 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdayValid\e[0m = dayArray.forall(\e\
    [36mday\e[0m => day >= \e[31m1\e[0m && day <= \e[31m31\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                                     Found:    (\e[31m1\e[0m\
    \ : Int)\n\e[31m   |\e[0m                                                    \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoqowq0_s.scala:24:65\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdayValid\e\
    [0m = dayArray.forall(\e[36mday\e[0m => day >= \e[31m1\e[0m && day <= \e[31m31\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                               "
  stdout: ''
  timestamp: 1659800640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfeeua_4r.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfeeua_4r.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfeeua_4r.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj = dateFormat.parse(date)\n\
    \        dateObj.getTime != 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9e0g7ef7.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2012,2040,2020)\n        val validMonth = monthArray.contains(month)\n\
    \        val validDay = dayArray.contains(day)\n        val validYear = yearArray.contains(year)\n\
    \        val validDate = validMonth && validDay && validYear\n        validDate\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa0fp6t1r.scala:32)\n\tat Problem.main(tmpa0fp6t1r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        if(dateArray.length != 3)\n            return false\n        val\
    \ months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n       \
    \ val year = dateArray(2).toInt\n        if(months < 1 || months > 12)\n     \
    \       return false\n        if(days < 1 || days > 31)\n            return false\n\
    \        if(months == 2 && days > 29)\n            return false\n        if(months\
    \ == 2 && days == 29)\n            return false\n        if(months == 3 && days\
    \ > 30)\n            return false\n        if(months == 3 && days == 30)\n   \
    \         return false\n        if(months == 4 && days > 31)\n            return\
    \ false\n        if(months == 4 && days == 31)\n            return false\n   \
    \     if(months == 6 && days > 30)\n            return false\n        if(months\
    \ == 6 && days == 30)\n            return false\n        if(months == 9 && days\
    \ > 30)\n            return false\n        if(months == 9 && days == 30)\n   \
    \         return false\n        if(months == 11 && days > 30)\n            return\
    \ false\n        if(months == 11 && days == 30)\n            return false\n  \
    \      if(months == 12 && days > 31)\n            return false\n        if(months\
    \ == 12 && days == 31)\n            return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp59660546.scala:54:8\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m        \e[33mif\e[0m(months\
    \ == \e[31m12\e[0m && days == \e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m        ^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Boolean\n\
    \e[31m   |\e[0m        Maybe you are missing an else part for the conditional?\n\
    \e[31m55 |\e[0m            \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject.isValid\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp08xg95p4.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val monthArray = dateArray(0).toString.toInt\n        val dayArray\
    \ = dateArray(1).toString.toInt\n        val year = dateArray(2).toString.toInt\n\
    \        val monthDays = monthArray*30 + dayArray\n        if(monthDays < 1 ||\
    \ monthDays > 31) {\n            return false\n        }\n        if(monthArray<1\
    \ || monthArray>12) {\n            return false\n        }\n        if(dayArray<1\
    \ || dayArray>30) {\n            return false\n        }\n        if(year<1 ||\
    \ year>9999) {\n            return false\n        }\n        true\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpldjkgwr4.scala:38)\n\tat Problem.main(tmpldjkgwr4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfeeua_4r.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfeeua_4r.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfeeua_4r.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwkmgod7f.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        val year = dateObject.getYear\n        val month = dateObject.getMonthValue\n\
    \        val day = dateObject.getDayOfMonth\n        val daysInMonth = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"12-31\").getDayOfMonth\n        val daysInMonth30 = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"31-30\").getDayOfMonth\n        val daysInMonth29 = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"29-29\").getDayOfMonth\n        val daysInMonth28 = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"28-28\").getDayOfMonth\n        val daysInMonth27 = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"27-27\").getDayOfMonth\n        val daysInMonth26 = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"26-26\").getDayOfMonth\n        val daysInMonth25 = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"25-25\").getDayOfMonth\n        val daysInMonth24 = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"24-24\").getDayOfMonth\n        val daysInMonth23 = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"23-23\").getDayOfMonth\n        val daysInMonth22 = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"22-22\").getDayOfMonth\n        val daysInMonth21 = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"21-21\").getDayOfMonth\n        val daysInMonth20 = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"20-20\").getDayOfMonth\n        val daysInMonth19 = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"19-19\").getDayOfMonth\n        val daysInMonth18 = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"18-18\").getDayOfMonth\n        val daysInMonth17 = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"17-17\").getDayOfMonth\n        val daysInMonth16 = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"16-16\").getDayOfMonth\n        val daysInMonth15 = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"15-15\").getDayOfMonth\n        val daysInMonth14 = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"14-14\").getDayOfMonth\n        val daysInMonth\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnhfgoyct.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnhfgoyct.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnhfgoyct.scala:23:26\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mdaysInMonth\e[0m = DateTimeFormat.forPattern(\e[31m\"MM-dd\"\e[0m).parse(\e\
    [31m\"12-31\"\e[0m).getDayOfMonth\n\e[31m\e[31m   |\e[0m                     \
    \     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ DateTimeFormat\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnhfgoyct.scala:24:28\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mdaysInMonth30\e[0m = DateTimeFormat.forPattern(\e[31m\"MM-dd\"\e[0m).parse(\e\
    [31m\"31-30\"\e[0m).getDayOfMonth\n\e[31m\e[31m   |\e[0m                     \
    \       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found:\
    \ DateTimeFormat\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnhfgoyct.scala:25:28\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mdaysInMonth29\e[0m = DateTimeFormat.forPattern(\e[31m\"MM-dd\"\e[0m).parse(\e\
    [31m\"29-29\"\e[0m).getDayOfMonth\n\e[31m\e[31m   |\e[0m                     \
    \       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found:\
    \ DateTimeFormat\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error"
  stdout: ''
  timestamp: 1659800640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val validMonths = monthArray.contains(months)\n        val validDays\
    \ = daysArray.contains(days)\n        val validYear = yearArray.contains(year)\n\
    \        val validDate = validMonths && validDays && validYear\n        validDate\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgbli1ik3.scala:32)\n\tat Problem.main(tmpgbli1ik3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject.isValid\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp08xg95p4.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        if(dateArray.length != 3) {\n            return false\n        }\n\
    \        val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        if(months < 1 || months > 12)\
    \ {\n            return false\n        }\n        if(days < 1 || days > 31) {\n\
    \            return false\n        }\n        if(months == 2 && days > 29) {\n\
    \            return false\n        }\n        if(months == 4 || months == 6 ||\
    \ months == 9 || months == 11) {\n            return false\n        }\n      \
    \  if(months == 1) {\n            if(days > 30) {\n                return false\n\
    \            }\n        }\n        if(year < 1000 || year > 2999) {\n        \
    \    return false\n        }\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp48dg6s9v.scala:51)\n\tat Problem.main(tmp48dg6s9v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateToCheck = dateFormat.parse(date)\n\
    \        val currentDate = Calendar.getInstance()\n        val currentYear = currentDate.getTime.getYear\n\
    \        val currentMonth = currentDate.getTime.getMonth\n        val currentDay\
    \ = currentDate.getTime.getDay\n        val currentHour = currentDate.getTime.getHour\n\
    \        val currentMinute = currentDate.getTime.getMinute\n        val currentSecond\
    \ = currentDate.getTime.getSecond\n        val currentMillisecond = currentDate.getTime.getMillisecond\n\
    \        val currentDate = currentYear.toInt * 10000 + currentMonth.toInt * 100\
    \ + currentDay.toInt\n        val currentYear2 = currentDate.getTime.getYear\n\
    \        val currentMonth2 = currentDate.getTime.getMonth\n        val currentDay2\
    \ = currentDate.getTime.getDay\n        val currentHour2 = currentDate.getTime.getHour\n\
    \        val currentMinute2 = currentDate.getTime.getMinute\n        val currentSecond2\
    \ = currentDate.getTime.getSecond\n        val currentMillisecond2 = currentDate.getTime.getMillisecond\n\
    \        val currentDate2 = currentYear2.toInt * 10000 + currentMonth2.toInt *\
    \ 100 + currentDay2.toInt\n        val currentYear3 = currentDate2.getTime.getYear\n\
    \        val currentMonth3 = currentDate2.getTime.getMonth\n        val currentDay3\
    \ = currentDate2.getTime.getDay\n        val currentHour3 = currentDate2.getTime.getHour\n\
    \        val currentMinute3 = currentDate2.getTime.getMinute\n        val currentSecond3\
    \ = currentDate2.getTime.getSecond\n        val currentMillisecond3 = currentDate2.getTime.getMillisecond\n\
    \        val currentYear4 = currentDate2.getTime.getYear\n        val currentMonth4\
    \ = currentDate2.getTime.getMonth\n        val currentDay4 = currentDate2.getTime.getDay\n\
    \        val currentHour4 = currentDate2.getTime.getHour\n        val currentMinute4\
    \ = currentDate2.getTime.getMinute\n        val currentSecond4 = currentDate2.getTime.getSecond\n\
    \        val currentMillisecond4 = currentDate2.getTime.getMillisecond\n     \
    \   val currentYear5 = currentDate2.getTime.getYear\n        val currentMonth5\
    \ = currentDate2.getTime.getMonth\n        val currentDay5 = currentDate2.getTime.getDay\n\
    \        val currentHour5 = currentDate2.getTime.getHour\n        val currentMinute5\
    \ = currentDate2.getTime.getMinute\n        val currentSecond5 = currentDate2.getTime.getSecond\n\
    \        val currentMillisecond5 = currentDate2.getTime\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc7oq78ph.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mcurrentDate\e[0m = currentYear.toInt\
    \ * \e[31m10000\e[0m + currentMonth.toInt * \e[31m100\e[0m + currentDay.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentDate is already defined as \e[33mvalue\e[0m \e[35mcurrentDate\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpc7oq78ph.scala:18:29 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e[0m \e\
    [35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                  Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpc7oq78ph.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcurrentDate\e[0m = Calendar.getInstance()\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Not found: Calendar\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpc7oq78ph.scala:58:5 ---------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659800640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat2 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat4 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat8 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat18 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat23 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat28 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpm91tmwrb.scala:48:11 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659800629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = List(1, 3, 5,\
    \ 7, 8, 10, 12)\n        val dayArray = List(1, 30, 29)\n        val yearArray\
    \ = List(1, 12)\n        val monthIndex = monthArray.indexOf(month)\n        val\
    \ dayIndex = dayArray.indexOf(day)\n        val yearIndex = yearArray.indexOf(year)\n\
    \        val isMonthValid = monthIndex >= 0 && monthIndex < 12\n        val isDayValid\
    \ = dayIndex >= 0 && dayIndex < 30\n        val isYearValid = yearIndex >= 0 &&\
    \ yearIndex < 12\n        val isDateValid = isMonthValid && isDayValid && isYearValid\n\
    \        isDateValid\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg3_007cf.scala:35)\n\tat Problem.main(tmpg3_007cf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj = dateFormat.parse(date)\n\
    \        dateObj.getTime > 0\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpifpz2ack.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val daysInMonth = scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw2x_ncr2.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpw2x_ncr2.scala:22:1823\
    \ ---------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e\
    [33mval\e[0m \e[36mdaysInMonth\e[0m = scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(s"
  stdout: ''
  timestamp: 1659800642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date)\n\
    \        dateArray.getTime != 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphb3k350n.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        val dateInMillis = dateObject.getTime\n        val todayInMillis = Calendar.getInstance().getTimeInMillis\n\
    \        val dateInDays = dateInMillis / 1000\n        val todayInDays = todayInMillis\
    \ / 1000\n        val dateInMonths = dateInDays / 30\n        val todayInMonths\
    \ = todayInDays / 30\n        val dateInYears = dateInMonths / 12\n        val\
    \ todayInYears = todayInMonths / 12\n        val dateInDaysNotLessThanOneOrHigherThan31\
    \ = dateInDays < 1 || dateInDays > 31\n        val dateInDaysNotLessThanOneOrHigherThan30\
    \ = dateInDays < 1 || dateInDays > 30\n        val dateInDaysNotLessThanOneOrHigherThan29\
    \ = dateInDays < 1 || dateInDays > 29\n        val dateInMonthsNotLessThanOneOrHigherThan12\
    \ = dateInMonths < 1 || dateInMonths > 12\n        val dateInYearsNotLessThanOneOrHigherThan12\
    \ = dateInYears < 1 || dateInYears > 12\n        val dateInDaysNotLessThanOneOrHigherThan31AndInMonthsNotLessThanOneOrHigherThan12\
    \ = dateInDays < 1 || dateInDays > 31 || dateInMonths < 1 || dateInMonths > 12\n\
    \        val dateInDaysNotLessThanOneOrHigherThan30AndInMonthsNotLessThanOneOrHigherThan12\
    \ = dateInDays < 1 || dateInDays > 30 || dateInMonths < 1 || dateInMonths > 12\n\
    \        val dateInDaysNotLessThanOneOrHigherThan29AndInMonthsNotLessThanOneOrHigherThan12\
    \ = dateInDays < 1 || dateInDays > 29 || dateInMonths < 1 || dateInMonths > 12\n\
    \        val dateInDaysNotLessThanOneOrHigherThan31AndInYearsNotLessThanOneOrHigherThan12\
    \ = dateInDays < 1 || dateInDays > 31 || dateInYears < 1 || dateInYears > 12\n\
    \        val dateInDaysNotLessThanOneOrHigherThan30AndInYearsNotLessThanOneOrHigherThan12\
    \ = dateInDays < 1 || dateInDays > 30 || dateInYears < 1 || dateInYears > 12\n\
    \        val dateInDaysNotLessThan\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuufmvmp2.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuufmvmp2.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuufmvmp2.scala:21:28\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mtodayInMillis\e[0m = Calendar.getInstance().getTimeInMillis\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                   Not found: Calendar\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpuufmvmp2.scala:39:5 ---------------------\e[0m\e\
    [0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfeeua_4r.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfeeua_4r.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfeeua_4r.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfeeua_4r.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfeeua_4r.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfeeua_4r.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateToCheck = dateFormat.parse(date)\n\
    \        val currentDate = Calendar.getInstance()\n        val currentYear = currentDate.getTime.getYear\n\
    \        val currentMonth = currentDate.getTime.getMonth\n        val currentDay\
    \ = currentDate.getTime.getDay\n        val currentHour = currentDate.getTime.getHour\n\
    \        val currentMinute = currentDate.getTime.getMinute\n        val currentSecond\
    \ = currentDate.getTime.getSecond\n        val currentMillisecond = currentDate.getTime.getMillisecond\n\
    \        val currentTimeZone = currentDate.getTimeZone\n        val currentTimeZoneOffset\
    \ = currentTimeZone.getRawOffset\n        val currentTimeZoneID = currentTimeZone.getID\n\
    \        val currentTimeZoneName = currentTimeZone.getDisplayName\n        val\
    \ currentTimeZoneIsDST = currentTimeZone.isDaylightTime\n        val currentTimeZoneIsLocal\
    \ = currentTimeZone.isLocalTime\n        val currentTimeZoneIsUtc = currentTimeZone.isUtc\n\
    \        val currentTimeZoneIsSystemV = currentTimeZone.isSystemV\n        val\
    \ currentTimeZoneIsOffsetTransition = currentTimeZone.isOffsetTransition\n   \
    \     val currentTimeZoneIsOffsetGap = currentTimeZone.isOffsetGap\n        val\
    \ currentTimeZoneIsDSTTransition = currentTimeZone.isDSTTransition\n        val\
    \ currentTimeZoneIsDSTGap = currentTimeZone.isDSTGap\n        val currentTimeZoneIsDSTTransitionInverted\
    \ = currentTimeZone.isDSTTransitionInverted\n        val currentTimeZoneIsDSTGapInverted\
    \ = currentTimeZone.isDSTGapInverted\n        val currentTimeZoneIsDSTTransitionInvertedInverted\
    \ = currentTimeZone.isDSTTransitionInvertedInverted\n        val currentTimeZoneIsDSTGapInvertedInverted\
    \ = currentTimeZone.isDSTGapInvertedInverted\n        val currentTimeZoneIsOffsetTransitionInverted\
    \ = currentTimeZone.isOffsetTransitionInverted\n        val currentTimeZoneIsOffsetGapInverted\
    \ = currentTimeZone.isOffsetGapInverted\n        val currentTimeZoneIsOffsetTransitionInvertedInverted\
    \ = currentTimeZone.isOffsetTransitionInvertedInverted\n        val currentTimeZoneIsOffsetGapInvertedInvertedInverted\
    \ = currentTimeZone.isOffsetGapInvertedInvertedInverted\n        val currentTimeZoneIsOffsetTransitionInvertedInvertedInverted\
    \ = currentTimeZone.isOffsetTransitionInvertedInvertedInverted\n        val currentTimeZoneIsOffsetTransitionInvertedInvertedInvertedInverted\
    \ = currentTimeZone.isOffsetTransitionInvertedInvertedInverted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1uhjxurr.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1uhjxurr.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcurrentDate\e[0m = Calendar.getInstance()\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Not found: Calendar\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1uhjxurr.scala:50:5 ---------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        if(month < 1 || month > 12) false\n\
    \        if(day < 1 || day > 31) false\n        if(month == 2 && day > 29) false\n\
    \        if(month == 2 && day > 28) false\n        if(month == 2 && day > 31)\
    \ false\n        if(month == 2 && day > 30) false\n        if(month == 2 && day\
    \ > 31) false\n        if(month == 2 && day > 30) false\n        if(month == 2\
    \ && day > 31) false\n        if(month == 2 && day > 30) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 30) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 30) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 30) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 30) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 30) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 30) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 30) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 30) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 30) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 30) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 30) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 30) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 30) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 30) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 30) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 30) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 30) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 30) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpk_7ctkm2.scala:69:30 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mif\e[0m(month == \e[31m2\e[0m && day >\
    \ \n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m\
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpk_7ctkm2.scala:22:36\
    \ ----------------\e[0m\e[0m\n\e[33m22 |\e[0m        \e[33mif\e[0m(month < \e\
    [31m1\e[0m || month > \e[31m12\e[0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m \
    \                                   ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression\
    \ does nothing in statement position; you may be omitting necessary parentheses\n\
    \e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpk_7ctkm2.scala:23:32\
    \ ----------------\e[0m\e[0m\n\e[33m23 |\e[0m        \e[33mif\e[0m(day < \e[31m1\e\
    [0m || day > \e[31m31\e[0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m          \
    \                      ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing\
    \ in statement position; you may be omitting necessary parentheses\n\e[33m   |\e\
    [0m\n\e[33m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpk_7ctkm2.scala:24:35 ----------------\e\
    [0m\e[0m\n\e[33m24 |\e[0m        \e[33mif\e[0m(month == \e[31m2\e[0m && day >\
    \ \e[31m29\e[0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                     \
    \              ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement\
    \ position; you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmpk_7ctkm2.scala:25:35 ----------------\e\
    [0m\e[0m\n\e[33m25 |\e[0m        \e[33mif\e[0m(month == \e[31m2\e[0m && day >\
    \ \e[31m28\e[0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                     \
    \              ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement\
    \ positi"
  stdout: ''
  timestamp: 1659800644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateInMillis = dateArray\n        val dateInDays = dateInMillis /\
    \ 1000\n        val dateInMonths = dateInDays / 30\n        val dateInYears =\
    \ dateInMonths / 12\n        val dateInDaysNotLessThanOneOrHigherThan31 = dateInDays\
    \ % 31 > 0\n        val dateInDaysNotLessThanOneOrHigherThan30 = dateInDays %\
    \ 30 > 0\n        val dateInDaysNotLessThanOneOrHigherThan29 = dateInDays % 29\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan12 = dateInMonths % 12\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan11 = dateInMonths % 11\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan10 = dateInMonths % 10\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan9 = dateInMonths % 9\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan8 = dateInMonths % 8\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan7 = dateInMonths % 7\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan6 = dateInMonths % 6\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan5 = dateInMonths % 5\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan4 = dateInMonths % 4\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan3 = dateInMonths % 3\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan2 = dateInMonths % 2\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan1 = dateInMonths % 1\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan0 = dateInMonths % 0\
    \ > 0\n        val dateInYearsNotLessThanOneOrHigherThan12 = dateInYears % 12\
    \ > 0\n        val dateInYearsNotLessThanOneOrHigherThan11 = dateInYears % 11\
    \ > 0\n        val dateInYearsNotLessThanOneOrHigherThan10 = dateInYears % 10\
    \ > 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4qldx4ut.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4qldx4ut.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfeeua_4r.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfeeua_4r.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfeeua_4r.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2012,2040,2020,2020,2020,2020,2020,2020,2020,2020,2020,2020,2020,2020)\n\
    \        val monthIndex = monthArray.indexOf(month)\n        val dayIndex = dayArray.indexOf(day)\n\
    \        val yearIndex = yearArray.indexOf(year)\n        val monthCheck = monthIndex\
    \ >= 0\n        val dayCheck = dayIndex >= 0\n        val yearCheck = yearIndex\
    \ >= 0\n        val dateCheck = monthCheck && dayCheck && yearCheck\n        dateCheck\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbm08it8n.scala:35)\n\tat Problem.main(tmpbm08it8n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800648
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val daysInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val monthArray\
    \ = Array.ofDim[Int](12)\n        val yearArray = Array.ofDim[Int](4)\n      \
    \  scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.YEAR)\n\
    \        val monthArray = Array.ofDim[Int](12)\n        val yearArray = Array.ofDim[Int](4)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray\
    \ = Array.ofDim[Int](daysInMonth)\n        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n\
    \        val daysInMonth\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp896qtyqe.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp896qtyqe.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthArray\e[0m = Array.ofDim[\e[35mInt\e[0m](\e[31m12\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmonthArray is already defined as \e[33mvalue\e[0m \e[35mmonthArray\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp896qtyqe.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36myearArray\e[0m = Array.ofDim[\e[35mInt\e\
    [0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0myearArray is already defined as \e[33mvalue\e[0m \e[35myearArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp896qtyqe.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthArray\e[0m = Array.ofDim[\e\
    [35mInt\e[0m](daysInMonth)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthArray is already defined as \e[33mvalue\e[0m \e\
    [35mdaysInMonthArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp896qtyqe.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthArray\e[0m =\
    \ Array.ofDim[\e[35mInt\e[0m](daysInMonth)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthArray is already defined as \e[33mvalue\e[0m \e\
    [35mdaysInMonthArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be def"
  stdout: ''
  timestamp: 1659800647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat2 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat4 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat8 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat18 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat23 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat28 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpm91tmwrb.scala:48:11 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659800629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val monthArray = dateArray(0).toString.split(\"-\")\n        val\
    \ dayArray = dateArray(1).toString.split(\"-\")\n        val monthCount = monthArray.length\n\
    \        val dayCount = dayArray.length\n        val monthValid = monthArray.forall(x\
    \ => x != \"0\")\n        val dayValid = dayArray.forall(x => x != \"0\")\n  \
    \      val dateValid = monthCount > 1 && monthCount < 12 && dayCount > 1 && dayCount\
    \ < 31 && monthValid && dayValid\n        dateValid\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsohahfdr.scala:29)\n\tat Problem.main(tmpsohahfdr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800648
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthIndex = monthArray.indexOf(month)\n        val dayIndex = dayArray.indexOf(day)\n\
    \        val yearIndex = yearArray.indexOf(year)\n        if (monthIndex == -1\
    \ || dayIndex == -1 || yearIndex == -1) {\n            return false\n        }\n\
    \        if (monthIndex < 1 || monthIndex > 12) {\n            return false\n\
    \        }\n        if (dayIndex < 1 || dayIndex > 31) {\n            return false\n\
    \        }\n        if (monthIndex == 2 && dayIndex < 1 || dayIndex > 29) {\n\
    \            return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbtlpss69.scala:43)\n\tat Problem.main(tmpbtlpss69.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject.isValid\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp08xg95p4.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1, 3, 5,\
    \ 7, 8, 10, 12)\n        val daysArray = Array(31, 30, 29)\n        val monthArray2\
    \ = Array(4, 6, 9, 11)\n        val daysArray2 = Array(30, 29, 28)\n        val\
    \ monthArray3 = Array(2, 4)\n        val daysArray3 = Array(31, 28, 31)\n    \
    \    val monthArray4 = Array(1, 3)\n        val daysArray4 = Array(30, 29)\n \
    \       val monthArray5 = Array(1, 3)\n        val daysArray5 = Array(30, 29)\n\
    \        val monthArray6 = Array(1, 3)\n        val daysArray6 = Array(30, 29)\n\
    \        val monthArray7 = Array(1, 3)\n        val daysArray7 = Array(30, 29)\n\
    \        val monthArray8 = Array(1, 3)\n        val daysArray8 = Array(30, 29)\n\
    \        val monthArray9 = Array(1, 3)\n        val daysArray9 = Array(30, 29)\n\
    \        val monthArray10 = Array(1, 3)\n        val daysArray10 = Array(30, 29)\n\
    \        val monthArray11 = Array(1, 3)\n        val daysArray11 = Array(30, 29)\n\
    \        val monthArray12 = Array(1, 3)\n        val daysArray12 = Array(30, 29)\n\
    \        val monthArray13 = Array(1, 3)\n        val daysArray13 = Array(30, 29)\n\
    \        val monthArray14 = Array(1, 3)\n        val daysArray14 = Array(30, 29)\n\
    \        val monthArray15 = Array(1, 3)\n        val daysArray15 = Array(30, 29)\n\
    \        val monthArray16 = Array(1, 3)\n        val daysArray16 = Array(30, 29)\n\
    \        val monthArray17 = Array(1, 3)\n        val daysArray17 = Array(30, 29)\n\
    \        val monthArray18 = Array(1, 3)\n        val daysArray18 = Array(30, 29)\n\
    \        val monthArray19 = Array(1, 3)\n        val daysArray19 = Array(30, 29)\n\
    \        val monthArray20 = Array(1, 3)\n        val daysArray20 = Array(30, 29)\n\
    \        val monthArray21 = Array(1, 3)\n        val daysArray21 = Array(30, 29)\n\
    \        val monthArray22 = Array(1, 3)\n        val daysArray22 = Array(30, 29)\n\
    \        val monthArray23 = Array(1, 3)\n        val daysArray23 = Array(30, 29)\n\
    \        val monthArray24 = \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1dt65lit.scala:68:26 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36mmonthArray24\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1dt65lit.scala:69:5 ---------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0)\n        val day = dateArray(1)\n     \
    \   val year = dateArray(2)\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthIndex = monthArray.indexOf(month)\n        val dayIndex = dayArray.indexOf(day)\n\
    \        val yearIndex = yearArray.indexOf(year)\n        if(monthIndex == -1\
    \ || dayIndex == -1 || yearIndex == -1){\n            return false\n        }\n\
    \        if(monthIndex < 1 || monthIndex > 12){\n            return false\n  \
    \      }\n        if(dayIndex < 1 || dayIndex > dayArray(monthIndex)){\n     \
    \       return false\n        }\n        if(monthIndex == 2){\n            if(dayIndex\
    \ < 1 || dayIndex > 29){\n                return false\n            }\n      \
    \  }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpya9ktpp7.scala:25:44\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmonthIndex\e\
    [0m = monthArray.indexOf(month)\n\e[31m\e[31m   |\e[0m                       \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \                Found:    (month : String)\n\e[31m   |\e[0m                 \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpya9ktpp7.scala:26:40 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdayIndex\e[0m = dayArray.indexOf(day)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Found:    (day : String)\n\e\
    [31m   |\e[0m                                        Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpya9ktpp7.scala:27:42 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36myearIndex\e[0m = yearArray.indexOf(year)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                          Found:    (year : String)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString = dateFormat.format(new\
    \ java.util.Date(date))\n        !dateString.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbv74r3_4.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed2\
    \ = dateFormat2.parse(date)\n        val dateFormat3 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed3 = dateFormat3.parse(date)\n        val\
    \ dateFormat4 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed4\
    \ = dateFormat4.parse(date)\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed5 = dateFormat5.parse(date)\n        val\
    \ dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed6\
    \ = dateFormat6.parse(date)\n        val dateFormat7 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed7 = dateFormat7.parse(date)\n        val\
    \ dateFormat8 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed8\
    \ = dateFormat8.parse(date)\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed9 = dateFormat9.parse(date)\n        val\
    \ dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed10\
    \ = dateFormat10.parse(date)\n        val dateFormat11 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed11 = dateFormat11.parse(date)\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed12\
    \ = dateFormat12.parse(date)\n        val dateFormat13 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed13 = dateFormat13.parse(date)\n        val\
    \ dateFormat14 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed14\
    \ = dateFormat14.parse(date)\n        val dateFormat15 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed15 = dateFormat15.parse(date)\n        val\
    \ dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed16\
    \ = dateFormat16.parse(date)\n        val dateFormat17 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed17 = dateFormat17.parse(date)\n        val\
    \ dateFormat18 = new SimpleDateFormat(\"MM-dd-yyyy\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcpirbkf.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpvcpirbkf.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcpirbkf.scala:22:30 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcpirbkf.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcpirbkf.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateFormat5\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m           "
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = List(1, 3, 5,\
    \ 7, 8, 10, 12)\n        val dayArray = List(1, 30, 29)\n        val yearArray\
    \ = List(1, 12)\n        val monthIndex = monthArray.indexOf(month)\n        val\
    \ dayIndex = dayArray.indexOf(day)\n        val yearIndex = yearArray.indexOf(year)\n\
    \        val validMonth = monthIndex >= 0\n        val validDay = dayIndex >=\
    \ 0\n        val validYear = yearIndex >= 0\n        val validMonthAndDay = validMonth\
    \ && validDay\n        val validYearAndMonth = validYear && validMonthAndDay\n\
    \        val validMonthAndYear = validMonth && validYear\n        val validYearAndDay\
    \ = validYear && validDay\n        val validMonthAndDayAndYear = validMonthAndDay\
    \ && validYear\n        val validYearAndMonthAndDay = validYearAndMonth && validMonthAndDay\n\
    \        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay && validYearAndDay\n\
    \        val validMonthAndYearAndDay = validMonthAndYear && validYearAndDay\n\
    \        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay && validYearAndDay\n\
    \        val validMonthAndYearAndDayAndYear = validMonthAndYearAndDay && validYearAndDayAndYear\n\
    \        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDayAndYear &&\
    \ validYearAndDayAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDayAndYear\
    \ && validYearAndDayAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDayAndYear\
    \ && validYearAndDayAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDayAndYear\
    \ && validYearAndDayAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDayAndYear\
    \ && validYearAndDayAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDayAndYear\
    \ && validYearAndDayAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDayAndYear\
    \ && validYearAndDayAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp89ze1_ul.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mvalidYearAndMonthAndDayAndYear\e\
    [0m = validYearAndMonthAndDay && validYearAndDay\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidYearAndMonthAndDayAndYear is already defined as \e[33mvalue\e\
    [0m \e[35mvalidYearAndMonthAndDayAndYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp89ze1_ul.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mvalidYearAndMonthAndDayAndYear\e\
    [0m = validYearAndMonthAndDayAndYear && validYearAndDayAndYear\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidYearAndMonthAndDayAndYear is already defined as \e[33mvalue\e\
    [0m \e[35mvalidYearAndMonthAndDayAndYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp89ze1_ul.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mvalidYearAndMonthAndDayAndYear\e\
    [0m = validYearAndMonthAndDayAndYear && validYearAndDayAndYear\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidYearAndMonthAndDayAndYear is already defined as \e[33mvalue\e\
    [0m \e[35mvalidYearAndMonthAndDayAndYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp89ze1_ul.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mvalidYearAndMonthAndDayAndYear\e\
    [0m = validYearAndMonthAndDayAndYear && validYearAndDayAndYear\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800649
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        if(dateArray.length != 3)\n            return false\n        val\
    \ months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n       \
    \ val year = dateArray(2).toInt\n        if(months < 1 || months > 12)\n     \
    \       return false\n        if(days < 1 || days > 31)\n            return false\n\
    \        if(months == 2 && days > 29)\n            return false\n        if(months\
    \ == 2 && days == 29)\n            return false\n        if(months == 2 && days\
    \ == 30)\n            return false\n        if(months == 3 && days > 30)\n   \
    \         return false\n        if(months == 3 && days == 30)\n            return\
    \ false\n        if(months == 3 && days == 31)\n            return false\n   \
    \     if(months == 4 && days > 30)\n            return false\n        if(months\
    \ == 4 && days == 30)\n            return false\n        if(months == 4 && days\
    \ == 31)\n            return false\n        if(months == 5 && days > 30)\n   \
    \         return false\n        if(months == 5 && days == 30)\n            return\
    \ false\n        if(months == 5 && days == 31)\n            return false\n   \
    \     if(months == 6 && days > 30)\n            return false\n        if(months\
    \ == 6 && days == 30)\n            return false\n        if(months == 6 && days\
    \ == 31)\n            return false\n        if(months == 7 && days > 30)\n   \
    \         return false\n        if(months == 7 && days == 30)\n            return\
    \ false\n        if(months == 7 && days == 31)\n            return false\n   \
    \     if(months == 8 && days > 30)\n            return false\n        if(months\
    \ == 8 && days == 30)\n            return false\n        if(months == 8 && days\
    \ == 31)\n            return false\n        if(months == 9 && days > 30)\n   \
    \         return false\n        if(months == 9 && days == 30)\n            return\
    \ false\n        if(months == 9 && days == 31)\n            return false\n   \
    \     if(months == 10 && days > 30)\n            return false\n        if(months\
    \ == 10 && days == 30)\n            return false\n        if(months == 10 && days\
    \ == 31)\n            return false\n        if(months == 11 && days > 30)\n  \
    \          return false\n        if(months == 11 && days == 30)\n            return\
    \ false\n        if(months == 11 && days == 31)\n            return false\n  \
    \      if(months == 12 && days > 30)\n            return false\n        if(months\
    \ == 12 && days == 30)\n            return false\n        if(months == 12 && days\
    \ == 31)\n            return false\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2012,2040,2020)\n        val monthValid = monthArray.contains(month)\n\
    \        val dayValid = dayArray.contains(day)\n        val yearValid = yearArray.contains(year)\n\
    \        val dateValid = monthValid && dayValid && yearValid\n        dateValid\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2vgrhs_k.scala:32)\n\tat Problem.main(tmp2vgrhs_k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        if(dateArray.length != 3)\n            return false\n        val\
    \ months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n       \
    \ val year = dateArray(2).toInt\n        if(months < 1 || months > 12)\n     \
    \       return false\n        if(days < 1 || days > 31)\n            return false\n\
    \        if(months == 2 && days > 30)\n            return false\n        if(months\
    \ == 3 && days > 29)\n            return false\n        if(months == 4 && days\
    \ > 28)\n            return false\n        if(months == 5 && days > 27)\n    \
    \        return false\n        if(months == 6 && days > 26)\n            return\
    \ false\n        if(months == 7 && days > 25)\n            return false\n    \
    \    if(months == 8 && days > 24)\n            return false\n        if(months\
    \ == 9 && days > 23)\n            return false\n        if(months == 10 && days\
    \ > 22)\n            return false\n        if(months == 11 && days > 21)\n   \
    \         return false\n        if(months == 12 && days > 20)\n            return\
    \ false\n        if(months == 1 && days > 19)\n            return false\n    \
    \    if(months == 0 && days > 18)\n            return false\n        if(months\
    \ == 12 && days > 17)\n            return false\n        if(months == 1 && days\
    \ > 16)\n            return false\n        if(months == 0 && days > 15)\n    \
    \        return false\n        if(months == 12 && days > 14)\n            return\
    \ false\n        if(months == 1 && days > 13)\n            return false\n    \
    \    if(months == 0 && days > 12)\n            return false\n        if(months\
    \ == 12 && days > 11)\n            return false\n        if(months == 1 && days\
    \ > 10)\n            return false\n        if(months == 0 && days > 9)\n     \
    \       return false\n        if(months == 12 && days > 8)\n            return\
    \ false\n        if(months == 1 && days > 7)\n            return false\n     \
    \   if(months == 0 && days > 6)\n            return false\n        if(months ==\
    \ 12 && days > 5)\n            return false\n        if(months == 1 && days >\
    \ 4)\n            return false\n        if(months == 0 && days > 3)\n        \
    \    return false\n        if(months == 12 && days > 2)\n            return false\n\
    \        if(months == 1 && days > 1)\n            return false\n        if(months\
    \ == 0 && days > 0)\n            return false\n        if(months == 12 && days\
    \ > 0)\n            return false\n        if(months == 1 && days > 0)\n      \
    \      return false\n        if(months == 0 && days > 0)\n            return false\n\
    \        if(months == 12 && days > 0)\n            return false\n        if(months\
    \ == 1 && days > 0)\n            return false\n        if(months == 0 && days\
    \ > 0)\n            return false\n        if(months == 12 && days > 0)\n     \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn9n63ieq.scala:102:8\
    \ --------------------\e[0m\e[0m\n\e[31m102 |\e[0m        \e[33mif\e[0m(months\
    \ == \e[31m12\e[0m && days > \e[31m0\e[0m)\n\e[31m\e[31m    |\e[0m        ^\e\
    [0m\n\e[31m    |\e[0m        Found:    Unit\n\e[31m    |\e[0m        Required:\
    \ Boolean\n\e[31m    |\e[0m        Maybe you are missing an else part for the\
    \ conditional?\n\e[31m103 |\e[0m            \e[33mreturn\e[0m \e[31mfalse\e[0m\n\
    \e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800648
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2012,2040,2020,2020,2020,2020,2020,2020,2020,2020,2020,2020,2020)\n\
    \        if(date.length == 0){\n            return false\n        }\n        if(monthArray.contains(month)\
    \ == false){\n            return false\n        }\n        if(dayArray.contains(day)\
    \ == false){\n            return false\n        }\n        if(yearArray.contains(year)\
    \ == false){\n            return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdwb9xqih.scala:40)\n\tat Problem.main(tmpdwb9xqih.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj = dateFormat.parse(date)\n\
    \        dateObj.getTime <= System.currentTimeMillis\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1h94j6lg.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date)\n\
    \        dateArray.getTime < 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3199bj5r.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ daysInMonth2 = Array(31,29,31,30,31,30,31,30,31,30,31)\n        val daysInMonth3\
    \ = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth4 = Array(31,31,31,31,31,31,31,31,31,31,31)\n\
    \        val daysInMonth5 = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ daysInMonth6 = Array(31,31,31,31,31,31,31,31,31,31,31)\n        val daysInMonth7\
    \ = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth8 = Array(31,31,31,31,31,31,31,31,31,31,31)\n\
    \        val daysInMonth9 = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ daysInMonth10 = Array(31,31,31,31,31,31,31,31,31,31,31)\n        val daysInMonth11\
    \ = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth12 = Array(31,31,31,31,31,31,31,31,31,31,31)\n\
    \        val daysInMonth = daysInMonth.zip(daysInMonth2).zip(daysInMonth3).zip(daysInMonth4).zip(daysInMonth5).zip(daysInMonth6).zip(daysInMonth7).zip(daysInMonth8).zip(daysInMonth9).zip(daysInMonth10).zip(daysInMonth11).zip(daysInMonth12)\n\
    \        val daysInMonth = daysInMonth.map(x => x._1 - x._2)\n        val daysInMonth\
    \ = daysInMonth.filter(x => x >= 1 && x <= 31).filter(x => x >= 1 && x <= 30).filter(x\
    \ => x >= 1 && x <= 29)\n        val daysInMonth = daysInMonth.filter(x => x >=\
    \ 1 && x <= 12)\n        val daysInMonth = daysInMonth.filter(x => x >= 1 && x\
    \ <= 31)\n        val daysInMonth = daysInMonth.filter(x => x >= 1 && x <= 30)\n\
    \        val daysInMonth = daysInMonth.filter(x => x >= 1 && x <= 29)\n      \
    \  val daysInMonth = daysInMonth.filter(x => x >= 1 && x <= 12)\n        val daysInMonth\
    \ = daysInMonth.filter(x => x >= 1 && x <= 31)\n        val daysInMonth = daysInMonth.filter(x\
    \ => x >= 1 && x <= 30)\n        val daysInMonth = daysInMonth.filter(x => x >=\
    \ 1 && x <= 29)\n        val daysInMonth = daysInMonth.filter(x => \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpeeb1tckr.scala:43:49 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth.filter(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeeb1tckr.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth.zip(daysInMonth2).zip(daysInMonth3).zip(daysInMonth4).zip(daysInMonth5).zip(daysInMonth6).zip(daysInMonth7).zip(daysInMonth8).zip(daysInMonth9).zip(daysInMonth10).zip(daysInMonth11).zip(daysInMonth12)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpeeb1tckr.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth.map(\e\
    [36mx\e[0m => x._1 - x._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpeeb1tckr.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth.filter(\e\
    [36mx\e[0m => x >= \e[31m1\e[0m && x <= \e[31m31\e[0m).filter(\e[36mx\e[0m =>\
    \ x >= \e[31m1\e[0m && x <= \e[31m30\e[0m).filte"
  stdout: ''
  timestamp: 1659800652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject.isValid\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp08xg95p4.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        val currentDate = new java.util.Date()\n        val currentDateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val currentDateObject = currentDateFormat.parse(currentDate)\n\
    \        val dateDiff = dateObject.time - currentDateObject.time\n        val\
    \ dateDiffDays = dateDiff/(1000*60*60*24)\n        val dateDiffMonths = dateDiff/(1000*60*60*24*30)\n\
    \        val dateDiffYears = dateDiff/(1000*60*60*24*30*12)\n        dateDiffDays\
    \ < 1 || dateDiffDays > 31 || dateDiffMonths < 1 || dateDiffMonths > 12 || dateDiffYears\
    \ < 1 || dateDiffYears > 30\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ylxke09.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp8ylxke09.scala:21:36 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcurrentDateFormat\e[0m =\
    \ \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800648
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthValid = monthArray.contains(month)\n        val dayValid = dayArray.contains(day)\n\
    \        val yearValid = yearArray.contains(year)\n        val dateValid = monthValid\
    \ && dayValid && yearValid\n        dateValid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7b7w3b4q.scala:32)\n\tat Problem.main(tmp7b7w3b4q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat2 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat4 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat8 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat18 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat23 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat28 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpm91tmwrb.scala:48:11 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val dayArray2 = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val yearArray2 = Array(2010,2011,2012)\n        val monthArray3 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray3 = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray3 = Array(2010,2011,2012)\n        val monthArray4 = Array(4,6,9,11)\n\
    \        val dayArray4 = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray4 = Array(2010,2011,2012)\n        val monthArray5 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray5 = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray5 = Array(2010,2011,2012)\n        val monthArray6 = Array(4,6,9,11)\n\
    \        val dayArray6 = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray6 = Array(2010,2011,2012)\n        val monthArray7 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray7 = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray7 = Array(2010,2011,2012)\n        val monthArray8 = Array(4,6,9,11)\n\
    \        val dayArray8 = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray8 = Array(2010,2011,2012)\n        val monthArray9 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray9 = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray9 = Array(2010,2011,2012)\n        val monthArray10 = Array(4,6,9,11)\n\
    \        val dayArray10 = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgh1auq8w.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0)\n        val day = dateArray(1)\n     \
    \   val year = dateArray(2)\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2012,2040) \n        val monthIndex = monthArray.indexOf(month)\n\
    \        val dayIndex = dayArray.indexOf(day)\n        val yearIndex = yearArray.indexOf(year)\n\
    \        val isValid = monthIndex != -1 && dayIndex != -1 && yearIndex != -1 &&\
    \ monthIndex < monthArray.length && dayIndex < dayArray.length && yearIndex <\
    \ yearArray.length\n        return isValid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpry2g20wl.scala:25:44\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmonthIndex\e\
    [0m = monthArray.indexOf(month)\n\e[31m\e[31m   |\e[0m                       \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \                Found:    (month : String)\n\e[31m   |\e[0m                 \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpry2g20wl.scala:26:40 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdayIndex\e[0m = dayArray.indexOf(day)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Found:    (day : String)\n\e\
    [31m   |\e[0m                                        Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpry2g20wl.scala:27:42 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36myearIndex\e[0m = yearArray.indexOf(year)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                          Found:    (year : String)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject != null\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa0zrdznc.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat2 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat4 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat8 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat18 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat23 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat28 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpm91tmwrb.scala:48:11 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date)\n\
    \        val dateArrayLength = dateArray.length\n        dateArrayLength > 0 &&\
    \ dateArrayLength <= 3 && dateArrayLength <= 6 && dateArrayLength <= 9 && dateArrayLength\
    \ <= 12 && dateArrayLength <= 29 && dateArrayLength <= 31\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf_jau010.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj = dateFormat.parse(date)\n\
    \        val dateInMillis = dateObj.getTime\n        val currentDateInMillis =\
    \ Calendar.getInstance().getTimeInMillis()\n        val difference = dateInMillis\
    \ - currentDateInMillis\n        val days = difference / (1000 * 60 * 60 * 24)\n\
    \        val months = difference / (1000 * 60 * 60 * 24 * 30)\n        val year\
    \ = difference / (1000 * 60 * 60 * 24 * 30 * 12)\n        if (date.length == 0\
    \ || days > 31 || months > 12 || year > 30 || months < 1 || days < 1) {\n    \
    \        return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfva99hix.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfva99hix.scala:21:34 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcurrentDateInMillis\e[0m\
    \ = Calendar.getInstance().getTimeInMillis()\n\e[31m\e[31m   |\e[0m          \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \            Not found: Calendar\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwkmgod7f.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwkmgod7f.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0)\n        val day = dateArray(1)\n     \
    \   val year = dateArray(2)\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2012,2040,2020)\n        val monthIndex = monthArray.indexOf(month)\n\
    \        val dayIndex = dayArray.indexOf(day)\n        val yearIndex = yearArray.indexOf(year)\n\
    \        val monthDay = monthIndex * 30 + dayIndex\n        val yearMonthDay =\
    \ yearIndex * 12 + monthDay\n        val yearMonthDayArray = Array(2000,2012,2040,2020,2024,2028,2032,2036,2042,2046,2048,2050,2060,2064,2068,2072,2076,2080,2084,2088,2092,2096,2100,2112,2116,2118,2122,2124,2128,2132,2136,2140,2144,2148,2152,2156,2160,2164,2168,2172,2176,2180,2184,2188,2192,2196,2200,2204,2208,2212,2216,2220,2224,2228,2232,2236,2240,2244,2248,2252,2256,2258,2260,2264,2268,2272,2276,2280,2284,2288,2292,2296,2300,2304,2308,2312,2316,2320,2324,2328,2332,2336,2340,2344,2348,2352,2356,2360,2364,2368,2372,2376,2380,2384,2388,2392,2396,2400,2404,2408,2412,2416,2420,2424,2428,2432,2436,2440,2444,2448,2452,2456,2460,2464,2468,2472,2476,2480,2484,2488,2492,2496,2500,2502,2506,2510,2514,2518,2521,2524,2528,2532,2536,2540,2544,2548,2552,2556,2560,2564,2568,2572,2576,2580,2584,2588,2592,2596,2600,2604,2608,2612,2616,2620,2624,2628,2632,2636,2640,2644,2648,2652,2656,2660,2664,2668,2672,2676,2680,2684,\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjwwu9ehv.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpjwwu9ehv.scala:25:44 --------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \        \e[33mval\e[0m \e[36mmonthIndex\e[0m = monthArray.indexOf(month)\n\e\
    [31m\e[31m   |\e[0m                                            ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                            Found:    (month : String)\n\
    \e[31m   |\e[0m                                            Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjwwu9ehv.scala:26:40 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdayIndex\e[0m = dayArray.indexOf(day)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Found:    (day : String)\n\e\
    [31m   |\e[0m                                        Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjwwu9ehv.scala:27:42 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36myearIndex\e[0m = yearArray.indexOf(year)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                          Found:    (year : String)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjwwu9ehv.scala:31:5 ---------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659800658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) match {\n \
    \           case null => false\n            case _ => true\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgjjdwtd9.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCount = monthArray.count(monthArray.contains(month))\n     \
    \   val dayCount = dayArray.count(dayArray.contains(day))\n        val yearCount\
    \ = yearArray.count(yearArray.contains(year))\n        if(monthCount < 1 || monthCount\
    \ > 12 || dayCount < 1 || dayCount > 31 || yearCount < 1 || yearCount > 12){\n\
    \            return false\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3n69y1of.scala:25:61\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmonthCount\e\
    [0m = monthArray.count(monthArray.contains(month))\n\e[31m\e[31m   |\e[0m    \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                          Found:    Boolean\n\e[31m\
    \   |\e[0m                                          Required: \e[1m\e[32mInt\e\
    [0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3n69y1of.scala:26:55\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdayCount\e\
    [0m = dayArray.count(dayArray.contains(day))\n\e[31m\e[31m   |\e[0m          \
    \                            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                  Found:    Boolean\n\e[31m   |\e[0m        \
    \                              Required: \e[1m\e[32mInt\e[0m\e[1m\e[32m \e[0m\e\
    [1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3n69y1of.scala:27:58 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36myearCount\e[0m = yearArray.count(yearArray.contains(year))\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    Boolean\n\
    \e[31m   |\e[0m                                        Required: \e[1m\e[32mInt\e\
    [0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800657
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthIndex = monthArray.indexOf(month)\n        val dayIndex = dayArray.indexOf(day)\n\
    \        val yearIndex = yearArray.indexOf(year)\n        if(monthIndex < 1 ||\
    \ monthIndex > 12){\n            return false\n        }\n        if(dayIndex\
    \ < 1 || dayIndex > dayArray(monthIndex)){\n            return false\n       \
    \ }\n        if(yearIndex < 1 || yearIndex > yearArray(monthIndex)){\n       \
    \     return false\n        }\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppkljspsx.scala:40)\n\tat Problem.main(tmppkljspsx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        if(dateArray.length != 3)\n            return false\n        val\
    \ monthArray = dateArray(0).split(\"-\")\n        if(monthArray.length != 2)\n\
    \            return false\n        val dayArray = dateArray(1).split(\"-\")\n\
    \        if(dayArray.length != 2)\n            return false\n        if(monthArray(0)\
    \ < 1 || monthArray(0) > 12)\n            return false\n        if(monthArray(1)\
    \ < 1 || monthArray(1) > 12)\n            return false\n        if(dayArray(0)\
    \ < 1 || dayArray(0) > 31)\n            return false\n        if(dayArray(1) <\
    \ 1 || dayArray(1) > 30)\n            return false\n        if(dayArray(2) > 29)\n\
    \            return false\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo_6qs47p.scala:27:27\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mif\e[0m(monthArray(\e\
    [31m0\e[0m) < \e[31m1\e[0m || monthArray(\e[31m0\e[0m) > \e[31m12\e[0m)\n\e[31m\e\
    [31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m              \
    \             Found:    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m                \
    \           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpo_6qs47p.scala:27:48 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mif\e[0m(monthArray(\e[31m0\e[0m) < \e[31m1\e[0m || monthArray(\e\
    [31m0\e[0m) > \e[31m12\e[0m)\n\e[31m\e[31m   |\e[0m                          \
    \                      ^^\e[0m\n\e[31m   |\e[0m                              \
    \                  Found:    (\e[31m12\e[0m : Int)\n\e[31m   |\e[0m          \
    \                                      Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpo_6qs47p.scala:29:27 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mif\e[0m(monthArray(\e[31m1\e[0m) < \e[31m1\e\
    [0m || monthArray(\e[31m1\e[0m) > \e[31m12\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                     ^\e[0m\n\e[31m   |\e[0m                           Found:\
    \    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m                           Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo_6qs47p.scala:29:48\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mif\e[0m(monthArray(\e\
    [31m1\e[0m) < \e[31m1\e[0m || monthArray(\e[31m1\e[0m) > \e[31m12\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                ^^\e[0m\n\e[31m \
    \  |\e[0m                                                Found:    (\e[31m12\e\
    [0m : Int)\n\e[31m   |\e[0m                                                Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Ty"
  stdout: ''
  timestamp: 1659800659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwkmgod7f.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,6,9,11)\n        val monthsInLeapMonth = Array(2,4,6,9,11)\n     \
    \   val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth\
    \ = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n   \
    \     val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n      \
    \  val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth\
    \ = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n   \
    \     val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n      \
    \  val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth\
    \ = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n   \
    \     val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n      \
    \  val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth\
    \ = Array(31,28,31,30,31,30,31,30,31,30,31,30,\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp93hnsq0u.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp93hnsq0u.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonth\e[0m = Array(\e[31m31\e[0m,\e[31m28\e[0m,\e[31m31\e[0m,\e\
    [31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp93hnsq0u.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = Array(\e[31m31\e\
    [0m,\e[31m28\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp93hnsq0u.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = Array(\e[31m31\e\
    [0m,\e[31m28\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659800659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = List(1, 3, 5,\
    \ 7, 8, 10, 12)\n        val daysArray = List(1, 30, 29)\n        val monthArray2\
    \ = List(2, 4, 6)\n        val daysArray2 = List(1, 31)\n        val monthArray3\
    \ = List(1, 3)\n        val daysArray3 = List(1, 30)\n        val monthArray4\
    \ = List(1, 4)\n        val daysArray4 = List(1, 29)\n        val monthArray5\
    \ = List(1, 5)\n        val daysArray5 = List(1, 29)\n        val monthArray6\
    \ = List(1, 6)\n        val daysArray6 = List(1, 29)\n        val monthArray7\
    \ = List(1, 7)\n        val daysArray7 = List(1, 29)\n        val monthArray8\
    \ = List(1, 8)\n        val daysArray8 = List(1, 29)\n        val monthArray9\
    \ = List(1, 9)\n        val daysArray9 = List(1, 29)\n        val monthArray10\
    \ = List(1, 10)\n        val daysArray10 = List(1, 29)\n        val monthArray11\
    \ = List(1, 11)\n        val daysArray11 = List(1, 29)\n        val monthArray12\
    \ = List(1, 12)\n        val daysArray12 = List(1, 29)\n        val monthArray13\
    \ = List(1, 13)\n        val daysArray13 = List(1, 29)\n        val monthArray14\
    \ = List(1, 14)\n        val daysArray14 = List(1, 29)\n        val monthArray15\
    \ = List(1, 15)\n        val daysArray15 = List(1, 29)\n        val monthArray16\
    \ = List(1, 16)\n        val daysArray16 = List(1, 29)\n        val monthArray17\
    \ = List(1, 17)\n        val daysArray17 = List(1, 29)\n        val monthArray18\
    \ = List(1, 18)\n        val daysArray18 = List(1, 29)\n        val monthArray19\
    \ = List(1, 19)\n        val daysArray19 = List(1, 29)\n        val monthArray20\
    \ = List(1, 20)\n        val daysArray20 = List(1, 29)\n        val monthArray21\
    \ = List(1, 21)\n        val daysArray21 = List(1, 29)\n        val monthArray22\
    \ = List(1, 22)\n        val daysArray22 = List(1, 29)\n        val monthArray23\
    \ = List(1, 23)\n        val daysArray23 = List(1, 29)\n        val monthArray24\
    \ = List(1, 24)\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphjzwuoj0.scala:69:5\
    \ ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        val currentDate = new java.util.Date()\n        val currentDay = currentDate.getDay()\n\
    \        val currentMonth = currentDate.getMonth()\n        val currentYear =\
    \ currentDate.getYear()\n        val dateDay = dateObject.getDay()\n        val\
    \ dateMonth = dateObject.getMonth()\n        val dateYear = dateObject.getYear()\n\
    \        val dateDayInMonth = dateDay\n        val dateMonthInYear = dateMonth\n\
    \        val dateYearInMonth = dateYear\n        val dateDayInYear = dateDayInMonth\n\
    \        val dateMonthInYearInMonth = dateMonthInYear\n        val dateYearInMonthInYear\
    \ = dateYearInMonth\n        val dateDayInYearInMonth = dateDayInYear\n      \
    \  val dateMonthInYearInYear = dateMonthInYearInMonth\n        val dateYearInMonthInYearInMonth\
    \ = dateYearInMonthInYear\n        val dateDayInYearInMonthInYear = dateDayInYearInMonth\n\
    \        val dateMonthInYearInYearInMonth = dateMonthInYearInYear\n        val\
    \ dateYearInMonthInYearInMonthInYear = dateYearInMonthInYearInMonth\n        val\
    \ dateDayInYearInMonthInYearInMonth = dateDayInYearInMonthInYear\n        val\
    \ dateMonthInYearInYearInMonthInYear = dateMonthInYearInYearInMonthInYear\n  \
    \      val dateYearInMonthInYearInMonthInYearInMonth = dateYearInMonthInYearInMonthInYear\n\
    \        val dateDayInYearInMonthInYearInMonthInYear = dateDayInYearInMonthInYearInMonthInYear\n\
    \        val dateMonthInYearInYearInMonthInYearInMonth = dateMonthInYearInYearInMonthInYearInMonth\n\
    \        val dateYearInMonthInYearInMonthInYearInMonthInYear = dateYearInMonthInYearInMonthInYearInMonthInYear\n\
    \        val dateDayInYearInMonthInYearInMonthInYearInMonth = dateDayInYearInMonthInYearInMonthInYearInMonth\n\
    \        val dateMonthInYearInYearInMonthInYearInMonthInYear = dateMonthInYearInYearInMonthInYearInMonthInYear\n\
    \        val dateYearInMonthInYearInMonthInYearInMonthIn\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd7b9c2ga.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd7b9c2ga.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpd7b9c2ga.scala:40:49\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateMonthInYearInYearInMonthInYear\e[0m = dateMonthInYearInYearInMonthInYear\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m           Recursive \e[33mvalue\e[0m \e[35mdateMonthInYearInYearInMonthInYear\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpd7b9c2ga.scala:42:54\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateDayInYearInMonthInYearInMonthInYear\e[0m = dateDayInYearInMonthInYearInMonthInYear\n\
    \e[31m\e[31m   |\e[0m                                                      ^\e\
    [0m\n\e[31m   |\e[0m      Recursive \e[33mvalue\e[0m \e[35mdateDayInYearInMonthInYearInMonthInYear\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpd7b9c2ga.scala:43:56\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateMonthInYearInYearInMonthInYearInMonth\e[0m = dateMonthInYearInYearInMonthInYearInMonth\n\
    \e[31m\e[31m   |\e[0m                                                        ^\e\
    [0m\n\e[31m   |\e[0m    Recursive \e[33mvalue\e[0m \e[35mdateMonthInYearInYearInMonthInYearInMonth\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659800659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateToCheck = dateFormat.parse(date)\n\
    \        val dateToCheck2 = dateFormat.parse(date)\n        val dateToCheck3 =\
    \ dateFormat.parse(date)\n        val dateToCheck4 = dateFormat.parse(date)\n\
    \        val dateToCheck5 = dateFormat.parse(date)\n        val dateToCheck6 =\
    \ dateFormat.parse(date)\n        val dateToCheck7 = dateFormat.parse(date)\n\
    \        val dateToCheck8 = dateFormat.parse(date)\n        val dateToCheck9 =\
    \ dateFormat.parse(date)\n        val dateToCheck10 = dateFormat.parse(date)\n\
    \        val dateToCheck11 = dateFormat.parse(date)\n        val dateToCheck12\
    \ = dateFormat.parse(date)\n        val dateToCheck13 = dateFormat.parse(date)\n\
    \        val dateToCheck14 = dateFormat.parse(date)\n        val dateToCheck15\
    \ = dateFormat.parse(date)\n        val dateToCheck16 = dateFormat.parse(date)\n\
    \        val dateToCheck17 = dateFormat.parse(date)\n        val dateToCheck18\
    \ = dateFormat.parse(date)\n        val dateToCheck19 = dateFormat.parse(date)\n\
    \        val dateToCheck20 = dateFormat.parse(date)\n        val dateToCheck21\
    \ = dateFormat.parse(date)\n        val dateToCheck22 = dateFormat.parse(date)\n\
    \        val dateToCheck23 = dateFormat.parse(date)\n        val dateToCheck24\
    \ = dateFormat.parse(date)\n        val dateToCheck25 = dateFormat.parse(date)\n\
    \        val dateToCheck26 = dateFormat.parse(date)\n        val dateToCheck27\
    \ = dateFormat.parse(date)\n        val dateToCheck28 = dateFormat.parse(date)\n\
    \        val dateToCheck29 = dateFormat.parse(date)\n        val dateToCheck30\
    \ = dateFormat.parse(date)\n        val dateToCheck31 = dateFormat.parse(date)\n\
    \        val dateToCheck32 = dateFormat.parse(date)\n        val dateToCheck33\
    \ = dateFormat.parse(date)\n        val dateToCheck34 = dateFormat.parse(date)\n\
    \        val dateToCheck35 = dateFormat.parse(date)\n        val dateToCheck36\
    \ = dateFormat.parse(date)\n        val dateToCheck37 = dateFormat.parse(date)\n\
    \        val dateToCheck38 = dateFormat.parse(date)\n        val dateToCheck39\
    \ = dateFormat.parse(date)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzdj9u0s0.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpzdj9u0s0.scala:59:5 ---------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateToCheck = dateFormat.parse(date)\n\
    \        val dateToCheckYear = dateToCheck.getYear\n        val dateToCheckMonth\
    \ = dateToCheck.getMonth\n        val dateToCheckDay = dateToCheck.getDay\n  \
    \      val dateToCheckMonthDay = dateToCheckYear * 100 + dateToCheckMonth * 10\
    \ + dateToCheckDay\n        val dateToCheckMonthDayMax = 31\n        val dateToCheckMonthDayMin\
    \ = 1\n        val dateToCheckMonthDayMax30 = 29\n        val dateToCheckMonthDayMin1\
    \ = 1\n        val dateToCheckMonthDayMax1 = 12\n        val dateToCheckMonthDayMax12\
    \ = 12\n        val dateToCheckMonthDayMin4 = 4\n        val dateToCheckMonthDayMax4\
    \ = 11\n        val dateToCheckMonthDayMax2 = 29\n        val dateToCheckMonthDayMin2\
    \ = 1\n        val dateToCheckMonthDayMax31 = 31\n        val dateToCheckMonthDayMin31\
    \ = 1\n        val dateToCheckMonthDayMax30 = 31\n        val dateToCheckMonthDayMin30\
    \ = 1\n        val dateToCheckMonthDayMax29 = 29\n        val dateToCheckMonthDayMin29\
    \ = 1\n        val dateToCheckMonthDayMax28 = 28\n        val dateToCheckMonthDayMin28\
    \ = 1\n        val dateToCheckMonthDayMax27 = 27\n        val dateToCheckMonthDayMin27\
    \ = 1\n        val dateToCheckMonthDayMax26 = 26\n        val dateToCheckMonthDayMin26\
    \ = 1\n        val dateToCheckMonthDayMax25 = 25\n        val dateToCheckMonthDayMin25\
    \ = 1\n        val dateToCheckMonthDayMax24 = 24\n        val dateToCheckMonthDayMin24\
    \ = 1\n        val dateToCheckMonthDayMax23 = 23\n        val dateToCheckMonthDayMin23\
    \ = 1\n        val dateToCheckMonthDayMax22 = 22\n        val dateToCheckMonthDayMin22\
    \ = 1\n        val dateToCheckMonthDayMax21 = 21\n        val dateToCheckMonthDayMin21\
    \ = 1\n        val dateToCheckMonthDayMax20 = 20\n        val dateToCheckMonthDayMin20\
    \ = 1\n        val dateToCheckMonthDayMax19 = 19\n        val dateToCheckMonthDayMin19\
    \ = 1\n        val dateToCheckMonthDay\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpegfntpx0.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpegfntpx0.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateToCheckMonthDayMax30\e[0m = \e[31m31\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdateToCheckMonthDayMax30\
    \ is already defined as \e[33mvalue\e[0m \e[35mdateToCheckMonthDayMax30\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpegfntpx0.scala:18:29 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e\
    [0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpegfntpx0.scala:61:5\
    \ ---------------------\e[0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).asInstanceOf[Date]\n\
    \        val dateArray2 = dateFormat.parse(date).asInstanceOf[Date]\n        val\
    \ dateArray3 = dateFormat.parse(date).asInstanceOf[Date]\n        val dateArray4\
    \ = dateFormat.parse(date).asInstanceOf[Date]\n        val dateArray5 = dateFormat.parse(date).asInstanceOf[Date]\n\
    \        val dateArray6 = dateFormat.parse(date).asInstanceOf[Date]\n        val\
    \ dateArray7 = dateFormat.parse(date).asInstanceOf[Date]\n        val dateArray8\
    \ = dateFormat.parse(date).asInstanceOf[Date]\n        val dateArray9 = dateFormat.parse(date).asInstanceOf[Date]\n\
    \        val dateArray10 = dateFormat.parse(date).asInstanceOf[Date]\n       \
    \ val dateArray11 = dateFormat.parse(date).asInstanceOf[Date]\n        val dateArray12\
    \ = dateFormat.parse(date).asInstanceOf[Date]\n        val dateArray13 = dateFormat.parse(date).asInstanceOf[Date]\n\
    \        val dateArray14 = dateFormat.parse(date).asInstanceOf[Date]\n       \
    \ val dateArray15 = dateFormat.parse(date).asInstanceOf[Date]\n        val dateArray16\
    \ = dateFormat.parse(date).asInstanceOf[Date]\n        val dateArray17 = dateFormat.parse(date).asInstanceOf[Date]\n\
    \        val dateArray18 = dateFormat.parse(date).asInstanceOf[Date]\n       \
    \ val dateArray19 = dateFormat.parse(date).asInstanceOf[Date]\n        val dateArray20\
    \ = dateFormat.parse(date).asInstanceOf[Date]\n        val dateArray21 = dateFormat.parse(date).asInstanceOf[Date]\n\
    \        val dateArray22 = dateFormat.parse(date).asInstanceOf[Date]\n       \
    \ val dateArray23 = dateFormat.parse(date).asInstanceOf[Date]\n        val dateArray24\
    \ = dateFormat.parse(date).asInstanceOf[Date]\n        val dateArray25 = dateFormat.parse(date).asInstanceOf[Date]\n\
    \        val dateArray26 = dateFormat.parse(date).asInstanceOf[Date]\n       \
    \ val dateArray27 = dateFormat.parse(date).asInstance\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1d5qai0m.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1d5qai0m.scala:19:60 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdateArray\e[0m = dateFormat.parse(date).asInstanceOf[\e\
    [35mDate\e[0m]\n\e[31m\e[31m   |\e[0m                                        \
    \                    ^^^^\e[0m\n\e[31m   |\e[0m                              \
    \                      Not found: type Date\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1d5qai0m.scala:20:61 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdateArray2\e[0m = dateFormat.parse(date).asInstanceOf[\e\
    [35mDate\e[0m]\n\e[31m\e[31m   |\e[0m                                        \
    \                     ^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                       Not found: type Date\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1d5qai0m.scala:21:61 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdateArray3\e[0m = dateFormat.parse(date).asInstanceOf[\e\
    [35mDate\e[0m]\n\e[31m\e[31m   |\e[0m                                        \
    \                     ^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                       Not found: type Date\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1d5qai0m.scala:22:61 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateArray4\e[0m = dateFormat.parse(date).asInstanceOf[\e\
    [35mDa"
  stdout: ''
  timestamp: 1659800660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateToCheck = dateFormat.parse(date)\n\
    \        val dateToCheckYear = dateToCheck.getYear\n        val dateToCheckMonth\
    \ = dateToCheck.getMonth\n        val dateToCheckDay = dateToCheck.getDay\n  \
    \      val dateToCheckMonthDay = dateToCheckMonth.toInt + dateToCheckDay.toInt\n\
    \        val dateToCheckYearMonthDay = dateToCheckYear.toInt * 12 + dateToCheckMonthDay\n\
    \        val dateToCheckYearMonthDayDay = dateToCheckYearMonthDay.toInt\n    \
    \    val dateToCheckYearMonthDayDay = dateToCheckYearMonthDayDay.toInt\n     \
    \   val dateToCheckYearMonthDayDayDay = dateToCheckYearMonthDayDay.toInt\n   \
    \     val dateToCheckYearMonthDayDayDay = dateToCheckYearMonthDayDayDay.toInt\n\
    \        val dateToCheckYearMonthDayDayDay = dateToCheckYearMonthDayDayDay.toInt\n\
    \        val dateToCheckYearMonthDayDayDay = dateToCheckYearMonthDayDayDay.toInt\n\
    \        val dateToCheckYearMonthDayDayDay = dateToCheckYearMonthDayDayDay.toInt\n\
    \        val dateToCheckYearMonthDayDayDay = dateToCheckYearMonthDayDayDay.toInt\n\
    \        val dateToCheckYearMonthDayDayDay = dateToCheckYearMonthDayDayDay.toInt\n\
    \        val dateToCheckYearMonthDayDayDay = dateToCheckYearMonthDayDayDay.toInt\n\
    \        val dateToCheckYearMonthDayDayDay = dateToCheckYearMonthDayDayDay.toInt\n\
    \        val dateToCheckYearMonthDayDayDay = dateToCheckYearMonthDayDayDay.toInt\n\
    \        val dateToCheckYearMonthDayDayDay = dateToCheckYearMonthDayDayDay.toInt\n\
    \        val dateToCheckYearMonthDayDayDay = dateToCheckYearMonthDayDayDay.toInt\n\
    \        val dateToCheckYearMonthDayDayDay = dateToCheckYearMonthDayDayDay.toInt\n\
    \        val dateToCheckYearMonthDayDayDay = dateToCheckYearMonthDayDayDay.toInt\n\
    \        val dateToCheckYearMonthDayDayDay = dateToCheckYearMonthDayDayDay.toInt\n\
    \        val dateToCheckYearMonthDayDayDay = dateTo\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4lprbkvo.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateToCheckYearMonthDayDay\e\
    [0m = dateToCheckYearMonthDayDay.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateToCheckYearMonthDayDay is already defined as \e[33mvalue\e\
    [0m \e[35mdateToCheckYearMonthDayDay\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4lprbkvo.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdateToCheckYearMonthDayDayDay\e\
    [0m = dateToCheckYearMonthDayDayDay.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateToCheckYearMonthDayDayDay is already defined as \e[33mvalue\e\
    [0m \e[35mdateToCheckYearMonthDayDayDay\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4lprbkvo.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mdateToCheckYearMonthDayDayDay\e\
    [0m = dateToCheckYearMonthDayDayDay.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateToCheckYearMonthDayDayDay is already defined as \e[33mvalue\e\
    [0m \e[35mdateToCheckYearMonthDayDayDay\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4lprbkvo.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdateToCheckYearMonthDayDayDay\e\
    [0m = dateToCheckYearMonthDayDayDay.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateToCheckYearMonthDayDayDay is already defined as \e[33mvalue\e\
    [0m \e[35mdateToCheckYearMonthDa"
  stdout: ''
  timestamp: 1659800660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        val dateInMillis = dateParsed.getTime\n        val dateInDays = dateInMillis\
    \ / 1000\n        val dateInMonths = dateInDays / 30\n        val dateInYears\
    \ = dateInMonths / 12\n        val dateInDaysNotLessThanOneOrHigherThan31 = dateInDays\
    \ % 31 > 0\n        val dateInDaysNotLessThanOneOrHigherThan30 = dateInDays %\
    \ 30 > 0\n        val dateInDaysNotLessThanOneOrHigherThan29 = dateInDays % 29\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan12 = dateInMonths % 12\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan11 = dateInMonths % 11\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan10 = dateInMonths % 10\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan9 = dateInMonths % 9\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan8 = dateInMonths % 8\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan7 = dateInMonths % 7\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan6 = dateInMonths % 6\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan5 = dateInMonths % 5\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan4 = dateInMonths % 4\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan3 = dateInMonths % 3\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan2 = dateInMonths % 2\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan1 = dateInMonths % 1\
    \ > 0\n        val dateInMonthsNotLessThanOneOrHigherThan0 = dateInMonths % 0\
    \ > 0\n        val dateInYearsNotLessThanOneOrHigherThan12 = dateInYears % 12\
    \ > 0\n        val dateInYearsNotLessThanOneOrHigherThan11 = dateInYears % 11\
    \ > 0\n        val dateInYearsNotLessThanOneOrHigherThan10 = dateInYears % 10\
    \ > 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ojju_cp.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp_ojju_cp.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj = dateFormat.parse(date)\n\
    \        dateObj.getTime != 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9e0g7ef7.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        dateParsed.getTime != 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvay9fbr6.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCount = monthArray.count(monthArray.contains(month))\n     \
    \   val dayCount = dayArray.count(dayArray.contains(day))\n        val yearCount\
    \ = yearArray.count(yearArray.contains(year))\n        val monthCountValid = monthCount\
    \ != 0\n        val dayCountValid = dayCount != 0\n        val yearCountValid\
    \ = yearCount != 0\n        val monthCountValid = monthCount != 0\n        val\
    \ dayCountValid = dayCount != 0\n        val yearCountValid = yearCount != 0\n\
    \        val monthCountValid = monthCount != 0\n        val dayCountValid = dayCount\
    \ != 0\n        val yearCountValid = yearCount != 0\n        val monthCountValid\
    \ = monthCount != 0\n        val dayCountValid = dayCount != 0\n        val yearCountValid\
    \ = yearCount != 0\n        val monthCountValid = monthCount != 0\n        val\
    \ dayCountValid = dayCount != 0\n        val yearCountValid = yearCount != 0\n\
    \        val monthCountValid = monthCount != 0\n        val dayCountValid = dayCount\
    \ != 0\n        val yearCountValid = yearCount != 0\n        val monthCountValid\
    \ = monthCount != 0\n        val dayCountValid = dayCount != 0\n        val yearCountValid\
    \ = yearCount != 0\n        val monthCountValid = monthCount != 0\n        val\
    \ dayCountValid = dayCount != 0\n        val yearCountValid = yearCount != 0\n\
    \        val monthCountValid = monthCount != 0\n        val dayCountValid = dayCount\
    \ != 0\n        val yearCountValid = yearCount != 0\n        val monthCountValid\
    \ = monthCount != 0\n        val dayCountValid = dayCount != 0\n        val yearCountValid\
    \ = yearCount != 0\n        val monthCountValid = monthCount != 0\n        val\
    \ dayCountValid = dayCount != 0\n        val yearCountValid = yearCount != 0\n\
    \        val monthCountValid\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgcst2q7t.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcst2q7t.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthCountValid\e[0m = monthCount != \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmonthCountValid\
    \ is already defined as \e[33mvalue\e[0m \e[35mmonthCountValid\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcst2q7t.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdayCountValid\e[0m = dayCount != \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdayCountValid is\
    \ already defined as \e[33mvalue\e[0m \e[35mdayCountValid\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcst2q7t.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36myearCountValid\e[0m = yearCount != \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0myearCountValid\
    \ is already defined as \e[33mvalue\e[0m \e[35myearCountValid\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgcst2q7t.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthCountValid\e[0m = monthCount != \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmonthCountValid\
    \ is already defined as \e[33mvalue\e[0m \e[35mmonthCountValid\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming "
  stdout: ''
  timestamp: 1659800664
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCheck = monthArray.contains(month)\n        val dayCheck = dayArray.contains(day)\n\
    \        val yearCheck = yearArray.contains(year)\n        val dateCheck = monthCheck\
    \ && dayCheck && yearCheck\n        dateCheck\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9fevrgp6.scala:32)\n\tat Problem.main(tmp9fevrgp6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCount = (monthArray.length)\n        val dayCount = (dayArray.length)\n\
    \        val yearCount = (yearArray.length)\n        val monthCountValid = (monthCount\
    \ != 0)\n        val dayCountValid = (dayCount != 0)\n        val yearCountValid\
    \ = (yearCount != 0)\n        val monthValid = (monthArray.contains(month))\n\
    \        val dayValid = (dayArray.contains(day))\n        val yearValid = (yearArray.contains(year))\n\
    \        val monthCountValidValid = (monthCountValid != 0)\n        val dayCountValidValid\
    \ = (dayCountValid != 0)\n        val yearCountValidValid = (yearCountValid !=\
    \ 0)\n        val monthValidValid = (monthValid != 0)\n        val dayValidValid\
    \ = (dayValid != 0)\n        val yearValidValid = (yearValid != 0)\n        val\
    \ monthCountValidValidValid = (monthCountValidValid != 0)\n        val dayCountValidValidValid\
    \ = (dayCountValidValid != 0)\n        val yearCountValidValidValid = (yearCountValidValid\
    \ != 0)\n        val monthValidValidValid = (monthValidValid != 0)\n        val\
    \ dayValidValidValid = (dayValidValid != 0)\n        val yearValidValidValid =\
    \ (yearValidValid != 0)\n        val monthCountValidValidValidValid = (monthCountValidValidValid\
    \ != 0)\n        val dayCountValidValidValidValid = (dayCountValidValidValid !=\
    \ 0)\n        val yearCountValidValidValidValid = (yearCountValidValidValid !=\
    \ 0)\n        val monthValidValidValidValid = (monthValidValidValid != 0)\n  \
    \      val dayValidValidValidValid = (dayValidValidValid != 0)\n        val yearValidValidValidValid\
    \ = (yearValidValidValid != 0)\n        val monthCountValidValidValidValidValid\
    \ = (monthCountValidValidValidValid != 0)\n        val dayCountValidValidValidValidValid\
    \ = (dayCountValidValidValidValid != 0)\n        val yearCountValidValidValidValidValid\
    \ = (yearCountValidValidValidValid != 0)\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp2vyw1l8_.scala:55:11 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmp2vyw1l8_.scala:34:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mmonthCountValidValid\e[0m\
    \ = (monthCountValid != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \                   ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types Boolean and Int cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp2vyw1l8_.scala:35:34 -----------------------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mdayCountValidValid\e[0m = (dayCountValid\
    \ != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Boolean and Int cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp2vyw1l8_.scala:36:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36myearCountValidValid\e[0m\
    \ = (yearCountValid != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Boolean and Int cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp2vyw1l8_.scala:37:31\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m37 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmonthValidValid\e[0m = (monthValid != \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Boolean and Int cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmp2vyw1l8_.scala:38:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mdayValidValid\e[0m = (dayValid\
    \ != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Boolean and Int cannot be compared\
    \ with == or !=\n"
  stdout: ''
  timestamp: 1659800666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n    \
    \    val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,3\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1uf2010q.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1uf2010q.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonth\e[0m = Array(\e[31m31\e[0m,\e[31m28\e[0m,\e[31m31\e[0m,\e\
    [31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1uf2010q.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYear\e[0m = Array(\e[31m1\e\
    [0m,\e[31m2\e[0m,\e[31m3\e[0m,\e[31m4\e[0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e\
    [0m,\e[31m8\e[0m,\e[31m9\e[0m,\e[31m10\e[0m,\e[31m11\e[0m,\e[31m12\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmonthsInYear is already defined as \e[33mvalue\e[0m \e[35mmonthsInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1uf2010q.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmonthsInLeapYear\e[0m = Array(\e[31m4\e\
    [0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e[0m,\e[31m8\e[0m,\e[31m9\e[0m,\e[31m10\e\
    [0m,\e[31m11\e[0m,\e[31m12\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthsInLeapYear is already defined as \e[33mvalue\e[0m \e\
    [35mmonthsInLeapYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1uf2010q.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mv"
  stdout: ''
  timestamp: 1659800663
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateToCheck = dateFormat.parse(date)\n\
    \        val currentDate = Calendar.getInstance()\n        val currentYear = currentDate.getTime().getYear\n\
    \        val currentMonth = currentDate.getTime().getMonth\n        val currentDay\
    \ = currentDate.getTime().getDay\n        val currentDaysInMonth = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val currentMonthsInMonth = Calendar.getInstance().get(Calendar.MONTH)\n\
    \        val currentYearsInMonth = Calendar.getInstance().get(Calendar.YEAR)\n\
    \        val currentYearDays = currentYear * 365 + currentYearsInMonth * 30 +\
    \ currentMonth * 30 + currentDaysInMonth\n        val dateToCheckYear = dateToCheck.getYear\n\
    \        val dateToCheckMonth = dateToCheck.getMonth\n        val dateToCheckDay\
    \ = dateToCheck.getDay\n        val dateToCheckDaysInMonth = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val dateToCheckMonthsInMonth = Calendar.getInstance().get(Calendar.MONTH)\n\
    \        val dateToCheckYearsInMonth = Calendar.getInstance().get(Calendar.YEAR)\n\
    \        val dateToCheckYearDays = dateToCheckYear * 365 + dateToCheckYearsInMonth\
    \ * 30 + dateToCheckMonth * 30 + dateToCheckDaysInMonth\n        val dateToCheckYearDaysRemainder\
    \ = dateToCheckYearDays - currentYearDays\n        val dateToCheckYearDaysRemainderRemainder\
    \ = dateToCheckYearDaysRemainder % 30\n        val dateToCheckYearDaysRemainderRemainderRemainder\
    \ = dateToCheckYearDaysRemainderRemainder % 30\n        val dateToCheckYearDaysRemainderRemainderRemainderRemainder\
    \ = dateToCheckYearDaysRemainderRemainderRemainder % 30\n        val dateToCheckYearDaysRemainderRemainderRemainderRemainderRemainder\
    \ = dateToCheckYearDaysRemainderRemainderRemainderRemainder % 30\n        val\
    \ dateToCheckYearDaysRemainderRemainderRemainderRemainderRemainder = dateToCheckYearDaysRemainderRemainderRemainderRemainderRemainder\
    \ % 30\n        val dateToCheckYearDaysRemainderRemainderRemainderRemainderRemainder\
    \ = dateToCheckYearDaysRemainderRemainderRemainderRemainderRemainder % 30\n  \
    \      val dateToCheckYearDaysRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdo0ft53q.scala:42:87 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mdateToCheckYearDaysRemainderRemainderRemainderRemainderRemainderRemainder\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdo0ft53q.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mdateToCheckYearDaysRemainderRemainderRemainderRemainderRemainder\e\
    [0m = dateToCheckYearDaysRemainderRemainderRemainderRemainderRemainder % \e[31m30\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateToCheckYearDaysRemainderRemainderRemainderRemainderRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35mdateToCheckYearDaysRemainderRemainderRemainderRemainderRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdo0ft53q.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36mdateToCheckYearDaysRemainderRemainderRemainderRemainderRemainder\e\
    [0m = dateToCheckYearDaysRemainderRemainderRemainderRemainderRemainder % \e[31m30\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateToCheckYearDaysRemainderRemainderRemainderRemainderRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35mdateToCheckYearDaysRemainderRemainderRemainderRemainderRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[3"
  stdout: ''
  timestamp: 1659800662
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31)\n        val monthsInYear = List(12, 1, 4, 6)\n        val monthsInLeapYear\
    \ = List(4, 6, 9, 11)\n        val months = dateArray(0).toInt\n        val days\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val leapYear\
    \ = year % 4 == 0\n        val validDays = daysInMonth(months) && days > 1 &&\
    \ days < daysInMonth(months(months - 1)) && months > 1 && months < 12\n      \
    \  val validMonths = monthsInYear(months) && months > 1 && months < 12\n     \
    \   val validLeapYear = monthsInLeapYear(months) && months > 1 && months < 12\n\
    \        val validYear = year > 0\n        val validLeapYearYear = leapYear &&\
    \ year > 0\n        val validYearMonth = validYear && validMonths\n        val\
    \ validLeapYearMonth = validLeapYear && validMonths\n        val validYearDay\
    \ = validYear && validDays\n        val validLeapYearDay = validLeapYear && validDays\n\
    \        val validYearLeapYear = validYear && validLeapYear\n        val validLeapYearYearMonth\
    \ = validLeapYearYear && validYearMonth\n        val validLeapYearLeapYearMonth\
    \ = validLeapYearMonth && validLeapYearMonth\n        val validYearLeapYearDay\
    \ = validYear && validLeapYearDay\n        val validLeapYearLeapYearDay = validLeapYear\
    \ && validLeapYearDay\n        val validYearLeapYearLeapYear = validYear && validLeapYearLeapYear\n\
    \        val validLeapYearLeapYearYearMonth = validLeapYearLeapYearYear && validYearMonth\n\
    \        val validLeapYearLeapYearLeapYearMonth = validLeapYearLeapYearMonth &&\
    \ validLeapYearMonth\n        val validYearLeapYearLeapYearDay = validYear &&\
    \ validLeapYearLeapYearDay\n        val validLeapYearLeapYearLeapYearDay = validLeapYear\
    \ && validLeapYearLeapYearDay\n        val validYearLeapYearLeapYear = validYear\
    \ && validLeapYearLeapYear\n        val validLeapYearLeapYearYearMonth = validLeapYearLeapYearYear\
    \ && validYearMonth\n        val validLeapYearLeapYearLeapYearMonth = validLeapYearLeapYearMonth\
    \ && validLeapYearMonth\n        val validYearLeapYearLeapYearDay = validYear\
    \ && validLeapYearLeapYearDay\n        val validLeapYearLeapYearLeapYearDay =\
    \ validLeapYear && validLeapYearLeapYearDay\n        val validYearLeapYearLeapYear\
    \ = validYear && validLeapYearLeapYear\n        val validLeapYearLeapYearYearMonth\
    \ = validLeapYearLeapYearYear && validYearMonth\n        val validLeapYearLeapYearLeapYearMonth\
    \ = validLeapYearLeapYearMonth && validLeapYearMonth\n        val validYearLeapYear\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk9ufhapr.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk9ufhapr.scala:45:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvalidYearLeapYearLeapYear\e[0m = validYear && validLeapYearLeapYear\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidYearLeapYearLeapYear is already defined as \e[33mvalue\e\
    [0m \e[35mvalidYearLeapYearLeapYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk9ufhapr.scala:46:12 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mvalidLeapYearLeapYearYearMonth\e\
    [0m = validLeapYearLeapYearYear && validYearMonth\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidLeapYearLeapYearYearMonth is already defined as \e[33mvalue\e\
    [0m \e[35mvalidLeapYearLeapYearYearMonth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk9ufhapr.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mvalidLeapYearLeapYearLeapYearMonth\e\
    [0m = validLeapYearLeapYearMonth && validLeapYearMonth\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidLeapYearLeapYearLeapYearMonth is already defined as \e\
    [33mvalue\e[0m \e[35mvalidLeapYearLeapYearLeapYearMonth\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk9ufhapr.scala:48:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvalidYearLeapYearLeapYea"
  stdout: ''
  timestamp: 1659800665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        val dateInMillis = dateObject.getTime\n        val todayInMillis = System.currentTimeMillis\n\
    \        val dateInDays = dateInMillis / 1000\n        val todayInDays = todayInMillis\
    \ / 1000\n        val dateInMonths = dateInDays / 30\n        val todayInMonths\
    \ = todayInDays / 30\n        val dateInYears = dateInMonths / 12\n        val\
    \ todayInYears = todayInMonths / 12\n        val dateInDaysNotLessThan1OrHigherThan31\
    \ = dateInDays < 1 || dateInDays > 31\n        val dateInDaysNotLessThan1OrHigherThan30\
    \ = dateInDays < 1 || dateInDays > 30\n        val dateInDaysNotLessThan1OrHigherThan29\
    \ = dateInDays < 1 || dateInDays > 29\n        val dateInMonthsNotLessThan1OrHigherThan12\
    \ = dateInMonths < 1 || dateInMonths > 12\n        val dateInMonthsNotLessThan1OrHigherThan11\
    \ = dateInMonths < 1 || dateInMonths > 11\n        val dateInMonthsNotLessThan1OrHigherThan10\
    \ = dateInMonths < 1 || dateInMonths > 10\n        val dateInMonthsNotLessThan1OrHigherThan9\
    \ = dateInMonths < 1 || dateInMonths > 9\n        val dateInMonthsNotLessThan1OrHigherThan8\
    \ = dateInMonths < 1 || dateInMonths > 8\n        val dateInMonthsNotLessThan1OrHigherThan7\
    \ = dateInMonths < 1 || dateInMonths > 7\n        val dateInMonthsNotLessThan1OrHigherThan6\
    \ = dateInMonths < 1 || dateInMonths > 6\n        val dateInMonthsNotLessThan1OrHigherThan5\
    \ = dateInMonths < 1 || dateInMonths > 5\n        val dateInMonthsNotLessThan1OrHigherThan4\
    \ = dateInMonths < 1 || dateInMonths > 4\n        val dateInMonthsNotLessThan1OrHigherThan3\
    \ = dateInMonths < 1 || dateInMonths > 3\n        val dateInMonthsNotLessThan1OrHigherThan2\
    \ = dateInMonths < 1 || dateInMonths > 2\n        val dateInMonthsNotLessThan1OrHigherThan1\
    \ = dateInMonths < 1 || dateInMonths > 1\n        val dateInMonthsNotLessThan1Or\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5xi9gs7w.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5xi9gs7w.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5xi9gs7w.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val validMonth = month >= 1 &&\
    \ month <= 12\n        val validDay = day >= 1 && day <= 31\n        val validYear\
    \ = year >= 1 && year <= 2020\n        val validMonthAndDay = validMonth && validDay\n\
    \        val validYearAndMonth = validYear && validMonthAndDay\n        val validMonthAndYear\
    \ = validMonth && validYear\n        val validYearAndDay = validYear && validDay\n\
    \        val validMonthAndYearAndDay = validMonthAndYear && validDay\n       \
    \ val validYearAndMonthAndDay = validYearAndMonth && validDay\n        val validYearAndMonthAndYear\
    \ = validYearAndMonth && validYear\n        val validYearAndMonthAndYearAndDay\
    \ = validYearAndMonthAndYear && validDay\n        val validYearAndMonthAndYearAndMonth\
    \ = validYearAndMonthAndYear && validMonth\n        val validYearAndMonthAndYearAndMonthAndDay\
    \ = validYearAndMonthAndYear && validMonth && validDay\n        val validYearAndMonthAndYearAndMonthAndYear\
    \ = validYearAndMonthAndYear && validMonth && validYear\n        val validYearAndMonthAndYearAndMonthAndYearAndDay\
    \ = validYearAndMonthAndYear && validMonth && validYear && validDay\n        val\
    \ validYearAndMonthAndYearAndMonthAndYearAndMonth = validYearAndMonthAndYear &&\
    \ validMonth && validYear && validMonth\n        val validYearAndMonthAndYearAndMonthAndYearAndMonthAndDay\
    \ = validYearAndMonthAndYear && validMonth && validYear && validMonth && validDay\n\
    \        val validYearAndMonthAndYearAndMonthAndYearAndMonthAndYear = validYearAndMonthAndYear\
    \ && validMonth && validYear && validMonth && validYear\n        val validYearAndMonthAndYearAndMonthAndYearAndMonthAndYearAndDay\
    \ = validYearAndMonthAndYear && validMonth && validYear && validMonth && validYear\
    \ && validDay\n        val validYearAndMonthAndYearAndMonthAndYearAndMonthAndYearAndMonth\
    \ = validYearAndMonthAndYear && validMonth && validYear && validMonth && validYear\
    \ && validMonth && validDay\n        val validYearAndMonthAndYearAndMonthAndYearAndMonthAndYearAndMonthAndDay\
    \ = valid\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2nns72t1.scala:42:83 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mvalidYearAndMonthAndYearAndMonthAndYearAndMonthAndYearAndMonthAndDay\e\
    [0m = valid\n\e[31m\e[31m   |\e[0m                                           \
    \                                        ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                                               Not found: valid\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2nns72t1.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date)\n\
    \        val year = dateArray.getYear\n        val month = dateArray.getMonthValue\n\
    \        val day = dateArray.getDayOfMonth\n        val daysInMonth = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"12-31\").getDayOfMonth\n        val daysInYear = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"12-31\").getYear\n        val daysInLeapYear = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"12-31\").getLeapYear\n        val daysInYearAndMonth = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"12-31\").getYearMonth\n        val daysInYearAndMonthAndDay =\
    \ DateTimeFormat.forPattern(\"MM-dd\").parse(\"12-31\").getYearMonthDay\n    \
    \    val daysInYearAndMonthAndDayAndHour = DateTimeFormat.forPattern(\"MM-dd\"\
    ).parse(\"12-31\").getYearMonthDayHour\n        val daysInYearAndMonthAndDayAndHourAndMinute\
    \ = DateTimeFormat.forPattern(\"MM-dd\").parse(\"12-31\").getYearMonthDayHourMinute\n\
    \        val daysInYearAndMonthAndDayAndHourAndMinuteAndSecond = DateTimeFormat.forPattern(\"\
    MM-dd\").parse(\"12-31\").getYearMonthDayHourMinuteSecond\n        val daysInYearAndMonthAndDayAndHourAndMinuteAndSecondAndMillisecond\
    \ = DateTimeFormat.forPattern(\"MM-dd\").parse(\"12-31\").getYearMonthDayHourMinuteSecondMillisecond\n\
    \        val daysInYearAndMonthAndDayAndHourAndMinuteAndSecondAndMillisecondAndMicrosecond\
    \ = DateTimeFormat.forPattern(\"MM-dd\").parse(\"12-31\").getYearMonthDayHourMinuteSecondMillisecondMicrosecond\n\
    \        val daysInYearAndMonthAndDayAndHourAndMinuteAndSecondAndMillisecondAndMicrosecondAndNanosecond\
    \ = DateTimeFormat.forPattern(\"MM-dd\").parse(\"12-31\").getYearMonthDayHourMinuteSecondMillisecondMicrosecondAndNanosecond\n\
    \        val daysInYearAndMonthAndDayAndHourAndMinuteAndSecondAndMillisecondAndMicrosecondAndNanosecondAndTick\
    \ = DateTimeFormat.forPattern(\"MM-dd\").parse(\"12-31\").getYearMonthDayHourMinuteSecondMillisecondMicrosecondAndNanosecondAndTick\n\
    \        val daysInYearAndMonthAndDay\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9ekrplpe.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ekrplpe.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ekrplpe.scala:23:26\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mdaysInMonth\e[0m = DateTimeFormat.forPattern(\e[31m\"MM-dd\"\e[0m).parse(\e\
    [31m\"12-31\"\e[0m).getDayOfMonth\n\e[31m\e[31m   |\e[0m                     \
    \     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ DateTimeFormat\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ekrplpe.scala:24:25\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mdaysInYear\e[0m = DateTimeFormat.forPattern(\e[31m\"MM-dd\"\e[0m).parse(\e\
    [31m\"12-31\"\e[0m).getYear\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: DateTimeFormat\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ekrplpe.scala:25:29 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdaysInLeapYear\e[0m = DateTimeFormat.forPattern(\e\
    [31m\"MM-dd\"\e[0m).parse(\e[31m\"12-31\"\e[0m).getLeapYear\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                    Not found: DateTimeFormat\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9ekr"
  stdout: ''
  timestamp: 1659800665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        if(dateArray.length != 3)\n            return false\n        val\
    \ months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n       \
    \ val year = dateArray(2).toInt\n        if(months < 1 || months > 12)\n     \
    \       return false\n        if(days < 1 || days > 31)\n            return false\n\
    \        if(days > 30)\n            return false\n        if(months == 2 && days\
    \ > 29)\n            return false\n        if(months == 2 && days == 29)\n   \
    \         return false\n        if(months == 3 && days > 30)\n            return\
    \ false\n        if(months == 3 && days == 30)\n            return false\n   \
    \     if(months == 4 && days > 30)\n            return false\n        if(months\
    \ == 4 && days == 30)\n            return false\n        if(months == 5 && days\
    \ > 30)\n            return false\n        if(months == 5 && days == 30)\n   \
    \         return false\n        if(months == 6 && days > 30)\n            return\
    \ false\n        if(months == 6 && days == 30)\n            return false\n   \
    \     if(months == 7 && days > 30)\n            return false\n        if(months\
    \ == 7 && days == 30)\n            return false\n        if(months == 8 && days\
    \ > 30)\n            return false\n        if(months == 8 && days == 30)\n   \
    \         return false\n        if(months == 9 && days > 30)\n            return\
    \ false\n        if(months == 9 && days == 30)\n            return false\n   \
    \     if(months == 10 && days > 30)\n            return false\n        if(months\
    \ == 10 && days == 30)\n            return false\n        if(months == 11 && days\
    \ > 30)\n            return false\n        if(months == 11 && days == 30)\n  \
    \          return false\n        if(months == 12 && days > 30)\n            return\
    \ false\n        if(months == 12 && days == 30)\n            return true\n   \
    \     else\n            return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppbjjcvs3.scala:78)\n\tat Problem.main(tmppbjjcvs3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        val dateInMillis = dateObject.getTime\n        val currentTimeInMillis\
    \ = System.currentTimeMillis()\n        val difference = currentTimeInMillis -\
    \ dateInMillis\n        val days = difference / (1000 * 60 * 60 * 24)\n      \
    \  val months = difference / (1000 * 60 * 60 * 24 * 30)\n        val years = difference\
    \ / (1000 * 60 * 60 * 24 * 365) \n        val validDays = if (days > 0 && days\
    \ < 31) days else 0\n        val validMonths = if (months > 0 && months < 12)\
    \ months else 0\n        val validYears = if (years > 0 && years < 30) years else\
    \ 0\n        val validMonth = if (validMonths > 0 && validMonths < 12) validMonths\
    \ else 0\n        val validDay = if (validDays > 0 && validDays < 31) validDays\
    \ else 0\n        val validYear = if (validYears > 0 && validYears < 30) validYears\
    \ else 0\n        val validMonth = if (validMonths > 0 && validMonths < 12) validMonths\
    \ else 0\n        val validDay = if (validDays > 0 && validDays < 31) validDays\
    \ else 0\n        val validYear = if (validYears > 0 && validYears < 30) validYears\
    \ else 0\n        val validMonth = if (validMonths > 0 && validMonths < 12) validMonths\
    \ else 0\n        val validDay = if (validDays > 0 && validDays < 31) validDays\
    \ else 0\n        val validYear = if (validYears > 0 && validYears < 30) validYears\
    \ else 0\n        val validMonth = if (validMonths > 0 && validMonths < 12) validMonths\
    \ else 0\n        val validDay = if (validDays > 0 && validDays < 31) validDays\
    \ else 0\n        val validYear = if (validYears > 0 && validYears < 30) validYears\
    \ else 0\n        val validMonth = if (validMonths > 0 && validMonths < 12) validMonths\
    \ else 0\n        val validDay = if (validDays > 0 && validDays < 31) validDays\
    \ else 0\n        val validYear = if (validYears > 0 && validYears < 30) validYears\
    \ else 0\n        val validMonth = if (validMonths > 0 && validMonths < 12) validMonths\
    \ else 0\n        val validDay = if (validDays > 0 && validDays < 31) validDays\
    \ else 0\n        val validYear = if (validYears > 0 && validYears < 30) validYear\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgrfcjur2.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mvalidMonth\e[0m = \e[33mif\e\
    [0m (validMonths > \e[31m0\e[0m && validMonths < \e[31m12\e[0m) validMonths \e\
    [33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidMonth is already defined as \e[33mvalue\e[0m \e[35mvalidMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgrfcjur2.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mvalidDay\e[0m = \e[33mif\e[0m (validDays\
    \ > \e[31m0\e[0m && validDays < \e[31m31\e[0m) validDays \e[33melse\e[0m \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidDay is already defined as \e[33mvalue\e[0m \e[35mvalidDay\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgrfcjur2.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvalidYear\e[0m = \e[33mif\e[0m (validYears\
    \ > \e[31m0\e[0m && validYears < \e[31m30\e[0m) validYears \e[33melse\e[0m \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidYear is already defined as \e[33mvalue\e[0m \e[35mvalidYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgrfcjur2.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvalidMonth\e[0m = \e[33mif\e[0m (validMonths\
    \ > \e[31m0\e[0m && validMonths < \e[31m12\e[0m) validMonths \e[33melse\e[0m \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659800667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2012,2040,2020,2020,2020,2020,2020,2020,2020,2020,2020,2020,2020)\n\
    \        val monthCount = monthArray.count(monthArray.contains(month))\n     \
    \   val dayCount = dayArray.count(dayArray.contains(day))\n        val yearCount\
    \ = yearArray.count(yearArray.contains(year))\n        if(monthCount == 0 || dayCount\
    \ == 0 || yearCount == 0){\n            return false\n        }\n        if(monthCount\
    \ > 12 || dayCount > 31 || yearCount > 30){\n            return false\n      \
    \  }\n        if(monthArray.contains(month) && dayArray.contains(day) && yearArray.contains(year)){\n\
    \            return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjm777avo.scala:25:61\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmonthCount\e\
    [0m = monthArray.count(monthArray.contains(month))\n\e[31m\e[31m   |\e[0m    \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                          Found:    Boolean\n\e[31m\
    \   |\e[0m                                          Required: \e[1m\e[32mInt\e\
    [0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjm777avo.scala:26:55\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdayCount\e\
    [0m = dayArray.count(dayArray.contains(day))\n\e[31m\e[31m   |\e[0m          \
    \                            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                  Found:    Boolean\n\e[31m   |\e[0m        \
    \                              Required: \e[1m\e[32mInt\e[0m\e[1m\e[32m \e[0m\e\
    [1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjm777avo.scala:27:58 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36myearCount\e[0m = yearArray.count(yearArray.contains(year))\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    Boolean\n\
    \e[31m   |\e[0m                                        Required: \e[1m\e[32mInt\e\
    [0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val daysInMonth = Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val monthsInYear = Array(12, 1, 4, 6, 9, 11)\n        val monthsInLeapYear\
    \ = Array(4, 6, 9, 11)\n        val daysInMonthInLeapYear = Array(29, 30)\n  \
    \      val daysInMonthInYear = Array(daysInMonth)\n        val daysInMonthInLeapYear\
    \ = daysInMonthInLeapYear.zip(monthsInLeapYear).map {\n            case (day,\
    \ month) => day + month\n        }\n        val daysInMonthInYear = daysInMonthInYear.zip(monthsInYear).map\
    \ {\n            case (day, month) => day + month\n        }\n        val daysInMonthInLeapYear\
    \ = daysInMonthInLeapYear.zip(monthsInLeapYear).map {\n            case (day,\
    \ month) => day + month\n        }\n        val daysInMonthInYear = daysInMonthInYear.zip(monthsInYear).map\
    \ {\n            case (day, month) => day + month\n        }\n        val daysInMonthInLeapYear\
    \ = daysInMonthInLeapYear.zip(monthsInLeapYear).map {\n            case (day,\
    \ month) => day + month\n        }\n        val daysInMonthInYear = daysInMonthInYear.zip(monthsInYear).map\
    \ {\n            case (day, month) => day + month\n        }\n        val daysInMonthInLeapYear\
    \ = daysInMonthInLeapYear.zip(monthsInLeapYear).map {\n            case (day,\
    \ month) => day + month\n        }\n        val daysInMonthInYear = daysInMonthInYear.zip(monthsInYear).map\
    \ {\n            case (day, month) => day + month\n        }\n        val daysInMonthInLeapYear\
    \ = daysInMonthInLeapYear.zip(monthsInLeapYear).map {\n            case (day,\
    \ month) => day + month\n        }\n        val daysInMonthInYear = daysInMonthInYear.zip(monthsInYear).map\
    \ {\n            case (day, month) => day + month\n        }\n        val daysInMonthInLeapYear\
    \ = daysInMonthInLeapYear.zip(monthsInLeapYear).map {\n            case (day,\
    \ month) => day + month\n        }\n        val daysInMonthInYear = daysInMonthInYear.zip(monthsInYear).map\
    \ {\n            case (day, month) => day + month\n        }\n        val daysInMonthInLeapYear\
    \ = daysInMonthInLeapYear.zip(monthsInLeapYear).map {\n            case (day,\
    \ month) => day + month\n        }\n        val daysInMonthInYear = daysInMonthInYear.zip(monthsInYear).map\
    \ {\n            case (day, month) => day + month\n        }\n        val day\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dyg8p35.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0dyg8p35.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonthInLeapYear\e[0m = daysInMonthInLeapYear.zip(monthsInLeapYear).map\
    \ {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mdaysInMonthInLeapYear\
    \ is already defined as \e[33mvalue\e[0m \e[35mdaysInMonthInLeapYear\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m25 |\e[0m            \e[33mcase\e\
    [0m (day, month) => day + month\n\e[31m26 |\e[0m        }\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmp0dyg8p35.scala:27:12 ---------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthInYear\e[0m = daysInMonthInYear.zip(monthsInYear).map\
    \ {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mdaysInMonthInYear is\
    \ already defined as \e[33mvalue\e[0m \e[35mdaysInMonthInYear\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m28 |\e[0m            \e[33mcase\e[0m (day,\
    \ month) => day + month\n\e[31m29 |\e[0m        }\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0dyg8p35.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthInLeapYear\e[0m = daysInMonthInLeapYear.zip(monthsInLeapYear).map\
    \ {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mdaysInMonthInLeapYear\
    \ is already defined as \e[33mvalue\e[0m \e[35mdaysInMonthInLeapYear\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m31 |\e[0m            \e[33mcase\e\
    [0m (day, month) => day + month\n\e[31m32 |\e[0m        }\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmp0dyg8p35.scala:33:12 ---------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthInYear\e[0m = daysInMonthInYear.zip(monthsInYear).ma"
  stdout: ''
  timestamp: 1659800671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val validMonth = monthArray.contains(months)\n        val validDays =\
    \ daysArray.contains(days)\n        val validYear = yearArray.contains(year)\n\
    \        val validDate = validMonth && validDays && validYear\n        validDate\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfjfyi28g.scala:32)\n\tat Problem.main(tmpfjfyi28g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString = dateFormat.parse(date)\n\
    \        val dateDays = dateFormat.parse(date).getDays\n        val dateMonths\
    \ = dateFormat.parse(date).getMonth\n        val dateYears = dateFormat.parse(date).getYear\n\
    \        val dateMonthDays = dateFormat.parse(date).getDaysInMonth\n        val\
    \ dateMonthDaysMinus1 = dateFormat.parse(date).getDays\n        val dateMonthDaysMinus30\
    \ = dateFormat.parse(date).getDays\n        val dateMonthDaysMinus29 = dateFormat.parse(date).getDays\n\
    \        val dateMonthDaysMinus31 = dateFormat.parse(date).getDays\n        val\
    \ dateMonthDaysMinus12 = dateFormat.parse(date).getDays\n        val dateMonthDaysMinus13\
    \ = dateFormat.parse(date).getDays\n        val dateMonthDaysMinus14 = dateFormat.parse(date).getDays\n\
    \        val dateMonthDaysMinus15 = dateFormat.parse(date).getDays\n        val\
    \ dateMonthDaysMinus16 = dateFormat.parse(date).getDays\n        val dateMonthDaysMinus17\
    \ = dateFormat.parse(date).getDays\n        val dateMonthDaysMinus18 = dateFormat.parse(date).getDays\n\
    \        val dateMonthDaysMinus19 = dateFormat.parse(date).getDays\n        val\
    \ dateMonthDaysMinus20 = dateFormat.parse(date).getDays\n        val dateMonthDaysMinus21\
    \ = dateFormat.parse(date).getDays\n        val dateMonthDaysMinus22 = dateFormat.parse(date).getDays\n\
    \        val dateMonthDaysMinus23 = dateFormat.parse(date).getDays\n        val\
    \ dateMonthDaysMinus24 = dateFormat.parse(date).getDays\n        val dateMonthDaysMinus25\
    \ = dateFormat.parse(date).getDays\n        val dateMonthDaysMinus26 = dateFormat.parse(date).getDays\n\
    \        val dateMonthDaysMinus27 = dateFormat.parse(date).getDays\n        val\
    \ dateMonthDaysMinus28 = dateFormat.parse(date).getDays\n        val dateMonthDaysMinus29\
    \ = dateFormat.parse(date).getDays\n        val dateMonthDaysMinus30 = dateFormat.parse(date\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpswegbsa8.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpswegbsa8.scala:45:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateMonthDaysMinus29\e[0m = dateFormat.parse(date).getDays\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateMonthDaysMinus29 is already defined as \e[33mvalue\e[0m\
    \ \e[35mdateMonthDaysMinus29\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpswegbsa8.scala:46:12 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mdateMonthDaysMinus30\e[0m\
    \ = dateFormat.parse(date\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateMonthDaysMinus30 is already defined as \e[33mvalue\e[0m\
    \ \e[35mdateMonthDaysMinus30\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpswegbsa8.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpswegbsa8.scala:47:5 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659800670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        if(dateArray.length != 3) {\n            return false\n        }\n\
    \        val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        if(months < 1 || months > 12)\
    \ {\n            return false\n        }\n        if(days < 1 || days > 31) {\n\
    \            return false\n        }\n        if(months == 2 && days > 29) {\n\
    \            return false\n        }\n        if(months == 4 && days > 30) {\n\
    \            return false\n        }\n        if(months == 6 && days > 31) {\n\
    \            return false\n        }\n        if(months == 9 && days > 30) {\n\
    \            return false\n        }\n        if(months == 11 && days > 31) {\n\
    \            return false\n        }\n        if(months == 12) {\n           \
    \ return true\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        if(dateArray.length != 3)\n            return false\n        val\
    \ months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n       \
    \ val year = dateArray(2).toInt\n        if(months < 1 || months > 12)\n     \
    \       return false\n        if(days < 1 || days > 31)\n            return false\n\
    \        if(days > 29)\n            return false\n        if(months == 2 && days\
    \ > 30)\n            return false\n        if(months == 2 && days == 31)\n   \
    \         return false\n        if(months == 3 && days > 30)\n            return\
    \ false\n        if(months == 3 && days == 31)\n            return false\n   \
    \     if(months == 4 && days > 30)\n            return false\n        if(months\
    \ == 4 && days == 31)\n            return false\n        if(months == 5 && days\
    \ > 30)\n            return false\n        if(months == 5 && days == 31)\n   \
    \         return false\n        if(months == 6 && days > 30)\n            return\
    \ false\n        if(months == 6 && days == 31)\n            return false\n   \
    \     if(months == 7 && days > 30)\n            return false\n        if(months\
    \ == 7 && days == 31)\n            return false\n        if(months == 8 && days\
    \ > 30)\n            return false\n        if(months == 8 && days == 31)\n   \
    \         return false\n        if(months == 9 && days > 30)\n            return\
    \ false\n        if(months == 9 && days == 31)\n            return false\n   \
    \     if(months == 10 && days > 30)\n            return false\n        if(months\
    \ == 10 && days == 31)\n            return false\n        if(months == 11 && days\
    \ > 30)\n            return false\n        if(months == 11 && days == 31)\n  \
    \          return false\n        if(months == 12 && days > 30)\n            return\
    \ false\n        if(months == 12 && days == 31)\n            return true\n   \
    \     return false\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoo3m7fep.scala:77)\n\tat Problem.main(tmpoo3m7fep.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800672
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        if(date.isEmpty) false\n        else if(monthArray.contains(month) &&\
    \ dayArray.contains(day) && yearArray.contains(year)) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjaaa5lce.scala:30)\n\tat Problem.main(tmpjaaa5lce.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        if(dateArray.length != 3)\n            return false\n        val\
    \ months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n       \
    \ val year = dateArray(2).toInt\n        if(months < 1 || months > 12)\n     \
    \       return false\n        if(days < 1 || days > 31)\n            return false\n\
    \        if(months == 2 && days > 29)\n            return false\n        if(months\
    \ == 2 && days == 29)\n            return false\n        if(months == 3 && days\
    \ > 30)\n            return false\n        if(months == 3 && days == 30)\n   \
    \         return false\n        if(months == 4 && days > 30)\n            return\
    \ false\n        if(months == 4 && days == 30)\n            return false\n   \
    \     if(months == 5 && days > 30)\n            return false\n        if(months\
    \ == 5 && days == 30)\n            return false\n        if(months == 6 && days\
    \ > 30)\n            return false\n        if(months == 6 && days == 30)\n   \
    \         return false\n        if(months == 7 && days > 30)\n            return\
    \ false\n        if(months == 7 && days == 30)\n            return false\n   \
    \     if(months == 8 && days > 30)\n            return false\n        if(months\
    \ == 8 && days == 30)\n            return false\n        if(months == 9 && days\
    \ > 30)\n            return false\n        if(months == 9 && days == 30)\n   \
    \         return false\n        if(months == 10 && days > 30)\n            return\
    \ false\n        if(months == 10 && days == 30)\n            return false\n  \
    \      if(months == 11 && days > 30)\n            return false\n        if(months\
    \ == 11 && days == 30)\n            return false\n        if(months == 12 && days\
    \ > 30)\n            return false\n        if(months == 12 && days == 30)\n  \
    \          return true\n        else\n            return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_yn45d12.scala:76)\n\tat Problem.main(tmp_yn45d12.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject.isValid\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp08xg95p4.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) match {\n \
    \           case null => false\n            case _ => true\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgjjdwtd9.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        dateParsed.getTime != 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvay9fbr6.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val daysInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val isLeapYear = scala.util.Calendar.getInstance.isLeapYear(year)\n \
    \       val isLeapMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val isLeapMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val isLeapMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val isLeapMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val isLeapMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val isLeapMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val isLeapMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val isLeapMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val isLeapMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val isLeapMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val isLeapMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val isLeapMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val isLeapMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val isLeapMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val isLeapMonth = scala.util.Calendar.getInstance.getActualMaximum(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnzg1vuph.scala:39:75 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36misLeapMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnzg1vuph.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLeapMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLeapMonth is already defined as \e[33mvalue\e[0m \e[35misLeapMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnzg1vuph.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36misLeapMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLeapMonth is already defined as \e[33mvalue\e[0m \e[35misLeapMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnzg1vuph.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36misLeapMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLeapMonth is already defined as \e[33mva"
  stdout: ''
  timestamp: 1659800673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat2 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat4 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat8 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat18 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat23 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat28 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpm91tmwrb.scala:48:11 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659800629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2012,2040,2020)\n        if(dateArray.length != 3){\n\
    \            return false\n        }\n        if(monthArray.contains(month) ==\
    \ false){\n            return false\n        }\n        if(dayArray.contains(day)\
    \ == false){\n            return false\n        }\n        if(yearArray.contains(year)\
    \ == false){\n            return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdboin71k.scala:40)\n\tat Problem.main(tmpdboin71k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj = dateFormat.parse(date)\n\
    \        val dateInMillis = dateObj.getTime\n        val todayInMillis = System.currentTimeMillis\n\
    \        val dateInDays = dateInMillis/(1000*60*60*24)\n        val todayInDays\
    \ = todayInMillis/(1000*60*60*24)\n        val dateInMonths = dateInDays/30\n\
    \        val todayInMonths = todayInDays/30\n        val dateInYears = dateInMonths/12\n\
    \        val todayInYears = todayInMonths/12\n        val dateInDaysNotLessThan1OrHigherThan31\
    \ = dateInDays<1 || dateInDays>31\n        val dateInDaysNotLessThan1OrHigherThan30\
    \ = dateInDays<1 || dateInDays>30\n        val dateInDaysNotLessThan1OrHigherThan29\
    \ = dateInDays<1 || dateInDays>29\n        val dateInMonthsNotLessThan1OrHigherThan12\
    \ = dateInMonths<1 || dateInMonths>12\n        val dateInYearsNotLessThan1OrHigherThan12\
    \ = dateInYears<1 || dateInYears>12\n        val dateInDaysNotLessThan1OrHigherThan31\
    \ = dateInDaysNotLessThan1OrHigherThan31 || dateInDaysNotLessThan1OrHigherThan30\n\
    \        val dateInDaysNotLessThan1OrHigherThan30 = dateInDaysNotLessThan1OrHigherThan30\
    \ || dateInDaysNotLessThan1OrHigherThan29\n        val dateInDaysNotLessThan1OrHigherThan29\
    \ = dateInDaysNotLessThan1OrHigherThan29 || dateInDaysNotLessThan1OrHigherThan29\n\
    \        val dateInMonthsNotLessThan1OrHigherThan12 = dateInMonthsNotLessThan1OrHigherThan12\
    \ || dateInMonthsNotLessThan1OrHigherThan12\n        val dateInYearsNotLessThan1OrHigherThan12\
    \ = dateInYearsNotLessThan1OrHigherThan12 || dateInYearsNotLessThan1OrHigherThan12\n\
    \        val dateInDaysNotLessThan1OrHigherThan31 = dateInDaysNotLessThan1OrHigherThan31\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb5p7tw8e.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mdateInDaysNotLessThan1OrHigherThan31\e\
    [0m = dateInDaysNotLessThan1OrHigherThan31 || dateInDaysNotLessThan1OrHigherThan30\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateInDaysNotLessThan1OrHigherThan31 is already defined as\
    \ \e[33mvalue\e[0m \e[35mdateInDaysNotLessThan1OrHigherThan31\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb5p7tw8e.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateInDaysNotLessThan1OrHigherThan30\e[0m = dateInDaysNotLessThan1OrHigherThan30\
    \ || dateInDaysNotLessThan1OrHigherThan29\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateInDaysNotLessThan1OrHigherThan30 is already defined as\
    \ \e[33mvalue\e[0m \e[35mdateInDaysNotLessThan1OrHigherThan30\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb5p7tw8e.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateInDaysNotLessThan1OrHigherThan29\e[0m = dateInDaysNotLessThan1OrHigherThan29\
    \ || dateInDaysNotLessThan1OrHigherThan29\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateInDaysNotLessThan1OrHigherThan29 is already defined as\
    \ \e[33mvalue\e[0m \e[35mdateInDaysNotLessThan1OrHigherThan29\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb5p7tw8e.scala:36:12\
    \ --------"
  stdout: ''
  timestamp: 1659800671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwkmgod7f.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        val year = dateObject.getYear\n        val month = dateObject.getMonthValue\n\
    \        val day = dateObject.getDayOfMonth\n        if(year > 0 && month > 0\
    \ && day > 0){\n            val daysInMonth = DateTimeFormat.forPattern(\"MM\"\
    ).parse(\"12\").lengthOfMonth\n            if(month == 1 && day > daysInMonth){\n\
    \                return false\n            }\n            if(month == 3 && day\
    \ > daysInMonth){\n                return false\n            }\n            if(month\
    \ == 5 && day > daysInMonth){\n                return false\n            }\n \
    \           if(month == 7 && day > daysInMonth){\n                return false\n\
    \            }\n            if(month == 8 && day > daysInMonth){\n           \
    \     return false\n            }\n            if(month == 10 && day > daysInMonth){\n\
    \                return false\n            }\n            if(month == 12 && day\
    \ > daysInMonth){\n                return false\n            }\n        }\n  \
    \      true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkgs78_rq.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpkgs78_rq.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mdaysInMonth\e[0m = DateTimeFormat.forPattern(\e\
    [31m\"MM\"\e[0m).parse(\e[31m\"12\"\e[0m).lengthOfMonth\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                    Not found: DateTimeFormat\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val monthArray = dateArray(0).toString.toInt\n        val dayArray\
    \ = dateArray(1).toString.toInt\n        val year = dateArray(2).toString.toInt\n\
    \        val month = monthArray\n        val day = dayArray\n        val daysInMonth\
    \ = scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(month,12),7),day))\n\
    \        val daysInYear = scala.math.ceil(scala.math.pow(month,12)/scala.math.pow(year,12))\n\
    \        val daysInLeapYear = scala.math.ceil(scala.math.pow(month,12)/scala.math.pow(year,6))\n\
    \        val daysInLeapYear2 = scala.math.ceil(scala.math.pow(month,12)/scala.math.pow(year,4))\n\
    \        val daysInLeapYear3 = scala.math.ceil(scala.math.pow(month,12)/scala.math.pow(year,3))\n\
    \        val daysInLeapYear4 = scala.math.ceil(scala.math.pow(month,12)/scala.math.pow(year,2))\n\
    \        val daysInLeapYear5 = scala.math.ceil(scala.math.pow(month,12)/scala.math.pow(year,1))\n\
    \        val daysInLeapYear6 = scala.math.ceil(scala.math.pow(month,12)/scala.math.pow(year,0))\n\
    \        val daysInLeapYear7 = scala.math.ceil(scala.math.pow(month,12)/scala.math.pow(year,-1))\n\
    \        val daysInLeapYear8 = scala.math.ceil(scala.math.pow(month,12)/scala.math.pow(year,-2))\n\
    \        val daysInLeapYear9 = scala.math.ceil(scala.math.pow(month,12)/scala.math.pow(year,-3))\n\
    \        val daysInLeapYear10 = scala.math.ceil(scala.math.pow(month,12)/scala.math.pow(year,-4))\n\
    \        val daysInLeapYear11 = scala.math.ceil(scala.math.pow(month,12)/scala.math.pow(year,-5))\n\
    \        val daysInLeapYear12 = scala.math.ceil(scala.math.pow(month,12)/scala.math.pow(year,-6))\n\
    \        val daysInLeapYear13 = scala.math.ceil(scala.math.pow(month,12)/scala.math.pow(year,-7))\n\
    \        val daysInLeapYear14 = scala.math.ceil(scala.math.pow(month,12)/scala.math.pow(year,-8))\n\
    \        val daysInLeapYear15 = scala.math.ceil(scala.math.pow(month,12)/scala.math.pow(year,-9))\n\
    \        val daysInLeapYear16 = scala.math.ceil(scala.math.pow(month,12)/scala.math.pow(year,-10))\n\
    \        val daysIn\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaa0295hn.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpaa0295hn.scala:24:73 --------------------\e[0m\e[0m\n\e[31m24 |\e[0m\
    \        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(month,\e\
    [31m12\e[0m),\e[31m7\e[0m),day))\n\e[31m\e[31m   |\e[0m                      \
    \                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Found:  \
    \  \e[1m\e[31m(\e[0mDouble\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e[0m\e\
    [1m\e[31m)\e[0m\n\e[31m   |\e[0m                                             \
    \    Required: Double\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaa0295hn.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject.isValid && dateObject.getTime > System.currentTimeMillis -\
    \ 1000*60*60*24*31*12*30*29\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcixkr2fa.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject.getTime != 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnzmjm454.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n   \
    \     val daysInMonth2 = Array(31,29,31,30,31,30,31,30,31,30,31,30,31)\n     \
    \   val daysInMonth3 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31)\n       \
    \ val daysInMonth4 = Array(31,31,31,31,31,31,31,31,31,31,31,31,31)\n        val\
    \ daysInMonth5 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31,30,31)\n       \
    \ val daysInMonth6 = Array(31,31,31,31,31,31,31,31,31,31,31,31,31,31)\n      \
    \  val daysInMonth7 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31,30,31)\n  \
    \      val daysInMonth8 = Array(31,31,31,31,31,31,31,31,31,31,31,31,31,31)\n \
    \       val daysInMonth9 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth10 = Array(31,31,31,31,31,31,31,31,31,31,31,31,31,31,31)\n\
    \        val daysInMonth11 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth12 = Array(31,31,31,31,31,31,31,31,31,31,31,31,31,31,31)\n\
    \        val daysInMonth = daysInMonth.zip(daysInMonth2).zip(daysInMonth3).zip(daysInMonth4).zip(daysInMonth5).zip(daysInMonth6).zip(daysInMonth7).zip(daysInMonth8).zip(daysInMonth9).zip(daysInMonth10).zip(daysInMonth11).zip(daysInMonth12)\n\
    \        val daysInMonth = daysInMonth.map(x => x._1 - x._2)\n        val daysInMonth\
    \ = daysInMonth.filter(x => x >= 1 && x <= 31).filter(x => x >= 1 && x <= 30).filter(x\
    \ => x >= 1 && x <= 29)\n        val daysInMonth = daysInMonth.filter(x => x >=\
    \ 1 && x <= 12)\n        val daysInMonth = daysInMonth.filter(x => x >= 1 && x\
    \ <= 31)\n        val daysInMonth = daysInMonth.filter(x => x >= 1 && x <= 30)\n\
    \        val daysInMonth = daysInMonth.filter(x => x >= 1 && x <= 29)\n      \
    \  val daysInMonth = daysInMonth.filter(x => x >= 1 && x <= 12)\n        val daysInMonth\
    \ = daysInMonth.filter(x => x >= 1 && x <= 31)\n        val daysInMonth = day\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptl3kfmn2.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth.zip(daysInMonth2).zip(daysInMonth3).zip(daysInMonth4).zip(daysInMonth5).zip(daysInMonth6).zip(daysInMonth7).zip(daysInMonth8).zip(daysInMonth9).zip(daysInMonth10).zip(daysInMonth11).zip(daysInMonth12)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptl3kfmn2.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth.map(\e\
    [36mx\e[0m => x._1 - x._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptl3kfmn2.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth.filter(\e\
    [36mx\e[0m => x >= \e[31m1\e[0m && x <= \e[31m31\e[0m).filter(\e[36mx\e[0m =>\
    \ x >= \e[31m1\e[0m && x <= \e[31m30\e[0m).filter(\e[36mx\e[0m => x >= \e[31m1\e\
    [0m && x <= \e[31m29\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/"
  stdout: ''
  timestamp: 1659800676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val monthArray = dateArray(0).toString.toInt\n        val dayArray\
    \ = dateArray(1).toString.toInt\n        val year = dateArray(2).toString.toInt\n\
    \        val month = monthArray\n        val day = dayArray\n        val monthDays\
    \ = monthArray*31 + dayArray\n        val monthYears = monthArray*12 + year\n\
    \        val monthDaysYears = monthDays + year\n        val monthYearsDays = monthYears\
    \ + dayArray\n        val monthYearsDaysYears = monthYearsDays + year\n      \
    \  val monthYearsDaysYearsMonth = monthYearsDaysYears + monthArray\n        val\
    \ monthYearsDaysYearsMonthDays = monthYearsDaysYears + monthDays\n        val\
    \ monthYearsDaysYearsMonthDaysYears = monthYearsDaysYears + monthDaysYears\n \
    \       val monthYearsDaysYearsMonthDaysYearsMonth = monthYearsDaysYearsMonth\
    \ + monthArray\n        val monthYearsDaysYearsMonthDaysYearsMonthDays = monthYearsDaysYearsMonthDays\
    \ + monthDays\n        val monthYearsDaysYearsMonthDaysYearsMonthDaysYears = monthYearsDaysYearsMonthDaysYears\
    \ + monthDaysYears\n        val monthYearsDaysYearsMonthDaysYearsMonthDaysYearsMonth\
    \ = monthYearsDaysYearsMonthDaysYearsMonthDays + monthArray\n        val monthYearsDaysYearsMonthDaysYearsMonthDaysYearsMonthDays\
    \ = monthYearsDaysYearsMonthDaysYearsMonthDaysYears + monthDaysYears\n       \
    \ val monthYearsDaysYearsMonthDaysYearsMonthDaysYearsMonthDaysYears = monthYearsDaysYearsMonthDaysYearsMonthDaysYearsMonth\
    \ + monthArray\n        val monthYearsDaysYearsMonthDaysYearsMonthDaysYearsMonthDaysYearsMonth\
    \ = monthYearsDaysYearsMonthDaysYearsMonthDaysYearsMonthDays + monthArray\n  \
    \      val monthYearsDaysYearsMonthDaysYearsMonthDaysYearsMonthDaysYearsMonthDaysYears\
    \ = monthYearsDaysYearsMonthDaysYearsMonth\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc8gh0388.scala:40:5\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val months = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysNotLessThan1 = Array(31,28,31,30,31,30,31,30,31,30,31)\n    \
    \    val daysNotLessThan30 = Array(31,28,31,30,31,30,31,30,31,30,31)\n       \
    \ val daysNotLessThan29 = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ daysNotLessThan12 = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthNotLessThan1\
    \ = Array(12,11,10,9,8,7,6,5,4,3,2,1)\n        val monthNotLessThan12 = Array(12,11,10,9,8,7,6,5,4,3,2,1)\n\
    \        val monthNotLessThan30 = Array(12,11,10,9,8,7,6,5,4,3,2,1)\n        val\
    \ monthNotLessThan31 = Array(12,11,10,9,8,7,6,5,4,3,2,1)\n        val monthNotLessThan31\
    \ = Array(12,11,10,9,8,7,6,5,4,3,2,1)\n        val monthNotLessThan31 = Array(12,11,10,9,8,7,6,5,4,3,2,1)\n\
    \        val monthNotLessThan31 = Array(12,11,10,9,8,7,6,5,4,3,2,1)\n        val\
    \ monthNotLessThan31 = Array(12,11,10,9,8,7,6,5,4,3,2,1)\n        val monthNotLessThan31\
    \ = Array(12,11,10,9,8,7,6,5,4,3,2,1)\n        val monthNotLessThan31 = Array(12,11,10,9,8,7,6,5,4,3,2,1)\n\
    \        val monthNotLessThan31 = Array(12,11,10,9,8,7,6,5,4,3,2,1)\n        val\
    \ monthNotLessThan31 = Array(12,11,10,9,8,7,6,5,4,3,2,1)\n        val monthNotLessThan31\
    \ = Array(12,11,10,9,8,7,6,5,4,3,2,1)\n        val monthNotLessThan31 = Array(12,11,10,9,8,7,6,5,4,3,2,1)\n\
    \        val monthNotLessThan31 = Array(12,11,10,9,8,7,6,5,4,3,2,1)\n        val\
    \ monthNotLessThan31 = Array(12,11,10,9,8,7,6,5,4,3,2,1)\n        val monthNotLessThan31\
    \ = Array(12,11,10,9,8,7,6,5,4,3,2,1)\n        val monthNotLessThan31 = Array(12,11,10,9,8,7,6,5,4,3,2,\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmpzxes83.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmpzxes83.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthNotLessThan31\e[0m = Array(\e[31m12\e[0m,\e[31m11\e[0m,\e[31m10\e\
    [0m,\e[31m9\e[0m,\e[31m8\e[0m,\e[31m7\e[0m,\e[31m6\e[0m,\e[31m5\e[0m,\e[31m4\e\
    [0m,\e[31m3\e[0m,\e[31m2\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthNotLessThan31 is already defined as \e[33mvalue\e[0m\
    \ \e[35mmonthNotLessThan31\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmpzxes83.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmonthNotLessThan31\e[0m\
    \ = Array(\e[31m12\e[0m,\e[31m11\e[0m,\e[31m10\e[0m,\e[31m9\e[0m,\e[31m8\e[0m,\e\
    [31m7\e[0m,\e[31m6\e[0m,\e[31m5\e[0m,\e[31m4\e[0m,\e[31m3\e[0m,\e[31m2\e[0m,\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthNotLessThan31 is already defined as \e[33mvalue\e[0m\
    \ \e[35mmonthNotLessThan31\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmpzxes83.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmonthNotLessThan31\e[0m\
    \ = Array(\e[31m12\e[0m,\e[31m11\e[0m,\e[31m10\e[0m,\e[31m9\e[0m,\e[31m8\e[0m,\e\
    [31m7\e[0m,\e[31m6\e[0m,\e[31m5\e[0m,\e[31m4\e[0m,\e[31m3\e[0m,\e[31m2\e[0m,\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthNotLessThan31 is already defined as \e[33mvalue\e[0m\
    \ \e[35mmonthNotLessThan31\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Err"
  stdout: ''
  timestamp: 1659800676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfeeua_4r.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfeeua_4r.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfeeua_4r.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfeeua_4r.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfeeua_4r.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfeeua_4r.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        val dateInDays = dateParsed.getTime\n        val dateInDaysInYear = dateInDays\
    \ / 86400000\n        val dateInDaysInYearInMonth = dateInDaysInYear / 30\n  \
    \      val dateInDaysInYearInMonthInDay = dateInDaysInYearInMonth / 30\n     \
    \   val dateInDaysInYearInMonthInDayInYear = dateInDaysInYearInMonthInDay / 365\n\
    \        val dateInDaysInYearInMonthInDayInYearInMonth = dateInDaysInYearInMonthInDayInYear\
    \ / 30\n        val dateInDaysInYearInMonthInDayInYearInMonthInDay = dateInDaysInYearInMonthInDayInYearInMonth\
    \ / 30\n        val dateInDaysInYearInMonthInDayInYearInMonthInDayInYear = dateInDaysInYearInMonthInDayInYearInMonthInDay\
    \ / 365\n        val dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonth\
    \ = dateInDaysInYearInMonthInDayInYearInMonthInDayInYear / 30\n        val dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDay\
    \ = dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonth / 30\n       \
    \ val dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYear =\
    \ dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDay / 365\n   \
    \     val dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYearInMonth\
    \ = dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYear / 30\n\
    \        val dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYearInMonthInDay\
    \ = dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYearInMonth\
    \ / 30\n        val dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYear\
    \ = dateInDaysInYearInMonthInDay\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa_423zhs.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpa_423zhs.scala:34:5 ---------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val validMonths = List(1, 3, 5,\
    \ 7, 8, 10, 12)\n        val validDays = List(1, 30, 29)\n        val validYears\
    \ = List(2000, 2012, 2040, 2020, 2040) // All the years are valid\n        val\
    \ validMonth = List(4, 6, 9, 11) // All the months are valid\n        val validDay\
    \ = List(3, 12, 31) // All the days are valid\n        val validYear = List(2000,\
    \ 2012, 2040, 2020, 2040) // All the years are valid\n        val validMonths\
    \ = validMonths.contains(months)\n        val validDays = validDays.contains(days)\n\
    \        val validYears = validYears.contains(year)\n        val validMonth =\
    \ validMonth.contains(months)\n        val validDay = validDay.contains(days)\n\
    \        val validYear = validYear.contains(year)\n        val validMonths = validMonths.contains(months)\n\
    \        val validDays = validDays.contains(days)\n        val validYears = validYears.contains(year)\n\
    \        val validMonth = validMonth.contains(months)\n        val validDay =\
    \ validDay.contains(days)\n        val validYear = validYear.contains(year)\n\
    \        val validMonths = validMonths.contains(months)\n        val validDays\
    \ = validDays.contains(days)\n        val validYears = validYears.contains(year)\n\
    \        val validMonth = validMonth.contains(months)\n        val validDay =\
    \ validDay.contains(days)\n        val validYear = validYear.contains(year)\n\
    \        val validMonths = validMonths.contains(months)\n        val validDays\
    \ = validDays.contains(days)\n        val validYears = validYears.contains(year)\n\
    \        val validMonth = validMonth.contains(months)\n        val validDay =\
    \ validDay.contains(days)\n        val validYear = validYear.contains(year)\n\
    \        val validMonths = validMonths.contains(months)\n        val validDays\
    \ = validDays.contains(days)\n        val validYears = validYears.contains(year)\n\
    \        val validMonth = validMonth.contains(months)\n        val validDay =\
    \ validDay.contains(days)\n        val validYear = validYear.contains(year)\n\
    \        val validMonths = validMonths.contains(months)\n        val validDays\
    \ = validDays.contains(days)\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpjky8qcq1.scala:60:11 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpjky8qcq1.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvalidMonths\e[0m = validMonths.contains(months)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidMonths is already defined as \e[33mvalue\e[0m \e[35mvalidMonths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjky8qcq1.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mvalidDays\e[0m = validDays.contains(days)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalidDays is already defined as \e[33mvalue\e[0m \e[35mvalidDays\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjky8qcq1.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mvalidYears\e[0m = validYears.contains(year)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalidYears is already defined as \e[33mvalue\e[0m \e[35mvalidYears\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjky8qcq1.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvalidMonth\e[0m = validMonth.contains(months)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalidMonth is already defined as \e[33mvalue\e[0m \e[35mvalidMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded "
  stdout: ''
  timestamp: 1659800676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0)\n        val day = dateArray(1)\n     \
    \   val year = dateArray(2)\n        val daysInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val monthArray = Array.ofDim[Int](month)\n        val validDate = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val validMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val validYear = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.YEAR)\n\
    \        val validDay = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_YEAR)\n\
    \        val validYearMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.YEAR_OF_YEAR)\n\
    \        val validYearMonthDay = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.YEAR_OF_MONTH)\n\
    \        val validYearMonthDayDay = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.YEAR_OF_MONTH_AND_DAY)\n\
    \        val validYearMonthDayDayMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.YEAR_OF_MONTH_AND_DAY_OF_MONTH)\n\
    \        val validYearMonthDayDayMonthDay = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.YEAR_OF_MONTH_AND_DAY_OF_MONTH_AND_DAY)\n\
    \        val validYearMonthDayDayMonthDayMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.YEAR_OF_MONTH_AND_DAY_OF_MONTH_AND_DAY_OF_MONTH)\n\
    \        val validYearMonthDayDayMonthDayMonthDay = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.YEAR_OF_MONTH_AND_DAY_OF_MONTH_AND_DAY_OF_MONTH_AND_DAY)\n\
    \        val validYearMonthDayDayMonthDayMonthDayMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu75tl1u9.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu75tl1u9.scala:22:37\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdaysInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpu75tl1u9.scala:24:19 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ value Calendar is not a member of util\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpu75tl1u9.scala:25:42 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mmonthArray\e[0m = Array.ofDim[\e[35mInt\e\
    [0m](month)\n\e[31m\e[31m   |\e[0m                                          ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Found:    (month\
    \ : String)\n\e[31m   |\e[0m                                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu75tl1u9.scala:26:35\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mvalidDate\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        value Calendar is not a member of util\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpu75tl1u9.scala:27:36 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvalidMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val daysInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInYear = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonthsInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInYearsInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val dateArrayLength = dateArray.length\n        val daysInMonthLength\
    \ = daysInMonth.length\n        val monthsInYearLength = monthsInYear.length\n\
    \        val daysInMonthsInMonthLength = daysInMonthsInMonth.length\n        val\
    \ monthsInYearsInMonthLength = monthsInYearsInMonth.length\n        val dateArrayLength2\
    \ = dateArrayLength * 2\n        val daysInMonthLength2 = daysInMonthLength *\
    \ 2\n        val monthsInYearLength2 = monthsInYearLength * 2\n        val daysInMonthsInMonthLength2\
    \ = daysInMonthsInMonthLength * 2\n        val monthsInYearsInMonthLength2 = monthsInYearsInMonthLength\
    \ * 2\n        val dateArrayLength3 = dateArrayLength * 3\n        val daysInMonthLength3\
    \ = daysInMonthLength * 3\n        val monthsInYearLength3 = monthsInYearLength\
    \ * 3\n        val daysInMonthsInMonthLength3 = daysInMonthsInMonthLength * 3\n\
    \        val monthsInYearsInMonthLength3 = monthsInYearsInMonthLength * 3\n  \
    \      val dateArrayLength4 = dateArrayLength * 4\n        val daysInMonthLength4\
    \ = daysInMonthLength * 4\n        val monthsInYearLength4 = monthsInYearLength\
    \ * 4\n        val daysInMonthsInMonthLength4 = daysInMonthsInMonthLength * 4\n\
    \        val monthsInYearsInMonthLength4 = monthsInYearsInMonthLength * 4\n  \
    \      val dateArrayLength5 = dateArrayLength * 5\n        val daysInMonthLength5\
    \ = daysInMonthLength * 5\n        val monthsInYearLength5 = monthsInYearLength\
    \ * 5\n        val daysInMonthsInMonthLength5 = daysInMonthsInMonthLength * 5\n\
    \        val monthsInYearsInMonthLength5 = monthsInYearsInMonthLength * 5\n  \
    \      val dateArrayLength6 = dateArrayLength * 6\n        val daysInMonthLength6\
    \ = daysInMonthLength * 6\n        val monthsInYearLength6 = monthsInYearLength\
    \ * 6\n        val daysInMonthsInMonthLength6 = daysInMonthsInMonthLength * 6\n\
    \        val monthsInYearsInMonthLength6 = monthsInYearsInMonthLength * 6\n  \
    \      val dateArrayLength7 = date\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm0z_aa60.scala:19:37 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpm0z_aa60.scala:20:38 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYear\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpm0z_aa60.scala:21:45 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthsInMonth\e[0m\
    \ = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value Calendar is not a member\
    \ of util\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm0z_aa60.scala:22:46\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmonthsInYearsInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value Calendar is not a\
    \ member of util\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm0z_aa60.scala:54:5\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659800679
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        if(dateArray.length != 3){\n            return false\n        }\n\
    \        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        if(month < 1 || month > 12){\n\
    \            return false\n        }\n        if(day < 1 || day > 30){\n     \
    \       return false\n        }\n        if(month == 2 && day > 29){\n       \
    \     return false\n        }\n        if(month == 2 && day > 28){\n         \
    \   return false\n        }\n        if(month == 2 && day > 31){\n           \
    \ return false\n        }\n        if(month == 1 || month == 3 || month == 5 ||\
    \ month == 7 || month == 8 || month == 10 || month == 12){\n            if(day\
    \ > 31){\n                return false\n            }\n        }\n        if(month\
    \ == 4 || month == 6 || month == 9 || month == 11){\n            if(day > 30){\n\
    \                return false\n            }\n        }\n        if(month == 2){\n\
    \            if(day > 29){\n                return false\n            }\n    \
    \    }\n        if(month == 1){\n            if(day > 28){\n                return\
    \ false\n            }\n        }\n        if(month == 0){\n            if(day\
    \ > 31){\n                return false\n            }\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val daysInMonth = List(31,28,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = List(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = List(4,6,9,11)\n        val monthsInLeapYear2 = List(4,6,9,11)\n        val\
    \ monthsInLeapYear3 = List(4,6,9,11)\n        val monthsInLeapYear4 = List(4,6,9,11)\n\
    \        val monthsInLeapYear5 = List(4,6,9,11)\n        val monthsInLeapYear6\
    \ = List(4,6,9,11)\n        val monthsInLeapYear7 = List(4,6,9,11)\n        val\
    \ monthsInLeapYear8 = List(4,6,9,11)\n        val monthsInLeapYear9 = List(4,6,9,11)\n\
    \        val monthsInLeapYear10 = List(4,6,9,11)\n        val monthsInLeapYear11\
    \ = List(4,6,9,11)\n        val monthsInLeapYear12 = List(4,6,9,11)\n        val\
    \ monthsInLeapYear13 = List(4,6,9,11)\n        val monthsInLeapYear14 = List(4,6,9,11)\n\
    \        val monthsInLeapYear15 = List(4,6,9,11)\n        val monthsInLeapYear16\
    \ = List(4,6,9,11)\n        val monthsInLeapYear17 = List(4,6,9,11)\n        val\
    \ monthsInLeapYear18 = List(4,6,9,11)\n        val monthsInLeapYear19 = List(4,6,9,11)\n\
    \        val monthsInLeapYear20 = List(4,6,9,11)\n        val monthsInLeapYear21\
    \ = List(4,6,9,11)\n        val monthsInLeapYear22 = List(4,6,9,11)\n        val\
    \ monthsInLeapYear23 = List(4,6,9,11)\n        val monthsInLeapYear24 = List(4,6,9,11)\n\
    \        val monthsInLeapYear25 = List(4,6,9,11)\n        val monthsInLeapYear26\
    \ = List(4,6,9,11)\n        val monthsInLeapYear27 = List(4,6,9,11)\n        val\
    \ monthsInLeapYear28 = List(4,6,9,11)\n        val monthsInLeapYear29 = List(4,6,9,11)\n\
    \        val monthsInLeapYear30 = List(4,6,9,11)\n        val monthsInLeapYear31\
    \ = List(4,6,9,11)\n        val monthsInLeapYear32 = List(4,6,9,11)\n        val\
    \ monthsInLeapYear33 = List(4,6,9,11)\n        val monthsInLeapYear34 = List(4,6,9,11)\n\
    \        val monthsInLeapYear35 = List(4,6,9,11)\n        val monthsInLeapYear36\
    \ = List(4,6,9,11)\n        val monthsInLeapYear37 = List(\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0t66251o.scala:57:38 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[36mmonthsInLeapYear37\e[0m\
    \ = List(\n\e[31m\e[31m   |\e[0m                                      ^\e[0m\n\
    \e[31m   |\e[0m                                      expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0t66251o.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        if(dateArray.length != 3){\n            return false\n        }\n\
    \        val monthArray = dateArray(0).toString.split(\"-\")\n        if(monthArray.length\
    \ != 3){\n            return false\n        }\n        val dayArray = dateArray(1).toString.split(\"\
    -\")\n        if(dayArray.length != 3){\n            return false\n        }\n\
    \        val year = dateArray(2).toString.toInt\n        if(year < 1 || year >\
    \ 9999){\n            return false\n        }\n        val months = monthArray(0).toString.toInt\n\
    \        if(months < 1 || months > 12){\n            return false\n        }\n\
    \        val days = dayArray(0).toString.toInt\n        if(days < 1 || days >\
    \ 31){\n            return false\n        }\n        val months = monthArray(1).toString.toInt\n\
    \        if(months < 1 || months > 12){\n            return false\n        }\n\
    \        val days = dayArray(1).toString.toInt\n        if(days < 1 || days >\
    \ 30){\n            return false\n        }\n        val months = monthArray(2).toString.toInt\n\
    \        if(months < 1 || months > 12){\n            return false\n        }\n\
    \        val days = dayArray(2).toString.toInt\n        if(days < 1 || days >\
    \ 29){\n            return false\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp34hr4s3t.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mmonths\e[0m = monthArray(\e\
    [31m1\e[0m).toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonths is already defined as \e[33mvalue\e[0m \e[35mmonths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp34hr4s3t.scala:46:12 ---------------------------\e[0m\e[0m\n\e\
    [31m46 |\e[0m        \e[33mval\e[0m \e[36mdays\e[0m = dayArray(\e[31m1\e[0m).toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdays is already defined as \e[33mvalue\e[0m \e[35mdays\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp34hr4s3t.scala:50:12 ---------------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m        \e[33mval\e[0m \e[36mmonths\e[0m = monthArray(\e[31m2\e[0m).toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmonths is already defined as \e[33mvalue\e[0m \e[35mmonths\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp34hr4s3t.scala:54:12 ---------------------------\e[0m\e[0m\n\e[31m54\
    \ |\e[0m        \e[33mval\e[0m \e[36mdays\e[0m = dayArray(\e[31m2\e[0m).toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdays is already defined as \e[33mvalue\e[0m \e[35mdays\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1659800678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj = dateFormat.parse(date)\n\
    \        val dateInMillis = dateObj.getTime\n        val dateInDays = dateInMillis\
    \ / 1000\n        val dateInMonths = dateInDays / 30\n        val dateInYears\
    \ = dateInMonths / 12\n        val dateInDaysLessOneMonth = dateInDays - dateInMonths\n\
    \        val dateInDaysLessOneYear = dateInDaysLessOneMonth - dateInYears\n  \
    \      val dateInDaysLessOneYearLessOneMonth = dateInDaysLessOneYear - dateInMonths\n\
    \        val dateInDaysLessOneYearLessOneMonthLessOneMonth = dateInDaysLessOneYearLessOneMonth\
    \ - dateInYears\n        val dateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonth\
    \ = dateInDaysLessOneYearLessOneMonthLessOneMonth - dateInMonths\n        val\
    \ dateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonthLessOneMonth = dateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonthLessOneMonth\
    \ - dateInYears\n        val dateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonth\
    \ = dateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonth\
    \ - dateInMonths\n        val dateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonth\
    \ = dateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonth\
    \ - dateInYears\n        val dateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonth\
    \ = dateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonth\
    \ - dateInMonths\n        val dateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonth\
    \ = dateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonth\
    \ - dateInYears\n        val dateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonthLess\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvk6x148x.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvk6x148x.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonth\e\
    [0m = dateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonth\
    \ - dateInMonths\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonth\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  dateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonth\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpvk6x148x.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mdateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonth\e\
    [0m = dateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonth\
    \ - dateInYears\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonth\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  dateInDaysLessOneYearLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonthLessOneMonth\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e"
  stdout: ''
  timestamp: 1659800680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        dateParsed != null\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpenxp_5zt.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject != null\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa0zrdznc.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed2\
    \ = dateFormat2.parse(date)\n        val dateFormat3 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed3 = dateFormat3.parse(date)\n        val\
    \ dateFormat4 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed4\
    \ = dateFormat4.parse(date)\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed5 = dateFormat5.parse(date)\n        val\
    \ dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed6\
    \ = dateFormat6.parse(date)\n        val dateFormat7 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed7 = dateFormat7.parse(date)\n        val\
    \ dateFormat8 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed8\
    \ = dateFormat8.parse(date)\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed9 = dateFormat9.parse(date)\n        val\
    \ dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed10\
    \ = dateFormat10.parse(date)\n        val dateFormat11 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed11 = dateFormat11.parse(date)\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed12\
    \ = dateFormat12.parse(date)\n        val dateFormat13 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed13 = dateFormat13.parse(date)\n        val\
    \ dateFormat14 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed14\
    \ = dateFormat14.parse(date)\n        val dateFormat15 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed15 = dateFormat15.parse(date)\n        val\
    \ dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed16\
    \ = dateFormat16.parse(date)\n        val dateFormat17 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed17 = dateFormat17.parse(date)\n        val\
    \ dateFormat18 = new SimpleDateFormat(\"MM-dd-yyyy\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcpirbkf.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpvcpirbkf.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcpirbkf.scala:22:30 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcpirbkf.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcpirbkf.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateFormat5\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m           "
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date)\n\
    \        dateArray.getTime < 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3199bj5r.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwkmgod7f.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        if(month < 1 || month > 12) false\n\
    \        if(day < 1 || day > 31) false\n        if(month == 2) day > 29 else day\
    \ > 30\n        if(day > 31) false\n        if(month == 1 && day > 31) false\n\
    \        if(month == 3 && day > 30) false\n        if(month == 5 && day > 31)\
    \ false\n        if(month == 7 && day > 31) false\n        if(month == 8 && day\
    \ > 31) false\n        if(month == 10 && day > 31) false\n        if(month ==\
    \ 12 && day > 31) false\n        if(month == 1 && day > 30) false\n        if(month\
    \ == 3 && day > 29) false\n        if(month == 5 && day > 29) false\n        if(month\
    \ == 7 && day > 29) false\n        if(month == 8 && day > 29) false\n        if(month\
    \ == 10 && day > 29) false\n        if(month == 12 && day > 29) false\n      \
    \  if(month == 1 && day > 28) false\n        if(month == 3 && day > 28) false\n\
    \        if(month == 5 && day > 28) false\n        if(month == 7 && day > 28)\
    \ false\n        if(month == 8 && day > 28) false\n        if(month == 10 && day\
    \ > 28) false\n        if(month == 12 && day > 28) false\n        if(month ==\
    \ 1 && day > 27) false\n        if(month == 3 && day > 27) false\n        if(month\
    \ == 5 && day > 27) false\n        if(month == 7 && day > 27) false\n        if(month\
    \ == 8 && day > 27) false\n        if(month == 10 && day > 27) false\n       \
    \ if(month == 12 && day > 27) false\n        if(month == 1 && day > 26) false\n\
    \        if(month == 3 && day > 26) false\n        if(month == 5 && day > 26)\
    \ false\n        if(month == 7 && day > 26) false\n        if(month == 8 && day\
    \ > 26) false\n        if(month == 10 && day > 26) false\n        if(month ==\
    \ 12 && day > 26) false\n        if(month == 1 && day > 25) false\n        if(month\
    \ == 3 && day > 25) false\n        if(month == 5 && day > 25) false\n        if(month\
    \ == 7 && day > 25) false\n        if(month == 8 && day > 25) false\n        if(month\
    \ == 10 && day > 25) false\n        if(month == 12 && day > 25) false\n      \
    \  if(month == 1 && day > 24) false\n        if(month == 3 && day > 24\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgybu6iny.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[33m\e[33m-- [E129] Potential Issue Warning:\
    \ /tmp/tmpgybu6iny.scala:22:36 ----------------\e[0m\e[0m\n\e[33m22 |\e[0m   \
    \     \e[33mif\e[0m(month < \e[31m1\e[0m || month > \e[31m12\e[0m) \e[31mfalse\e\
    [0m\n\e[33m\e[33m   |\e[0m                                    ^^^^^\e[0m\n\e[33m\
    \   |\e[0mA pure expression does nothing in statement position; you may be omitting\
    \ necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning:\
    \ /tmp/tmpgybu6iny.scala:23:32 ----------------\e[0m\e[0m\n\e[33m23 |\e[0m   \
    \     \e[33mif\e[0m(day < \e[31m1\e[0m || day > \e[31m31\e[0m) \e[31mfalse\e[0m\n\
    \e[33m\e[33m   |\e[0m                                ^^^^^\e[0m\n\e[33m   |\e\
    [0mA pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpgybu6iny.scala:25:21\
    \ ----------------\e[0m\e[0m\n\e[33m25 |\e[0m        \e[33mif\e[0m(day > \e[31m31\e\
    [0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                     ^^^^^\e[0m\n\e\
    [33m   |\e[0mA pure expression does nothing in statement position; you may be\
    \ omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue\
    \ Warning: /tmp/tmpgybu6iny.scala:26:35 ----------------\e[0m\e[0m\n\e[33m26 |\e\
    [0m        \e[33mif\e[0m(month == \e[31m1\e[0m && day > \e[31m31\e[0m) \e[31mfalse\e\
    [0m\n\e[33m\e[33m   |\e[0m                                   ^^^^^\e[0m\n\e[33m\
    \   |\e[0mA pure expression does nothing in statement position; you may be omitting\
    \ necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning:\
    \ /tmp/tmpgybu6iny.scala:27:35 ----------------\e[0m\e[0m\n\e[3"
  stdout: ''
  timestamp: 1659800680
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val validMonth = monthArray.contains(month)\n        val validDay = dayArray.contains(day)\n\
    \        val validYear = yearArray.contains(year)\n        val validDate = validMonth\
    \ && validDay && validYear\n        validDate\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_gkuee9x.scala:32)\n\tat Problem.main(tmp_gkuee9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateToValidate = dateFormat.parse(date)\n\
    \        val dateToValidateDays = dateToValidate.getTime\n        val dateToValidateMonths\
    \ = dateToValidate.getMonth\n        val dateToValidateYears = dateToValidate.getYear\n\
    \        val dateToValidateMonthDays = dateToValidate.getDayOfMonth\n        val\
    \ dateToValidateMonthDaysPlusOne = dateToValidateMonthDays + 1\n        val dateToValidateMonthDaysPlusTwo\
    \ = dateToValidateMonthDays + 2\n        val dateToValidateMonthDaysPlusThree\
    \ = dateToValidateMonthDays + 3\n        val dateToValidateMonthDaysPlusFour =\
    \ dateToValidateMonthDays + 4\n        val dateToValidateMonthDaysPlusFive = dateToValidateMonthDays\
    \ + 5\n        val dateToValidateMonthDaysPlusSix = dateToValidateMonthDays +\
    \ 6\n        val dateToValidateMonthDaysPlusSeven = dateToValidateMonthDays +\
    \ 7\n        val dateToValidateMonthDaysPlusEight = dateToValidateMonthDays +\
    \ 8\n        val dateToValidateMonthDaysPlusNine = dateToValidateMonthDays + 9\n\
    \        val dateToValidateMonthDaysPlusTen = dateToValidateMonthDays + 10\n \
    \       val dateToValidateMonthDaysPlusEleven = dateToValidateMonthDays + 11\n\
    \        val dateToValidateMonthDaysPlusTwelve = dateToValidateMonthDays + 12\n\
    \        val dateToValidateMonthDaysPlusOneOrTwo = dateToValidateMonthDays + 1\n\
    \        val dateToValidateMonthDaysPlusThreeOrFour = dateToValidateMonthDays\
    \ + 3\n        val dateToValidateMonthDaysPlusFiveOrSix = dateToValidateMonthDays\
    \ + 5\n        val dateToValidateMonthDaysPlusSevenOrEight = dateToValidateMonthDays\
    \ + 7\n        val dateToValidateMonthDaysPlusNineOrTen = dateToValidateMonthDays\
    \ + 9\n        val dateToValidateMonthDaysPlusElevenOrTwelve = dateToValidateMonthDays\
    \ + 11\n        val dateToValidateMonthDaysPlusOneOrTwoOrThree = dateToValidateMonthDays\
    \ + 1\n        val dateToValidateMonthDaysPlusThreeOrFourOrFiveOrSix = dateToValidateMonthDays\
    \ + 3\n        val dateToValidateMonthDaysPlusFiveOrS\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpliurc_pk.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpliurc_pk.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpliurc_pk.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        val dateInMillis = dateObject.getTime\n        val currentDate = Calendar.getInstance().getTimeInMillis\n\
    \        val dateInMillisDifference = currentDate - dateInMillis\n        val\
    \ days = dateInMillisDifference / (1000 * 60 * 60 * 24)\n        val months =\
    \ dateInMillisDifference / (1000 * 60 * 60 * 24 * 30)\n        val years = dateInMillisDifference\
    \ / (1000 * 60 * 60 * 24 * 365) \n        val monthDays = dateInMillisDifference\
    \ / (1000 * 60 * 60 * 24 * 30 * 12)\n        val monthYears = dateInMillisDifference\
    \ / (1000 * 60 * 60 * 24 * 30 * 12 * 12)\n        val monthYearsDays = dateInMillisDifference\
    \ / (1000 * 60 * 60 * 24 * 30 * 12 * 12 * 12)\n        val monthYearsDaysMonths\
    \ = dateInMillisDifference / (1000 * 60 * 60 * 24 * 30 * 12 * 12 * 12 * 12)\n\
    \        val monthYearsDaysMonthsYears = dateInMillisDifference / (1000 * 60 *\
    \ 60 * 24 * 30 * 12 * 12 * 12 * 12 * 12)\n        val monthYearsDaysMonthsYearsDays\
    \ = dateInMillisDifference / (1000 * 60 * 60 * 24 * 30 * 12 * 12 * 12 * 12 * 12\
    \ * 12)\n        val monthYearsDaysMonthsYearsDaysMonths = dateInMillisDifference\
    \ / (1000 * 60 * 60 * 24 * 30 * 12 * 12 * 12 * 12 * 12 * 12)\n        val monthYearsDaysMonthsYearsDaysMonthsYears\
    \ = dateInMillisDifference / (1000 * 60 * 60 * 24 * 30 * 12 * 12 * 12 * 12 * 12\
    \ * 12 * 12)\n        val monthYearsDaysMonthsYearsDaysMonthsYearsDays = dateInMillisDifference\
    \ / (1000 * 60 * 60 * 24 * 30 * 12 * 12 * 12 * 12 * 12 * 12 * 12 * 12)\n     \
    \   val monthYearsDaysMonthsYearsDaysMonthsYearsDaysMonths = dateInMillisDifference\
    \ / (1000 * 60 * 60 * 24 * 30 * 12 * 12 * 12 * 12 * 12 * 12 * 12 * 12)\n     \
    \   val monthYearsDaysMonthsYearsDaysMonthsYearsDaysMonthsYears = dateInMillisDifference\
    \ / (1000\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1pa8g43n.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1pa8g43n.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1pa8g43n.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mcurrentDate\e[0m = Calendar.getInstance().getTimeInMillis\n\e[31m\e[31m  \
    \ |\e[0m                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \             Not found: Calendar\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1pa8g43n.scala:37:5 ---------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val monthArray = dateArray(0).toString.toInt\n        val dayArray\
    \ = dateArray(1).toString.toInt\n        val year = dateArray(2).toString.toInt\n\
    \        val month = monthArray\n        val day = dayArray\n        val monthLength\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayLength = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthLength = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayLength\
    \ = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthLength = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayLength = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthLength = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayLength = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthLength = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayLength\
    \ = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthLength = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayLength = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthLength = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayLength = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthLength = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayLength\
    \ = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthLength = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayLength = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthLength = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayLength = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthLength = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayLength\
    \ = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthLength = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayLength = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthLength = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayLength = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthLength = Array(1,2,3,4,5,6,7,8,9,\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8so3tuxm.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8so3tuxm.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthLength\e[0m = Array(\e[31m1\e[0m,\e[31m2\e[0m,\e[31m3\e[0m,\e[31m4\e\
    [0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e[0m,\e[31m8\e[0m,\e[31m9\e[0m,\e[31m10\e\
    [0m,\e[31m11\e[0m,\e[31m12\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthLength is already defined as \e[33mvalue\e[0m \e[35mmonthLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8so3tuxm.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mdayLength\e[0m = Array(\e[31m31\e[0m,\e\
    [31m28\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdayLength is already defined as \e[33mvalue\e[0m \e[35mdayLength\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8so3tuxm.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mmonthLength\e[0m = Array(\e[31m1\e[0m,\e\
    [31m2\e[0m,\e[31m3\e[0m,\e[31m4\e[0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e[0m,\e\
    [31m8\e[0m,\e[31m9\e[0m,\e[31m10\e[0m,\e[31m11\e[0m,\e[31m12\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmonthLength is already defined as \e[33mvalue\e[0m \e[35mmonthLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8so3tuxm.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m       "
  stdout: ''
  timestamp: 1659800682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val daysInMonth = scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw2x_ncr2.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpw2x_ncr2.scala:22:1823\
    \ ---------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e\
    [33mval\e[0m \e[36mdaysInMonth\e[0m = scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(scala.math.pow(scala.math.ceil(s"
  stdout: ''
  timestamp: 1659800642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject.isValid && dateObject.getTime < System.currentTimeMillis &&\
    \ dateObject.getTime > -1000\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp75034n7w.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800678
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        if(dateArray.length != 3)\n            return false\n        val\
    \ month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n        val\
    \ year = dateArray(2).toInt\n        if(month < 1 || month > 12)\n           \
    \ return false\n        if(day < 1 || day > 31)\n            return false\n  \
    \      if(month == 2 && day > 29)\n            return false\n        if(month\
    \ == 4 && day > 30)\n            return false\n        if(month == 6 && day >\
    \ 30)\n            return false\n        if(month == 9 && day > 30)\n        \
    \    return false\n        if(month == 11 && day > 30)\n            return false\n\
    \        if(month == 12)\n            return true\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        dateParsed.getTime != 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvay9fbr6.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat2 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat4 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat8 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat18 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat23 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat28 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpm91tmwrb.scala:48:11 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwkmgod7f.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        dateParsed.getTime > 0 && dateParsed.getTime < 86400000\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1yosmt4w.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).asInstanceOf[Date]\n\
    \        val year = dateArray.getYear\n        val month = dateArray.getMonth\n\
    \        val day = dateArray.getDay\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ validMonth = monthArray.contains(month)\n        val validDay = dayArray.contains(day)\n\
    \        val validYear = year >= 1900 && year <= 2100\n        val validDate =\
    \ validMonth && validDay && validYear\n        validDate\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzmzj85q4.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzmzj85q4.scala:19:60 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdateArray\e[0m = dateFormat.parse(date).asInstanceOf[\e\
    [35mDate\e[0m]\n\e[31m\e[31m   |\e[0m                                        \
    \                    ^^^^\e[0m\n\e[31m   |\e[0m                              \
    \                      Not found: type Date\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val validMonth = monthArray.contains(month)\n        val validDay = dayArray.contains(day)\n\
    \        val validYear = yearArray.contains(year)\n        val validDate = validMonth\
    \ and validDay and validYear\n        validDate\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_t_1fxtn.scala:28:35 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvalidDate\e[0m = validMonth\
    \ and validDay and validYear\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value and is not a member of Boolean\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwkmgod7f.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfeeua_4r.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfeeua_4r.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfeeua_4r.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,28,31,30,31,30,31,31,30,31,30,31)\n       \
    \ val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCount = monthArray.count(monthArray.contains(month))\n     \
    \   val dayCount = dayArray.count(dayArray.contains(day))\n        val yearCount\
    \ = yearArray.count(yearArray.contains(year))\n        val monthCountValid = monthCount\
    \ >= 1 && monthCount <= 12\n        val dayCountValid = dayCount >= 1 && dayCount\
    \ <= 31\n        val yearCountValid = yearCount >= 1 && yearCount <= 12\n    \
    \    val dateValid = monthCountValid && dayCountValid && yearCountValid\n    \
    \    dateValid\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2rmaebn1.scala:25:61\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmonthCount\e\
    [0m = monthArray.count(monthArray.contains(month))\n\e[31m\e[31m   |\e[0m    \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                          Found:    Boolean\n\e[31m\
    \   |\e[0m                                          Required: \e[1m\e[32mInt\e\
    [0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2rmaebn1.scala:26:55\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdayCount\e\
    [0m = dayArray.count(dayArray.contains(day))\n\e[31m\e[31m   |\e[0m          \
    \                            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                  Found:    Boolean\n\e[31m   |\e[0m        \
    \                              Required: \e[1m\e[32mInt\e[0m\e[1m\e[32m \e[0m\e\
    [1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2rmaebn1.scala:27:58 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36myearCount\e[0m = yearArray.count(yearArray.contains(year))\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    Boolean\n\
    \e[31m   |\e[0m                                        Required: \e[1m\e[32mInt\e\
    [0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat2 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat4 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat8 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat18 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat23 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat28 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpm91tmwrb.scala:48:11 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm91tmwrb.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659800629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        if(month < 1 || month > 12) false\n\
    \        if(day < 1 || day > 31) false\n        if(month == 2 && day > 29) false\n\
    \        if(month == 2 && day > 28) false\n        if(month == 2 && day > 31)\
    \ false\n        if(month == 2 && day > 30) false\n        if(month == 2 && day\
    \ > 31) false\n        if(month == 2 && day > 30) false\n        if(month == 2\
    \ && day > 31) false\n        if(month == 2 && day > 31) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 31) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 31) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 31) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 31) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 31) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 31) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 31) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 31) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 31) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 31) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 31) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 31) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 31) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 31) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 31) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 31) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 31) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > 31) false\n        if(month\
    \ == 2 && day > 31) false\n        if(month == 2 && day > \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppbssiw2i.scala:69:30 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mif\e[0m(month == \e[31m2\e[0m && day >\
    \ \n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m\
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmppbssiw2i.scala:22:36\
    \ ----------------\e[0m\e[0m\n\e[33m22 |\e[0m        \e[33mif\e[0m(month < \e\
    [31m1\e[0m || month > \e[31m12\e[0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m \
    \                                   ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression\
    \ does nothing in statement position; you may be omitting necessary parentheses\n\
    \e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmppbssiw2i.scala:23:32\
    \ ----------------\e[0m\e[0m\n\e[33m23 |\e[0m        \e[33mif\e[0m(day < \e[31m1\e\
    [0m || day > \e[31m31\e[0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m          \
    \                      ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing\
    \ in statement position; you may be omitting necessary parentheses\n\e[33m   |\e\
    [0m\n\e[33m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmppbssiw2i.scala:24:35 ----------------\e\
    [0m\e[0m\n\e[33m24 |\e[0m        \e[33mif\e[0m(month == \e[31m2\e[0m && day >\
    \ \e[31m29\e[0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                     \
    \              ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement\
    \ position; you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmppbssiw2i.scala:25:35 ----------------\e\
    [0m\e[0m\n\e[33m25 |\e[0m        \e[33mif\e[0m(month == \e[31m2\e[0m && day >\
    \ \e[31m28\e[0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                     \
    \              ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement\
    \ positi"
  stdout: ''
  timestamp: 1659800682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString = dateFormat.parse(date)\n\
    \        val dateDays = dateFormat.parse(date).getTime\n        val dateMonths\
    \ = dateFormat.parse(date).getTime\n        val dateYears = dateFormat.parse(date).getTime\n\
    \        dateString.toString().isEmpty\n            || dateDays < 1 || dateDays\
    \ > 31\n            || dateMonths < 1 || dateMonths > 12\n            || dateYears\
    \ < 1 || dateYears > 365\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyq3abear.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val validMonth = month >= 1 &&\
    \ month <= 12\n        val validDay = day >= 1 && day <= 31\n        val validYear\
    \ = year >= 1 && year <= 2020\n        val validDate = validMonth && validDay\
    \ && validYear\n        validDate\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmp3at6sgtk.scala:19)\n\
    \tat Problem$.main(tmp3at6sgtk.scala:35)\n\tat Problem.main(tmp3at6sgtk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val daysInMonth = List(31,28,31,30,31,30,31,30,31,30,31,30)\n  \
    \      val monthsInYear = List(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = List(4,5,6,7,8,9,10,11,12)\n        val daysInYear = List(365,366,365,366,365,366,365,366,365,366)\n\
    \        val daysInLeapYear = List(365,366,365,366,365,366,365,366,365,366)\n\
    \        val daysInMonthInLeapYear = List(31,29,31,30,31,30,31,30,31,30,31,30)\n\
    \        val daysInMonthInYear = List(31,30,31,30,31,30,31,30,31,30,31,30)\n \
    \       val daysInMonthInYearAndLeapYear = List(31,30,31,30,31,30,31,30,31,30,31,30)\n\
    \        val daysInMonthInYearAndLeapYearAndMonth = List(31,30,31,30,31,30,31,30,31,30,31,30)\n\
    \        val daysInMonthInYearAndLeapYearAndMonthAndDay = List(31,30,31,30,31,30,31,30,31,30,31,30)\n\
    \        val daysInMonthInYearAndLeapYearAndMonthAndDayAndYear = List(31,30,31,30,31,30,31,30,31,30,31,30)\n\
    \        val daysInMonthInYearAndLeapYearAndMonthAndDayAndYearAndMonth = List(31,30,31,30,31,30,31,30,31,30,31,30)\n\
    \        val daysInMonthInYearAndLeapYearAndMonthAndDayAndYearAndMonthAndDay =\
    \ List(31,30,31,30,31,30,31,30,31,30,31,30)\n        val daysInMonthInYearAndLeapYearAndMonthAndDayAndYearAndMonthAndDayAndYear\
    \ = List(31,30,31,30,31,30,31,30,31,30,31,30)\n        val daysInMonthInYearAndLeapYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonth\
    \ = List(31,30,31,30,31,30,31,30,31,30,31,30)\n        val daysInMonthInYearAndLeapYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDay\
    \ = List(31,30,31,30,31,30,31,30,31,30,31,30)\n        val daysInMonthInYearAndLeapYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYear\
    \ = List(31,30,31,30,31,30,31,30,31,30,31,30)\n        val daysInMonthInYearAndLeapYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDay\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp92uebndn.scala:36:119 --------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthInYearAndLeapYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDay\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp92uebndn.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        if(dateArray.length != 3)\n            return false\n        val\
    \ months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n       \
    \ val year = dateArray(2).toInt\n        if(months < 1 || months > 12)\n     \
    \       return false\n        if(days < 1 || days > 31)\n            return false\n\
    \        if(months == 2 && days > 30)\n            return false\n        if(months\
    \ == 3 && days > 29)\n            return false\n        if(months == 4 && days\
    \ > 28)\n            return false\n        if(months == 5 && days > 27)\n    \
    \        return false\n        if(months == 6 && days > 26)\n            return\
    \ false\n        if(months == 7 && days > 25)\n            return false\n    \
    \    if(months == 8 && days > 24)\n            return false\n        if(months\
    \ == 9 && days > 23)\n            return false\n        if(months == 10 && days\
    \ > 22)\n            return false\n        if(months == 11 && days > 21)\n   \
    \         return false\n        if(months == 12 && days > 20)\n            return\
    \ false\n        if(months == 1 && days > 19)\n            return false\n    \
    \    if(months == 3 && days > 18)\n            return false\n        if(months\
    \ == 5 && days > 17)\n            return false\n        if(months == 7 && days\
    \ > 16)\n            return false\n        if(months == 8 && days > 15)\n    \
    \        return false\n        if(months == 10 && days > 14)\n            return\
    \ false\n        if(months == 12 && days > 13)\n            return false\n   \
    \     if(months == 1 && days > 12)\n            return false\n        if(months\
    \ == 4 && days > 11)\n            return false\n        if(months == 6 && days\
    \ > 10)\n            return false\n        if(months == 9 && days > 9)\n     \
    \       return false\n        if(months == 11 && days > 8)\n            return\
    \ false\n        if(months == 12 && days > 7)\n            return false\n    \
    \    if(months == 2 && days > 6)\n            return false\n        if(months\
    \ == 5 && days > 5)\n            return false\n        if(months == 7 && days\
    \ > 4)\n            return false\n        if(months == 8 && days > 3)\n      \
    \      return false\n        if(months == 10 && days > 2)\n            return\
    \ false\n        if(months == 12 && days > 1)\n            return false\n    \
    \    if(months == 1 && days > 0)\n            return false\n        if(months\
    \ == 3 && days > 0)\n            return false\n        if(months == 5 && days\
    \ > 0)\n            return false\n        if(months == 7 && days > 0)\n      \
    \      return false\n        if(months == 8 && days > 0)\n            return false\n\
    \        if(months == 10 && days > 0)\n            return false\n        if(months\
    \ == 12 && days > 0)\n\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn7n_kicc.scala:102:4 ---------------------------\e\
    [0m\e[0m\n\e[31m102 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj = dateFormat.parse(date)\n\
    \        dateObj != null\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzlod7mac.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).asInstanceOf[Date]\n\
    \        val daysInMonth = Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n\
    \        val daysInMonth2 = Array(29, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n  \
    \      val daysInMonth3 = Array(29, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n    \
    \    val daysInMonth4 = Array(30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40)\n  \
    \      val daysInMonth5 = Array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41)\n\
    \        val daysInMonth6 = Array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42)\n        val daysInMonth7 = Array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\
    \ 41, 42, 43)\n        val daysInMonth8 = Array(31, 32, 33, 34, 35, 36, 37, 38,\
    \ 39, 40, 41, 42, 43, 44)\n        val daysInMonth9 = Array(31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39, 40, 41, 42, 43, 44, 45)\n        val daysInMonth10 = Array(31,\
    \ 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46)\n        val daysInMonth11\
    \ = Array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47)\n\
    \        val daysInMonth12 = Array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48)\n        val daysInMonth13 = Array(31, 32, 33, 34,\
    \ 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49)\n        val daysInMonth14\
    \ = Array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50)\n        val daysInMonth15 = Array(31, 32, 33, 34, 35, 36, 37, 38,\
    \ 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51)\n        val daysInMonth16\
    \ = Array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52)\n        val daysInMonth17 = Array(31, 32, 33, 34, 35, 36,\
    \ 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53)\n      \
    \  val daysInMonth18 = Array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\
    \ 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54)\n        val daysInMonth19 = Array(31,\
    \ 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\
    \ 51, 52, 53, 54, 55)\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpes4mjsas.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpes4mjsas.scala:19:60 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdateArray\e[0m = dateFormat.parse(date).asInstanceOf[\e\
    [35mDate\e[0m]\n\e[31m\e[31m   |\e[0m                                        \
    \                    ^^^^\e[0m\n\e[31m   |\e[0m                              \
    \                      Not found: type Date\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpes4mjsas.scala:39:5 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800687
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthValid = monthArray.contains(month)\n        val dayValid = dayArray.contains(day)\n\
    \        val yearValid = yearArray.contains(year)\n        val dateValid = monthValid\
    \ && dayValid && yearValid\n        dateValid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7b7w3b4q.scala:32)\n\tat Problem.main(tmp7b7w3b4q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        dateParsed != null\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpenxp_5zt.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).asInstanceOf[Date]\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n   \
    \     val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,7,8,9,10,11,12)\n        val daysInYear = Arrayn\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptjzfrgdl.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptjzfrgdl.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptjzfrgdl.scala:19:60\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mdateArray\e[0m = dateFormat.parse(date).asInstanceOf[\e[35mDate\e[0m]\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \  ^^^^\e[0m\n\e[31m   |\e[0m                                                \
    \    Not found: type Date\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmptjzfrgdl.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        val dateInMillis = dateObject.getTime\n        val currentTimeInMillis\
    \ = System.currentTimeMillis()\n        val difference = dateInMillis - currentTimeInMillis\n\
    \        val days = difference / (1000 * 60 * 60 * 24)\n        val months = difference\
    \ / (1000 * 60 * 60 * 24 * 30)\n        val years = difference / (1000 * 60 *\
    \ 60 * 24 * 365) \n        if (dateString.isEmpty) {\n            return false\n\
    \        }\n        if (days > 31 || days < 1) {\n            return false\n \
    \       }\n        if (months > 12 || months < 1) {\n            return false\n\
    \        }\n        if (years > 30 || years < 1) {\n            return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvyl768z5.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpvyl768z5.scala:26:12 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m (dateString.isEmpty) {\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ dateString\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2012,2040,2020)\n        if(dateArray.length != 3){\n\
    \            return false\n        }\n        if(monthArray.contains(month) ==\
    \ false){\n            return false\n        }\n        if(dayArray.contains(day)\
    \ == false){\n            return false\n        }\n        if(yearArray.contains(year)\
    \ == false){\n            return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdboin71k.scala:40)\n\tat Problem.main(tmpdboin71k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val month = dateArray(0)\n        val day = dateArray(1)\n     \
    \   val year = dateArray(2)\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2012,2040,2020)\n        val monthIndex = monthArray.indexOf(month)\n\
    \        val dayIndex = dayArray.indexOf(day)\n        val yearIndex = yearArray.indexOf(year)\n\
    \        if(monthIndex < 1 || monthIndex > 12){\n            return false\n  \
    \      }\n        if(dayIndex < 1 || dayIndex > dayArray(monthIndex)){\n     \
    \       return false\n        }\n        if(monthIndex == 2 && dayIndex > 29){\n\
    \            return false\n        }\n        if(monthIndex == 3 && dayIndex >\
    \ 30){\n            return false\n        }\n        if(monthIndex == 4 && dayIndex\
    \ > 30){\n            return false\n        }\n        if(monthIndex == 6 && dayIndex\
    \ > 30){\n            return false\n        }\n        if(monthIndex == 9 && dayIndex\
    \ > 30){\n            return false\n        }\n        if(monthIndex == 11 &&\
    \ dayIndex > 30){\n            return false\n        }\n        if(monthIndex\
    \ == 12 && dayIndex > 30){\n            return false\n        }\n        if(monthIndex\
    \ == 1 && dayIndex > 31){\n            return false\n        }\n        if(monthIndex\
    \ == 3 && dayIndex > 31){\n            return false\n        }\n        if(monthIndex\
    \ == 5 && dayIndex > 31){\n            return false\n        }\n        if(monthIndex\
    \ == 7 && dayIndex > 31){\n            return false\n        }\n        if(monthIndex\
    \ == 8 && dayIndex > 31){\n            return false\n        }\n        if(monthIndex\
    \ == 10 && dayIndex > 31){\n            return false\n        }\n        if(monthIndex\
    \ == 12 && dayIndex > 31){\n            return false\n        }\n        if(monthIndex\
    \ == 1 && dayIndex > 30){\n            return false\n        }\n        if(monthIndex\
    \ == 3 && dayIndex > 30){\n            return false\n        }\n        if(monthIndex\
    \ == 5 && dayIndex > 30){\n            return false\n        }\n        if(monthIndex\
    \ == 7 && dayIndex > 30){\n            return false\n        }\n        if(monthIndex\
    \ == 8 && dayIndex > 30){\n            return false\n        }\n        if(monthIndex\
    \ == 10 && dayIndex > 30){\n            return false\n        }\n        if(monthIndex\
    \ == 12 && dayIndex > 30){\n            return false\n        }\n        if(monthIndex\
    \ == 1 && dayIndex > 29){\n            return false\n        }\n        if(monthIndex\
    \ == 3 && dayIndex > 29\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxj3cd51o.scala:101:4 ---------------------------\e\
    [0m\e[0m\n\e[31m101 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxj3cd51o.scala:25:44 --------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \        \e[33mval\e[0m \e[36mmonthIndex\e[0m = monthArray.indexOf(month)\n\e\
    [31m\e[31m   |\e[0m                                            ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                            Found:    (month : String)\n\
    \e[31m   |\e[0m                                            Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxj3cd51o.scala:26:40 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdayIndex\e[0m = dayArray.indexOf(day)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Found:    (day : String)\n\e\
    [31m   |\e[0m                                        Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxj3cd51o.scala:27:42 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36myearIndex\e[0m = yearArray.indexOf(year)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                          Found:    (year : String)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659800688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val daysInMonth = List(31,28,31,30,31,30,31,30,31,30,31,30)\n  \
    \      val monthsInYear = List(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = List(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = List(31,28,31,30,31,30,31,30,31,30,31,30)\n\
    \        val monthsInYear = List(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = List(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = List(31,28,31,30,31,30,31,30,31,30,31,30)\n\
    \        val monthsInYear = List(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = List(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = List(31,28,31,30,31,30,31,30,31,30,31,30)\n\
    \        val monthsInYear = List(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = List(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = List(31,28,31,30,31,30,31,30,31,30,31,30)\n\
    \        val monthsInYear = List(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = List(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = List(31,28,31,30,31,30,31,30,31,30,31,30)\n\
    \        val monthsInYear = List(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = List(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = List(31,28,31,30,31,30,31,30,31,30,31,30)\n\
    \        val monthsInYear = List(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = List(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = List(31,28,31,30,31,30,31,30,31,30,31,30)\n\
    \        val monthsInYear = List(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = List(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = List(31,28,31,30,31,30,31,30,31,30,31,30)\n\
    \        val monthsInYear = List(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = List(4,5,6,7,8,9,10,11,12)\n        val daysInMonth = List(31,28,31,30,31,30,31,30,31,30,31,\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzfvn71m_.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzfvn71m_.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonth\e[0m = List(\e[31m31\e[0m,\e[31m28\e[0m,\e[31m31\e[0m,\e[31m30\e\
    [0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e\
    [0m,\e[31m31\e[0m,\e[31m30\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzfvn71m_.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYear\e[0m = List(\e[31m1\e[0m,\e\
    [31m2\e[0m,\e[31m3\e[0m,\e[31m4\e[0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e[0m,\e\
    [31m8\e[0m,\e[31m9\e[0m,\e[31m10\e[0m,\e[31m11\e[0m,\e[31m12\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmonthsInYear is already defined as \e[33mvalue\e[0m \e[35mmonthsInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzfvn71m_.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmonthsInLeapYear\e[0m = List(\e[31m4\e\
    [0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e[0m,\e[31m8\e[0m,\e[31m9\e[0m,\e[31m10\e\
    [0m,\e[31m11\e[0m,\e[31m12\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthsInLeapYear is already defined as \e[33mvalue\e[0m \e\
    [35mmonthsInLeapYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzfvn71m_.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m     "
  stdout: ''
  timestamp: 1659800688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString = dateFormat.parse(date)\n\
    \        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString2\
    \ = dateFormat2.parse(date)\n        val dateFormat3 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateString3 = dateFormat3.parse(date)\n        val\
    \ dateFormat4 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString4\
    \ = dateFormat4.parse(date)\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateString5 = dateFormat5.parse(date)\n        val\
    \ dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString6\
    \ = dateFormat6.parse(date)\n        val dateFormat7 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateString7 = dateFormat7.parse(date)\n        val\
    \ dateFormat8 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString8\
    \ = dateFormat8.parse(date)\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateString9 = dateFormat9.parse(date)\n        val\
    \ dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString10\
    \ = dateFormat10.parse(date)\n        val dateFormat11 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateString11 = dateFormat11.parse(date)\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString12\
    \ = dateFormat12.parse(date)\n        val dateFormat13 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateString13 = dateFormat13.parse(date)\n        val\
    \ dateFormat14 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString14\
    \ = dateFormat14.parse(date)\n        val dateFormat15 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateString15 = dateFormat15.parse(date)\n        val\
    \ dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString16\
    \ = dateFormat16.parse(date)\n        val dateFormat17 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateString17 = dateFormat17.parse(date)\n        val\
    \ dateFormat18 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString18\
    \ = dateFormat18.parse(date)\n        val dateFormat\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplrpjrryi.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplrpjrryi.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplrpjrryi.scala:20:30\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat2\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplrpjrryi.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat3\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplrpjrryi.scala:24:30\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat4\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplrpjrryi.sc"
  stdout: ''
  timestamp: 1659800688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        val dateInDays = dateObject.getTime() / 1000\n        val dateInDaysMinusOne\
    \ = dateInDays - 86400\n        val dateInDaysMinusTwo = dateInDays - 172800\n\
    \        val dateInDaysMinusThree = dateInDays - 259200\n        val dateInDaysMinusFour\
    \ = dateInDays - 345600\n        val dateInDaysMinusFive = dateInDays - 432000\n\
    \        val dateInDaysMinusSix = dateInDays - 504000 \n        val dateInDaysMinusSeven\
    \ = dateInDays - 576000 \n        val dateInDaysMinusEight = dateInDays - 648000\
    \ \n        val dateInDaysMinusNine = dateInDays - 704000 \n        val dateInDaysMinusTen\
    \ = dateInDays - 768000 \n        val dateInDaysMinusEleven = dateInDays - 864000\
    \ \n        val dateInDaysMinusTwelve = dateInDays - 912000 \n        val dateInDaysMinusThirteen\
    \ = dateInDays - 960000 \n        val dateInDaysMinusFourteen = dateInDays - 1028000\n\
    \        val dateInDaysMinusFifteen = dateInDays - 1056000\n        val dateInDaysMinusSixteen\
    \ = dateInDays - 1116000\n        val dateInDaysMinusSeventeen = dateInDays -\
    \ 1168000\n        val dateInDaysMinusEighteen = dateInDays - 1232000\n      \
    \  val dateInDaysMinusNineteen = dateInDays - 1296000\n        val dateInDaysMinusTwenty\
    \ = dateInDays - 1344000\n        val dateInDaysMinusTwentyOne = dateInDays -\
    \ 1344000\n        val dateInDaysMinusTwentyTwo = dateInDays - 1344000\n     \
    \   val dateInDaysMinusTwentyThree = dateInDays - 1344000\n        val dateInDaysMinusTwentyFour\
    \ = dateInDays - 1344000\n        val dateInDaysMinusTwentyFive = dateInDay\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpii09dr4l.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpii09dr4l.scala:45:40 ------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mdateInDaysMinusTwentyFive\e\
    [0m = dateInDay\n\e[31m\e[31m   |\e[0m                                       \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                        Not found:\
    \ dateInDay\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpii09dr4l.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject.isValid && dateObject.getTime < System.currentTimeMillis &&\
    \ dateObject.getTime > -1000\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp75034n7w.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj = dateFormat.parse(date)\n\
    \        dateObj.getTime != 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9e0g7ef7.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).asInstanceOf[Date]\n\
    \        val year = dateArray.getYear\n        val month = dateArray.getMonthValue\n\
    \        val day = dateArray.getDayOfMonth\n        val daysInMonth = DateTimeFormat.forPattern(\"\
    MM\").parse(\"12\").asInstanceOf[LocalDate].getDayOfMonth\n        val months\
    \ = DateTimeFormat.forPattern(\"MM\").parse(\"12\").asInstanceOf[LocalDate].getMonthValue\n\
    \        val daysOfMonth = DateTimeFormat.forPattern(\"MM\").parse(\"12\").asInstanceOf[LocalDate].getDayOfMonth\n\
    \        val daysOfYear = DateTimeFormat.forPattern(\"MM\").parse(\"12\").asInstanceOf[LocalDate].getDayOfYear\n\
    \        val daysOfYear = DateTimeFormat.forPattern(\"MM\").parse(\"12\").asInstanceOf[LocalDate].getDayOfYear\n\
    \        val daysOfYear = DateTimeFormat.forPattern(\"MM\").parse(\"12\").asInstanceOf[LocalDate].getDayOfYear\n\
    \        val daysOfYear = DateTimeFormat.forPattern(\"MM\").parse(\"12\").asInstanceOf[LocalDate].getDayOfYear\n\
    \        val daysOfYear = DateTimeFormat.forPattern(\"MM\").parse(\"12\").asInstanceOf[LocalDate].getDayOfYear\n\
    \        val daysOfYear = DateTimeFormat.forPattern(\"MM\").parse(\"12\").asInstanceOf[LocalDate].getDayOfYear\n\
    \        val daysOfYear = DateTimeFormat.forPattern(\"MM\").parse(\"12\").asInstanceOf[LocalDate].getDayOfYear\n\
    \        val daysOfYear = DateTimeFormat.forPattern(\"MM\").parse(\"12\").asInstanceOf[LocalDate].getDayOfYear\n\
    \        val daysOfYear = DateTimeFormat.forPattern(\"MM\").parse(\"12\").asInstanceOf[LocalDate].getDayOfYear\n\
    \        val daysOfYear = DateTimeFormat.forPattern(\"MM\").parse(\"12\").asInstanceOf[LocalDate].getDayOfYear\n\
    \        val daysOfYear = DateTimeFormat.forPattern(\"MM\").parse(\"12\").asInstanceOf[LocalDate].getDayOfYear\n\
    \        val daysOfYear = DateTimeFormat.forPattern(\"MM\").parse(\"12\").asInstanceOf[LocalDate].getDayOfYear\n\
    \        val daysOfYear = DateTimeFormat.forPattern(\"MM\").parse(\"12\").asInstanceOf[LocalDate].getDayOfYear\n\
    \        val daysOf\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpejgfk_pc.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpejgfk_pc.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysOfYear\e[0m = DateTimeFormat.forPattern(\e[31m\"MM\"\e[0m).parse(\e\
    [31m\"12\"\e[0m).asInstanceOf[\e[35mLocalDate\e[0m].getDayOfYear\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysOfYear is already defined as \e[33mvalue\e[0m \e[35mdaysOfYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpejgfk_pc.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mdaysOfYear\e[0m = DateTimeFormat.forPattern(\e\
    [31m\"MM\"\e[0m).parse(\e[31m\"12\"\e[0m).asInstanceOf[\e[35mLocalDate\e[0m].getDayOfYear\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysOfYear is already defined as \e[33mvalue\e[0m \e[35mdaysOfYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpejgfk_pc.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mdaysOfYear\e[0m = DateTimeFormat.forPattern(\e\
    [31m\"MM\"\e[0m).parse(\e[31m\"12\"\e[0m).asInstanceOf[\e[35mLocalDate\e[0m].getDayOfYear\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysOfYear is already defined as \e[33mvalue\e[0m \e[35mdaysOfYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpejgfk_pc.scala:30:12 ------------------------"
  stdout: ''
  timestamp: 1659800688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        val daysInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInYear = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val year = dateArray(0)\n        val month = dateArray(1)\n        val\
    \ day = dateArray(2)\n        val dateFormat = \"MM-dd-yyyy\"\n        val dateFormat2\
    \ = dateFormat.replaceAll(\"-\", \"/\")\n        val dateFormat3 = dateFormat2.replaceAll(\"\
    /\", \"-\")\n        val dateFormat4 = dateFormat3.replaceAll(\"-\", \"/\")\n\
    \        val dateFormat5 = dateFormat4.replaceAll(\"/\", \"-\")\n        val dateFormat6\
    \ = dateFormat5.replaceAll(\"-\", \"/\")\n        val dateFormat7 = dateFormat6.replaceAll(\"\
    /\", \"-\")\n        val dateFormat8 = dateFormat7.replaceAll(\"-\", \"/\")\n\
    \        val dateFormat9 = dateFormat8.replaceAll(\"/\", \"-\")\n        val dateFormat10\
    \ = dateFormat9.replaceAll(\"-\", \"/\")\n        val dateFormat11 = dateFormat10.replaceAll(\"\
    /\", \"-\")\n        val dateFormat12 = dateFormat11.replaceAll(\"-\", \"/\")\n\
    \        val dateFormat13 = dateFormat12.replaceAll(\"/\", \"-\")\n        val\
    \ dateFormat14 = dateFormat13.replaceAll(\"-\", \"/\")\n        val dateFormat15\
    \ = dateFormat14.replaceAll(\"/\", \"-\")\n        val dateFormat16 = dateFormat15.replaceAll(\"\
    -\", \"/\")\n        val dateFormat17 = dateFormat16.replaceAll(\"/\", \"-\")\n\
    \        val dateFormat18 = dateFormat17.replaceAll(\"-\", \"/\")\n        val\
    \ dateFormat19 = dateFormat18.replaceAll(\"/\", \"-\")\n        val dateFormat20\
    \ = dateFormat19.replaceAll(\"-\", \"/\")\n        val dateFormat21 = dateFormat20.replaceAll(\"\
    /\", \"-\")\n        val dateFormat22 = dateFormat21.replaceAll(\"-\", \"/\")\n\
    \        val dateFormat23 = dateFormat22.replaceAll(\"/\", \"-\")\n        val\
    \ dateFormat24 = dateFormat23.replaceAll(\"-\", \"/\")\n        val dateFormat25\
    \ = dateFormat24.replaceAll(\"/\", \"-\")\n        val dateFormat26 = dateFormat25.replaceAll(\"\
    -\", \"/\")\n        val dateFormat27 = dateFormat26.replaceAll(\"/\", \"-\")\n\
    \        val dateFormat28 = dateFormat27.replaceAll(\"-\", \"/\")\n        val\
    \ dateFormat29 = dateFormat28.replaceAll(\"/\", \"-\")\n        val dateFormat30\
    \ = dateFormat29.replace\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps6q4695n.scala:19:37 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmps6q4695n.scala:20:38 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYear\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E051] Reference Error: /tmp/tmps6q4695n.scala:53:40 ------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mdateFormat30\e[0m = dateFormat29.replace\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mAmbiguous overload. The overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mreplace\e[0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m\
    \   |\e[0m (x$0: CharSequence, x$1: CharSequence): String\n\e[31m   |\e[0m (x$0:\
    \ Char, x$1: Char): String\n\e[31m   |\e[0mboth match expected type <?>\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps6q4695n.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659800688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateToCheck = dateFormat.parse(date)\n\
    \        val dateToCheckInt = dateToCheck.getTime\n        val dateToCheckInt\
    \ = dateToCheckInt.toInt\n        val dateToCheckInt = dateToCheckInt.toInt\n\
    \        val dateToCheckInt = dateToCheckInt.toInt\n        val dateToCheckInt\
    \ = dateToCheckInt.toInt\n        val dateToCheckInt = dateToCheckInt.toInt\n\
    \        val dateToCheckInt = dateToCheckInt.toInt\n        val dateToCheckInt\
    \ = dateToCheckInt.toInt\n        val dateToCheckInt = dateToCheckInt.toInt\n\
    \        val dateToCheckInt = dateToCheckInt.toInt\n        val dateToCheckInt\
    \ = dateToCheckInt.toInt\n        val dateToCheckInt = dateToCheckInt.toInt\n\
    \        val dateToCheckInt = dateToCheckInt.toInt\n        val dateToCheckInt\
    \ = dateToCheckInt.toInt\n        val dateToCheckInt = dateToCheckInt.toInt\n\
    \        val dateToCheckInt = dateToCheckInt.toInt\n        val dateToCheckInt\
    \ = dateToCheckInt.toInt\n        val dateToCheckInt = dateToCheckInt.toInt\n\
    \        val dateToCheckInt = dateToCheckInt.toInt\n        val dateToCheckInt\
    \ = dateToCheckInt.toInt\n        val dateToCheckInt = dateToCheckInt.toInt\n\
    \        val dateToCheckInt = dateToCheckInt.toInt\n        val dateToCheckInt\
    \ = dateToCheckInt.toInt\n        val dateToCheckInt = dateToCheckInt.toInt\n\
    \        val dateToCheckInt = dateToCheckInt.toInt\n        val dateToCheckInt\
    \ = dateToCheckInt.toInt\n        val dateToCheckInt = dateToCheckInt.toInt\n\
    \        val dateToCheckInt = dateToCheckInt.toInt\n        val dateToCheckInt\
    \ = dateToCheckInt.toInt\n        val dateToCheckInt = dateToCheckInt.toInt\n\
    \        val dateToCheckInt = dateToCheckInt.toInt\n        val dateToCheckInt\
    \ = dateToCheckInt.toInt\n        val dateToCheckIn\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphrbspaen.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphrbspaen.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateToCheckInt\e[0m = dateToCheckInt.toInt\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdateToCheckInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mdateToCheckInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphrbspaen.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateToCheckInt\e[0m = dateToCheckInt.toInt\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdateToCheckInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mdateToCheckInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphrbspaen.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateToCheckInt\e[0m = dateToCheckInt.toInt\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdateToCheckInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mdateToCheckInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphrbspaen.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateToCheckInt\e[0m = dateToCheckInt.toInt\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdateToCheckInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mdateToCheckInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] N"
  stdout: ''
  timestamp: 1659800688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        val currentDate = new java.util.Date()\n        val currentDay = currentDate.getDay\n\
    \        val currentMonth = currentDate.getMonth\n        val currentYear = currentDate.getYear\n\
    \        val currentYearMonth = currentYear + \"-\" + currentMonth + \"-\" + currentDay\n\
    \        val dateString = dateObject.toString\n        val dateArray = dateString.split(\"\
    -\")\n        val dateDay = dateArray(0)\n        val dateMonth = dateArray(1)\n\
    \        val dateYear = dateArray(2)\n        val dateYearMonth = dateYear + \"\
    -\" + dateMonth + \"-\" + dateDay\n        val dateYearMonthArray = dateYearMonth.split(\"\
    -\")\n        val dateYearMonthDay = dateYearMonthArray(0)\n        val dateYearMonthMonth\
    \ = dateYearMonthArray(1)\n        val dateYearMonthYear = dateYearMonthArray(2)\n\
    \        val dateYearMonthDayArray = dateYearMonthDay.split(\"-\")\n        val\
    \ dateYearMonthDayDay = dateYearMonthDayArray(0)\n        val dateYearMonthDayMonth\
    \ = dateYearMonthDayArray(1)\n        val dateYearMonthDayYear = dateYearMonthDayArray(2)\n\
    \        val dateYearMonthDayDayArray = dateYearMonthDayDay.split(\"-\")\n   \
    \     val dateYearMonthDayDayDay = dateYearMonthDayDayArray(0)\n        val dateYearMonthDayDayMonth\
    \ = dateYearMonthDayDayArray(1)\n        val dateYearMonthDayDayYear = dateYearMonthDayDayArray(2)\n\
    \        val dateYearMonthDayDayDayArray = dateYearMonthDayDayDay.split(\"-\"\
    )\n        val dateYearMonthDayDayDayMonth = dateYearMonthDayDayArray(1)\n   \
    \     val dateYearMonthDayDayYear = dateYearMonthDayDayArray(2)\n        val dateYearMonthDayDayYearArray\
    \ = dateYearMonthDayDayYear.split(\"-\")\n        val dateYearMonthDayDayYearDay\
    \ = dateYearMonthDayDayYearArray(0)\n        val dateYearMonthDayDayYearMonth\
    \ = dateYearMonthDayDayYearArray(1)\n        val dateYearMonthDayDayYearMonth\
    \ = dateYearMonthDayDayYearArray(2)\n        val dateYearMonthDayDayYearMonthArray\
    \ = dateYearMonthDayDayYearMonth.split(\"-\")\n        val dateYearMonthDayDayYearMonthDay\
    \ = dateYearMonthDayDayYearMonthArray(0)\n        val dateYearMonthDayDayYearMonthMonth\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpamb1huw4.scala:52:47 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mdateYearMonthDayDayYearMonthMonth\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                               ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpamb1huw4.scala:45:12 ---------------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m        \e[33mval\e[0m \e[36mdateYearMonthDayDayYear\e[0m = dateYearMonthDayDayArray(\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateYearMonthDayDayYear is already defined as \e[33mvalue\e\
    [0m \e[35mdateYearMonthDayDayYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpamb1huw4.scala:49:12 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mdateYearMonthDayDayYearMonth\e\
    [0m = dateYearMonthDayDayYearArray(\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mdateYearMonthDayDayYearMonth is already defined as \e[33mvalue\e\
    [0m \e[35mdateYearMonthDayDayYearMonth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpamb1huw4.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpamb1huw4.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659800689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateArray = date.split(\"\
    -\")\n        if(dateArray.length != 3)\n            return false\n        val\
    \ months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n       \
    \ val year = dateArray(2).toInt\n        if(months < 1 || months > 12)\n     \
    \       return false\n        if(days < 1 || days > 31)\n            return false\n\
    \        if(days > 29)\n            return false\n        if(months == 2 && days\
    \ > 30)\n            return false\n        if(months == 4 && days > 31)\n    \
    \        return false\n        if(months == 6 && days > 30)\n            return\
    \ false\n        if(months == 9 && days > 31)\n            return false\n    \
    \    if(months == 11 && days > 30)\n            return false\n        if(months\
    \ == 12 && days > 31)\n            return false\n        if(months == 1 && days\
    \ > 28)\n            return false\n        if(months == 3 && days > 31)\n    \
    \        return false\n        if(months == 5 && days > 31)\n            return\
    \ false\n        if(months == 7 && days > 31)\n            return false\n    \
    \    if(months == 8 && days > 31)\n            return false\n        if(months\
    \ == 10 && days > 31)\n            return false\n        if(months == 12 && days\
    \ > 31)\n            return false\n        if(months == 2 && days > 30)\n    \
    \        return false\n        if(months == 4 && days > 31)\n            return\
    \ false\n        if(months == 6 && days > 31)\n            return false\n    \
    \    if(months == 9 && days > 31)\n            return false\n        if(months\
    \ == 11 && days > 31)\n            return false\n        if(months == 12 && days\
    \ > 31)\n            return false\n        if(months == 1 && days > 28)\n    \
    \        return false\n        if(months == 3 && days > 31)\n            return\
    \ false\n        if(months == 5 && days > 31)\n            return false\n    \
    \    if(months == 7 && days > 31)\n            return false\n        if(months\
    \ == 8 && days > 31)\n            return false\n        if(months == 10 && days\
    \ > 31)\n            return false\n        if(months == 12 && days > 31)\n   \
    \         return false\n        if(months == 2 && days > 30)\n            return\
    \ false\n        if(months == 4 && days > 31)\n            return false\n    \
    \    if(months == 6 && days > 31)\n            return false\n        if(months\
    \ == 9 && days > 31)\n            return false\n        if(months == 11 && days\
    \ > 31)\n            return false\n        if(months == 12 && days > 31)\n   \
    \         return false\n        if(months == 1 && days > 28)\n            return\
    \ false\n        if(months == 3 && days > 31)\n            return false\n    \
    \    if(month\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplkhy7p8f.scala:99:4 ----------------------------\e\
    [0m\e[0m\n\e[31m99 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplkhy7p8f.scala:98:11\
    \ ------------------------\e[0m\e[0m\n\e[31m98 |\e[0m        \e[33mif\e[0m(month\n\
    \e[31m\e[31m   |\e[0m           ^^^^^\e[0m\n\e[31m   |\e[0m           Not found:\
    \ month\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        dateParsed.getTime != 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvay9fbr6.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n\
    \    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n\
    \    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n\
    \    def validDate(date : String) : Boolean = {\n        val dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject.isValid\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp08xg95p4.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800635
