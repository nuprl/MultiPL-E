language: scala
name: HumanEval_98_count_upper
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s take _).map(s\
    \ take _).filter(vowels.contains).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpen486u_a.scala:12:64\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(s take _).map(s take _).filter(vowels.contains).size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^\e[0m\n\e[31m   |\e[0m                                             \
    \   Found:    (_$3 : String)\n\e[31m   |\e[0m                                \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpen486u_a.scala:12:74 --------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        evenIndices.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).map(s take\
    \ _).map(s take _).filter(vowels.contains).size\n\e[31m\e[31m   |\e[0m       \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                               Found:    (elem :\
    \ String)\n\e[31m   |\e[0m                                               Required:\
    \ Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793553
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        val upperIndices = mutable.ListBuffer[Int]()\n        for(i <- 0 until\
    \ s.length){\n            if(s(i).isUpper){\n                upperIndices += i\n\
    \            }\n            if(s(i).isUpper){\n                evenIndices +=\
    \ i\n            }\n        }\n        evenIndices.filter(_ % 2 == 0).count(vowels.indexOf(_)\
    \ > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaafa1x1n.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaafa1x1n.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mupperIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.find(_ % 2 == 0).map(_ => vowels.count(s.charAt(_)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkxo2w5lw.scala:12:67\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        evenIndices.find(_ %\
    \ \e[31m2\e[0m == \e[31m0\e[0m).map(_ => vowels.count(s.charAt(_)))\n\e[31m\e\
    [31m   |\e[0m                                                           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Char\n\e[31m   |\e[0m                                                   \
    \    Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793553
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).count(vowels.contains(_))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvnuv6bvw.scala:15)\n\tat Problem.main(tmpvnuv6bvw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793554
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(vowels.indexOf(_)).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcb4csg3w.scala:15)\n\tat Problem.main(tmpcb4csg3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793554
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\"\n        var count = 0\n   \
    \     for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                count += 1\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk90_isyr.scala:18)\n\tat Problem.main(tmpk90_isyr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n            else\n                break\n\
    \        \n        return count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3yoga4lf.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n\
    \        val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices\
    \ = evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8pncxsrr.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8pncxsrr.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8pncxsrr.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8pncxsrr.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8pncxsrr.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |"
  stdout: ''
  timestamp: 1659793553
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.toList.flatMap { i =>\n            if\
    \ (i % 2 == 0) {\n                vowels.contains(s.charAt(i))\n            }\
    \ else {\n                false\n            }\n        }.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplzf4239r.scala:14:31\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m                vowels.contains(s.charAt(i))\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Found:    Boolean\n\e[31m   |\e[0m                Required:\
    \ IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplzf4239r.scala:16:16\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Found:    (\e[31mfalse\e[0m : Boolean)\n\e[31m   |\e[0m             \
    \   Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793554
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.map(i => if (s(i).isUpper) 1 else 0).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6eeoozzb.scala:15)\n\tat Problem.main(tmp6eeoozzb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        val upperCounts = mutable.Map[Int, Long]()\n   \
    \     for (i <- evenIndices) {\n            if (vowels(i).isUpper) {\n       \
    \         val index = vowels.indexOf(i)\n                upperCounts(index) =\
    \ upperCounts(index).orElse(0) + 1\n            }\n        }\n        evenIndices.toList.foldLeft(0)((acc,\
    \ i) => acc + upperCounts(i))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6c6yz3kz.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mupperCounts\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (s(i).isUpper)\n        \
    \        if (vowels.indexOf(s(i)) >= 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.count(_ % 2 == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpae48h61h.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    evenIndices += i\n     \
    \   evenIndices.size\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5eorjvnb.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793551
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s take _).filter(vowels.contains).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgz92ljuz.scala:15)\n\tat Problem.main(tmpgz92ljuz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793555
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(_ / 2).count(vowels.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2uiis8j.scala:15)\n\tat Problem.main(tmpw2uiis8j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793554
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(_ / 2).count(vowels.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3qapt2cz.scala:15)\n\tat Problem.main(tmp3qapt2cz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toCharArray\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(i) % 2 == 0)\n                evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc,\
    \ i) => acc + s.count(_ == vowels(i)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdzlw75c8.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793550
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices_count = evenIndices.count(i => vowels(s(i).toChar))\n\
    \        evenIndices_count * evenIndices.count(i => vowels(s(i).toChar))\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqzxbz3v6.scala:16)\n\tat Problem.main(tmpqzxbz3v6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices\
    \ = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n\
    \                if (s(i) % 2 == 0)\n                    evenIndices += i\n  \
    \      evenIndices.size\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsm1k63fi.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793550
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\"\n        var count = 0\n   \
    \     for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                count += 1\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk90_isyr.scala:18)\n\tat Problem.main(tmpk90_isyr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.foreach(i => if (s(i).isUpper) vowels.count(_\
    \ == s(i)) else 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkiq0jxd8.scala:12:27\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        evenIndices.foreach(\e\
    [36mi\e[0m => \e[33mif\e[0m (s(i).isUpper) vowels.count(_ == s(i)) \e[33melse\e\
    [0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793553
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s.length).count(_\
    \ == s.toUpperCase)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjl_m5556.scala:12:43\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(s.length).count(_ == s.toUpperCase)\n\e\
    [31m\e[31m   |\e[0m                                           ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                           Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31m)\e[0m => Int\n\e[31m   |\e[0m                                 \
    \          Required: \e[1m\e[32mInt\e[0m => Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpjl_m5556.scala:12:59 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).map(s.length).count(_ == s.toUpperCase)\n\e[31m\e[31m   |\e[0m          \
    \                                                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m         Values of types Int and String cannot be compared with ==\
    \ or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659793554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (s(i).isUpper) evenIndices\
    \ += i\n        evenIndices.toList.count(_ % 2 == 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo9jen_l7.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793551
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.toList.map(i => if (s(i).isUpper) 1\
    \ else 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt_12jewk.scala:15)\n\tat Problem.main(tmpt_12jewk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793554
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (s(i) == 'A' || s(i) == 'a') count += 1\n            if (s(i) ==\
    \ 'E' || s(i) == 'e') count += 1\n            if (s(i) == 'I' || s(i) == 'i')\
    \ count += 1\n            if (s(i) == 'O' || s(i) == 'o') count += 1\n       \
    \     if (s(i) == 'U' || s(i) == 'u') count += 1\n            if (s(i) == 'a'\
    \ || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count += 1\n  \
    \      if (count == 0) 0\n        else count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppbkanhc7.scala:22)\n\tat Problem.main(tmppbkanhc7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793562
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (s(i) == 'A' || s(i) == 'a') count += 1\n            if (s(i) ==\
    \ 'B' || s(i) == 'b') count += 1\n            if (s(i) == 'C' || s(i) == 'c')\
    \ count += 1\n            if (s(i) == 'D' || s(i) == 'd') count += 1\n       \
    \     if (s(i) == 'E' || s(i) == 'e') count += 1\n            if (s(i) == 'F'\
    \ || s(i) == 'f') count += 1\n            if (s(i) == 'G' || s(i) == 'g') count\
    \ += 1\n        if (count % 2 == 0)\n            count\n        else\n       \
    \     0\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1tqgrxkx.scala:25)\n\tat Problem.main(tmp1tqgrxkx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s.length).count(_\
    \ == s.charAt(_))\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuf3h6dtv.scala:12:43\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(s.length).count(_ == s.charAt(_))\n\e[31m\e\
    [31m   |\e[0m                                           ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31m)\e[0m => Int\n\e[31m   |\e[0m                                 \
    \          Required: \e[1m\e[32mInt\e[0m => Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpuf3h6dtv.scala:12:59 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).map(s.length).count(_ == s.charAt(_))\n\e[31m\e[31m   |\e[0m            \
    \                                               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n2 errors found\n"
  stdout: ''
  timestamp: 1659793562
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.toList.map(i => if (i % 2 == 0) vowels(i)\
    \ else 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi7ptz6lc.scala:15)\n\tat Problem.main(tmpi7ptz6lc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices\
    \ = s zip (s drop 1 toList) filter { case (v, c) => c % 2 == 0 } map { case (v,\
    \ c) => c }\n        evenIndices.count(vowels.contains)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmnb_ief3.scala:11:48 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = s zip\
    \ (s drop \e[31m1\e[0m toList) filter { \e[33mcase\e[0m (v, c) => c % \e[31m2\e\
    [0m == \e[31m0\e[0m } map { \e[33mcase\e[0m (v, c) => c }\n\e[31m\e[31m   |\e\
    [0m                                                ^\e[0m\n\e[31m   |\e[0m   \
    \                                    expression expected but \e[31m')'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmnb_ief3.scala:11:76\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mevenIndices\e[0m = s zip (s drop \e[31m1\e[0m toList) filter { \e[33mcase\e\
    [0m (v, c) => c % \e[31m2\e[0m == \e[31m0\e[0m } map { \e[33mcase\e[0m (v, c)\
    \ => c }\n\e[31m\e[31m   |\e[0m                                              \
    \                            ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member\
    \ of Nothing, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import math.BigDecimal.javaBigDecimal2bigDecimal\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793562
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s take _).filter(vowels.contains).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphdqcycr3.scala:15)\n\tat Problem.main(tmphdqcycr3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(i => vowels(i).isUpper).count(i\
    \ => s(i).toUpperCase == s(i))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkwulespj.scala:12:67 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(\e[36mi\e[0m => vowels(i).isUpper).count(\e\
    [36mi\e[0m => s(i).toUpperCase == s(i))\n\e[31m\e[31m   |\e[0m               \
    \                                               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659793560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n  \
    \      val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (i % 2 == 0)\n                evenIndices += i\n \
    \       evenIndices.toList.map(i => vowels(s(i).toChar)).count(_ == 'U')\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3revpj4c.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0)((acc, i) => acc + i)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwbkpr_xa.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.map(_.toLong).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9r_a608o.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793561
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices_vowels = evenIndices.filter(i =>\
    \ vowels(i) % 2 == 0)\n        val evenIndices_vowels_count = evenIndices_vowels.map(i\
    \ => vowels(i)).count(_ == 'U')\n        evenIndices_vowels_count.toLong\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzmykako0.scala:17)\n\tat Problem.main(tmpzmykako0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n              \
    \  count += 1\n            if (s(i) == 'a' && s(i+1) == 'a' && s(i+2) == 'a')\n\
    \                count += 1\n            if (s(i) == 'B' && s(i+1) == 'B' && s(i+2)\
    \ == 'B')\n                count += 1\n            if (s(i) == 'b' && s(i+1) ==\
    \ 'b' && s(i+2) == 'b')\n                count += 1\n            if (s(i) == 'C'\
    \ && s(i+1) == 'C' && s(i+2) == 'C')\n                count += 1\n           \
    \ if (s(i) == 'c' && s(i+1) == 'c' && s(i+2) == 'c')\n                count +=\
    \ 1\n            if (s(i) == 'D' && s(i+1) == 'D' && s(i+2) == 'D')\n        \
    \        count += 1\n            if (s(i) == 'd' && s(i+1) == 'd' && s(i+2) ==\
    \ 'd')\n                count += 1\n            if (s(i) == 'E' && s(i+1) == 'E'\
    \ && s(i+2) == 'E')\n                count += 1\n            if (s(i) == 'e' &&\
    \ s(i+1) == 'e' && s(i+2) == 'e')\n                count += 1\n            if\
    \ (s(i) == 'F' && s(i+1) == 'F' && s(i+2) == 'F')\n                count += 1\n\
    \            if (s(i) == 'f' && s(i+1) == 'f' && s(i+2) == 'f')\n            \
    \    count += 1\n            if (s(i) == 'G' && s(i+1) == 'G' && s(i+2) == 'G')\n\
    \                count += 1\n            if (s(i) == 'g' && s(i+1) == 'g' && s(i+2)\
    \ == 'g')\n                count += 1\n            if (s(i) == 'H' && s(i+1) ==\
    \ 'H' && s(i+2) == 'H')\n                count += 1\n            if (s(i) == 'h'\
    \ && s(i+1) == 'h' && s(i+2) == 'h')\n                count += 1\n           \
    \ if (s(i) == 'I' && s(i+1) == 'I' && s(i+2) == 'I')\n                count +=\
    \ 1\n            if (s(i) == 'i' && s(i+1) == 'i' && s(i+2) == 'i')\n        \
    \        count += 1\n            if (s(i) == 'J' && s(i+1) == 'J' && s(i+2) ==\
    \ 'J')\n                count += 1\n            if (s(i) == 'j' && s(i+1) == 'j'\
    \ && s(i+2) == 'j')\n                count += 1\n            if (s(i) == 'K' &&\
    \ s(i+1) == 'K' && s(i+2) == 'K')\n                count += 1\n            if\
    \ (s(i) == 'k' && s(i+1) == 'k' && s(i+2) == 'k')\n                count += 1\n\
    \            if (s(i) == 'L' && s(i+1) == 'L' && s(i+2) == 'L')\n            \
    \    count += 1\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6k0qovbk.scala:11:8\
    \ ---------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until s.length)\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m  \
    \ |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m12\
    \ |\e[0m            \e[33mif\e[0m (s(i) == \e[31m'A'\e[0m && s(i+\e[31m1\e[0m)\
    \ == \e[31m'A'\e[0m && s(i+\e[31m2\e[0m) == \e[31m'A'\e[0m)\n\e[31m13 |\e[0m \
    \               count += \e[31m1\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m\
    \ (s(i) == \e[31m'a'\e[0m && s(i+\e[31m1\e[0m) == \e[31m'a'\e[0m && s(i+\e[31m2\e\
    [0m) == \e[31m'a'\e[0m)\n\e[31m15 |\e[0m                count += \e[31m1\e[0m\n\
    \e[31m16 |\e[0m            \e[33mif\e[0m (s(i) == \e[31m'B'\e[0m && s(i+\e[31m1\e\
    [0m) == \e[31m'B'\e[0m && s(i+\e[31m2\e[0m) == \e[31m'B'\e[0m)\n\e[31m17 |\e[0m\
    \                count += \e[31m1\e[0m\n\e[31m18 |\e[0m            \e[33mif\e\
    [0m (s(i) == \e[31m'b'\e[0m && s(i+\e[31m1\e[0m) == \e[31m'b'\e[0m && s(i+\e[31m2\e\
    [0m) == \e[31m'b'\e[0m)\n\e[31m19 |\e[0m                count += \e[31m1\e[0m\n\
    \e[31m20 |\e[0m            \e[33mif\e[0m (s(i) == \e[31m'C'\e[0m && s(i+\e[31m1\e\
    [0m) == \e[31m'C'\e[0m && s(i+\e[31m2\e[0m) == \e[31m'C'\e[0m)\n\e[31m21 |\e[0m\
    \                count += \e[31m1\e[0m\n\e[31m22 |\e[0m            \e[33mif\e\
    [0m (s(i) == \e[31m'c'\e[0m && s(i+\e[31m1\e[0m) == \e[31m'c'\e[0m && s(i+\e[31m2\e\
    [0m) == \e[31m'c'\e[0m)\n\e[31m23 |\e[0m                count += \e[31m1\e[0m\n\
    \e[31m24 |\e[0m            \e[33mif\e[0m (s(i) == \e[31m'D'\e[0m && s(i+\e[31m1\e\
    [0m) == \e[31m'D'\e[0m && s(i+\e[31m2\e[0m) == \e[31m'D'\e[0m)\n\e[31m25 |\e[0m\
    \                count += \e[31m1\e[0m\n\e[31m26 |\e[0m            \e[33mif\e\
    [0m (s(i) == \e[31m'd'\e[0m && s(i+\e[31m1\e[0m) == \e[31m'd'\e[0m && s(i+\e[31m2\e\
    [0m) == \e[31m'd'\e[0m)\n\e[31m27 |\e[0m                count += \e[31m1\e[0m\n\
    \e[31m28 |\e[0m            \e[33mif\e[0m (s(i) == \e[31m'E'\e[0m && s(i+\e[31m1\e\
    [0m) == \e[31m'E'\e[0m && s(i+\e[31m2\e[0m) == \e[31m'E'\e[0m)\n\e[31m29 |\e[0m\
    \                count += \e[31m1\e[0m\n\e[31m30 |\e[0m            \e[33mif\e\
    [0m (s(i) == \e[31m'e'\e[0m && s(i+\e[31m1\e[0m) == \e[31m'e'\e[0m && s(i+\e[31m2\e\
    [0m) == \e[31m'e'\e[0m)\n\e[31m31 |\e[0m                count +="
  stdout: ''
  timestamp: 1659793564
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        var count =\
    \ 0\n        for (i <- 0 until s.length)\n            if (vowels(i).equals(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    count += 1\n           \
    \     else\n                    count -= 1\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe2fqyqy9.scala:22)\n\tat Problem.main(tmpe2fqyqy9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793565
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'a') count += 1\n            if (s(i) ==\
    \ 'E' || s(i) == 'e') count += 1\n            if (s(i) == 'I' || s(i) == 'i')\
    \ count += 1\n            if (s(i) == 'O' || s(i) == 'o') count += 1\n       \
    \     if (s(i) == 'U' || s(i) == 'u') count += 1\n            if (s(i) == 'a'\
    \ || s(i) == 'A') count += 1\n            if (s(i) == 'e' || s(i) == 'E') count\
    \ += 1\n            if (s(i) == 'i' || s(i) == 'I') count += 1\n            if\
    \ (s(i) == 'o' || s(i) == 'O') count += 1\n            if (s(i) == 'u' || s(i)\
    \ == 'U') count += 1\n            if (s(i) == 'B' || s(i) == 'b') count += 1\n\
    \            if (s(i) == 'C' || s(i) == 'c') count += 1\n            if (s(i)\
    \ == 'D' || s(i) == 'd') count += 1\n            if (s(i) == 'F' || s(i) == 'f')\
    \ count += 1\n            if (s(i) == 'G' || s(i) == 'g') count += 1\n       \
    \     if (s(i) == 'H' || s(i) == 'h') count += 1\n            if (s(i) == 'J'\
    \ || s(i) == 'j') count += 1\n            if (s(i) == 'K' || s(i) == 'k') count\
    \ += 1\n            if (s(i) == 'L' || s(i) == 'l') count += 1\n            if\
    \ (s(i) == 'M' || s(i) == 'm') count += 1\n            if (s(i) == 'N' || s(i)\
    \ == 'n') count += 1\n            if (s(i) == 'P' || s(i) == 'p') count += 1\n\
    \            if (s(i) == 'Q' || s(i) == 'q') count += 1\n            if (s(i)\
    \ == 'R' || s(i) == 'r') count += 1\n            if (s(i) == 'S' || s(i) == 's')\
    \ count += 1\n            if (s(i) == 'T' || s(i) == 't') count += 1\n       \
    \     if (s(i) == 'V' || s(i) == 'v') count += 1\n            if (s(i) == 'W'\
    \ || s(i) == 'w') count += 1\n            if (s(i) == 'X' || s(i) == 'x') count\
    \ += 1\n            if (s(i) == 'Y' || s(i) == 'y') count += 1\n            if\
    \ (s(i) == 'Z' || s(i) == 'z') count += 1\n        return count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoqaw0aoa.scala:46)\n\tat Problem.main(tmpoqaw0aoa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n\
    \        val upperIndices = evenIndices.filter(_ % 2 == 1)\n        val evenIndices\
    \ = evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1dz38o8j.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1dz38o8j.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1dz38o8j.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1dz38o8j.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1dz38o8j.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |"
  stdout: ''
  timestamp: 1659793564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n            else\n                break\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfd15wf1g.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndice\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3i3q1ojp.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3i3q1ojp.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenIndices\e[0m = \e[31m0\e[0m until s.length\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenIndices is\
    \ already defined as \e[33mvalue\e[0m \e[35mevenIndices\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3i3q1ojp.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenIndices\e[0m = \e[31m0\e[0m until s.length\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenIndices is\
    \ already defined as \e[33mvalue\e[0m \e[35mevenIndices\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3i3q1ojp.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenIndices\e[0m = \e[31m0\e[0m until s.length\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenIndices is\
    \ already defined as \e[33mvalue\e[0m \e[35mevenIndices\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3i3q1ojp.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenIndices\e[0m = \e[31m0\e[0m until s.length\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenIndices is\
    \ already defined as \e[33mvalue\e[0m \e[35mevenIndices\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3i3q1ojp.scala:16:12\
    \ --"
  stdout: ''
  timestamp: 1659793564
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        var i = 0\n        while (i < s.length)\
    \ {\n            if (s(i) == 'A' || s(i) == 'a') {\n                count += 1\n\
    \            }\n            i += 1\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeu990nzg.scala:22)\n\tat Problem.main(tmpeu990nzg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(i => vowels(s(i)))\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp08qbz7ue.scala:12:26\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(\e\
    [36mi\e[0m => vowels(s(i)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Int]\n\e[31m   |\e[0m       \
    \ Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        var evenIndex = 0\n        for (i\
    \ <- 0 until s.length)\n            if (s(i) == 'A')\n                count +=\
    \ 1\n            else if (s(i) == 'a') {\n                if (evenIndex % 2 ==\
    \ 0)\n                    count += 1\n                evenIndex += 1\n       \
    \     }\n            else if (s(i) == 'B')\n                count += 1\n     \
    \       else if (s(i) == 'b') {\n                if (evenIndex % 2 == 0)\n   \
    \                 count += 1\n                evenIndex += 1\n            }\n\
    \            else if (s(i) == 'C')\n                count += 1\n            else\
    \ if (s(i) == 'c') {\n                if (evenIndex % 2 == 0)\n              \
    \      count += 1\n                evenIndex += 1\n            }\n           \
    \ else if (s(i) == 'D')\n                count += 1\n            else if (s(i)\
    \ == 'd') {\n                if (evenIndex % 2 == 0)\n                    count\
    \ += 1\n                evenIndex += 1\n            }\n            else if (s(i)\
    \ == 'E')\n                count += 1\n            else if (s(i) == 'e') {\n \
    \               if (evenIndex % 2 == 0)\n                    count += 1\n    \
    \            evenIndex += 1\n            }\n            else if (s(i) == 'F')\n\
    \                count += 1\n            else if (s(i) == 'f') {\n           \
    \     if (evenIndex % 2 == 0)\n                    count += 1\n              \
    \  evenIndex += 1\n            }\n            else if (s(i) == 'G')\n        \
    \        count += 1\n            else if (s(i) == 'g') {\n                if (evenIndex\
    \ % 2 == 0)\n                    count += 1\n                evenIndex += 1\n\
    \            }\n            else if (s(i) == 'H')\n                count += 1\n\
    \            else if (s(i) == 'h') {\n                if (evenIndex % 2 == 0)\n\
    \                    count += 1\n                evenIndex += 1\n            }\n\
    \            else if (s(i) == 'I')\n                count += 1\n            else\
    \ if (s(i) == 'i') {\n                if (evenIndex % 2 == 0)\n              \
    \      count += 1\n                evenIndex += 1\n            }\n           \
    \ else if (s(i) == 'J')\n                count += 1\n            else if (s(i)\
    \ == 'j') {\n                if (evenIndex % 2 == 0)\n                    count\
    \ += 1\n                evenIndex += 1\n            }\n            else if (s(i)\
    \ == 'K')\n                count += 1\n            else if (s(i) == 'k') {\n \
    \               if (evenIndex % 2 == 0)\n                    count += 1\n    \
    \            evenIndex += 1\n            }\n            else if (s(i) == 'L')\n\
    \                count += 1\n            else if (s(i) == 'l') {\n           \
    \     if (evenIndex % 2 == 0)\n                    count += 1\n              \
    \  evenIndex += 1\n            }\n            else if (s(i) == 'M')\n        \
    \        count += 1\n            else if (s(i) == 'm') {\n                if (evenIndex\
    \ % 2 == 0)\n                    count += 1\n                evenIndex += 1\n\
    \            }\n            else if (s(i) == 'N')\n                count += 1\n\
    \            else if (s(i) == 'n') {\n                if (evenIndex % 2 == 0)\n\
    \                    count += 1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_t1j1wet.scala:121:0 ---------------------------\e\
    [0m\e[0m\n\e[31m121 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_t1j1wet.scala:120:1\
    \ --------------------\e[0m\e[0m\n\e[31m120 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: Long\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp_t1j1wet.scala:110:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m110 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1659793565
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'a') count += 1\n            if (s(i) ==\
    \ 'E' || s(i) == 'e') count += 1\n            if (s(i) == 'I' || s(i) == 'i')\
    \ count += 1\n            if (s(i) == 'O' || s(i) == 'o') count += 1\n       \
    \     if (s(i) == 'U' || s(i) == 'u') count += 1\n            if (s(i) == 'a'\
    \ || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count += 1\n  \
    \          if (s(i) == 'B' || s(i) == 'b') count += 1\n            if (s(i) ==\
    \ 'C' || s(i) == 'c') count += 1\n            if (s(i) == 'D' || s(i) == 'd')\
    \ count += 1\n            if (s(i) == 'F' || s(i) == 'f') count += 1\n       \
    \     if (s(i) == 'G' || s(i) == 'g') count += 1\n            if (s(i) == 'H'\
    \ || s(i) == 'h') count += 1\n            if (s(i) == 'J' || s(i) == 'j') count\
    \ += 1\n            if (s(i) == 'K' || s(i) == 'k') count += 1\n            if\
    \ (s(i) == 'L' || s(i) == 'l') count += 1\n            if (s(i) == 'M' || s(i)\
    \ == 'm') count += 1\n            if (s(i) == 'N' || s(i) == 'n') count += 1\n\
    \            if (s(i) == 'P' || s(i) == 'p') count += 1\n            if (s(i)\
    \ == 'Q' || s(i) == 'q') count += 1\n            if (s(i) == 'R' || s(i) == 'r')\
    \ count += 1\n            if (s(i) == 'S' || s(i) == 's') count += 1\n       \
    \     if (s(i) == 'T' || s(i) == 't') count += 1\n            if (s(i) == 'V'\
    \ || s(i) == 'v') count += 1\n            if (s(i) == 'W' || s(i) == 'w') count\
    \ += 1\n            if (s(i) == 'X' || s(i) == 'x') count += 1\n            if\
    \ (s(i) == 'Y' || s(i) == 'y') count += 1\n            if (s(i) == 'Z' || s(i)\
    \ == 'z') count += 1\n        if (count % 2 == 0) count else 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc855f_hu.scala:42)\n\tat Problem.main(tmpc855f_hu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793566
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7mdegvo6.scala:19)\n\tat Problem.main(tmp7mdegvo6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793565
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        var evenIndex = 0\n        for (i\
    \ <- 0 until s.length)\n            if (s(i).isUpper)\n                if (evenIndex\
    \ % 2 == 0)\n                    count += 1\n                evenIndex += 1\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphoeriy5m.scala:20)\n\tat Problem.main(tmphoeriy5m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793566
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        var even = 0\n        for (i <-\
    \ 0 until s.length)\n            if (s(i) == 'A' || s(i) == 'a') even = even +\
    \ 1\n            if (s(i) == 'B' || s(i) == 'b') even = even + 1\n           \
    \ if (s(i) == 'C' || s(i) == 'c') even = even + 1\n            if (s(i) == 'D'\
    \ || s(i) == 'd') even = even + 1\n            if (s(i) == 'E' || s(i) == 'e')\
    \ even = even + 1\n            if (s(i) == 'F' || s(i) == 'f') even = even + 1\n\
    \            if (s(i) == 'G' || s(i) == 'g') even = even + 1\n            if (s(i)\
    \ == 'H' || s(i) == 'h') even = even + 1\n            if (s(i) == 'I' || s(i)\
    \ == 'i') even = even + 1\n            if (s(i) == 'J' || s(i) == 'j') even =\
    \ even + 1\n            if (s(i) == 'K' || s(i) == 'k') even = even + 1\n    \
    \        if (s(i) == 'L' || s(i) == 'l') even = even + 1\n            if (s(i)\
    \ == 'M' || s(i) == 'm') even = even + 1\n            if (s(i) == 'N' || s(i)\
    \ == 'n') even = even + 1\n            if (s(i) == 'O' || s(i) == 'o') even =\
    \ even + 1\n            if (s(i) == 'P' || s(i) == 'p') even = even + 1\n    \
    \        if (s(i) == 'Q' || s(i) == 'q') even = even + 1\n            if (s(i)\
    \ == 'R' || s(i) == 'r') even = even + 1\n            if (s(i) == 'S' || s(i)\
    \ == 's') even = even + 1\n            if (s(i) == 'T' || s(i) == 't') even =\
    \ even + 1\n            if (s(i) == 'U' || s(i) == 'u') even = even + 1\n    \
    \        if (s(i) == 'V' || s(i) == 'v') even = even + 1\n            if (s(i)\
    \ == 'W' || s(i) == 'w') even = even + 1\n            if (s(i) == 'X' || s(i)\
    \ == 'x') even = even + 1\n            if (s(i) == 'Y' || s(i) == 'y') even =\
    \ even + 1\n            if (s(i) == 'Z' || s(i) == 'z') even = even + 1\n    \
    \        if (even % 2 == 0) count = count + 1\n        return count\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1jwghcv_.scala:43)\n\tat Problem.main(tmp1jwghcv_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s.length).count(vowels.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb757bgxb.scala:12:43\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(s.length).count(vowels.contains)\n\e[31m\e\
    [31m   |\e[0m                                           ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31m)\e[0m => Int\n\e[31m   |\e[0m                                 \
    \          Required: \e[1m\e[32mInt\e[0m => Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb757bgxb.scala:12:59 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).map(s.length).count(vowels.contains)\n\e[31m\e[31m   |\e[0m             \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                           Found:    (elem : Int)\n\e[31m   |\e\
    [0m                                                  Required: Char\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n  \
    \      var count = 0\n        for (i <- 0 until s.length)\n            if (vowels(s(i))\
    \ && s(i) % 2 == 0)\n                count += 1\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc288vrzm.scala:13:24\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (vowels(s(i))\
    \ && s(i) % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Char\n\e\
    [31m   |\e[0m                       Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(_ / 2).foldLeft(0)((acc,\
    \ i) => acc + (vowels(i).toString.toUpperCase == vowels(i).toString.toUpperCase))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpsx8um8ya.scala:12:78 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).map(_ / \e[31m2\e[0m).foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mi\e[0m)\
    \ => acc + (vowels(i).toString.toUpperCase == vowels(i).toString.toUpperCase))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m None of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\
    \e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m\
    \   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m \
    \ (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte):\
    \ Int\n\e[31m   |\e[0m  (x: String): String\n\e[31m   |\e[0m match arguments (Boolean)\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793568
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        var count = 0\n   \
    \     for (i <- 0 until s.length)\n            if (vowels(i).equals(s.charAt(i))\
    \ && s.charAt(i) != 'A')\n                count += 1\n        count\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp620g8fec.scala:19)\n\tat Problem.main(tmp620g8fec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793573
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(vowels.indexOf(_)).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcb4csg3w.scala:15)\n\tat Problem.main(tmpcb4csg3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793554
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\"\n        var count = 0\n   \
    \     for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    count += 1\n   \
    \     count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcvhv87o2.scala:19)\n\tat Problem.main(tmpcvhv87o2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793574
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'a' || s(i) == 'E' || s(i) == 'e' || s(i)\
    \ == 'I' || s(i) == 'i' || s(i) == 'O' || s(i) == 'o' || s(i) == 'U' || s(i) ==\
    \ 'u')\n                count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp89s6a2hi.scala:17)\n\tat Problem.main(tmp89s6a2hi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.toList.flatMap(i => if (s(i).isUpper)\
    \ 1 else 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpunpfmiju.scala:12:58\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        evenIndices.toList.flatMap(\e\
    [36mi\e[0m => \e[33mif\e[0m (s(i).isUpper) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e\
    [0m).sum\n\e[31m\e[31m   |\e[0m                                              \
    \            ^\e[0m\n\e[31m   |\e[0m                                         \
    \    Found:    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m                         \
    \                    Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpunpfmiju.scala:12:65 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        evenIndices.toList.flatMap(\e[36mi\e[0m => \e\
    [33mif\e[0m (s(i).isUpper) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m).sum\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \       ^\e[0m\n\e[31m   |\e[0m                                             Found:\
    \    (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m                                   \
    \          Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793573
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        var count = 0\n   \
    \     for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    count += 1\n   \
    \     count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4iz15w27.scala:19)\n\tat Problem.main(tmp4iz15w27.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s contains _).count(_)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp52gxogg0.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(s contains _).count(_)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    (Boolean => Boolean) => Int\n\e[31m   |\e[0m  \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793573
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s take _).count(vowels.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkm676wwq.scala:15)\n\tat Problem.main(tmpkm676wwq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (s(i) == 'A' || s(i) == 'a' || s(i) == 'E' || s(i) == 'e' || s(i)\
    \ == 'I' || s(i) == 'i' || s(i) == 'O' || s(i) == 'o' || s(i) == 'U' || s(i) ==\
    \ 'u')\n                count += 1\n            else\n                break\n\
    \        count * 2\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjrro_at0.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793571
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices_vowels = evenIndices.filter(_ %\
    \ 2 == 0).map(vowels.indexOf(_))\n        evenIndices_vowels.count(_ > -1)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvw3h7d1v.scala:16)\n\tat Problem.main(tmpvw3h7d1v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793575
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        for (i <- 0 until s.length) if (s(i)\
    \ == 'A' || s(i) == 'a') count += 1\n        for (i <- 0 until s.length) if (s(i)\
    \ == 'E' || s(i) == 'e') count += 1\n        for (i <- 0 until s.length) if (s(i)\
    \ == 'I' || s(i) == 'i') count += 1\n        for (i <- 0 until s.length) if (s(i)\
    \ == 'O' || s(i) == 'o') count += 1\n        for (i <- 0 until s.length) if (s(i)\
    \ == 'U' || s(i) == 'u') count += 1\n        for (i <- 0 until s.length) if (s(i)\
    \ == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count +=\
    \ 1\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqqr0uo_9.scala:20)\n\tat Problem.main(tmpqqr0uo_9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n  \
    \      val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels(s(i)))\n                if (s(i) % 2 == 0)\n         \
    \           evenIndices += i\n        evenIndices.toList.filter(x => s(x) % 2\
    \ == 0).length\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqi2d09c6.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqi2d09c6.scala:13:24 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (vowels(s(i)))\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^\e[0m\n\e[31m   |\e[0m                  \
    \     Found:    Char\n\e[31m   |\e[0m                       Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s(i)) >=\
    \ 0)\n                if (s(i) % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.sum\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz5jgja2b.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        var count = 0L\n  \
    \      for (i <- 0 until s.length)\n            if (vowels(i).equals(s.charAt(i)))\
    \ {\n                if (i % 2 == 0)\n                    count += 1L\n      \
    \      }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuh43ifm3.scala:21)\n\tat Problem.main(tmpuh43ifm3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(i => vowels(i).isUpper).count(i\
    \ => s(i).toUpperCase == s(i))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpftm1vdqb.scala:12:67 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(\e[36mi\e[0m => vowels(i).isUpper).count(\e\
    [36mi\e[0m => s(i).toUpperCase == s(i))\n\e[31m\e[31m   |\e[0m               \
    \                                               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659793574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toCharArray\n        val evenIndices\
    \ = mutable.ArrayBuffer.empty[Int]\n        for (i <- 0 until s.length)\n    \
    \        if (vowels(i) % 2 == 0)\n                evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc,\
    \ i) => acc + s.length - i)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf3zeu2p7.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(_ / 2).map(vowels.indexOf(_)).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7n49moqb.scala:15)\n\tat Problem.main(tmp7n49moqb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793577
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (s(i) == 'A' || s(i) == 'a') count += 1\n            if (s(i) ==\
    \ 'E' || s(i) == 'e') count += 1\n            if (s(i) == 'I' || s(i) == 'i')\
    \ count += 1\n            if (s(i) == 'O' || s(i) == 'o') count += 1\n       \
    \     if (s(i) == 'U' || s(i) == 'u') count += 1\n            if (s(i) == 'a'\
    \ || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count += 1\n  \
    \          if (s(i) == 'B' || s(i) == 'b') count += 1\n            if (s(i) ==\
    \ 'C' || s(i) == 'c') count += 1\n            if (s(i) == 'D' || s(i) == 'd')\
    \ count += 1\n            if (s(i) == 'F' || s(i) == 'f') count += 1\n       \
    \     if (s(i) == 'G' || s(i) == 'g') count += 1\n            if (s(i) == 'H'\
    \ || s(i) == 'h') count += 1\n            if (s(i) == 'J' || s(i) == 'j') count\
    \ += 1\n            if (s(i) == 'K' || s(i) == 'k') count += 1\n            if\
    \ (s(i) == 'L' || s(i) == 'l') count += 1\n            if (s(i) == 'M' || s(i)\
    \ == 'm') count += 1\n            if (s(i) == 'N' || s(i) == 'n') count += 1\n\
    \            if (s(i) == 'P' || s(i) == 'p') count += 1\n            if (s(i)\
    \ == 'Q' || s(i) == 'q') count += 1\n            if (s(i) == 'R' || s(i) == 'r')\
    \ count += 1\n            if (s(i) == 'S' || s(i) == 's') count += 1\n       \
    \     if (s(i) == 'T' || s(i) == 't') count += 1\n            if (s(i) == 'V'\
    \ || s(i) == 'v') count += 1\n            if (s(i) == 'W' || s(i) == 'w') count\
    \ += 1\n            if (s(i) == 'X' || s(i) == 'x') count += 1\n            if\
    \ (s(i) == 'Y' || s(i) == 'y') count += 1\n            if (s(i) == 'Z' || s(i)\
    \ == 'z') count += 1\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeiso6vsg.scala:42)\n\tat Problem.main(tmpeiso6vsg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        val vowelsSet = vowels.toSet\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices_Set = evenIndices.toSet\n\
    \        val evenIndices_Set2 = evenIndices.toSet\n        val evenIndices_Set3\
    \ = evenIndices.toSet\n        val evenIndices_Set4 = evenIndices.toSet\n    \
    \    val evenIndices_Set5 = evenIndices.toSet\n        val evenIndices_Set6 =\
    \ evenIndices.toSet\n        val evenIndices_Set7 = evenIndices.toSet\n      \
    \  val evenIndices_Set8 = evenIndices.toSet\n        val evenIndices_Set9 = evenIndices.toSet\n\
    \        val evenIndices_Set10 = evenIndices.toSet\n        val evenIndices_Set11\
    \ = evenIndices.toSet\n        val evenIndices_Set12 = evenIndices.toSet\n   \
    \     val evenIndices_Set13 = evenIndices.toSet\n        val evenIndices_Set14\
    \ = evenIndices.toSet\n        val evenIndices_Set15 = evenIndices.toSet\n   \
    \     val evenIndices_Set16 = evenIndices.toSet\n        val evenIndices_Set17\
    \ = evenIndices.toSet\n        val evenIndices_Set18 = evenIndices.toSet\n   \
    \     val evenIndices_Set19 = evenIndices.toSet\n        val evenIndices_Set20\
    \ = evenIndices.toSet\n        val evenIndices_Set21 = evenIndices.toSet\n   \
    \     val evenIndices_Set22 = evenIndices.toSet\n        val evenIndices_Set23\
    \ = evenIndices.toSet\n        val evenIndices_Set24 = evenIndices.toSet\n   \
    \     val evenIndices_Set25 = evenIndices.toSet\n        val evenIndices_Set26\
    \ = evenIndices.toSet\n        val evenIndices_Set27 = evenIndices.toSet\n   \
    \     val evenIndices_Set28 = evenIndices.toSet\n        val evenIndices_Set29\
    \ = evenIndices.toSet\n        val evenIndices_Set30 = evenIndices.toSet\n   \
    \     val evenIndices_Set31 = evenIndices.toSet\n        val evenIndices_Set32\
    \ = evenIndices.toSet\n        val evenIndices_Set33 = evenIndices.toSet\n   \
    \     val evenIndices_Set34 = evenIndices.toSet\n        val evenIndices_Set35\
    \ = evenIndices.toSet\n        val even\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkgcyjwvk.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpkgcyjwvk.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793576
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(vowels.indexOf(_)).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcb4csg3w.scala:15)\n\tat Problem.main(tmpcb4csg3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793554
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices_vowels = evenIndices.filter(_ %\
    \ 2 == 0).map(vowels.indexOf(_))\n        evenIndices_vowels.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp68dt97aa.scala:16)\n\tat Problem.main(tmp68dt97aa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793578
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map { i => vowels(i)\
    \ }.toSet.size \n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36bhm0oz.scala:15)\n\tat Problem.main(tmp36bhm0oz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        val vowelsSet = vowels.toSet\n\
    \        val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\
    \ if (i % 2 == 0) evenIndices += i\n        evenIndices.toList.map(i => vowelsSet(s.charAt(i)))\n\
    \            .count(vowelsSet.contains)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe1vul13u.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n  \
    \      val evenIndices = mutable.Set[Int]()\n        for(i <- 0 until s.length)\n\
    \            if(vowels(s(i)) && s(i) % 2 == 0)\n                evenIndices +=\
    \ i\n        evenIndices.toList.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnrxpe905.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnrxpe905.scala:13:23 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m(vowels(s(i)) && s(i) % \e[31m2\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e\
    [31m   |\e[0m                      Found:    Char\n\e[31m   |\e[0m           \
    \           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length) evenIndices\
    \ += i\n        evenIndices.filter(_ % 2 == 0).map(evenIndices.indexOf(_)).count(vowels.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2p_zoudk.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(i => vowels(s(i)) != 'u').count(i\
    \ => s(i) == 'u')\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprk5oaulu.scala:12:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(\e[36mi\e[0m => vowels(s(i))\
    \ != \e[31m'u'\e[0m).count(\e[36mi\e[0m => s(i) == \e[31m'u'\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m       Values of types Boolean and Char cannot be compared with == or !=\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n  \
    \      var count = 0\n        for (i <- 0 until s.length)\n            if (vowels(s(i))\
    \ && s(i) % 2 == 0)\n                count += 1\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiinluqer.scala:13:24\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (vowels(s(i))\
    \ && s(i) % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Char\n\e\
    [31m   |\e[0m                       Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n            else\n                break\n\
    \        \n        count * 2\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpin72p2pd.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.sum\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpovknvt98.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793580
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        var count =\
    \ 0L\n        for (i <- 0 until s.length)\n            if (vowels(i).equals(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    count += 1\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdik4s7ul.scala:19)\n\tat Problem.main(tmpdik4s7ul.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793584
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        var count =\
    \ 0\n        for (i <- 0 until s.length)\n            if (vowels(i).isUpper)\n\
    \                count += 1\n            else\n                if (i % 2 == 0)\n\
    \                    count += 1\n                else\n                    count\
    \ += 0\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsdy1pu7s.scala:23)\n\tat Problem.main(tmpsdy1pu7s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        val vowelsSet = vowels.toSet\n\
    \        val evenIndices = 0 until s.length\n        evenIndices.toList.map(i\
    \ => if (i % 2 == 0) vowelsSet(s.charAt(i)) else 0).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz1i5bcyl.scala:13:86 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        evenIndices.toList.map(\e[36mi\e[0m => \e[33mif\e\
    [0m (i % \e[31m2\e[0m == \e[31m0\e[0m) vowelsSet(s.charAt(i)) \e[33melse\e[0m\
    \ \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m                                   \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \              No implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                where:    B is a type variable with constraint >: AnyVal\n\e\
    [31m   |\e[0m                .\n1 error found\n"
  stdout: ''
  timestamp: 1659793583
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = s filter (_ % 2 == 0)\n        val evenIndices_vowels = evenIndices filter\
    \ (vowels.contains)\n        evenIndices_vowels.size match {\n            case\
    \ 0 => 0\n            case 1 => vowels.count(_ == evenIndices_vowels(0))\n   \
    \         case _ => vowels.count(_ == evenIndices_vowels(0)) + vowels.count(_\
    \ == evenIndices_vowels(1))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsxc1225c.scala:20)\n\tat Problem.main(tmpsxc1225c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        var i = 0\n        while (i < s.length())\
    \ {\n            if (s(i) == 'A' || s(i) == 'a') {\n                if (s(i) ==\
    \ 'A') {\n                    count += 1\n                }\n                i\
    \ += 1\n            } else if (s(i) == 'B' || s(i) == 'b') {\n               \
    \ if (s(i) == 'B') {\n                    count += 1\n                }\n    \
    \            i += 1\n            } else if (s(i) == 'C' || s(i) == 'c') {\n  \
    \              if (s(i) == 'C') {\n                    count += 1\n          \
    \      }\n                i += 1\n            } else if (s(i) == 'D' || s(i) ==\
    \ 'd') {\n                if (s(i) == 'D') {\n                    count += 1\n\
    \                }\n                i += 1\n            } else if (s(i) == 'E'\
    \ || s(i) == 'e') {\n                if (s(i) == 'E') {\n                    count\
    \ += 1\n                }\n                i += 1\n            } else if (s(i)\
    \ == 'F' || s(i) == 'f') {\n                if (s(i) == 'F') {\n             \
    \       count += 1\n                }\n                i += 1\n            } else\
    \ if (s(i) == 'G' || s(i) == 'g') {\n                if (s(i) == 'G') {\n    \
    \                count += 1\n                }\n                i += 1\n     \
    \       } else if (s(i) == 'H' || s(i) == 'h') {\n                if (s(i) ==\
    \ 'H') {\n                    count += 1\n                }\n                i\
    \ += 1\n            } else if (s(i) == 'I' || s(i) == 'i') {\n               \
    \ if (s(i) == 'I') {\n                    count += 1\n                }\n    \
    \            i += 1\n            } else if (s(i) == 'J' || s(i) == 'j') {\n  \
    \              if (s(i) == 'J') {\n                    count += 1\n          \
    \      }\n                i += 1\n            } else if (s(i) == 'K' || s(i) ==\
    \ 'k') {\n                if (s(i) == 'K') {\n                    count += 1\n\
    \                }\n                i += 1\n            } else if (s(i) == 'L'\
    \ || s(i) == 'l') {\n                if (s(i) == 'L') {\n                    count\
    \ += 1\n                }\n                i += 1\n            } else if (s(i)\
    \ == 'M' || s(i) == 'm') {\n                if (s(i) == 'M') {\n             \
    \       count += 1\n                }\n                i += 1\n            } else\
    \ if (s(i) == 'N' || s(i) == 'n') {\n                if (s(i) == 'N') {\n    \
    \                count += 1\n                }\n                i += 1\n     \
    \       } else if (s(i) == 'O' || s(i) == 'o') {\n                if (s(i) ==\
    \ 'O') {\n                    count += 1\n                }\n                i\
    \ += 1\n            } else if (s(i) == 'P' || s(i) == 'p') {\n               \
    \ if (s(i) == 'P') {\n                    count += 1\n                }\n    \
    \            i += 1\n            } else if (s(i) == 'Q' || s(i) == 'q') {\n  \
    \              if (s(i) == 'Q') {\n                    count += 1\n          \
    \      }\n                i += 1\n            } else if (s(i) == 'R' || s(i) ==\
    \ 'r') {\n                if (s(i) == 'R') {\n                    count += 1\n\
    \                }\n                i += 1\n            } else if (s(i) == 'S'\
    \ || s(i) == 's') {\n                if (s(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8y_hslwj.scala:104:22 --------------------------\e\
    [0m\e[0m\n\e[31m104 |\e[0m                \e[33mif\e[0m (s(\n\e[31m\e[31m    |\e\
    [0m                      ^\e[0m\n\e[31m    |\e[0m                      expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmp8y_hslwj.scala:117:0 ---------------------------\e[0m\e\
    [0m\n\e[31m117 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}' expected,\
    \ but eof found\n\e[33m\e[33m-- Warning: /tmp/tmp8y_hslwj.scala:106:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m106 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1659793582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s.length).count(s\
    \ => vowels.contains(s.charAt(_)))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps24yanh6.scala:12:43\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(s.length).count(\e[36ms\e[0m => vowels.contains(s.charAt(_)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                           Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31m)\e[0m => Int\n\e[31m   |\e[0m                                 \
    \          Required: \e[1m\e[32mInt\e[0m => Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmps24yanh6.scala:12:89 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).map(s.length).count(\e[36ms\e[0m => vowels.contains(s.charAt(_)))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                         ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2\
    \ of expanded function:\n\e[31m   |\e[0m   _$2 => s.charAt(_$2).\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmps24yanh6.scala:12:82 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).map(s.length).count(\e[36ms\e[0m => vowels.contains(s.charAt(_)))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \       value charAt is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1659793584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.toList.map(i => if (i % 2 == 0) vowels.contains(s(i))\
    \ else 0)\n            .sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpg69i9cgy.scala:13:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            .sum\n\e[31m\e[31m   |\e[0m             \
    \   ^\e[0m\n\e[31m   |\e[0m                No implicit Ordering defined for B\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m                where:    B is a type variable\
    \ with constraint >: AnyVal\n\e[31m   |\e[0m                .\n1 error found\n"
  stdout: ''
  timestamp: 1659793584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.count(_ % 2 == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpibw35_bq.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ > -1)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0)((acc, i) => acc + i)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzzhgjsfz.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793583
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(_ / 2).count(vowels.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3qapt2cz.scala:15)\n\tat Problem.main(tmp3qapt2cz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n            else if (s(i) == 'B')\n   \
    \             count += 1\n            else if (s(i) == 'C')\n                count\
    \ += 1\n            else if (s(i) == 'D')\n                count += 1\n      \
    \      else if (s(i) == 'F')\n                count += 1\n            else if\
    \ (s(i) == 'G')\n                count += 1\n            else if (s(i) == 'H')\n\
    \                count += 1\n            else if (s(i) == 'J')\n             \
    \   count += 1\n            else if (s(i) == 'K')\n                count += 1\n\
    \            else if (s(i) == 'L')\n                count += 1\n            else\
    \ if (s(i) == 'M')\n                count += 1\n            else if (s(i) == 'N')\n\
    \                count += 1\n            else if (s(i) == 'P')\n             \
    \   count += 1\n            else if (s(i) == 'Q')\n                count += 1\n\
    \            else if (s(i) == 'R')\n                count += 1\n            else\
    \ if (s(i) == 'S')\n                count += 1\n            else if (s(i) == 'T')\n\
    \                count += 1\n            else if (s(i) == 'V')\n             \
    \   count += 1\n            else if (s(i) == 'W')\n                count += 1\n\
    \            else if (s(i) == 'X')\n                count += 1\n            else\
    \ if (s(i) == 'Y')\n                count += 1\n            else if (s(i) == 'Z')\n\
    \                count += 1\n            else if (s(i) == 'a')\n             \
    \   count += 1\n            else if (s(i) == 'b')\n                count += 1\n\
    \            else if (s(i) == 'c')\n                count += 1\n            else\
    \ if (s(i) == 'd')\n                count += 1\n            else if (s(i) == 'e')\n\
    \                count += 1\n            else if (s(i) == 'f')\n             \
    \   count += 1\n            else if (s(i) == 'g')\n                count += 1\n\
    \            else if (s(i) == 'h')\n                count += 1\n            else\
    \ if (s(i) == 'j')\n                count += 1\n            else if (s(i) == 'k')\n\
    \                count += 1\n            else if (s(i) == 'l')\n             \
    \   count += 1\n            else if (s(i) == 'm')\n                count += 1\n\
    \            else if (s(i) == 'n')\n                count += 1\n            else\
    \ if (s(i) == 'p')\n                count += 1\n            else if (s(i) == 'q')\n\
    \                count += 1\n            else if (s(i) == 'r')\n             \
    \   count += 1\n            else if (s(i) == 's')\n                count += 1\n\
    \            else if (s(i) == 't')\n                count += 1\n            else\
    \ if (s(i) == 'v')\n                count += 1\n            else if (s(i) == 'w')\n\
    \                count += 1\n            else if (s(i) == 'x')\n             \
    \   count += 1\n            else if (s(i) == 'y')\n                count += 1\n\
    \            else if (s(i) == 'z')\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoe6rwiul.scala:101:4 ---------------------------\e\
    [0m\e[0m\n\e[31m101 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    'then' expected, but unindent found\n1 error found\n"
  stdout: ''
  timestamp: 1659793584
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'a' || s(i) == 'E' || s(i) == 'e' || s(i)\
    \ == 'I' || s(i) == 'i' || s(i) == 'O' || s(i) == 'o' || s(i) == 'U' || s(i) ==\
    \ 'u')\n                count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp89s6a2hi.scala:17)\n\tat Problem.main(tmp89s6a2hi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793574
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'a' || s(i) == 'E' || s(i) == 'e' || s(i)\
    \ == 'I' || s(i) == 'i' || s(i) == 'O' || s(i) == 'o' || s(i) == 'U' || s(i) ==\
    \ 'u')\n                count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp89s6a2hi.scala:17)\n\tat Problem.main(tmp89s6a2hi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793574
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toSet\n        var count = 0L\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n        \
    \        if (s(i) % 2 == 0)\n                    count += 1\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr847l8bh.scala:19)\n\tat Problem.main(tmpr847l8bh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0)((acc, i) => acc + i)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwbkpr_xa.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(_ / 2).filter(_\
    \ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_\
    \ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ %\
    \ 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ /\
    \ 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2\
    \ == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_\
    \ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_\
    \ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ %\
    \ 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ /\
    \ 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2\
    \ == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_\
    \ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_\
    \ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ %\
    \ 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ /\
    \ 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2\
    \ == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_\
    \ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_\
    \ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ %\
    \ 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ /\
    \ 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2\
    \ == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_ % 2 == 0).map(_ / 2).filter(_\
    \ % 2 == 0).map(_ / 2).\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5i94bso7.scala:13:4 ----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659793585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n            else\n                break\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpglll__n0.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(i).equals(s.charAt(i)) && i % 2 == 0)\n                evenIndices\
    \ += i\n        evenIndices.toList.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpggw5i3nz.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\"\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsCount = s.toCharArray.zipWithIndex.filter(_._1 == vowelsSet).map(_._2).length\n\
    \        vowelsCount / s.length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsouae_pu.scala:12:60 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = s.toCharArray.zipWithIndex.filter(_._1\
    \ == vowelsSet).map(_._2).length\n\e[31m\e[31m   |\e[0m                      \
    \                                      ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \     Values of types Char and Set[Char] cannot be compared with == or !=\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n            else\n                break\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfd15wf1g.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.size\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfod1_m7d.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n  \
    \      val evenIndices = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until\
    \ s.length)\n            if (i % 2 == 0)\n                evenIndices += i\n \
    \       evenIndices.toSet.count(vowels.contains)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzq_2pqrt.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.map(evenIndices.indexOf(_)).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc_d9e72g.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0)((acc, i) => acc + i)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwbkpr_xa.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'a' || s(i) == 'E' || s(i) == 'e' || s(i)\
    \ == 'I' || s(i) == 'i' || s(i) == 'O' || s(i) == 'o' || s(i) == 'U' || s(i) ==\
    \ 'u')\n                count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp89s6a2hi.scala:17)\n\tat Problem.main(tmp89s6a2hi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793574
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7mdegvo6.scala:19)\n\tat Problem.main(tmp7mdegvo6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s.length).count(_\
    \ == s.length)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdvp9gp86.scala:12:43\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(s.length).count(_ == s.length)\n\e[31m\e\
    [31m   |\e[0m                                           ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31m)\e[0m => Int\n\e[31m   |\e[0m                                 \
    \          Required: \e[1m\e[32mInt\e[0m => Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (i % 2 == 0)\n                evenIndices += i\n \
    \       evenIndices.toList.filter(i => vowels(i).equals(s.charAt(i))).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyl1xr35a.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n               \
    \ count += 1\n            else if (s(i) == 'a' && s(i+1) == 'b' && s(i+2) == 'c')\n\
    \                count += 1\n            else if (s(i) == 'd' && s(i+1) == 'b'\
    \ && s(i+2) == 'e')\n                count += 1\n            else if (s(i) ==\
    \ 'e' && s(i+1) == 'f' && s(i+2) == 'g')\n                count += 1\n       \
    \     else if (s(i) == 'd' && s(i+1) == 'B' && s(i+2) == 'E')\n              \
    \  count += 1\n            else if (s(i) == 'e' && s(i+1) == 'f' && s(i+2) ==\
    \ 'G')\n                count += 1\n            else if (s(i) == 'd' && s(i+1)\
    \ == 'b' && s(i+2) == 'E')\n                count += 1\n            else if (s(i)\
    \ == 'e' && s(i+1) == 'f' && s(i+2) == 'G')\n                count += 1\n    \
    \        else if (s(i) == 'd' && s(i+1) == 'B' && s(i+2) == 'E')\n           \
    \     count += 1\n            else if (s(i) == 'e' && s(i+1) == 'f' && s(i+2)\
    \ == 'G')\n                count += 1\n            else if (s(i) == 'd' && s(i+1)\
    \ == 'B' && s(i+2) == 'E')\n                count += 1\n            else if (s(i)\
    \ == 'e' && s(i+1) == 'f' && s(i+2) == 'G')\n                count += 1\n    \
    \        else if (s(i) == 'd' && s(i+1) == 'B' && s(i+2) == 'E')\n           \
    \     count += 1\n            else if (s(i) == 'e' && s(i+1) == 'f' && s(i+2)\
    \ == 'G')\n                count += 1\n            else if (s(i) == 'd' && s(i+1)\
    \ == 'B' && s(i+2) == 'E')\n                count += 1\n            else if (s(i)\
    \ == 'e' && s(i+1) == 'f' && s(i+2) == 'G')\n                count += 1\n    \
    \        else if (s(i) == 'd' && s(i+1) == 'B' && s(i+2) == 'E')\n           \
    \     count += 1\n            else if (s(i) == 'e' && s(i+1) == 'f' && s(i+2)\
    \ == 'G')\n                count += 1\n            else if (s(i) == 'd' && s(i+1)\
    \ == 'B' && s(i+2) == 'E')\n                count += 1\n            else if (s(i)\
    \ == 'e' && s(i+1) == 'f' && s(i+2) == 'G')\n                count += 1\n    \
    \        else if (s(i) == 'd' && s(i+1) == 'B' && s(i+2) == 'E')\n           \
    \     count += 1\n            else if (s(i) == 'e' && s(i+1) == 'f' && s(i+2)\
    \ == 'G')\n\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7u9wtf81.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but unindent found\n1 error found\n"
  stdout: ''
  timestamp: 1659793588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices_count = evenIndices.count(i => vowels(s(i)))\n\
    \        evenIndices_count * evenIndices.count(i => vowels(s(i)))\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2a7fl8lu.scala:16)\n\tat Problem.main(tmp2a7fl8lu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'a' || s(i) == 'E' || s(i) == 'e' || s(i)\
    \ == 'I' || s(i) == 'i' || s(i) == 'O' || s(i) == 'o' || s(i) == 'U' || s(i) ==\
    \ 'u')\n                count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp89s6a2hi.scala:17)\n\tat Problem.main(tmp89s6a2hi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n  \
    \      var count = 0\n        for (i <- 0 until s.length)\n            if (vowels(s(i))\
    \ && s(i) % 2 == 0)\n                count += 1\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiinluqer.scala:13:24\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (vowels(s(i))\
    \ && s(i) % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Char\n\e\
    [31m   |\e[0m                       Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s take _).filter(vowels.contains).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj8qnrx11.scala:12:60\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(s take _).filter(vowels.contains).size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^\e[0m\n\e[31m   |\e[0m                                               Found:\
    \    (elem : String)\n\e[31m   |\e[0m                                        \
    \       Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        val upperIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.contains(s.charAt(i)))\n                if (i % 2 == 0)\n\
    \                    evenIndices += i\n                else\n                \
    \    upperIndices += i\n        evenIndices.toSet.size + (upperIndices.toSet -\
    \ evenIndices.toSet)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp93lonjg3.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp93lonjg3.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mupperIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n            else if (s(i) == 'B' || s(i)\
    \ == 'C' || s(i) == 'D' || s(i) == 'F' || s(i) == 'G')\n                count\
    \ += 1\n            else\n                count += 1\n        count\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptlh0hyfn.scala:21)\n\tat Problem.main(tmptlh0hyfn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793594
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        var count =\
    \ 0\n        for (i <- 0 until s.length)\n            if (vowels(i).isUpper)\n\
    \                if (s(i).isUpper)\n                    count += 1\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptdugeam4.scala:19)\n\tat Problem.main(tmptdugeam4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.foreach { i =>\n            if (s.charAt(i).toUpperCase\
    \ == vowels(i)) {\n                evenIndices -= 1\n            }\n        }\n\
    \        evenIndices.toLong\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyg5s06_v.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (s.charAt(i).toUpperCase ==\
    \ vowels(i)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value toUpperCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyg5s06_v.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                evenIndices -= \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ -= is not a member of Range - did you mean evenIndices.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpyg5s06_v.scala:17:20 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        evenIndices.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toLong is not a member of Range, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659793594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0)((acc, i) => acc + i)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwbkpr_xa.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s.length).count(_\
    \ == s.length)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdvp9gp86.scala:12:43\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(s.length).count(_ == s.length)\n\e[31m\e\
    [31m   |\e[0m                                           ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31m)\e[0m => Int\n\e[31m   |\e[0m                                 \
    \          Required: \e[1m\e[32mInt\e[0m => Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n            else\n                break\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpglll__n0.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793584
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.foldLeft(0){ (count, index) =>\n   \
    \         if (index % 2 == 0) count + vowels(index.toInt)\n            else count\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp15pw0wht.scala:18)\n\tat Problem.main(tmp15pw0wht.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.foldLeft(0)((acc, i) => acc + (if (i\
    \ % 2 == 0) vowels(s(i)) else 0))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpfc35an98.scala:12:48 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        evenIndices.foldLeft(\e[31m0\e[0m)((\e[36macc\e\
    [0m, \e[36mi\e[0m) => acc + (\e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e[0m)\
    \ vowels(s(i)) \e[33melse\e[0m \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m         \
    \                                   ^^^^^\e[0m\n\e[31m   |\e[0m None of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mInt\e\
    [0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e[0m  (x: Float):\
    \ Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e\
    [31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e\
    [0m  (x: Byte): Int\n\e[31m   |\e[0m  (x: String): String\n\e[31m   |\e[0m match\
    \ arguments (Boolean | (\e[31m0\e[0m : Int))\n1 error found\n"
  stdout: ''
  timestamp: 1659793593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (s(i) == 'A' || s(i) == 'a') count += 2\n            if (s(i) ==\
    \ 'B' || s(i) == 'b') count += 2\n            if (s(i) == 'C' || s(i) == 'c')\
    \ count += 2\n            if (s(i) == 'D' || s(i) == 'd') count += 2\n       \
    \     if (s(i) == 'E' || s(i) == 'e') count += 2\n            if (s(i) == 'F'\
    \ || s(i) == 'f') count += 2\n            if (s(i) == 'G' || s(i) == 'g') count\
    \ += 2\n            if (s(i) == 'H' || s(i) == 'h') count += 2\n            if\
    \ (s(i) == 'I' || s(i) == 'i') count += 2\n            if (s(i) == 'J' || s(i)\
    \ == 'j') count += 2\n            if (s(i) == 'K' || s(i) == 'k') count += 2\n\
    \            if (s(i) == 'L' || s(i) == 'l') count += 2\n            if (s(i)\
    \ == 'M' || s(i) == 'm') count += 2\n            if (s(i) == 'N' || s(i) == 'n')\
    \ count += 2\n            if (s(i) == 'O' || s(i) == 'o') count += 2\n       \
    \     if (s(i) == 'P' || s(i) == 'p') count += 2\n            if (s(i) == 'Q'\
    \ || s(i) == 'q') count += 2\n            if (s(i) == 'R' || s(i) == 'r') count\
    \ += 2\n            if (s(i) == 'S' || s(i) == 's') count += 2\n            if\
    \ (s(i) == 'T' || s(i) == 't') count += 2\n            if (s(i) == 'U' || s(i)\
    \ == 'u') count += 2\n            if (s(i) == 'V' || s(i) == 'v') count += 2\n\
    \            if (s(i) == 'W' || s(i) == 'w') count += 2\n            if (s(i)\
    \ == 'X' || s(i) == 'x') count += 2\n            if (s(i) == 'Y' || s(i) == 'y')\
    \ count += 2\n            if (s(i) == 'Z' || s(i) == 'z') count += 2\n       \
    \ return count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6btq6ory.scala:41)\n\tat Problem.main(tmp6btq6ory.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793597
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices_vowels = evenIndices.filter(i =>\
    \ vowels(i) % 2 == 0)\n        evenIndices_vowels.count(i => s(i) == 'A')\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmw6d5sic.scala:16)\n\tat Problem.main(tmpmw6d5sic.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793595
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        var index = 0\n        while (index\
    \ < s.length()) {\n            if (s(index).isUpper) {\n                count\
    \ += 1\n            }\n            index += 1\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfnd8nyqr.scala:21)\n\tat Problem.main(tmpfnd8nyqr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793595
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (s(i) == 'A' || s(i) == 'a') count += 1\n            if (s(i) ==\
    \ 'E' || s(i) == 'e') count += 1\n            if (s(i) == 'I' || s(i) == 'i')\
    \ count += 1\n            if (s(i) == 'O' || s(i) == 'o') count += 1\n       \
    \     if (s(i) == 'U' || s(i) == 'u') count += 1\n        if (count % 2 == 0)\n\
    \            count\n        else\n            0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqi7y7q4y.scala:23)\n\tat Problem.main(tmpqi7y7q4y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        val upperCounts = mutable.Map[Int, Long]()\n   \
    \     evenIndices.foreach { i =>\n            val c = s.charAt(i)\n          \
    \  if (vowels.contains(c)) {\n                upperCounts(i) = upperCounts.getOrElse(i,\
    \ 0) + 1\n            }\n        }\n        upperCounts.values.sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1s_zkfpm.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mupperCounts\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n            else if (s(i) == 'B' || s(i)\
    \ == 'C' || s(i) == 'D' || s(i) == 'F' || s(i) == 'G')\n                count\
    \ += 1\n            else\n                count += 0\n        return count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc7umhxyo.scala:21)\n\tat Problem.main(tmpc7umhxyo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n            else\n                break\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfd15wf1g.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793562
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (s(i) == 'A' || s(i) == 'a') count += 1\n            if (s(i) ==\
    \ 'B' || s(i) == 'b') count += 1\n            if (s(i) == 'C' || s(i) == 'c')\
    \ count += 1\n            if (s(i) == 'D' || s(i) == 'd') count += 1\n       \
    \     if (s(i) == 'E' || s(i) == 'e') count += 1\n            if (s(i) == 'F'\
    \ || s(i) == 'f') count += 1\n            if (s(i) == 'G' || s(i) == 'g') count\
    \ += 1\n            if (s(i) == 'H' || s(i) == 'h') count += 1\n            if\
    \ (s(i) == 'I' || s(i) == 'i') count += 1\n            if (s(i) == 'J' || s(i)\
    \ == 'j') count += 1\n            if (s(i) == 'K' || s(i) == 'k') count += 1\n\
    \            if (s(i) == 'L' || s(i) == 'l') count += 1\n            if (s(i)\
    \ == 'M' || s(i) == 'm') count += 1\n            if (s(i) == 'N' || s(i) == 'n')\
    \ count += 1\n            if (s(i) == 'O' || s(i) == 'o') count += 1\n       \
    \     if (s(i) == 'P' || s(i) == 'p') count += 1\n            if (s(i) == 'Q'\
    \ || s(i) == 'q') count += 1\n            if (s(i) == 'R' || s(i) == 'r') count\
    \ += 1\n            if (s(i) == 'S' || s(i) == 's') count += 1\n            if\
    \ (s(i) == 'T' || s(i) == 't') count += 1\n            if (s(i) == 'U' || s(i)\
    \ == 'u') count += 1\n            if (s(i) == 'V' || s(i) == 'v') count += 1\n\
    \            if (s(i) == 'W' || s(i) == 'w') count += 1\n            if (s(i)\
    \ == 'X' || s(i) == 'x') count += 1\n            if (s(i) == 'Y' || s(i) == 'y')\
    \ count += 1\n            if (s(i) == 'Z' || s(i) == 'z') count += 1\n       \
    \ if (count % 2 == 0)\n            count\n        else\n            0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd80a4f87.scala:44)\n\tat Problem.main(tmpd80a4f87.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n  \
    \      val evenIndices = mutable.Set[Int]()\n        val upperIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n        \
    \        if (s(i) % 2 == 0)\n                    evenIndices += i\n          \
    \      else\n                    upperIndices += i\n        evenIndices.toSet.size\
    \ + (upperIndices.toSet.size - evenIndices.toSet.size) * vowels.size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoamuk5wd.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpoamuk5wd.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mupperIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoamuk5wd.scala:14:24 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (vowels(s(i)))\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^\e[0m\n\e[31m   |\e[0m                  \
    \     Found:    Char\n\e[31m   |\e[0m                       Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = mutable.Set[Char]('a', 'e', 'i', 'o', 'u')\n\
    \        val evenIndices = mutable.Set[Int](0, 2, 4, 6)\n        val upperIndices\
    \ = mutable.Set[Int](0, 2, 4, 6)\n        val evenIndices_count = mutable.Set[Int]()\n\
    \        val upperIndices_count = mutable.Set[Int]()\n        val evenIndices_count_set\
    \ = mutable.Set[Int]()\n        val upperIndices_count_set = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s(i)))\n\
    \                if (evenIndices.contains(i))\n                    evenIndices_count\
    \ += evenIndices_count_set\n                else\n                    evenIndices_count\
    \ += evenIndices_count_set + evenIndices(i)\n                upperIndices_count\
    \ += upperIndices_count_set\n                upperIndices_count += upperIndices(i)\n\
    \            else\n                if (evenIndices.contains(i))\n            \
    \        evenIndices_count_set += evenIndices(i)\n                else\n     \
    \               evenIndices_count_set += evenIndices(i) + evenIndices(i)\n   \
    \             upperIndices_count_set += upperIndices(i)\n                upperIndices_count_set\
    \ += upperIndices(i)\n        evenIndices_count.toSet.size + (evenIndices_count_set\
    \ - evenIndices_count).toSet.size + (upperIndices_count - upperIndices_count_set).toSet.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphreta2br.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = mutable.Set[\e\
    [35mChar\e[0m](\e[31m'a'\e[0m, \e[31m'e'\e[0m, \e[31m'i'\e[0m, \e[31m'o'\e[0m,\
    \ \e[31m'u'\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphreta2br.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m](\e[31m0\e[0m, \e[31m2\e[0m, \e[31m4\e[0m, \e[31m6\e[0m)\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphreta2br.scala:12:27 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mupperIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m](\e[31m0\e[0m, \e[31m2\e[0m, \e[31m4\e[0m, \e[31m6\e[0m)\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphreta2br.scala:13:32 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenIndices_count\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphreta2br.scala:14:33 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mupperIndices_count\e[0m\
    \ = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659793594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n\
    \        val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices\
    \ = evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdh9gn79b.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdh9gn79b.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdh9gn79b.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdh9gn79b.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdh9gn79b.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |"
  stdout: ''
  timestamp: 1659793597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    evenIndices += i\n     \
    \   evenIndices.toList.count(_ % 2 == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1l1t_9a_.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s => vowels.count(_\
    \ == s.charAt(_)))\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp875_2twx.scala:12:61 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).map(\e[36ms\e[0m => vowels.count(_ == s.charAt(_)))\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1659793596
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices_vowels = evenIndices.filter(_ %\
    \ 2 == 0).map(vowels.indexOf(_))\n        evenIndices_vowels.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp74qgh__t.scala:16)\n\tat Problem.main(tmp74qgh__t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = s grouped 2 map (_._1)\n        val evenIndices_vowels = evenIndices filter\
    \ vowels.contains (_)\n        evenIndices_vowels size filter vowels.contains\
    \ (_) map (_ + 1) sum\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpc1875_0e.scala:13:45 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        evenIndices_vowels size filter vowels.contains\
    \ (_) map (_ + \e[31m1\e[0m) sum\n\e[31m\e[31m   |\e[0m                      \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \         expression expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpc1875_0e.scala:11:45 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = s grouped\
    \ \e[31m2\e[0m map (_._1)\n\e[31m\e[31m   |\e[0m                             \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \  value _1 is not a member of String\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpc1875_0e.scala:12:69\
    \ -----------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e\
    [0m \e[36mevenIndices_vowels\e[0m = evenIndices filter vowels.contains (_)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \           ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m   I could not infer the type of the parameter _$2 of expanded\
    \ function:\n\e[31m   |\e[0m   _$2 => evenIndices filter vowels.contains(_$2).\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc1875_0e.scala:13:32 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        evenIndices_vowels size filter vowels.contains\
    \ (_) map (_ + \e[31m1\e[0m) sum\n\e[31m\e[31m   |\e[0m                      \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m                                Not found:\
    \ filter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.foreach(i => if (s(i).isUpper) vowels.count(_\
    \ == s(i)))\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1s977q_q.scala:12:27\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        evenIndices.foreach(\e\
    [36mi\e[0m => \e[33mif\e[0m (s(i).isUpper) vowels.count(_ == s(i)))\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s => vowels.indexOf(s.charAt(0))\
    \ + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsuruu0pt.scala:12:65 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).map(\e[36ms\e[0m => vowels.indexOf(s.charAt(\e[31m0\e[0m)) + \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                     value\
    \ charAt is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659793600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(s(i)))\n                if (s(i) % 2 == 0)\n                  \
    \  evenIndices += i\n        evenIndices.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmhok_4f.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7mdegvo6.scala:19)\n\tat Problem.main(tmp7mdegvo6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793565
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        var index = 0\n        while (index\
    \ < s.length()) {\n            if (s(index).isUpper) {\n                if (index\
    \ % 2 == 0) {\n                    count += 1\n                }\n           \
    \ }\n            index += 1\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_x_kbk59.scala:23)\n\tat Problem.main(tmp_x_kbk59.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'a') count += 1\n            if (s(i) ==\
    \ 'B' || s(i) == 'b') count += 1\n            if (s(i) == 'C' || s(i) == 'c')\
    \ count += 1\n            if (s(i) == 'D' || s(i) == 'd') count += 1\n       \
    \     if (s(i) == 'E' || s(i) == 'e') count += 1\n            if (s(i) == 'F'\
    \ || s(i) == 'f') count += 1\n            if (s(i) == 'G' || s(i) == 'g') count\
    \ += 1\n            if (s(i) == 'H' || s(i) == 'h') count += 1\n            if\
    \ (s(i) == 'I' || s(i) == 'i') count += 1\n            if (s(i) == 'J' || s(i)\
    \ == 'j') count += 1\n            if (s(i) == 'K' || s(i) == 'k') count += 1\n\
    \            if (s(i) == 'L' || s(i) == 'l') count += 1\n            if (s(i)\
    \ == 'M' || s(i) == 'm') count += 1\n            if (s(i) == 'N' || s(i) == 'n')\
    \ count += 1\n            if (s(i) == 'O' || s(i) == 'o') count += 1\n       \
    \     if (s(i) == 'P' || s(i) == 'p') count += 1\n            if (s(i) == 'Q'\
    \ || s(i) == 'q') count += 1\n            if (s(i) == 'R' || s(i) == 'r') count\
    \ += 1\n            if (s(i) == 'S' || s(i) == 's') count += 1\n            if\
    \ (s(i) == 'T' || s(i) == 't') count += 1\n            if (s(i) == 'U' || s(i)\
    \ == 'u') count += 1\n            if (s(i) == 'V' || s(i) == 'v') count += 1\n\
    \            if (s(i) == 'W' || s(i) == 'w') count += 1\n            if (s(i)\
    \ == 'X' || s(i) == 'x') count += 1\n            if (s(i) == 'Y' || s(i) == 'y')\
    \ count += 1\n            if (s(i) == 'Z' || s(i) == 'z') count += 1\n       \
    \ return count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38yopm2v.scala:41)\n\tat Problem.main(tmp38yopm2v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n\
    \        val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices\
    \ = evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdh9gn79b.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdh9gn79b.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdh9gn79b.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdh9gn79b.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdh9gn79b.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |"
  stdout: ''
  timestamp: 1659793597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s => vowels.indexOf(s.charAt(0))\
    \ + 1).sum\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp35rpgs1f.scala:12:65 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).map(\e[36ms\e[0m => vowels.indexOf(s.charAt(\e[31m0\e[0m)) + \e[31m1\e[0m).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                     value\
    \ charAt is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659793603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(_ / 2).foreach(i\
    \ => vowels.count(s.charAt(i).toUpperCase == 1))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp81emejyx.scala:12:88 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).map(_ / \e[31m2\e[0m).foreach(\e[36mi\e[0m => vowels.count(s.charAt(i).toUpperCase\
    \ == \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                   \
    \                                         ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659793603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices_count = evenIndices.count(_ % 2\
    \ == 0)\n        val evenIndices_count_upper = evenIndices_count.filter(vowels.contains)\n\
    \        evenIndices_count_upper.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_94yyvhq.scala:13:56 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenIndices_count_upper\e\
    [0m = evenIndices_count.filter(vowels.contains)\n\e[31m\e[31m   |\e[0m       \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     value filter is not a member of Int\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toSet\n        var count = 0L\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n        \
    \        if (s(i) % 2 == 0)\n                    count += 1\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr847l8bh.scala:19)\n\tat Problem.main(tmpr847l8bh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = s grouped 2 map (_._2) filter (_ % 2 == 0)\n        val evenIndices_count\
    \ = evenIndices.count(_ == vowels)\n        evenIndices_count * vowels.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptvemqabh.scala:11:45 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = s grouped\
    \ \e[31m2\e[0m map (_._2) filter (_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                           ^^^^\e[0m\n\e[31m   |\e\
    [0m                                      value _2 is not a member of String\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmptvemqabh.scala:11:59 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = s grouped\
    \ \e[31m2\e[0m map (_._2) filter (_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                         ^^^\e[0m\n\
    \e[31m   |\e[0mvalue % is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\
    \e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\e[31m   |\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659793604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (s(i) == 'A' || s(i) == 'a') count += 1\n            if (s(i) ==\
    \ 'E' || s(i) == 'e') count += 1\n            if (s(i) == 'I' || s(i) == 'i')\
    \ count += 1\n            if (s(i) == 'O' || s(i) == 'o') count += 1\n       \
    \     if (s(i) == 'U' || s(i) == 'u') count += 1\n        if (count % 2 == 0)\
    \ 1 else 0\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_1jf1r1f.scala:21)\n\tat Problem.main(tmp_1jf1r1f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        var count = 0\n   \
    \     for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    count += 1\n   \
    \     count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4iz15w27.scala:19)\n\tat Problem.main(tmp4iz15w27.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        val upperIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.contains(s.charAt(i)))\n                if (i % 2 == 0)\n\
    \                    evenIndices += i\n                else\n                \
    \    upperIndices += i\n        evenIndices.toList.map(evenIndices.contains(_)).count(_\
    \ == true)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgwvvcmrl.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpgwvvcmrl.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mupperIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n  \
    \      val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (i % 2 == 0)\n                evenIndices += i\n        evenIndices.toList.count(vowels.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl7u8fd4z.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        var even = 0\n        var odd = 0\n\
    \        for (i <- 0 until s.length)\n            if (s(i).isUpper)\n        \
    \        count += 1\n            if (s(i).isUpper)\n                even += 1\n\
    \            if (s(i).isUpper)\n                odd += 1\n        if (even % 2\
    \ == 0)\n            count\n        else\n            0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw7tsij1u.scala:26)\n\tat Problem.main(tmpw7tsij1u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n            else\n                if (s(i)\
    \ == 'B')\n                    count -= 1\n                else\n            \
    \        count += 0\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp88d769ul.scala:22)\n\tat Problem.main(tmp88d769ul.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        var even = 0\n        var upper\
    \ = 0\n        for(i <- 0 until s.length){\n            if(s.charAt(i) == 'A'\
    \ || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i)\
    \ == 'U'){\n                count += 1\n            }\n            if(s.charAt(i)\
    \ == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' ||\
    \ s.charAt(i) == 'u'){\n                even += 1\n            }\n           \
    \ if(s.charAt(i) == 'B' || s.charAt(i) == 'D' || s.charAt(i) == 'F' || s.charAt(i)\
    \ == 'G'){\n                upper += 1\n            }\n        }\n        if(even\
    \ % 2 == 0){\n            count += upper\n        }\n        return count\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmjxwr2dh.scala:32)\n\tat Problem.main(tmpmjxwr2dh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s.length(_) -\
    \ 1).foldLeft(0)((acc, i) => acc + (vowels(i).toString.toUpperCase == vowels(i).toString.toUpperCase))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpra5g1svy.scala:12:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).map(s.length(_) - \e[31m1\e[0m).foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e\
    [36mi\e[0m) => acc + (vowels(i).toString.toUpperCase == vowels(i).toString.toUpperCase))\n\
    \e[31m\e[31m   |\e[0m                                                    ^\e[0m\n\
    \e[31m   |\e[0m           too many arguments for \e[33mmethod\e[0m \e[35mlength\e\
    [0m in \e[33mclass\e[0m \e[35mString\e[0m: (): Int\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmpra5g1svy.scala:12:88 -----------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        evenIndices.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).map(s.length(_)\
    \ - \e[31m1\e[0m).foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mi\e[0m) => acc\
    \ + (vowels(i).toString.toUpperCase == vowels(i).toString.toUpperCase))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                    ^^^^^\e[0m\n\e[31m   |\e[0m None of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\
    \e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m\
    \   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m \
    \ (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte):\
    \ Int\n\e[31m   |\e[0m  (x: String): String\n\e[31m   |\e[0m match arguments (Boolean)\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    evenIndices += i\n     \
    \   evenIndices.toList.filter(x => x % 2 == 0).length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg1n8rnag.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = s filter (_ % 2 == 0) map (_.toInt)\n        evenIndices map { i => vowels.count(vowels.indexOf(_,\
    \ i)) }\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe69nnel2.scala:12:58\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        evenIndices map { \e\
    [36mi\e[0m => vowels.count(vowels.indexOf(_, i)) }\n\e[31m\e[31m   |\e[0m    \
    \                                        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    Int\n\e[31m   |\e[0m\
    \                                            Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n            else\n                break\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfd15wf1g.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793562
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.map(i => if (s(i).isUpper) 1 else 0).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6eeoozzb.scala:15)\n\tat Problem.main(tmp6eeoozzb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793554
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7mdegvo6.scala:19)\n\tat Problem.main(tmp7mdegvo6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        val upperIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.contains(s.charAt(i)))\n                if (i % 2 == 0)\n\
    \                    evenIndices += i\n                else\n                \
    \    upperIndices += i\n        evenIndices.toSet.size + (upperIndices.toSet -\
    \ evenIndices).toSet.size\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_olf_cpo.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_olf_cpo.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mupperIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793605
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'a' || s(i) == 'E' || s(i) == 'e' || s(i)\
    \ == 'I' || s(i) == 'i' || s(i) == 'O' || s(i) == 'o' || s(i) == 'U' || s(i) ==\
    \ 'u')\n                count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp89s6a2hi.scala:17)\n\tat Problem.main(tmp89s6a2hi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toCharArray\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.toList.flatMap { i =>\n            if\
    \ (i % 2 == 0) {\n                vowels.find(_ == s.charAt(i))\n            }\
    \ else {\n                None\n            }\n        }.count(_ == true)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz74e1pgl.scala:18:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        }.count(_ == \e[31mtrue\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       Values of types\
    \ Char and Boolean cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659793608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    evenIndices += i\n     \
    \   evenIndices.toList.sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_opqh229.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.map(_.toLong).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9r_a608o.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until s.length)\n            if(s(i).isUpper)\n          \
    \      if(vowels.indexOf(s(i)) >= 0)\n                    evenIndices += i\n \
    \       evenIndices.toList.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp__lt_1s2.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        val upperCaseIndices = evenIndices.filter(_ % 2\
    \ == 0)\n        val upperCaseIndices_withVowels = upperCaseIndices.filter(_ =>\
    \ vowels.contains(s(_)))\n        upperCaseIndices_withVowels.length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3obv604.scala:17)\n\tat Problem.main(tmpw3obv604.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (s(i) == 'A' || s(i) == 'a' || s(i) == 'E' || s(i) == 'e' || s(i)\
    \ == 'I' || s(i) == 'i' || s(i) == 'O' || s(i) == 'o' || s(i) == 'U' || s(i) ==\
    \ 'u')\n                count += 1\n            else\n                break\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwbu0ce0k.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        var index = 0\n        while (index\
    \ < s.length)\n            if (s(index) match {\n                case 'A' | 'a'\
    \ => count += 1\n                case 'B' | 'b' => count += 1\n              \
    \  case 'C' | 'c' => count += 1\n                case 'D' | 'd' => count += 1\n\
    \                case 'E' | 'e' => count += 1\n                case 'F' | 'f'\
    \ => count += 1\n                case 'G' | 'g' => count += 1\n              \
    \  case 'H' | 'h' => count += 1\n                case 'I' | 'i' => count += 1\n\
    \                case 'J' | 'j' => count += 1\n                case 'K' | 'k'\
    \ => count += 1\n                case 'L' | 'l' => count += 1\n              \
    \  case 'M' | 'm' => count += 1\n                case 'N' | 'n' => count += 1\n\
    \                case 'O' | 'o' => count += 1\n                case 'P' | 'p'\
    \ => count += 1\n                case 'Q' | 'q' => count += 1\n              \
    \  case 'R' | 'r' => count += 1\n                case 'S' | 's' => count += 1\n\
    \                case 'T' | 't' => count += 1\n                case 'U' | 'u'\
    \ => count += 1\n                case 'V' | 'v' => count += 1\n              \
    \  case 'W' | 'w' => count += 1\n                case 'X' | 'x' => count += 1\n\
    \                case 'Y' | 'y' => count += 1\n                case 'Z' | 'z'\
    \ => count += 1\n                case _ => count += 1\n            }) index +=\
    \ 1\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvlqs7bhb.scala:14:34\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m                \e[33mcase\e\
    [0m \e[31m'A'\e[0m | \e[31m'a'\e[0m => count += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                          Found:    Unit\n\e[31m   |\e[0m                   \
    \               Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvlqs7bhb.scala:15:34 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m                \e[33mcase\e[0m \e[31m'B'\e[0m | \e[31m'b'\e[0m => count\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    Unit\n\e[31m \
    \  |\e[0m                                  Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvlqs7bhb.scala:16:34 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m \e[31m'C'\e[0m | \e[31m'c'\e\
    [0m => count += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                          \
    \        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    Unit\n\e[31m   |\e[0m                                  Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvlqs7bhb.scala:17:34\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e\
    [0m \e[31m'D'\e[0m | \e[31m'd'\e[0m => count += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                          Found:    Unit\n\e[31m   |\e[0m                   \
    \               Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvlqs7bhb.scala:18:34 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m                \e[33mcase\e[0m \e[31m'"
  stdout: ''
  timestamp: 1659793613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map { i =>\n    \
    \        vowels.find(vowels.contains(s(i)))\n        }.count(_ != None)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_9d5us_.scala:13:39\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            vowels.find(vowels.contains(s(i)))\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    Boolean\n\e[31m   |\e[0m         \
    \               Required: \e[1m\e[32mChar\e[0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e\
    [0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n\
    \        val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices\
    \ = evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy7tb92un.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy7tb92un.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy7tb92un.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy7tb92un.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy7tb92un.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |"
  stdout: ''
  timestamp: 1659793613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = List(0,2)\n        val evenIndices_map = evenIndices.map(i => vowels(i) ->\
    \ i)\n        val evenIndices_map_reversed = evenIndices_map.reverse\n       \
    \ val evenIndices_map_reversed_map = evenIndices_map_reversed.toMap\n        val\
    \ evenIndices_map_reversed_map_reversed = evenIndices_map_reversed_map.reverse\n\
    \        val evenIndices_map_reversed_map_reversed_map = evenIndices_map_reversed_map_reversed.toMap\n\
    \        val evenIndices_map_reversed_map_reversed_map_reversed = evenIndices_map_reversed_map_reversed_map.reverse\n\
    \        val evenIndices_map_reversed_map_reversed_map_reversed_map = evenIndices_map_reversed_map_reversed_map_reversed.toMap\n\
    \        val evenIndices_map_reversed_map_reversed_map_reversed_map_reversed =\
    \ evenIndices_map_reversed_map_reversed_map_reversed_map.reverse\n        val\
    \ evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map = evenIndices_map_reversed_map_reversed_map_reversed_map_reversed.toMap\n\
    \        val evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed\
    \ = evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map.reverse\n\
    \        val evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map\
    \ = evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed.toMap\n\
    \        val evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed\
    \ = evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map.reverse\n\
    \        val evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map\
    \ = evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed.toMap\n\
    \        val evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed\
    \ = evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map.reverse\n\
    \        val evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed\
    \ = evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqc1b4wql.scala:15:81 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenIndices_map_reversed_map_reversed\e\
    [0m = evenIndices_map_reversed_map.reverse\n\e[31m\e[31m   |\e[0m            \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Char, Int] - did you\
    \ mean evenIndices_map_reversed_map.reversed?\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpqc1b4wql.scala:26:130 -----------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mevenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed\e\
    [0m = evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: evenIndices_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_map_reversed_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqc1b4wql.scala:27:5\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    evenIndices += i\n     \
    \   evenIndices.sum\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpskcj73gw.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n  \
    \      var count = 0\n        for (i <- 0 until s.length)\n            if (vowels(s(i))\
    \ && s(i) % 2 == 0)\n                count += 1\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc288vrzm.scala:13:24\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (vowels(s(i))\
    \ && s(i) % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Char\n\e\
    [31m   |\e[0m                       Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        val upperCounts = mutable.Map[Int, Long]()\n   \
    \     for (i <- evenIndices) {\n            val c = s.charAt(i)\n            if\
    \ (vowels.contains(c)) {\n                val count = upperCounts.getOrElse(i,\
    \ 0) + 1\n                upperCounts = upperCounts + (i -> count)\n         \
    \   }\n        }\n        upperCounts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps6xkefs3.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mupperCounts\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmps6xkefs3.scala:17:28 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                upperCounts = upperCounts + (i -> count)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val upperCounts\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).count(vowels.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdj6izzhn.scala:15)\n\tat Problem.main(tmpdj6izzhn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.foreach(i => if (s(i).isUpper) vowels.count(s(i))\
    \ else 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8b2br9x3.scala:12:65\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        evenIndices.foreach(\e\
    [36mi\e[0m => \e[33mif\e[0m (s(i).isUpper) vowels.count(s(i)) \e[33melse\e[0m\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \                         ^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                      Found:    Char\n\e[31m   |\e[0m                       \
    \                        Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        var evenIndex = 0\n        for (i\
    \ <- 0 until s.length)\n            if (s.charAt(i) == 'A' || s.charAt(i) == 'a')\
    \ evenIndex += 1\n            if (s.charAt(i) == 'B' || s.charAt(i) == 'b') evenIndex\
    \ += 1\n            if (s.charAt(i) == 'C' || s.charAt(i) == 'c') evenIndex +=\
    \ 1\n            if (s.charAt(i) == 'D' || s.charAt(i) == 'd') evenIndex += 1\n\
    \            if (s.charAt(i) == 'E' || s.charAt(i) == 'e') evenIndex += 1\n  \
    \          if (s.charAt(i) == 'F' || s.charAt(i) == 'f') evenIndex += 1\n    \
    \        if (s.charAt(i) == 'G' || s.charAt(i) == 'g') evenIndex += 1\n      \
    \      if (s.charAt(i) == 'H' || s.charAt(i) == 'h') evenIndex += 1\n        \
    \    if (s.charAt(i) == 'I' || s.charAt(i) == 'i') evenIndex += 1\n          \
    \  if (s.charAt(i) == 'J' || s.charAt(i) == 'j') evenIndex += 1\n            if\
    \ (s.charAt(i) == 'K' || s.charAt(i) == 'k') evenIndex += 1\n            if (s.charAt(i)\
    \ == 'L' || s.charAt(i) == 'l') evenIndex += 1\n            if (s.charAt(i) ==\
    \ 'M' || s.charAt(i) == 'm') evenIndex += 1\n            if (s.charAt(i) == 'N'\
    \ || s.charAt(i) == 'n') evenIndex += 1\n            if (s.charAt(i) == 'O' ||\
    \ s.charAt(i) == 'o') evenIndex += 1\n            if (s.charAt(i) == 'P' || s.charAt(i)\
    \ == 'p') evenIndex += 1\n            if (s.charAt(i) == 'Q' || s.charAt(i) ==\
    \ 'q') evenIndex += 1\n            if (s.charAt(i) == 'R' || s.charAt(i) == 'r')\
    \ evenIndex += 1\n            if (s.charAt(i) == 'S' || s.charAt(i) == 's') evenIndex\
    \ += 1\n            if (s.charAt(i) == 'T' || s.charAt(i) == 't') evenIndex +=\
    \ 1\n            if (s.charAt(i) == 'U' || s.charAt(i) == 'u') evenIndex += 1\n\
    \            if (s.charAt(i) == 'V' || s.charAt(i) == 'v') evenIndex += 1\n  \
    \          if (s.charAt(i) == 'W' || s.charAt(i) == 'w') evenIndex += 1\n    \
    \        if (s.charAt(i) == 'X' || s.charAt(i) == 'x') evenIndex += 1\n      \
    \      if (s.charAt(i) == 'Y' || s.charAt(i) == 'y') evenIndex += 1\n        \
    \    if (s.charAt(i) == 'Z' || s.charAt(i) == 'z') evenIndex += 1\n          \
    \  if (evenIndex % 2 == 0)\n                count += 1\n            evenIndex\
    \ = 0\n        return count\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl6pzogzg.scala:45)\n\tat Problem.main(tmpl6pzogzg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.filter(x => x % 2 == 0).length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_8dg61bj.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices_vowels = evenIndices.filter(_ %\
    \ 2 == 0).map(vowels.indexOf(_))\n        evenIndices_vowels.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp74qgh__t.scala:16)\n\tat Problem.main(tmp74qgh__t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(i => s(i).isUpper).count(i =>\
    \ vowels.contains(s(i)))\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdskw5qxg.scala:17)\n\tat Problem.main(tmpdskw5qxg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\"\n        val vowelsSet = vowels.toSet\n\
    \        val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowelsSet(s(i))) evenIndices += i\n        evenIndices.toList.count(_\
    \ % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr2b3nvmz.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        var evenIndex = -1\n        var\
    \ oddIndex = -1\n        var evenChar = ' '\n        var oddChar = ' '\n     \
    \   for(i <- 0 until s.length){\n            evenIndex = i % 2\n            oddIndex\
    \ = i / 2\n            evenChar = s.charAt(evenIndex)\n            oddChar = s.charAt(oddIndex)\n\
    \            if(evenChar == 'A' && oddChar == 'a'){\n                count +=\
    \ 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0qofc3qg.scala:27)\n\tat Problem.main(tmp0qofc3qg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793616
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'a' || s(i) == 'E' || s(i) == 'e' || s(i)\
    \ == 'I' || s(i) == 'i' || s(i) == 'O' || s(i) == 'o' || s(i) == 'U' || s(i) ==\
    \ 'u')\n                count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp89s6a2hi.scala:17)\n\tat Problem.main(tmp89s6a2hi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        var evenIndices = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 0 until s.length)\n            if (s(i) == 'A' || s(i) == 'a')\
    \ evenIndices += i\n        for (i <- 0 until evenIndices.length)\n          \
    \  if (s(evenIndices(i)) == 'A' || s(evenIndices(i)) == 'a') count += 1\n    \
    \    count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp67x95f5d.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36mevenIndices\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'a' || s(i) == 'E' || s(i) == 'e' || s(i)\
    \ == 'I' || s(i) == 'i' || s(i) == 'O' || s(i) == 'o' || s(i) == 'U' || s(i) ==\
    \ 'u')\n                count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp89s6a2hi.scala:17)\n\tat Problem.main(tmp89s6a2hi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n\
    \        val evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices\
    \ = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndice\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppaxv1zh3.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppaxv1zh3.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenIndices\e[0m = evenIndices.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppaxv1zh3.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppaxv1zh3.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ < s.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppaxv1zh3.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = evenIndices.filter(_\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndices is already defined as \e[33mvalue\e[0m \e[35mevenIndices\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same"
  stdout: ''
  timestamp: 1659793616
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toSet\n        var count = 0\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n        \
    \        count += 1\n            else\n                count += 0\n        count\
    \ / 2\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2padyyi.scala:21)\n\tat Problem.main(tmpv2padyyi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' && s(i+1) == 'a' && s(i+2) == 'A')\n              \
    \  count += 1\n            else if (s(i) == 'a' && s(i+1) == 'A' && s(i+2) ==\
    \ 'a')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'a' && s(i+2) == 'a')\n                count += 1\n            else if (s(i)\
    \ == 'a' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'a' && s(i+1) == 'a' && s(i+2) == 'a')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'a' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'a' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'a' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'a')\n                count += 1\n            else if (s(i) == 'a' && s(i+1)\
    \ == 'A' && s(i+2) == 'a')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'a' && s(i+2) == 'a')\n                count += 1\n    \
    \        else if (s(i) == 'a' && s(i+1) == 'A' && s(i+2) == 'a')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'a' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'a' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'a' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'a')\n                count += 1\n            else if (s(i) == 'a' && s(i+1)\
    \ == 'A' && s(i+2) == 'a')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'a' && s(i+2) == 'a')\n                count += 1\n    \
    \        else if (s(i) == 'a' && s(i+1) == 'A' && s(i+2) == 'a')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp00_lob8y.scala:56:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (s(i) == \e\
    [31m'a\e[0m\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m\
    \   |\e[0msymbol literal 'a is no longer supported,\n\e[31m   |\e[0muse a string\
    \ literal \"a\" or an application Symbol(\"a\") instead,\n\e[31m   |\e[0mor enclose\
    \ in braces '{a} if you want a quoted expression.\n\e[31m   |\e[0mFor now, you\
    \ can also `import language.deprecated.symbolLiterals` to accept\n\e[31m   |\e\
    [0mthe idiom, but this possibility might no longer be available in the future.\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp00_lob8y.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n2 errors found\n"
  stdout: ''
  timestamp: 1659793615
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        var evenIndex = 0\n        for (i\
    \ <- 0 until s.length)\n            if (s(i).isUpper)\n                if (evenIndex\
    \ % 2 == 0)\n                    count += 1\n                evenIndex += 1\n\
    \        count \n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf11sqvwf.scala:20)\n\tat Problem.main(tmpf11sqvwf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = s grouped 2 map (_._1)\n        val upperIndices = evenIndices filter (_ %\
    \ 2 == 0) map (_ / 2)\n        upperIndices map vowels.indexOf\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcvo15iwa.scala:11:45 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = s grouped\
    \ \e[31m2\e[0m map (_._1)\n\e[31m\e[31m   |\e[0m                             \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \  value _1 is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpcvo15iwa.scala:12:49 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mupperIndices\e[0m = evenIndices filter (_ % \e\
    [31m2\e[0m == \e[31m0\e[0m) map (_ / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                                           ^^^\e[0m\n\e[31m   |\e[0mvalue % is\
    \ not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import math.BigDecimal.javaBigDecimal2bigDecimal\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpcvo15iwa.scala:12:66 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mupperIndices\e[0m = evenIndices\
    \ filter (_ % \e[31m2\e[0m == \e[31m0\e[0m) map (_ / \e[31m2\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                                ^^^\e\
    [0m\n\e[31m   |\e[0mvalue / is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  i"
  stdout: ''
  timestamp: 1659793616
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (s(i) == 'A' || s(i) == 'a') count += 1\n            if (s(i) ==\
    \ 'B' || s(i) == 'b') count += 1\n            if (s(i) == 'C' || s(i) == 'c')\
    \ count += 1\n            if (s(i) == 'D' || s(i) == 'd') count += 1\n       \
    \     if (s(i) == 'E' || s(i) == 'e') count += 1\n            if (s(i) == 'F'\
    \ || s(i) == 'f') count += 1\n            if (s(i) == 'G' || s(i) == 'g') count\
    \ += 1\n            if (s(i) == 'H' || s(i) == 'h') count += 1\n            if\
    \ (s(i) == 'I' || s(i) == 'i') count += 1\n            if (s(i) == 'J' || s(i)\
    \ == 'j') count += 1\n            if (s(i) == 'K' || s(i) == 'k') count += 1\n\
    \            if (s(i) == 'L' || s(i) == 'l') count += 1\n            if (s(i)\
    \ == 'M' || s(i) == 'm') count += 1\n            if (s(i) == 'N' || s(i) == 'n')\
    \ count += 1\n            if (s(i) == 'O' || s(i) == 'o') count += 1\n       \
    \     if (s(i) == 'P' || s(i) == 'p') count += 1\n            if (s(i) == 'Q'\
    \ || s(i) == 'q') count += 1\n            if (s(i) == 'R' || s(i) == 'r') count\
    \ += 1\n            if (s(i) == 'S' || s(i) == 's') count += 1\n            if\
    \ (s(i) == 'T' || s(i) == 't') count += 1\n            if (s(i) == 'U' || s(i)\
    \ == 'u') count += 1\n            if (s(i) == 'V' || s(i) == 'v') count += 1\n\
    \            if (s(i) == 'W' || s(i) == 'w') count += 1\n            if (s(i)\
    \ == 'X' || s(i) == 'x') count += 1\n            if (s(i) == 'Y' || s(i) == 'y')\
    \ count += 1\n            if (s(i) == 'Z' || s(i) == 'z') count += 1\n       \
    \ if (count % 2 == 0)\n            count\n        else\n            0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd80a4f87.scala:44)\n\tat Problem.main(tmpd80a4f87.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices\
    \ = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until s.length)\n     \
    \       if (vowels(s(i)))\n                if (s(i) % 2 == 0)\n              \
    \      evenIndices += i\n        evenIndices.toList.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf8yrhyzc.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s.length).count(_\
    \ == s.charAt(_))\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqtl79vn2.scala:12:43\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(s.length).count(_ == s.charAt(_))\n\e[31m\e\
    [31m   |\e[0m                                           ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31m)\e[0m => Int\n\e[31m   |\e[0m                                 \
    \          Required: \e[1m\e[32mInt\e[0m => Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpqtl79vn2.scala:12:59 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).map(s.length).count(_ == s.charAt(_))\n\e[31m\e[31m   |\e[0m            \
    \                                               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n2 errors found\n"
  stdout: ''
  timestamp: 1659793616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(i).isUpper)\n                if (i % 2 == 0)\n                \
    \    evenIndices += i\n        evenIndices.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnj_4ifle.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.toList.flatMap {\n            i => if\
    \ (i % 2 == 0) s.charAt(i).toUpperCase in vowels else 0\n        }.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy6bqpeg0.scala:13:45 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[36mi\e[0m => \e[33mif\e[0m (i % \e[31m2\e\
    [0m == \e[31m0\e[0m) s.charAt(i).toUpperCase in vowels \e[33melse\e[0m \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy6bqpeg0.scala:13:72\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[36mi\e[0m => \e\
    [33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e[0m) s.charAt(i).toUpperCase in vowels\
    \ \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                        Found:    (\e[31m0\e[0m : Int)\n\e[31m\
    \   |\e[0m                                             Required: IterableOnce[Any]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(s take _).map(s\
    \ take _).filter(vowels.contains).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7c8tu8ri.scala:12:64\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        evenIndices.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(s take _).map(s take _).filter(vowels.contains).size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^\e[0m\n\e[31m   |\e[0m                                             \
    \   Found:    (_$3 : String)\n\e[31m   |\e[0m                                \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg')\
    \ returns 0\n    // count_upper('dBBE') returns 0\n    def countUpper(s : String)\
    \ : Long = {\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7mdegvo6.scala:19)\n\tat Problem.main(tmp7mdegvo6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793565
