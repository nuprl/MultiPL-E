language: scala
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphdnk3mb3.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphdnk3mb3.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var result : String = \"\"\n   \
    \     var i = x\n        while (i > 0) {\n            result += (i % 10 + shift)\n\
    \            i /= 10\n        }\n        result.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppk2si7uy.scala:21)\n\tat Problem.main(tmppk2si7uy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length)\n        val\
    \ shiftDigits = shiftDigits.reverse\n        digits.substring(0, shift) + shiftDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp22d6ehax.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e[0m = shiftDigits.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mshiftDigits is already defined as \e[33mvalue\e[0m \e[35mshiftDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp22d6ehax.scala:13:43 --------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e[0m = digits.substring(shift,\
    \ digits.length)\n\e[31m\e[31m   |\e[0m                                      \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                           Found:\
    \    (shift : Long)\n\e[31m   |\e[0m                                         \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22d6ehax.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        digits.substring(\e[31m0\e\
    [0m, shift) + shiftDigits\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ digits(digits.length - shift.toInt) else \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp92129mra.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmp92129mra.scala:14:45 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits(digits.length - shift.toInt) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m\
    \ does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ digits(digits.length - 1) else \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjgt_3_dm.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpjgt_3_dm.scala:14:45 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits(digits.length - \e[31m1\e[0m) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m\
    \ does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.dropRight(shift)\n        val shiftDigit = digits.takeRight(shift)\n\
    \        shiftDigit + shiftDigits\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv96btsmi.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpv96btsmi.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shift = shift % digits.length\n        val result = digits.reverse.take(shift)\
    \ ++ digits.reverse.drop(shift)\n        result.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8q5f84fn.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + digits.reverse.drop(shift).mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsv865ug5.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpsv865ug5.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length).reverse\n  \
    \      digits.substring(0, shift) + shiftDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekwxsdi7.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length).reverse\n\e[31m\e[31m   |\e[0m  \
    \                                         ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                   Found:    (shift : Long)\n\e[31m   |\e[0m\
    \                                           Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekwxsdi7.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz627gg71.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz627gg71.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a member of\
    \ Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvvmp8dzy.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpvvmp8dzy.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ digits(digits.length - shift) else \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxrrgbedl.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpxrrgbedl.scala:14:45 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits(digits.length - shift) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuj8ulsu5.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpuj8ulsu5.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + digits.reverse.mkString(\e[31m\"\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvvmp8dzy.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpvvmp8dzy.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ \"\" else digits(digits.length - shift))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk91dxnty.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpk91dxnty.scala:14:53 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ \e[31m\"\"\e[0m \e[33melse\e[0m digits(digits.length - shift))\n\e[31m\e[31m\
    \   |\e[0m                                                     ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                   \e[33mvalue\e[0m \e[35mdigits\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.map(_.toString).mkString(\"\")\n        digits.reverse.map(_.toString).mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdvtkcvo_.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpdvtkcvo_.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.map(_.toString).mkString(\e[31m\"\
    \"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (shift\
    \ > digits.length) digits(digits.length - shift) else \"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2_502k9i.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp2_502k9i.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString).reverse\n\
    \        digits.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpal7_umwl.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString).reverse\n\e[31m\e[31m\
    \   |\e[0m                                                ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                                Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                                Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz627gg71.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz627gg71.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a member of\
    \ Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuj8ulsu5.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpuj8ulsu5.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + digits.reverse.mkString(\e[31m\"\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz627gg71.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz627gg71.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a member of\
    \ Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.map(_.toString).mkString(\"\")\n        result +\
    \ (digits.size % shift != 0 ? digits(digits.size - 1).reverse : \"\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpasgg3awx.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpasgg3awx.scala:14:43 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.size % shift != \e[31m0\e[0m\
    \ ? digits(digits.size - \e[31m1\e[0m).reverse : \e[31m\"\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                         ^^^\e[0m\n\e[31m   |\e[0m \
    \                                        value ? is not a member of Int\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmpasgg3awx.scala:14:45 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.size % shift != \e[31m0\e[0m\
    \ ? digits(digits.size - \e[31m1\e[0m).reverse : \e[31m\"\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphdnk3mb3.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphdnk3mb3.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphdnk3mb3.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphdnk3mb3.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.map(_.toString).mkString(\"\")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp4junkbn.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var result = \"\"\n        var remainder\
    \ = x % 10\n        x /= 10\n        while (x > 0) {\n            result += (remainder\
    \ % 10) + x\n            remainder /= 10\n            x /= 10\n        }\n   \
    \     if (shift > result.length) result.reverse\n        else result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqbiylo_o.scala:14:10 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        x /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^\e[0m\n\e[31m   |\e[0m        value /= is not a member of Long - did\
    \ you mean x.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqbiylo_o.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            x /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean x.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz627gg71.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz627gg71.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a member of\
    \ Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var digits = x.toString.reverse\n\
    \        var shiftDigits = digits.reverse\n        var result = \"\"\n       \
    \ var shiftDigit = shift\n        while (shiftDigit > 0) {\n            result\
    \ += shiftDigits.charAt(shiftDigit % 10)\n            shiftDigit /= 10\n     \
    \   }\n        return result\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptjmlineq.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            result += shiftDigits.charAt(shiftDigit %\
    \ \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value += is not a member of String - did you mean String.!=?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptjmlineq.scala:17:41 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            result += shiftDigits.charAt(shiftDigit %\
    \ \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m                                      \
    \   ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \     Found:    Long\n\e[31m   |\e[0m                                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var digits = x.toString.reverse.grouped(shift)\n\
    \        val result = mutable.StringBuilder()\n        digits.foreach(x => result.append(x.reverse))\n\
    \        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyzlw7o9k.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpyzlw7o9k.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var result = \"\"\n        var remainder\
    \ = x % 10\n        x /= 10\n        while (x > 0) {\n            result += (remainder\
    \ % 10 + shift % 10) % 10\n            remainder /= 10\n            shift /= 10\n\
    \        }\n        if (shift > 0) result + remainder\n        else result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_x8mo7ha.scala:14:10 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        x /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^\e[0m\n\e[31m   |\e[0m        value /= is not a member of Long - did\
    \ you mean x.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_x8mo7ha.scala:18:18\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            shift /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   value /= is not a member of Long - did you mean shift.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shift = shift % digits.length\n        val result = digits.substring(shift,\
    \ digits.length)\n        digits.substring(0, shift) + result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptpkarh4f.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length)\n        val\
    \ shiftDigits = shiftDigits.reverse\n        digits.substring(0, shift) + shiftDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp22d6ehax.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e[0m = shiftDigits.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mshiftDigits is already defined as \e[33mvalue\e[0m \e[35mshiftDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp22d6ehax.scala:13:43 --------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e[0m = digits.substring(shift,\
    \ digits.length)\n\e[31m\e[31m   |\e[0m                                      \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                           Found:\
    \    (shift : Long)\n\e[31m   |\e[0m                                         \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22d6ehax.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        digits.substring(\e[31m0\e\
    [0m, shift) + shiftDigits\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        return result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4finq9eu.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp4finq9eu.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphdnk3mb3.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphdnk3mb3.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphdnk3mb3.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphdnk3mb3.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shift = shift.toString.reverse\n        val result = mutable.StringBuilder()\n\
    \        val digit = digits.charAt(0)\n        val shift = shift.charAt(0)\n \
    \       val digitCount = digits.length\n        val shiftCount = shift.length\n\
    \        val shiftDigitCount = shiftCount + 1\n        val shiftDigit = shift.charAt(0)\n\
    \        val digitCount = digits.length\n        val digit = digits.charAt(0)\n\
    \        val shift = shift.charAt(0)\n        val digitCount = digits.length\n\
    \        val digit = digits.charAt(0)\n        val shift = shift.charAt(0)\n \
    \       val digitCount = digits.length\n        val digit = digits.charAt(0)\n\
    \        val shift = shift.charAt(0)\n        val digitCount = digits.length\n\
    \        val digit = digits.charAt(0)\n        val shift = shift.charAt(0)\n \
    \       val digitCount = digits.length\n        val digit = digits.charAt(0)\n\
    \        val shift = shift.charAt(0)\n        val digitCount = digits.length\n\
    \        val digit = digits.charAt(0)\n        val shift = shift.charAt(0)\n \
    \       val digitCount = digits.length\n        val digit = digits.charAt(0)\n\
    \        val shift = shift.charAt(0)\n        val digitCount = digits.length\n\
    \        val digit = digits.charAt(0)\n        val shift = shift.charAt(0)\n \
    \       val digitCount = digits.length\n        val digit = digits.charAt(0)\n\
    \        val shift = shift.charAt(0)\n        val digitCount = digits.length\n\
    \        val digit = digits.charAt(0)\n        val shift = shift.charAt(0)\n \
    \       val digitCount = digits.length\n        val digit = digits.charAt(0)\n\
    \        val shift = shift.charAt(0)\n        val digitCount = digits.length\n\
    \        val digit = digits.charAt(0)\n        val shift = shift.charAt(0)\n \
    \       val digitCount = digits.length\n        val digit = digits.charAt(0)\n\
    \        val shift = shift.charAt(0)\n        val digitCount = digits.length\n\
    \        val digit = digits.charAt(0)\n        val shift = shift.charAt(0)\n \
    \       val digitCount = digits.length\n        val digit = digits.charAt(0)\n\
    \        val shift = shift.charAt(0)\n        val digitCount = digits.length\n\
    \        val digit = digits.charAt(0)\n        val shift = shift.charAt(0)\n \
    \       val digitCount = digits.length\n        val digit = digits.charAt(0)\n\
    \        val shift = shift.charAt(0)\n        val digitCount = digits.length\n\
    \        val digit = digits.charAt(0)\n        val shift = shift.charAt(0)\n \
    \       val digitCount = digits.length\n        val digit = digits.charAt(0)\n\
    \        val shift = shift.\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1k2o9rpv.scala:78:4 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1k2o9rpv.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.charAt(\e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mshift\
    \ is already defined as \e[33mvalue\e[0m \e[35mshift\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1k2o9rpv.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigitCount\e[0m = digits.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigitCount is already defined as \e[33mvalue\e[0m \e[35mdigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1k2o9rpv.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mdigit\e[0m = digits.charAt(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdigit is already defined as \e[33mvalue\e[0m \e[35mdigit\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1k2o9rpv.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.charAt(\e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mshift\
    \ is already defined as \e[33mvalue\e[0m \e[35mshift\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1k2o9rpv.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigitCount\e["
  stdout: ''
  timestamp: 1659799732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.dropRight(shift)\n        val shiftDigitString\
    \ = shiftDigits.reverse\n        val result = shiftDigitString + digits.takeRight(shift)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8tswj8wo.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8tswj8wo.scala:15:57 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = shiftDigitString + digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^\e[0m\n\e[31m   |\e[0m                                                Found:\
    \    (shift : Long)\n\e[31m   |\e[0m                                         \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var digits = x.toString.reverse\n\
    \        val shiftDigits = digits.take(shift)\n        val shiftDigits_1 = digits.drop(shift)\n\
    \        val shiftDigits_2 = shiftDigits_1.reverse\n        val shiftDigits_3\
    \ = shiftDigits_2.reverse\n        val shiftDigits_4 = shiftDigits_3.reverse\n\
    \        val shiftDigits_5 = shiftDigits_4.reverse\n        val shiftDigits_6\
    \ = shiftDigits_5.reverse\n        val shiftDigits_7 = shiftDigits_6.reverse\n\
    \        val shiftDigits_8 = shiftDigits_7.reverse\n        val shiftDigits_9\
    \ = shiftDigits_8.reverse\n        val shiftDigits_10 = shiftDigits_9.reverse\n\
    \        val shiftDigits_11 = shiftDigits_10.reverse\n        val shiftDigits_12\
    \ = shiftDigits_11.reverse\n        val shiftDigits_13 = shiftDigits_12.reverse\n\
    \        val shiftDigits_14 = shiftDigits_13.reverse\n        val shiftDigits_15\
    \ = shiftDigits_14.reverse\n        val shiftDigits_16 = shiftDigits_15.reverse\n\
    \        val shiftDigits_17 = shiftDigits_16.reverse\n        val shiftDigits_18\
    \ = shiftDigits_17.reverse\n        val shiftDigits_19 = shiftDigits_18.reverse\n\
    \        val shiftDigits_20 = shiftDigits_19.reverse\n        val shiftDigits_21\
    \ = shiftDigits_20.reverse\n        val shiftDigits_22 = shiftDigits_21.reverse\n\
    \        val shiftDigits_23 = shiftDigits_22.reverse\n        val shiftDigits_24\
    \ = shiftDigits_23.reverse\n        val shiftDigits_25 = shiftDigits_24.reverse\n\
    \        val shiftDigits_26 = shiftDigits_25.reverse\n        val shiftDigits_27\
    \ = shiftDigits_26.reverse\n        val shiftDigits_28 = shiftDigits_27.reverse\n\
    \        val shiftDigits_29 = shiftDigits_28.reverse\n        val shiftDigits_30\
    \ = shiftDigits_29.reverse\n        val shiftDigits_31 = shiftDigits_30.reverse\n\
    \        val shiftDigits_32 = shiftDigits_31.reverse\n        val shiftDigits_33\
    \ = shiftDigits_32.reverse\n        val shiftDigits_34 = shiftDigits_33.reverse\n\
    \        val shiftDigits_35 = shiftDigits_34.reverse\n        val shiftDigits_36\
    \ = shiftDigits_35.reverse\n        val shiftDigits_37 = shiftDigits_36.reverse\n\
    \        val shiftDigits_38 = shiftDigits_37.reverse\n        val shiftDigits_39\
    \ = shiftDigits_38\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp21et2zo3.scala:13:38\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.take(shift)\n\e[31m\e[31m   |\e[0m                              \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                                      Found:\
    \    (shift : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp21et2zo3.scala:14:40\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits_1\e\
    [0m = digits.drop(shift)\n\e[31m\e[31m   |\e[0m                              \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \ Found:    (shift : Long)\n\e[31m   |\e[0m                                  \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp21et2zo3.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvvmp8dzy.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpvvmp8dzy.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length)\n        digits.substring(0,\
    \ shift) + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2_v5qoz2.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m   |\e[0m          \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2_v5qoz2.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuj8ulsu5.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpuj8ulsu5.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + digits.reverse.mkString(\e[31m\"\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ digits(digits.length - shift) else \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxrrgbedl.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpxrrgbedl.scala:14:45 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits(digits.length - shift) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo8df1j08.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpo8df1j08.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length).reverse\n  \
    \      digits.substring(0, shift) + shiftDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekwxsdi7.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length).reverse\n\e[31m\e[31m   |\e[0m  \
    \                                         ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                   Found:    (shift : Long)\n\e[31m   |\e[0m\
    \                                           Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekwxsdi7.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.map(_.toString).mkString(\"\")\n        result +\
    \ digits.reverse.map(_.toString).mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprtpabjpu.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmprtpabjpu.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + digits.reverse.map(_.toString).mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        if (shift > digits.length)\
    \ result.reverse\n        else result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8koymt07.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shift = shift.toString.reverse\n        val result = new StringBuilder\n\
    \        var i = 0\n        while (i < digits.length && i < shift.length) {\n\
    \            val digit = digits(i)\n            val shift = shift(i)\n       \
    \     val digitShift = digit.toLong * 10 + shift.toLong\n            result.append(digitShift)\n\
    \            i += 1\n        }\n        result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpct5zjep7.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.toString.reverse\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpct5zjep7.scala:18:24 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mshift\e[0m = shift(i)\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length).reverse\n  \
    \      digits.substring(0, shift) + shiftDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekwxsdi7.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length).reverse\n\e[31m\e[31m   |\e[0m  \
    \                                         ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                   Found:    (shift : Long)\n\e[31m   |\e[0m\
    \                                           Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekwxsdi7.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length)\n        digits.substring(0,\
    \ shift) + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2_v5qoz2.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m   |\e[0m          \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2_v5qoz2.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var result = \"\"\n        var remainder\
    \ = x % 10\n        var digit = x % 100\n        var shiftDigit = shift % 10\n\
    \        var shiftDigitRemainder = shift % 100\n        while(digit != 0) {\n\
    \            result += digit.toString\n            digit = digit / 10\n      \
    \  }\n        while(shiftDigit != 0) {\n            result += shiftDigit.toString\n\
    \            shiftDigit = shiftDigit / 10\n        }\n        while(shiftDigitRemainder\
    \ != 0) {\n            result += shiftDigitRemainder.toString\n            shiftDigitRemainder\
    \ = shiftDigitRemainder / 10\n        }\n        result += remainder.toString\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphhggcake.scala:33)\n\tat Problem.main(tmphhggcake.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        if (shift > digits.length)\
    \ digits.reverse.mkString(\"\")\n        else result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpev8mhxul.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpev8mhxul.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (shift > digits.length) digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphdnk3mb3.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphdnk3mb3.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var result = \"\"\n        var remainder\
    \ = x % 10\n        var digit = x % 100\n        var shift = shift % 10\n    \
    \    while(shift != 0) {\n            result += digit.toString\n            digit\
    \ = digit / 10\n            shift = shift / 10\n        }\n        result += digit.toString\n\
    \        result += remainder.toString\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfbwn009l.scala:15:20 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mshift\e[0m = shift % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m\
    \                    Recursive \e[33mvariable\e[0m \e[35mshift\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp96_pc8bj.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp96_pc8bj.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a member of\
    \ Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var result = \"\"\n        var remainder\
    \ = x % 10\n        x /= 10\n        while (x > 0) {\n            result += (x\
    \ % 10) + remainder\n            x /= 10\n            remainder = x % 10\n   \
    \     }\n        if (shift > result.length) result.reverse\n        else result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxq09_jw8.scala:14:10 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        x /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^\e[0m\n\e[31m   |\e[0m        value /= is not a member of Long - did\
    \ you mean x.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxq09_jw8.scala:17:14\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            x /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean x.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.reverse.take(shift).toString.reverse\n     \
    \   digits.drop(shift).reverse + shiftDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr3mc91iz.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.reverse.take(shift).toString.reverse\n\e[31m\e[31m   |\e[0m     \
    \                                         ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                      Found:    (shift : Long)\n\e[31m   |\e\
    [0m                                              Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr3mc91iz.scala:14:20 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.drop(shift).reverse + shiftDigits\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Found:    (shift : Long)\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        val reversed = digits.reverse\n\
    \        val reversedDigits = reversed.grouped(shift).reverse\n        val reversedResult\
    \ = reversedDigits.mkString(\"\")\n        result + reversedResult\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprw3_c_8r.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmprw3_c_8r.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprw3_c_8r.scala:14:30\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mreversed\e[0m = digits.reverse\n\e[31m\e[31m   |\e[0m                    \
    \   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String]\
    \ - did you mean digits.reversed?\n3 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString).reverse\n\
    \        digits.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr30p5usj.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString).reverse\n\e[31m\e[31m\
    \   |\e[0m                                                ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                                Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                                Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length)\n        val\
    \ shiftDigit = shiftDigits.charAt(0)\n        val shiftDigits = shiftDigits.substring(1)\n\
    \        val result = digits + shiftDigit + shiftDigits\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2s63rwq.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e[0m = shiftDigits.substring(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigits is already defined as \e[33mvalue\e[0m \e[35mshiftDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpr2s63rwq.scala:13:43 --------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e[0m = digits.substring(shift,\
    \ digits.length)\n\e[31m\e[31m   |\e[0m                                      \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                           Found:\
    \    (shift : Long)\n\e[31m   |\e[0m                                         \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shift = shift % digits.length\n        val result = digits.reverse.take(shift)\
    \ ++ digits.reverse.drop(shift)\n        result.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8q5f84fn.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.reverse.take(shift)\n        val result = shiftDigits.reverse.mkString(\"\
    \")\n        val shiftDigitCount = shiftDigits.length\n        val digitCount\
    \ = digits.length\n        if (shiftDigitCount < digitCount) {\n            val\
    \ shiftDigits = digits.reverse.take(shiftDigitCount)\n            val result =\
    \ shiftDigits.reverse.mkString(\"\")\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7pipvoo2.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.reverse.take(shift)\n\e[31m\e[31m   |\e[0m                      \
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                     Found:    (shift : Long)\n\e[31m   |\e[0m              \
    \                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ digits(digits.length - 1) else \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjgt_3_dm.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpjgt_3_dm.scala:14:45 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits(digits.length - \e[31m1\e[0m) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m\
    \ does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ \"\" else digits(digits.length - shift))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk91dxnty.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpk91dxnty.scala:14:53 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ \e[31m\"\"\e[0m \e[33melse\e[0m digits(digits.length - shift))\n\e[31m\e[31m\
    \   |\e[0m                                                     ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                   \e[33mvalue\e[0m \e[35mdigits\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (digits.last.take(shift).reverse.mkString(\"\
    \"))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp96w6fx9p.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp96w6fx9p.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.last.take(shift).reverse.mkString(\e\
    [31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue last is not a member of Iterator[String] - did you mean digits.wait?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (digits.lastOption.getOrElse(\"\
    \"))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppmwbtkmk.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppmwbtkmk.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.lastOption.getOrElse(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue lastOption is not a member of Iterator[String] - did you mean\
    \ digits.maxOption?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuj8ulsu5.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpuj8ulsu5.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + digits.reverse.mkString(\e[31m\"\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz_zwhzx0.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz_zwhzx0.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean Iterator[String].reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shift = shift % digits.length\n        val result = digits.substring(shift,\
    \ digits.length)\n        digits.substring(0, shift) + result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptpkarh4f.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ digits(digits.length - 1) else \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjgt_3_dm.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpjgt_3_dm.scala:14:45 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits(digits.length - \e[31m1\e[0m) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m\
    \ does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.reverse.take(shift).reverse\n        digits.drop(shift).reverse\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowepqbgb.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.reverse.take(shift).reverse\n\e[31m\e[31m   |\e[0m              \
    \                                ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                        Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpowepqbgb.scala:14:20 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.drop(shift).reverse + shiftDigits\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Found:    (shift : Long)\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.reverse.take(shift).toString.reverse\n     \
    \   digits.drop(shift).take(shift).toString + shiftDigits\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ojeclf5.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.reverse.take(shift).toString.reverse\n\e[31m\e[31m   |\e[0m     \
    \                                         ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                      Found:    (shift : Long)\n\e[31m   |\e\
    [0m                                              Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ojeclf5.scala:14:20 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.drop(shift).take(shift).toString + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Found:    (shift : Long)\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ojeclf5.scala:14:32\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        digits.drop(shift).take(shift).toString\
    \ + shiftDigits\n\e[31m\e[31m   |\e[0m                                ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length).reverse\n  \
    \      digits.substring(0, shift) + shiftDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekwxsdi7.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length).reverse\n\e[31m\e[31m   |\e[0m  \
    \                                         ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                   Found:    (shift : Long)\n\e[31m   |\e[0m\
    \                                           Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekwxsdi7.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val digits_length = digits.length\n        val digits_length_minus_shift\
    \ = digits_length - shift\n        val digits_length_minus_shift_plus_1 = digits_length_minus_shift\
    \ + 1\n        val digits_length_minus_shift_plus_2 = digits_length_minus_shift_plus_1\
    \ + 1\n        val digits_length_minus_shift_plus_3 = digits_length_minus_shift_plus_2\
    \ + 1\n        val digits_length_minus_shift_plus_4 = digits_length_minus_shift_plus_3\
    \ + 1\n        val digits_length_minus_shift_plus_5 = digits_length_minus_shift_plus_4\
    \ + 1\n        val digits_length_minus_shift_plus_6 = digits_length_minus_shift_plus_5\
    \ + 1\n        val digits_length_minus_shift_plus_7 = digits_length_minus_shift_plus_6\
    \ + 1\n        val digits_length_minus_shift_plus_8 = digits_length_minus_shift_plus_7\
    \ + 1\n        val digits_length_minus_shift_plus_9 = digits_length_minus_shift_plus_8\
    \ + 1\n        val digits_length_minus_shift_plus_10 = digits_length_minus_shift_plus_9\
    \ + 1\n        val digits_length_minus_shift_plus_11 = digits_length_minus_shift_plus_10\
    \ + 1\n        val digits_length_minus_shift_plus_12 = digits_length_minus_shift_plus_11\
    \ + 1\n        val digits_length_minus_shift_plus_13 = digits_length_minus_shift_plus_12\
    \ + 1\n        val digits_length_minus_shift_plus_14 = digits_length_minus_shift_plus_13\
    \ + 1\n        val digits_length_minus_shift_plus_15 = digits_length_minus_shift_plus_14\
    \ + 1\n        val digits_length_minus_shift_plus_16 = digits_length_minus_shift_plus_15\
    \ + 1\n        val digits_length_minus_shift_plus_17 = digits_length_minus_shift_plus_16\
    \ + 1\n        val digits_length_minus_shift_plus_18 = digits_length_minus_shift_plus_17\
    \ + 1\n        val digits_length_minus_shift_plus_19 = digits_length_minus_shift_plus_18\
    \ + 1\n        val digits_length_minus_shift_plus_20 = digits_length_minus_shift_plus_19\
    \ + 1\n        val digits_length_minus_shift_plus_21 = digits_length_minus_shift_plus_20\
    \ + 1\n        val digits_length_minus_shift_plus_22 = digits_length_minus_shift_plus_21\
    \ + 1\n        val digits_length_minus_shift_plus_23 = digits_length_minus_shift_plus_22\
    \ + 1\n        val digits_length_minus_shift_plus_24 = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_6_i8a0a.scala:38:47 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mdigits_length_minus_shift_plus_24\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                               ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_6_i8a0a.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shift = shift % digits.length\n        val result = digits.reverse.take(shift)\
    \ ++ digits.reverse.drop(shift)\n        result.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8q5f84fn.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shift = shift.toString.reverse\n        val result = new StringBuilder\n\
    \        var i = 0\n        while (i < digits.length && i < shift.length) {\n\
    \            val digit = digits(i)\n            val shift = shift(i)\n       \
    \     val digitShift = digit + shift\n            result.append(digitShift)\n\
    \            i += 1\n        }\n        if (i < digits.length) {\n           \
    \ result.append(digits(i))\n        }\n        return result.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3_2py8z7.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.toString.reverse\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3_2py8z7.scala:18:24 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mshift\e[0m = shift(i)\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799740
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (digits.lastOption.getOrElse(\"\
    \")).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2fd4a_9t.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp2fd4a_9t.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.lastOption.getOrElse(\e[31m\"\
    \"\e[0m)).reverse\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue lastOption is not a member of Iterator[String] - did\
    \ you mean digits.maxOption?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuj8ulsu5.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpuj8ulsu5.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + digits.reverse.mkString(\e[31m\"\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString\n        result + (if (shift > digits.length)\
    \ \"\" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7g6pnb55.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7g6pnb55.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (digits.size < shift\
    \ ? digits.reverse.mkString(\"\") : \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwhssljg9.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpwhssljg9.scala:14:38 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.size < shift ? digits.reverse.mkString(\e\
    [31m\"\"\e[0m) : \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                value\
    \ ? is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwhssljg9.scala:14:47\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        result + (digits.size\
    \ < shift ? digits.reverse.mkString(\e[31m\"\"\e[0m) : \e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp19_n_550.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp19_n_550.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length).reverse\n  \
    \      digits.substring(0, shift) + shiftDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekwxsdi7.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length).reverse\n\e[31m\e[31m   |\e[0m  \
    \                                         ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                   Found:    (shift : Long)\n\e[31m   |\e[0m\
    \                                           Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekwxsdi7.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toInt)\n\
    \        val result = digits.foldLeft(\"\")(_ + _)\n        digits.reverse.foldLeft(result)(_\
    \ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpatypac7g.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toInt)\n\e[31m\e[31m   |\e[0m  \
    \                                              ^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                             Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpatypac7g.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.foldLeft(result)(_ + _)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not\
    \ a member of Iterator[Int] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuj8ulsu5.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpuj8ulsu5.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + digits.reverse.mkString(\e[31m\"\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length)\n        val\
    \ shiftDigit = digits.charAt(shift)\n        val result = shiftDigit + shiftDigits\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnvd5n0ug.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m   |\e[0m          \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpnvd5n0ug.scala:14:39 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.charAt(shift)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Found:    (shift : Long)\n\e\
    [31m   |\e[0m                                       Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (shift\
    \ > digits.length) digits else digits.reverse.mkString(\"\"))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvoy4jzzi.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpvoy4jzzi.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvvmp8dzy.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpvvmp8dzy.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz627gg71.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz627gg71.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a member of\
    \ Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.dropRight(shift).reverse\n        digits.drop(shift).reverse+shiftDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp041wb_gn.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).reverse\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                    Found:    (shift : Long)\n\e[31m   |\e[0m               \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp041wb_gn.scala:14:20 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        digits.drop(shift).reverse+shiftDigits\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    (shift : Long)\n\e[31m   |\e[0m                    Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo8df1j08.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpo8df1j08.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ \"\" else digits(shift))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpty98qpak.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).reverse\n\e[31m\e[31m   |\e[0m       \
    \                                         ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                        Found:    (shift : Long)\n\e[31m   |\e\
    [0m                                                Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        val reversed = digits.reverse.mkString(\"\
    \")\n        if (shift == 0)\n            result\n        else if (shift == digits.length)\n\
    \            reversed\n        else\n            circularShift(reversed, shift\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcdlojvb3.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpcdlojvb3.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toInt)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (shift\
    \ > digits.length) \"\" else \"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdd_wwb79.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toInt)\n\e[31m\e[31m   |\e[0m  \
    \                                              ^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                             Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdd_wwb79.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[Int] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var result = \"\"\n        var shiftDigits\
    \ = shift % 10\n        var shiftDigit = shift / 10\n        var digits = x %\
    \ 10\n        var digit = x / 10\n        while (shift > 0) {\n            result\
    \ += (digit.toString)\n            shift -= 1\n            digit /= 10\n     \
    \   }\n        result += (digit.toString)\n        while (shiftDigits > 0) {\n\
    \            result += (shiftDigit.toString)\n            shiftDigits -= 1\n \
    \           shiftDigit /= 10\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi5sq2skb.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            shift -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Long - did you mean shift.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        if (shift == 0) result\n\
    \        else circularShift(result, shift - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqu8pv9nf.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqu8pv9nf.scala:15:27 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m circularShift(result, shift -\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Found:    (result : String)\n\e[31m\
    \   |\e[0m                           Required: Long\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shift = shift.toString.reverse\n        val result = mutable.StringBuilder()\n\
    \        val shiftDigits = digits.dropRight(shift)\n        val shiftDigit = shiftDigits.reverse\n\
    \        val digit = digits.takeRight(shift)\n        result ++= digit\n     \
    \   result ++= shiftDigit\n        result ++= digit\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprtxj06g3.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.toString.reverse\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprtxj06g3.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ \"\" else digits(digits.length - shift))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk91dxnty.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpk91dxnty.scala:14:53 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ \e[31m\"\"\e[0m \e[33melse\e[0m digits(digits.length - shift))\n\e[31m\e[31m\
    \   |\e[0m                                                     ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                   \e[33mvalue\e[0m \e[35mdigits\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphdnk3mb3.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphdnk3mb3.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpes4aont5.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString).reverse\n\
    \        digits.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpal7_umwl.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString).reverse\n\e[31m\e[31m\
    \   |\e[0m                                                ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                                Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                                Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var result = \"\"\n        var remainder\
    \ = x % 10\n        var digits = x / 10\n        while (digits > 0) {\n      \
    \      result += (digits % 10) + remainder\n            remainder = digits % 10\n\
    \            digits = digits / 10\n        }\n        if (shift > result.length)\
    \ {\n            result ++= result.dropRight(shift)\n        } else {\n      \
    \      result ++= result.drop(shift)\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsarz0y1w.scala:21:19 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            result ++= result.dropRight(shift)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value ++=\
    \ is not a member of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsarz0y1w.scala:21:40\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            result ++= result.dropRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Found:    (shift : Long)\n\e\
    [31m   |\e[0m                                        Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsarz0y1w.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            result ++= result.drop(shift)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value ++= is\
    \ not a member of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsarz0y1w.scala:23:35\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            result ++= result.drop(shift)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   Found:    (shift : Long)\n\e[31m   |\e[0m\
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (digits.lastOption.getOrElse(\"\
    \"))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppmwbtkmk.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppmwbtkmk.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.lastOption.getOrElse(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue lastOption is not a member of Iterator[String] - did you mean\
    \ digits.maxOption?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ digits(digits.length - shift) else \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxrrgbedl.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpxrrgbedl.scala:14:45 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits(digits.length - shift) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz627gg71.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz627gg71.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a member of\
    \ Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shift = shift % digits.length\n        val digits_shifted = digits.substring(shift)\n\
    \        val digits_shifted_reversed = digits_shifted.reverse\n        digits_shifted_reversed\
    \ + digits.substring(0, shift)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpr2ue0c0_.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ digits.reverse.mkString(\"\") else \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp43j5mo63.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp43j5mo63.scala:14:52 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits.reverse.mkString(\e[31m\"\"\e[0m) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.reverse.take(shift).reverse\n        digits.reverse.take(shift).reverse\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaw380nrb.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.reverse.take(shift).reverse\n\e[31m\e[31m   |\e[0m              \
    \                                ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                        Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpaw380nrb.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.take(shift).reverse + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        val reversed = digits.reverse.mkString(\"\
    \")\n        if (shift == x.toString.length) result else reversed\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7m9yq682.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7m9yq682.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString\n        result + (if (shift > digits.length)\
    \ \"\" else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7g6pnb55.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7g6pnb55.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz627gg71.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz627gg71.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a member of\
    \ Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp96_pc8bj.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp96_pc8bj.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a member of\
    \ Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length)\n        val\
    \ shiftDigits = shiftDigits.reverse\n        digits.substring(0, shift) + shiftDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp22d6ehax.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e[0m = shiftDigits.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mshiftDigits is already defined as \e[33mvalue\e[0m \e[35mshiftDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp22d6ehax.scala:13:43 --------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e[0m = digits.substring(shift,\
    \ digits.length)\n\e[31m\e[31m   |\e[0m                                      \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                           Found:\
    \    (shift : Long)\n\e[31m   |\e[0m                                         \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22d6ehax.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        digits.substring(\e[31m0\e\
    [0m, shift) + shiftDigits\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphdnk3mb3.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphdnk3mb3.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo8df1j08.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpo8df1j08.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val digits_length = digits.length\n        val digits_length = digits_length\
    \ + shift\n        val digits_length = digits_length.toInt\n        val digits_length\
    \ = digits_length + 1\n        val digits_length = digits_length.toInt\n     \
    \   val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        val digits_length = digits_length.toInt\n\
    \        val digits_length = digits_length + 1\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5lnczfet.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits_length\e[0m = digits_length\
    \ + shift\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigits_length is already defined as \e[33mvalue\e[0m \e[35mdigits_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5lnczfet.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mdigits_length\e[0m = digits_length.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mdigits_length is already defined as \e[33mvalue\e[0m \e[35mdigits_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5lnczfet.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mdigits_length\e[0m = digits_length +\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigits_length is already defined as \e[33mvalue\e[0m \e[35mdigits_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5lnczfet.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mdigits_length\e[0m = digits_length.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mdigits_length is already defined as \e[33mvalue\e[0m \e[35mdigits_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5lnczfet.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mdigits_length\e[0m = digits_length +\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shift = shift.toString.reverse\n        val result = mutable.StringBuilder()\n\
    \        val shiftDigits = digits.length - shift.length\n        val shiftDigit\
    \ = shiftDigits.toInt\n        val shiftDigits = digits.length - shiftDigit\n\
    \        val shiftDigit = shiftDigits.toInt\n        val shiftDigits = digits.length\
    \ - shiftDigit\n        val shiftDigit = shiftDigits.toInt\n        val shiftDigits\
    \ = digits.length - shiftDigit\n        val shiftDigit = shiftDigits.toInt\n \
    \       val shiftDigits = digits.length - shiftDigit\n        val shiftDigit =\
    \ shiftDigits.toInt\n        val shiftDigits = digits.length - shiftDigit\n  \
    \      val shiftDigit = shiftDigits.toInt\n        val shiftDigits = digits.length\
    \ - shiftDigit\n        val shiftDigit = shiftDigits.toInt\n        val shiftDigits\
    \ = digits.length - shiftDigit\n        val shiftDigit = shiftDigits.toInt\n \
    \       val shiftDigits = digits.length - shiftDigit\n        val shiftDigit =\
    \ shiftDigits.toInt\n        val shiftDigits = digits.length - shiftDigit\n  \
    \      val shiftDigit = shiftDigits.toInt\n        val shiftDigits = digits.length\
    \ - shiftDigit\n        val shiftDigit = shiftDigits.toInt\n        val shiftDigits\
    \ = digits.length - shiftDigit\n        val shiftDigit = shiftDigits.toInt\n \
    \       val shiftDigits = digits.length - shiftDigit\n        val shiftDigit =\
    \ shiftDigits.toInt\n        val shiftDigits = digits.length - shiftDigit\n  \
    \      val shiftDigit = shiftDigits.toInt\n        val shiftDigits = digits.length\
    \ - shiftDigit\n        val shiftDigit = shiftDigits.toInt\n        val shiftDigits\
    \ = digits.length - shiftDigit\n        val shiftDigit = shiftDigits.toInt\n \
    \       val shiftDigits = digits.length - shiftDigit\n        val shiftDigit =\
    \ shiftDigits.toInt\n        val shiftDigits = digits.length - shiftDigit\n  \
    \      val shiftDigit = shiftDigits.toInt\n        val shiftDigits = digits.length\
    \ - shiftDigit\n        val shiftDigit = shiftDigits.toInt\n        val shiftDigits\
    \ = digits.length - shiftDigit\n        val shiftDigit = shiftDigits.toInt\n \
    \       val shiftDigits = digits.length - shiftDigit\n        val shiftDigit =\
    \ shiftDigits.toInt\n        val shiftDigits = digits.length - shiftDigit\n  \
    \      val shiftDigit = shiftDigits.toInt\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkfnj4r8f.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e[0m = digits.length\
    \ - shiftDigit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigits is already defined as \e[33mvalue\e[0m \e[35mshiftDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkfnj4r8f.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = shiftDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mshiftDigit is already defined as \e[33mvalue\e[0m \e[35mshiftDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkfnj4r8f.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e[0m = digits.length - shiftDigit\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mshiftDigits is already defined as \e[33mvalue\e[0m \e[35mshiftDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkfnj4r8f.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = shiftDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mshiftDigit is already defined as \e[33mvalue\e[0m \e[35mshiftDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkfnj4r8f.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e[0m = digits.length - shiftDigit\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0"
  stdout: ''
  timestamp: 1659799755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuj8ulsu5.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpuj8ulsu5.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + digits.reverse.mkString(\e[31m\"\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.reverse.take(shift).reverse\n        digits.reverse.take(shift).reverse\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaw380nrb.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.reverse.take(shift).reverse\n\e[31m\e[31m   |\e[0m              \
    \                                ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                        Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpaw380nrb.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.take(shift).reverse + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length)\n        digits.substring(0,\
    \ shift) + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2_v5qoz2.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m   |\e[0m          \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2_v5qoz2.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphdnk3mb3.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphdnk3mb3.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length)\n        digits.substring(0,\
    \ shift) + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2_v5qoz2.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m   |\e[0m          \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2_v5qoz2.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length)\n        digits.substring(0,\
    \ shift) + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2_v5qoz2.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m   |\e[0m          \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2_v5qoz2.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.reverse.take(shift)\n        val shiftDigit\
    \ = shiftDigits.reverse.take(digits.length)\n        val result = shiftDigit +\
    \ digits.take(digits.length - shiftDigits.length)\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeosvpj4l.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.reverse.take(shift)\n\e[31m\e[31m   |\e[0m                      \
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                     Found:    (shift : Long)\n\e[31m   |\e[0m              \
    \                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (shift\
    \ > digits.length) digits else digits.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp54vokk0j.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp54vokk0j.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz627gg71.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz627gg71.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a member of\
    \ Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp96_pc8bj.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp96_pc8bj.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a member of\
    \ Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ digits(digits.length - shift) else \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxrrgbedl.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpxrrgbedl.scala:14:45 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits(digits.length - shift) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.reverse.take(shift).reverse\n        digits.drop(shift).reverse\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowepqbgb.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.reverse.take(shift).reverse\n\e[31m\e[31m   |\e[0m              \
    \                                ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                        Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpowepqbgb.scala:14:20 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.drop(shift).reverse + shiftDigits\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Found:    (shift : Long)\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var result = \"\"\n        var remainder\
    \ = x % 10\n        var digit = x % 10\n        var shift = shift % 10\n     \
    \   var shiftRemainder = shift % 10\n        while(shift > 0) {\n            result\
    \ += (digit + shiftRemainder)\n            shift -= 1\n            digit = remainder\
    \ % 10\n            remainder = remainder / 10\n            shiftRemainder = shiftRemainder\
    \ / 10\n        }\n        if(shift < 0){\n            result += (digit + shiftRemainder)\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfimblgl9.scala:15:20 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mshift\e[0m = shift % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m\
    \                    Recursive \e[33mvariable\e[0m \e[35mshift\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799751
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length)\n        digits.substring(0,\
    \ shift) + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2_v5qoz2.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m   |\e[0m          \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2_v5qoz2.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var result = \"\"\n        var shiftDigits\
    \ = \"\"\n        var shiftDigitCount = 1\n        var digitCount = x.toString.length\n\
    \        while (shiftDigitCount < shift) {\n            shiftDigits += x.toString.charAt(digitCount)\n\
    \            shiftDigitCount += 1\n            digitCount -= 1\n        }\n  \
    \      shiftDigitCount -= 1\n        digitCount += 1\n        while (shiftDigitCount\
    \ > 0) {\n            result += x.toString.charAt(digitCount)\n            shiftDigitCount\
    \ -= 1\n            digitCount += 1\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 3\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.circularShift(tmpecuhj031.scala:17)\n\tat Problem$.main(tmpecuhj031.scala:31)\n\
    \tat Problem.main(tmpecuhj031.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.reverse.take(shift)\n        val shiftDigitString\
    \ = shiftDigits.reverse\n        val result = shiftDigitString + digits.drop(shiftDigits.length)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf_ktv2y0.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.reverse.take(shift)\n\e[31m\e[31m   |\e[0m                      \
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                     Found:    (shift : Long)\n\e[31m   |\e[0m              \
    \                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ \"\" else digits(digits.length - shift))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk91dxnty.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpk91dxnty.scala:14:53 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ \e[31m\"\"\e[0m \e[33melse\e[0m digits(digits.length - shift))\n\e[31m\e[31m\
    \   |\e[0m                                                     ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                   \e[33mvalue\e[0m \e[35mdigits\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ \"\" else digits(digits.length - shift))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk91dxnty.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpk91dxnty.scala:14:53 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ \e[31m\"\"\e[0m \e[33melse\e[0m digits(digits.length - shift))\n\e[31m\e[31m\
    \   |\e[0m                                                     ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                   \e[33mvalue\e[0m \e[35mdigits\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphdnk3mb3.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphdnk3mb3.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.reverse.take(shift).reverse\n        digits.drop(shift).reverse\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowepqbgb.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.reverse.take(shift).reverse\n\e[31m\e[31m   |\e[0m              \
    \                                ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                        Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpowepqbgb.scala:14:20 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.drop(shift).reverse + shiftDigits\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Found:    (shift : Long)\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length)\n        digits.substring(0,\
    \ shift) + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2_v5qoz2.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m   |\e[0m          \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2_v5qoz2.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shift = shift % digits.length\n        val result = digits.reverse.take(digits.length\
    \ - shift)\n        result + digits.reverse.drop(digits.length - shift)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph43rcx3c.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (digits.drop(shift).mkString(\"\
    \"))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsdncxcax.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsdncxcax.scala:14:30 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.drop(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Found:    (shift : Long)\n\e[31m   |\e\
    [0m                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        return result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4finq9eu.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp4finq9eu.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvvmp8dzy.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpvvmp8dzy.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        return result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4finq9eu.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp4finq9eu.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length).reverse\n  \
    \      digits.substring(0, shift) + shiftDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekwxsdi7.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length).reverse\n\e[31m\e[31m   |\e[0m  \
    \                                         ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                   Found:    (shift : Long)\n\e[31m   |\e[0m\
    \                                           Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekwxsdi7.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shift = shift % digits.length\n        val result = digits.reverse.take(shift)\
    \ ++ digits.reverse.drop(shift)\n        result.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8q5f84fn.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shift = shift % digits.length\n        val result = digits.reverse.take(shift)\
    \ ++ digits.reverse.drop(shift)\n        result.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8q5f84fn.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.dropRight(shift).reverse\n        digits.drop(shift).reverse.concat(shiftDigits)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcncrp58z.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).reverse\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                    Found:    (shift : Long)\n\e[31m   |\e[0m               \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpcncrp58z.scala:14:20 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        digits.drop(shift).reverse.concat(shiftDigits)\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Found:    (shift : Long)\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toInt)\n\
    \        val result = digits.foldLeft(\"\") { (result, digit) =>\n           \
    \ result + digit.toString\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5sjzve0f.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toInt)\n\e[31m\e[31m   |\e[0m  \
    \                                              ^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                             Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvvmp8dzy.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpvvmp8dzy.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ digits(digits.length - 1) else \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjgt_3_dm.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpjgt_3_dm.scala:14:45 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits(digits.length - \e[31m1\e[0m) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m\
    \ does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length)\n        digits.substring(0,\
    \ shift) + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2_v5qoz2.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m   |\e[0m          \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2_v5qoz2.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var result = \"\"\n        var remainder\
    \ = x % 10\n        var shift = shift % 10\n        var digit = x % 10\n     \
    \   var digits = \"\"\n        while(shift > 0) {\n            digits = digits\
    \ + digit.toString\n            digit = digit / 10\n            shift = shift\
    \ - 1\n        }\n        while(shift > 0) {\n            result = result + digits[shift]\n\
    \            digit = digit / 10\n            shift = shift - 1\n        }\n  \
    \      result = result + digit.toString\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpycisd01l.scala:14:20 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mshift\e[0m = shift % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m\
    \                    Recursive \e[33mvariable\e[0m \e[35mshift\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpycisd01l.scala:23:37\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            result = result\
    \ + digits[\e[35mshift\e[0m]\n\e[31m\e[31m   |\e[0m                          \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                                     Not\
    \ found: type shift\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799752
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        return result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4finq9eu.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp4finq9eu.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString\n        result \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphm04zhuh.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphm04zhuh.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        return result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt701zzz_.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt701zzz_.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString\n        result + digits.reverse.drop(shift).mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmtkuzb4v.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpmtkuzb4v.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.map(_.mkString).reverse.mkString\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa69jcneg.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpa69jcneg.scala:13:44 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.map(_.mkString).reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ Iterator[String].reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shift = shift.toString.reverse\n        val result = mutable.StringBuilder()\n\
    \        var i = 0\n        while (i < digits.length && i < shift.length) {\n\
    \            val digit = digits(i)\n            val shift = shift(i)\n       \
    \     val digitShift = digit + shift\n            result.append(digitShift)\n\
    \            i += 1\n        }\n        result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqz6e4kky.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.toString.reverse\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqz6e4kky.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpqz6e4kky.scala:18:24 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            \e[33mval\e[0m \e[36mshift\e[0m = shift(i)\n\e[31m\e[31m \
    \  |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                     \
    \   Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var digits = x.toString.reverse\n\
    \        val shift = shift % digits.length\n        val newDigits = digits.dropRight(digits.length\
    \ - shift)\n        val newDigitString = newDigits.reverse\n        val newDigits\
    \ = newDigitString.toLong\n        val newDigitString = newDigits.toString\n \
    \       val newDigitString = newDigitString.reverse\n        val newDigitString\
    \ = newDigitString.dropRight(digits.length - shift)\n        val newDigitString\
    \ = newDigitString.reverse\n        newDigitString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo2xusmlx.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewDigits\e[0m = newDigitString.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnewDigits is already defined as \e[33mvalue\e[0m \e[35mnewDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpo2xusmlx.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewDigitString\e[0m = newDigits.toString\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewDigitString is already defined as \e[33mvalue\e[0m \e[35mnewDigitString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo2xusmlx.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnewDigitString\e[0m = newDigitString.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnewDigitString is already defined as \e[33mvalue\e[0m \e[35mnewDigitString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo2xusmlx.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnewDigitString\e[0m = newDigitString.dropRight(digits.length\
    \ - shift)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewDigitString is already defined as \e[33mvalue\e[0m \e[35mnewDigitString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo2xusmlx.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnewDigitString\e[0m = newDigitString.re"
  stdout: ''
  timestamp: 1659799755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString).reverse\n\
    \        digits.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr30p5usj.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString).reverse\n\e[31m\e[31m\
    \   |\e[0m                                                ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                                Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                                Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ digits(digits.length - shift) else \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxrrgbedl.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpxrrgbedl.scala:14:45 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits(digits.length - shift) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toInt)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmnuf5tis.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toInt)\n\e[31m\e[31m   |\e[0m  \
    \                                              ^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                             Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmnuf5tis.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[Int] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        var result = \"\"\n        var remainder\
    \ = x % 10\n        x /= 10\n        while (x > 0) {\n            result += (remainder\
    \ % 10 + shift)\n            remainder /= 10\n            shift -= 1\n       \
    \ }\n        if (shift > 0) result + remainder\n        else result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps1x8iwf3.scala:14:10 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        x /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^\e[0m\n\e[31m   |\e[0m        value /= is not a member of Long - did\
    \ you mean x.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps1x8iwf3.scala:18:18\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            shift -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   value -= is not a member of Long - did you mean shift.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val digits_length = digits.length\n        val digits_length_minus_shift\
    \ = digits_length - shift\n        val digits_length_minus_shift_plus_one = digits_length_minus_shift\
    \ + 1\n        val digits_length_minus_shift_plus_two = digits_length_minus_shift_plus_one\
    \ + 1\n        val digits_length_minus_shift_plus_three = digits_length_minus_shift_plus_two\
    \ + 1\n        val digits_length_minus_shift_plus_four = digits_length_minus_shift_plus_three\
    \ + 1\n        val digits_length_minus_shift_plus_five = digits_length_minus_shift_plus_four\
    \ + 1\n        val digits_length_minus_shift_plus_six = digits_length_minus_shift_plus_five\
    \ + 1\n        val digits_length_minus_shift_plus_seven = digits_length_minus_shift_plus_six\
    \ + 1\n        val digits_length_minus_shift_plus_eight = digits_length_minus_shift_plus_seven\
    \ + 1\n        val digits_length_minus_shift_plus_nine = digits_length_minus_shift_plus_eight\
    \ + 1\n        val digits_length_minus_shift_plus_ten = digits_length_minus_shift_plus_nine\
    \ + 1\n        val digits_length_minus_shift_plus_eleven = digits_length_minus_shift_plus_ten\
    \ + 1\n        val digits_length_minus_shift_plus_twelve = digits_length_minus_shift_plus_eleven\
    \ + 1\n        val digits_length_minus_shift_plus_thirteen = digits_length_minus_shift_plus_twelve\
    \ + 1\n        val digits_length_minus_shift_plus_fourteen = digits_length_minus_shift_plus_thirteen\
    \ + 1\n        val digits_length_minus_shift_plus_fifteen = digits_length_minus_shift_plus_fourteen\
    \ + 1\n        val digits_length_minus_shift_plus_sixteen = digits_length_minus_shift_plus_fifteen\
    \ + 1\n        val digits_length_minus_shift_plus_seventeen = digits_length_minus_shift_plus_sixteen\
    \ + 1\n        val digits_length_minus_shift_plus_eighteen = digits_length_minus_shift_plus_seventeen\
    \ + 1\n        val digits_length_minus_shift_plus_nineteen = digits_length_minus_shift_plus_eighteen\
    \ + 1\n        val digits_length_minus_shift_plus_twenty = digits_length_minus_shift_plus_nineteen\
    \ + 1\n        val digits_length_minus_shift_plus_twenty_one = digits_length_minus_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgkr45xiq.scala:35:56 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mdigits_length_minus_shift_plus_twenty_one\e\
    [0m = digits_length_minus_\n\e[31m\e[31m   |\e[0m                            \
    \                            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                   Not found: digits_length_minus_\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgkr45xiq.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.dropRight(shift)\n        val shiftDigit = digits.takeRight(shift).toString.reverse\n\
    \        shiftDigit + shiftDigits\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpds550wvr.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpds550wvr.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift).toString.reverse\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val result = new StringBuilder(digits)\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val shift = shift % digits_length\n\
    \        val digits_length = digits.length\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpozmkmr63.scala:72:11 ---------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpozmkmr63.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdigits_length\e[0m = digits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mdigits_length is already defined as \e[33mvalue\e[0m \e[35mdigits_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpozmkmr63.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mdigits_length\e[0m = digits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mdigits_length is already defined as \e[33mvalue\e[0m \e[35mdigits_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpozmkmr63.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits_length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mshift is already defined as \e[33mvalue\e[0m \e[35mshift\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpozmkmr63.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mdigits_length\e[0m = digits.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigits_length\
    \ is already defined as \e[33mvalue\e[0m \e[35mdigits_length\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e["
  stdout: ''
  timestamp: 1659799759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp96_pc8bj.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp96_pc8bj.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a member of\
    \ Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length)\n        digits.substring(0,\
    \ shift) + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2_v5qoz2.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m   |\e[0m          \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2_v5qoz2.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphdnk3mb3.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphdnk3mb3.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.reverse.take(shift)\n        val shiftDigitString\
    \ = shiftDigits.reverse\n        val shiftDigitStringLength = shiftDigitString.length\n\
    \        val shiftDigitStringLength = shiftDigitString.length\n        val shiftDigitStringLength\
    \ = shiftDigitString.length\n        val shiftDigitStringLength = shiftDigitString.length\n\
    \        val shiftDigitStringLength = shiftDigitString.length\n        val shiftDigitStringLength\
    \ = shiftDigitString.length\n        val shiftDigitStringLength = shiftDigitString.length\n\
    \        val shiftDigitStringLength = shiftDigitString.length\n        val shiftDigitStringLength\
    \ = shiftDigitString.length\n        val shiftDigitStringLength = shiftDigitString.length\n\
    \        val shiftDigitStringLength = shiftDigitString.length\n        val shiftDigitStringLength\
    \ = shiftDigitString.length\n        val shiftDigitStringLength = shiftDigitString.length\n\
    \        val shiftDigitStringLength = shiftDigitString.length\n        val shiftDigitStringLength\
    \ = shiftDigitString.length\n        val shiftDigitStringLength = shiftDigitString.length\n\
    \        val shiftDigitStringLength = shiftDigitString.length\n        val shiftDigitStringLength\
    \ = shiftDigitString.length\n        val shiftDigitStringLength = shiftDigitString.length\n\
    \        val shiftDigitStringLength = shiftDigitString.length\n        val shiftDigitStringLength\
    \ = shiftDigitString.length\n        val shiftDigitStringLength = shiftDigitString.length\n\
    \        val shiftDigitStringLength = shiftDigitString.length\n        val shiftDigitStringLength\
    \ = shiftDigitString.length\n        val shiftDigitStringLength = shiftDigitString.length\n\
    \        val shiftDigitStringLength = shiftDigitString.length\n        val shiftDigitStringLength\
    \ = shiftDigitString.length\n        val shiftDigitStringLength = shiftDigitString.length\n\
    \        val shiftDigitStringLength = shiftDigitString.length\n        val shiftDigitStringLength\
    \ = shiftDigitString.length\n        val shiftDigitStringLength = shiftDigitString.length\n\
    \        val shiftDigitStringLength = shiftDigitString.length\n        val shiftDigitStringLength\
    \ = shiftDigitString.length\n        val shiftDigitStringLength = shiftDigitString.length\n\
    \        val shiftDigitStringLength = shiftDigitString.length\n        val shiftDigitStringLength\
    \ = shiftDigitString.length\n        val shiftDigitStringLength = shiftDigitString.length\n\
    \        val shiftDigitStringLength = shiftDigitString.length\n        val shiftDigitStringLength\
    \ = shiftDigitString.length\n        val shiftDigitStringLength = shiftDigitString.length\n\
    \        val shiftDigitStringLength = shiftDigitString.length\n        val shiftDigitStringLength\
    \ = shiftDigitString.length\n        val shiftDigitStringLength = shiftDigitString.length\n\
    \        val shiftDigitStringLength = shift\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw0qrhivf.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mshiftDigitStringLength\e\
    [0m = shiftDigitString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigitStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mshiftDigitStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw0qrhivf.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mshiftDigitStringLength\e\
    [0m = shiftDigitString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigitStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mshiftDigitStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw0qrhivf.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mshiftDigitStringLength\e\
    [0m = shiftDigitString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigitStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mshiftDigitStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw0qrhivf.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mshiftDigitStringLength\e\
    [0m = shiftDigitString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigitStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mshiftDigitStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw0qrhivf.scala:20:"
  stdout: ''
  timestamp: 1659799759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ \"\" else digits(digits.length - shift))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk91dxnty.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpk91dxnty.scala:14:53 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ \e[31m\"\"\e[0m \e[33melse\e[0m digits(digits.length - shift))\n\e[31m\e[31m\
    \   |\e[0m                                                     ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                   \e[33mvalue\e[0m \e[35mdigits\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.dropRight(shift)\n        val shiftDigit = digits.takeRight(shift)\n\
    \        shiftDigit + shiftDigits\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv96btsmi.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpv96btsmi.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ \"\" else digits(digits.length - shift))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk91dxnty.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpk91dxnty.scala:14:53 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ \e[31m\"\"\e[0m \e[33melse\e[0m digits(digits.length - shift))\n\e[31m\e[31m\
    \   |\e[0m                                                     ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                   \e[33mvalue\e[0m \e[35mdigits\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shift = shift.toString.reverse\n        val result = new StringBuilder\n\
    \        var i = 0\n        while (i < digits.length) {\n            result.append(digits(i)).append(shift(i))\n\
    \            i += 1\n        }\n        return result.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxslk9kbl.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.toString.reverse\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        if (shift > digits.length)\
    \ result.reverse\n        else result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8koymt07.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.substring(shift, digits.length).reverse\n  \
    \      digits.substring(0, shift) + shiftDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekwxsdi7.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length).reverse\n\e[31m\e[31m   |\e[0m  \
    \                                         ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                   Found:    (shift : Long)\n\e[31m   |\e[0m\
    \                                           Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekwxsdi7.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz627gg71.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                                Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz627gg71.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        digits.reverse.mkString\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a member of\
    \ Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    //\
    \ \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x\
    \ : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeong6wa.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeong6wa.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799722
