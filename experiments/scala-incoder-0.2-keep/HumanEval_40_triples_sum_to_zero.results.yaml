language: scala
name: HumanEval_40_triples_sum_to_zero
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3 && set.size == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvrlh0qde.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x))\n        l.foreach(x => set2.add(x))\n   \
    \     l.foreach(x => set3.add(x))\n        l.foreach(x => set4.add(x))\n     \
    \   set.size == 3 && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi2tylr9a.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpi2tylr9a.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpi2tylr9a.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi2tylr9a.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpi2tylr9a.scala:21:23 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mset4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmayuuly6.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val l1 = l.toSet\n\
    \        val l2 = l1.toSet\n        l2.size == 3 && l1.size == 3\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp5l8hjut.scala:28)\n\tat Problem.main(tmpp5l8hjut.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0_v3k0yu.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n       \
    \ set.size == 3 && set.size == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptn2e83jl.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        for (i <- l) {\n            if (set.contains(i))\
    \ {\n                return false\n            }\n            else {\n       \
    \         set += i\n            }\n        }\n        return true\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0gmrdxw6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nxzu8mm.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3 && set.size == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvrlh0qde.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) set.delete(x)\
    \ else set.add(x))\n        set.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7l_b_3zc.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhai5ilc.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3 && set.size == l.length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm3gifskk.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0_v3k0yu.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val map = mutable.HashMap[Long,\
    \ Long]()\n        l.foreach { x =>\n            val y = x + x\n            map.put(x,\
    \ map.getOrElse(y, 0))\n        }\n        map.size == 3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqb44wx_c.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.forall(x => x\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptfo82bfw.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        val set5 = new mutable.HashSet[Long]()\n        val set6 = new mutable.HashSet[Long]()\n\
    \        val set7 = new mutable.HashSet[Long]()\n        val set8 = new mutable.HashSet[Long]()\n\
    \        val set9 = new mutable.HashSet[Long]()\n        val set10 = new mutable.HashSet[Long]()\n\
    \        val set11 = new mutable.HashSet[Long]()\n        val set12 = new mutable.HashSet[Long]()\n\
    \        val set13 = new mutable.HashSet[Long]()\n        val set14 = new mutable.HashSet[Long]()\n\
    \        val set15 = new mutable.HashSet[Long]()\n        val set16 = new mutable.HashSet[Long]()\n\
    \        val set17 = new mutable.HashSet[Long]()\n        val set18 = new mutable.HashSet[Long]()\n\
    \        val set19 = new mutable.HashSet[Long]()\n        val set20 = new mutable.HashSet[Long]()\n\
    \        val set21 = new mutable.HashSet[Long]()\n        val set22 = new mutable.HashSet[Long]()\n\
    \        val set23 = new mutable.HashSet[Long]()\n        val set24 = new mutable.HashSet[Long]()\n\
    \        val set25 = new mutable.HashSet[Long]()\n        val set26 = new mutable.HashSet[Long]()\n\
    \        val set27 = new mutable.HashSet[Long]()\n        val set28 = new mutable.HashSet[Long]()\n\
    \        val set29 = new mutable.HashSet[Long]()\n        val set30 = new mutable.HashSet[Long]()\n\
    \        val set31 = new mutable.HashSet[Long]()\n        val set32 = new mutable.HashSet[Long]()\n\
    \        val set33 = new mutable.HashSet[Long]()\n        val set34 = new mutable.HashSet[Long]()\n\
    \        val set35 = new mutable.HashSet[Long]()\n        val set36 = new mutable.HashSet[Long]()\n\
    \        val set37 = new mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfdkrb8kc.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpfdkrb8kc.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfdkrb8kc.scala:21:23 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mset4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mset5\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       No"
  stdout: ''
  timestamp: 1659800053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            }\n            set += x\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0twizelq.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3 && set.size == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvrlh0qde.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6dmzgdc6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhai5ilc.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdo7m1ij8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n       \
    \ set.size == 3 && set.size == l\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_ao00zj.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdo7m1ij8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6dmzgdc6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val map = mutable.HashMap[Long,\
    \ Long]()\n        l.foreach{x => map.put(x, map.getOrElse(x, 0) + x)}\n     \
    \   map.size == 3 && map.get(-3) == 0 && map.get(-2) == 0 && map.get(-1) == 0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphhl4ujzc.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nxzu8mm.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6dmzgdc6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            }\n            set += x\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0twizelq.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nxzu8mm.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdo7m1ij8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdo7m1ij8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        val list = l.toList\n        list.foreach { x =>\n            if (set.contains(x))\
    \ {\n                return false\n            }\n            set += x\n     \
    \   }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx_lem9q_.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            }\n            set += x\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0twizelq.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val map = mutable.HashMap[Long,\
    \ Long]()\n        l.foreach { x => map.put(x, map.getOrElse(x, 0) + 1) }\n  \
    \      map.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyp7ejnrd.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- l)\n            if(!set.contains(i) && set.size < 3)\n     \
    \           set += i\n        set.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmcjbwqvs.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        val set5 = new mutable.HashSet[Long]()\n        val set6 = new mutable.HashSet[Long]()\n\
    \        val set7 = new mutable.HashSet[Long]()\n        val set8 = new mutable.HashSet[Long]()\n\
    \        val set9 = new mutable.HashSet[Long]()\n        val set10 = new mutable.HashSet[Long]()\n\
    \        val set11 = new mutable.HashSet[Long]()\n        val set12 = new mutable.HashSet[Long]()\n\
    \        val set13 = new mutable.HashSet[Long]()\n        val set14 = new mutable.HashSet[Long]()\n\
    \        val set15 = new mutable.HashSet[Long]()\n        val set16 = new mutable.HashSet[Long]()\n\
    \        val set17 = new mutable.HashSet[Long]()\n        val set18 = new mutable.HashSet[Long]()\n\
    \        val set19 = new mutable.HashSet[Long]()\n        val set20 = new mutable.HashSet[Long]()\n\
    \        val set21 = new mutable.HashSet[Long]()\n        val set22 = new mutable.HashSet[Long]()\n\
    \        val set23 = new mutable.HashSet[Long]()\n        val set24 = new mutable.HashSet[Long]()\n\
    \        val set25 = new mutable.HashSet[Long]()\n        val set26 = new mutable.HashSet[Long]()\n\
    \        val set27 = new mutable.HashSet[Long]()\n        val set28 = new mutable.HashSet[Long]()\n\
    \        val set29 = new mutable.HashSet[Long]()\n        val set30 = new mutable.HashSet[Long]()\n\
    \        val set31 = new mutable.HashSet[Long]()\n        val set32 = new mutable.HashSet[Long]()\n\
    \        val set33 = new mutable.HashSet[Long]()\n        val set34 = new mutable.HashSet[Long]()\n\
    \        val set35 = new mutable.HashSet[Long]()\n        val set36 = new mutable.HashSet[Long]()\n\
    \        val set37 = new mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfdkrb8kc.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpfdkrb8kc.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfdkrb8kc.scala:21:23 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mset4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mset5\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       No"
  stdout: ''
  timestamp: 1659800053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3 && set.size == l.length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm3gifskk.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            } else {\n                set += x\n            }\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm_ebcv50.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      l.foreach(x => set.add(x))\n        l.foreach(x => set2.add(x))\n     \
    \   set.size == 3 && set2.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5qzep6dy.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5qzep6dy.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mset2\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val map = new\
    \ mutable.HashMap[Long, Boolean]()\n        l.foreach { x =>\n            val\
    \ y = x - l(0)\n            if (map.contains(y)) {\n                map.update(y,\
    \ false)\n            } else {\n                map.update(y, true)\n        \
    \    }\n        }\n        map.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv4yy34p2.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x))\n        set.size\
    \ == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmduahglr.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        for (i <- l) {\n            if (set.contains(i))\
    \ {\n                return false\n            }\n            set += i\n     \
    \   }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgfgm54br.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            }\n            set += x\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnyprgv0a.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nxzu8mm.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhai5ilc.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdo7m1ij8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        for(i <- l)\n            set.add(i)\n     \
    \   set.size == 3 && set.size == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wty39uy.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.Set[Long]()\n\
    \        l.foreach { x => set += x }\n        set.size == 3 && set.size == l.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvent6vr5.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val map = mutable.HashMap[Long,\
    \ Int]()\n        l.foreach { x =>\n            val count = map.getOrElse(x, 0)\n\
    \            map.put(x + count, count + 1)\n        }\n        map.size == 3\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9zll828c.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      val set3 = new mutable.HashSet[Long]()\n        l.foreach { x =>\n    \
    \        if (set.contains(x) && set2.contains(x) && set3.contains(x))\n      \
    \          return false\n            set.add(x)\n            set2.add(x)\n   \
    \         set3.add(x)\n        }\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppft0te_8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppft0te_8.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mset2\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmppft0te_8.scala:20:23 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3 && set.size == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvrlh0qde.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        for (i <- l) {\n            if (set.contains(i))\
    \ {\n                return false\n            }\n            set += i\n     \
    \   }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgfgm54br.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3 && set.size == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvrlh0qde.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x))\n        set.size\
    \ == 3 && set.size == l.length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx2rm4q8v.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      val set3 = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.add(x))\
    \ set2.add(x) else set3.add(x))\n        set2.size == 3 && set3.size == 3\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp61x0snd_.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp61x0snd_.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mset2\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp61x0snd_.scala:20:23 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhai5ilc.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) false else\
    \ set.add(x))\n        set.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfeijp6ot.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      val set3 = new mutable.HashSet[Long]()\n        l.foreach { x =>\n    \
    \        if (set.contains(x)) {\n                set2.add(x)\n            } else\
    \ {\n                set.add(0)\n                set2.add(0)\n            }\n\
    \        }\n        if (set2.size == 3) {\n            if (set3.size == 3) {\n\
    \                return true\n            } else {\n                return false\n\
    \            }\n        } else {\n            return false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprve6gckq.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprve6gckq.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mset2\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprve6gckq.scala:20:23 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) set.delete(x)\
    \ else set.add(x))\n        set.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7l_b_3zc.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val sum = 0L\n        l.foreach { x => sum\
    \ += x }\n        l.foreach { x => if (set.contains(sum - x)) set.add(sum - x)\
    \ }\n        set.size == 3\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps9ve2bol.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps9ve2bol.scala:20:29\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        l.foreach { \e[36mx\e\
    [0m => sum += x }\n\e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                 value += is not a member of Long - did you mean\
    \ sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659800060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6dmzgdc6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmayuuly6.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            }\n            set += x\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0twizelq.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6dmzgdc6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmayuuly6.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        for (i <- l) {\n            if (set.contains(i))\
    \ {\n                return false\n            }\n            set += i\n     \
    \   }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgfgm54br.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6dmzgdc6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.Set[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpejgn7jbq.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhai5ilc.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) set.delete(x)\
    \ else set.add(x))\n        set.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7l_b_3zc.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdo7m1ij8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.forall(x => x\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptfo82bfw.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        val triples = l.filter(_ > 0)\n        triples.foreach { x =>\n     \
    \       val y = x + x\n            if (set.contains(y)) {\n                return\
    \ false\n            }\n            set += y\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5iqnpe_z.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        val triples = l.filter(_ > 0)\n        triples.foreach(x => set.add(x\
    \ + x))\n        set.size == 3\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvzrvv10t.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3 && set.size == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvrlh0qde.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val map = mutable.HashMap[Long,\
    \ Long]()\n        l.foreach { x => map.put(x, map.getOrElse(x, 0) + 1) }\n  \
    \      map.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyp7ejnrd.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nxzu8mm.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6dmzgdc6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nxzu8mm.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        val list = l.toList\n        list.foreach { x =>\n            if (set.contains(x))\
    \ {\n                return false\n            }\n            set += x\n     \
    \   }\n        return true\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplprrxtr5.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        val list = l.toList\n        for (i <- 0 until list.size) {\n       \
    \     set.add(list(i))\n        }\n        set.size == 3 && set.size == list.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyytjfjts.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdo7m1ij8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdo7m1ij8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhai5ilc.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x))\n        set.size\
    \ == 3 && set.size == l.length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx2rm4q8v.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhai5ilc.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) set.delete(x)\
    \ else set.add(x))\n        set.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7l_b_3zc.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmayuuly6.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nxzu8mm.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhai5ilc.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nxzu8mm.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nxzu8mm.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdo7m1ij8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        val triples = l.map(x => x + (x % 3)).distinct\n        triples.foreach\
    \ { x =>\n            if (set.contains(x)) {\n                return false\n \
    \           }\n            set += x\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_31s6fxi.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdo7m1ij8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val map = mutable.HashMap[Long,\
    \ Long]()\n        l.foreach(x => map.put(x, map.getOrElse(x, 0) + x))\n     \
    \   map.size == 3 && map.values.toList.distinct.size == 3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvruqwqer.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) set.delete(x)\
    \ else set.add(x))\n        set.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7l_b_3zc.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nxzu8mm.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3 && set.size == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvrlh0qde.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        val set5 = new mutable.HashSet[Long]()\n        val set6 = new mutable.HashSet[Long]()\n\
    \        val set7 = new mutable.HashSet[Long]()\n        val set8 = new mutable.HashSet[Long]()\n\
    \        val set9 = new mutable.HashSet[Long]()\n        val set10 = new mutable.HashSet[Long]()\n\
    \        val set11 = new mutable.HashSet[Long]()\n        val set12 = new mutable.HashSet[Long]()\n\
    \        val set13 = new mutable.HashSet[Long]()\n        val set14 = new mutable.HashSet[Long]()\n\
    \        val set15 = new mutable.HashSet[Long]()\n        val set16 = new mutable.HashSet[Long]()\n\
    \        val set17 = new mutable.HashSet[Long]()\n        val set18 = new mutable.HashSet[Long]()\n\
    \        val set19 = new mutable.HashSet[Long]()\n        val set20 = new mutable.HashSet[Long]()\n\
    \        val set21 = new mutable.HashSet[Long]()\n        val set22 = new mutable.HashSet[Long]()\n\
    \        val set23 = new mutable.HashSet[Long]()\n        val set24 = new mutable.HashSet[Long]()\n\
    \        val set25 = new mutable.HashSet[Long]()\n        val set26 = new mutable.HashSet[Long]()\n\
    \        val set27 = new mutable.HashSet[Long]()\n        val set28 = new mutable.HashSet[Long]()\n\
    \        val set29 = new mutable.HashSet[Long]()\n        val set30 = new mutable.HashSet[Long]()\n\
    \        val set31 = new mutable.HashSet[Long]()\n        val set32 = new mutable.HashSet[Long]()\n\
    \        val set33 = new mutable.HashSet[Long]()\n        val set34 = new mutable.HashSet[Long]()\n\
    \        val set35 = new mutable.HashSet[Long]()\n        val set36 = new mutable.HashSet[Long]()\n\
    \        val set37 = new mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfdkrb8kc.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpfdkrb8kc.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfdkrb8kc.scala:21:23 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mset4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mset5\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       No"
  stdout: ''
  timestamp: 1659800053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdo7m1ij8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val map = mutable.HashMap[Long,\
    \ Int]()\n        l.foreach { x =>\n            val count = map.getOrElse(x, 0)\n\
    \            map += x -> count + 1\n        }\n        map.size == 3\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc09nk9ue.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nxzu8mm.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdo7m1ij8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val l2 = l.toSet\n\
    \        if (l2.size == 3) {\n            l2.forall(x => x == 0)\n        } else\
    \ {\n            false\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppbp3f09n.scala:28)\n\tat Problem.main(tmppbp3f09n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) false else\
    \ set.add(x))\n        set.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfeijp6ot.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3 && set.size == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvrlh0qde.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        for (i <- l)\n            if (set.contains(i))\n\
    \                false\n            else\n                set.add(i)\n       \
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpot5mj7b6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val map = mutable.HashMap[Long,\
    \ Int]()\n        l.foreach(x => map.put(x, map.getOrElse(x, 0) + 1))\n      \
    \  map.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqlh5v4ji.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nxzu8mm.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) false else\
    \ set.add(x))\n        set.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfeijp6ot.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) false else\
    \ set.add(x))\n        set.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfeijp6ot.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            }\n            set += x\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0twizelq.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3 && set.size == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvrlh0qde.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toInt))\n        set.size == 3 && set.forall(x\
    \ => x == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm_5rwvea.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3 && set.size == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvrlh0qde.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdo7m1ij8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdo7m1ij8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        for(i <- l if !set.add(i)) {\n            val\
    \ sum = (l(0) + l(1) + l(2))\n            if(sum != 0)\n                return\
    \ false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1kva7_4m.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        val set5 = new mutable.HashSet[Long]()\n        val set6 = new mutable.HashSet[Long]()\n\
    \        val set7 = new mutable.HashSet[Long]()\n        val set8 = new mutable.HashSet[Long]()\n\
    \        val set9 = new mutable.HashSet[Long]()\n        val set10 = new mutable.HashSet[Long]()\n\
    \        val set11 = new mutable.HashSet[Long]()\n        val set12 = new mutable.HashSet[Long]()\n\
    \        val set13 = new mutable.HashSet[Long]()\n        val set14 = new mutable.HashSet[Long]()\n\
    \        val set15 = new mutable.HashSet[Long]()\n        val set16 = new mutable.HashSet[Long]()\n\
    \        val set17 = new mutable.HashSet[Long]()\n        val set18 = new mutable.HashSet[Long]()\n\
    \        val set19 = new mutable.HashSet[Long]()\n        val set20 = new mutable.HashSet[Long]()\n\
    \        val set21 = new mutable.HashSet[Long]()\n        val set22 = new mutable.HashSet[Long]()\n\
    \        val set23 = new mutable.HashSet[Long]()\n        val set24 = new mutable.HashSet[Long]()\n\
    \        val set25 = new mutable.HashSet[Long]()\n        val set26 = new mutable.HashSet[Long]()\n\
    \        val set27 = new mutable.HashSet[Long]()\n        val set28 = new mutable.HashSet[Long]()\n\
    \        val set29 = new mutable.HashSet[Long]()\n        val set30 = new mutable.HashSet[Long]()\n\
    \        val set31 = new mutable.HashSet[Long]()\n        val set32 = new mutable.HashSet[Long]()\n\
    \        val set33 = new mutable.HashSet[Long]()\n        val set34 = new mutable.HashSet[Long]()\n\
    \        val set35 = new mutable.HashSet[Long]()\n        val set36 = new mutable.HashSet[Long]()\n\
    \        val set37 = new mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfdkrb8kc.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpfdkrb8kc.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfdkrb8kc.scala:21:23 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mset4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mset5\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       No"
  stdout: ''
  timestamp: 1659800053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      val set3 = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.add(x))\
    \ set2.add(x) else set3.add(x))\n        set2.size == 3 && set3.size == 3\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp61x0snd_.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp61x0snd_.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mset2\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp61x0snd_.scala:20:23 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        val list = l.toList\n        list.foreach { x =>\n            if (set.contains(x))\
    \ {\n                return false\n            }\n            set += x\n     \
    \   }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx_lem9q_.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        val triples = l.filter(_ % 3 == 0)\n        triples.foreach(x => set.add(x\
    \ + x))\n        set.size == 3\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4t8q7k19.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nxzu8mm.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x))\n        set.size\
    \ == 3 && set.size == l.length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx2rm4q8v.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0_v3k0yu.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nxzu8mm.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.Set[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3 && set.size\
    \ == l.length\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp73musmds.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        for(i <- l) {\n            if(set.contains(i))\
    \ {\n                return false\n            }\n            else {\n       \
    \         set += i\n            }\n        }\n        return true\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm7v0fd44.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        val set5 = new mutable.HashSet[Long]()\n        val set6 = new mutable.HashSet[Long]()\n\
    \        val set7 = new mutable.HashSet[Long]()\n        val set8 = new mutable.HashSet[Long]()\n\
    \        val set9 = new mutable.HashSet[Long]()\n        val set10 = new mutable.HashSet[Long]()\n\
    \        val set11 = new mutable.HashSet[Long]()\n        val set12 = new mutable.HashSet[Long]()\n\
    \        val set13 = new mutable.HashSet[Long]()\n        val set14 = new mutable.HashSet[Long]()\n\
    \        val set15 = new mutable.HashSet[Long]()\n        val set16 = new mutable.HashSet[Long]()\n\
    \        val set17 = new mutable.HashSet[Long]()\n        val set18 = new mutable.HashSet[Long]()\n\
    \        val set19 = new mutable.HashSet[Long]()\n        val set20 = new mutable.HashSet[Long]()\n\
    \        val set21 = new mutable.HashSet[Long]()\n        val set22 = new mutable.HashSet[Long]()\n\
    \        val set23 = new mutable.HashSet[Long]()\n        val set24 = new mutable.HashSet[Long]()\n\
    \        val set25 = new mutable.HashSet[Long]()\n        val set26 = new mutable.HashSet[Long]()\n\
    \        val set27 = new mutable.HashSet[Long]()\n        val set28 = new mutable.HashSet[Long]()\n\
    \        val set29 = new mutable.HashSet[Long]()\n        val set30 = new mutable.HashSet[Long]()\n\
    \        val set31 = new mutable.HashSet[Long]()\n        val set32 = new mutable.HashSet[Long]()\n\
    \        val set33 = new mutable.HashSet[Long]()\n        val set34 = new mutable.HashSet[Long]()\n\
    \        val set35 = new mutable.HashSet[Long]()\n        val set36 = new mutable.HashSet[Long]()\n\
    \        val set37 = new mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfdkrb8kc.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpfdkrb8kc.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfdkrb8kc.scala:21:23 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mset4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mset5\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       No"
  stdout: ''
  timestamp: 1659800053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhai5ilc.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        for(i <- l) set.add(i)\n        set.size ==\
    \ 3 && set.size == l.length\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzcwnj71j.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nxzu8mm.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        for (i <- l) {\n            if (set.contains(i))\
    \ {\n                return false\n            }\n            set += i\n     \
    \   }\n        return true\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvwol62zl.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1bpd4xzj.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0_v3k0yu.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val map = mutable.HashMap[Long,\
    \ Int]()\n        l.foreach(x => map.update(x, map.getOrElse(x, 0) + 1))\n   \
    \     map.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf8zxgysp.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nxzu8mm.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val triples = l.filter(_ % 3 == 0)\n      \
    \  triples.foreach(x => set.add(x + 0))\n        set.size == 3\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcdfn22o1.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        for(i <- l) {\n            if(!set.contains(i))\
    \ {\n                set.add(i)\n                if(set.size == 3) {\n       \
    \             return true\n                }\n            }\n        }\n     \
    \   return false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbhw5eik.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      val set3 = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x))\n\
    \        l.foreach(x => set2.add(x))\n        l.foreach(x => set3.add(x))\n  \
    \      set.size == 3 && set2.size == 3 && set3.size == 3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5rt4m2h3.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5rt4m2h3.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mset2\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp5rt4m2h3.scala:20:23 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdo7m1ij8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3 && set.size == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvrlh0qde.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        for(i <- 0 until l.length) {\n            val\
    \ sum = l(i) + l(i+1) + l(i+2)\n            if(sum == 0) set.add(sum)\n      \
    \  }\n        set.size == 3\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmi24dy19.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3 && set.size == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvrlh0qde.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      val set3 = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.add(x))\
    \ set2.add(x) else set3.add(x))\n        set2.size == 3 && set3.size == 3\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp61x0snd_.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp61x0snd_.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mset2\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp61x0snd_.scala:20:23 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        val triples = l.filter(_ > 0)\n        triples.foreach { x =>\n     \
    \       if (set.contains(x + x)) {\n                false\n            } else\
    \ {\n                set.add(x + x)\n            }\n        }\n        set.size\
    \ == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5mz6nz7j.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplfg56rkw.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3 && set.size == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvrlh0qde.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        val set5 = new mutable.HashSet[Long]()\n        val set6 = new mutable.HashSet[Long]()\n\
    \        val set7 = new mutable.HashSet[Long]()\n        val set8 = new mutable.HashSet[Long]()\n\
    \        val set9 = new mutable.HashSet[Long]()\n        val set10 = new mutable.HashSet[Long]()\n\
    \        val set11 = new mutable.HashSet[Long]()\n        val set12 = new mutable.HashSet[Long]()\n\
    \        val set13 = new mutable.HashSet[Long]()\n        val set14 = new mutable.HashSet[Long]()\n\
    \        val set15 = new mutable.HashSet[Long]()\n        val set16 = new mutable.HashSet[Long]()\n\
    \        val set17 = new mutable.HashSet[Long]()\n        val set18 = new mutable.HashSet[Long]()\n\
    \        val set19 = new mutable.HashSet[Long]()\n        val set20 = new mutable.HashSet[Long]()\n\
    \        val set21 = new mutable.HashSet[Long]()\n        val set22 = new mutable.HashSet[Long]()\n\
    \        val set23 = new mutable.HashSet[Long]()\n        val set24 = new mutable.HashSet[Long]()\n\
    \        val set25 = new mutable.HashSet[Long]()\n        val set26 = new mutable.HashSet[Long]()\n\
    \        val set27 = new mutable.HashSet[Long]()\n        val set28 = new mutable.HashSet[Long]()\n\
    \        val set29 = new mutable.HashSet[Long]()\n        val set30 = new mutable.HashSet[Long]()\n\
    \        val set31 = new mutable.HashSet[Long]()\n        val set32 = new mutable.HashSet[Long]()\n\
    \        val set33 = new mutable.HashSet[Long]()\n        val set34 = new mutable.HashSet[Long]()\n\
    \        val set35 = new mutable.HashSet[Long]()\n        val set36 = new mutable.HashSet[Long]()\n\
    \        val set37 = new mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfdkrb8kc.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpfdkrb8kc.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfdkrb8kc.scala:21:23 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mset4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mset5\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       No"
  stdout: ''
  timestamp: 1659800053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        val set5 = new mutable.HashSet[Long]()\n        val set6 = new mutable.HashSet[Long]()\n\
    \        val set7 = new mutable.HashSet[Long]()\n        val set8 = new mutable.HashSet[Long]()\n\
    \        val set9 = new mutable.HashSet[Long]()\n        val set10 = new mutable.HashSet[Long]()\n\
    \        val set11 = new mutable.HashSet[Long]()\n        val set12 = new mutable.HashSet[Long]()\n\
    \        val set13 = new mutable.HashSet[Long]()\n        val set14 = new mutable.HashSet[Long]()\n\
    \        val set15 = new mutable.HashSet[Long]()\n        val set16 = new mutable.HashSet[Long]()\n\
    \        val set17 = new mutable.HashSet[Long]()\n        val set18 = new mutable.HashSet[Long]()\n\
    \        val set19 = new mutable.HashSet[Long]()\n        val set20 = new mutable.HashSet[Long]()\n\
    \        val set21 = new mutable.HashSet[Long]()\n        val set22 = new mutable.HashSet[Long]()\n\
    \        val set23 = new mutable.HashSet[Long]()\n        val set24 = new mutable.HashSet[Long]()\n\
    \        val set25 = new mutable.HashSet[Long]()\n        val set26 = new mutable.HashSet[Long]()\n\
    \        val set27 = new mutable.HashSet[Long]()\n        val set28 = new mutable.HashSet[Long]()\n\
    \        val set29 = new mutable.HashSet[Long]()\n        val set30 = new mutable.HashSet[Long]()\n\
    \        val set31 = new mutable.HashSet[Long]()\n        val set32 = new mutable.HashSet[Long]()\n\
    \        val set33 = new mutable.HashSet[Long]()\n        val set34 = new mutable.HashSet[Long]()\n\
    \        val set35 = new mutable.HashSet[Long]()\n        val set36 = new mutable.HashSet[Long]()\n\
    \        val set37 = new mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfdkrb8kc.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpfdkrb8kc.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfdkrb8kc.scala:21:23 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mset4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mset5\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       No"
  stdout: ''
  timestamp: 1659800053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            }\n            set += x\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0twizelq.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3 && set.size == l.length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm3gifskk.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmayuuly6.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6dmzgdc6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) false else\
    \ set.add(x))\n        set.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfeijp6ot.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhai5ilc.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        for(i <- l)\n            set += i\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9cqerozy.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.Set[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            }\n            else {\n                set += x\n\
    \            }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkogl_abj.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3 && set.size == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvrlh0qde.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        val set5 = new mutable.HashSet[Long]()\n        val set6 = new mutable.HashSet[Long]()\n\
    \        val set7 = new mutable.HashSet[Long]()\n        val set8 = new mutable.HashSet[Long]()\n\
    \        val set9 = new mutable.HashSet[Long]()\n        val set10 = new mutable.HashSet[Long]()\n\
    \        val set11 = new mutable.HashSet[Long]()\n        val set12 = new mutable.HashSet[Long]()\n\
    \        val set13 = new mutable.HashSet[Long]()\n        val set14 = new mutable.HashSet[Long]()\n\
    \        val set15 = new mutable.HashSet[Long]()\n        val set16 = new mutable.HashSet[Long]()\n\
    \        val set17 = new mutable.HashSet[Long]()\n        val set18 = new mutable.HashSet[Long]()\n\
    \        val set19 = new mutable.HashSet[Long]()\n        val set20 = new mutable.HashSet[Long]()\n\
    \        val set21 = new mutable.HashSet[Long]()\n        val set22 = new mutable.HashSet[Long]()\n\
    \        val set23 = new mutable.HashSet[Long]()\n        val set24 = new mutable.HashSet[Long]()\n\
    \        val set25 = new mutable.HashSet[Long]()\n        val set26 = new mutable.HashSet[Long]()\n\
    \        val set27 = new mutable.HashSet[Long]()\n        val set28 = new mutable.HashSet[Long]()\n\
    \        val set29 = new mutable.HashSet[Long]()\n        val set30 = new mutable.HashSet[Long]()\n\
    \        val set31 = new mutable.HashSet[Long]()\n        val set32 = new mutable.HashSet[Long]()\n\
    \        val set33 = new mutable.HashSet[Long]()\n        val set34 = new mutable.HashSet[Long]()\n\
    \        val set35 = new mutable.HashSet[Long]()\n        val set36 = new mutable.HashSet[Long]()\n\
    \        val set37 = new mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfdkrb8kc.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpfdkrb8kc.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfdkrb8kc.scala:21:23 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mset4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mset5\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       No"
  stdout: ''
  timestamp: 1659800053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhai5ilc.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val map = mutable.HashMap[Long,\
    \ Long]()\n        l.foreach { x =>\n            val y = x + x\n            map.put(y,\
    \ map.getOrElse(y, 0L) + 1)\n        }\n        map.size == 3\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw_mgk5bh.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        for(i <- l)\n            if(!set.contains(i))\n\
    \                set += i\n        set.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg0973c_3.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6dmzgdc6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdo7m1ij8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhai5ilc.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.forall(x => x\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptfo82bfw.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        for (i <- l) {\n            if (set.contains(i))\
    \ {\n                return false\n            }\n            set += i\n     \
    \   }\n        return true\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvwol62zl.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhai5ilc.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            }\n            set += x\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0twizelq.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val map = new\
    \ mutable.HashMap[Long, Long]()\n        l.foreach { x =>\n            val y =\
    \ x - l.head\n            if (map.contains(y)) {\n                map.update(y,\
    \ map.get(y) + 1)\n            } else {\n                map.update(y, 1)\n  \
    \          }\n        }\n        map.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgur93286.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhai5ilc.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmayuuly6.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhai5ilc.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        for(i <- l)\n            set += i\n        set.size == 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaleroziu.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdo7m1ij8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val triples = l.filter(_ > 0).filter(_ < 0)\n\
    \        triples.foreach(x => set.add(x + x))\n        set.size == 3\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmbrexxv.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val map = mutable.HashMap[Long,\
    \ Int]()\n        val list = l.toList\n        list.foreach { x =>\n         \
    \   val key = x.toLong\n            val count = map.getOrElse(key, 0)\n      \
    \      map += key -> count + 1\n        }\n        map.size == 3\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgi6pjyck.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        val set5 = new mutable.HashSet[Long]()\n        val set6 = new mutable.HashSet[Long]()\n\
    \        val set7 = new mutable.HashSet[Long]()\n        val set8 = new mutable.HashSet[Long]()\n\
    \        val set9 = new mutable.HashSet[Long]()\n        val set10 = new mutable.HashSet[Long]()\n\
    \        val set11 = new mutable.HashSet[Long]()\n        val set12 = new mutable.HashSet[Long]()\n\
    \        val set13 = new mutable.HashSet[Long]()\n        val set14 = new mutable.HashSet[Long]()\n\
    \        val set15 = new mutable.HashSet[Long]()\n        val set16 = new mutable.HashSet[Long]()\n\
    \        val set17 = new mutable.HashSet[Long]()\n        val set18 = new mutable.HashSet[Long]()\n\
    \        val set19 = new mutable.HashSet[Long]()\n        val set20 = new mutable.HashSet[Long]()\n\
    \        val set21 = new mutable.HashSet[Long]()\n        val set22 = new mutable.HashSet[Long]()\n\
    \        val set23 = new mutable.HashSet[Long]()\n        val set24 = new mutable.HashSet[Long]()\n\
    \        val set25 = new mutable.HashSet[Long]()\n        val set26 = new mutable.HashSet[Long]()\n\
    \        val set27 = new mutable.HashSet[Long]()\n        val set28 = new mutable.HashSet[Long]()\n\
    \        val set29 = new mutable.HashSet[Long]()\n        val set30 = new mutable.HashSet[Long]()\n\
    \        val set31 = new mutable.HashSet[Long]()\n        val set32 = new mutable.HashSet[Long]()\n\
    \        val set33 = new mutable.HashSet[Long]()\n        val set34 = new mutable.HashSet[Long]()\n\
    \        val set35 = new mutable.HashSet[Long]()\n        val set36 = new mutable.HashSet[Long]()\n\
    \        val set37 = new mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfdkrb8kc.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpfdkrb8kc.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfdkrb8kc.scala:21:23 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mset4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mset5\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       No"
  stdout: ''
  timestamp: 1659800053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        val set5 = new mutable.HashSet[Long]()\n        val set6 = new mutable.HashSet[Long]()\n\
    \        val set7 = new mutable.HashSet[Long]()\n        val set8 = new mutable.HashSet[Long]()\n\
    \        val set9 = new mutable.HashSet[Long]()\n        val set10 = new mutable.HashSet[Long]()\n\
    \        val set11 = new mutable.HashSet[Long]()\n        val set12 = new mutable.HashSet[Long]()\n\
    \        val set13 = new mutable.HashSet[Long]()\n        val set14 = new mutable.HashSet[Long]()\n\
    \        val set15 = new mutable.HashSet[Long]()\n        val set16 = new mutable.HashSet[Long]()\n\
    \        val set17 = new mutable.HashSet[Long]()\n        val set18 = new mutable.HashSet[Long]()\n\
    \        val set19 = new mutable.HashSet[Long]()\n        val set20 = new mutable.HashSet[Long]()\n\
    \        val set21 = new mutable.HashSet[Long]()\n        val set22 = new mutable.HashSet[Long]()\n\
    \        val set23 = new mutable.HashSet[Long]()\n        val set24 = new mutable.HashSet[Long]()\n\
    \        val set25 = new mutable.HashSet[Long]()\n        val set26 = new mutable.HashSet[Long]()\n\
    \        val set27 = new mutable.HashSet[Long]()\n        val set28 = new mutable.HashSet[Long]()\n\
    \        val set29 = new mutable.HashSet[Long]()\n        val set30 = new mutable.HashSet[Long]()\n\
    \        val set31 = new mutable.HashSet[Long]()\n        val set32 = new mutable.HashSet[Long]()\n\
    \        val set33 = new mutable.HashSet[Long]()\n        val set34 = new mutable.HashSet[Long]()\n\
    \        val set35 = new mutable.HashSet[Long]()\n        val set36 = new mutable.HashSet[Long]()\n\
    \        val set37 = new mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfdkrb8kc.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpfdkrb8kc.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfdkrb8kc.scala:21:23 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mset4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mset5\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       No"
  stdout: ''
  timestamp: 1659800053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        for (i <- l) {\n            if (set.contains(i))\
    \ {\n                return false\n            }\n            set += i\n     \
    \   }\n        return true\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvwol62zl.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val map = mutable.HashMap[Long,\
    \ Long]()\n        l.foreach { x =>\n            val y = x + x\n            if\
    \ (map.contains(y)) {\n                map.update(y, map.get(y) + 1)\n       \
    \     } else {\n                map.update(y, 1)\n            }\n        }\n \
    \       map.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptmvd26py.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        for(i <- l)\n            if(!set.contains(i)\
    \ && set.size < 3)\n                set += i\n        set.size == 3\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1wrzytw3.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.forall(x => x\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptfo82bfw.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        val triples = l.filter(_ % 3 == 0)\n        triples.foreach(x => set.add(x\
    \ + 0))\n        set.size == 3\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzj855yhl.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3 && set.size == l.length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm3gifskk.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) false else\
    \ set.add(x))\n        set.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfeijp6ot.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      l.foreach { x =>\n            if (set.contains(x) && set2.contains(x))\
    \ {\n                return false\n            }\n            set += x\n     \
    \       set2 += x\n        }\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmze1atgr.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmze1atgr.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mset2\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n       \
    \ set.size == 3 && set.size == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptn2e83jl.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nxzu8mm.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            }\n            set += x\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0twizelq.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        val set5 = new mutable.HashSet[Long]()\n        val set6 = new mutable.HashSet[Long]()\n\
    \        val set7 = new mutable.HashSet[Long]()\n        val set8 = new mutable.HashSet[Long]()\n\
    \        val set9 = new mutable.HashSet[Long]()\n        val set10 = new mutable.HashSet[Long]()\n\
    \        val set11 = new mutable.HashSet[Long]()\n        val set12 = new mutable.HashSet[Long]()\n\
    \        val set13 = new mutable.HashSet[Long]()\n        val set14 = new mutable.HashSet[Long]()\n\
    \        val set15 = new mutable.HashSet[Long]()\n        val set16 = new mutable.HashSet[Long]()\n\
    \        val set17 = new mutable.HashSet[Long]()\n        val set18 = new mutable.HashSet[Long]()\n\
    \        val set19 = new mutable.HashSet[Long]()\n        val set20 = new mutable.HashSet[Long]()\n\
    \        val set21 = new mutable.HashSet[Long]()\n        val set22 = new mutable.HashSet[Long]()\n\
    \        val set23 = new mutable.HashSet[Long]()\n        val set24 = new mutable.HashSet[Long]()\n\
    \        val set25 = new mutable.HashSet[Long]()\n        val set26 = new mutable.HashSet[Long]()\n\
    \        val set27 = new mutable.HashSet[Long]()\n        val set28 = new mutable.HashSet[Long]()\n\
    \        val set29 = new mutable.HashSet[Long]()\n        val set30 = new mutable.HashSet[Long]()\n\
    \        val set31 = new mutable.HashSet[Long]()\n        val set32 = new mutable.HashSet[Long]()\n\
    \        val set33 = new mutable.HashSet[Long]()\n        val set34 = new mutable.HashSet[Long]()\n\
    \        val set35 = new mutable.HashSet[Long]()\n        val set36 = new mutable.HashSet[Long]()\n\
    \        val set37 = new mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfdkrb8kc.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpfdkrb8kc.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mset3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfdkrb8kc.scala:21:23 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mset4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdkrb8kc.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mset5\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       No"
  stdout: ''
  timestamp: 1659800053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3 && set.size == l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvrlh0qde.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n       \
    \ set.size == 3\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6dmzgdc6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        val list = l.toList\n        for (i <- 0 until list.size) {\n       \
    \     if (set.contains(list(i) + list(i + 1)))\n                return false\n\
    \            set += list(i)\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp800m0gq5.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.forall(x => x\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptfo82bfw.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmayuuly6.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        val list = l.toList\n        list.foreach { x =>\n            set.add(x\
    \ + x)\n        }\n        set.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvtfa5svv.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            }\n            set += x\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0twizelq.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800051
