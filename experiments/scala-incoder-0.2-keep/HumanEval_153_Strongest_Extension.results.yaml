language: scala
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => x.toUpperCase).zipWithIndex.toMap\n        val extensions_count = extensions.map(x\
    \ => x.toUpperCase).distinct.length\n        val extensions_count_map = extensions_count.zipWithIndex.toMap\n\
    \        val extensions_count_sum = extensions_count.foldLeft(0)(_ + _)\n    \
    \    val extensions_count_sum_map = extensions_count_sum.zipWithIndex.toMap\n\
    \        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2 >\
    \ 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_sum_map.filter(_._2\
    \ > 1).map(_._1)\n        val extensions_count_sum_map = extensions_count_\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbsw011sm.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sum_map\e\
    [0m = extensions_count_sum_map.filter(_._2 > \e[31m1\e[0m).map(_._1)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sum_map is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sum_map\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbsw011sm.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sum_map\e\
    [0m = extensions_count_sum_map.filter(_._2 > \e[31m1\e[0m).map(_._1)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sum_map is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sum_map\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbsw011sm.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sum_map\e\
    [0m = extensions_count_sum_map.filter(_._2 > \e[31m1\e[0m).map(_._1)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sum_map is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sum_map\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbsw011sm.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sum_map\e\
    [0m = extensions_count_sum_map.filter(_._2 > \e[31m1\e[0m).map(_._1)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    if (extensions_count > 1) {\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extensions_sorted = extensions.sortWith((a,\
    \ b\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphkoy7ng4.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphkoy7ng4.scala:63:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphkoy7ng4.scala:26:16 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m            \e[33mval\e[0m \e[36mextensions_sorted\e[0m = extensions.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => strength - a.length - b.length)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphkoy7ng4.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mextensions_sorted\e\
    [0m = extensions.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => strength - a.length\
    \ - b.length)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphkoy7ng4.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mextensions_sorted\e\
    [0m = extensions.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => strength - a.length\
    \ - b.length)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must"
  stdout: ''
  timestamp: 1659799774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((acc,\
    \ x) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n        val strongest_extension\
    \ = extensions_map.maxBy(_._2)._1\n        s\"$class_name.$strongest_extension\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1undjno1.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1undjno1.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1undjno1.scala:22:86\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = extensions_map.foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m) =>\
    \ acc + (class_name_map(x._1) - class_name_map(x._2)))\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \             Found:    String\n\e[31m   |\e[0m                              \
    \                         Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1undjno1.scala:22:109 -------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.foldLeft(\e\
    [31m0\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                   ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                       Found:    String\n\e[31m\
    \   |\e[0m                                                       Required: Nothing\n\
    \e[31m   |\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659799773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        // Your code here\n        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.values.map(x => (x.toUpperCase, x.toLowerCase)).map(x => (x._1\
    \ - x._2)).map(x => x._1).foldLeft(0)(_ + x._2)\n        val strongest_extension\
    \ = extensions_map.values.map(x => (x.toUpperCase, x.toLowerCase)).map(x => (x._1\
    \ - x._2)).map(x => x._1).foldLeft(0)(_ + x._2)\n        val class_name_with_strongest_extension\
    \ = class_name_map.values.map(x => (x.toUpperCase, x.toLowerCase)).map(x => (x._1\
    \ - x._2)).map(x => x._1).foldLeft(0)(_ + x._2)\n        val class_name_with_strongest_extension_with_same_strength\
    \ = class_name_with_strongest_extension.filter(x => x == strongest_extension)\n\
    \        val class_name_with_strongest_extension_with_same_strength_with_same_extension\
    \ = class_name_with_strongest_extension_with_same_strength.filter(x => x == class_name_with_strongest_extension_with_same_strength.head)\n\
    \        val class_name_with_strongest_extension_with_same_strength_with_same_extension_with_same_extension\
    \ = class_name_with_strongest_extension_with_same_strength_with_same_extension.filter(x\
    \ => x == class_name_with_strongest_extension_with_same_strength_with_same_extension.head)\n\
    \        val class_name_with_strongest_extension_with_same_strength_with_same_extension_with_same_extension_with_same_extension\
    \ = class_name_with_strongest_extension_with_same_strength_with_same_extension_with_same_extension.filter(x\
    \ => x == class_name_with_strongest_extension_with_same_strength_with_same_extension_with_same_extension.head)\n\
    \        val class_name_with_strongest_extension_with_same_strength_with_same_extension_with_same_extension_with_same_extension_with_same_extension\
    \ = class_name_with_strongest_extension_with_same_strength_with_same_extension_with_same_extension_with_same_extension_with_same_extension.filter(x\
    \ => x == class_name_with_strongest_extension_with_same_strength_with_same_extension_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqovh30g_.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqovh30g_.scala:22:52\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mclass_name_map\e[0m = class_name.map(\e[36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqovh30g_.scala:22:67\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mclass_name_map\e[0m = class_name.map(\e[36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpqovh30g_.scala:23:101 -----------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.values.map(\e[36mx\e\
    [0m => (x.toUpperCase, x.toLowerCase)).map(\e[36mx\e[0m => (x._1 - x._2)).map(\e\
    [36mx\e[0m => x._1).foldLeft(\e[31m0\e[0m)(_ + x._2)\n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpqovh30g_.scala:23:121 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.values.map(\e\
    [36mx"
  stdout: ''
  timestamp: 1659799776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val class_name_count = class_name.length\n        val strength = extensions_count\
    \ - class_name_count\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => a.length - b.length)\n        val extension_first = extensions_sorted.head\n\
    \        val extension_last = extensions_sorted.last\n        val extension_first_count\
    \ = extension_first.length\n        val extension_last_count = extension_last.length\n\
    \        val extension_first_first_letter = extension_first(0)\n        val extension_last_last_letter\
    \ = extension_last(extension_last_count - 1)\n        val extension_first_last_letter\
    \ = extension_first(extension_first_count - 1)\n        val extension_first_first_letter_count\
    \ = extension_first_first_letter.length\n        val extension_last_last_letter_count\
    \ = extension_last_last_letter.length\n        val extension_first_last_letter_count\
    \ = extension_first_last_letter.length\n        val extension_first_first_letter_last_letter\
    \ = extension_first(extension_first_first_letter_count - 1)\n        val extension_last_last_letter_last_letter\
    \ = extension_last(extension_last_last_letter_count - 1)\n        val extension_first_last_letter_last_letter_count\
    \ = extension_first_last_letter_last_letter.length\n        val extension_first_last_letter_last_letter_last_letter_count\
    \ = extension_last_last_letter_last_letter.length\n        val extension_first_last_letter_last_letter_last_letter_last_letter\
    \ = extension_first(extension_first_last_letter_last_letter_last_letter_count\
    \ - 1)\n        val extension_last_last_letter_last_letter_last_letter_last_letter\
    \ = extension_last(extension_last_last_letter_last_letter_last_letter_count -\
    \ 1)\n        val extension_first_last_letter_last_letter_last_letter_last_letter_count\
    \ = extension_first_last_letter_last_letter_last_letter_last_letter.length\n \
    \       val extension_first_last_letter_last_letter_last_letter_last_letter_last_letter_count\
    \ = extension_last_last_letter_last_letter_last_letter_last_letter.length\n  \
    \      val extension_first_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter\
    \ = extension_first(extension_first_last_letter_last_letter_last_letter_last_letter_last_letter_count\
    \ - 1)\n        val extension_last_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter\
    \ = extension_last(extension_last_last_letter_last_letter_last_letter_last_letter_last_letter_count\
    \ - 1)\n        val extension_first_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter\
    \ = extension_first(extension_first_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_last_letter_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpih33z1gh.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpih33z1gh.scala:23:62 --------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \        \e[33mval\e[0m \e[36mextensions_sorted\e[0m = extensions.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a.length - b.length)\n\e[31m\e[31m   |\e[0m     \
    \                                                         ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Int\n\e[31m   |\e[0m                                                    \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpih33z1gh.scala:31:78\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mextension_first_first_letter_count\e[0m = extension_first_first_letter.length\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpih33z1gh.scala:32:74\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mextension_last_last_letter_count\e[0m = extension_last_last_letter.length\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpih33z1gh.scala:33:76\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mextension_first_last_letter_count\e[0m = extension_first_last_letter.length\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Char\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpih33z1gh."
  stdout: ''
  timestamp: 1659799774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.map(c => (c, 1)).toMap)\n        val class_name_map = class_name.map(c\
    \ => (c, 1)).toMap\n        val extensions_count = extensions_map.values.sum\n\
    \        val class_name_count = class_name_map.values.sum\n        val strength\
    \ = class_name_count - extensions_count\n        val extensions_sorted = extensions_map.values.sortBy(_._2).reverse\n\
    \        val class_name_sorted = class_name_map.values.sortBy(_._2).reverse\n\
    \        val extensions_first = extensions_sorted.head\n        val class_name_first\
    \ = class_name_sorted.head\n        if (class_name_count > extensions_count &&\
    \ class_name_sorted.length == 1) {\n            class_name_sorted.head\n     \
    \   } else if (extensions_count > class_name_count && extensions_sorted.length\
    \ == 1) {\n            extensions_sorted.head\n        } else {\n            val\
    \ extensions_first_index = extensions_sorted.indexWhere(_._2 == extensions_first._2)\n\
    \            val class_name_first_index = class_name_sorted.indexWhere(_._2 ==\
    \ class_name_first._2)\n            val extensions_first_name = extensions_first._1\n\
    \            val class_name_first_name = class_name_first._1\n            val\
    \ extensions_first_name_count = extensions_first._2\n            val class_name_first_name_count\
    \ = class_name_first._2\n            val extensions_first_name_strength = extensions_first._3\n\
    \            val class_name_first_name_strength = class_name_first._3\n      \
    \      val extensions_first_name_sorted = extensions_sorted.take(extensions_first_index).sortBy(_._2).reverse\n\
    \            val class_name_first_sorted = class_name_sorted.take(class_name_first_index).sortBy(_._2).reverse\n\
    \            val extensions_first_name_first = extensions_first_name_sorted.head\n\
    \            val class_name_first_name_first = class_name_first_name_sorted.head\n\
    \            if (class_name_first_name_count > extensions_first_name_count &&\
    \ class_name_first_name_sorted.length == 1) {\n                class_name_first_name_sorted.head\n\
    \            } else if (extensions_first_name_count > class_name_first_name_count\
    \ && extensions_first_name_sorted.length == 1) {\n                extensions_first_name_sorted.head\n\
    \            } else {\n                val extensions_first_name_first_index =\
    \ extensions_first_name_sorted.indexWhere(_._2 == extensions_first_name_first._2)\n\
    \                val class_name_first_name_first_index = class_name_first_name_sorted.indexWhere(_._2\
    \ == class_name_first_name_first._2)\n                val extensions_first_name_first_name\
    \ = extensions_first_name_first._1\n                val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpie3bk86b.scala:54:19 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m                \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m\
    \                   ^\e[0m\n\e[31m   |\e[0m                   pattern expected\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpie3bk86b.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpie3bk86b.scala:22:46 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        \e[33mval\e[0m \e[36mextensions_count\e[0m = extensions_map.values.sum\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    value values is not a member of List[Map[Char,\
    \ Int]]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpie3bk86b.scala:25:47 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_map.values.sortBy(_._2).reverse\n\e[31m\e[31m   |\e[0m          \
    \                      ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         value values is not a member of List[Map[Char, Int]]\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpie3bk86b.scala:26:54 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mclass_name_sorted\e[0m =\
    \ class_name_map.values.sortBy(_._2).reverse\n\e[31m\e[31m   |\e[0m          \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                       value sortBy is not a member of Iterable[Int]\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpie3bk86b.scala:45:46 ------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m            \e[33mval\e[0m \e[36mclass_name_first_name_first\e\
    [0m = class_name_first_name_sorted.head\n\e[31m\e[31m   |\e[0m               \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Not found: class_name_first_name_sorted\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when comp"
  stdout: ''
  timestamp: 1659799774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(x\
    \ => x.length).sum\n        val extensions_count_sorted = extensions.map(x =>\
    \ x.length).sort\n        val strength = extensions_count_sorted.last\n      \
    \  val extensions_count_sorted_reversed = extensions_count_sorted.reverse\n  \
    \      val strength_reversed = extensions_count_sorted_reversed.last\n       \
    \ val strength_fraction = strength_reversed / extensions_count\n        val extensions_count_sorted_reversed_fraction\
    \ = extensions_count_sorted_reversed.map(x => x / extensions_count)\n        val\
    \ extensions_count_sorted_reversed_fraction_sum = extensions_count_sorted_reversed_fraction.sum\n\
    \        val extensions_count_sorted_reversed_fraction_sum_fraction = extensions_count_sorted_reversed_fraction_sum\
    \ / extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction / extensions_count_sorted\n\
    \        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction / extensions_count_sorted\n\
    \        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction /\
    \ extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n        val extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp22arj2wq.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\e\
    [0m = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp22arj2wq.scala:21:68 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions.map(\e[36mx\e[0m => x.length).sort\n\e[31m\e[31m   |\e[0m   \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue sort is not a member of List[Int] - did you mean List[Int].sortBy?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp22arj2wq.scala:33:114 --------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction\e\
    [0m = extensions_count_sorted_reversed_fraction_sum_fraction_fraction_fraction_fraction_fraction_fraction\
    \ / extensions_count_sorted\n\e[31m\e[31m   |\e[0m                           \
    \                                                                            \
    \           ^\e[0m\n"
  stdout: ''
  timestamp: 1659799773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') / e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C') / e.toUpperCase.count(_ == 'D')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val extensions_sorted = extensions_map.values.toList.sortWith(_\
    \ < strength)\n        val extensions_sorted = extensions_sorted.take(1).mkString.concat(\"\
    .\").concat(extensions_sorted.last)\n        extensions_sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"),\
    \ (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpijfso94g.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.take(\e[31m1\e[0m).mkString.concat(\e[31m\".\"\e[0m).concat(extensions_sorted.last)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- Error: /tmp/tmpijfso94g.scala:20:181 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.count(_ == \e[31m'A'\e[0m) / e.toUpperCase.count(_\
    \ == \e[31m'B'\e[0m) - e.toUpperCase.count(_ == \e[31m'C'\e[0m) / e.toUpperCase.count(_\
    \ == \e[31m'D'\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                           \
    \                                                                            \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0m                                        Cannot prove\
    \ that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                      \
    \                  where:    K is a type variable\n\e[31m   |\e[0m           \
    \                                       V is a type variable\n\e[31m   |\e[0m\
    \                                        .\n2 errors found\n"
  stdout: ''
  timestamp: 1659799772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val extensions_sorted = extensions_map.toSeq.sortWith(_._2 > _._2)\n\
    \        val extension_first = extensions_sorted.head\n        val extension_last\
    \ = extensions_sorted.last\n        val extension_first_name = extension_first._1\n\
    \        val extension_last_name = extension_last._1\n        val extension_first_name_length\
    \ = extension_first_name.length\n        val extension_last_name_length = extension_last_name.length\n\
    \        val extension_first_name_strength = extension_first._2\n        val extension_last_name_strength\
    \ = extension_last._2\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_strength\
    \ - extension_last_name_length\n        val extension_first_name_length = extension_first_name_strength\
    \ - extension_first_name_length\n        val extension_last_name_length = extension_last_name_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7jouyh8u.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mextension_first_name_length\e\
    [0m = extension_first_name_strength - extension_first_name_length\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextension_first_name_length is already defined as \e[33mvalue\e\
    [0m \e[35mextension_first_name_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7jouyh8u.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mextension_last_name_length\e\
    [0m = extension_last_name_strength - extension_last_name_length\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextension_last_name_length is already defined as \e[33mvalue\e\
    [0m \e[35mextension_last_name_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7jouyh8u.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mextension_first_name_length\e\
    [0m = extension_first_name_strength - extension_first_name_length\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextension_first_name_length is already defined as \e[33mvalue\e\
    [0m \e[35mextension_first_name_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7jouyh8u.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mextension_last_name_length\e\
    [0m = extension_last_name_strength - extension_last_name_length\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = class_name_map.foldLeft(0)((acc,\
    \ x) => acc + (extensions_map.getOrElse(x, 0) - class_name_map.getOrElse(x, 0)))\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n \
    \       val class_name_sorted = class_name_map.toSeq.sortBy(_._2).reverse\n  \
    \      val strength_sorted = strength.toSeq.sortBy(_._2).reverse\n        val\
    \ index = strength_sorted.zipWithIndex.find(_._2 == strength_sorted.head._2).get._1\n\
    \        val extension = extensions_sorted.apply(index)\n        class_name_sorted.apply(index)\
    \ + extension\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcupz3_ta.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpcupz3_ta.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcupz3_ta.scala:22:94\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = class_name_map.foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m) =>\
    \ acc + (extensions_map.getOrElse(x, \e[31m0\e[0m) - class_name_map.getOrElse(x,\
    \ \e[31m0\e[0m)))\n\e[31m\e[31m   |\e[0m                                     \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                      Found:    (x : (Nothing, Nothing))\n\e\
    [31m   |\e[0m                                      Required: String\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcupz3_ta.scala:22:127 -------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = class_name_map.foldLeft(\e\
    [31m0\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m) => acc + (extensions_map.getOrElse(x,\
    \ \e[31m0\e[0m) - class_name_map.getOrElse(x, \e[31m0\e[0m)))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                      Found:    (x : (Nothing, Nothing))\n\e\
    [31m   |\e[0m       "
  stdout: ''
  timestamp: 1659799774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.filter(_._2\
    \ > class_name_map.get(_._1)).map(_._1).length\n        val extensions_sorted\
    \ = extensions_map.filter(_._2 > class_name_map.get(_._1)).sortBy(_._1)\n    \
    \    val extensions_sorted = extensions_sorted.map(_._2).mkString(\".\")\n   \
    \     class_name + extensions_sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdt0o35sy.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.map(_._2).mkString(\e[31m\".\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e[35mextensions_sorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpdt0o35sy.scala:21:52 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpdt0o35sy.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpdt0o35sy.scala:22:71\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e\
    [0m \e[36mstrength\e[0m = extensions_map.filter(_._2 > class_name_map.get(_._1)).map(_._1).length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2 of expanded\
    \ function:\n\e[31m   |\e[0m   _$2 => _$2._1.\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmpdt0o35sy.scala:23:80 -----------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m = extensions_map.filter(_._2\
    \ > class_name_map.get(_._1)).sortBy(_"
  stdout: ''
  timestamp: 1659799773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_map_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n    \
    \    val extensions_map_sorted_keys = extensions_map_sorted.keys\n        val\
    \ extensions_map_sorted_values = extensions_map_sorted.values\n        val extensions_map_sorted_keys_sorted\
    \ = extensions_map_sorted_keys.sortBy(_._1)\n        val extensions_map_sorted_values_sorted\
    \ = extensions_map_sorted_values.sortBy(_._1)\n        val extensions_map_sorted_keys_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted.toSeq\n        val extensions_map_sorted_values_sorted_sorted\
    \ = extensions_map_sorted_values_sorted.toSeq\n        val extensions_map_sorted_keys_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted.toSeq\n        val extensions_map_sorted_values_sorted_sorted_sorted\
    \ = extensions_map_sorted_values_sorted_sorted.toSeq\n        val extensions_map_sorted_keys_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted_sorted.toSeq\n        val extensions_map_sorted_values_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_values_sorted_sorted_sorted.toSeq\n        val extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted_sorted_sorted.toSeq\n        val\
    \ extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted = extensions_map_sorted_values_sorted_sorted_sorted_sorted.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted.toSeq\n    \
    \    val extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted.toSeq\n  \
    \      val extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted.toSeq\n\
    \        val extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.toSeq\n\
    \        val extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfzb2idod.scala:20:100 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.charAt(\e[31m0\e[0m) -> e.toUpperCase.charAt(\e[31m1\e\
    [0m).toLowerCase)\n\e[31m\e[31m   |\e[0m                                     \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmpfzb2idod.scala:21:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mextensions_map_sorted\e\
    [0m = extensions_map.toSeq.sortBy(_._2).reverse\n\e[31m\e[31m   |\e[0m       \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mInt\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfzb2idod.scala:38:97 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mextensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\e\
    [0m = extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.toSeq\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                         ^\e[0m\n\e[31m   |\e[0mRecursive \e\
    [33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  extensions_map_sorted_keys_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfzb2idod.scala:39:106 -----------------------\e[0m\e[0m\n\e[31m39 |\e\
    [0m        \e[33mval\e[0m \e[36mextensions_map_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\e\
    [0m = extensions_map_sorted_values_sorte"
  stdout: ''
  timestamp: 1659799773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((acc,\
    \ x) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n        val strength_str\
    \ = if (strength == 0) \"\" else s\"${class_name}${extensions_map.keys.toList.sortBy(x\
    \ => -extensions_map(x)).head}\"\n        strength_str\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnhb_kdej.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnhb_kdej.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnhb_kdej.scala:22:86\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = extensions_map.foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m) =>\
    \ acc + (class_name_map(x._1) - class_name_map(x._2)))\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \             Found:    String\n\e[31m   |\e[0m                              \
    \                         Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpnhb_kdej.scala:22:109 -------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.foldLeft(\e\
    [31m0\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                   ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                       Found:    String\n\e[31m\
    \   |\e[0m                                                       Required: Nothing\n\
    \e[31m   |\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659799774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(x\
    \ => x.length).sum\n        val strength = extensions_count / extensions.length\n\
    \        val extensions_sorted = extensions.sortWith(x => x.toLowerCase compare\
    \ class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x =>\
    \ x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase\
    \ compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toLowerCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toUpperCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toLowerCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toUpperCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toLowerCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toUpperCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toLowerCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toUpperCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toLowerCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ x.toUpperCase compare class_name)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.length > 0)\n        val extensions_sorted = extensions_sor\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbuay6yh8.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(\e[36mx\e[0m => x.length > \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbuay6yh8.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.map(\e[36mx\e[0m => x.toUpperCase compare class_name)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbuay6yh8.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(\e[36mx\e[0m => x.length > \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbuay6yh8.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.map(\e[36mx\e[0m => x.toLowerCase compare class_name)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mv"
  stdout: ''
  timestamp: 1659799774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_count = extensions_map.size\n\
    \        val class_name_count = class_name.count(' ')\n        val strength =\
    \ class_name_count - extensions_count\n        if (extensions_count > class_name_count)\
    \ {\n            val max_key = extensions_map.maxBy(_._2)._1\n            val\
    \ max_value = extensions_map.maxBy(_._2)._2\n            class_name + max_key\
    \ + max_value\n        } else {\n            class_name + extensions_map.minBy(_._2)._1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6vk8f342.scala:22:48\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mclass_name_count\e\
    [0m = class_name.count(\e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \                                ^^^\e[0m\n\e[31m   |\e[0m                   \
    \                            Found:    (\e[31m' '\e[0m : Char)\n\e[31m   |\e[0m\
    \                                               Required: Char => Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799770
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val strength = extensions_sorted.head._1\
    \ - extensions_sorted.last._1\n        val extension = extensions_sorted.last._2\n\
    \        s\"$class_name.$extension\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph5rf155w.scala:27)\n\tat Problem.main(tmph5rf155w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_count = extensions_map.size\n\
    \        val class_name_count = class_name_map.size\n        val strength = extensions_count\
    \ - class_name_count\n        if (strength == 0) class_name\n        else if (strength\
    \ < 0) class_name + extensions_map.keys.toList.sortBy(x => -extensions_map(x)).head\n\
    \        else class_name + extensions_map.keys.toList.sortBy(x => extensions_map(x)).head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3plpj22i.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp3plpj22i.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3plpj22i.scala:26:83\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33melse\e[0m \e\
    [33mif\e[0m (strength < \e[31m0\e[0m) class_name + extensions_map.keys.toList.sortBy(x\
    \ => -extensions_map(x)).head\n\e[31m\e[31m   |\e[0m                         \
    \                                                          ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue unary_- is not a member of String, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmp3plpj22i.scala:26:102 ----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (strength < \e\
    [31m0\e[0m) class_name + extensions_map.keys.toList.sortBy(x => -extensions_map(x)).head\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                              ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[3"
  stdout: ''
  timestamp: 1659799774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_count = extensions_map.size\n\
    \        val class_name_count = class_name.countUpperCase\n        val strength\
    \ = class_name_count - extensions_count\n        val extension = extensions_map.getOrElse(strength,\
    \ \"\")\n        class_name + extension\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl7ifodrk.scala:22:42 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mclass_name_count\e[0m =\
    \ class_name.countUpperCase\n\e[31m\e[31m   |\e[0m                           \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \ value countUpperCase is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659799771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        // Write your code here\n        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase).map(_.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n    \
    \    val extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val\
    \ strength_upper = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength_lower = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).map(_.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val strength_upper = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength_lower = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).map(_.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val strength_upper = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength_lower = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).map(_.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val strength_upper = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength_lower = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).map(_.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val strength_upper = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength_lower = extensions_count \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpamjr6vgz.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_upper\e\
    [0m = extensions.map(_.toUpperCase).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_upper is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_upper\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpamjr6vgz.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_lower\e\
    [0m = extensions.map(_.toLowerCase).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_lower is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_lower\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpamjr6vgz.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_lower\e\
    [0m = extensions.map(_.toLowerCase).map(_.length).sum\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_lower is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_lower\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpamjr6vgz.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_upper\e\
    [0m = extensions.map(_.toUpperCase).map(_.length).sum\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_upper is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_upper\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overl"
  stdout: ''
  timestamp: 1659799774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.filter(_._2.length\
    \ == class_name_map.get(_._2)).length\n        val strongest_extension = extensions_map.filter(_._2.length\
    \ == class_name_map.get(_._2)).minBy(_._1)\n        class_name_map.get(_._2) +\
    \ \".\" + strongest_extension._2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgysyo1xv.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpgysyo1xv.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpgysyo1xv.scala:22:79\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e\
    [0m \e[36mstrength\e[0m = extensions_map.filter(_._2.length == class_name_map.get(_._2)).length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                       ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2\
    \ of expanded function:\n\e[31m   |\e[0m   _$2 => _$2._2.\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmpgysyo1xv.scala:23:90 -----------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mstrongest_extension\e[0m = extensions_map.filter(_._2.length\
    \ == class_name_map.get(_._2)).minBy(_._1)\n\e[31m\e[31m   |\e[0m            \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m   I could not infer the type of the parameter _$4 of expanded function:\n\
    \e[31m   |\e[0m   _$4 => _$4._2.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpgysyo1xv.scala:24:27\
    \ -----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        class_name_map.get(_._2)\
    \ + \e[31m\".\"\e[0m + strongest_extension._2\n\e[31m\e[31m   |\e[0m         \
    \      "
  stdout: ''
  timestamp: 1659799773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => class_name_map.getOrElse(x, 0) - x.toUpperCase.length).max\n        val extensions_sorted\
    \ = extensions_map.values.sortBy(x => x.toUpperCase).reverse\n        val extensions_sorted_sorted\
    \ = extensions_sorted.sortBy(x => x.toUpperCase).reverse\n        val extensions_sorted_sorted\
    \ = extensions_sorted_sorted.takeWhile(x => x.toUpperCase.length < strength)\n\
    \        val extensions_sorted_sorted = extensions_sorted_sorted.takeWhile(x =>\
    \ x.toUpperCase.length >= strength)\n        val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n\
    \        val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n   \
    \     val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n      \
    \  val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n        val\
    \ extensions_sorted_sorted = extensions_sorted_sorted.reverse\n        val extensions_sorted_sorted\
    \ = extensions_sorted_sorted.reverse\n        val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n\
    \        val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n   \
    \     val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n      \
    \  val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n        val\
    \ extensions_sorted_sorted = extensions_sorted_sorted.reverse\n        val extensions_sorted_sorted\
    \ = extensions_sorted_sorted.reverse\n        val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n\
    \        val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n   \
    \     val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n      \
    \  val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n        val\
    \ extensions_sorted_sorted = extensions_sorted_sorted.reverse\n        val extensions_sorted_sorted\
    \ = extensions_sorted_sorted.reverse\n        val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n\
    \        val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n   \
    \     val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n      \
    \  val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n        val\
    \ extensions_sorted_sorted = extensions_sorted_sorted.reverse\n        val extensions_sorted_sorted\
    \ = extensions_sorted_sorted.reverse\n        val extensions_sorted_sorted = extensions_sorted_sorted.reverse\n\
    \        val extensions_sorted_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpms68n6rj.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpms68n6rj.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_sorted_sorted\e[0m = extensions_sorted_sorted.takeWhile(\e\
    [36mx\e[0m => x.toUpperCase.length < strength)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_sorted_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpms68n6rj.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted_sorted\e\
    [0m = extensions_sorted_sorted.takeWhile(\e[36mx\e[0m => x.toUpperCase.length\
    \ >= strength)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_sorted_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpms68n6rj.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted_sorted\e\
    [0m = extensions_sorted_sorted.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_sorted_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpms68n6rj.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |"
  stdout: ''
  timestamp: 1659799774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.sortBy(_.length)\n        val\
    \ strength = extensions_count_sorted.last.length\n        val extensions_count_sorted\
    \ = extensions_count_sorted.takeWhile(_ < strength)\n        val extensions_count_sorted\
    \ = extensions_count_sorted.reverse\n        val extensions_count_sorted = extensions_count_sorted.takeWhile(_\
    \ < extensions_count)\n        val extensions_count_sorted = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppqsj9klf.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions_count_sorted.takeWhile(_ < strength)\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppqsj9klf.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions_count_sorted.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppqsj9klf.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions_count_sorted.takeWhile(_ < extensions_count)\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppqsj9klf.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions_count_sorted.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659799773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.sortWith(_.length < _.length)\n\
    \        val strength = extensions_count_sorted.map(_.toUpperCase.count(_ == 'A')\
    \ - _.toUpperCase.count(_ == 'a')) / extensions_count_sorted.length\n        val\
    \ strength_sorted = extensions_count_sorted.sortWith(_.length < _.length)\n  \
    \      val strength_sorted = strength_sorted.map(_.toUpperCase.count(_ == 'A')\
    \ - _.toUpperCase.count(_ == 'a'))\n        val strength_sorted = strength_sorted.sortWith(_.length\
    \ < _.length)\n        val strength_sorted = strength_sorted.map(_.toUpperCase.count(_\
    \ == 'A') - _.toUpperCase.count(_ == 'a'))\n        val strength_sorted = strength_sorted.sortWith(_.length\
    \ < _.length)\n        val strength_sorted = strength_sorted.map(_.toUpperCase.count(_\
    \ == 'A') - _.toUpperCase.count(_ == 'a'))\n        val strength_sorted = strength_sorted.sortWith(_.length\
    \ < _.length)\n        val strength_sorted = strength_sorted.map(_.toUpperCase.count(_\
    \ == 'A') - _.toUpperCase.count(_ == 'a'))\n        val strength_sorted = strength_sorted.sortWith(_.length\
    \ < _.length)\n        val strength_sorted = strength_sorted.map(_.toUpperCase.count(_\
    \ == 'A') - _.toUpperCase.count(_ == 'a'))\n        val strength_sorted = strength_sorted.sortWith(_.length\
    \ < _.length)\n        val strength_sorted = strength_sorted.map(_.toUpperCase.count(_\
    \ == 'A') - _.toUpperCase.count(_ == 'a'))\n        val strength_sorted = strength_sorted.sortWith(_.length\
    \ < _.length)\n        val strength_sorted = strength_sorted.map(_.toUpperCase.count(_\
    \ == 'A') - _.toUpperCase.count(_ == 'a'))\n        val strength_sorted = strength_sorted.sortWith(_.length\
    \ < _.length)\n        val strength_sorted = strength_sorted.map(_.toUpperCase.count(_\
    \ == 'A') - _.toUpperCase.count(_ == 'a'))\n        val strength_sorted = strength_sorted.sortWith(_.length\
    \ < _.length)\n        val strength_sorted = strength_sorted.map(_.toUpperCase.count(_\
    \ == 'A') - _.toUpperCase.count(_\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp5hreist.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp5hreist.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstrength_sorted\e[0m = strength_sorted.map(_.toUpperCase.count(_ == \e\
    [31m'A'\e[0m) - _.toUpperCase.count(_ == \e[31m'a'\e[0m))\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrength_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mstrength_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpp5hreist.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mstrength_sorted\e[0m = strength_sorted.sortWith(_.length\
    \ < _.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrength_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mstrength_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpp5hreist.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mstrength_sorted\e[0m = strength_sorted.map(_.toUpperCase.count(_\
    \ == \e[31m'A'\e[0m) - _.toUpperCase.count(_ == \e[31m'a'\e[0m))\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrength_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mstrength_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpp5hreist.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e"
  stdout: ''
  timestamp: 1659799772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_count = extensions.map(x\
    \ => extensions_map(x.toUpperCase).length).sum\n        val class_name_count =\
    \ class_name.count('.')\n        val strength = extensions_count - class_name_count\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n \
    \       val extensions_first = extensions_sorted.head._2\n        val extensions_last\
    \ = extensions_sorted.last._2\n        val extensions_first_count = extensions_sorted.count(_._2\
    \ == extensions_first)\n        val extensions_last_count = extensions_sorted.count(_._2\
    \ == extensions_last)\n        if (extensions_first_count > extensions_last_count)\
    \ {\n            extensions_sorted.find(_._2 == extensions_first)._1 + \".\" +\
    \ extensions_first\n        } else {\n            extensions_sorted.find(_._2\
    \ == extensions_last)._1 + \".\" + extensions_last\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"),\
    \ (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv991ttja.scala:22:48\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mclass_name_count\e\
    [0m = class_name.count(\e[31m'.'\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \                                ^^^\e[0m\n\e[31m   |\e[0m                   \
    \                            Found:    (\e[31m'.'\e[0m : Char)\n\e[31m   |\e[0m\
    \                                               Required: Char => Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv991ttja.scala:30:61\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m            extensions_sorted.find(_._2\
    \ == extensions_first)._1 + \e[31m\".\"\e[0m + extensions_first\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value _1 is not a member of Option[(String, String)]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv991ttja.scala:32:60 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            extensions_sorted.find(_._2 == extensions_last)._1\
    \ + \e[31m\".\"\e[0m + extensions_last\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value _1 is not a member of Option[(String, String)]\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.values.max\n        val\
    \ extension = extensions_map.values.min\n        val class_name_with_extension\
    \ = class_name + extension\n        if (extensions_map.values.toList.sorted ==\
    \ List(strength)) {\n            class_name_with_extension\n        } else {\n\
    \            class_name_with_extension + extensions_map.values.toList.sorted\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5pj3ov_p.scala:20:149 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.count(_ == \e[31m'A'\e[0m) - e.toUpperCase.count(_\
    \ == \e[31m'B'\e[0m) - e.toUpperCase.count(_ == \e[31m'C'\e[0m)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                        Cannot\
    \ prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                \
    \                        where:    K is a type variable\n\e[31m   |\e[0m     \
    \                                             V is a type variable\n\e[31m   |\e\
    [0m                                        .\n1 error found\n"
  stdout: ''
  timestamp: 1659799784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted_reversed = extensions_count_sorted.reverse\n   \
    \     val extensions_count_sorted_reversed_sorted = extensions_count_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed = extensions_count_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted = extensions_count_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted.reverse\n        val\
    \ extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprmcpjc8j.scala:21:63 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions.map(_.length).sort\n\e[31m\e[31m   |\e[0m                   \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sort\
    \ is not a member of List[Int] - did you mean List[Int].sortBy?\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmprmcpjc8j.scala:31:118 --------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\e\
    [0m = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.sort\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmprmcpjc8j.scala:33:134 --------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\e\
    [0m = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.sort\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m \
    \ extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprmcpjc8"
  stdout: ''
  timestamp: 1659799786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength = extensions_count_sorted.last\n        val extensions_count_sorted_reversed\
    \ = extensions_count_sorted.reverse\n        val strength_reversed = extensions_count_sorted_reversed.last\n\
    \        val strength_fraction = strength_reversed / extensions_count\n      \
    \  val class_name_with_extension = class_name + extensions.map(x => x.capitalize).mkString(\"\
    .\") + extensions_count.toString\n        val strength_fraction_reversed = strength_fraction\
    \ * -1\n        val strength_fraction_reversed_rounded = strength_fraction_reversed.round\n\
    \        val strength_fraction_reversed_rounded_string = strength_fraction_reversed_rounded.toString\n\
    \        val strength_fraction_reversed_rounded_string_with_extension = class_name_with_extension\
    \ + strength_fraction_reversed_rounded_string\n        val strength_fraction_reversed_rounded_string_with_extension_rounded\
    \ = strength_fraction_reversed_rounded_string_with_extension.round\n        val\
    \ strength_fraction_reversed_rounded_string_with_extension_rounded_string = strength_fraction_reversed_rounded_string_with_extension_rounded.toString\n\
    \        val strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension\
    \ = class_name_with_extension + strength_fraction_reversed_rounded_string_with_extension_rounded_string\n\
    \        val strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension_rounded\
    \ = strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension.round\n\
    \        val strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension_rounded_string\
    \ = strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension_rounded.toString\n\
    \        val strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension_rounded_string_with_extension\
    \ = class_name_with_extension + strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension_rounded_string\n\
    \        val strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension_rounded_string_with_extension_rounded\
    \ = strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension_rounded_string_with_extension.round\n\
    \        val strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension_rounded_string_with_extension_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9rifr548.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9rifr548.scala:21:63\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_count_sorted\e[0m = extensions.map(_.length).sort\n\e[31m\e[31m\
    \   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sort is not a member of List[Int] - did you mean List[Int].sortBy?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9rifr548.scala:31:136 -----------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mstrength_fraction_reversed_rounded_string_with_extension_rounded\e\
    [0m = strength_fraction_reversed_rounded_string_with_extension.round\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value round is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9rifr548.scala:34:196\
    \ -----------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e\
    [36mstrength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension_rounded\e\
    [0m = strength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension.round\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value round is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9rifr548.scala:37:256\
    \ -----------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e\
    [36mstrength_fraction_reversed_rounded_string_with_extension_rounded_string_with_extension_rounded_string_with_extension_rounded\e\
    [0m = strength_fraction_reversed_rounded_string_with_ext"
  stdout: ''
  timestamp: 1659799786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase).toMap\n \
    \       val class_name_map = class_name.split('.').map(_.toUpperCase).toMap\n\
    \        val strength = extensions_map.values.map(class_name_map.get(_)).sum\n\
    \        if (strength > 0) class_name + extensions_map.keys.toList.sortBy(_ -\
    \ strength).head\n        else class_name\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplg7qmisj.scala:20:100 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.charAt(\e[31m0\e[0m) -> e.toUpperCase.charAt(\e[31m1\e\
    [0m).toLowerCase).toMap\n\e[31m\e[31m   |\e[0m                               \
    \                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmplg7qmisj.scala:21:75 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.split(\e\
    [31m'.'\e[0m).map(_.toUpperCase).toMap\n\e[31m\e[31m   |\e[0m                \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                     Cannot prove that String <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                     where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \       V is a type variable\n\e[31m   |\e[0m                                \
    \     .\n\e[31m\e[31m-- Error: /tmp/tmplg7qmisj.scala:22:75 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.values.map(class_name_map.get(_)).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                   ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e\
    [33mobject\e[0m \e[35mDoubleIsFractional\e[0m in \e[33mobject\e[0m \e[35mNumeric\e\
    [0m and \e[33mobject\e[0m \e[35mBigDecimalIsFractional\e[0m in \e[33mobject\e\
    [0m \e[35mNumeric\e[0m match type Numeric[B] of parameter num of \e[33mmethod\e\
    [0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m--\
    \ Error: /tmp/tmplg7qmisj.scala:23:86 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mif\e[0m (strength > \e[31m0\e[0m) class_name\
    \ + extensions_map.keys.toList.sortBy(_ - strength).head\n\e[31m\e[31m   |\e[0m\
    \                                                    "
  stdout: ''
  timestamp: 1659799787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_map_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n    \
    \    val strongest_extension = extensions_map_sorted.head._1\n        val strongest_extension_strength\
    \ = extensions_map_sorted.head._2\n        val class_name_with_strongest_extension\
    \ = class_name + strongest_extension\n        if(extensions_map_sorted.length\
    \ == 1) return class_name_with_strongest_extension\n        val strongest_extension_strength_2\
    \ = extensions_map_sorted.tail.head._2\n        if(strongest_extension_strength_2\
    \ > strongest_extension_strength) \n            StrongestExtension(class_name_with_strongest_extension,\
    \ extensions_map_sorted.tail.tail)\n        else class_name_with_strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw9qjql4x.scala:20:100 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.charAt(\e[31m0\e[0m) -> e.toUpperCase.charAt(\e[31m1\e\
    [0m).toLowerCase)\n\e[31m\e[31m   |\e[0m                                     \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmpw9qjql4x.scala:21:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mextensions_map_sorted\e\
    [0m = extensions_map.toSeq.sortBy(_._2).reverse\n\e[31m\e[31m   |\e[0m       \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mInt\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659799785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._2)\n    \
    \    val first_extension = sorted_extensions.head\n        val first_extension_strength\
    \ = first_extension._2\n        if (strength == 0) first_extension\n        else\
    \ if (strength < first_extension_strength) first_extension\n        else class_name\
    \ + first_extension\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6grb6fmb.scala:20:149 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.count(_ == \e[31m'A'\e[0m) - e.toUpperCase.count(_\
    \ == \e[31m'B'\e[0m) - e.toUpperCase.count(_ == \e[31m'C'\e[0m)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                        Cannot\
    \ prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                \
    \                        where:    K is a type variable\n\e[31m   |\e[0m     \
    \                                             V is a type variable\n\e[31m   |\e\
    [0m                                        .\n1 error found\n"
  stdout: ''
  timestamp: 1659799785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.sortBy(_.length)\n        val\
    \ extensions_count_sorted_length = extensions_count_sorted.map(_.length)\n   \
    \     val extensions_count_sorted_length_sorted = extensions_count_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length = extensions_count_sorted_length.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted = extensions_count_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length = extensions_count_sorted_length_sorted_length.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted.sortBy(_.length)\n   \
    \     val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjtnxliro.scala:37:163 --------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                                            \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjtnxliro.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\e\
    [0m = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpjtnxliro.scala:24:99 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_length_sorted_length\e\
    [0m = extensions_count_sorted_length.sortBy(_.length)\n\e[31m\e[31m   |\e[0m \
    \                                                          "
  stdout: ''
  timestamp: 1659799787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (s, e) =>\n            val cap = e._1.toUpperCase.length\n            val\
    \ sm = e._2.toUpperCase.length\n            val strength = cap - sm\n        \
    \    if (strength > s) s \n            else s \n        }\n        val className\
    \ = className.toUpperCase\n        val extension = extensions_map.maxBy(_._1)._1\n\
    \        className + \".\" + extension\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa8ylukct.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mcap\e[0m = e._1.toUpperCase.length\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      value toUpperCase is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpa8ylukct.scala:23:26 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36msm\e[0m = e._2.toUpperCase.length\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     value toUpperCase is not a member of Int\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpa8ylukct.scala:28:24 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mclassName\e[0m = className.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mclassName\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.sortWith(_ < _)\n        val\
    \ extensions_count_sorted_length = extensions_count_sorted.map(_.length).sum\n\
    \        val extensions_count_sorted_length_sorted = extensions_count_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length = extensions_count_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted = extensions_count_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length.sortWith(_ < _)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted = extensions_count_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length.sortWith(_ < _)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp58ayh_2.scala:24:90 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_length_sorted_length\e\
    [0m = extensions_count_sorted_length.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m  \
    \                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value sortWith is not a\
    \ member of Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp58ayh_2.scala:37:164\
    \ -----------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\e\
    [0m = extensions_\n\e[31m\e[31m   |\e[0m                                     \
    \                                                                            \
    \                                                   ^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                                  Not found: extensions_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp58ayh_2.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)\n        ).sortBy(_._1).reverse.map(_._2).foldLeft(0)((a,\
    \ b) => a + b)\n        val strength = extensions_map.find(x => x == extensions_map.max).getOrElse(0)\n\
    \        val class_name_with_strength = class_name + \".\" + extensions.find(x\
    \ => x.toUpperCase.size == strength).getOrElse(\"\")\n        val class_name_with_strength_lowercase\
    \ = class_name_with_strength.toLowerCase\n        val class_name_with_strength_lowercase\
    \ = class_name_with_strength_lowercase.replaceAll(\"[^A-Z]\", \"\")\n        val\
    \ class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    ^\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    $\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    _\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\s\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\W\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\D\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{Punct}\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{C}\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{Z}\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{L}\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{M}\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{S}\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{P}\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{C}\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{Z}\", \"\")\n        val class_name_with_strength_lowercase = class_name_with_strength_lowercase.replaceAll(\"\
    \\\\p{L}\", \"\")\n        val class_name_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2fvt4a7h.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2fvt4a7h.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mclass_name_with_strength_lowercase\e[0m = class_name_with_strength_lowercase.replaceAll(\e\
    [31m\"[^A-Z]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclass_name_with_strength_lowercase is already defined as \e\
    [33mvalue\e[0m \e[35mclass_name_with_strength_lowercase\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2fvt4a7h.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mclass_name_with_strength_lowercase\e[0m = class_name_with_strength_lowercase.replaceAll(\e\
    [31m\"^\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclass_name_with_strength_lowercase is already defined as \e\
    [33mvalue\e[0m \e[35mclass_name_with_strength_lowercase\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2fvt4a7h.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mclass_name_with_strength_lowercase\e[0m = class_name_with_strength_lowercase.replaceAll(\e\
    [31m\"$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclass_name_with_strength_lowercase is already defined as \e\
    [33mvalue\e[0m \e[35mclass_name_with_strength_lowercase\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same gr"
  stdout: ''
  timestamp: 1659799787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.values.max\n        val\
    \ extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpny8_2lb0.scala:43:11 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpny8_2lb0.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > \e[31m0\e[0m).map(_._1)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpny8_2lb0.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > \e[31m0\e[0m).map(_._1)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpny8_2lb0.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > \e[31m0\e[0m).map(_._1)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpny8_2lb0.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions"
  stdout: ''
  timestamp: 1659799787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase).toMap\n \
    \       val class_name_map = class_name.map(c => c.toUpperCase.charAt(0) -> c.toUpperCase.charAt(1).toLowerCase).toMap\n\
    \        val strength = extensions_map.foldLeft(0) { (s, e) =>\n            val\
    \ c = class_name_map.getOrElse(e, e)\n            val cap = c.toUpperCase.length\n\
    \            val sm = c.toLowerCase.length\n            val strength = cap - sm\n\
    \            if (strength > s) strength\n            else s\n        }\n     \
    \   val class_name = class_name_map.getOrElse(extensions_map.keys.toList.sorted.head,\
    \ extensions_map.keys.toList.sorted.head)\n        val extension = extensions_map.getOrElse(extensions_map.keys.toList.sorted.last,\
    \ extensions_map.keys.toList.sorted.last)\n        s\"$class_name.$extension\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcuzz1obq.scala:20:100 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.charAt(\e[31m0\e[0m) -> e.toUpperCase.charAt(\e[31m1\e\
    [0m).toLowerCase).toMap\n\e[31m\e[31m   |\e[0m                               \
    \                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcuzz1obq.scala:30:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mclass_name\e[0m = class_name_map.getOrElse(extensions_map.keys.toList.sorted.head,\
    \ extensions_map.keys.toList.sorted.head)\n\e[31m\e[31m   |\e[0m             \
    \            ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35mclass_name_map\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799786
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = extensions_count_upper - strength\n        val strength_lower\
    \ = extensions_count_lower - strength\n        val strength_sum = strength_upper\
    \ + strength_lower\n        if (strength_sum > 0) extensions(strength_sum - 1).substring(class_name.lastIndexOf('.')\
    \ + 1)\n        else \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 31\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.StrongestExtension(tmp0w2c28iu.scala:27)\n\tat Problem$.main(tmp0w2c28iu.scala:31)\n\
    \tat Problem.main(tmp0w2c28iu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase).toMap\n \
    \       val extensions_count = extensions.map(e => e.toUpperCase.charAt(0).toLowerCase).distinct.length\n\
    \        val extensions_count_map = extensions.map(e => e.toUpperCase.charAt(0).toLowerCase).distinct.map(e\
    \ => extensions_map(e) -> extensions_count(e)).sortBy(_._2).reverse\n        val\
    \ extensions_count_map = extensions_count_map.takeWhile(_._2 > 0).map(e => class_name\
    \ + e._1).mkString(\".\")\n        extensions_count_map.headOption.getOrElse(class_name)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp39smxl49.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_map\e[0m\
    \ = extensions_count_map.takeWhile(_._2 > \e[31m0\e[0m).map(\e[36me\e[0m => class_name\
    \ + e._1).mkString(\e[31m\".\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_map is already defined as \e[33mvalue\e[0m\
    \ \e[35mextensions_count_map\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp39smxl49.scala:20:100 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.charAt(\e[31m0\e[0m) -> e.toUpperCase.charAt(\e[31m1\e\
    [0m).toLowerCase).toMap\n\e[31m\e[31m   |\e[0m                               \
    \                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp39smxl49.scala:21:75\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_count\e[0m = extensions.map(\e[36me\e[0m => e.toUpperCase.charAt(\e\
    [31m0\e[0m).toLowerCase).distinct.length\n\e[31m\e[31m   |\e[0m              \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp39smxl49.scala:22:79\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_count_map\e[0m = extensions.map(\e[36me\e[0m => e.toUpperCase.charAt(\e\
    [31m0\e[0m).toLowerCase).distinct.map(\e[36me\e[0m => extensions_map(e) -> extensions_count(e)).sortBy(_._2).reverse\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               "
  stdout: ''
  timestamp: 1659799788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') / e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C') / e.toUpperCase.count(_ == 'D')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val first_extension = sorted_extensions.head\n        val first_extension_strength\
    \ = extensions_map.getOrElse(first_extension, 0)\n        val strength_difference\
    \ = strength - first_extension_strength\n        val first_extension_class = first_extension.substring(0,\
    \ first_extension.lastIndexOf('.'))\n        val first_extension_class_strength\
    \ = extensions_map.getOrElse(first_extension_class, 0)\n        val strength_difference_class\
    \ = strength_difference - first_extension_class_strength\n        val first_extension_class_name\
    \ = first_extension_class.substring(first_extension_class.lastIndexOf('.') + 1)\n\
    \        val first_extension_class_name_strength = extensions_map.getOrElse(first_extension_class_name,\
    \ 0)\n        val strength_difference_class_name = strength_difference_class -\
    \ first_extension_class_name_strength\n        val first_extension_class_name_strength_difference\
    \ = strength_difference_class_name - first_extension_class_name_strength\n   \
    \     val first_extension_class_name_strength_difference_class = first_extension_class_name_strength_difference\
    \ - first_extension_class_name_strength\n        val first_extension_class_name_strength_difference_class_name\
    \ = first_extension_class_name_strength_difference_class - first_extension_class_name_strength\n\
    \        val first_extension_class_name_strength_difference_class_name_name =\
    \ first_extension_class_name_strength_difference_class_name - first_extension_class_name_strength\n\
    \        val first_extension_class_name_strength_difference_class_name_name_name\
    \ = first_extension_class_name_strength_difference_class_name_name\n        val\
    \ first_extension_class_name_strength_difference_class_name_name_name\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbp21xrlt.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpbp21xrlt.scala:20:181\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e\
    [33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e[36me\e[0m => e.toUpperCase.count(_\
    \ == \e[31m'A'\e[0m) / e.toUpperCase.count(_ == \e[31m'B'\e[0m) - e.toUpperCase.count(_\
    \ == \e[31m'C'\e[0m) / e.toUpperCase.count(_ == \e[31m'D'\e[0m)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                            Cannot prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                                        where:    K is a type variable\n\
    \e[31m   |\e[0m                                                  V is a type variable\n\
    \e[31m   |\e[0m                                        .\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbp21xrlt.scala:38:5 ---------------------\e[0m\e\
    [0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase).toMap\n \
    \       val extensions_count = extensions.map(e => e.toUpperCase.charAt(0).toLowerCase).distinct.length\n\
    \        val class_name_count = class_name.distinct.length\n        val strength\
    \ = extensions_count - class_name_count\n        val extensions_sorted = extensions.sortWith(e\
    \ => extensions_map(e._1).compareTo(extensions_map(e._2)))\n        val extensions_sorted\
    \ = extensions_sorted.take(strength)\n        val class_name_sorted = class_name.sortWith(e\
    \ => e.toUpperCase.charAt(0).toLowerCase)\n        val class_name_sorted = class_name_sorted.take(strength)\n\
    \        val class_name_sorted.mkString(class_name_sorted.head.toString() + \"\
    .\")\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4zi_446g.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4zi_446g.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_sorted\e[0m = extensions_sorted.take(strength)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e[35mextensions_sorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4zi_446g.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mclass_name_sorted\e[0m = class_name_sorted.take(strength)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclass_name_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mclass_name_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp4zi_446g.scala:20:100 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.charAt(\e[31m0\e[0m) -> e.toUpperCase.charAt(\e[31m1\e\
    [0m).toLowerCase).toMap\n\e[31m\e[31m   |\e[0m                               \
    \                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4zi_446g.scala:21:75\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_count\e[0m = extensions.map(\e[36me\e[0m => e.toUpperCase.charAt(\e\
    [31m0\e[0m).toLowerCase).distinct.length\n\e[31m\e[31m   |\e[0m              \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e"
  stdout: ''
  timestamp: 1659799788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(x\
    \ => x.toUpperCase).distinct.length\n        val extensions_count_sorted = extensions_count.sortBy(x\
    \ => -x)\n        val strength = extensions_count_sorted.head\n        val extensions_sorted\
    \ = extensions_count_sorted.tail\n        val extensions_sorted = extensions_sorted.map(x\
    \ => x.toUpperCase)\n        val extensions_sorted = extensions_sorted.distinct.sortBy(x\
    \ => x.length)\n        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n\
    \        val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase)\n \
    \       val extensions_sorted = extensions_sorted.distinct.sortBy(x => x.length)\n\
    \        val extensions_sorted = extensions_sorted.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwji1kued.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwji1kued.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m = extensions_sorted.map(\e\
    [36mx\e[0m => x.toUpperCase)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwji1kued.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.distinct.sortBy(\e[36mx\e[0m => x.length)\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwji1kued.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.map(\e[36mx\e[0m => x.toUpperCase)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e[35mextensions_sorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwji1kued.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m = extensions_sorted.distinct.sortBy(\e\
    [36mx\e[0m => x.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.sortWith(_.length < _.length)\n\
    \        val extensions_count_sorted_reversed = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_length = extensions_count_sorted_reversed.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum = extensions_count_sorted_reversed_length.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted = extensions_count_sorted_reversed_length.sortWith(_.sum\
    \ < _.sum)\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted.reverse\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sum\n \
    \       val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sortWith(_.sum\
    \ < _.sum)\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.sortWith(_.sum\
    \ < _.sum)\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmi6jiz_1.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmi6jiz_1.scala:25:116\
    \ -----------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_count_sorted_reversed_length_sum_sorted\e[0m = extensions_count_sorted_reversed_length.sortWith(_.sum\
    \ < _.sum)\n\e[31m\e[31m   |\e[0m                                            \
    \                                                                      ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value sum is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmi6jiz_1.scala:27:147\
    \ -----------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_count_sorted_reversed_length_sum_sorted_reversed_length\e[0m =\
    \ extensions_count_sorted_reversed_length_sum_sorted_reversed.map(_.length)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                                            \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \  value length is not a member of Int\n\e[31m\e[31m-- Error: /tmp/tmpmi6jiz_1.scala:28:155\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e\
    [33mval\e[0m \e[36mextensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum\e\
    [0m = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                       ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both\
    \ \e[33mobject\e[0m \e[35mBigDecimalIsFractional\e[0m in \e[33mobject\e[0m \e\
    [35mNumeric\e[0m and \e[33mobject\e[0m \e[35mBigIntIsIntegral\e[0m in \e[33mobject\e\
    [0m \e[35mNumeric\e[0m match type Numeric[B] of parameter num of \e[33mmethod\e\
    [0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m--\
    \ [E008] Not Found Err"
  stdout: ''
  timestamp: 1659799788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase - e.toLowerCase -> 1)).toMap\n        val class_name_map =\
    \ class_name.map(c => (c.toUpperCase -> 1)).toMap\n        val max_strength =\
    \ extensions_map.values.max\n        val max_key = extensions_map.keys.max\n \
    \       val max_key_index = extensions_map.keys.indexOf(max_key)\n        val\
    \ max_key_value = extensions_map.get(max_key)\n        val max_key_key_index =\
    \ max_key_index\n        val max_key_key_value = max_key_value\n        val max_key_key_value\
    \ = max_key_value\n        val max_key_key_value = max_key_value\n        val\
    \ max_key_key_value = max_key_value\n        val max_key_key_value = max_key_value\n\
    \        val max_key_key_value = max_key_value\n        val max_key_key_value\
    \ = max_key_value\n        val max_key_key_value = max_key_value\n        val\
    \ max_key_key_value = max_key_value\n        val max_key_key_value = max_key_value\n\
    \        val max_key_key_value = max_key_value\n        val max_key_key_value\
    \ = max_key_value\n        val max_key_key_value = max_key_value\n        val\
    \ max_key_key_value = max_key_value\n        val max_key_key_value = max_key_value\n\
    \        val max_key_key_value = max_key_value\n        val max_key_key_value\
    \ = max_key_value\n        val max_key_key_value = max_key_value\n        val\
    \ max_key_key_value = max_key_value\n        val max_key_key_value = max_key_value\n\
    \        val max_key_key_value = max_key_value\n        val max_key_key_value\
    \ = max_key_value\n        val max_key_key_value = max_key_value\n        val\
    \ max_key_key_value = max_key_value\n        val max_key_key_value = max_key_value\n\
    \        val max_key_key_value = max_key_value\n        val max_key_key_value\
    \ = max_key_value\n        val max_key_key_value = max_key_value\n        val\
    \ max_key_key_value = max_key_value\n        val max_key_key_value = max_key_value\n\
    \        val max_key_key_value = max_key_value\n        val max_key_key_value\
    \ = max_key_value\n        val max_key_key_value = max_key_value\n        val\
    \ max_key_key_value = max_key_value\n        val max_key_key_value = max_key_value\n\
    \        val max_key_key_value = max_key_value\n        val max_key_key_value\
    \ = max_key_value\n        val max_key_key_value = max_key_value\n        val\
    \ max_key_key_value = max_key_value\n        val max_key_key_value = max_key_value\n\
    \        val max_key_key_value = max_key_value\n        val max_key_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0nmaeotb.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0nmaeotb.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_key_key_value\e[0m = max_key_value\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_key_key_value is already defined as \e[33mvalue\e[0m \e\
    [35mmax_key_key_value\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0nmaeotb.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmax_key_key_value\e[0m =\
    \ max_key_value\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_key_key_value is already defined as \e[33mvalue\e[0m \e\
    [35mmax_key_key_value\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0nmaeotb.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmax_key_key_value\e[0m =\
    \ max_key_value\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_key_key_value is already defined as \e[33mvalue\e[0m \e\
    [35mmax_key_key_value\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0nmaeotb.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmax_key_key_value\e[0m =\
    \ max_key_value\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_key_key_value is already defined as \e[33mvalue\e[0m \e\
    [35mmax_key_key_value\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Er"
  stdout: ''
  timestamp: 1659799789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_upper_ratio = extensions_count_upper / extensions_count.toDouble\n\
    \        val extensions_count_lower_ratio = extensions_count_lower / extensions_count.toDouble\n\
    \        val strength_ratio = strength / extensions_count.toDouble\n        val\
    \ extensions_count_ratio = extensions_count_upper / extensions_count_lower\n \
    \       val extensions_count_ratio2 = extensions_count_upper / extensions_count_upper_ratio\n\
    \        val extensions_count_ratio3 = extensions_count_lower / extensions_count_lower_ratio\n\
    \        val extensions_count_ratio4 = extensions_count_upper / extensions_count_ratio\n\
    \        val extensions_count_ratio5 = extensions_count_lower / extensions_count_ratio2\n\
    \        val extensions_count_ratio6 = extensions_count_upper / extensions_count_ratio3\n\
    \        val extensions_count_ratio7 = extensions_count_lower / extensions_count_ratio4\n\
    \        val extensions_count_ratio8 = extensions_count_upper / extensions_count_ratio5\n\
    \        val extensions_count_ratio9 = extensions_count_lower / extensions_count_ratio6\n\
    \        val extensions_count_ratio10 = extensions_count_upper / extensions_count_ratio7\n\
    \        val extensions_count_ratio11 = extensions_count_lower / extensions_count_ratio8\n\
    \        val extensions_count_ratio12 = extensions_count_upper / extensions_count_ratio9\n\
    \        val extensions_count_ratio13 = extensions_count_lower / extensions_count_ratio10\n\
    \        val extensions_count_ratio14 = extensions_count_upper / extensions_count_ratio11\n\
    \        val extensions_count_ratio15 = extensions_count_lower / extensions_count_ratio12\n\
    \        val extensions_count_ratio16 = extensions_count_upper / extensions_count_ratio13\n\
    \        val extensions_count_ratio17 = extensions_count_lower / extensions_count_ratio14\n\
    \        val extensions_count_ratio18 = extensions_count_upper / extensions_count_ratio15\n\
    \        val extensions_count_ratio19 = extensions_count_lower / extensions_count_ratio16\n\
    \        val extensions_count_ratio20 = extensions_count_upper / extensions_count_ratio17\n\
    \        val extensions_count_ratio21 = extensions_count_lower / extensions_count_ratio18\n\
    \        val extensions_count_ratio22 = extensions_count_upper / extensions_count_ratio19\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprvhf2u6_.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase).zipWithIndex.toMap\n        val extensions_sorted = extensions.sortWith(_.toUpperCase.compareTo(_))\n\
    \        val extensions_sorted_map = extensions_sorted.map(e => extensions_map(e._2))\n\
    \        val extensions_sorted_map_sorted = extensions_sorted_map.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted = extensions_sorted_map_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted = extensions_sorted_map_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted = extensions_sorted_map_sorted_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted_sorted = extensions_sorted_map_sorted_sorted_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted =\
    \ extensions_sorted_map_sorted_sorted_sorted_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \        val extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphsbjoz2s.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphsbjoz2s.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\e\
    [0m = extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_.toString.compareTo(_))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  extensions_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmphsbjoz2s.scala:21:75 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions.sortWith(_.toUpperCase.compareTo(_))\n\e[31m\e[31m   |\e[0m     \
    \                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                    Found:    Int\n\
    \e[31m   |\e[0m                                                    Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphsbjoz2s.scala:22:80\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_sorted_map\e[0m = extensions_sorted.map(\e[36me\e[0m => extensions_map(e._2))\n\
    \e[31m\e[31m   |\e[0m                                                   "
  stdout: ''
  timestamp: 1659799789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.split('').map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => class_name_map(x._1) - class_name_map(x._2)).sum\n        val strongest_extension\
    \ = extensions_map.values.filter(x => x._1 == strength).head._2\n        class_name\
    \ + \".\" + strongest_extension\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmplibtyfjl.scala:21:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.split('').map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                                    empty character literal\n\e[31m\e[31m-- Error:\
    \ /tmp/tmplibtyfjl.scala:22:102 ----------------------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.values.map(\e\
    [36mx\e[0m => class_name_map(x._1) - class_name_map(x._2)).sum\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                  ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mBigDecimalIsFractional\e[0m in \e[33mobject\e[0m\
    \ \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mShortIsIntegral\e[0m in \e[33mobject\e\
    [0m \e[35mNumeric\e[0m match type Numeric[B] of parameter num of \e[33mmethod\e\
    [0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmplibtyfjl.scala:23:70 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mstrongest_extension\e[0m\
    \ = extensions_map.values.filter(\e[36mx\e[0m => x._1 == strength).head._2\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                                      value\
    \ _1 is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1659799789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((acc,\
    \ x) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n        val strongest_extension\
    \ = extensions_map.maxBy(x => strength(x._1))\n        class_name + \".\" + strongest_extension._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3dht0jgn.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp3dht0jgn.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3dht0jgn.scala:22:86\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = extensions_map.foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m) =>\
    \ acc + (class_name_map(x._1) - class_name_map(x._2)))\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \             Found:    String\n\e[31m   |\e[0m                              \
    \                         Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3dht0jgn.scala:22:109 -------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.foldLeft(\e\
    [31m0\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                   ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                       Found:    String\n\e[31m\
    \   |\e[0m                                                       Required: Nothing\n\
    \e[31m   |\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659799799
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_sorted = extensions_map.toSeq.sortWith((a, b) => a._2 > b._2)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortWith((a, b) => a._1\
    \ < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._1 < b._1)\n        val extensions_sorted = extensions_sorted.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val extensions_sorted = extensions_sorted.to\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6uifhz8a.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.toSeq.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a._1 < b._1)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6uifhz8a.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.toSeq.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a._2 < b._2)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6uifhz8a.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.toSeq.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a._1 < b._1)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6uifhz8a.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.toSeq.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a._2 < b._2)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_s"
  stdout: ''
  timestamp: 1659799800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => class_name_map.getOrElse(x, 0) - x.toString.toString.toUpperCase.length).toArray\n\
    \        val max_strength = strength.max\n        val max_key = extensions_map.keys.find(x\
    \ => strength.contains(x)).max\n        val max_value = extensions_map.get(max_key)\n\
    \        max_key match {\n            case x if strength.contains(x) => x\n  \
    \          case x if strength.contains(x) => x\n            case x if strength.contains(x)\
    \ => x\n            case x if strength.contains(x) => x\n            case x if\
    \ strength.contains(x) => x\n            case x if strength.contains(x) => x\n\
    \            case x if strength.contains(x) => x\n            case x if strength.contains(x)\
    \ => x\n            case x if strength.contains(x) => x\n            case x if\
    \ strength.contains(x) => x\n            case x if strength.contains(x) => x\n\
    \            case x if strength.contains(x) => x\n            case x if strength.contains(x)\
    \ => x\n            case x if strength.contains(x) => x\n            case x if\
    \ strength.contains(x) => x\n            case x if strength.contains(x) => x\n\
    \            case x if strength.contains(x) => x\n            case x if strength.contains(x)\
    \ => x\n            case x if strength.contains(x) => x\n            case x if\
    \ strength.contains(x) => x\n            case x if strength.contains(x) => x\n\
    \            case x if strength.contains(x) => x\n            case x if strength.contains(x)\
    \ => x\n            case x if strength.contains(x) => x\n            case x if\
    \ strength.contains(x) => x\n            case x if strength.contains(x) => x\n\
    \            case x if strength.contains(x) => x\n            case x if strength.contains(x)\
    \ => x\n            case x if strength.contains(x) => x\n            case x if\
    \ strength.contains(x) => x\n            case x if strength.contains(x) => x\n\
    \            case x if strength.contains(x) => x\n            case x if strength.contains(x)\
    \ => x\n            case x if strength.contains(x) => x\n            case x if\
    \ strength.contains(x) => x\n            case x if strength.contains(x) => x\n\
    \            case x if strength.contains(x) => x\n            case x if strength.contains(x)\
    \ => x\n            case x if strength.contains(x) => x\n            case x if\
    \ strength.contains(x) => x\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgpjwgb7e.scala:81:0 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgpjwgb7e.scala:21:52\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mclass_name_map\e[0m = class_name.map(\e[36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgpjwgb7e.scala:21:67\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mclass_name_map\e[0m = class_name.map(\e[36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toLowerCase is not a member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgpjwgb7e.scala:22:79 --------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.values.map(\e[36mx\e\
    [0m => class_name_map.getOrElse(x, \e[31m0\e[0m) - x.toString.toString.toUpperCase.length).toArray\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \                    Found:    (x : String)\n\e[31m   |\e[0m                 \
    \                                 Required: Nothing\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpgpjwgb7e.scala:24:70 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmax_key\e[0m = extensions_map.keys.find(\e\
    [36mx\e[0m => strength.contains(x)).max\n\e[31m\e[31m   |\e[0m               \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                                  Found:    (x : String)\n\e\
    [31m   |\e[0m        "
  stdout: ''
  timestamp: 1659799804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = extensions_count_upper - strength\n        val strength_lower\
    \ = extensions_count_lower - strength\n        val extensions_count_diff = extensions_count\
    \ - strength\n        val extensions_count_diff_upper = extensions_count_upper\
    \ - extensions_count_diff\n        val extensions_count_diff_lower = extensions_count_lower\
    \ - extensions_count_diff\n        val extensions_count_diff_diff = extensions_count_diff\
    \ - strength\n        val extensions_count_diff_diff_upper = extensions_count_diff_upper\
    \ - extensions_count_diff_diff\n        val extensions_count_diff_diff_lower =\
    \ extensions_count_diff_lower - extensions_count_diff_diff\n        val extensions_count_diff_diff_diff\
    \ = extensions_count_diff_diff - strength\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_upper - extensions_count_diff_diff_diff\n     \
    \   val extensions_count_diff_diff_diff_lower = extensions_count_diff_diff_lower\
    \ - extensions_count_diff_diff_diff\n        val extensions_count_diff_diff_diff_diff\
    \ = extensions_count_diff_diff_diff - strength\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff\n\
    \        val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff\n        val extensions_count_diff_diff_diff_diff_diff\
    \ = extensions_count_diff_diff_diff_diff - strength\n        val extensions_count_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff\n        val extensions_count_diff_diff_diff_diff_diff_diff\
    \ = extensions_count_diff_diff_diff_diff_diff - strength\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_diff\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_diff_diff\n        val extensions_count_diff_diff_diff_diff_diff_diff_diff_diff\
    \ = extensions_count_diff_diff_diff_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph9j4p_ms.scala:43:67 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_diff_diff_diff_diff_diff_diff_lower\e\
    [0m = extensions_count_diff_diff_diff_diff_diff_diff_lower - extensions_count_diff_diff_diff_diff_diff_diff_diff\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mextensions_count_diff_diff_diff_diff_diff_diff_lower\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph9j4p_ms.scala:44:71\
    \ ------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_count_diff_diff_diff_diff_diff_diff_diff_diff\e[0m = extensions_count_diff_diff_diff_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: extensions_count_diff_diff_diff_\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph9j4p_ms.scala:45:5 ---------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799799
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.values.max\n        val\
    \ extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpny8_2lb0.scala:43:11 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpny8_2lb0.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > \e[31m0\e[0m).map(_._1)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpny8_2lb0.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > \e[31m0\e[0m).map(_._1)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpny8_2lb0.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > \e[31m0\e[0m).map(_._1)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpny8_2lb0.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions"
  stdout: ''
  timestamp: 1659799787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.sortWith((a, b) => a.length\
    \ - b.length)\n        val extensions_count_sorted_reversed = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_length = extensions_count_sorted_reversed.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum = extensions_count_sorted_reversed_length.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted = extensions_count_sorted_reversed_length.sortWith((a,\
    \ b) => a - b)\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted.reverse\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sum\n \
    \       val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sortWith((a,\
    \ b) => a - b)\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sorted.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sorted.sortWith((a,\
    \ b) => a - b)\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sorted.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcbe6k33m.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpcbe6k33m.scala:21:68 --------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \        \e[33mval\e[0m \e[36mextensions_count_sorted\e[0m = extensions.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a.length - b.length)\n\e[31m\e[31m   |\e[0m     \
    \                                                               ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Int\n\e[31m   |\e[0m                                                    \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcbe6k33m.scala:25:124\
    \ -------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_reversed_length_sum_sorted\e\
    [0m = extensions_count_sorted_reversed_length.sortWith((\e[36ma\e[0m, \e[36mb\e\
    [0m) => a - b)\n\e[31m\e[31m   |\e[0m                                        \
    \                                                                            \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \              Found:    Int\n\e[31m   |\e[0m                                \
    \                       Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpcbe6k33m.scala:27:147 -----------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_reversed_length_sum_sorted_reversed_length\e\
    [0m = extensions_count_sorted_reversed_length_sum_sorted_reversed.map(_.length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \    value length is not a member of Int\n\e[31m\e[31m-- Error: "
  stdout: ''
  timestamp: 1659799801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((acc,\
    \ x) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n        val strongest_extension\
    \ = extensions_map.maxBy(x => x._2)._2\n        s\"$class_name.$strongest_extension\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnclhl7sa.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnclhl7sa.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnclhl7sa.scala:22:86\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = extensions_map.foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m) =>\
    \ acc + (class_name_map(x._1) - class_name_map(x._2)))\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \             Found:    String\n\e[31m   |\e[0m                              \
    \                         Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpnclhl7sa.scala:22:109 -------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.foldLeft(\e\
    [31m0\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                   ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                       Found:    String\n\e[31m\
    \   |\e[0m                                                       Required: Nothing\n\
    \e[31m   |\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659799799
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_upper_ratio = extensions_count_upper / extensions_count.toDouble\n\
    \        val extensions_count_lower_ratio = extensions_count_lower / extensions_count.toDouble\n\
    \        val strength_upper = strength * extensions_count_upper_ratio\n      \
    \  val strength_lower = strength * extensions_count_lower_ratio\n        val strength_total\
    \ = strength_upper + strength_lower\n        val extensions_count_ratio = extensions_count\
    \ / extensions_count_total.toDouble\n        val extensions_count_ratio_upper\
    \ = extensions_count_ratio / extensions_count_upper.toDouble\n        val extensions_count_ratio_lower\
    \ = extensions_count_ratio / extensions_count_lower.toDouble\n        val strength_upper_ratio\
    \ = strength_upper * extensions_count_ratio_upper\n        val strength_lower_ratio\
    \ = strength_lower * extensions_count_ratio_lower\n        val strength_total_ratio\
    \ = strength_total * extensions_count_ratio_upper\n        val strength_total_ratio_upper\
    \ = strength_total_ratio * extensions_count_ratio_upper\n        val strength_total_ratio_lower\
    \ = strength_total_ratio * extensions_count_ratio_lower\n        val strength_total_ratio_total\
    \ = strength_total_ratio_upper + strength_total_ratio_lower\n        val strength_total_ratio_total_upper\
    \ = strength_total_ratio_total * extensions_count_ratio_upper\n        val strength_total_ratio_total_lower\
    \ = strength_total_ratio_total * extensions_count_ratio_lower\n        val strength_total_ratio_total_total\
    \ = strength_total_ratio_total_upper + strength_total_ratio_total_lower\n    \
    \    val strength_total_ratio_total_total_upper = strength_total_ratio_total_total\
    \ * extensions_count_ratio_upper\n        val strength_total_ratio_total_total_lower\
    \ = strength_total_ratio_total_total * extensions_count_ratio_lower\n        val\
    \ strength_total_ratio_total_total_total = strength_total_ratio_total_total_upper\
    \ + strength_total_ratio_total_total_lower\n        val strength_total_ratio_total_total_total_upper\
    \ = strength_total_ratio_total_total_total * extensions_count_ratio_upper\n  \
    \      val strength_total_ratio_total_total_total_lower = strength_total_ratio_total_total_total\
    \ * extensions_count_ratio_lower\n        val strength_total_ratio_total_total_total_total\
    \ = strength_total_ratio_total_total_total_upper + strength_total_ratio_total_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr7ocz7_z.scala:29:56 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_ratio\e\
    [0m = extensions_count / extensions_count_total.toDouble\n\e[31m\e[31m   |\e[0m\
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Not found: extensions_count_total\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr7ocz7_z.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799799
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') / e.toUpperCase.count(_ == 'B') * -1)\n   \
    \     val extensions_sorted = extensions_map.toSeq.sortWith(_ < _)\n        val\
    \ strength = extensions_sorted.last\n        val extension = extensions_sorted.head\n\
    \        s\"$class_name.$extension\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$1(tmpktq54oaa.scala:20)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.StrongestExtension(tmpktq54oaa.scala:20)\n\
    \tat Problem$.main(tmpktq54oaa.scala:27)\n\tat Problem.main(tmpktq54oaa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((a,\
    \ b) => math.max(a, b))\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\"\
    .\")\n        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5f1whlaf.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5f1whlaf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m = extensions_sorted.takeWhile(_._2\
    \ > \e[31m0\e[0m).map(_._1).mkString(\e[31m\".\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5f1whlaf.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.dropWhile(_ == \e[31m'.'\e[0m).dropRight(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5f1whlaf.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.dropWhile(_ == \e[31m'.'\e[0m).dropRight(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5f1whlaf.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorte"
  stdout: ''
  timestamp: 1659799799
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.size, e.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((a,\
    \ b) => math.max(a, b))\n        val extensions_sorted = extensions_map.values.sortWith((a,\
    \ b) => math.signum(a-b))\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x < strength)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ class_name + \".\" + extensions_sorted.indexOf(x)).mkString(\".\")\n       \
    \ extensions_sorted.headOption.getOrElse(class_name)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp58izcz51.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(\e[36mx\e[0m => x < strength)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp58izcz51.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.map(\e[36mx\e[0m => class_name + \e[31m\".\"\e[0m + extensions_sorted.indexOf(x)).mkString(\e\
    [31m\".\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp58izcz51.scala:22:54 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_map.values.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => math.signum(a-b))\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value sortWith is not a member of\
    \ Iterable[Int]\n3 errors found\n"
  stdout: ''
  timestamp: 1659799800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1) -> 1)\n        val extensions_count\
    \ = extensions_map.toSeq.sortBy(_._2).reverse\n        val extensions_count_sorted\
    \ = extensions_count.sortBy(_._1)\n        val extensions_count_sorted = extensions_count_sorted.take(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted._2\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toString.toInt\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqexwfiq0.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions_count_sorted.take(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e[0m \e[35mextensions_count_sorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqexwfiq0.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e[0m = extensions_count_sorted._2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqexwfiq0.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions_count_sorted.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqexwfiq0.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions_count_sorted.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be def"
  stdout: ''
  timestamp: 1659799800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    if (extensions_count > 1) {\n            val extensions_sorted = extensions.sortBy(_.length)\n\
    \            val extensions_sorted_upper = extensions_sorted.map(_.toUpperCase)\n\
    \            val extensions_sorted_lower = extensions_sorted.map(_.toLowerCase)\n\
    \            val strength_sorted = extensions_sorted_upper.map(_.length) - extensions_sorted_lower.map(_.length)\n\
    \            val strength_sorted_upper = extensions_sorted_upper.map(_.toUpperCase).sortBy(_.length)\n\
    \            val strength_sorted_lower = extensions_sorted_lower.map(_.toLowerCase).sortBy(_.length)\n\
    \            val strength_sorted_upper.head match {\n                case x if\
    \ strength_sorted_upper.contains(x) => \"%s.%s\".format(class_name, x)\n     \
    \           case x if strength_sorted_lower.contains(x) => \"%s.%s\".format(class_name,\
    \ x)\n                case _ => \"%s.%s\".format(class_name, extensions_sorted_upper.head)\n\
    \            }\n        } else {\n            \"%s.%s\".format(class_name, extensions.head)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyo8x8qxf.scala:36:8 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        } \e[33melse\e[0m {\n\e[31m\e[31m   |\e[0m  \
    \      ^\e[0m\n\e[31m   |\e[0m        '=' expected, but '}' found\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpyo8x8qxf.scala:28:72 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mstrength_sorted\e[0m\
    \ = extensions_sorted_upper.map(_.length) - extensions_sorted_lower.map(_.length)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of List[Int], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpyo8x8qxf.scala:32:77 --------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m                \e[33mcase\e[0m x \e[33mif\e[0m strength_sorted_upper.contains(x)\
    \ => \e[31m\"%s.%s\"\e[0m.format(class_name, x)\n\e[31m\e[31m   |\e[0m       \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    String\n\e[31m   |\e[0m                                                 \
    \       Required: Null\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyo8x8qxf.scala:33:77\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m                \e[33mcase\e\
    [0m x \e[33mif\e[0m strength_sorted_lower.contains(x) => \e[31m\"%s.%s\"\e[0m.format(class_name,\
    \ x)\n\e[31m\e[31m   |\e[0m                                                  \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                                            Found:    String\n\e[31m   |\e[0m\
    \              "
  stdout: ''
  timestamp: 1659799802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((x,\
    \ y) =>\n            val cap = x._1.length\n            val sm = y._1.length\n\
    \            val diff = cap - sm\n            val strength_diff = if (diff ==\
    \ 0) -1 else diff.toFloat\n            x._2 + strength_diff\n        )\n     \
    \   val class_name_with_strength = class_name_map + (strength -> class_name)\n\
    \        val strength_sorted = class_name_with_strength.sortBy(_._2)\n       \
    \ strength_sorted.head._3\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt_oaua62.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpt_oaua62.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt_oaua62.scala:23:24\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcap\e[0m = x._1.length\n\e[31m\e[31m   |\e[0m                      ^^^^\e\
    [0m\n\e[31m   |\e[0m                      value _1 is not a member of Int\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpt_oaua62.scala:27:14 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            x._2 + strength_diff\n\e[31m\e[31m   |\e\
    [0m            ^^^^\e[0m\n\e[31m   |\e[0m            value _2 is not a member\
    \ of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_oaua62.scala:29:57\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mclass_name_with_strength\e\
    [0m = class_name_map + (strength -> class_name)\n\e[31m\e[31m   |\e[0m       \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                Found:    (Int,\
    \ String)\n\e[31m   |\e[0m                                                Required:\
    \ (Nothing, Any)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt_oaua62.scala:30:55\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mstreng"
  stdout: ''
  timestamp: 1659799802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)\n        ).sortBy(_._1).reverse.map(_._2)\n\
    \        val strength = extensions_map.last\n        val extension = extensions_map.find(_._2\
    \ == strength).get._1\n        s\"$class_name.$extension\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfjdwo021.scala:23:46 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextension\e[0m = extensions_map.find(_._2\
    \ == strength).get._1\n\e[31m\e[31m   |\e[0m                                 \
    \           ^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \  value _2 is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val first_extension = sorted_extensions.head\n        val first_extension_strength\
    \ = extensions_map.getOrElse(first_extension, 0)\n        val first_extension_strength_frac\
    \ = first_extension_strength.toDouble / strength\n        val first_extension_strength_frac_str\
    \ = first_extension_strength_frac.toString.replaceAll(\"\\\\.\", \"%\")\n    \
    \    val first_extension_strength_frac_str = first_extension_strength_frac_str.replaceAll(\"\
    %\", \".\")\n        val first_extension_strength_frac_str = first_extension_strength_frac_str.replaceAll(\"\
    %\", \"\")\n        class_name + first_extension_strength_frac_str + first_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpda99oovn.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mfirst_extension_strength_frac_str\e\
    [0m = first_extension_strength_frac_str.replaceAll(\e[31m\"%\"\e[0m, \e[31m\"\
    .\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirst_extension_strength_frac_str is already defined as \e\
    [33mvalue\e[0m \e[35mfirst_extension_strength_frac_str\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpda99oovn.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfirst_extension_strength_frac_str\e[0m = first_extension_strength_frac_str.replaceAll(\e\
    [31m\"%\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirst_extension_strength_frac_str is already defined as \e\
    [33mvalue\e[0m \e[35mfirst_extension_strength_frac_str\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpda99oovn.scala:20:149\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e\
    [33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e[36me\e[0m => e.toUpperCase.count(_\
    \ == \e[31m'A'\e[0m) - e.toUpperCase.count(_ == \e[31m'B'\e[0m) - e.toUpperCase.count(_\
    \ == \e[31m'C'\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                           \
    \                                                                            \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                 Cannot prove that Int <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                        where:    K is a type\
    \ variable\n\e[31m   |\e[0m                                                  V\
    \ is a type variable\n\e[31m   |\e[0m                                      "
  stdout: ''
  timestamp: 1659799800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_map = extensions_map.toMap\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'Z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'Z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'Z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'Z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'Z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'Z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'Z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'Z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'Z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'Z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'Z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'Z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'Z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'Z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt8ytryn1.scala:51:53 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions_map.filter(_._\n\
    \e[31m\e[31m   |\e[0m                                                     ^\e\
    [0m\n\e[31m   |\e[0m                                   an identifier expected,\
    \ but '_' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt8ytryn1.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_map\e[0m = extensions_map.toMap\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mextensions_map\
    \ is already defined as \e[33mvalue\e[0m \e[35mextensions_map\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt8ytryn1.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_map\e[0m = extensions_map.filter(_._2 != \e[31m'Z'\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_map is already defined as \e[33mvalue\e[0m \e[35mextensions_map\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt8ytryn1.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions_map.filter(_._2\
    \ != \e[31m'Z'\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_map is already defined as \e[33mvalue\e[0m \e[35mextensions_map\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt8ytryn1.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = ex"
  stdout: ''
  timestamp: 1659799802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        // Your code here\n        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_str = if (strength == 0) \"0\" else strength.toString\n    \
    \    val extensions_str = extensions.map(_.toString).mkString(\".\")\n       \
    \ val class_name = class_name.replaceFirst(\"\\\\W\", \"\")\n        val class_name_upper\
    \ = class_name.toUpperCase()\n        val class_name_lower = class_name.toLowerCase()\n\
    \        val class_name_str = if (class_name_upper == class_name_lower) class_name\
    \ else class_name_upper + \".\" + class_name_lower\n        val class_name_str_upper\
    \ = if (class_name_upper == class_name_lower) class_name_upper else class_name_upper.toUpperCase()\n\
    \        val class_name_str_lower = if (class_name_upper == class_name_lower)\
    \ class_name_lower else class_name_lower.toLowerCase()\n        val class_name_str_str\
    \ = if (class_name_upper == class_name_lower) class_name_upper else class_name_upper.toUpperCase()\
    \ + \".\" + class_name_lower.toLowerCase()\n        val class_name_str_str_upper\
    \ = if (class_name_upper == class_name_lower) class_name_upper.toUpperCase() else\
    \ class_name_upper.toUpperCase() + \".\" + class_name_lower.toLowerCase().toUpperCase()\n\
    \        val class_name_str_str_lower = if (class_name_upper == class_name_lower)\
    \ class_name_lower.toLowerCase() else class_name_lower.toLowerCase().toLowerCase().toUpperCase()\n\
    \        val class_name_str_str_str = if (class_name_upper == class_name_lower)\
    \ class_name_upper.toUpperCase() + \".\" + class_name_lower.toLowerCase().toUpperCase()\
    \ else class_name_upper.toUpperCase() + \".\" + class_name_lower.toLowerCase().toLowerCase().toUpperCase()\n\
    \        val class_name_str_str_str_upper = if (class_name_upper == class_name_lower)\
    \ class_name_upper.toUpperCase() + \".\" + class_name_lower.toLowerCase().toLowerCase().toUpperCase()\
    \ else class_name_upper.toUpperCase() + \".\" + class_name_lower.toLowerCase().toLowerCase().toLowerCase().toUpperCase()\n\
    \        val class_name_str_str_str_lower = if (class_name_upper == class_name_lower)\
    \ class_name_lower.toLowerCase().toLowerCase().toUpperCase() else class_name_lower.toLowerCase().toLowerCase().toLowerCase().toUpperCase()\n\
    \        val class_name_str_str_str_str = if (class_name_upper == class_name_lower)\
    \ class_name_upper.toUpperCase() + \".\" + class_name_lower.toLowerCase().toLowerCase().toLowerCase().toUpperCase()\
    \ else class_name_upper.toUpperCase() + \".\" + class_name_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbirv3dd5.scala:27:25 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mclass_name\e[0m = class_name.replaceFirst(\e\
    [31m\"\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \       ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35mclass_name\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbirv3dd5.scala:40:5 ---------------------\e[0m\e\
    [0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => (x - class_name_map.get(x)).abs)\n        val max_strength = strength.max\n\
    \        val max_key = strength.indexWhere(x => x == max_strength)\n        val\
    \ max_extension = extensions(max_key)\n        class_name_map.get(max_extension)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4c4zgd8c.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp4c4zgd8c.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4c4zgd8c.scala:22:57\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mstrength\e[0m = extensions_map.values.map(\e[36mx\e[0m => (x - class_name_map.get(x)).abs)\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp4c4zgd8c.scala:22:78 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.values.map(\e\
    [36mx\e[0m => (x - class_name_map.get(x)).abs)\n\e[31m\e[31m   |\e[0m        \
    \                                                                      ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (x\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: Nothing\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659799803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val strongest_extension = sorted_extensions.head._1\n        val strongest_extension_strength\
    \ = sorted_extensions.head._2\n        val strongest_extension_strength_str =\
    \ if (strongest_extension_strength == 0) \"\" else s\"${strongest_extension_strength}%\"\
    \n        s\"$class_name.$strongest_extension_strength_str\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphn_i3bkk.scala:20:149 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.count(_ == \e[31m'A'\e[0m) - e.toUpperCase.count(_\
    \ == \e[31m'B'\e[0m) - e.toUpperCase.count(_ == \e[31m'C'\e[0m)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                        Cannot\
    \ prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                \
    \                        where:    K is a type variable\n\e[31m   |\e[0m     \
    \                                             V is a type variable\n\e[31m   |\e\
    [0m                                        .\n1 error found\n"
  stdout: ''
  timestamp: 1659799802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(x\
    \ => x.length).sum\n        val extensions_count_sorted = extensions.sortWith((x,\
    \ y) => x.length - y.length)\n        val extensions_count_sorted_length = extensions_count_sorted.map(x\
    \ => x.length).sum\n        val extensions_count_sorted_length_sorted = extensions_count_sorted.sortWith((x,\
    \ y) => x.length - y.length)\n        val extensions_count_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.map(x => x.length).sum\n        val extensions_count_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((x, y) => x.length - y.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length = extensions_count_sorted_length.map(x\
    \ => x.length).sortWith((x, y) => x.length - y.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((x, y) => x.length - y.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.map(x => x.length).sortWith((x, y) => x.length\
    \ - y.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((x, y) => x.length - y.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.map(x => x.length).sortWith((x, y) => x.length\
    \ - y.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((x, y) => x.length - y.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.map(x => x.length).sortWith((x, y) => x.length\
    \ - y.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((x, y) => x.length - y.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.map(x => x.length).sortWith((x, y) => x.length\
    \ - y.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((x, y) => x.length - y.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.map(x => x.length).sortWith((x, y) => x.length\
    \ - y.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2yzvnbg6.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2yzvnbg6.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\e\
    [0m = extensions_count_sorted_length.map(\e[36mx\e[0m => x.length).sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x.length - y.length)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp2yzvnbg6.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\e\
    [0m = extensions_count_sorted_length.sortWith((\e[36mx\e[0m, \e[36my\e[0m) =>\
    \ x.length - y.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] "
  stdout: ''
  timestamp: 1659799804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.max\n\
    \        val extensions_sorted = extensions_map.values.sortWith(_ < _)\n     \
    \   val strength_sorted = extensions_sorted.max\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_ < strength_sorted)\n        val extensions_sorted.mkString(class_name\
    \ + \".\")\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbhcbnq_b.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbhcbnq_b.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_sorted\e[0m = extensions_sorted.takeWhile(_ < strength_sorted)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpbhcbnq_b.scala:22:54 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_map.values.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                  value sortWith is not a member of Iterable[Int]\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbhcbnq_b.scala:25:50 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m extensions_sorted.mkString(class_name\
    \ + \e[31m\".\"\e[0m)\n\e[31m\e[31m   |\e[0m                                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \              Not found: +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbhcbnq_b.scala:26:5 ---------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659799802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_str = if (strength == 0) \"0\" else strength.toString\n    \
    \    val class_name_str = class_name.replaceAll(\"\\\\W\", \"\")\n        val\
    \ extensions_str = extensions.map(_.toLowerCase).mkString(\".\")\n        val\
    \ extensions_name_str = extensions.mkString(\".\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\W\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\.\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\$\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\[\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\]\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\^\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\*\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\+\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\?\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\*\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\+\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\?\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\*\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\+\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\?\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\*\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\+\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\?\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\*\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\+\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\?\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\*\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll(\"\\\\+\", \"\")\n        val extensions_name_str\
    \ = extensions_name_str.replaceAll\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6tyydi58.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mextensions_name_str\e[0m\
    \ = extensions_name_str.replaceAll(\e[31m\"\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_name_str is already defined as \e[33mvalue\e[0m\
    \ \e[35mextensions_name_str\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6tyydi58.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mextensions_name_str\e[0m\
    \ = extensions_name_str.replaceAll(\e[31m\"\\\\.\"\e[0m, \e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_name_str is already defined as \e[33mvalue\e[0m\
    \ \e[35mextensions_name_str\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6tyydi58.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mextensions_name_str\e[0m\
    \ = extensions_name_str.replaceAll(\e[31m\"\\\\$\"\e[0m, \e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_name_str is already defined as \e[33mvalue\e[0m\
    \ \e[35mextensions_name_str\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6tyydi58.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mextensions_name_str\e[0m\
    \ = extensions_name_str.replaceAll(\e[31m\"\\\\[\"\e[0m, \e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_name_str is already defined as \e[33mvalue\e[0m\
    \ \e[35mextensions_name_str\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659799803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = extensions_count_upper - strength\n        val strength_lower\
    \ = extensions_count_lower - strength\n        val strength_total = strength_upper\
    \ + strength_lower\n        if (strength_total > extensions_count)\n         \
    \   class_name + extensions.sortWith(_.length < _.length)(0)\n        else if\
    \ (strength_total == extensions_count)\n            class_name + extensions.sortWith(_.length\
    \ < _.length)(0)\n        else if (strength_total < extensions_count)\n      \
    \      class_name + extensions.sortWith(_.length < _.length)(0)\n        else\n\
    \            class_name + extensions.sortWith(_.length < _.length)(0)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4pqva2ai.scala:37)\n\tat Problem.main(tmp4pqva2ai.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_fraction = strength / extensions_count.toDouble\n        val\
    \ extensions_count_fraction = extensions_count.toDouble / extensions_count.toDouble\n\
    \        val extensions_count_fraction2 = extensions_count_fraction * extensions_count_fraction\n\
    \        val extensions_count_fraction3 = extensions_count_fraction2 * extensions_count_fraction\n\
    \        val extensions_count_fraction4 = extensions_count_fraction3 * extensions_count_fraction\n\
    \        val extensions_count_fraction5 = extensions_count_fraction4 * extensions_count_fraction\n\
    \        val extensions_count_fraction6 = extensions_count_fraction5 * extensions_count_fraction\n\
    \        val extensions_count_fraction7 = extensions_count_fraction6 * extensions_count_fraction\n\
    \        val extensions_count_fraction8 = extensions_count_fraction7 * extensions_count_fraction\n\
    \        val extensions_count_fraction9 = extensions_count_fraction8 * extensions_count_fraction\n\
    \        val extensions_count_fraction10 = extensions_count_fraction9 * extensions_count_fraction\n\
    \        val extensions_count_fraction11 = extensions_count_fraction10 * extensions_count_fraction\n\
    \        val extensions_count_fraction12 = extensions_count_fraction11 * extensions_count_fraction\n\
    \        val extensions_count_fraction13 = extensions_count_fraction12 * extensions_count_fraction\n\
    \        val extensions_count_fraction14 = extensions_count_fraction13 * extensions_count_fraction\n\
    \        val extensions_count_fraction15 = extensions_count_fraction14 * extensions_count_fraction\n\
    \        val extensions_count_fraction16 = extensions_count_fraction15 * extensions_count_fraction\n\
    \        val extensions_count_fraction17 = extensions_count_fraction16 * extensions_count_fraction\n\
    \        val extensions_count_fraction18 = extensions_count_fraction17 * extensions_count_fraction\n\
    \        val extensions_count_fraction19 = extensions_count_fraction18 * extensions_count_fraction\n\
    \        val extensions_count_fraction20 = extensions_count_fraction19 * extensions_count_fraction\n\
    \        val extensions_count_fraction21 = extensions_count_fraction20 * extensions_count_fraction\n\
    \        val extensions_count_fraction22 = extensions_count_fraction21 * extensions_count_fraction\n\
    \        val extensions_count_fraction23 = extensions_count_fraction22 * extensions_count_fraction\n\
    \        val extensions_count_fraction24 = extensions_count_fraction23 * extensions_count_fraction\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpkpeybtkt.scala:49:11 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkpeybtkt.scala:50:5 ---------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') / e.toUpperCase.count(_ == 'B') * 100).toMap\n\
    \        val strength = extensions_map.getOrElse(class_name, 0)\n        val sorted_extensions\
    \ = extensions_map.toSeq.sortBy(_._2).reverse\n        val first_extension = sorted_extensions.head\n\
    \        val first_extension_strength = extensions_map.getOrElse(first_extension,\
    \ 0)\n        val strength_difference = strength - first_extension_strength\n\
    \        val extension_str = first_extension + first_extension_strength - strength_difference\n\
    \        extension_str\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpdmqkn6_s.scala:20:123 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.count(_ == \e[31m'A'\e[0m) / e.toUpperCase.count(_\
    \ == \e[31m'B'\e[0m) * \e[31m100\e[0m).toMap\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                        Cannot prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m                                        where:    K is a type variable\n\
    \e[31m   |\e[0m                                                  V is a type variable\n\
    \e[31m   |\e[0m                                        .\n1 error found\n"
  stdout: ''
  timestamp: 1659799810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.sortWith((a, b) => a.length\
    \ - b.length)\n        val extensions_count_sorted_length = extensions_count_sorted.map(_.length)\n\
    \        val extensions_count_sorted_length_sorted = extensions_count_sorted.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_count_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith((a, b) => a.length - b.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted = extensions_count_sorted_length_sorted.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length.sortWith((a, b) => a.length -\
    \ b.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted.sortWith((a, b) => a.length\
    \ - b.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length.sortWith((a, b)\
    \ => a.length - b.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_count_sorted_length_sorted_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp93ltolv8.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp93ltolv8.scala:21:68 --------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \        \e[33mval\e[0m \e[36mextensions_count_sorted\e[0m = extensions.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a.length - b.length)\n\e[31m\e[31m   |\e[0m     \
    \                                                               ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Int\n\e[31m   |\e[0m                                                    \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp93ltolv8.scala:23:95\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_length_sorted\e\
    [0m = extensions_count_sorted.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a.length\
    \ - b.length)\n\e[31m\e[31m   |\e[0m                                         \
    \                                                      ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                       Found: \
    \   Int\n\e[31m   |\e[0m                                                     \
    \  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp93ltolv8.scala:24:111\
    \ -----------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_count_sorted_length_sorted_length\e[0m = extensions_count_sorted_length.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a.length - b.length)\n\e[31m\e[31m   |\e[0m     \
    \                                                                            \
    \                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                   value length is not a member of Int\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp93ltolv8.scala:25:123 -------------------\e[0"
  stdout: ''
  timestamp: 1659799815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => x.toUpperCase.count(_ == 'A') - x.toUpperCase.count(_ == 'B') - x.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.values.toList.sortWith(_\
    \ < _)\n        val first_extension = sorted_extensions.head\n        val first_extension_strength\
    \ = extensions_map.get(first_extension)\n        if (first_extension_strength\
    \ != strength) {\n            val first_extension_strength_str = first_extension_strength.map(x\
    \ => x.toString).mkString\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    ,\", \"\").replaceAll(\"[()]\", \"\")\n            val first_extension_strength_str\
    \ = first_extension_strength_str.replaceAll(\"[\\\\[\\\\]]\", \"\")\n        \
    \    val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\]\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\]\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\]\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\]\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\]\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\]\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\[\\\\]]\", \"\")\n            val first_extension_strength_str = first_extension_strength_str.replaceAll(\"\
    [\\\\]\\\\[\\\\]]\", \"\")\n            val first_extension_strength\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq123a0lj.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq123a0lj.scala:57:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmpq123a0lj.scala:20:149\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e\
    [33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e[36mx\e[0m => x.toUpperCase.count(_\
    \ == \e[31m'A'\e[0m) - x.toUpperCase.count(_ == \e[31m'B'\e[0m) - x.toUpperCase.count(_\
    \ == \e[31m'C'\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                           \
    \                                                                            \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                 Cannot prove that Int <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                        where:    K is a type\
    \ variable\n\e[31m   |\e[0m                                                  V\
    \ is a type variable\n\e[31m   |\e[0m                                        .\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq123a0lj.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mfirst_extension_strength_str\e\
    [0m = first_extension_strength_str.replaceAll(\e[31m\",\"\e[0m, \e[31m\"\"\e[0m).replaceAll(\e\
    [31m\"[()]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirst_extension_strength_str is already defined as \e[33mvalue\e\
    [0m \e[35mfirst_extension_strength_str\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq123a0lj.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mfirst_extension_strength_str\e\
    [0m = first_extension_strength_str."
  stdout: ''
  timestamp: 1659799815
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((acc,\
    \ x) => acc + extensions_map(x._2).length - extensions_map(x._1).length)\n   \
    \     val extensions_sorted = extensions_map.toSeq.sortBy(x => x._2.length - x._1.length)\n\
    \        val strongest_extension = extensions_sorted.head._1\n        val strongest_extension_name\
    \ = extensions_sorted.head._2\n        val class_name_with_strongest_extension\
    \ = class_name + \".\" + strongest_extension_name\n        if (strength == 0)\
    \ class_name_with_strongest_extension\n        else class_name_with_strongest_extension\
    \ + extensions_sorted.last._1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: ten\n\tat scala.collection.immutable.Map$Map3.apply(Map.scala:399)\n\
    \tat Problem$.$anonfun$2(tmprsv1vydd.scala:21)\n\tat Problem$.$anonfun$adapted$1(tmprsv1vydd.scala:21)\n\
    \tat scala.collection.IterableOnceOps.foldLeft(IterableOnce.scala:646)\n\tat scala.collection.IterableOnceOps.foldLeft$(IterableOnce.scala:642)\n\
    \tat scala.collection.AbstractIterable.foldLeft(Iterable.scala:926)\n\tat Problem$.StrongestExtension(tmprsv1vydd.scala:21)\n\
    \tat Problem$.main(tmprsv1vydd.scala:30)\n\tat Problem.main(tmprsv1vydd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).foldLeft(0)((x, y) => if (x == -1) y else\
    \ x + y)\n        val strength_map = strength.map(x => (x._1, x._2)).toMap\n \
    \       val strength_sum = strength_map.values.foldLeft(0)((x, y) => if (x ==\
    \ -1) y else x + y)\n        val strength_avg = strength_sum / extensions_map.size\n\
    \        val strength_min = strength_map.values.min\n        val strength_max\
    \ = strength_map.values.max\n        val strength_max_index = strength_map.values.indexOf(strength_max)\n\
    \        val strength_max_key = strength_map.keys.toList.apply(strength_max_index)\n\
    \        val strength_max_value = strength_map.values.toList.apply(strength_max_index)\n\
    \        val strength_max_key_index = strength_map.keys.toList.indexOf(strength_max_key)\n\
    \        val strength_max_key_value = strength_map.values.toList.apply(strength_max_key_index)\n\
    \        val strength_max_key_value_length = strength_max_key_value.length\n \
    \       val strength_max_key_value_length_avg = strength_max_key_value_length\
    \ / extensions_map.size\n        val strength_max_key_value_length_min = strength_max_key_value_length\
    \ / extensions_map.size\n        val strength_max_key_value_length_max = strength_max_key_value_length\
    \ / extensions_map.size\n        val strength_max_key_value_length_max_index =\
    \ strength_max_key_value_length / extensions_map.size\n        val strength_max_key_value_length_max_key\
    \ = strength_max_key_value_length / extensions_map.size\n        val strength_max_key_value_length_max_value\
    \ = strength_max_key_value_length / extensions_map.size\n        val strength_max_key_value_length_max_key_index\
    \ = strength_max_key_value_length / extensions_map.size\n        val strength_max_key_value_length_max_key_value\
    \ = strength_max_key_value_length / extensions_map.size\n        val strength_max_key_value_length_max_key_value_length\
    \ = strength_max_key_value_length / extensions_map.size\n        val strength_max_key_value_length_max_key_value_length_avg\
    \ = strength_max_key_value_length / extensions_map.size\n        val strength_max_key_value_length_max_key_value_length_min\
    \ = strength_max_key_value_length / extensions_map.size\n        val \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpi8_exfkb.scala:45:11 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpi8_exfkb.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpi8_exfkb.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi8_exfkb.scala:22:121\
    \ -------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = extensions_map.values.map(\e[36mx\e[0m => (x.toUpperCase, x.toLowerCase)).foldLeft(\e\
    [31m0\e[0m)((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x == -\e[31m1\e[0m)\
    \ y \e[33melse\e[0m x + y)\n\e[31m\e[31m   |\e[0m                            \
    \                                                                            \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \    Found:    (y : (String, String))\n\e[31m   |\e[0m                       \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmpi8_exfkb.scala:22:130 ----------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.values.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase))."
  stdout: ''
  timestamp: 1659799814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') + e.toUpperCase.count(_ == 'B') + e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.values.max\n        val\
    \ extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > strength).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.mkString(\"\") + \".\" + extensions_sorted.last\n      \
    \  class_name+\".\"+extensions_sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyc8z3qjc.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > strength).map(_._1)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyc8z3qjc.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.mkString(\e[31m\"\"\e[0m) + \e[31m\".\"\e[0m + extensions_sorted.last\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- Error: /tmp/tmpyc8z3qjc.scala:20:149 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.count(_ == \e[31m'A'\e[0m) + e.toUpperCase.count(_\
    \ == \e[31m'B'\e[0m) + e.toUpperCase.count(_ == \e[31m'C'\e[0m)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                        Cannot\
    \ prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                \
    \                        where:    K is a type variable\n\e[31m   |\e[0m     \
    \                                             V is a type variable\n\e[31m   |\e\
    [0m                                        .\n3 errors found\n"
  stdout: ''
  timestamp: 1659799813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') / e.toUpperCase.count(_ == 'B') * -1)\n   \
    \     val extensions_sorted = extensions_map.toSeq.sortWith(_ < _)\n        val\
    \ strength = extensions_sorted.last\n        val extension = extensions_sorted.head\n\
    \        s\"$class_name.$extension\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$1(tmpktq54oaa.scala:20)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.StrongestExtension(tmpktq54oaa.scala:20)\n\
    \tat Problem$.main(tmpktq54oaa.scala:27)\n\tat Problem.main(tmpktq54oaa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_diff = extensions_count - extensions_count_upper\n \
    \       val extensions_count_diff_upper = extensions_count_diff - extensions_count_lower\n\
    \        val extensions_count_diff_lower = extensions_count_diff - extensions_count_upper\n\
    \        val extensions_count_diff_diff_upper = extensions_count_diff_upper -\
    \ extensions_count_lower\n        val extensions_count_diff_diff_lower = extensions_count_diff_lower\
    \ - extensions_count_upper\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_upper - extensions_count_lower\n        val extensions_count_diff_diff_diff_lower\
    \ = extensions_count_diff_diff_lower - extensions_count_upper\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_upper - extensions_count_lower\n        val\
    \ extensions_count_diff_diff_diff_lower = extensions_count_diff_diff_diff_lower\
    \ - extensions_count_upper\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_upper - extensions_count_lower\n    \
    \    val extensions_count_diff_diff_diff_lower = extensions_count_diff_diff_diff_lower\
    \ - extensions_count_upper\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_upper - extensions_count_lower\n    \
    \    val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_lower\
    \ - extensions_count_upper\n        val extensions_count_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_upper - extensions_count_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_upper\n        val extensions_count_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_upper - extensions_count_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_upper\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_upper - extensions_count_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_upper\n        val extensions_count_diff_diff_diff_diff_diff_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_bwogl82.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_bwogl82.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_count_diff_diff_diff_upper\e[0m = extensions_count_diff_diff_diff_upper\
    \ - extensions_count_lower\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_diff_diff_diff_upper is already defined as\
    \ \e[33mvalue\e[0m \e[35mextensions_count_diff_diff_diff_upper\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_bwogl82.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_count_diff_diff_diff_lower\e[0m = extensions_count_diff_diff_diff_lower\
    \ - extensions_count_upper\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_diff_diff_diff_lower is already defined as\
    \ \e[33mvalue\e[0m \e[35mextensions_count_diff_diff_diff_lower\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_bwogl82.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_count_diff_diff_diff_lower\e[0m = extensions_count_diff_diff_diff_lower\
    \ - extensions_count_upper\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_diff_diff_diff_lower is already defined as\
    \ \e[33mvalue\e[0m \e[35mextensions_count_diff_diff_diff_lower\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be de"
  stdout: ''
  timestamp: 1659799811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(x\
    \ => x.toUpperCase).distinct.length\n        val class_name_count = class_name.map(x\
    \ => x.toUpperCase).distinct.length\n        val strength = class_name_count -\
    \ extensions_count\n        val extension = extensions.find(x => x.toUpperCase.contains(class_name))\n\
    \        if (extension == None) \"\"\n        else extension.drop(class_name_count).drop(extensions_count)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmlpdikbn.scala:21:53 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_count\e[0m =\
    \ class_name.map(\e[36mx\e[0m => x.toUpperCase).distinct.length\n\e[31m\e[31m\
    \   |\e[0m                                                   ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmlpdikbn.scala:25:50\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33melse\e[0m extension.drop(class_name_count).drop(extensions_count)\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    \e[1m\e[31mIterable\e[0m\e[1m\e[31m[\e\
    [0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m             Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (s, e) =>\n            val cap = e.length\n            val sm = e.toLowerCase\
    \ length\n            val strength = cap - sm\n            if (strength > s) s\
    \ \n            else s \n        }\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._2)\n\
    \        val extensions_sorted = extensions_sorted.take(strength)\n        val\
    \ extensions_sorted = extensions_sorted.map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.mkString(\"\") + \".\" + class_name\n        extensions_sorted.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkynwrdc6.scala:23:41 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36msm\e[0m = e.toLowerCase\
    \ length\n\e[31m\e[31m   |\e[0m                                         ^\e[0m\n\
    \e[31m   |\e[0m                          expression expected but \e[31mend of\
    \ statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkynwrdc6.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_sorted\e[0m = extensions_sorted.take(strength)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e[35mextensions_sorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkynwrdc6.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m = extensions_sorted.map(_._1)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkynwrdc6.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.mkString(\e[31m\"\"\e[0m) + \e[31m\".\"\e[0m + class_name\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkynwrdc6.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e["
  stdout: ''
  timestamp: 1659799813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    if (extensions_count > 1) {\n            val first_extension = extensions.sortBy(_.length).head\n\
    \            val first_extension_upper = first_extension.toUpperCase\n       \
    \     val first_extension_lower = first_extension.toLowerCase\n            if\
    \ (first_extension_upper == first_extension_lower) {\n                first_extension\n\
    \            } else {\n                first_extension_upper\n            }\n\
    \        } else {\n            class_name\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeu3jfmto.scala:38)\n\tat Problem.main(tmpeu3jfmto.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') / e.toUpperCase.count(_ == 'B') * -1)\n   \
    \     val strength_map = extensions_map.toMap\n        val max_strength = strength_map.max\n\
    \        val max_key = strength_map.keys.max\n        val max_value = strength_map.values.max\n\
    \        val max_key_index = strength_map.keys.indexOf(max_key)\n        val max_value_index\
    \ = strength_map.values.indexOf(max_value)\n        val max_key_index = max_key_index\
    \ + 1\n        val max_value_index = max_value_index + 1\n        val max_key_index\
    \ = max_key_index - 1\n        val max_value_index = max_value_index - 1\n   \
    \     val max_key_index = max_key_index + 1\n        val max_value_index = max_value_index\
    \ + 1\n        val max_key_index = max_key_index - 1\n        val max_value_index\
    \ = max_value_index - 1\n        val max_key_index = max_key_index + 1\n     \
    \   val max_value_index = max_value_index + 1\n        val max_key_index = max_key_index\
    \ - 1\n        val max_value_index = max_value_index - 1\n        val max_key_index\
    \ = max_key_index + 1\n        val max_value_index = max_value_index + 1\n   \
    \     val max_key_index = max_key_index - 1\n        val max_value_index = max_value_index\
    \ - 1\n        val max_key_index = max_key_index + 1\n        val max_value_index\
    \ = max_value_index + 1\n        val max_key_index = max_key_index - 1\n     \
    \   val max_value_index = max_value_index - 1\n        val max_key_index = max_key_index\
    \ + 1\n        val max_value_index = max_value_index + 1\n        val max_key_index\
    \ = max_key_index - 1\n        val max_value_index = max_value_index - 1\n   \
    \     val max_key_index = max_key_index + 1\n        val max_value_index = max_value_index\
    \ + 1\n        val max_key_index = max_key_index - 1\n        val max_value_index\
    \ = max_value_index - 1\n        val max_key_index = max_key_index + 1\n     \
    \   val max_value_index = max_value_index + 1\n        val max_key_index = max_key_index\
    \ - 1\n        val max_value_index = max_value_index - 1\n        val max_key_index\
    \ = max_key_index + 1\n        val max_value_index = max_value_index + 1\n   \
    \     val max_key_index = max_key_index - 1\n        val max_value_index = max_value_index\
    \ - 1\n        val max_key_index = max_key_index + 1\n        val max_value_index\
    \ = max_value_index + 1\n        val max_key_index = max_key_index - 1\n     \
    \   val max_value_index = max_value_index - 1\n        val max_key_index = max_key_index\
    \ + 1\n        val max_value\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\",\
    \ \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_5p54oif.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_5p54oif.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_key_index\e[0m = max_key_index + \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax_key_index\
    \ is already defined as \e[33mvalue\e[0m \e[35mmax_key_index\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_5p54oif.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_value_index\e[0m = max_value_index + \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax_value_index\
    \ is already defined as \e[33mvalue\e[0m \e[35mmax_value_index\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_5p54oif.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_key_index\e[0m = max_key_index - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax_key_index\
    \ is already defined as \e[33mvalue\e[0m \e[35mmax_key_index\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_5p54oif.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_value_index\e[0m = max_value_index - \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax_value_index\
    \ is already defined as \e[33mvalue\e[0m \e[35mmax_value_index\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e"
  stdout: ''
  timestamp: 1659799815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)\n        ).sortBy(x => x._1 - x._2).head\n\
    \        val strength = extensions_map.getOrElse(extensions_map.size - 1, -1)\n\
    \        val extension = extensions_map.getOrElse(extensions_map.size - 2, \"\"\
    )\n        class_name + extension\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzmtvhxbt.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.getOrElse(extensions_map.size\
    \ - \e[31m1\e[0m, -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value getOrElse\
    \ is not a member of (Int, Int)\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzmtvhxbt.scala:23:39\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mextension\e[0m = extensions_map.getOrElse(extensions_map.size - \e[31m2\e\
    [0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value getOrElse is not a member of\
    \ (Int, Int)\n2 errors found\n"
  stdout: ''
  timestamp: 1659799815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val class_name_count = class_name.length\n        val strength = extensions_count\
    \ - class_name_count\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extension_first = extensions_sorted.head\n\
    \        val class_name_first = class_name.substring(0, class_name_count)\n  \
    \      val extension_last = extensions_sorted.last\n        val class_name_last\
    \ = class_name.substring(class_name_count)\n        val extension_first = extension_first\n\
    \        val class_name_first = class_name_first\n        val extension_last =\
    \ extension_last\n        val class_name_last = class_name_last\n        val extension_first\
    \ = extension_first\n        val class_name_first = class_name_first\n       \
    \ val extension_last = extension_last\n        val class_name_last = class_name_last\n\
    \        val extension_first = extension_first\n        val class_name_first =\
    \ class_name_first\n        val extension_last = extension_last\n        val class_name_last\
    \ = class_name_last\n        val extension_first = extension_first\n        val\
    \ class_name_first = class_name_first\n        val extension_last = extension_last\n\
    \        val class_name_last = class_name_last\n        val extension_first =\
    \ extension_first\n        val class_name_first = class_name_first\n        val\
    \ extension_last = extension_last\n        val class_name_last = class_name_last\n\
    \        val extension_first = extension_first\n        val class_name_first =\
    \ class_name_first\n        val extension_last = extension_last\n        val class_name_last\
    \ = class_name_last\n        val extension_first = extension_first\n        val\
    \ class_name_first = class_name_first\n        val extension_last = extension_last\n\
    \        val class_name_last = class_name_last\n        val extension_first =\
    \ extension_first\n        val class_name_first = class_name_first\n        val\
    \ extension_last = extension_last\n        val class_name_last = class_name_last\n\
    \        val extension_first = extension_first\n        val class_name_first =\
    \ class_name_first\n        val extension_last = extension_last\n        val class_name_last\
    \ = class_name_last\n        val extension_first = extension_first\n        val\
    \ class_name_first = class_name_first\n        val extension_last = extension_last\n\
    \        val class_name_last = class_name_last\n        val extension_first =\
    \ extension_first\n        val class_name_first = class_name_first\n        val\
    \ extension_last = extension_last\n        val class_name_last = class_name_last\n\
    \        val extension_first = extension_first\n        val class_name_first =\
    \ class_name_first\n        \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\",\
    \ \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvfcyymu2.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mextension_first\e[0m = extension_first\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mextension_first is already defined as \e[33mvalue\e[0m \e[35mextension_first\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvfcyymu2.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mclass_name_first\e[0m = class_name_first\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mclass_name_first is already defined as \e[33mvalue\e[0m \e[35mclass_name_first\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvfcyymu2.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mextension_last\e[0m = extension_last\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mextension_last is already defined as \e[33mvalue\e[0m \e[35mextension_last\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvfcyymu2.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mclass_name_last\e[0m = class_name_last\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mclass_name_last is already defined as \e[33mvalue\e[0m \e[35mclass_name_last\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvfcyymu2.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mextension_first\e[0m = extension_first\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_map_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n    \
    \    val extensions_map_sorted_keys = extensions_map_sorted.map(_._1)\n      \
    \  val extensions_map_sorted_values = extensions_map_sorted.map(_._2)\n      \
    \  val extensions_map_sorted_keys_sorted = extensions_map_sorted_keys.toSeq.sortBy(_)\n\
    \        val extensions_map_sorted_keys_sorted_values = extensions_map_sorted_keys_sorted.map(e\
    \ => extensions_map_sorted_values.find(_._1 == e).get._2)\n        val extensions_map_sorted_keys_sorted_values_sorted\
    \ = extensions_map_sorted_keys_sorted_values.toSeq.sortBy(_)\n        val extensions_map_sorted_keys_sorted_values_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted.map(e => extensions_map_sorted_values.find(_._1\
    \ == e).get._2)\n        val extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_sorted.map(e => extensions_map_sorted_values.find(_._1\
    \ == e).get._2)\n        val extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted.map(e => extensions_map_sorted_values.find(_._1\
    \ == e).get._2)\n        val extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted.map(e\
    \ => extensions_map_sorted_values.find(_._1 == e).get._2)\n        val extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted.map(e\
    \ => extensions_map_sorted_values.find(_._1 == e).get._2)\n        val extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted.map(e\
    \ => extensions_map_sorted_values.find(_._1 == e).get._2)\n        val extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted.map(e\
    \ => extensions_map_sorted_values.find(_._1 == e).get._2)\n        val extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.map(e\
    \ => extensions_map_sorted_values.find(_._\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7yhhn5fh.scala:34:253 --------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mextensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\e\
    [0m = extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.map(\e\
    [36me\e[0m => extensions_map_sorted_values.find(_._\n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \    an identifier expected, but '_' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmp7yhhn5fh.scala:32:12 ---------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mextensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted\e\
    [0m = extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted.map(\e\
    [36me\e[0m => extensions_map_sorted_values.find(_._1 == e).get._2)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  extensions_map_sorted_keys_sorted_values_sorted_sorted_sorted_sorted_sorted_sorted\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp7yhhn5fh.scala:20:100 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m "
  stdout: ''
  timestamp: 1659799816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((acc,\
    \ x) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n        val strongest_extension\
    \ = extensions_map.maxBy(_._2)._1\n        class_name.toString + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptuicry9r.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmptuicry9r.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptuicry9r.scala:22:86\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = extensions_map.foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m) =>\
    \ acc + (class_name_map(x._1) - class_name_map(x._2)))\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \             Found:    String\n\e[31m   |\e[0m                              \
    \                         Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptuicry9r.scala:22:109 -------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.foldLeft(\e\
    [31m0\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                   ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                       Found:    String\n\e[31m\
    \   |\e[0m                                                       Required: Nothing\n\
    \e[31m   |\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659799815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (s, e) =>\n            val c = class_name_map.getOrElse(e._1, e._1)\n    \
    \        val s = s + (e._2.count(x => x.isUpper) - e._2.count(x => x.isLower))\n\
    \            s + e._2.count(x => x.isUpper)\n        }\n        val class_name_with_strength\
    \ = class_name_map.getOrElse(class_name, class_name)\n        val strength_str\
    \ = if (strength == 0) \"\" else s\"${class_name_with_strength}.${extensions_map.getOrElse(class_name_with_strength,\
    \ \"\")}\"\n        strength_str\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppxxh86ag.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppxxh86ag.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppxxh86ag.scala:23:47\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e\
    [36mc\e[0m = class_name_map.getOrElse(e._1, e._1)\n\e[31m\e[31m   |\e[0m     \
    \                                        ^^^^\e[0m\n\e[31m   |\e[0m          \
    \                                   Found:    String\n\e[31m   |\e[0m        \
    \                                     Required: Nothing\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppxxh86ag.scala:27:64 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mclass_name_with_strength\e\
    [0m = class_name_map.getOrElse(class_name, class_name)\n\e[31m\e[31m   |\e[0m\
    \                                                                ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         Found:    (class_name\
    \ : String)\n\e[31m   |\e[0m                                         Required:\
    \ Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = extensions_count_upper - strength\n        val strength_lower\
    \ = extensions_count_lower - strength\n        val strength_sum = strength_upper\
    \ + strength_lower\n        val strength_average = strength_sum / extensions_count.toDouble\n\
    \        val strength_min = extensions_count.toDouble * strength_average\n   \
    \     val strength_max = extensions_count.toDouble * strength_average\n      \
    \  val strength_max_index = extensions.zipWithIndex.maxBy(_._2)._2\n        val\
    \ strength_max_index = strength_max_index + 1 // because index starts from 0\n\
    \        val strength_max_index = strength_max_index.toString.toInt\n        val\
    \ extension = extensions.take(strength_max_index).mkString(\".\")\n        val\
    \ extension_upper = extensions.take(strength_max_index).map(_.toUpperCase).mkString(\"\
    .\")\n        val extension_lower = extensions.take(strength_max_index).map(_.toLowerCase).mkString(\"\
    .\")\n        val extension_average = extensions_count.toDouble * strength_average\n\
    \        val extension_average = extension_average.toString.toInt\n        val\
    \ extension_average = extension_average.toString.toDouble\n        val extension_average\
    \ = extension_average.toString.toInt\n        val extension_average = extension_average.toString.toDouble\n\
    \        val extension_average = extension_average.toString.toInt\n        val\
    \ extension_average = extension_average.toString.toDouble\n        val extension_average\
    \ = extension_average.toString.toInt\n        val extension_average = extension_average.toString.toDouble\n\
    \        val extension_average = extension_average.toString.toInt\n        val\
    \ extension_average = extension_average.toString.toDouble\n        val extension_average\
    \ = extension_average.toString.toInt\n        val extension_average = extension_average.toString.toDouble\n\
    \        val extension_average = extension_average.toString.toInt\n        val\
    \ extension_average = extension_average.toString.toDouble\n        val extension_average\
    \ = extension_average.toString.toInt\n        val extension_average = extension_average.toString.toDouble\n\
    \        val extension_average = extension_average.toString.toInt\n        \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8gbxmann.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mstrength_max_index\e[0m\
    \ = strength_max_index + \e[31m1\e[0m \e[34m// because index starts from 0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrength_max_index is already defined as \e[33mvalue\e[0m\
    \ \e[35mstrength_max_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8gbxmann.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mstrength_max_index\e[0m\
    \ = strength_max_index.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrength_max_index is already defined as \e[33mvalue\e[0m\
    \ \e[35mstrength_max_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8gbxmann.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mextension_average\e[0m =\
    \ extension_average.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextension_average is already defined as \e[33mvalue\e[0m \e\
    [35mextension_average\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8gbxmann.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mextension_average\e[0m =\
    \ extension_average.toString.toDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextension_average is already defined as \e[33mvalue\e[0m \e\
    [35mextension_average\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Nam"
  stdout: ''
  timestamp: 1659799815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (acc, x) => acc + (class_name_map(x._1) - class_name_map(x._2)) }\n      \
    \  val strongest_extension = extensions_map.maxBy(_._2)._1\n        val strongest_extension_strength\
    \ = extensions_map.maxBy(_._2)._2\n        val class_name_with_strongest_extension\
    \ = class_name_map(strongest_extension)\n        val strongest_extension_class_name\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension\n      \
    \  val strongest_extension_class_name_with_strongest_extension = class_name_with_strongest_extension\
    \ + \".\" + strongest_extension_strength\n        val strongest_extension_class_name_with_strongest_extension_strength\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension_strength\n\
    \        val strongest_extension_class_name_with_strongest_extension_strength_2\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension_strength_2\n\
    \        val strongest_extension_class_name_with_strongest_extension_strength_3\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension_strength_3\n\
    \        val strongest_extension_class_name_with_strongest_extension_strength_4\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension_strength_4\n\
    \        val strongest_extension_class_name_with_strongest_extension_strength_5\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension_strength_5\n\
    \        val strongest_extension_class_name_with_strongest_extension_strength_6\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension_strength_6\n\
    \        val strongest_extension_class_name_with_strongest_extension_strength_7\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension_strength_7\n\
    \        val strongest_extension_class_name_with_strongest_extension_strength_8\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension_strength_8\n\
    \        val strongest_extension_class_name_with_strongest_extension_strength_9\
    \ = class_name_with_strongest_extension + \".\" + strongest_extension_strength_9\n\
    \        val strongest_extension_class_name_with_strongest_extension\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9isghf9x.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9isghf9x.scala:21:52\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mclass_name_map\e[0m = class_name.map(\e[36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9isghf9x.scala:21:67\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mclass_name_map\e[0m = class_name.map(\e[36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toLowerCase is not a member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9isghf9x.scala:22:88 --------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.foldLeft(\e[31m0\e\
    [0m) { (\e[36macc\e[0m, \e[36mx\e[0m) => acc + (class_name_map(x._1) - class_name_map(x._2))\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                                   ^^^^\e[0m\n\e[31m   |\e[0m               \
    \                                        Found:    String\n\e[31m   |\e[0m   \
    \                                                    Required: Nothing\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9isghf9x.scala:22:111 -------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.foldLeft(\e\
    [31m0\e[0m) { (\e[36macc\e[0m, \e[36mx\e[0m) => acc + (class_name_map(x._1) -\
    \ class_name_map(x._2)) }\n\e[31m\e[31m   |\e[0m                             \
    \                                                                             "
  stdout: ''
  timestamp: 1659799821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpry1oh41w.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions.map(_.length).sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpry1oh41w.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions.map(_.length).sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpry1oh41w.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions.map(_.length).sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpry1oh41w.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions.map(_.length).sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definiti"
  stdout: ''
  timestamp: 1659799817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((x,\
    \ y) => x - y)\n        val extensions_sorted = extensions_map.values.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.drop(1)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.drop(1)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.drop(1)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.drop(1)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.drop(1)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.drop(1)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.drop(1)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.drop(1)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extension\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp85cdaa64.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mextensions_sorted is already defined as \e[33mvalue\e[0m \e[35mextensions_sorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp85cdaa64.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m = extensions_sorted.drop(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp85cdaa64.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mextensions_sorted is already defined as \e[33mvalue\e[0m \e[35mextensions_sorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp85cdaa64.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m = extensions_sorted.drop(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp85cdaa64.s"
  stdout: ''
  timestamp: 1659799817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase - e.toLowerCase -> 1)).toMap\n        val class_name_map =\
    \ class_name.split('').map(c => (c.toUpperCase -> 1)).toMap\n        val strength\
    \ = class_name_map.foldLeft(0) { (s, c) =>\n            val extension_strength\
    \ = extensions_map.getOrElse(c._1, 0)\n            s + extension_strength\n  \
    \      }\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val extension_strength = extensions_sorted.head._2\n        val extension_str\
    \ = extensions_sorted.head._1\n        val extension_str = extension_str + extension_strength\n\
    \        class_name + extension_str\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsr7y14ti.scala:21:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.split('').map(\e\
    [36mc\e[0m => (c.toUpperCase -> \e[31m1\e[0m)).toMap\n\e[31m\e[31m   |\e[0m  \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                     empty character literal\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpsr7y14ti.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mextension_str\e[0m = extension_str\
    \ + extension_strength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextension_str is already defined as \e[33mvalue\e[0m \e[35mextension_str\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpsr7y14ti.scala:20:64 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => (e.toUpperCase - e.toLowerCase -> \e[31m1\e[0m)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                  ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpsr7y14ti.scala:26:65 -----------------------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mBigInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0"
  stdout: ''
  timestamp: 1659799818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((a,\
    \ b) => if (a > b) a else b)\n        val extensions_sorted = extensions_map.values.sortWith((a,\
    \ b) => a > b)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x < strength).mkString(\".\")\n        className + extensions_sorted\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmj8w5aj9.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(\e[36mx\e[0m => x < strength).mkString(\e[31m\"\
    .\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpmj8w5aj9.scala:22:54 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_map.values.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a > b)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value sortWith is not a member of\
    \ Iterable[Int]\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmj8w5aj9.scala:24:8\
    \ -------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        className + extensions_sorted\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ className\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.size, e.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((a,\
    \ b) => math.max(a, b))\n        val extensions_sorted = extensions_map.values.sortWith((a,\
    \ b) => a > b)\n        val strongest_extension = extensions_sorted.head\n   \
    \     val class_name_with_strongest_extension = class_name + \".\" + strongest_extension\n\
    \        val class_name_with_strongest_extension_lowercase = class_name_with_strongest_extension.toLowerCase\n\
    \        if (extensions_map.contains(class_name_with_strongest_extension_lowercase))\
    \ {\n            class_name_with_strongest_extension_lowercase\n        } else\
    \ {\n            StrongestExtension(class_name_with_strongest_extension_lowercase,\
    \ extensions_sorted)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgakwyzaq.scala:22:54 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_map.values.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a > b)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value sortWith is not a member of\
    \ Iterable[Int]\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgakwyzaq.scala:26:36\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m (extensions_map.contains(class_name_with_strongest_extension_lowercase))\
    \ {\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      Found:    (class_name_with_strongest_extension_lowercase\
    \ : String)\n\e[31m   |\e[0m      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((x,\
    \ y) => if (x < y) x else y)\n        val strongest_extension = extensions_map.values.min\n\
    \        val class_name_with_strongest_extension = class_name + strongest_extension.mkString\n\
    \        val class_name_with_strongest_extension_lowercase = class_name_with_strongest_extension.toLowerCase\n\
    \        val class_name_with_strongest_extension_uppercase = class_name_with_strongest_extension.toUpperCase\n\
    \        val class_name_with_strongest_extension_uppercase_lowercase = class_name_with_strongest_extension_uppercase\
    \ + class_name_with_strongest_extension_lowercase\n        val class_name_with_strongest_extension_uppercase_lowercase_lowercase\
    \ = class_name_with_strongest_extension_uppercase_lowercase + class_name_with_strongest_extension_lowercase\n\
    \        val class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase\
    \ = class_name_with_strongest_extension_uppercase_lowercase_lowercase + class_name_with_strongest_extension_lowercase\n\
    \        val class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase\
    \ = class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase\
    \ + class_name_with_strongest_extension_lowercase\n        val class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase_lowercase\
    \ = class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase\
    \ + class_name_with_strongest_extension_lowercase\n        val class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase\
    \ = class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase_lowercase\
    \ + class_name_with_strongest_extension_lowercase\n        val class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase\
    \ = class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase\
    \ + class_name_with_strongest_extension_lowercase\n        val class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase\
    \ = class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase\
    \ + class_name_with_strongest_extension_lowercase\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpffrrs__7.scala:23:83 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mclass_name_with_strongest_extension\e\
    [0m = class_name + strongest_extension.mkString\n\e[31m\e[31m   |\e[0m       \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue mkString is not a member of Int - did you mean strongest_extension.toString?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpffrrs__7.scala:33:150 -----------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mclass_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase\e\
    [0m = class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase\
    \ + class_name_with_strongest_extension_lowercase\n\e[31m\e[31m   |\e[0m     \
    \                                                                            \
    \                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: class_name_with_strongest_extension_uppercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase_lowercase\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpffrrs__7.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.split('').map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => class_name_map.getOrElse(x, 0) - x.toUpperCase.length).sum\n        val strongest_extension\
    \ = extensions_map.values.filter(x => x.toUpperCase.length == strength).head\n\
    \        class_name + \".\" + strongest_extension\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6brwztgr.scala:21:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.split('').map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                                    empty character literal\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp6brwztgr.scala:22:112 ----------------------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.values.map(\e\
    [36mx\e[0m => class_name_map.getOrElse(x, \e[31m0\e[0m) - x.toUpperCase.length).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0mambiguous given instances: both \e[33mobject\e[0m \e[35mBigDecimalIsFractional\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mShortIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659799820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') / e.toUpperCase.count(_ == 'B') * -1)\n   \
    \     val strength = extensions_map.max\n        val extensions_sorted = extensions_map.toList.sortWith(_\
    \ < _)\n        val extensions_sorted = extensions_sorted.takeWhile(_ < strength)\n\
    \        val extensions_sorted = extensions_sorted.mkString(\"\") + \".\" + extensions_sorted.last\n\
    \        val extensions_sorted = extensions_sorted.replace(\".\", \"\")\n    \
    \    class_name + extensions_sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptv4l9mrs.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_ < strength)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptv4l9mrs.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.mkString(\e[31m\"\"\e[0m) + \e[31m\".\"\e[0m + extensions_sorted.last\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptv4l9mrs.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.replace(\e[31m\".\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)\n        ).sortBy(_._1).reverse.map(x\
    \ => x._2).foldLeft(0)((x, y) => x + y)\n        val strength = extensions_map.last\n\
    \        val extension = extensions_map.filter(_._2 == strength).head\n      \
    \  s\"$class_name.$extension\"\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbvt7842l.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.last\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                       value last is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbvt7842l.scala:23:39 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextension\e[0m = extensions_map.filter(_._2\
    \ == strength).head\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value filter is not a member of Int\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = extensions_count_upper - strength\n        val strength_lower\
    \ = extensions_count_lower - strength\n        val extensions_count_upper_small\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower_small\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength_upper_small\
    \ = extensions_count_upper_small - strength\n        val strength_lower_small\
    \ = extensions_count_lower_small - strength\n        val extensions_count_lower_large\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength_lower_large\
    \ = extensions_count_lower_large - strength\n        val extensions_count_upper_large\
    \ = extensions.map(_.toUpperCase.length).sum\n        val strength_upper_large\
    \ = extensions_count_upper_large - strength\n        val extensions_count_large\
    \ = extensions.map(_.length).sum\n        val strength_large = extensions_count_large\
    \ - strength\n        val extensions_count_small = extensions.map(_.length).sum\n\
    \        val strength_small = extensions_count_small - strength\n        val extensions_count_large_small\
    \ = extensions.map(_.length).sum\n        val strength_large_small = extensions_count_large_small\
    \ - strength\n        val extensions_count_small_large = extensions.map(_.length).sum\n\
    \        val strength_small_large = extensions_count_small_large - strength\n\
    \        val extensions_count_small_small_large = extensions.map(_.length).sum\n\
    \        val strength_small_small_large = extensions_count_small_small_large -\
    \ strength\n        val extensions_count_small_small_small_large = extensions.map(_.length).sum\n\
    \        val strength_small_small_small_large = extensions_count_small_small_small_large\
    \ - strength\n        val extensions_count_small_small_small_small_large = extensions.map(_.length).sum\n\
    \        val strength_small_small_small_small_large = extensions_count_small_small_small_small_large\
    \ - strength\n        val extensions_count_small_small_small_small_small_large\
    \ = extensions.map(_.length).sum\n        val strength_small_small_small_small_small_large\
    \ = extensions_count_small_small_small_small_small_large - strength\n        val\
    \ extensions_count_small_small_small_small_small_small_large = extensions.map(_.length).sum\n\
    \        val strength_small_small_small_small_small_small_large = extensions_count_small_small_small_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk9ma4rv1.scala:51:65 ------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mstrength_small_small_small_small_small_small_large\e\
    [0m = extensions_count_small_small_small_\n\e[31m\e[31m   |\e[0m             \
    \                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Not found: extensions_count_small_small_small_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk9ma4rv1.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_upper_ratio = extensions_count_upper / extensions_count.toDouble\n\
    \        val extensions_count_lower_ratio = extensions_count_lower / extensions_count.toDouble\n\
    \        val strength_ratio = strength / extensions_count.toDouble\n        val\
    \ extensions_count_ratio = extensions_count_upper / extensions_count_lower\n \
    \       val extensions_count_ratio_upper = extensions_count_upper_ratio / extensions_count_ratio\n\
    \        val extensions_count_ratio_lower = extensions_count_lower_ratio / extensions_count_ratio\n\
    \        val strength_upper = strength_ratio / extensions_count_ratio_upper\n\
    \        val strength_lower = strength_ratio / extensions_count_ratio_lower\n\
    \        val extensions_count_ratio_upper = extensions_count_upper_ratio / extensions_count_ratio\n\
    \        val extensions_count_ratio_lower = extensions_count_lower_ratio / extensions_count_ratio\n\
    \        val strength_upper = strength_ratio / extensions_count_ratio_upper\n\
    \        val strength_lower = strength_ratio / extensions_count_ratio_lower\n\
    \        val extensions_count_ratio_upper = extensions_count_upper_ratio / extensions_count_ratio\n\
    \        val extensions_count_ratio_lower = extensions_count_lower_ratio / extensions_count_ratio\n\
    \        val strength_upper = strength_ratio / extensions_count_ratio_upper\n\
    \        val strength_lower = strength_ratio / extensions_count_ratio_lower\n\
    \        val extensions_count_ratio_upper = extensions_count_upper_ratio / extensions_count_ratio\n\
    \        val extensions_count_ratio_lower = extensions_count_lower_ratio / extensions_count_ratio\n\
    \        val strength_upper = strength_ratio / extensions_count_ratio_upper\n\
    \        val strength_lower = strength_ratio / extensions_count_ratio_lower\n\
    \        val extensions_count_ratio_upper = extensions_count_upper_ratio / extensions_count_ratio\n\
    \        val extensions_count_ratio_lower = extensions_count_lower_ratio / extensions_count_ratio\n\
    \        val strength_upper = strength_ratio / extensions_count_ratio_upper\n\
    \        val strength_lower = strength_ratio / extensions_count_ratio_lower\n\
    \        val extensions_count_ratio_upper = extensions_count_upper_ratio / extensions_count_ratio\n\
    \        val extensions_count_ratio_lower = extensions_count_lower_\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgocfj1r.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_ratio_upper\e\
    [0m = extensions_count_upper_ratio / extensions_count_ratio\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_ratio_upper is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_ratio_upper\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgocfj1r.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_ratio_lower\e\
    [0m = extensions_count_lower_ratio / extensions_count_ratio\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_ratio_lower is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_ratio_lower\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxgocfj1r.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mstrength_upper\e[0m = strength_ratio\
    \ / extensions_count_ratio_upper\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrength_upper is already defined as \e[33mvalue\e[0m \e[35mstrength_upper\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxgocfj1r.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mstrength_lower\e[0m = strength_ratio\
    \ / extensions_count_ratio_lower\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrength_lower is already defined as \e[33mvalue\e[0m \e[35mstren"
  stdout: ''
  timestamp: 1659799826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.sortBy(_.length)\n        val\
    \ extensions_count_sorted_reversed = extensions_count_sorted.reverse\n       \
    \ val extensions_count_sorted_reversed_length = extensions_count_sorted_reversed.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum = extensions_count_sorted_reversed_length.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted = extensions_count_sorted_reversed_length.sortBy(_.sum)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed = extensions_count_sorted_reversed_length_sum_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sum\n \
    \       val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sortBy(_.sum)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sorted.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.sortBy(_.sum)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6fneabqq.scala:25:114 -----------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_reversed_length_sum_sorted\e\
    [0m = extensions_count_sorted_reversed_length.sortBy(_.sum)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                      ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                             value sum is not a member of Int\n\e[31m\e[31m--\
    \ Error: /tmp/tmp6fneabqq.scala:25:118 ----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_reversed_length_sum_sorted\e\
    [0m = extensions_count_sorted_reversed_length.sortBy(_.sum)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                            ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp6fneabqq.scala:30:101 --------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\e\
    [0m = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                             ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp6fneabqq.scala:31:108 --------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_reversed_length"
  stdout: ''
  timestamp: 1659799827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (acc, x) => acc + (class_name_map(x._1) - class_name_map(x._2)) }\n      \
    \  val strongest_extension = extensions_map.maxBy(_._1)._1\n        val strongest_extension_name\
    \ = extensions_map.maxBy(_._1)._2\n        class_name + \".\" + strongest_extension_name\
    \ + \".\" + strongest_extension\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7kf15b55.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7kf15b55.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7kf15b55.scala:22:88\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = extensions_map.foldLeft(\e[31m0\e[0m) { (\e[36macc\e[0m, \e[36mx\e[0m) =>\
    \ acc + (class_name_map(x._1) - class_name_map(x._2)) }\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \               Found:    String\n\e[31m   |\e[0m                            \
    \                           Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7kf15b55.scala:22:111 -------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.foldLeft(\e\
    [31m0\e[0m) { (\e[36macc\e[0m, \e[36mx\e[0m) => acc + (class_name_map(x._1) -\
    \ class_name_map(x._2)) }\n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                                              \
    \         Found:    String\n\e[31m   |\e[0m                                  \
    \                     Required: Nothing\n\e[31m   "
  stdout: ''
  timestamp: 1659799829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') / e.toUpperCase.count(_ == 'B') * -1)\n   \
    \     val extensions_sorted = extensions_map.toList.sortWith(_ < _)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ < 0)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted = extensions_sorted.take(1)\n\
    \        val extensions_sorted = extensions_sorted.mkString(\"\") + class_name\
    \ + extensions_sorted.mkString(\"\")\n        extensions_sorted.toUpperCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptr_or1cy.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_ < \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mextensions_sorted is already defined as \e[33mvalue\e[0m \e[35mextensions_sorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptr_or1cy.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m = extensions_sorted.takeWhile(_\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptr_or1cy.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.take(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptr_or1cy.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.mkString(\e[31m\"\"\e[0m) + class_name + extensions_sorted.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods mus"
  stdout: ''
  timestamp: 1659799827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.split('').map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => (class_name_map.get(x) - extensions_map.get(x)).abs)\n        val max_strength\
    \ = strength.max\n        val max_key = strength.indexWhere(x => x == max_strength)\n\
    \        val max_key = max_key match {\n            case Some(x) => x\n      \
    \      case None => -1\n        }\n        val max_key = max_key + 1\n       \
    \ val max_key = max_key + 1\n        val max_key = max_key + 1\n        val max_key\
    \ = max_key + 1\n        val max_key = max_key + 1\n        val max_key = max_key\
    \ + 1\n        val max_key = max_key + 1\n        val max_key = max_key + 1\n\
    \        val max_key = max_key + 1\n        val max_key = max_key + 1\n      \
    \  val max_key = max_key + 1\n        val max_key = max_key + 1\n        val max_key\
    \ = max_key + 1\n        val max_key = max_key + 1\n        val max_key = max_key\
    \ + 1\n        val max_key = max_key + 1\n        val max_key = max_key + 1\n\
    \        val max_key = max_key + 1\n        val max_key = max_key + 1\n      \
    \  val max_key = max_key + 1\n        val max_key = max_key + 1\n        val max_key\
    \ = max_key + 1\n        val max_key = max_key + 1\n        val max_key = max_key\
    \ + 1\n        val max_key = max_key + 1\n        val max_key = max_key + 1\n\
    \        val max_key = max_key + 1\n        val max_key = max_key + 1\n      \
    \  val max_key = max_key + 1\n        val max_key = max_key + 1\n        val max_key\
    \ = max_key + 1\n        val max_key = max_key + 1\n        val max_key = max_key\
    \ + 1\n        val max_key = max_key + 1\n        val max_key = max_key + 1\n\
    \        val max_key = max_key + 1\n        val max_key = max_key + 1\n      \
    \  val max_key = max_key + 1\n        val max_key = max_key + 1\n        val max_key\
    \ = max_key + 1\n        val max_key = max_key + 1\n        val max_key = max_key\
    \ + 1\n        val max_key = max_key + 1\n        val max_key = max_key + 1\n\
    \        val max_key = max_key + 1\n        val max_key = max_key + 1\n      \
    \  val max_key = max_key + 1\n        val max_key = max_key + 1\n        val max_key\
    \ = max_key + 1\n        val max_key = max_key \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpj8sdhord.scala:21:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.split('').map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                                    empty character literal\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmpj8sdhord.scala:25:12 ---------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmax_key\e[0m = max_key \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mmax_key is already\
    \ defined as \e[33mvalue\e[0m \e[35mmax_key\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m26 |\e[0m            \e[33mcase\e[0m Some(x) => x\n\e[31m27\
    \ |\e[0m            \e[33mcase\e[0m None => -\e[31m1\e[0m\n\e[31m28 |\e[0m   \
    \     }\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj8sdhord.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmax_key\e[0m = max_key +\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmax_key is already defined as \e[33mvalue\e[0m \e[35mmax_key\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj8sdhord.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax_key\e[0m = max_key + \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax_key\
    \ is already defined as \e[33mvalue\e[0m \e[35mmax_key\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj8sdhord.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_key\e[0m = max_key + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_key is already defined as \e[33mva"
  stdout: ''
  timestamp: 1659799829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => class_name_map.getOrElse(x, 0) - x.toUpperCase.length).toArray\n        val\
    \ max_strength = strength.max\n        val max_key = extensions_map.keys.max\n\
    \        val max_value = extensions_map.values.max\n        val max_key_value\
    \ = class_name_map.getOrElse(max_key, 0)\n        val max_key_value_length = max_key_value.length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = max_key_value_length + max_key_value_length\n\
    \        val max_key_value_length = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpeafput4d.scala:52:34 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mmax_key_value_length\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeafput4d.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_key_value_length\e[0m = max_key_value_length + max_key_value_length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_key_value_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmax_key_value_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpeafput4d.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmax_key_value_length\e[0m\
    \ = max_key_value_length + max_key_value_length\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmax_key_value_length is already defined as \e[33mvalue\e[0m \e\
    [35mmax_key_value_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpeafput4d.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmax_key_value_length\e[0m\
    \ = max_key_value_length + max_key_value_length\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmax_key_value_length is already defined as \e[33mvalue\e[0m \e\
    [35mmax_key_value_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpeafput4d.scala:31"
  stdout: ''
  timestamp: 1659799829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.values.max\n        val\
    \ extension = extensions_map.values.find(e => e == strength).getOrElse(\"\")\n\
    \        s\"$class_name.$extension\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpuizf7ql6.scala:20:149 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.count(_ == \e[31m'A'\e[0m) - e.toUpperCase.count(_\
    \ == \e[31m'B'\e[0m) - e.toUpperCase.count(_ == \e[31m'C'\e[0m)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                        Cannot\
    \ prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                \
    \                        where:    K is a type variable\n\e[31m   |\e[0m     \
    \                                             V is a type variable\n\e[31m   |\e\
    [0m                                        .\n1 error found\n"
  stdout: ''
  timestamp: 1659799827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val class_name_count = class_name.length\n        val strength = extensions_count\
    \ - class_name_count\n        val extensions_map = extensions.map(_.toUpperCase).zipWithIndex.sortBy(_._1).reverse\n\
    \        val extensions_count = extensions_map.size\n        val extensions_map\
    \ = extensions_map.take(extensions_count)\n        val extensions_map = extensions_map.map(x\
    \ => x._1 + x._2)\n        val extensions_map = extensions_map.toSet\n       \
    \ val extensions_map = extensions_map.map(x => x.toUpperCase)\n        val extensions_map\
    \ = extensions_map.toSet\n        val extensions_map = extensions_map.map(x =>\
    \ x.toUpperCase)\n        val extensions_map = extensions_map.toSet\n        val\
    \ extensions_map = extensions_map.map(x => x.toUpperCase)\n        val extensions_map\
    \ = extensions_map.toSet\n        val extensions_map = extensions_map.map(x =>\
    \ x.toUpperCase)\n        val extensions_map = extensions_map.toSet\n        val\
    \ extensions_map = extensions_map.map(x => x.toUpperCase)\n        val extensions_map\
    \ = extensions_map.toSet\n        val extensions_map = extensions_map.map(x =>\
    \ x.toUpperCase)\n        val extensions_map = extensions_map.toSet\n        val\
    \ extensions_map = extensions_map.map(x => x.toUpperCase)\n        val extensions_map\
    \ = extensions_map.toSet\n        val extensions_map = extensions_map.map(x =>\
    \ x.toUpperCase)\n        val extensions_map = extensions_map.toSet\n        val\
    \ extensions_map = extensions_map.map(x => x.toUpperCase)\n        val extensions_map\
    \ = extensions_map.toSet\n        val extensions_map = extensions_map.map(x =>\
    \ x.toUpperCase)\n        val extensions_map = extensions_map.toSet\n        val\
    \ extensions_map = extensions_map.map(x => x.toUpperCase)\n        val extensions_map\
    \ = extensions_map.toSet\n        val extensions_map = extensions_map.map(x =>\
    \ x.toUpperCase)\n        val extensions_map = extensions_map.toSet\n        val\
    \ extensions_map = extensions_map.map(x => x.toUpperCase)\n        val extensions_map\
    \ = extensions_map.toSet\n        val extensions_map = extensions_map.map(x =>\
    \ x.toUpperCase)\n        val extensions_map = extensions_map.toSet\n        val\
    \ extensions_map = extensions_map.map(x => x.toUpperCase)\n        val extensions_map\
    \ = extensions_map.toSet\n\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph1x2rrqf.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_count\e[0m =\
    \ extensions_map.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmph1x2rrqf.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions_map.take(extensions_count)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_map is already defined as \e[33mvalue\e[0m \e[35mextensions_map\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph1x2rrqf.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions_map.map(\e\
    [36mx\e[0m => x._1 + x._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_map is already defined as \e[33mvalue\e[0m \e[35mextensions_map\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph1x2rrqf.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions_map.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mextensions_map is already defined as \e[33mvalue\e[0m \e[35mextensions_map\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph1x2rrqf.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0"
  stdout: ''
  timestamp: 1659799828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength = extensions_count_sorted.last.toDouble / extensions_count.toDouble\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo53gma_z.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo53gma_z.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_count_sorted\e[0m = extensions.map(_.length).sort\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo53gma_z.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions.map(_.length).sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo53gma_z.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions.map(_.length).sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo53gma_z.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions.map(_.length).sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_"
  stdout: ''
  timestamp: 1659799829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strengths = extensions_map.map(x\
    \ => (x._1, x._2.toUpperCase.count(_ == 'A') + x._2.toLowerCase.count(_ == 'a')))\n\
    \        val strengths_sorted = strengths.sortBy(x => -x._2)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n        val strengths_sorted\
    \ = strengths_sorted.takeWhile(x => x._2 > 0).sortBy(x => x._1)\n\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn8zlrlx5.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mstrengths_sorted\e[0m =\
    \ strengths_sorted.takeWhile(\e[36mx\e[0m => x._2 > \e[31m0\e[0m).sortBy(\e[36mx\e\
    [0m => x._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrengths_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mstrengths_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn8zlrlx5.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mstrengths_sorted\e[0m =\
    \ strengths_sorted.takeWhile(\e[36mx\e[0m => x._2 > \e[31m0\e[0m).sortBy(\e[36mx\e\
    [0m => x._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrengths_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mstrengths_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn8zlrlx5.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mstrengths_sorted\e[0m =\
    \ strengths_sorted.takeWhile(\e[36mx\e[0m => x._2 > \e[31m0\e[0m).sortBy(\e[36mx\e\
    [0m => x._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrengths_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mstrengths_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn8zlrlx5.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mstrengths_sorted\e[0m =\
    \ strengths_sorted.takeWhile(\e[36mx\e[0m => x._2 > \e[31m0\e[0m).sortBy(\e[36mx\e\
    [0m => x._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799829
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_count = extensions_map.size\n\
    \        val class_name_count = class_name.length\n        val strength = extensions_count\
    \ - class_name_count\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val extension_first = extensions_sorted.head._1\n        val extension_second\
    \ = extensions_sorted.head._2\n        if (strength == 0) extension_first\n  \
    \      else if (strength == 1) extension_second\n        else if (strength > 1)\
    \ extension_second\n        else extension_first\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfb7i8pxc.scala:33)\n\tat Problem.main(tmpfb7i8pxc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extension_strength = sorted_extensions.find(e => e._2 == strength).getOrElse(\"\
    \")\n        class_name + extension_strength\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp35guyw2w.scala:20:149 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.count(_ == \e[31m'A'\e[0m) - e.toUpperCase.count(_\
    \ == \e[31m'B'\e[0m) - e.toUpperCase.count(_ == \e[31m'C'\e[0m)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                        Cannot\
    \ prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                \
    \                        where:    K is a type variable\n\e[31m   |\e[0m     \
    \                                             V is a type variable\n\e[31m   |\e\
    [0m                                        .\n1 error found\n"
  stdout: ''
  timestamp: 1659799828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.values.max\n        val\
    \ extensions_sorted = extensions_map.toSeq.sortWith(_._2 > _._2)\n        val\
    \ extensions_sorted = extensions_sorted.take(strength)\n        val extensions_sorted\
    \ = extensions_sorted.map(_._1)\n        val extensions_sorted = extensions_sorted.mkString(\"\
    \") + \".\" + extensions_sorted.last\n        class_name+\".\"+extensions_sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqdnzmyin.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.take(strength)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqdnzmyin.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqdnzmyin.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.mkString(\e[31m\"\"\e[0m) + \e[31m\".\"\e[0m + extensions_sorted.last\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- Error: /tmp/tmpqdnzmyin.scala:20:149 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.count(_ == \e[31m'A'\e[0m) - e.toUpperCase.count(_\
    \ == \e[31m'B'\e[0m) - e.toUpperCase.count(_ == \e[31m'C'\e[0m)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \         ^\e[0m\n\e[31m   "
  stdout: ''
  timestamp: 1659799829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_map = extensions_map.toMap\n        val extensions_map = extensions_map.filter(_._2\
    \ != '.')\n        val extensions_map = extensions_map.filter(_._2 != '$')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '_')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != '-')\n        val extensions_map = extensions_map.filter(_._2\
    \ != '-')\n        val extensions_map = extensions_map.filter(_._2 != '-')\n \
    \       val extensions_map = extensions_map.filter(_._2 != '-')\n        val extensions_map\
    \ = extensions_map.\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpynmt_xj_.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpynmt_xj_.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions_map.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mextensions_map is already defined as \e[33mvalue\e[0m \e[35mextensions_map\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpynmt_xj_.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions_map.filter(_._2\
    \ != \e[31m'.'\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_map is already defined as \e[33mvalue\e[0m \e[35mextensions_map\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpynmt_xj_.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions_map.filter(_._2\
    \ != \e[31m'$'\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_map is already defined as \e[33mvalue\e[0m \e[35mextensions_map\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpynmt_xj_.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions_map.filter(_._2\
    \ != \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_map is already defined as \e[33mvalue\e[0m \e[35mextensions_map\e\
    [0m\n\e[31m   |\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659799831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_upper_ratio = extensions_count_upper / extensions_count.toDouble\n\
    \        val extensions_count_lower_ratio = extensions_count_lower / extensions_count.toDouble\n\
    \        val strength_ratio = strength / extensions_count.toDouble\n        val\
    \ extensions_count_ratio = extensions_count_upper / extensions_count_lower\n \
    \       val extensions_count_ratio_upper = extensions_count_upper / extensions_count_upper_ratio\n\
    \        val extensions_count_ratio_lower = extensions_count_lower / extensions_count_lower_ratio\n\
    \        val extensions_count_ratio_upper_ratio = extensions_count_upper_ratio\
    \ / extensions_count_ratio_upper\n        val extensions_count_ratio_lower_ratio\
    \ = extensions_count_lower_ratio / extensions_count_ratio_lower\n        val extensions_count_ratio_upper_ratio_upper\
    \ = extensions_count_upper_ratio / extensions_count_ratio_upper_ratio\n      \
    \  val extensions_count_ratio_lower_ratio_lower = extensions_count_lower_ratio\
    \ / extensions_count_ratio_lower_ratio\n        val extensions_count_ratio_upper_ratio_lower_ratio\
    \ = extensions_count_upper_ratio / extensions_count_ratio_lower_ratio\n      \
    \  val extensions_count_ratio_lower_ratio_upper = extensions_count_lower_ratio\
    \ / extensions_count_ratio_upper_ratio\n        val extensions_count_ratio_lower_ratio_lower_ratio\
    \ = extensions_count_lower_ratio / extensions_count_ratio_lower_ratio\n      \
    \  val extensions_count_ratio_upper_ratio_lower_ratio_upper = extensions_count_upper_ratio\
    \ / extensions_count_ratio_lower_ratio_upper\n        val extensions_count_ratio_lower_ratio_lower_ratio_lower\
    \ = extensions_count_lower_ratio / extensions_count_ratio_lower_ratio_lower_ratio\n\
    \        val extensions_count_ratio_upper_ratio_lower_ratio_lower_ratio = extensions_count_upper_ratio\
    \ / extensions_count_ratio_lower_ratio_lower_ratio\n        val extensions_count_ratio_lower_ratio_lower_ratio_upper\
    \ = extensions_count_lower_ratio / extensions_count_ratio_lower_ratio_upper\n\
    \        val extensions_count_ratio_lower_ratio_lower_ratio_lower_ratio = extensions_count_lower_ratio\
    \ / extensions_count_ratio_lower_ratio_lower_ratio\n        val extensions_count_ratio_upper_ratio_lower_ratio_lower_ratio_upper\
    \ = extensions_count_upper_ratio / extensions_count_ratio_lower_ratio_lower_ratio_upper\n\
    \        val extensions_count_ratio_lower_ratio_lower_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfdul5k36.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfdul5k36.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => x.toUpperCase).zipWithIndex.toMap\n        val class_name_map = class_name.zipWithIndex.toMap\n\
    \        val extensions_count = extensions_map.size\n        val class_name_count\
    \ = class_name_map.size\n        val extension_strength = extensions_count - class_name_count\n\
    \        val strength = extensions_map.get(extension_strength)\n        val class_name\
    \ = class_name_map.get(strength)\n        class_name match {\n            case\
    \ Some(class_name) => class_name\n            case None => \"\"\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkasm1hhq.scala:26:25 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mclass_name\e[0m = class_name_map.get(strength)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mclass_name_map\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1) -> 1)\n        val extensions_map_sorted\
    \ = extensions_map.toSeq.sortBy(_._2).reverse\n        val extensions_map_sorted_with_strength\
    \ = extensions_map_sorted.map(e => (e._1, e._2))\n        val extensions_map_sorted_with_strength_length\
    \ = extensions_map_sorted_with_strength.length\n        val extensions_map_sorted_with_strength_length_sorted\
    \ = extensions_map_sorted_with_strength.sortBy(_._1)\n        val extensions_map_sorted_with_strength_length_sorted_with_strength\
    \ = extensions_map_sorted_with_strength_length_sorted.map(e => (e._1, e._2._2))\n\
    \        val extensions_map_sorted_with_strength_length_sorted_with_strength_length\
    \ = extensions_map_sorted_with_strength_length_sorted_with_strength.length\n \
    \       val extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted\
    \ = extensions_map_sorted_with_strength_length_sorted_with_strength.sortBy(_._1)\n\
    \        val extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength\
    \ = extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted.map(e\
    \ => (e._1, e._2._2))\n        val extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length\
    \ = extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength.length\n\
    \        val extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length_sorted\
    \ = extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength.sortBy(_._1)\n\
    \        val extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength\
    \ = extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length_sorted.map(e\
    \ => (e._1, e._2._2))\n        val extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length\
    \ = extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength.length\n\
    \        val extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length_sorted\
    \ = extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength.sortBy(_._1)\n\
    \        val extensions_map_sorted_with_strength_length_sorted_with_strength\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph5td38_d.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph5td38_d.scala:25:149\
    \ -----------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_map_sorted_with_strength_length_sorted_with_strength\e[0m = extensions_map_sorted_with_strength_length_sorted.map(\e\
    [36me\e[0m => (e._1, e._2._2))\n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \                                            ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                      value _2 is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmph5td38_d.scala:28:205 -----------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mextensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength\e\
    [0m = extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted.map(\e\
    [36me\e[0m => (e._1, e._2._2))\n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \                                                                            \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \              value _2 is not a member of Nothing\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmph5td38_d.scala:31:261 -----------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m        \e[33mval\e[0m \e[36mextensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength\e\
    [0m = extensions_map_sorted_with_strength_length_sorted_with_strength_length_sorted_with_strength_length_sorted.map(\e\
    [36me\e[0m => (e._1, e._2._2))\n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \                                                                            \
    \                                        "
  stdout: ''
  timestamp: 1659799835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.filter(_._1\
    \ == class_name_map.getOrElse(_._1, _._2)).map(_._2).sum\n        val strongest_extension\
    \ = extensions_map.filter(_._1 == class_name_map.getOrElse(_._1, _._2)).map(_._2).min\n\
    \        val class_name = class_name_map.getOrElse(strongest_extension, strongest_extension)\n\
    \        class_name\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdqwrwfvi.scala:24:25 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mclass_name\e[0m = class_name_map.getOrElse(strongest_extension,\
    \ strongest_extension)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\
    \e[31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mclass_name_map\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpdqwrwfvi.scala:22:104\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e\
    [33mval\e[0m \e[36mstrength\e[0m = extensions_map.filter(_._1 == class_name_map.getOrElse(_._1,\
    \ _._2)).map(_._2).sum\n\e[31m\e[31m   |\e[0m                                \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m                No implicit Ordering defined for B\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                where:    B is a type variable with constraint\
    \ >: String\n\e[31m   |\e[0m                .\n2 errors found\n"
  stdout: ''
  timestamp: 1659799833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength = extensions_count_sorted.last\n        val extensions_count_sorted_sorted\
    \ = extensions_count_sorted.sort\n        val strength_sorted = extensions_count_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted = extensions_count_sorted_sorted.sort\n\
    \        val strength_sorted_sorted = extensions_count_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted.sort\n        val\
    \ strength_sorted_sorted_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsh4q3rzr.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\e\
    [0m = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpsh4q3rzr.scala:21:63 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions.map(_.length).sort\n\e[31m\e[31m   |\e[0m                   \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sort\
    \ is not a member of List[Int] - did you mean List[Int].sortBy?\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpsh4q3rzr.scala:35:87 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\e\
    [0m = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsh4q3rzr.scala:36:79\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e["
  stdout: ''
  timestamp: 1659799836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (s, e) =>\n            val c = class_name_map(e._1)\n            val m = extensions_map(e._2)\n\
    \            val cap = c.toUpperCase.length\n            val sm = m.toUpperCase.length\n\
    \            val strength = cap - sm\n            if (strength > s) strength\n\
    \            else s\n        }\n        val class_name_with_strength = class_name_map.foldLeft(\"\
    \") { (s, e) =>\n            val c = class_name_map(e._1)\n            val m =\
    \ extensions_map(e._2)\n            val cap = c.toUpperCase.length\n         \
    \   val sm = m.toUpperCase.length\n            val strength = cap - sm\n     \
    \       if (strength > s) s + \".\" + e._1\n            else s\n        }\n  \
    \      class_name_with_strength\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzbl16n7f.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpzbl16n7f.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzbl16n7f.scala:23:37\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e\
    [36mc\e[0m = class_name_map(e._1)\n\e[31m\e[31m   |\e[0m                     \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                                   Found:\
    \    String\n\e[31m   |\e[0m                                   Required: Nothing\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzbl16n7f.scala:25:24\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcap\e[0m = c.toUpperCase.length\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value toUpperCase\
    \ is not a member of Nothing\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzbl16n7f.scala:34:24\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcap\e[0m = c.toUpperCase.length\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value toUpperCase\
    \ is not a member of Nothing\n5 errors found\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((acc,\
    \ x) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n        val strength_sorted\
    \ = extensions_map.toSeq.sortBy(x => x._1).reverse\n        val strength_sorted\
    \ = strength_sorted.takeWhile(x => strength_sorted.exists(y => x._2 > y._1))\n\
    \        val strength_sorted.head._2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq69acqfr.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq69acqfr.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstrength_sorted\e[0m = strength_sorted.takeWhile(\e[36mx\e[0m => strength_sorted.exists(\e\
    [36my\e[0m => x._2 > y._1))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrength_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mstrength_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpq69acqfr.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpq69acqfr.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq69acqfr.scala:22:86\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = extensions_map.foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m) =>\
    \ acc + (class_name_map(x._1) - class_name_map(x._2)))\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \             Found:    "
  stdout: ''
  timestamp: 1659799840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (acc, x) => acc + (class_name_map(x._1) - class_name_map(x._2)) }\n      \
    \  val strongest_extension = extensions_map.maxBy(x => strength(x._1))\n     \
    \   class_name + strongest_extension._2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1jon63ge.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1jon63ge.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1jon63ge.scala:22:88\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = extensions_map.foldLeft(\e[31m0\e[0m) { (\e[36macc\e[0m, \e[36mx\e[0m) =>\
    \ acc + (class_name_map(x._1) - class_name_map(x._2)) }\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \               Found:    String\n\e[31m   |\e[0m                            \
    \                           Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1jon63ge.scala:22:111 -------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.foldLeft(\e\
    [31m0\e[0m) { (\e[36macc\e[0m, \e[36mx\e[0m) => acc + (class_name_map(x._1) -\
    \ class_name_map(x._2)) }\n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                                              \
    \         Found:    String\n\e[31m   |\e[0m                                  \
    \                     Required: Nothing\n\e[31m   "
  stdout: ''
  timestamp: 1659799840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val first_extension = sorted_extensions.head._1\n        val first_extension_strength\
    \ = sorted_extensions.head._2\n        if (strength == 0) first_extension\n  \
    \      else if (strength > first_extension_strength) first_extension\n       \
    \ else first_extension\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphikmeyjh.scala:20:149 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.count(_ == \e[31m'A'\e[0m) - e.toUpperCase.count(_\
    \ == \e[31m'B'\e[0m) - e.toUpperCase.count(_ == \e[31m'C'\e[0m)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                        Cannot\
    \ prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                \
    \                        where:    K is a type variable\n\e[31m   |\e[0m     \
    \                                             V is a type variable\n\e[31m   |\e\
    [0m                                        .\n1 error found\n"
  stdout: ''
  timestamp: 1659799839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((acc,\
    \ x) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n        val strength_sorted\
    \ = extensions_map.toSeq.sortBy(x => x._2).reverse\n        val strength_sorted_list\
    \ = strength_sorted.map(x => x._1).mkString(\".\")\n        val strength_sorted_list_with_extension\
    \ = strength_sorted_list + \".\" + extensions_map.keys.mkString(\".\")\n     \
    \   val strength_sorted_list_with_extension_with_cap = strength_sorted_list_with_extension\
    \ + \".\" + extensions_map.values.mkString(\".\")\n        val strength_sorted_list_with_extension_with_cap_with_sm\
    \ = (strength_sorted_list_with_extension_with_cap + \".\" + extensions_map.keys.mkString(\"\
    .\")) + \".\" + extensions_map.values.mkString(\".\")\n        val strength_sorted_list_with_extension_with_cap_with_sm_with_sm\
    \ = (strength_sorted_list_with_extension_with_cap_with_sm + \".\" + extensions_map.keys.mkString(\"\
    .\")) + \".\" + extensions_map.values.mkString(\".\")\n        val strength_sorted_list_with_extension_with_cap_with_sm_with_sm_with_sm\
    \ = (strength_sorted_list_with_extension_with_cap_with_sm_with_sm + \".\" + extensions_map.keys.mkString(\"\
    .\")) + \".\" + extensions_map.values.mkString(\".\")\n        val strength_sorted_list_with_extension_with_cap_with_sm_with_sm_with_sm_with_sm\
    \ = (strength_sorted_list_with_extension_with_cap_with_sm_with_sm_with_sm + \"\
    .\" + extensions_map.keys.mkString(\".\")) + \".\" + extensions_map.values.mkString(\"\
    .\")\n        val strength_sorted_list_with_extension_with_cap_with_sm_with_sm_with_sm_with_sm_with_sm\
    \ = (strength_sorted_list_with_extension_with_cap_with_sm_with_sm_with_sm_with_sm_with_sm\
    \ + \".\" + extensions_map.keys.mkString(\".\")) + \".\" + extensions_map.values.mkString(\"\
    .\")\n        val strength_sorted_list_with_extension_with_cap_with_sm_with_sm_with_sm_with_sm_with_sm_with_sm_with_sm\
    \ = (strength_sorted_list_with_extension_with_cap_with_sm_with_sm_with_sm_with_sm_with_sm_with_sm_with_sm_with_sm\
    \ + \".\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgtjek7am.scala:32:227 ----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mstrength_sorted_list_with_extension_with_cap_with_sm_with_sm_with_sm_with_sm_with_sm_with_sm_with_sm\e\
    [0m = (strength_sorted_list_with_extension_with_cap_with_sm_with_sm_with_sm_with_sm_with_sm_with_sm_with_sm_with_sm\
    \ + \".\n\e[31m\e[31m   |\e[0m                                               \
    \                                                                            \
    \                                                                            \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \                        unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpgtjek7am.scala:34:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m34 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpgtjek7am.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpgtjek7am.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgtjek7am.scala:22:86\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = extensions_map.foldLeft(\e[31m0\e[0m)((\e[36macc\e[0"
  stdout: ''
  timestamp: 1659799840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)\n        ).sortBy(_._1).reverse\n\
    \        val strength = extensions_map.head._2 - extensions_map.head._1\n    \
    \    val extension = extensions_map.head._1\n        val class_name = class_name.toUpperCase\n\
    \        val extension_name = extension.toUpperCase\n        val class_name_with_extension\
    \ = class_name + extension_name\n        val extension_with_name = extension_name\
    \ + class_name\n        val extension_with_name_and_class = extension_with_name.concat(class_name)\n\
    \        val extension_with_name_and_class_with_extension = extension_with_name_and_class.concat(extension_name)\n\
    \        val extension_with_name_and_class_with_extension_with_name = extension_with_name_and_class_with_extension.concat(extension_with_name)\n\
    \        val extension_with_name_and_class_with_extension_with_name_and_class\
    \ = extension_with_name_and_class_with_extension_with_name.concat(extension_with_name_and_class)\n\
    \        val extension_with_name_and_class_with_extension_with_name_and_class_with_extension\
    \ = extension_with_name_and_class_with_extension_with_name_and_class_with_extension.concat(extension_with_name_and_class_with_extension)\n\
    \        val extension_with_name_and_class_with_extension_with_name_and_class_with_extension_with_name\
    \ = extension_with_name_and_class_with_extension_with_name_and_class_with_extension.concat(extension_with_name_and_class_with_extension_with_name)\n\
    \        val extension_with_name_and_class_with_extension_with_name_and_class_with_extension_with_name_and_class\
    \ = extension_with_name_and_class_with_extension_with_name_and_class_with_extension.concat(extension_with_name_and_class_with_extension_with_name_and_class)\n\
    \        val extension_with_name_and_class_with_extension_with_name_and_class_with_extension_with_name_and_class_with_extension\
    \ = extension_with_name_and_class_with_extension_with_name_and_class_with_extension.concat(extension_with_name_and_class_with_extension_with_name_and_class_with_extension)\n\
    \        val extension_with_name_and_class_with_extension_with_name_and_class_with_extension_with_name_and_class_with_extension_with_name\
    \ = extension_with_name_and_class_with_extension_with_name_and_class_with_extension.concat(extension_with_name_and_class_with_extension_with_name_and_class_with_extension_with_name)\n\
    \        val extension_with_name_and_class_with_extension_with_name_and_class_with_extension_with_name_and_class_with_extension_with_name_and_class\
    \ = extension_with_name_and_class_with_extension_with_name_and_class_with_extension.concat(extension_with_name_and_class_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphua8m4j_.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphua8m4j_.scala:24:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mclass_name\e[0m = class_name.toUpperCase\n\e[31m\e[31m   |\e[0m      \
    \                   ^\e[0m\n\e[31m   |\e[0m                         Recursive\
    \ \e[33mvalue\e[0m \e[35mclass_name\e[0m needs type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmphua8m4j_.scala:25:39 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextension_name\e[0m = extension.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             value toUpperCase is not a member\
    \ of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphua8m4j_.scala:32:94 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mextension_with_name_and_class_with_extension_with_name_and_class_with_extension\e\
    [0m = extension_with_name_and_class_with_extension_with_name_and_class_with_extension.concat(extension_with_name_and_class_with_extension)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  extension_with_name_and_class_with_extension_with_name_and_class_with_extension\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphua8m4j_.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659799841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = class_name_map.foldLeft(0)\
    \ { (acc, x) => acc + (extensions_map.getOrElse(x, 0) - class_name_map.getOrElse(x,\
    \ 0)) }\n        val strength_sorted = extensions_map.toSeq.sortBy(x => -x)\n\
    \        val strength_sorted = strength_sorted.takeWhile(x => x <= strength).reverse\n\
    \        val strength_sorted.headOption.getOrElse(class_name_map.getOrElse(class_name,\
    \ \"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp10k7sskm.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp10k7sskm.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstrength_sorted\e[0m = strength_sorted.takeWhile(\e[36mx\e[0m => x <=\
    \ strength).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrength_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mstrength_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp10k7sskm.scala:23:63 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mstrength_sorted\e[0m = extensions_map.toSeq.sortBy(\e\
    [36mx\e[0m => -x)\n\e[31m\e[31m   |\e[0m                                     \
    \                          ^^\e[0m\n\e[31m   |\e[0mvalue unary_- is not a member\
    \ of (String, String), but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmp10k7sskm.scala:23:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mstrength_sorted\e[0m = extensions_map.toSeq.sortBy(\e\
    [36mx\e[0m => -x)\n\e[31m\e[31m   |\e[0m                                     \
    \                             ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_diff = extensions_count - extensions_count_lower\n \
    \       val extensions_count_diff_upper = extensions_count_upper - extensions_count_diff\n\
    \        val extensions_count_diff_lower = extensions_count_lower - extensions_count_diff\n\
    \        val extensions_count_diff_upper_small = extensions_count_diff_upper -\
    \ extensions_count_diff\n        val extensions_count_diff_lower_small = extensions_count_diff_lower\
    \ - extensions_count_diff\n        val extensions_count_diff_upper_small_small\
    \ = extensions_count_diff_upper_small - extensions_count_diff\n        val extensions_count_diff_lower_small_small\
    \ = extensions_count_diff_lower_small - extensions_count_diff\n        val extensions_count_diff_upper_small_small_small\
    \ = extensions_count_diff_upper_small_small - extensions_count_diff\n        val\
    \ extensions_count_diff_lower_small_small_small = extensions_count_diff_lower_small_small\
    \ - extensions_count_diff\n        val extensions_count_diff_upper_small_small_small_small\
    \ = extensions_count_diff_upper_small_small_small - extensions_count_diff\n  \
    \      val extensions_count_diff_lower_small_small_small_small = extensions_count_diff_lower_small_small_small\
    \ - extensions_count_diff\n        val extensions_count_diff_upper_small_small_small_small_small\
    \ = extensions_count_diff_upper_small_small_small_small - extensions_count_diff\n\
    \        val extensions_count_diff_lower_small_small_small_small_small = extensions_count_diff_lower_small_small_small_small\
    \ - extensions_count_diff\n        val extensions_count_diff_upper_small_small_small_small_small_small\
    \ = extensions_count_diff_upper_small_small_small_small_small - extensions_count_diff\n\
    \        val extensions_count_diff_lower_small_small_small_small_small_small =\
    \ extensions_count_diff_lower_small_small_small_small_small - extensions_count_diff\n\
    \        val extensions_count_diff_upper_small_small_small_small_small_small_small\
    \ = extensions_count_diff_upper_small_small_small_small_small_small_small - extensions_count_diff\n\
    \        val extensions_count_diff_lower_small_small_small_small_small_small_small_small\
    \ = extensions_count_diff_lower_small_small_small_small_small_small_small_small\
    \ - extensions_count_diff\n        val extensions_count_diff_upper_small_small_small_small_small_small_small_small_small\
    \ = extensions_count_diff_upper_sm\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfg_mic1w.scala:39:84 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_diff_upper_small_small_small_small_small_small_small\e\
    [0m = extensions_count_diff_upper_small_small_small_small_small_small_small -\
    \ extensions_count_diff\n\e[31m\e[31m   |\e[0m                               \
    \                                                     ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35mextensions_count_diff_upper_small_small_small_small_small_small_small\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfg_mic1w.scala:40:90\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_count_diff_lower_small_small_small_small_small_small_small_small\e\
    [0m = extensions_count_diff_lower_small_small_small_small_small_small_small_small\
    \ - extensions_count_diff\n\e[31m\e[31m   |\e[0m                             \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  extensions_count_diff_lower_small_small_small_small_small_small_small_small\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfg_mic1w.scala:41:96 ------------------------\e[0m\e[0m\n\e[31m41 |\e\
    [0m        \e[33mval\e[0m \e[36mextensions_count_diff_upper_small_small_small_small_small_small_small_small_small\e\
    [0m = extensions_count_diff_upper_sm\n\e[31m\e[31m   |\e[0m                  \
    \                                                                            \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         Not found: extensions_count_diff_upper_sm\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpfg_mic1w.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[3"
  stdout: ''
  timestamp: 1659799840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (s, e) =>\n            val c = class_name_map(e._1)\n            val m = extensions_map(e._2)\n\
    \            val cap = c.toUpperCase.length\n            val sm = m.toUpperCase.length\n\
    \            val strength = cap - sm\n            if (strength > s) strength\n\
    \            else s\n        }\n        val class_name = class_name_map(strength)\n\
    \        val extension = extensions_map(strength)\n        class_name + \".\"\
    \ + extension\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi6px1vwk.scala:31:25 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mclass_name\e[0m = class_name_map(strength)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mclass_name_map\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi6px1vwk.scala:23:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e\
    [0m \e[36mc\e[0m = class_name_map(e._1)\n\e[31m\e[31m   |\e[0m               \
    \     ^\e[0m\n\e[31m   |\e[0m                    Recursive \e[33mvalue\e[0m \e\
    [35mclass_name_map\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpi6px1vwk.scala:32:39 --------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mextension\e[0m = extensions_map(strength)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                       Found:    (strength : Int)\n\
    \e[31m   |\e[0m                                       Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => x.toUpperCase.charAt(0) - x.toLowerCase.charAt(0)).groupBy(x => x).mapValues(_.size)\n\
    \        val max_value = extensions_map.values.max\n        val max_key = extensions_map.keys.max\n\
    \        val max_key_value = extensions_map.get(max_key).size\n        val max_key_key_value\
    \ = extensions_map.get(max_key).get(max_key_value)\n        val max_key_key_key_value\
    \ = extensions_map.get(max_key).get(max_key_key_value)\n        val max_key_key_key_key_value\
    \ = extensions_map.get(max_key).get(max_key_key_key_value)\n        val max_key_key_key_key_key_value\
    \ = extensions_map.get(max_key).get(max_key_key_key_key_value)\n        val max_key_key_key_key_key_key_value\
    \ = extensions_map.get(max_key).get(max_key_key_key_key_key_key_value)\n     \
    \   val max_key_key_key_key_key_key_key_value = extensions_map.get(max_key).get(max_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_value = extensions_map.get(max_key).get(max_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_value = extensions_map.get(max_key).get(max_key_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_key_value = extensions_map.get(max_key).get(max_key_key_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_key_key_value = extensions_map.get(max_key).get(max_key_key_key_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_key_key_key_value = extensions_map.get(max_key).get(max_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value\
    \ = extensions_map.get(max_key).get(max_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value\
    \ = extensions_map.get(max_key).get(max_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value\
    \ = extensions_map.get(\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgz0bdl3u.scala:37:107 --------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mmax_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value\e\
    [0m = extensions_map.get(\n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpgz0bdl3u.scala:24:60 -----------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax_key_key_value\e[0m = extensions_map.get(max_key).get(max_key_value)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     \e[33mmethod\e[0m \e[35mget\e[0m in \e\
    [33mclass\e[0m \e[35mOption\e[0m does not take parameters\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpgz0bdl3u.scala:25:64 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmax_key_key_key_value\e\
    [0m = extensions_map.get(max_key).get(max_key_key_value)\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     \e[33mmethod\e[0m \e[35mget\e[0m in \e[33mclass\e\
    [0m \e[35mOption\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpgz0bdl3u.scala:26:68 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmax_key_key_key_key_value\e\
    [0m = extensions_map.get(max_key).get(max_key_key_key_value)\n\e[31m\e[31m   |\e\
    [0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     \e[33mmethod\e[0m \e[35mget\e[0m in \e[33mclass\e\
    [0m \e[35mOption\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longe"
  stdout: ''
  timestamp: 1659799841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => class_name_map.getOrElse(x, 0) - x.toString.toString.toUpperCase.length).toArray\n\
    \        val max_strength = strength.max\n        val max_key = extensions_map.keys.find(x\
    \ => strength.contains(x)).get\n        val max_value = extensions_map.get(max_key)\n\
    \        val max_key_with_extension = max_key + max_value\n        val max_key_with_extension_map\
    \ = class_name_map.get(max_key_with_extension)\n        val max_key_with_extension_map_with_extension\
    \ = max_key_with_extension_map + extensions_map.get(max_key)\n        val max_key_with_extension_map_with_extension_map\
    \ = max_key_with_extension_map_with_extension + extensions_map.get(max_key_with_extension)\n\
    \        val max_key_with_extension_map_with_extension_map_with_extension = max_key_with_extension_map_with_extension_map\
    \ + extensions_map.get(max_key_with_extension)\n        val max_key_with_extension_map_with_extension_map_with_extension_map\
    \ = max_key_with_extension_map_with_extension_map_with_extension + extensions_map.get(max_key_with_extension)\n\
    \        val max_key_with_extension_map_with_extension_map_with_extension_map_with_extension\
    \ = max_key_with_extension_map_with_extension_map_with_extension_map_with_extension\
    \ + extensions_map.get(max_key_with_extension)\n        val max_key_with_extension_map_with_extension_map_with_extension_map_with_extension_map\
    \ = max_key_with_extension_map_with_extension_map_with_extension_map_with_extension\
    \ + extensions_map.get(max_key_with_extension)\n        val max_key_with_extension_map_with_extension_map_with_extension_map_with_extension_map_with_extension\
    \ = max_key_with_extension_map_with_extension_map_with_extension_map_with_extension_map_with_extension\
    \ + extensions_map.get(max_key_with_extension)\n        val max_key_with_extension_map_with_extension_map_with_extension_map_with_extension_map_with_extension_map\
    \ = max_key_with_extension_map_with_extension_map_with_extension_map_with_extension_map_with_extension\
    \ + extensions_map.get(max_key_with_extension)\n        val max_key_with_extension_map_with_extension_map_with_extension_map_with_extension_map_with_extension_map_with_extension\
    \ = max_key_with_extension_map_with_extension_map_with_extension_map_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfyl9mqmv.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpfyl9mqmv.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfyl9mqmv.scala:22:79\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = extensions_map.values.map(\e[36mx\e[0m => class_name_map.getOrElse(x, \e\
    [31m0\e[0m) - x.toString.toString.toUpperCase.length).toArray\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \       Found:    (x : String)\n\e[31m   |\e[0m                              \
    \                    Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpfyl9mqmv.scala:24:70 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmax_key\e[0m = extensions_map.keys.find(\e\
    [36mx\e[0m => strength.contains(x)).get\n\e[31m\e[31m   |\e[0m               \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                                  Found:    (x : String)\n\e\
    [31m   |\e[0m                                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch "
  stdout: ''
  timestamp: 1659799843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_upper_ratio = extensions_count_upper / extensions_count.toDouble\n\
    \        val extensions_count_lower_ratio = extensions_count_lower / extensions_count.toDouble\n\
    \        val extensions_count_ratio = extensions_count_upper_ratio - extensions_count_lower_ratio\n\
    \        val extensions_count_ratio = extensions_count_ratio.toInt\n        val\
    \ extensions_count_ratio = extensions_count_ratio / extensions_count.toInt\n \
    \       val extensions_count_ratio = extensions_count_ratio * strength\n     \
    \   val extensions_count_ratio = extensions_count_ratio.toInt\n        val extensions_count_ratio\
    \ = extensions_count_ratio / extensions_count.toInt\n        val extensions_count_ratio\
    \ = extensions_count_ratio * strength\n        val extensions_count_ratio = extensions_count_ratio.toInt\n\
    \        val extensions_count_ratio = extensions_count_ratio / extensions_count.toInt\n\
    \        val extensions_count_ratio = extensions_count_ratio * strength\n    \
    \    val extensions_count_ratio = extensions_count_ratio.toInt\n        val extensions_count_ratio\
    \ = extensions_count_ratio / extensions_count.toInt\n        val extensions_count_ratio\
    \ = extensions_count_ratio * strength\n        val extensions_count_ratio = extensions_count_ratio.toInt\n\
    \        val extensions_count_ratio = extensions_count_ratio / extensions_count.toInt\n\
    \        val extensions_count_ratio = extensions_count_ratio * strength\n    \
    \    val extensions_count_ratio = extensions_count_ratio.toInt\n        val extensions_count_ratio\
    \ = extensions_count_ratio / extensions_count.toInt\n        val extensions_count_ratio\
    \ = extensions_count_ratio * strength\n        val extensions_count_ratio = extensions_count_ratio.toInt\n\
    \        val extensions_count_ratio = extensions_count_ratio / extensions_count.toInt\n\
    \        val extensions_count_ratio = extensions_count_ratio * strength\n    \
    \    val extensions_count_ratio = extensions_count_ratio.toInt\n        val extensions_count_ratio\
    \ = extensions_count_ratio / extensions_count.toInt\n        val extensions_count_ratio\
    \ = extensions_count_ratio * strength\n        val extensions_count_ratio = extensions_count_ratio.toInt\n\
    \        val extensions_count_ratio\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp88e4pmqt.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp88e4pmqt.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_count_ratio\e[0m = extensions_count_ratio.toInt\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_ratio is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_ratio\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp88e4pmqt.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_ratio\e\
    [0m = extensions_count_ratio / extensions_count.toInt\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_ratio is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_ratio\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp88e4pmqt.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_ratio\e\
    [0m = extensions_count_ratio * strength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_ratio is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_ratio\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp88e4pmqt.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_ratio\e\
    [0m = extensions_count_ratio.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => (x - class_name_map.get(x)).abs).reduce(_ + _)\n        val strongest_extension\
    \ = extensions_map.values.find(x => x == strength).get\n        s\"$class_name.$strongest_extension\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpefenj8kp.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpefenj8kp.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpefenj8kp.scala:22:57\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mstrength\e[0m = extensions_map.values.map(\e[36mx\e[0m => (x - class_name_map.get(x)).abs).reduce(_\
    \ + _)\n\e[31m\e[31m   |\e[0m                                                \
    \       ^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of String, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpefenj8kp.scala:22:78 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.values.map(\e\
    [36mx\e[0m => (x - class_name_map.get(x)).abs).reduce(_ + _)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \    ^\e[0m\n\e[31m   |\e[0m                                                 \
    \ Found:    (x : String)\n\e[31m   |\e[0m                                    \
    \              Re"
  stdout: ''
  timestamp: 1659799843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_str = if (strength == 0) \"0\" else strength.toString\n    \
    \    val extensions_str = extensions.map(_.toString).mkString(\".\")\n       \
    \ val extensions_count_str = if (extensions_count == 0) \"0\" else extensions_count.toString\n\
    \        val extensions_count_upper_str = if (extensions_count_upper == 0) \"\
    0\" else extensions_count_upper.toString\n        val extensions_count_lower_str\
    \ = if (extensions_count_lower == 0) \"0\" else extensions_count_lower.toString\n\
    \        val extensions_count_upper_lower_str = if (extensions_count_upper - extensions_count_lower\
    \ == 0) \"0\" else extensions_count_upper - extensions_count_lower.toString\n\
    \        val extensions_count_upper_lower_str_str = if (extensions_count_upper\
    \ - extensions_count_lower == 0) \"0\" else extensions_count_upper_lower_str.toString\n\
    \        val extensions_count_upper_lower_str_str_str = if (extensions_count_upper\
    \ - extensions_count_lower == 0) \"0\" else extensions_count_upper_lower_str_str.toString\n\
    \        val extensions_count_upper_lower_str_str_str_str = if (extensions_count_upper\
    \ - extensions_count_lower == 0) \"0\" else extensions_count_upper_lower_str_str_str.toString\n\
    \        val extensions_count_upper_lower_str_str_str_str_str = if (extensions_count_upper\
    \ - extensions_count_lower == 0) \"0\" else extensions_count_upper_lower_str_str_str_str.toString\n\
    \        val extensions_count_upper_lower_str_str_str_str_str_str = if (extensions_count_upper\
    \ - extensions_count_lower == 0) \"0\" else extensions_count_upper_lower_str_str_str_str_str.toString\n\
    \        val extensions_count_upper_lower_str_str_str_str_str_str_str = if (extensions_count_upper\
    \ - extensions_count_lower == 0) \"0\" else extensions_count_upper_lower_str_str_str_str_str_str.toString\n\
    \        val extensions_count_upper_lower_str_str_str_str_str_str_str_str = if\
    \ (extensions_count_upper - extensions_count_lower == 0) \"0\" else extensions_count_upper_lower_str_str_str_str_str_str_str.toString\n\
    \        val extensions_count_upper_lower_str_str_str_str_str_str_str_str_str_str\
    \ = if (extensions_count_upper - extensions_count_lower == 0) \"0\" else extensions_count_upper_lower_str_str_str_str_str_str_str_str_str.toString\n\
    \        val extensions_count_upper_lower_str_str_str_str_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqw5nkdpo.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpqw5nkdpo.scala:29:137\
    \ ----------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_count_upper_lower_str\e[0m = \e[33mif\e[0m (extensions_count_upper\
    \ - extensions_count_lower == \e[31m0\e[0m) \e[31m\"0\"\e[0m \e[33melse\e[0m extensions_count_upper\
    \ - extensions_count_lower.toString\n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m None of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m\
    \ \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e\
    [0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x:\
    \ Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\
    \e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments (String)\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqw5nkdpo.scala:37:150 -----------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_upper_lower_str_str_str_str_str_str_str_str_str_str\e\
    [0m = \e[33mif\e[0m (extensions_count_upper - extensions_count_lower == \e[31m0\e\
    [0m) \e[31m\"0\"\e[0m \e[33melse\e[0m extensions_count_upper_lower_str_str_str_str_str_str_str_str_str.toString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: extensions_count_upper_lower_str_str_str_str_str_str_str_str_str\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqw5nkdpo.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    "
  stdout: ''
  timestamp: 1659799841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val extensions_count_cap = extensions.map(_.toUpperCase.length).sum -\
    \ extensions.map(_.toLowerCase.length).sum\n        val extensions_count_sm =\
    \ extensions.map(_.toLowerCase.length).sum - extensions.map(_.toUpperCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower - extensions_count_cap\
    \ - extensions_count_sm\n        val extensions_count_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_count_sorted =\
    \ extensions.sortWith((a, b) => strength - a.length - b.length)\n        val extensions_count_sorted\
    \ = extensions.sortWith((a, b) => strength - a.length - b.length)\n        val\
    \ extensions_count_sorted = extensions.sortWith((a, b) => strength - a.length\
    \ - b.length)\n        val extensions_count_sorted = extensions.sortWith((a, b)\
    \ => strength - a.length - b.length)\n        val extensions_count_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_count_sorted =\
    \ extensions.sortWith((a, b) => strength - a.length - b.length)\n        val extensions_count_sorted\
    \ = extensions.sortWith((a, b) => strength - a.length - b.length)\n        val\
    \ extensions_count_sorted = extensions.sortWith((a, b) => strength - a.length\
    \ - b.length)\n        val extensions_count_sorted = extensions.sortWith((a, b)\
    \ => strength - a.length - b.length)\n        val extensions_count_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_count_sorted =\
    \ extensions.sortWith((a, b) => strength - a.length - b.length)\n        val extensions_count_sorted\
    \ = extensions.sortWith((a, b) => strength - a.length - b.length)\n        val\
    \ extensions_count_sorted = extensions.sortWith((a, b) => strength - a.length\
    \ - b.length)\n        val extensions_count_sorted = extensions.sortWith((a, b)\
    \ => strength - a.length - b.length)\n        val extensions_count_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_count_sorted =\
    \ extensions.sortWith((a, b) => strength - a.length - b.length)\n        val extensions_count_sorted\
    \ = extensions.sortWith((a, b) => strength - a.length - b.length)\n        val\
    \ extensions_count_sorted = extensions.sortWith((a, b) => strength - a.length\
    \ - b.length)\n        val extensions_count_sorted = extensions.sortWith((a, b)\
    \ => strength - a.length - \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6v5uoef2.scala:45:89 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => strength - a.length\
    \ - \n\e[31m\e[31m   |\e[0m                                                  \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6v5uoef2.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => strength - a.length\
    \ - b.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6v5uoef2.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => strength - a.length\
    \ - b.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6v5uoef2.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => strength - a.length\
    \ - b.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((x,\
    \ y) => x - y)\n        val extensions_sorted = extensions_map.values.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp03ub9quf.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp03ub9quf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m = extensions_sorted.takeWhile(_\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp03ub9quf.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp03ub9quf.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mextensions_sorted is already defined as \e[33mvalue\e[0m \e[35mextensions_sorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp03ub9quf.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m = extensions_sorted.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextension"
  stdout: ''
  timestamp: 1659799843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_str = if (strength == 0) \"0\" else strength.toString\n    \
    \    val extensions_count_str = if (extensions_count == 0) \"0\" else extensions_count.toString\n\
    \        val extensions_count_upper = if (extensions_count_upper == 0) \"0\" else\
    \ extensions_count_upper.toString\n        val extensions_count_lower = if (extensions_count_lower\
    \ == 0) \"0\" else extensions_count_lower.toString\n        val extensions_count_str\
    \ = if (extensions_count_str == 0) \"0\" else extensions_count_str.toString\n\
    \        val extensions_count_upper = if (extensions_count_upper == 0) \"0\" else\
    \ extensions_count_upper.toString\n        val extensions_count_lower = if (extensions_count_lower\
    \ == 0) \"0\" else extensions_count_lower.toString\n        val extensions_count_str\
    \ = if (extensions_count_str == 0) \"0\" else extensions_count_str.toString\n\
    \        val extensions_count_upper = if (extensions_count_upper == 0) \"0\" else\
    \ extensions_count_upper.toString\n        val extensions_count_lower = if (extensions_count_lower\
    \ == 0) \"0\" else extensions_count_lower.toString\n        val extensions_count_str\
    \ = if (extensions_count_str == 0) \"0\" else extensions_count_str.toString\n\
    \        val extensions_count_upper = if (extensions_count_upper == 0) \"0\" else\
    \ extensions_count_upper.toString\n        val extensions_count_lower = if (extensions_count_lower\
    \ == 0) \"0\" else extensions_count_lower.toString\n        val extensions_count_str\
    \ = if (extensions_count_str == 0) \"0\" else extensions_count_str.toString\n\
    \        val extensions_count_upper = if (extensions_count_upper == 0) \"0\" else\
    \ extensions_count_upper.toString\n        val extensions_count_lower = if (extensions_count_lower\
    \ == 0) \"0\" else extensions_count_lower.toString\n        val extensions_count_str\
    \ = if (extensions_count_str == 0) \"0\" else extensions_count_str.toString\n\
    \        val extensions_count_upper = if (extensions_count_upper == 0) \"0\" else\
    \ extensions_count_upper.toString\n        val extensions_count_lower = if (extensions_count_lower\
    \ == 0) \"0\" else extensions_count_lower.toString\n        val extensions_count_str\
    \ = if (extensions_count_str == 0) \"0\" else extensions_count_str.toString\n\
    \        val extensions_count_upper = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps15qx58u.scala:44:36 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_upper\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m\
    \   |\e[0m                                    expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps15qx58u.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_count_upper\e[0m = \e[33mif\e[0m (extensions_count_upper ==\
    \ \e[31m0\e[0m) \e[31m\"0\"\e[0m \e[33melse\e[0m extensions_count_upper.toString\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_upper is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_upper\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmps15qx58u.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_lower\e\
    [0m = \e[33mif\e[0m (extensions_count_lower == \e[31m0\e[0m) \e[31m\"0\"\e[0m\
    \ \e[33melse\e[0m extensions_count_lower.toString\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_lower is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_lower\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmps15qx58u.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_str\e[0m\
    \ = \e[33mif\e[0m (extensions_count_str == \e[31m0\e[0m) \e[31m\"0\"\e[0m \e[33melse\e\
    [0m extensions_count_str.toString\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_sorted = extensions.sortWith((x,\
    \ y) => extensions_map(y) - extensions_map(x))\n        val extensions_count =\
    \ extensions_sorted.size\n        val extension_strength = extensions_sorted.last.size\
    \ - extensions_sorted.head.size\n        val extension_strength_fraction = extension_strength.toDouble\
    \ / extensions_count\n        val extension_strength_fraction_rounded = extension_strength_fraction.toInt\n\
    \        val extension_strength_rounded = extension_strength_fraction_rounded\
    \ * -1\n        val extension_strength_rounded_str = extension_strength_rounded.toString\n\
    \        val extension_strength_rounded_str_split = extension_strength_rounded_str.split('.')\n\
    \        val extension_strength_rounded_str_split_length = extension_strength_rounded_str_split.length\n\
    \        val extension_strength_rounded_str_split_length_rounded = extension_strength_rounded_str_split_length.toInt\n\
    \        val extension_strength_rounded_str_split_length_rounded_str = extension_strength_rounded_str_split_length_rounded.toString\n\
    \        val extension_strength_rounded_str_split_length_rounded_str_split = extension_strength_rounded_str_split_length_rounded_str.split('.')\n\
    \        val extension_strength_rounded_str_split_length_rounded_str_split_length\
    \ = extension_strength_rounded_str_split_length_rounded_str_split.length\n   \
    \     val extension_strength_rounded_str_split_length_rounded_str_split_length_rounded\
    \ = extension_strength_rounded_str_split_length_rounded_str_split_length.toInt\n\
    \        val extension_strength_rounded_str_split_length_rounded_str_split_length_rounded_str\
    \ = extension_strength_rounded_str_split_length_rounded_str_split_length_rounded.toString\n\
    \        val extension_strength_rounded_str_split_length_rounded_str_split_length_rounded_str_split\
    \ = extension_strength_rounded_str_split_length_rounded_str_split_length_rounded_str.split('.')\n\
    \        val extension_strength_rounded_str_split_length_rounded_str_split_length_rounded_str_split_length\
    \ = extension_strength_rounded_str_split_length_rounded_str_split_length_rounded_str_split_length.toInt\n\
    \        val extension_strength_rounded_str_split_length_rounded_str_split_length_rounded_str_split_length_rounded_str\
    \ = extension_strength_rounded_str_split_length_rounded_str_split_length_rounded_str_split_length_rounded.toString\n\
    \        val extension_strength_rounded_str_split_length_rounded_str_split_length_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuckksp16.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuckksp16.scala:21:80\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_sorted\e[0m = extensions.sortWith((\e[36mx\e[0m, \e[36my\e[0m)\
    \ => extensions_map(y) - extensions_map(x))\n\e[31m\e[31m   |\e[0m           \
    \                                                   ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpuckksp16.scala:37:108 --------------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mextension_strength_rounded_str_split_length_rounded_str_split_length_rounded_str_split_length\e\
    [0m = extension_strength_rounded_str_split_length_rounded_str_split_length_rounded_str_split_length.toInt\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                    ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  extension_strength_rounded_str_split_length_rounded_str_split_length_rounded_str_split_length\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpuckksp16.scala:38:120 -----------------------\e[0m\e[0m\n\e[31m38 |\e\
    [0m        \e[33mval\e[0m \e[36mextension_strength_rounded_str_split_length_rounded_str_split_length_rounded_str_split_length_rounded_str\e\
    [0m = extension_strength_rounded_str_split_length_rounded_str_split_length_rounded_str_split_leng"
  stdout: ''
  timestamp: 1659799845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = strength / extensions_count_upper\n        val strength_lower\
    \ = strength / extensions_count_lower\n        val extensions_count_diff = extensions_count\
    \ - extensions_count_upper - extensions_count_lower\n        val strength_diff\
    \ = strength / extensions_count_diff\n        val extensions_count_diff_upper\
    \ = extensions_count_diff / extensions_count_upper\n        val strength_diff_upper\
    \ = strength_diff / extensions_count_diff_upper\n        val extensions_count_diff_lower\
    \ = extensions_count_diff / extensions_count_lower\n        val strength_diff_lower\
    \ = strength_diff / extensions_count_diff_lower\n        val extensions_count_diff_diff_upper\
    \ = extensions_count_diff_upper / extensions_count_upper\n        val strength_diff_diff_upper\
    \ = strength_diff_upper / extensions_count_diff_upper\n        val extensions_count_diff_diff_lower\
    \ = extensions_count_diff_lower / extensions_count_lower\n        val strength_diff_diff_lower\
    \ = strength_diff_lower / extensions_count_diff_lower\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_upper / extensions_count_upper\n        val strength_diff_diff_diff_upper\
    \ = strength_diff_diff_upper / extensions_count_diff_upper\n        val extensions_count_diff_diff_diff_lower\
    \ = extensions_count_diff_diff_lower / extensions_count_lower\n        val strength_diff_diff_diff_lower\
    \ = strength_diff_diff_lower / extensions_count_diff_lower\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_upper / extensions_count_upper\n        val\
    \ strength_diff_diff_diff_diff_upper = strength_diff_diff_diff_upper / extensions_count_diff_upper\n\
    \        val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_lower\
    \ / extensions_count_lower\n        val strength_diff_diff_diff_diff_lower = strength_diff_diff_diff_lower\
    \ / extensions_count_diff_lower\n        val extensions_count_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_upper / extensions_count_upper\n    \
    \    val strength_diff_diff_diff_diff_diff_upper = strength_diff_diff_diff_diff_upper\
    \ / extensions_count_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_lower\
    \ = extensions_count_diff_diff_diff_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0gittqx0.scala:46:62 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_diff_diff_diff_diff_diff_lower\e\
    [0m = extensions_count_diff_diff_diff_\n\e[31m\e[31m   |\e[0m                \
    \                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: extensions_count_diff_diff_diff_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0gittqx0.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase))\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase))\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase))\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase))\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase))\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase))\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase))\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase))\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase))\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase))\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase))\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase))\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase))\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase))\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase))\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toLowerCase, e.toUpperCase.charAt(1).toLowerCase))\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toLowerCase,\
    \ e.toUpperCase.charAt(1).toLowerCase))\n        val extensions_map = extensions.map(e\
    \ => (e.\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpke4vpidi.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpke4vpidi.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e[36me\e\
    [0m => (e.toUpperCase.charAt(\e[31m0\e[0m).toLowerCase, e.toUpperCase.charAt(\e\
    [31m1\e[0m).toLowerCase))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_map is already defined as \e[33mvalue\e[0m \e[35mextensions_map\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpke4vpidi.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => (e.toUpperCase.charAt(\e[31m0\e[0m).toLowerCase, e.toUpperCase.charAt(\e\
    [31m1\e[0m).toLowerCase))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_map is already defined as \e[33mvalue\e[0m \e[35mextensions_map\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpke4vpidi.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => (e.toUpperCase.charAt(\e[31m0\e[0m).toLowerCase, e.toUpperCase.charAt(\e\
    [31m1\e[0m).toLowerCase))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_map is already defined as \e[33mvalue\e[0m \e[35mextensions_map\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods m"
  stdout: ''
  timestamp: 1659799846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1) -> 1)\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._2).reverse\n        val extensions_sorted =\
    \ extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.toSeq.sortBy(_._1).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.toSeq.sortBy(_._1).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.toSeq.sortBy(_._1).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.toSeq.sortBy(_._1).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.toSeq.sortBy(_._1).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.toSeq.sortBy(_._1).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.toSeq.sortBy(_._1).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.toSeq.sortBy(_._1).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.toSeq.sortBy(_._1).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.toSeq.sortBy(_._1).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.toSeq.sortBy(_._1).reverse\n        val extensions_sorted\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo7clgso3.scala:44:31 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo7clgso3.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_sorted\e[0m = extensions_sorted.takeWhile(_._2 > \e[31m0\e\
    [0m).map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpo7clgso3.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.toSeq.sortBy(_._1).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpo7clgso3.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > \e[31m0\e[0m).map(_._1)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpo7clgso3.scala:25:12 -----"
  stdout: ''
  timestamp: 1659799848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => class_name_map.getOrElse(x, 0) - x.toUpperCase.length).toList.max\n     \
    \   val extensions_sorted = extensions_map.values.sortBy(x => x.toUpperCase.length).reverse\n\
    \        val class_name_sorted = class_name_map.values.sortBy(x => x.toUpperCase.length).reverse\n\
    \        val strongest_extension = extensions_sorted.find(x => x.toUpperCase.length\
    \ == strength).getOrElse(\"\")\n        class_name_sorted.find(x => x.toUpperCase.length\
    \ == strength).getOrElse(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp86rasc0e.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp86rasc0e.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp86rasc0e.scala:22:79\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = extensions_map.values.map(\e[36mx\e[0m => class_name_map.getOrElse(x, \e\
    [31m0\e[0m) - x.toUpperCase.length).toList.max\n\e[31m\e[31m   |\e[0m        \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (x\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp86rasc0e.scala:23:54\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_sorted\e[0m = extensions_map.values.sortBy(\e[36mx\e[0m => x.toUpperCase.length).reverse\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value sortBy is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp86rasc0e.scala:24:54 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mclass_name_sorted\e[0m =\
    \ class_name_map.values.sortBy(\e[36mx\e[0m => x."
  stdout: ''
  timestamp: 1659799849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_count = extensions_map.size\n        val class_name_map = class_name.map(c\
    \ => c.toUpperCase.charAt(0) -> c.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val class_name_count = class_name_map.size\n        val strength = extensions_count\
    \ - class_name_count\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val class_name_sorted = class_name_map.toSeq.sortBy(_._2).reverse\n \
    \       val extension_sorted = extensions_sorted.take(strength)\n        val class_name\
    \ = class_name_sorted.take(strength)\n        val extension = extension_sorted.take(strength)\n\
    \        class_name + \".\" + extension\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0pq9vruf.scala:20:100 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.charAt(\e[31m0\e[0m) -> e.toUpperCase.charAt(\e[31m1\e\
    [0m).toLowerCase)\n\e[31m\e[31m   |\e[0m                                     \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0pq9vruf.scala:26:32\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mclass_name_sorted\e[0m = class_name_map.toSeq.sortBy(_._2).reverse\n\e\
    [31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m   \
    \                            Recursive \e[33mvalue\e[0m \e[35mclass_name_map\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp0pq9vruf.scala:25:65\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \ \e[33mval\e[0m \e[36mextensions_sorted\e[0m = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m\
    \ \e[35mSeqOps\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659799849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)\n            ).toMap\n        val\
    \ strength = extensions_map.values.reduce((x, y) => x - y)\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extension_strength\
    \ = extensions_sorted.head._2\n        val extension_class = extensions_sorted.head._1\n\
    \        val extension_class_name = extension_class.substring(extension_class.lastIndexOf('.')\
    \ + 1)\n        val extension_class_name_upper = extension_class_name.toUpperCase\n\
    \        val extension_class_name_lower = extension_class_name.toLowerCase\n \
    \       if (strength == extension_strength) {\n            class_name + extension_class_name_upper\n\
    \        } else if (strength > extension_strength) {\n            class_name +\
    \ extension_class_name_lower + extensions_sorted.last._1\n        } else {\n \
    \           class_name + extension_class_name_lower + extensions_sorted.last._2\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj__vnmnt.scala:26:51 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextension_class_name\e[0m\
    \ = extension_class.substring(extension_class.lastIndexOf(\e[31m'.'\e[0m) + \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value substring is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj__vnmnt.scala:26:77\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mextension_class_name\e[0m = extension_class.substring(extension_class.lastIndexOf(\e\
    [31m'.'\e[0m) + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                value lastIndexOf is not a member of\
    \ Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659799850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.split('').map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((acc,\
    \ x) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(x => x._2).reverse\n        val extension_first\
    \ = extensions_sorted.head._1\n        val extension_last = extensions_sorted.last._1\n\
    \        val extension_strength = extensions_sorted.last._2\n        val extension_strength_sorted\
    \ = extensions_sorted.sortBy(x => x._2).reverse\n        val extension_strength_first\
    \ = extensions_strength_sorted.head._1\n        val extension_strength_last =\
    \ extensions_strength_sorted.last._1\n        val extension_strength_strength\
    \ = extensions_strength_sorted.last._2\n        val extension_strength_strength_sorted\
    \ = extensions_strength_sorted.sortBy(x => x._2).reverse\n        val extension_strength_strength_first\
    \ = extensions_strength_strength_sorted.head._1\n        val extension_strength_strength_last\
    \ = extensions_strength_strength_sorted.last._1\n        val extension_strength_strength_strength\
    \ = extensions_strength_strength_sorted.last._2\n        val extension_strength_strength_strength_sorted\
    \ = extensions_strength_strength_sorted.sortBy(x => x._2).reverse\n        val\
    \ extension_strength_strength_strength_first = extensions_strength_strength_strength_sorted.head._1\n\
    \        val extension_strength_strength_strength_last = extensions_strength_strength_strength_sorted.last._1\n\
    \        val extension_strength_strength_strength_strength = extensions_strength_strength_strength_sorted.last._2\n\
    \        val extension_strength_strength_strength_strength_sorted = extensions_strength_strength_strength_sorted.sortBy(x\
    \ => x._2).reverse\n        val extension_strength_strength_strength_strength_first\
    \ = extensions_strength_strength_strength_strength_sorted.head._1\n        val\
    \ extension_strength_strength_strength_strength_last = extensions_strength_strength_strength_strength_sorted.last._1\n\
    \        val extension_strength_strength_strength_strength_strength = extensions_strength_strength_strength\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxvcneizo.scala:21:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.split('').map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                                    empty character literal\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpxvcneizo.scala:28:39 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mextension_strength_first\e[0m\
    \ = extensions_strength_sorted.head._1\n\e[31m\e[31m   |\e[0m                \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                              Not found: extensions_strength_sorted\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxvcneizo.scala:29:38 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mextension_strength_last\e\
    [0m = extensions_strength_sorted.last._1\n\e[31m\e[31m   |\e[0m              \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                               Not found: extensions_strength_sorted\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxvcneizo.scala:30:42 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mextension_strength_strength\e\
    [0m = extensions_strength_sorted.last._2\n\e[31m\e[31m   |\e[0m              \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: extensions_strength_sorted\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxvcneizo.scala:31:49\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mextension_strength_strength_sorted\e[0m = extensions_strength_sorted.sortBy(\e\
    [36mx\e[0m => x._2).reverse\n\e[31m\e[31m   |\e["
  stdout: ''
  timestamp: 1659799852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toInt)\n        val extensions_map\
    \ = extensions.map(e => (e.toUpperCase.charAt(0).toInt, e.toUpperCase.charAt(1).toInt)).toMap\n\
    \        val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toInt,\
    \ e.toUpperCase.charAt(1).toInt)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toInt, e.toUpperCase.charAt(1).toInt)).toMap\n \
    \       val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toInt,\
    \ e.toUpperCase.charAt(1).toInt)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toInt, e.toUpperCase.charAt(1).toInt)).toMap\n \
    \       val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toInt,\
    \ e.toUpperCase.charAt(1).toInt)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toInt, e.toUpperCase.charAt(1).toInt)).toMap\n \
    \       val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toInt,\
    \ e.toUpperCase.charAt(1).toInt)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toInt, e.toUpperCase.charAt(1).toInt)).toMap\n \
    \       val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toInt,\
    \ e.toUpperCase.charAt(1).toInt)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toInt, e.toUpperCase.charAt(1).toInt)).toMap\n \
    \       val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toInt,\
    \ e.toUpperCase.charAt(1).toInt)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toInt, e.toUpperCase.charAt(1).toInt)).toMap\n \
    \       val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toInt,\
    \ e.toUpperCase.charAt(1).toInt)).toMap\n        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.charAt(0).toInt, e.toUpperCase.charAt(1).toInt)).toMap\n \
    \       val extensions_map = extensions.map(e => (e.toUpperCase.charAt(0).toInt,\
    \ e.toUpperCase.charAt(1).toInt)).toMap\n        val extensions_map = extensions.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp61ti4nth.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp61ti4nth.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e[36me\e\
    [0m => (e.toUpperCase.charAt(\e[31m0\e[0m).toInt, e.toUpperCase.charAt(\e[31m1\e\
    [0m).toInt)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_map is already defined as \e[33mvalue\e[0m \e[35mextensions_map\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp61ti4nth.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => (e.toUpperCase.charAt(\e[31m0\e[0m).toInt, e.toUpperCase.charAt(\e\
    [31m1\e[0m).toInt)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_map is already defined as \e[33mvalue\e[0m \e[35mextensions_map\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp61ti4nth.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => (e.toUpperCase.charAt(\e[31m0\e[0m).toInt, e.toUpperCase.charAt(\e\
    [31m1\e[0m).toInt)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_map is already defined as \e[33mvalue\e[0m \e[35mextensions_map\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group"
  stdout: ''
  timestamp: 1659799853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4r0y0eu1.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4r0y0eu1.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_sorted\e[0m = extensions_sorted.takeWhile(_._2 > \e[31m0\e\
    [0m).map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4r0y0eu1.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > \e[31m0\e[0m).map(_._1)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4r0y0eu1.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > \e[31m0\e[0m).map(_._1)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4r0y0eu1.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > \e[31m0\e[0m).map(_._1)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_str = if (strength == 0) \"0\" else strength.toString\n    \
    \    val extensions_str = extensions.map(_.toUpperCase).mkString(\".\")\n    \
    \    val class_name_str = class_name.toUpperCase\n        val extension_str =\
    \ extensions_str.dropRight(extensions_str.length - 1)\n        val class_name_and_extension\
    \ = class_name_str + \".\" + extension_str\n        val strength_extension_str\
    \ = class_name_and_extension + \".\" + strength_str\n        val strength_extension_str2\
    \ = class_name_and_extension + \".\" + extensions_str\n        val strength_extension_str3\
    \ = class_name_and_extension + \".\" + extensions_count.toString\n        val\
    \ strength_extension_str4 = class_name_and_extension + \".\" + extensions_count_upper.toString\n\
    \        val strength_extension_str5 = class_name_and_extension + \".\" + extensions_count_lower.toString\n\
    \        val strength_extension_str6 = class_name_and_extension + \".\" + strength_str\
    \ + extensions_str\n        val strength_extension_str7 = class_name_and_extension\
    \ + \".\" + strength_str + extensions_count.toString\n        val strength_extension_str8\
    \ = class_name_and_extension + \".\" + strength_str + extensions_count_upper.toString\n\
    \        val strength_extension_str9 = class_name_and_extension + \".\" + strength_str\
    \ + extensions_count_lower.toString\n        val strength_extension_str10 = class_name_and_extension\
    \ + \".\" + strength_str + extensions_count_upper + extensions_str\n        val\
    \ strength_extension_str11 = class_name_and_extension + \".\" + strength_str +\
    \ extensions_count_lower + extensions_str\n        val strength_extension_str12\
    \ = class_name_and_extension + \".\" + strength_str + extensions_count_upper +\
    \ extensions_count.toString\n        val strength_extension_str13 = class_name_and_extension\
    \ + \".\" + strength_str + extensions_count_lower + extensions_count.toString\n\
    \        val strength_extension_str14 = class_name_and_extension + \".\" + strength_str\
    \ + extensions_count_upper + extensions_count_upper.toString\n        val strength_extension_str15\
    \ = class_name_and_extension + \".\" + strength_str + extensions_count_lower +\
    \ extensions_count_upper.toString\n        val strength_extension_str16 = class_name_and_extension\
    \ + \".\" + strength_str + extensions_count_upper \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcyf35hes.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (acc, x) => acc + (x._2.length - x._1.length) }\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(x => x._2.length - x._1.length)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(x => x._2 != class_name)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(x => x._2 != extensions_sorted.last._2)\n    \
    \    val extensions_sorted = extensions_sorted.takeWhile(x => x._2 != extensions_sorted.last._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x._2 != extensions_sorted.last._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x._2 != extensions_sorted.last._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x._2 != extensions_sorted.last._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x._2 != extensions_sorted.last._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x._2 != extensions_sorted.last._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x._2 != extensions_sorted.last._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x._2 != extensions_sorted.last._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x._2 != extensions_sorted.last._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x._2 != extensions_sorted.last._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x._2 != extensions_sorted.last._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x._2 != extensions_sorted.last._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x._2 != extensions_sorted.last._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x._2 != extensions_sorted.last._2)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9jlfzzna.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(\e[36mx\e[0m => x._2 != class_name)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9jlfzzna.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(\e[36mx\e[0m => x._2 != extensions_sorted.last._2)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9jlfzzna.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(\e[36mx\e[0m => x._2 != extensions_sorted.last._2)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9jlfzzna.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(\e[36mx\e[0m => x._2 != extensions_sorted.last._2)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n      \
    \  val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n    \
    \    val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sor\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzt_y6inf.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzt_y6inf.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_sorted\e[0m = extensions_sorted.takeWhile(_._2 > \e[31m0\e\
    [0m).map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzt_y6inf.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.toSeq.sortBy(_._1).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzt_y6inf.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > \e[31m0\e[0m).map(_._1)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzt_y6inf.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.toSeq.sortBy(_._1).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.max\n\
    \        val strongest_extension = extensions_map.values.find(x => x._1 == strength).map(_._2).head\n\
    \        class_name + \".\" + strongest_extension\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfv9ghxz1.scala:22:68 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrongest_extension\e[0m\
    \ = extensions_map.values.find(\e[36mx\e[0m => x._1 == strength).map(_._2).head\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \ value _1 is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfv9ghxz1.scala:22:90\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mstrongest_extension\e[0m = extensions_map.values.find(\e[36mx\e[0m => x._1\
    \ == strength).map(_._2).head\n\e[31m\e[31m   |\e[0m                         \
    \                                                               ^^^^\e[0m\n\e\
    [31m   |\e[0m                                         value _2 is not a member\
    \ of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659799855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val class_name_length = class_name.length\n        val strength = extensions_count\
    \ - class_name_length\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_first = extensions_sorted.head\n\
    \        val extensions_last = extensions_sorted.last\n        val extensions_first_length\
    \ = extensions_first.length\n        val extensions_last_length = extensions_last.length\n\
    \        val extensions_first_first_letter = extensions_first.charAt(0)\n    \
    \    val extensions_last_last_letter = extensions_last.charAt(extensions_last.length\
    \ - 1)\n        val extensions_first_last_letter = extensions_first.charAt(extensions_first.length\
    \ - 1)\n        val extensions_first_first_letter_length = extensions_first_first_letter.length\n\
    \        val extensions_last_last_letter_length = extensions_last_last_letter.length\n\
    \        val extensions_first_last_letter_length = extensions_first_last_letter.length\n\
    \        val extensions_first_first_letter_strength = extensions_first_first_letter.toLowerCase\
    \ - extensions_first_last_letter.toLowerCase + 1\n        val extensions_last_last_letter_strength\
    \ = extensions_last_last_letter.toLowerCase - extensions_first_first_letter.toLowerCase\
    \ + 1\n        val extensions_first_last_letter_strength = extensions_first_last_letter.toLowerCase\
    \ - extensions_last_last_letter.toLowerCase + 1\n        val extensions_first_first_letter_strength_length\
    \ = extensions_first_first_letter_strength.length\n        val extensions_last_last_letter_strength_length\
    \ = extensions_last_last_letter_strength.length\n        val extensions_first_last_letter_strength_length\
    \ = extensions_first_last_letter_strength.length\n        val extensions_first_first_letter_strength_strength\
    \ = extensions_first_first_letter_strength.toLowerCase - extensions_last_last_letter_strength.toLowerCase\
    \ + 1\n        val extensions_last_last_letter_strength_strength = extensions_last_last_letter_strength.toLowerCase\
    \ - extensions_first_first_letter_strength.toLowerCase + 1\n        val extensions_first_last_letter_strength_strength\
    \ = extensions_first_last_letter_strength.toLowerCase - extensions_last_last_letter_strength.toLowerCase\
    \ + 1\n        val extensions_first_first_letter_strength_strength_length = extensions_first_first_letter_strength_strength.length\n\
    \        val extensions_last_last_letter_strength_strength_length = extensions_last_last_letter_strength_strength.length\n\
    \        val extensions_first_last_letter_strength_strength_strength = extensions_first_last_letter_strength_strength.toLowerCase\
    \ - extensions_last_last_letter_strength_strength.toLowerCase + 1\n        val\
    \ extensions_first_\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0afahwtv.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0afahwtv.scala:23:62 --------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \        \e[33mval\e[0m \e[36mextensions_sorted\e[0m = extensions.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => strength - a.length - b.length)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Int\n\e[31m   |\e[0m                                                    \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0afahwtv.scala:31:81\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_first_first_letter_length\e[0m = extensions_first_first_letter.length\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0afahwtv.scala:32:77\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_last_last_letter_length\e[0m = extensions_last_last_letter.length\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0afahwtv.scala:33:79\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_first_last_letter_length\e[0m = extensions_first_last_letter.length\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Char\n\e[31m\e[31m-- ["
  stdout: ''
  timestamp: 1659799856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((x,\
    \ y) => (x._2 - y._2))\n        val extensions_sorted = extensions_map.toSeq.sortBy(x\
    \ => x._2)\n        val extension_strength = extensions_sorted.last._2\n     \
    \   val extension_str = extensions_sorted.last._1\n        val extension_class\
    \ = extension_str.substring(0, extension_str.length - 1)\n        val extension_class_name\
    \ = extension_class.substring(extension_class.lastIndexOf('.') + 1)\n        val\
    \ extension_class_name_sorted = extension_class_name.substring(extension_class_name.lastIndexOf('_')\
    \ + 1).toUpperCase\n        val extension_class_name_strength = extension_class_name_sorted.length\
    \ - extension_class_name_sorted.lastIndexOf('_') + 1\n        val extension_class_name_strength_str\
    \ = extension_class_name_strength.toString\n        if (extension_strength ==\
    \ -1) {\n            class_name + extension_str\n        } else if (extension_strength\
    \ > 0) {\n            class_name + extension_str + extension_class_name_strength_str\
    \ + extension_class_name_sorted\n        } else {\n            class_name + extension_str\
    \ + extension_class_name_sorted\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzcl7659m.scala:21:63 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.foldLeft(\e\
    [31m0\e[0m)((\e[36mx\e[0m, \e[36my\e[0m) => (x._2 - y._2))\n\e[31m\e[31m   |\e\
    [0m                                                             ^^^^\e[0m\n\e\
    [31m   |\e[0m                                         value _2 is not a member\
    \ of Int\n\e[31m\e[31m-- Error: /tmp/tmpzcl7659m.scala:30:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mif\e[0m (extension_strength == -\e[31m1\e\
    [0m) {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m         Values of types String and Int cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzcl7659m.scala:32:40\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m        } \e[33melse\e[0m \e\
    [33mif\e[0m (extension_strength > \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m     \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                      Found:    (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m       \
    \                                 Required: String\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_str = strength.toString\n        val strength_str_upper = strength_str.toUpperCase\n\
    \        val strength_str_lower = strength_str.toLowerCase\n        val strength_str_upper\
    \ = strength_str_upper.charAt(0)\n        val strength_str_lower = strength_str_lower.charAt(0)\n\
    \        val strength_str_upper = strength_str_upper - strength_str_lower\n  \
    \      val strength_str_upper = strength_str_upper.toString\n        val strength_str_lower\
    \ = strength_str_lower.toString\n        val strength_str_upper = strength_str_upper.charAt(0)\n\
    \        val strength_str_lower = strength_str_lower.charAt(0)\n        val strength_str_upper\
    \ = strength_str_upper - strength_str_lower\n        val strength_str_upper =\
    \ strength_str_upper.toString\n        val strength_str_lower = strength_str_lower.toString\n\
    \        val strength_str_upper = strength_str_upper.charAt(0)\n        val strength_str_lower\
    \ = strength_str_lower.charAt(0)\n        val strength_str_upper = strength_str_upper\
    \ - strength_str_lower\n        val strength_str_upper = strength_str_upper.toString\n\
    \        val strength_str_lower = strength_str_lower.toString\n        val strength_str_upper\
    \ = strength_str_upper.charAt(0)\n        val strength_str_lower = strength_str_lower.charAt(0)\n\
    \        val strength_str_upper = strength_str_upper - strength_str_lower\n  \
    \      val strength_str_upper = strength_str_upper.toString\n        val strength_str_lower\
    \ = strength_str_lower.toString\n        val strength_str_upper = strength_str_upper.charAt(0)\n\
    \        val strength_str_lower = strength_str_lower.charAt(0)\n        val strength_str_upper\
    \ = strength_str_upper - strength_str_lower\n        val strength_str_upper =\
    \ strength_str_upper.toString\n        val strength_str_lower = strength_str_lower.toString\n\
    \        val strength_str_upper = strength_str_upper.charAt(0)\n        val strength_str_lower\
    \ = strength_str_lower.charAt(0)\n        val strength_str_upper = strength_str_upper\
    \ - strength_str_lower\n        val strength_str_upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxa4ntscl.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxa4ntscl.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstrength_str_upper\e[0m = strength_str_upper.charAt(\e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrength_str_upper is already defined as \e[33mvalue\e[0m\
    \ \e[35mstrength_str_upper\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxa4ntscl.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mstrength_str_lower\e[0m\
    \ = strength_str_lower.charAt(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrength_str_lower is already defined as \e[33mvalue\e[0m\
    \ \e[35mstrength_str_lower\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxa4ntscl.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mstrength_str_upper\e[0m\
    \ = strength_str_upper - strength_str_lower\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrength_str_upper is already defined as \e[33mvalue\e[0m\
    \ \e[35mstrength_str_upper\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxa4ntscl.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mstrength_str_upper\e[0m\
    \ = strength_str_upper.toString\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrength_str_upper is already defined as \e[33mvalue\e[0m\
    \ \e"
  stdout: ''
  timestamp: 1659799855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.values.max\n        val\
    \ extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpny8_2lb0.scala:43:11 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpny8_2lb0.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > \e[31m0\e[0m).map(_._1)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpny8_2lb0.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > \e[31m0\e[0m).map(_._1)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpny8_2lb0.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > \e[31m0\e[0m).map(_._1)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpny8_2lb0.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions"
  stdout: ''
  timestamp: 1659799787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => (x - class_name_map.get(x)).abs)\n        val max_strength = strength.max\n\
    \        val max_key = strength.maxBy(x => x)\n        val max_key_index = strength.indexOf(max_key)\n\
    \        val max_key_name = extensions_map.get(max_key)\n        val max_key_name_index\
    \ = extensions_map.indexOf(max_key_name)\n        val max_key_name_length = max_key_name_index\
    \ - max_key_index\n        val max_key_name_length = max_key_name_length / 2\n\
    \        val max_key_name_length = max_key_name_length.toString.length\n     \
    \   val max_key_name_length = max_key_name_length + max_key_name_length\n    \
    \    val max_key_name_length = max_key_name_length + max_key_name_length\n   \
    \     val max_key_name_length = max_key_name_length + max_key_name_length\n  \
    \      val max_key_name_length = max_key_name_length + max_key_name_length\n \
    \       val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \        val max_key_name_length = max_key_name_length + max_key_name_length\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqnb2xyxj.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmax_key_name_length\e[0m\
    \ = max_key_name_length / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_key_name_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmax_key_name_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqnb2xyxj.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmax_key_name_length\e[0m\
    \ = max_key_name_length.toString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_key_name_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmax_key_name_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqnb2xyxj.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmax_key_name_length\e[0m\
    \ = max_key_name_length + max_key_name_length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_key_name_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmax_key_name_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqnb2xyxj.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmax_key_name_length\e[0m\
    \ = max_key_name_length + max_key_name_length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_key_name_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmax_key_name_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[3"
  stdout: ''
  timestamp: 1659799857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val strengths = extensions_map.values.map(_.toString.toInt)\n        val max_strength\
    \ = strengths.max\n        val max_strength_extension = extensions_map.filter(_._2\
    \ == max_strength).head\n        val class_name_with_max_strength = class_name\
    \ + max_strength_extension._1\n        val extensions_with_max_strength = extensions_map.filter(_._2\
    \ == max_strength)\n        val extensions_with_max_strength_first = extensions_with_max_strength.sortBy(_._1).head\n\
    \        val extensions_with_max_strength_last = extensions_with_max_strength.sortBy(_._1).last\n\
    \        val extensions_with_max_strength_first_last = extensions_with_max_strength_first\
    \ + extensions_with_max_strength_last\n        val extensions_with_max_strength_first_last_sorted\
    \ = extensions_with_max_strength_first_last.sortBy(_._1).reverse\n        val\
    \ extensions_with_max_strength_first_last_sorted_first = extensions_with_max_strength_first_last_sorted.head\n\
    \        val extensions_with_max_strength_first_last_sorted_last = extensions_with_max_strength_first_last_sorted.last\n\
    \        val extensions_with_max_strength_first_last_sorted_first_last = extensions_with_max_strength_first_last_sorted_first\
    \ + extensions_with_max_strength_first_last_sorted_last\n        val extensions_with_max_strength_first_last_sorted_first_last_sorted\
    \ = extensions_with_max_strength_first_last_sorted_first_last.sortBy(_._1).reverse\n\
    \        val extensions_with_max_strength_first_last_sorted_first_last_sorted_first\
    \ = extensions_with_max_strength_first_last_sorted_first_last_sorted.head\n  \
    \      val extensions_with_max_strength_first_last_sorted_first_last_sorted_last\
    \ = extensions_with_max_strength_first_last_sorted_first_last_sorted.last\n  \
    \      val extensions_with_max_strength_first_last_sorted_first_last_sorted_first_last\
    \ = extensions_with_max_strength_first_last_sorted_first_last_sorted_first + extensions_with_max_strength_first_last_sorted_first_last_sorted_last\n\
    \        val extensions_with_max_strength_first_last_sorted_first_last_sorted_first_last_sorted\
    \ = extensions_with_max_strength_first_last_sorted_first_last_sorted_first_last_sorted.sortBy(_._1).reverse\n\
    \        val extensions_with_max_strength_first_last_sorted_first_last_sorted_first_last_sorted_first\
    \ = extensions_with_max_strength_first_last_sorted_first_last_sorted_first_last_sorted_last.head\n\
    \        val extensions_with_max_strength_first_last_sorted_first_last_sorted_first_last_sorted_last\
    \ = extensions_with_max_strength_first_last_sorted_first_last_sorted_first_last_sorted_last.last\n\
    \        val extensions_with_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpioumvwtf.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpioumvwtf.scala:20:100\
    \ -----------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_map\e[0m = extensions.map(\e[36me\e[0m => e.toUpperCase.charAt(\e\
    [31m0\e[0m) -> e.toUpperCase.charAt(\e[31m1\e[0m).toLowerCase)\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                    value toLowerCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpioumvwtf.scala:21:39 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstrengths\e[0m = extensions_map.values.map(_.toString.toInt)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   value values is not a member of List[(Char, Nothing)]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpioumvwtf.scala:28:89 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mextensions_with_max_strength_first_last\e\
    [0m = extensions_with_max_strength_first + extensions_with_max_strength_last\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of (Char, Nothing), but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpioumvwtf.scala:37:97 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mextensions_with_max_strength_first_last_sorted_first_last_sorted_first_last_s"
  stdout: ''
  timestamp: 1659799856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (s, e) =>\n            val c = class_name_map(e._1)\n            val m = extensions_map(e._2)\n\
    \            val cap = m.toList.map(x => x.toUpperCase).count(x => x.isUpper)\n\
    \            val sm = m.toList.map(x => x.toLowerCase).count(x => x.isLower)\n\
    \            val strength = cap - sm\n            if (strength > s) strength else\
    \ s\n        }\n        val class_name_with_strength = class_name_map.foldLeft(\"\
    \") { (s, e) =>\n            val c = class_name_map(e._1)\n            val m =\
    \ extensions_map(e._2)\n            val cap = m.toList.map(x => x.toUpperCase).count(x\
    \ => x.isUpper)\n            val sm = m.toList.map(x => x.toLowerCase).count(x\
    \ => x.isLower)\n            val strength = cap - sm\n            if (strength\
    \ > s) s + \".\" + e._1 else s\n        }\n        class_name_with_strength\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiykao00x.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpiykao00x.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiykao00x.scala:23:37\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e\
    [36mc\e[0m = class_name_map(e._1)\n\e[31m\e[31m   |\e[0m                     \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                                   Found:\
    \    String\n\e[31m   |\e[0m                                   Required: Nothing\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiykao00x.scala:25:42\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcap\e[0m = m.toList.map(\e[36mx\e[0m => x.toUpperCase).count(\e[36mx\e\
    [0m => x.isUpper)\n\e[31m\e[31m   |\e[0m                                     \
    \   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value toUpperCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiykao00x.scala:25:68\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcap\e[0m = m.toList.map(\e[36mx\e[0m => x.toUpperCase).count(\e[36mx\e\
    [0m => x.isUpper)\n\e[31m\e[31m   |\e[0m                                     \
    \                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                    value isUpper is not a mem"
  stdout: ''
  timestamp: 1659799858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((x,\
    \ y) => (x._2 - y._2))\n        val extensions_sorted = extensions_map.toSeq.sortBy(x\
    \ => x._2)\n        val extensions_sorted = extensions_sorted.takeWhile(x => x._2\
    \ > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).sortBy(x => x._1)\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp2gx_m3gf.scala:39:11 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp2gx_m3gf.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(\e[36mx\e[0m => x._2 > \e[31m0\e[0m).sortBy(\e[36mx\e\
    [0m => x._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2gx_m3gf.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(\e[36mx\e[0m => x._2 > \e[31m0\e[0m).sortBy(\e[36mx\e\
    [0m => x._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2gx_m3gf.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(\e[36mx\e[0m => x._2 > \e[31m0\e[0m).sortBy(\e[36mx\e\
    [0m => x._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E1"
  stdout: ''
  timestamp: 1659799857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_count = extensions_map.values.toList\n\
    \        val extensions_count_sorted = extensions_count.sortBy(x => -x)\n    \
    \    val strength = extensions_count_sorted.head\n        val extensions_count_sorted\
    \ = extensions_count.sortBy(x => -x)\n        val extensions_count_sorted = extensions_count.sortBy(x\
    \ => -x)\n        val extensions_count_sorted = extensions_count.sortBy(x => -x)\n\
    \        val extensions_count_sorted = extensions_count.sortBy(x => -x)\n    \
    \    val extensions_count_sorted = extensions_count.sortBy(x => -x)\n        val\
    \ extensions_count_sorted = extensions_count.sortBy(x => -x)\n        val extensions_count_sorted\
    \ = extensions_count.sortBy(x => -x)\n        val extensions_count_sorted = extensions_count.sortBy(x\
    \ => -x)\n        val extensions_count_sorted = extensions_count.sortBy(x => -x)\n\
    \        val extensions_count_sorted = extensions_count.sortBy(x => -x)\n    \
    \    val extensions_count_sorted = extensions_count.sortBy(x => -x)\n        val\
    \ extensions_count_sorted = extensions_count.sortBy(x => -x)\n        val extensions_count_sorted\
    \ = extensions_count.sortBy(x => -x)\n        val extensions_count_sorted = extensions_count.sortBy(x\
    \ => -x)\n        val extensions_count_sorted = extensions_count.sortBy(x => -x)\n\
    \        val extensions_count_sorted = extensions_count.sortBy(x => -x)\n    \
    \    val extensions_count_sorted = extensions_count.sortBy(x => -x)\n        val\
    \ extensions_count_sorted = extensions_count.sortBy(x => -x)\n        val extensions_count_sorted\
    \ = extensions_count.sortBy(x => -x)\n        val extensions_count_sorted = extensions_count.sortBy(x\
    \ => -x)\n        val extensions_count_sorted = extensions_count.sortBy(x => -x)\n\
    \        val extensions_count_sorted = extensions_count.sortBy(x => -x)\n    \
    \    val extensions_count_sorted = extensions_count.sortBy(x => -x)\n        val\
    \ extensions_count_sorted = extensions_count.sortBy(x => -x)\n        val extensions_count_sorted\
    \ = extensions_count.sortBy(x => -x)\n        val extensions_count_sorted = extensions_count.sortBy(x\
    \ => -x)\n        val extensions_count_sorted = extensions_count.sort\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5u1t3q1f.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions_count.sortBy(\e[36mx\e[0m => -x)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e[0m \e[35mextensions_count_sorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5u1t3q1f.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e[0m = extensions_count.sortBy(\e\
    [36mx\e[0m => -x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5u1t3q1f.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions_count.sortBy(\e[36mx\e[0m => -x)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e[0m \e[35mextensions_count_sorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5u1t3q1f.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e[0m = extensions_count.sortBy(\e\
    [36mx\e[0m => -x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded method"
  stdout: ''
  timestamp: 1659799857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val extensions_count_diff = extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_diff_frac = extensions_count_diff / extensions_count_upper\n\
    \        val extensions_count_diff_frac_upper = extensions_count_diff_frac / extensions_count_upper\n\
    \        val extensions_count_diff_frac_lower = extensions_count_diff_frac / extensions_count_lower\n\
    \        val extensions_count_diff_frac_diff = extensions_count_diff_frac_upper\
    \ - extensions_count_diff_frac_lower\n        val extensions_count_diff_frac_diff_frac\
    \ = extensions_count_diff_frac_diff / extensions_count_diff\n        val extensions_count_diff_frac_diff_frac_upper\
    \ = extensions_count_diff_frac_diff_frac / extensions_count_diff\n        val\
    \ extensions_count_diff_frac_diff_frac_lower = extensions_count_diff_frac_diff_frac\
    \ / extensions_count_diff\n        val extensions_count_diff_frac_diff_frac_diff\
    \ = extensions_count_diff_frac_diff_frac_upper - extensions_count_diff_frac_diff_frac_lower\n\
    \        val extensions_count_diff_frac_diff_frac_diff_frac = extensions_count_diff_frac_diff_frac_diff\
    \ / extensions_count_diff\n        val extensions_count_diff_frac_diff_frac_diff_frac_upper\
    \ = extensions_count_diff_frac_diff_frac_diff_frac / extensions_count_diff\n \
    \       val extensions_count_diff_frac_diff_frac_diff_frac_lower = extensions_count_diff_frac_diff_frac_diff_frac\
    \ / extensions_count_diff\n        val extensions_count_diff_frac_diff_frac_diff_frac_diff\
    \ = extensions_count_diff_frac_diff_frac_diff_frac_upper - extensions_count_diff_frac_diff_frac_diff_frac_lower\n\
    \        val extensions_count_diff_frac_diff_frac_diff_frac_diff_frac = extensions_count_diff_frac_diff_frac_diff_frac_diff\
    \ / extensions_count_diff\n        val extensions_count_diff_frac_diff_frac_diff_frac_diff_frac_upper\
    \ = extensions_count_diff_frac_diff_frac_diff_frac_diff_frac / extensions_count_diff\n\
    \        val extensions_count_diff_frac_diff_frac_diff_frac_diff_frac_lower =\
    \ extensions_count_diff_frac_diff_frac_diff_frac_diff_frac / \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"),\
    \ (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpovq8tccp.scala:38:135 --------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_diff_frac_diff_frac_diff_frac_diff_frac_lower\e\
    [0m = extensions_count_diff_frac_diff_frac_diff_frac_diff_frac / \n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                    ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpovq8tccp.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val strength = extensions_sorted.map(x => extensions_map(x._2)).sum\n\
    \        val class_name_with_extension = class_name + extensions_sorted.head._2\n\
    \        val extension_with_strength = extensions_sorted.head._1\n        val\
    \ strength_str = strength.toString\n        val extension_str = extension_with_strength\n\
    \        if (strength_str == extension_str) {\n            class_name_with_extension\n\
    \        } else {\n            class_name_with_extension + extension_str\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_gshnd6b.scala:22:75 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_sorted.map(\e\
    [36mx\e[0m => extensions_map(x._2)).sum\n\e[31m\e[31m   |\e[0m               \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                No implicit Ordering defined for B\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m                where:    B is a type variable with constraint >:\
    \ String\n\e[31m   |\e[0m                .\n1 error found\n"
  stdout: ''
  timestamp: 1659799856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => x.toUpperCase).zipWithIndex.toMap\n        val class_name_map = class_name.zipWithIndex.toMap\n\
    \        val extensions_count = extensions_map.values.toList\n        val class_name_count\
    \ = class_name_map.values.toList\n        val max_count = extensions_count.max\n\
    \        val max_index = extensions_count.indexOf(max_count)\n        val max_key\
    \ = extensions_count.take(max_index).last\n        val max_value = class_name_count.take(max_index).last\n\
    \        val max_key = class_name_count.take(max_index).last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val max_key = max_value.last\n        val max_value\
    \ = max_key.last\n        val \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpwa3id14e.scala:78:11 ---------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpwa3id14e.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmax_key\e[0m = class_name_count.take(max_index).last\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_key is already defined as \e[33mvalue\e[0m \e[35mmax_key\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwa3id14e.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmax_value\e[0m = max_key.last\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax_value\
    \ is already defined as \e[33mvalue\e[0m \e[35mmax_value\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwa3id14e.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_key\e[0m = max_value.last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_key is already defined as \e[33mvalue\e[0m \e[35mmax_key\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwa3id14e.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mmax_value\e[0m = max_key.last\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax_value\
    \ is already defined as \e[33mvalue\e[0m \e[35mmax_value\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] "
  stdout: ''
  timestamp: 1659799858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        // Your code here\n        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_sorted = extensions.sortBy(_.length)\n\
    \        val strength = extensions_count_sorted.last.length - extensions_count_sorted.head.length\n\
    \        val class_name_with_extension = class_name + extensions.map(_.capitalize).mkString(\"\
    .\") + \".\"\n        if(strength == 0) class_name_with_extension\n        else\
    \ if(strength == 1) class_name_with_extension + extensions_count_sorted.head\n\
    \        else if(strength == -1) class_name_with_extension + extensions_count_sorted.last\n\
    \        else class_name_with_extension + extensions_count_sorted.last.substring(0,\
    \ strength)\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvwdwnbp6.scala:31)\n\tat Problem.main(tmpvwdwnbp6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (acc, x) => acc + (class_name_map(x._1) - class_name_map(x._2)) }\n      \
    \  val strongest_extension = extensions_map.maxBy(x => strength(x._1))\n     \
    \   class_name + strongest_extension._2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1jon63ge.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1jon63ge.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1jon63ge.scala:22:88\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = extensions_map.foldLeft(\e[31m0\e[0m) { (\e[36macc\e[0m, \e[36mx\e[0m) =>\
    \ acc + (class_name_map(x._1) - class_name_map(x._2)) }\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \               Found:    String\n\e[31m   |\e[0m                            \
    \                           Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1jon63ge.scala:22:111 -------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.foldLeft(\e\
    [31m0\e[0m) { (\e[36macc\e[0m, \e[36mx\e[0m) => acc + (class_name_map(x._1) -\
    \ class_name_map(x._2)) }\n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                                              \
    \         Found:    String\n\e[31m   |\e[0m                                  \
    \                     Required: Nothing\n\e[31m   "
  stdout: ''
  timestamp: 1659799840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(x\
    \ => x.length).sum\n        val extensions_count_upper = extensions.map(x => x.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(x => x.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = extensions_count_upper - strength\n        val strength_lower\
    \ = extensions_count_lower - strength\n        val strength_total = extensions_count_upper\
    \ + extensions_count_lower + strength\n        if (strength_total > 0) \n    \
    \        class_name + extensions.sortWith(x => x.toUpperCase.compareTo(x))(strength_upper)\n\
    \        else\n            class_name + extensions.sortWith(x => x.toLowerCase.compareTo(x))(strength_lower)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp_h1_jvag.scala:28:47 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            class_name + extensions.sortWith(\e[36mx\e\
    [0m => x.toUpperCase.compareTo(x))(strength_upper)\n\e[31m\e[31m   |\e[0m    \
    \                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 2\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp_h1_jvag.scala:30:47 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            class_name + extensions.sortWith(\e[36mx\e\
    [0m => x.toLowerCase.compareTo(x))(strength_lower)\n\e[31m\e[31m   |\e[0m    \
    \                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 2\n2 errors found\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1) -> e).toMap\n        val\
    \ class_name_map = class_name.map(c => c.toUpperCase.charAt(0) -> c.toUpperCase.charAt(1)\
    \ -> c).toMap\n        val strength = extensions_map.values.map(_.toString.toInt).sum\n\
    \        val class_name_with_strength = class_name_map.filter(_._2 > strength).map(_._1).mkString(\"\
    .\") + \".\" + extensions_map.filter(_._2 == strength).map(_._2).mkString(\".\"\
    ) + \".\"\n        val class_name_with_strength_2 = class_name_with_strength.substring(0,\
    \ class_name_with_strength.lastIndexOf(\".\"))\n        val class_name_with_strength_3\
    \ = class_name_with_strength_2.substring(0, class_name_with_strength_2.lastIndexOf(\"\
    .\"))\n        val class_name_with_strength_4 = class_name_with_strength_3.substring(0,\
    \ class_name_with_strength_3.lastIndexOf(\".\"))\n        val class_name_with_strength_5\
    \ = class_name_with_strength_4.substring(0, class_name_with_strength_4.lastIndexOf(\"\
    .\"))\n        val class_name_with_strength_6 = class_name_with_strength_5.substring(0,\
    \ class_name_with_strength_5.lastIndexOf(\".\"))\n        val class_name_with_strength_7\
    \ = class_name_with_strength_6.substring(0, class_name_with_strength_6.lastIndexOf(\"\
    .\"))\n        val class_name_with_strength_8 = class_name_with_strength_7.substring(0,\
    \ class_name_with_strength_7.lastIndexOf(\".\"))\n        val class_name_with_strength_9\
    \ = class_name_with_strength_8.substring(0, class_name_with_strength_8.lastIndexOf(\"\
    .\"))\n        val class_name_with_strength_10 = class_name_with_strength_9.substring(0,\
    \ class_name_with_strength_9.lastIndexOf(\".\"))\n        val class_name_with_strength_11\
    \ = class_name_with_strength_10.substring(0, class_name_with_strength_10.lastIndexOf(\"\
    .\"))\n        val class_name_with_strength_12 = class_name_with_strength_11.substring(0,\
    \ class_name_with_strength_11.lastIndexOf(\".\"))\n        val class_name_with_strength_13\
    \ = class_name_with_strength_12.substring(0, class_name_with_strength_12.lastIndexOf(\"\
    .\"))\n        val class_name_with_strength_14 = class_name_with_strength_13.substring(0,\
    \ class_name_with_strength_13.lastIndexOf(\".\"))\n        val class_name_with_strength_15\
    \ = class_name_with_strength_14.substring(0, class_name_with_strength_14.lastIndexOf(\"\
    .\"))\n        val class_name_with_strength_16 = class_name_with_strength_15.substring(0,\
    \ class_name_with_strength_15.lastIndexOf(\".\"))\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1_mo57ap.scala:21:51 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mc\e[0m => c.toUpperCase.charAt(\e[31m0\e[0m) -> c.toUpperCase.charAt(\e[31m1\e\
    [0m) -> c).toMap\n\e[31m\e[31m   |\e[0m                                      \
    \           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \ value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1_mo57ap.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_count = extensions_map.values.count(_ == 0)\n        val extensions_count_map\
    \ = extensions_map.map(e => (e._1, e._2.toInt)).toMap\n        val extensions_count_map_sorted\
    \ = extensions_count_map.toSeq.sortBy(_._2).reverse\n        val extensions_count_map_sorted_with_zero\
    \ = extensions_count_map_sorted.map(_._1 -> 0)\n        val extensions_count_map_sorted_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero.map(_._1 -> 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero.map(_._1 -> 0)\n        val\
    \ extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero = extensions_count_map_sorted_with_zero_with_zero_with_zero.map(_._1\
    \ -> 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero.map(_._1\
    \ -> 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero.map(_._1\
    \ -> 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero.map(_._1\
    \ -> 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero.map(_._1\
    \ -> 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero.map(_._1\
    \ -> 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero.map(_._1\
    \ -> 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero.map(_._1\
    \ -> 0)\n        val extensions_count_map_sorted_with_zero_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmv0x99j_.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmv0x99j_.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\e\
    [0m = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero.map(_._1\
    \ -> \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpmv0x99j_.scala:20:100 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.charAt(\e[31m0\e[0m) -> e.toUpperCase.charAt(\e[31m1\e\
    [0m).toLowerCase)\n\e[31m\e[31m   |\e[0m                                     \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmv0x99j_.scala:21:46\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_count\e[0m = extensions_map.values.count(_ == \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   value values is not "
  stdout: ''
  timestamp: 1659799866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = strength.toDouble / extensions_count.toDouble\n    \
    \    val strength_lower = strength.toDouble / extensions_count.toDouble\n    \
    \    val strength_sum = strength_upper + strength_lower\n        val strength_max\
    \ = if (strength_sum > 0) strength_sum else 0\n        val strength_min = if (strength_sum\
    \ < 0) -strength_sum else 0\n        val strength_max_index = extensions.zipWithIndex.maxBy(_._2)._2\n\
    \        val strength_min_index = extensions.zipWithIndex.minBy(_._2)._2\n   \
    \     val extension = extensions(strength_max_index)\n        val extension_upper\
    \ = extension.toUpperCase\n        val extension_lower = extension.toLowerCase\n\
    \        val extension_sum = extension_upper + extension_lower\n        val extension_max\
    \ = if (extension_sum > 0) extension_sum else 0\n        val extension_min = if\
    \ (extension_sum < 0) -extension_sum else 0\n        val extension_max_index =\
    \ extensions.zipWithIndex.maxBy(_._2)._2\n        val extension_min_index = extensions.zipWithIndex.minBy(_._2)._2\n\
    \        val extension_strength = extensions(extension_max_index)\n        val\
    \ extension_strength_upper = extension_strength.toUpperCase\n        val extension_strength_lower\
    \ = extension_strength.toLowerCase\n        val extension_strength_sum = extension_strength_upper\
    \ + extension_strength_lower\n        val extension_strength_max = if (extension_strength_sum\
    \ > 0) extension_strength_sum else 0\n        val extension_strength_min = if\
    \ (extension_strength_sum < 0) -extension_strength_sum else 0\n        val extension_strength_max_index\
    \ = extensions.zipWithIndex.maxBy(_._2)._2\n        val extension_strength_min_index\
    \ = extensions.zipWithIndex.minBy(_._2)._2\n        val extension_strength_strength\
    \ = extensions(extension_strength_max_index)\n        val extension_strength_strength_upper\
    \ = extension_strength_strength.toUpperCase\n        val extension_strength_strength_lower\
    \ = extension_strength_strength.toLowerCase\n        val extension_strength_strength_sum\
    \ = extension_strength_strength_upper + extension_strength_strength_lower\n  \
    \      val extension\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbj6304pz.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbj6304pz.scala:35:48 --------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \        \e[33mval\e[0m \e[36mextension_max\e[0m = \e[33mif\e[0m (extension_sum\
    \ > \e[31m0\e[0m) extension_sum \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                ^\e[0m\n\e[31m   |\e[0m   \
    \                                             Found:    (\e[31m0\e[0m : Int)\n\
    \e[31m   |\e[0m                                                Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbj6304pz.scala:36:48\
    \ --------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mextension_min\e\
    [0m = \e[33mif\e[0m (extension_sum < \e[31m0\e[0m) -extension_sum \e[33melse\e\
    [0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \     Found:    (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m                        \
    \                        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpbj6304pz.scala:36:51 ------------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mextension_min\e[0m = \e[33mif\e\
    [0m (extension_sum < \e[31m0\e[0m) -extension_sum \e[33melse\e[0m \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue unary_- is not a member of String, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicit"
  stdout: ''
  timestamp: 1659799866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength = extensions_count_sorted.last.toDouble / extensions_count.toDouble\n\
    \        val extensions_count_sorted_with_strength = extensions_count_sorted.zip(strength)\n\
    \        val extensions_count_sorted_with_strength_sorted = extensions_count_sorted_with_strength.sortBy(_._1)\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength = extensions_count_sorted_with_strength_sorted.takeWhile(_._2\
    \ > 0).last\n        val extensions_count_sorted_with_strength_sorted_with_strength_sorted\
    \ = extensions_count_sorted_with_strength_sorted_with_strength.sortBy(_._1)\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength.takeWhile(_._2\
    \ > 0).last\n        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength.sortBy(_._1)\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength.takeWhile(_._2\
    \ > 0).last\n        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted.sortBy(_._1)\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted.takeWhile(_._2\
    \ > 0).last\n        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted.sortBy(_._1)\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted.takeWhile(_._2\
    \ > \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxajlt30i.scala:33:323 --------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength\e\
    [0m = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted.takeWhile(_._2\
    \ > \n\e[31m\e[31m   |\e[0m                                                  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxajlt30i.scala:21:63\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_count_sorted\e[0m = extensions.map(_.length).sort\n\e[31m\e[31m\
    \   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sort is not a member of List[Int] - did you mean List[Int].sortBy?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxajlt30i.scala:27:94 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength\e\
    [0m = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength.takeWhile(_._2\
    \ > \e[31m0\e[0m).last\n\e[31m\e[31m   |\e[0m                                \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when com"
  stdout: ''
  timestamp: 1659799865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => class_name_map.getOrElse(x, 0) - x.toUpperCase.length).toArray\n        val\
    \ max_strength = strength.max\n        val max_key = extensions_map.keys.find(x\
    \ => strength.contains(x)).getOrElse(\"\")\n        val max_value = extensions_map.get(max_key)\n\
    \        val max_key_lower = max_key.toLowerCase\n        val max_value_lower\
    \ = max_value.toLowerCase\n        if (max_strength == 0) \"\"\n        else if\
    \ (max_strength == 1) max_value_lower\n        else if (max_strength == 2) max_value_lower\
    \ + max_key_lower\n        else if (max_strength == 3) max_value_lower + max_key_lower\
    \ + max_key_lower\n        else \"\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdnejrc3e.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpdnejrc3e.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdnejrc3e.scala:22:79\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = extensions_map.values.map(\e[36mx\e[0m => class_name_map.getOrElse(x, \e\
    [31m0\e[0m) - x.toUpperCase.length).toArray\n\e[31m\e[31m   |\e[0m           \
    \                                                                    ^\e[0m\n\e\
    [31m   |\e[0m                                                  Found:    (x :\
    \ String)\n\e[31m   |\e[0m                                                  Required:\
    \ Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdnejrc3e.scala:24:70\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmax_key\e\
    [0m = extensions_map.keys.find(\e[36mx\e[0m => strength.contains(x)).getOrElse(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                        \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                           Found:    (x : String)\n\e[31m   |\e[0m          \
    \                                        Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Err"
  stdout: ''
  timestamp: 1659799868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => class_name_map.get(x) - x.toUpperCase.length).max\n        val extension\
    \ = extensions_map.getOrElse(strength, \"\")\n        class_name + extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5mom1tzk.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp5mom1tzk.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5mom1tzk.scala:22:73\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = extensions_map.values.map(\e[36mx\e[0m => class_name_map.get(x) - x.toUpperCase.length).max\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \              Found:    (x : String)\n\e[31m   |\e[0m                       \
    \                           Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmp5mom1tzk.scala:22:103 ----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.values.map(\e\
    [36mx\e[0m => class_name_map.get(x) - x.toUpperCase.length).max\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                    ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mBigInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35mmax\e[0m\
    \ in \e[33mtrait\e[0"
  stdout: ''
  timestamp: 1659799867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = strength / extensions_count_upper\n        val strength_lower\
    \ = strength / extensions_count_lower\n        val strength_diff = strength_upper\
    \ - strength_lower\n        val strength_diff_upper = strength_diff / extensions_count_upper\n\
    \        val strength_diff_lower = strength_diff / extensions_count_lower\n  \
    \      val strength_diff_diff_upper = strength_diff_upper - strength_diff_lower\n\
    \        val strength_diff_diff_lower = strength_diff_lower - strength_diff_upper\n\
    \        val strength_diff_diff_diff_upper = strength_diff_diff_upper - strength_diff_diff_lower\n\
    \        val strength_diff_diff_diff_lower = strength_diff_diff_lower - strength_diff_diff_upper\n\
    \        val strength_diff_diff_diff_upper = strength_diff_diff_diff_upper - strength_diff_diff_diff_lower\n\
    \        val strength_diff_diff_diff_lower = strength_diff_diff_diff_lower - strength_diff_diff_diff_upper\n\
    \        val strength_diff_diff_diff_lower = strength_diff_diff_diff_lower - strength_diff_diff_diff_upper\n\
    \        val strength_diff_diff_diff_diff_upper = strength_diff_diff_diff_diff_upper\
    \ - strength_diff_diff_diff_diff_lower\n        val strength_diff_diff_diff_diff_lower\
    \ = strength_diff_diff_diff_diff_lower - strength_diff_diff_diff_diff_upper\n\
    \        val strength_diff_diff_diff_diff_lower = strength_diff_diff_diff_diff_lower\
    \ - strength_diff_diff_diff_diff_upper\n        val strength_diff_diff_diff_diff_lower\
    \ = strength_diff_diff_diff_diff_lower - strength_diff_diff_diff_diff_upper\n\
    \        val strength_diff_diff_diff_diff_lower = strength_diff_diff_diff_diff_lower\
    \ - strength_diff_diff_diff_diff_upper\n        val strength_diff_diff_diff_diff_lower\
    \ = strength_diff_diff_diff_diff_lower - strength_diff_diff_diff_diff_upper\n\
    \        val strength_diff_diff_diff_diff_lower = strength_diff_diff_diff_diff_lower\
    \ - strength_diff_diff_diff_diff_upper\n        val strength_diff_diff_diff_diff_lower\
    \ = strength_diff_diff_diff_diff_lower - strength_diff_diff_diff_diff_upper\n\
    \        val strength_diff_diff_diff_diff_lower = strength_diff_diff_diff_diff_lower\
    \ - strength_diff_diff_diff_diff_upper\n        val strength\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmply86xnht.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmply86xnht.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstrength_diff_diff_diff_upper\e[0m = strength_diff_diff_diff_upper - strength_diff_diff_diff_lower\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrength_diff_diff_diff_upper is already defined as \e[33mvalue\e\
    [0m \e[35mstrength_diff_diff_diff_upper\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmply86xnht.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mstrength_diff_diff_diff_lower\e\
    [0m = strength_diff_diff_diff_lower - strength_diff_diff_diff_upper\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrength_diff_diff_diff_lower is already defined as \e[33mvalue\e\
    [0m \e[35mstrength_diff_diff_diff_lower\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmply86xnht.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mstrength_diff_diff_diff_lower\e\
    [0m = strength_diff_diff_diff_lower - strength_diff_diff_diff_upper\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrength_diff_diff_diff_lower is already defined as \e[33mvalue\e\
    [0m \e[35mstrength_diff_diff_diff_lower\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmply86xnht.sca"
  stdout: ''
  timestamp: 1659799867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1) -> e).toMap\n        val\
    \ extensions_count = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1)\
    \ -> e).groupBy(_._1).mapValues(_.size)\n        val extensions_count_sorted =\
    \ extensions_count.toSeq.sortBy(_._2).reverse\n        val extensions_count_sorted\
    \ = extensions_count_sorted.take(extensions_count_sorted.length-1)\n        val\
    \ extensions_count_sorted = extensions_count_sorted.map(_._2).sum\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toDouble\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toInt\n        val extensions_count_sorted = extensions_count_sorted.toLong\n\
    \        val extensions_count_sorted = extensions_count_sorted.toFloat\n     \
    \   val extensions_count_sorted = extensions_count_sorted.toDouble\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toFloat\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toFloat\n        val extensions_count_sorted = extensions_count_sorted.toFloat\n\
    \        val extensions_count_sorted = extensions_count_sorted.toFloat\n     \
    \   val extensions_count_sorted = extensions_count_sorted.toFloat\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toFloat\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toFloat\n        val extensions_count_sorted = extensions_count_sorted.toFloat\n\
    \        val extensions_count_sorted = extensions_count_sorted.toFloat\n     \
    \   val extensions_count_sorted = extensions_count_sorted.toFloat\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toFloat\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toFloat\n        val extensions_count_sorted = extensions_count_sorted.toFloat\n\
    \        val extensions_count_sorted = extensions_count_sorted.toFloat\n     \
    \   val extensions_count_sorted = extensions_count_sorted.toFloat\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toFloat\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toFloat\n        val extensions_count_sorted = extensions_count_sorted.toFloat\n\
    \        val extensions_count_sorted = extensions_count_sorted.toFloat\n     \
    \   val extensions_count_sorted = extensions_count_sorted.toFloat\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toFloat\n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"),\
    \ (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc_o9xsf7.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions_count_sorted.take(extensions_count_sorted.length-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc_o9xsf7.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions_count_sorted.map(_._2).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc_o9xsf7.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions_count_sorted.toDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc_o9xsf7.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions_count_sorted.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[3"
  stdout: ''
  timestamp: 1659799867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((acc,\
    \ x) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(x => -strength(x._1))\n        extensions_sorted.head._2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf6ii9fvf.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpf6ii9fvf.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf6ii9fvf.scala:22:86\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = extensions_map.foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m) =>\
    \ acc + (class_name_map(x._1) - class_name_map(x._2)))\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \             Found:    String\n\e[31m   |\e[0m                              \
    \                         Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpf6ii9fvf.scala:22:109 -------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.foldLeft(\e\
    [31m0\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                   ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                       Found:    String\n\e[31m\
    \   |\e[0m                                                       Required: Nothing\n\
    \e[31m   |\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659799869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') / e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C') / e.toUpperCase.count(_ == 'D')).toMap\n        val strength = extensions_map.values.max\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n \
    \       val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\"\
    .\")\n        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').drop(1)\n\
    \        val extensions_sorted = extensions_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplmc7fiix.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > \e[31m0\e[0m).map(_._1).mkString(\e[31m\"\
    .\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplmc7fiix.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.dropWhile(_ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplmc7fiix.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.dropWhile(_ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplmc7fiix.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.dropWhile(_ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35m"
  stdout: ''
  timestamp: 1659799869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.values.max\n        val\
    \ extensions_sorted = extensions_map.toSeq.sortWith(_._2 > _._2)\n        val\
    \ extensions_sorted = extensions_sorted.take(strength)\n        val extensions_sorted\
    \ = extensions_sorted.map(_._1).mkString(\".\")\n        class_name + extensions_sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuie5mufy.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.take(strength)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpuie5mufy.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.map(_._1).mkString(\e[31m\".\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e[35mextensions_sorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpuie5mufy.scala:20:149\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e\
    [33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e[36me\e[0m => e.toUpperCase.count(_\
    \ == \e[31m'A'\e[0m) - e.toUpperCase.count(_ == \e[31m'B'\e[0m) - e.toUpperCase.count(_\
    \ == \e[31m'C'\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                           \
    \                                                                            \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                 Cannot prove that Int <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                        where:    K is a type\
    \ variable\n\e[31m   |\e[0m                                                  V\
    \ is a type variable\n\e[31m   |\e[0m                                        .\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_count = extensions.map(x\
    \ => extensions_map(x.toUpperCase).length).toMap\n        val extensions_count_sorted\
    \ = extensions_count.sortBy(_._2)\n        val strength = extensions_count_sorted.last._1\
    \ - extensions_count_sorted.head._1\n        val extension = extensions_count_sorted.head._1\n\
    \        val class_name_with_extension = class_name + extension\n        val extension_with_same_strength\
    \ = extensions_map.get(extension)\n        if (extension_with_same_strength !=\
    \ null) {\n            val extension_with_same_strength_length = extension_with_same_strength.length\n\
    \            if (extension_with_same_strength_length == 1) {\n               \
    \ class_name_with_extension + extension_with_same_strength\n            } else\
    \ {\n                class_name_with_extension + extension_with_same_strength.mkString(\"\
    \")\n            }\n        } else {\n            class_name_with_extension\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpuhy5vsyb.scala:21:94 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mextensions_count\e[0m =\
    \ extensions.map(\e[36mx\e[0m => extensions_map(x.toUpperCase).length).toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                         Cannot prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m                                        where:    K is a type variable\n\
    \e[31m   |\e[0m                                                  V is a type variable\n\
    \e[31m   |\e[0m                                        .\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpuhy5vsyb.scala:28:83 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mextension_with_same_strength_length\e\
    [0m = extension_with_same_strength.length\n\e[31m\e[31m   |\e[0m             \
    \                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value length is not a member of\
    \ Option[String]\n2 errors found\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.sortBy(_.length)\n        val\
    \ extensions_count_sorted_reversed = extensions_count_sorted.reverse\n       \
    \ val extensions_count_sorted_reversed_length = extensions_count_sorted_reversed.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum = extensions_count_sorted_reversed_length.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted = extensions_count_sorted_reversed_length.sortBy(_.sum)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed = extensions_count_sorted_reversed_length_sum_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sum\n \
    \       val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sortBy(_.sum)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sorted.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.sortBy(_.sum)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6fneabqq.scala:25:114 -----------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_reversed_length_sum_sorted\e\
    [0m = extensions_count_sorted_reversed_length.sortBy(_.sum)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                      ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                             value sum is not a member of Int\n\e[31m\e[31m--\
    \ Error: /tmp/tmp6fneabqq.scala:25:118 ----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_reversed_length_sum_sorted\e\
    [0m = extensions_count_sorted_reversed_length.sortBy(_.sum)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                            ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp6fneabqq.scala:30:101 --------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\e\
    [0m = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                             ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp6fneabqq.scala:31:108 --------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_reversed_length"
  stdout: ''
  timestamp: 1659799827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (s, e) =>\n            val c = class_name_map(e._1)\n            val s = if\
    \ (c > s) c else s\n        }\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extension_strength = extensions_sorted.foldLeft(0) { (s, e) =>\n\
    \            val c = class_name_map(e._1)\n            val s = if (c > s) c else\
    \ s\n        }\n        val extension_strength_sorted = extensions_sorted.sortBy(_._1).reverse\n\
    \        val extension_strength_sorted = extension_strength_sorted.takeWhile(_._1\
    \ < extension_strength)\n        val extension_strength_sorted = extension_strength_sorted.reverse\n\
    \        val extension_strength_sorted = extension_strength_sorted.takeWhile(_._1\
    \ < extension_strength)\n        val extension_strength_sorted = extension_strength_sorted.reverse\n\
    \        val extension_strength_sorted = extension_strength_sorted.takeWhile(_._1\
    \ < extension_strength)\n        val extension_strength_sorted = extension_strength_sorted.reverse\n\
    \        val extension_strength_sorted = extension_strength_sorted.takeWhile(_._1\
    \ < extension_strength)\n        val extension_strength_sorted = extension_strength_sorted.reverse\n\
    \        val extension_strength_sorted = extension_strength_sorted.takeWhile(_._1\
    \ < extension_strength)\n        val extension_strength_sorted = extension_strength_sorted.reverse\n\
    \        val extension_strength_sorted = extension_strength_sorted.takeWhile(_._1\
    \ < extension_strength)\n        val extension_strength_sorted = extension_strength_sorted.reverse\n\
    \        val extension_strength_sorted = extension_strength_sorted.takeWhile(_._1\
    \ < extension_strength)\n        val extension_strength_sorted = extension_strength_sorted.reverse\n\
    \        val extension_strength_sorted = extension_strength_sorted.takeWhile(_._1\
    \ < extension_strength)\n        val extension_strength_sorted = extension_strength_sorted.reverse\n\
    \        val extension_strength_sorted = extension_strength_sorted.takeWhile(_._1\
    \ < extension_strength)\n        val extension_strength_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgn1uc7mq.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgn1uc7mq.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextension_strength_sorted\e[0m = extension_strength_sorted.takeWhile(_._1\
    \ < extension_strength)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextension_strength_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextension_strength_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgn1uc7mq.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mextension_strength_sorted\e\
    [0m = extension_strength_sorted.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextension_strength_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextension_strength_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgn1uc7mq.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mextension_strength_sorted\e\
    [0m = extension_strength_sorted.takeWhile(_._1 < extension_strength)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextension_strength_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextension_strength_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgn1uc7mq.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mextension_streng"
  stdout: ''
  timestamp: 1659799872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') / e.toUpperCase.count(_ == 'B') * -1)\n   \
    \     val strength = extensions_map.max\n        val extensions_sorted = extensions_map.toList.sortWith(_\
    \ < _)\n        val extensions_sorted = extensions_sorted.takeWhile(_ < strength).reverse\n\
    \        val extensions_sorted = extensions_sorted.mkString(\".\") + extensions_sorted.last\n\
    \        class_name + extensions_sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpchlycbl6.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_ < strength).reverse\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpchlycbl6.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.mkString(\e[31m\".\"\e[0m) + extensions_sorted.last\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799865
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val strongest_extension\
    \ = extensions_sorted.head._2\n        class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmogzk232.scala:26)\n\tat Problem.main(tmpmogzk232.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strengths = extensions_map.filter(_._2\
    \ > class_name_map.get(_._1)).map(_._1)\n        val strength = strengths.max\n\
    \        if (strength == -1) \"\"\n        else class_name + extensions_map.getOrElse(strength,\
    \ \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3o5l9thy.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp3o5l9thy.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp3o5l9thy.scala:22:72\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e\
    [0m \e[36mstrengths\e[0m = extensions_map.filter(_._2 > class_name_map.get(_._1)).map(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2 of expanded\
    \ function:\n\e[31m   |\e[0m   _$2 => _$2._1.\n\e[31m\e[31m-- Error: /tmp/tmp3o5l9thy.scala:24:12\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ \e[33mif\e[0m (strength == -\e[31m1\e[0m) \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types String\
    \ and Int cannot be compared with == or !=\n4 errors found\n"
  stdout: ''
  timestamp: 1659799871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase).toMap\n \
    \       val extensions_count = extensions.map(e => extensions_map(e).length).toMap\n\
    \        val extensions_count_sorted = extensions_count.toSeq.sortWith(_._2 >\
    \ _._2)\n        val extensions_count_sorted = extensions_count_sorted.take(extensions_count_sorted.length-1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.map(e => extensions_map(e).mkString(\"\
    .\"))\n        val extensions_count_sorted = extensions_count_sorted.mkString(\"\
    .\") + \".\"\n        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.dropRight(1)\n\
    \        val extensions_count_sorted = extensions_count_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_f4e11ea.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions_count_sorted.take(extensions_count_sorted.length-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_f4e11ea.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions_count_sorted.map(\e[36me\e[0m => extensions_map(e).mkString(\e\
    [31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_f4e11ea.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions_count_sorted.mkString(\e[31m\".\"\e[0m) + \e[31m\".\"\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_count_sorted is already defined as \e[33mvalue\e\
    [0m \e[35mextensions_count_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_f4e11ea.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted\e\
    [0m = extensions_count_sorted.dropRight(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_map_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n    \
    \    val extensions_map_sorted_keys = extensions_map_sorted.keys.toSeq\n     \
    \   val extensions_map_sorted_values = extensions_map_sorted.values.toSeq\n  \
    \      val extensions_map_sorted_keys_sorted = extensions_map_sorted_keys.sortBy(_._1).reverse\n\
    \        val extensions_map_sorted_values_sorted = extensions_map_sorted_values.sortBy(_._1).reverse\n\
    \        val extensions_map_sorted_keys_sorted_values = extensions_map_sorted_keys_sorted.zip(extensions_map_sorted_values_sorted)\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted = extensions_map_sorted_keys_sorted_values.sortBy(_._1).reverse\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_keys = extensions_map_sorted_keys_sorted_values_sorted.keys.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_values = extensions_map_sorted_keys_sorted_values_sorted.values.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_keys_sorted = extensions_map_sorted_keys_sorted_values_sorted_keys.sortBy(_._1).reverse\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_values_sorted = extensions_map_sorted_keys_sorted_values_sorted_values.sortBy(_._1).reverse\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_values_sorted_keys\
    \ = extensions_map_sorted_keys_sorted_values_sorted_values_sorted.keys.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_values_sorted_values\
    \ = extensions_map_sorted_keys_sorted_values_sorted_values_sorted.values.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_values_sorted_keys_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_values_sorted_keys.sortBy(_._1).reverse\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_values_sorted_values_sorted\
    \ = extensions_map_sorted_keys_sorted_values_sorted_values_sorted_values.sortBy(_._1).reverse\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_values_sorted_keys_sorted_values\
    \ = extensions_map_sorted_keys_sorted_values_sorted_values_sorted_keys_sorted.zip(extensions_map_sorted_values_sorted_values_sorted_values_sorted)\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_values_sorted_values_sorted_keys\
    \ = extensions_map_sorted_keys_sorted_values_sorted_values_sorted_values_sorted.keys.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_values_sorted_values_sorted_values_sorted_values\
    \ = extensions_map_sorted_keys_sorted_values_sorted_values_sorted_values_sorted.values.toSeq\n\
    \        val extensions_map_sorted_keys_sorted_values_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeigehqw1.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeigehqw1.scala:20:100\
    \ -----------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_map\e[0m = extensions.map(\e[36me\e[0m => e.toUpperCase.charAt(\e\
    [31m0\e[0m) -> e.toUpperCase.charAt(\e[31m1\e[0m).toLowerCase)\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                    value toLowerCase is not a member of Char\n\e[31m\e[31m--\
    \ Error: /tmp/tmpeigehqw1.scala:21:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mextensions_map_sorted\e\
    [0m = extensions_map.toSeq.sortBy(_._2).reverse\n\e[31m\e[31m   |\e[0m       \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mInt\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeigehqw1.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)\n            ).toMap\n        val\
    \ strength = extensions_map.values.reduce((x, y) => if (x < y) x else y)\n   \
    \     val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n    \
    \    val extension_strength = extensions_sorted.head._2\n        val extension_str\
    \ = extensions_sorted.head._1\n        if (extension_strength == strength) {\n\
    \            class_name + extension_str\n        } else {\n            class_name\
    \ + extension_str + extension_strength.toString.substring(strength)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 3, end 1, length 1\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.StrongestExtension(tmpne0ipvio.scala:29)\n\
    \tat Problem$.main(tmpne0ipvio.scala:33)\n\tat Problem.main(tmpne0ipvio.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val strongest_extension = sorted_extensions.find(e => e._2 == strength).getOrElse(\"\
    \")\n        class_name + \".\" + strongest_extension\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpo4j3r_o8.scala:20:149 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.count(_ == \e[31m'A'\e[0m) - e.toUpperCase.count(_\
    \ == \e[31m'B'\e[0m) - e.toUpperCase.count(_ == \e[31m'C'\e[0m)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                        Cannot\
    \ prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                \
    \                        where:    K is a type variable\n\e[31m   |\e[0m     \
    \                                             V is a type variable\n\e[31m   |\e\
    [0m                                        .\n1 error found\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((x,\
    \ y) => x - y)\n        val extensions_with_same_strength = extensions_map.filter(_._1\
    \ == strength)\n        val extensions_with_same_strength_sorted = extensions_with_same_strength.sortBy(_._1)\n\
    \        val extensions_with_same_strength_sorted = extensions_with_same_strength_sorted.head._2\n\
    \        val extensions_with_same_strength_sorted = extensions_with_same_strength_sorted.toList\n\
    \        val extensions_with_same_strength_sorted.map(x => class_name + x).mkString(\"\
    .\")\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptlisqbc9.scala:26:55 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m extensions_with_same_strength_sorted.map(x\
    \ => class_name + x).mkString(\e[31m\".\"\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                                ^^\e[0m\n\e[31m   |\e[0m    \
    \                                        ')' expected, but '=>' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmptlisqbc9.scala:26:73 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m extensions_with_same_strength_sorted.map(x\
    \ => class_name + x).mkString(\e[31m\".\"\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                                                  ^\e[0m\n\e\
    [31m   |\e[0m                                             '=' expected, but '.'\
    \ found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptlisqbc9.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_with_same_strength_sorted\e\
    [0m = extensions_with_same_strength_sorted.head._2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_with_same_strength_sorted is already defined as\
    \ \e[33mvalue\e[0m \e[35mextensions_with_same_strength_sorted\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptlisqbc9.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_with_same_strength_sorted\e[0m = extensions_with_same_strength_sorted.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_with_same_strength_sorted is already defined as\
    \ \e[33mvalue\e[0m \e[35mextensions_with_same_strength_sorted\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptlisqbc9.scala:23:81\
    \ ---------"
  stdout: ''
  timestamp: 1659799872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.values.max\n        val\
    \ extensions_sorted = extensions_map.toSeq.sortWith((a, b) => strength - a)\n\
    \        val extensions_sorted = extensions_sorted.take(1).mkString.concat(\"\
    .\").concat(extensions_sorted.last)\n        val extensions_sorted = extensions_sorted.replaceAll(\"\
    (.)\", \"$1.\")\n        class_name + extensions_sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjia_o6um.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.take(\e[31m1\e[0m).mkString.concat(\e[31m\".\"\e[0m).concat(extensions_sorted.last)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjia_o6um.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.replaceAll(\e[31m\"(.)\"\e[0m, \e[31m\"$1.\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- Error: /tmp/tmpjia_o6um.scala:20:149 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.count(_ == \e[31m'A'\e[0m) - e.toUpperCase.count(_\
    \ == \e[31m'B'\e[0m) - e.toUpperCase.count(_ == \e[31m'C'\e[0m)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                        Cannot\
    \ prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                \
    \                        where:    K is a type variable\n\e[31m   |\e[0m     \
    \                                             V is a type variable\n\e[31m   |\e\
    [0m                                        .\n3 errors found\n"
  stdout: ''
  timestamp: 1659799872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.values.toList.sortWith(_\
    \ < _)\n        val strongest_extension = sorted_extensions.head\n        val\
    \ strongest_extension_class = class_name + \".\" + strongest_extension\n     \
    \   val strongest_extension_strength = extensions_map.getOrElse(strongest_extension,\
    \ 0)\n        if (strongest_extension_strength == 0) strongest_extension_class\
    \ else strongest_extension_class\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkf277bfi.scala:20:149 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.count(_ == \e[31m'A'\e[0m) - e.toUpperCase.count(_\
    \ == \e[31m'B'\e[0m) - e.toUpperCase.count(_ == \e[31m'C'\e[0m)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                        Cannot\
    \ prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                \
    \                        where:    K is a type variable\n\e[31m   |\e[0m     \
    \                                             V is a type variable\n\e[31m   |\e\
    [0m                                        .\n1 error found\n"
  stdout: ''
  timestamp: 1659799873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase).zipWithIndex.toMap\n        val class_name_map = class_name.zipWithIndex.toMap\n\
    \        val strength = class_name_map.get(class_name).map(_.toUpperCase).map(_.length\
    \ - _.toUpperCase.indexOf(_)).getOrElse(0)\n        val strength_map = strength.zipWithIndex.toMap\n\
    \        val strongest_extension = strength_map.values.min\n        val strongest_extension_map\
    \ = strongest_extension.zipWithIndex.toMap\n        class_name_map.get(strongest_extension_map.keys.toList.head).map(_.toUpperCase).map(_.length\
    \ - _.toUpperCase.indexOf(_)).getOrElse(0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp95y1n3ip.scala:22:42\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = class_name_map.get(class_name).map(_.toUpperCase).map(_.length - _.toUpperCase.indexOf(_)).getOrElse(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         Found:    (class_name\
    \ : String)\n\e[31m   |\e[0m                                         Required:\
    \ Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp95y1n3ip.scala:22:60\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mstrength\e[0m = class_name_map.get(class_name).map(_.toUpperCase).map(_.length\
    \ - _.toUpperCase.indexOf(_)).getOrElse(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                                                         ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value toUpperCase is not a member\
    \ of Int\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp95y1n3ip.scala:22:77 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = class_name_map.get(class_name).map(_.toUpperCase).map(_.length\
    \ - _.toUpperCase.indexOf(_)).getOrElse(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp95y1n3ip.scala:23:36\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mstrength_map\e[0m = strength.zipWithIndex.toMap\n\e[31m\e[31m   |\e[0m   \
    \                        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                  value zipWithIndex is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp95y1n3ip.scala:26:75 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        class_name_map.get(strongest_extension_map.keys.toList.head).map(_.toUppe"
  stdout: ''
  timestamp: 1659799875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_map = extensions_map.toMap\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._2 != 'z')\n \
    \       val extensions_map = extensions_map.filter(_._2 != 'Z')\n        val extensions_map\
    \ = extensions_map.filter(_._2 != 'z')\n        val extensions_map = extensions_map.filter(_._2\
    \ != 'Z')\n        val extensions_map = extensions_map.filter(_._\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp64fakxgn.scala:51:53 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions_map.filter(_._\n\
    \e[31m\e[31m   |\e[0m                                                     ^\e\
    [0m\n\e[31m   |\e[0m                                   an identifier expected,\
    \ but '_' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp64fakxgn.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_map\e[0m = extensions_map.toMap\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mextensions_map\
    \ is already defined as \e[33mvalue\e[0m \e[35mextensions_map\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp64fakxgn.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_map\e[0m = extensions_map.filter(_._2 != \e[31m'Z'\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_map is already defined as \e[33mvalue\e[0m \e[35mextensions_map\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp64fakxgn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions_map.filter(_._2\
    \ != \e[31m'z'\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_map is already defined as \e[33mvalue\e[0m \e[35mextensions_map\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp64fakxgn.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = ex"
  stdout: ''
  timestamp: 1659799876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.values.sortBy(-_)\n     \
    \   val first_extension = sorted_extensions.head\n        val first_extension_strength\
    \ = extensions_map.get(first_extension)._1\n        val strength_str = if (strength\
    \ == 0) \"\" else s\"(${strength})\"\n        s\"$class_name.$first_extension$strength_str\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp907s3b46.scala:21:48\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = extensions_map.getOrElse(class_name, \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                         Found:    (class_name : String)\n\e\
    [31m   |\e[0m                                         Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp907s3b46.scala:22:54 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msorted_extensions\e[0m =\
    \ extensions_map.values.sortBy(-_)\n\e[31m\e[31m   |\e[0m                    \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \             value sortBy is not a member of Iterable[Int]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp907s3b46.scala:24:75 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mfirst_extension_strength\e[0m\
    \ = extensions_map.get(first_extension)._1\n\e[31m\e[31m   |\e[0m            \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 value _1 is not a member of Option[Int]\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = class_name_map.foldLeft(0)\
    \ { (acc, x) => acc + (x._2 - x._1) }\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk6gvfbm6.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpk6gvfbm6.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m = extensions_sorted.takeWhile(_._2\
    \ > \e[31m0\e[0m).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpk6gvfbm6.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > \e[31m0\e[0m).reverse\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpk6gvfbm6.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > \e[31m0\e[0m).reverse\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpk6gvfbm6.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > \e[31m0\e[0m).reverse\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val first_extension = sorted_extensions.head\n        val first_extension_strength\
    \ = extensions_map.getOrElse(first_extension, 0)\n        if (strength == 0) first_extension\n\
    \        else class_name + first_extension\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9755750l.scala:20:149 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.count(_ == \e[31m'A'\e[0m) - e.toUpperCase.count(_\
    \ == \e[31m'B'\e[0m) - e.toUpperCase.count(_ == \e[31m'C'\e[0m)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                        Cannot\
    \ prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                \
    \                        where:    K is a type variable\n\e[31m   |\e[0m     \
    \                                             V is a type variable\n\e[31m   |\e\
    [0m                                        .\n1 error found\n"
  stdout: ''
  timestamp: 1659799876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((a,\
    \ b) => math.max(a, b))\n        val strongest_extension = extensions_map.values.find(x\
    \ => x == strength).head\n        s\"$class_name.$strongest_extension\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_illvrwp.scala:26)\n\tat Problem.main(tmp_illvrwp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.map(c => (c, e)))\n        val strengths = extensions_map.map(_.map(c =>\
    \ (c._1.toUpperCase - c._1.toLowerCase))).flatten\n        val max_strength =\
    \ strengths.max\n        val max_strength_extension = strengths.find(s => s ==\
    \ max_strength).get\n        val class_name_with_max_strength = class_name + max_strength_extension\n\
    \        val class_name_with_max_strength_extension = class_name_with_max_strength\
    \ + \".\" + max_strength_extension\n        val class_name_with_max_strength_extension_2\
    \ = class_name_with_max_strength + \".\" + max_strength_extension\n        val\
    \ class_name_with_max_strength_extension_3 = class_name_with_max_strength + \"\
    .\" + max_strength_extension\n        val class_name_with_max_strength_extension_4\
    \ = class_name_with_max_strength + \".\" + max_strength_extension\n        val\
    \ class_name_with_max_strength_extension_5 = class_name_with_max_strength + \"\
    .\" + max_strength_extension\n        val class_name_with_max_strength_extension_6\
    \ = class_name_with_max_strength + \".\" + max_strength_extension\n        val\
    \ class_name_with_max_strength_extension_7 = class_name_with_max_strength + \"\
    .\" + max_strength_extension\n        val class_name_with_max_strength_extension_8\
    \ = class_name_with_max_strength + \".\" + max_strength_extension\n        val\
    \ class_name_with_max_strength_extension_9 = class_name_with_max_strength + \"\
    .\" + max_strength_extension\n        val class_name_with_max_strength_extension_10\
    \ = class_name_with_max_strength + \".\" + max_strength_extension\n        val\
    \ class_name_with_max_strength_extension_11 = class_name_with_max_strength + \"\
    .\" + max_strength_extension\n        val class_name_with_max_strength_extension_12\
    \ = class_name_with_max_strength + \".\" + max_strength_extension\n        val\
    \ class_name_with_max_strength_extension_13 = class_name_with_max_strength + \"\
    .\" + max_strength_extension\n        val class_name_with_max_strength_extension_14\
    \ = class_name_with_max_strength + \".\" + max_strength_extension\n        val\
    \ class_name_with_max_strength_extension_15 = class_name_with_max_strength + \"\
    .\" + max_strength_extension\n        val class_name_with_max_strength_extension_16\
    \ = class_name_with_max_strength + \".\" + max_strength_extension\n        val\
    \ class_name_with_max_strength_extension_17 = class_name_with_max_strength + \"\
    .\" + max_strength_extension\n        val class_name_with_max_strength_extension_18\
    \ = class_name_with_max_strength + \".\" + max_strength_extension\n        val\
    \ class_name_with_max_strength_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpty0tkiqo.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpty0tkiqo.scala:21:60\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mstrengths\e[0m = extensions_map.map(_.map(\e[36mc\e[0m => (c._1.toUpperCase\
    \ - c._1.toLowerCase))).flatten\n\e[31m\e[31m   |\e[0m                       \
    \                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- Error: /tmp/tmpty0tkiqo.scala:22:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax_strength\e[0m = strengths.max\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mInt\e[0m in \e\
    [33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e[0m in \e\
    [33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of\
    \ \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpty0tkiqo.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength = extensions_count_sorted.last.toDouble / extensions_count.toDouble\n\
    \        val extensions_count_sorted_with_strength = extensions_count_sorted.zip(strength)\n\
    \        val extensions_count_sorted_with_strength_sorted = extensions_count_sorted_with_strength.sortBy(_._1)\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength = extensions_count_sorted_with_strength_sorted.take(extensions_count_sorted_with_strength_sorted.length\
    \ - 1)\n        val extensions_count_sorted_with_strength_sorted_with_strength_sorted\
    \ = extensions_count_sorted_with_strength_sorted_with_strength.sortBy(_._2)\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength.head\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted._2\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted._1\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted._2\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted._1\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted._2\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted._1\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptex067mi.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptex067mi.scala:21:63\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_count_sorted\e[0m = extensions.map(_.length).sort\n\e[31m\e[31m\
    \   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sort is not a member of List[Int] - did you mean List[Int].sortBy?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptex067mi.scala:27:94 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength\e\
    [0m = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength.head\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmptex067mi.scala:28:101 --------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mextensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted\e\
    [0m = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted._2\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                             ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptex067mi.scala:32:143 -----------------------\e"
  stdout: ''
  timestamp: 1659799877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => (x - class_name_map.get(x)).abs).max\n        val strongest_extension = extensions_map.values.filter(x\
    \ => x == strength).head\n        class_name + \".\" + strongest_extension\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj5fnr9n_.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpj5fnr9n_.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name_map\e[0m = class_name.map(\e\
    [36mx\e[0m => (x.toUpperCase, x.toLowerCase)).toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj5fnr9n_.scala:22:57\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mstrength\e[0m = extensions_map.values.map(\e[36mx\e[0m => (x - class_name_map.get(x)).abs).max\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpj5fnr9n_.scala:22:78 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions_map.values.map(\e\
    [36mx\e[0m => (x - class_name_map.get(x)).abs).max\n\e[31m\e[31m   |\e[0m    \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   (x : String)\n\e[31m   |\e[0m                                            \
    \      Required: Nothing\n\e[31"
  stdout: ''
  timestamp: 1659799877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') / e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C') / e.toUpperCase.count(_ == 'D')).toMap\n        val strength = extensions_map.values.max\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n \
    \       val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\"\
    .\")\n        val extensions_sorted = extensions_sorted.dropRight(1)\n       \
    \ val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        val extensions_sorted\
    \ = extensions_sorted.dropRight(1)\n        val extensions_sorted = extensions_sorted.dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(1)\n        \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnihlfjv3.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.takeWhile(_._2 > \e[31m0\e[0m).map(_._1).mkString(\e[31m\"\
    .\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnihlfjv3.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.dropRight(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnihlfjv3.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.dropRight(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnihlfjv3.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted.dropRight(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group o"
  stdout: ''
  timestamp: 1659799877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\n    def StrongestExtension(class_name : String, extensions\
    \ : List[String]) : String = {\n        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val first_extension = sorted_extensions.head\n        val first_extension_strength\
    \ = first_extension._1\n        if (strength == first_extension_strength) {\n\
    \            class_name + first_extension._2\n        } else {\n            class_name\
    \ + sorted_extensions.head._2\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpooqvfly4.scala:20:149 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36me\e[0m => e.toUpperCase.count(_ == \e[31m'A'\e[0m) - e.toUpperCase.count(_\
    \ == \e[31m'B'\e[0m) - e.toUpperCase.count(_ == \e[31m'C'\e[0m)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                        Cannot\
    \ prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                \
    \                        where:    K is a type variable\n\e[31m   |\e[0m     \
    \                                             V is a type variable\n\e[31m   |\e\
    [0m                                        .\n1 error found\n"
  stdout: ''
  timestamp: 1659799877
