language: scala
name: HumanEval_12_longest
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(\"\") {\n            case (acc, s) => if\
    \ (acc.length < s.length) acc else s}\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6zpbgjif.scala:13:34\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m strings.foldLeft(\e\
    [31m\"\"\e[0m) {\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m  \
    \           Found:    String\n\e[31m   |\e[0m             Required: \e[1m\e[32mOption\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e\
    [0m (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e[0m s}\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(Option(\"\
    No strings\")) {\n            (maxLength, string) =>\n                maxLength\
    \ match {\n                    case Some(maxLength) if string.length >= maxLength\
    \ => Some(string)\n                    case Some(maxLength) if string.length <\
    \ maxLength => Some(string.substring(0, maxLength))\n                    case\
    \ _ => maxLength\n                }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp5ojqgovh.scala:15:58 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                    \e[33mcase\e[0m Some(maxLength) \e\
    [33mif\e[0m string.length >= maxLength => Some(string)\n\e[31m\e[31m   |\e[0m\
    \                                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m>=\e[0m in \e\
    [33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\
    \e[31m   |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m\
    \   |\e[0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e\
    [0m (x: Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch\
    \ arguments ((maxLength : String))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp5ojqgovh.scala:16:58\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                   \
    \ \e[33mcase\e[0m Some(maxLength) \e[33mif\e[0m string.length < maxLength => Some(string.substring(\e\
    [31m0\e[0m, maxLength))\n\e[31m\e[31m   |\e[0m                               \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m None of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m<\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\
    \e[31m   |\e[0m  (x: Double): Boolean\n\e[31m   |\e[0m  (x: Float): Boolean\n\e\
    [31m   |\e[0m  (x: Long): Boolean\n\e[31m   |\e[0m  (x: Int): Boolean\n\e[31m\
    \   |\e[0m  (x: Char): Boolean\n\e[31m   |\e[0m  (x: Short): Boolean\n\e[31m \
    \  |\e[0m  (x: Byte): Boolean\n\e[31m   |\e[0m match arguments ((maxLength : String))\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ojqgovh.scala:16:98 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                    \e[33mcase\e[0m Some(maxLength) \e\
    [33mif\e[0m string.length < maxLength => Some(string.substring(\e[31m0\e[0m, maxLength))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                       Found:    (maxLength : String)\n\e[31m\
    \   |\e[0m                                          Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available wh"
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(Option.empty[String])\
    \ { (longest, s) =>\n            val len = s.length\n            if (len > longest.get\
    \ || len == 0)\n                Some(s)\n            else\n                longest\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp1r1wy0cn.scala:14:20 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (len > longest.get || len ==\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e\
    [0m None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m>\e[0m in \e\
    [33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Boolean\n\
    \e[31m   |\e[0m  (x: Float): Boolean\n\e[31m   |\e[0m  (x: Long): Boolean\n\e\
    [31m   |\e[0m  (x: Int): Boolean\n\e[31m   |\e[0m  (x: Char): Boolean\n\e[31m\
    \   |\e[0m  (x: Short): Boolean\n\e[31m   |\e[0m  (x: Byte): Boolean\n\e[31m \
    \  |\e[0m match arguments ((longest.get : => String))\n1 error found\n"
  stdout: ''
  timestamp: 1659803677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\n\
    \            case (acc, s) => acc match {\n                case Nil => List(s)\n\
    \                case _ => if (acc.length < s.length) acc else List(s)\n     \
    \       }\n        }.maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpznqgeszs.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]()){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e\
    [0m (acc, s) => acc \e[33mmatch\e[0m {\n\e[31m14 |\e[0m                \e[33mcase\e\
    [0m Nil => List(s)\n\e[31m15 |\e[0m                \e[33mcase\e[0m _ => \e[33mif\e\
    [0m (acc.length < s.length) acc \e[33melse\e[0m List(s)\n\e[31m16 |\e[0m     \
    \       }\n\e[31m17 |\e[0m        }.maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803680
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.sortWith(_ < _).lastOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsifgn2a7.scala:17)\n\tat Problem.main(tmpsifgn2a7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ s) => if (list.length < s.length) list :+ s else list)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkrn1gpi_.scala:12:40\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (list.length\
    \ < s.length) list :+ s \e[33melse\e[0m list)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m[String]\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mOption\e[0m[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\n\
    \            case (acc, s) => if (acc.length < s.length) acc :+ s else acc\n \
    \       }.maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvg15v9bk.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]()){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e\
    [0m (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc :+ s \e[33melse\e[0m\
    \ acc\n\e[31m14 |\e[0m        }.maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\
    \ (list, s) =>\n            if (list.size < s.length) list :+ s\n            else\
    \ s\n        }.maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7np1kzze.scala:14:17\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33melse\e[0m s\n\
    \e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                \
    \ Found:    (s : String)\n\e[31m   |\e[0m                 Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                if (acc.length < s.length) acc else s\n    \
    \        })\n            strings.find(s => s == longest) else None\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgx4kz659.scala:17:44 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            strings.find(\e[36ms\e[0m => s == longest)\
    \ \e[33melse\e[0m None\n\e[31m\e[31m   |\e[0m                                \
    \            ^^^^\e[0m\n\e[31m   |\e[0m                              end of statement\
    \ expected but 'else' found\n1 error found\n"
  stdout: ''
  timestamp: 1659803676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(\"\")( (acc, s) => if (acc.length < s.length)\
    \ acc else s)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfmmr1v45.scala:13:33\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m strings.foldLeft(\e\
    [31m\"\"\e[0m)( (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (acc, s) => if (acc.length < s.length) acc else s :: acc)\n            .maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmyqyvboh.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())( (\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s :: acc)\n\e[31m\e[31m   |\e[0m        ^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m13 |\e\
    [0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            if (list.isEmpty || list.length < str.length) list :+\
    \ str\n            else list\n        })\n            .maxBy(_.length)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwmnbpnaj.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstr\e[0m) => {\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m  \
    \      Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m13 |\e[0m            \e[33mif\e[0m (list.isEmpty || list.length < str.length)\
    \ list :+ str\n\e[31m14 |\e[0m            \e[33melse\e[0m list\n\e[31m15 |\e[0m\
    \        })\n\e[31m16 |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(Option(\"\
    No strings\")) {\n            (acc, s) => acc.map(_ => s).find(_.length == acc.head.length).getOrElse(acc.head)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf82iw2r6.scala:13:83\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            (\e[36macc\e[0m,\
    \ \e[36ms\e[0m) => acc.map(_ => s).find(_.length == acc.head.length).getOrElse(acc.head)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    String\n\e[31m   |\e[0m\
    \                        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803680
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                if (acc.length < s.length) acc else s\n    \
    \        })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnuzymmdd.scala:22)\n\tat Problem.main(tmpnuzymmdd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (a,b) => if (a.length < b.length) a else b )\n            strings.find(s =>\
    \ s == longest).getOrElse(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzfr4p9c1.scala:15:53\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            strings.find(\e[36ms\e\
    [0m => s == longest).getOrElse(longest)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    String\n\e[31m   |\e[0m            Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659803679
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (a,\
    \ b) => if (a.length < b.length) a else b )\n            strings.find(s => s ==\
    \ longest).map(s => longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvyx88od6.scala:20)\n\tat Problem.main(tmpvyx88od6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s :: acc)\n            .maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfcdc_4x4.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s :: acc)\n\e[31m\e[31m   |\e[0m        ^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m13 |\e\
    [0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803680
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\n\
    \            list => list.foldLeft(List[String]())(\n                list => list.foldLeft(List[String]())(\n\
    \                    list => list.foldLeft(List[String]())(\n                \
    \        list => list.foldLeft(List[String]())(\n                            list\
    \ => list.foldLeft(List[String]())(\n                                list => list.foldLeft(List[String]())(\n\
    \                                    list => list.foldLeft(List[String]())(\n\
    \                                        list => list.foldLeft(List[String]())(\n\
    \                                            list => list.foldLeft(List[String]())(\n\
    \                                                list => list.foldLeft(List[String]())(\n\
    \                                                    list => list.foldLeft(List[String]())(\n\
    \                                                        list => list.foldLeft(List[String]())(\n\
    \                                                            list => list.foldLeft(List[String]())(\n\
    \                                                                list => list.foldLeft(List[String]())(\n\
    \                                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                        list\
    \ => list.foldLeft(List[String]())(\n                                        \
    \                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \    list => list.foldLeft(List[String]())(\n                                \
    \                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \            list => list.foldLeft(List[String]())(\n                        \
    \                                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                    list => list.foldLeft(List[String]())(\n                \
    \                                                                            \
    \        list => list.foldLeft(List[String]())(\n                            \
    \                                                                            list\
    \ => list.foldLeft(List[String]())(\n                                        \
    \                                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                        list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                            list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                        list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                            list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                                list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                                    list => list.foldLeft(List[String]())(\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_mccox9z.scala:46:182 --------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m                                                    \
    \                                                                            \
    \                \e[36mlist\e[0m => list.foldLeft(List[\e[35mString\e[0m]())(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                  ^\e[0m\n\e[31m   |\e[0m   \
    \                                    expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => acc match {\n            case Nil => Some(s)\n            case _ => if\
    \ (acc.length < s.length) Some(s) else acc\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo4mo1u8l.scala:13:28\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Some(s)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m\
    \   |\e[0m                        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo4mo1u8l.scala:14:53 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m _ => \e[33mif\e[0m (acc.length\
    \ < s.length) Some(s) \e[33melse\e[0m acc\n\e[31m\e[31m   |\e[0m             \
    \                                    ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                      Found:    \e[1m\e[31mSome\e[0m[String]\n\
    \e[31m   |\e[0m                                                 Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)\
    \ {\n            case (Some(longest), s) =>\n                val len = s.length\n\
    \                if (len > longest.length)\n                    Some(s)\n    \
    \            else\n                    longest\n            case _ => None\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplxu8homf.scala:15:34 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mif\e[0m (len > longest.length)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value length is not a member of Any\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplxu8homf.scala:16:24 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                    Some(s)\n\e[31m\e[31m   |\e[0m  \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Found:   \
    \ Some[String]\n\e[31m   |\e[0m                    Required: None.type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplxu8homf.scala:18:20 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    longest\n\e[31m\e[31m   |\e[0m  \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Found:   \
    \ (longest : Any)\n\e[31m   |\e[0m                    Required: None.type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.sortWith(_\
    \ < _).lastOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcf7lp367.scala:16)\n\tat Problem.main(tmpcf7lp367.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)\
    \ { (longest, s) =>\n            if (longest == None) Some(s) else longest.map(x\
    \ => if (x.length > s.length) x else s)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpla94ki_e.scala:13:37\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (longest\
    \ == None) Some(s) \e[33melse\e[0m longest.map(\e[36mx\e[0m => \e[33mif\e[0m (x.length\
    \ > s.length) x \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    Some[String]\n\e[31m   |\e[0m                                 Required: None.type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpla94ki_e.scala:13:69\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m\
    \ (longest == None) Some(s) \e[33melse\e[0m longest.map(\e[36mx\e[0m => \e[33mif\e\
    [0m (x.length > s.length) x \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m        \
    \                                                           ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue length is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import concurrent.duration.pairIntToDuration\n\
    \e[31m   |\e[0m  import concurrent.duration.pairLongToDuration\n\e[31m   |\e[0m\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ s) => {\n            if (list.length < s.length) list :+ s\n            else\
    \ list\n        })\n            .sortWith((a, b) => a.length <= b.length)\n  \
    \          .lastOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt1464k6v.scala:21)\n\tat Problem.main(tmpt1464k6v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803689
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                if (acc.length < s.length) acc else s\n    \
    \        })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnuzymmdd.scala:22)\n\tat Problem.main(tmpnuzymmdd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)\
    \ {\n            case (Some(longest), s) => if (s.length() > longest.length) Some(s)\
    \ else longest\n            case _ => None\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc24pwdcm.scala:13:64 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m (Some(longest), s) => \e\
    [33mif\e[0m (s.length() > longest.length) Some(s) \e[33melse\e[0m longest\n\e\
    [31m\e[31m   |\e[0m                                                        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value length is not a\
    \ member of Any\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc24pwdcm.scala:13:76\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m (Some(longest),\
    \ s) => \e[33mif\e[0m (s.length() > longest.length) Some(s) \e[33melse\e[0m longest\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \                   Found:    Some[String]\n\e[31m   |\e[0m                  \
    \                                Required: None.type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpc24pwdcm.scala:13:85 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m (Some(longest), s) => \e\
    [33mif\e[0m (s.length() > longest.length) Some(s) \e[33melse\e[0m longest\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                           Found:    (longest : Any)\n\e[31m   |\e[0m       \
    \                                        Required: None.type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659803688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp30rquc3c.scala:12:89\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)\
    \ { (max, str) =>\n            if (str.length >= max.getOrElse(0) && str.length\
    \ > 0) Some(str) else max\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk9mmz1gr.scala:13:70\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (str.length\
    \ >= max.getOrElse(\e[31m0\e[0m) && str.length > \e[31m0\e[0m) Some(str) \e[33melse\e\
    [0m max\n\e[31m\e[31m   |\e[0m                                               \
    \                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                        Found:    Some[String]\n\e[31m   |\e[0m             \
    \                                     Required: None.type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => Some(strings.head)\n\
    \            case _ =>\n                val longest = strings.foldLeft(\"\")(_\
    \ + _.length)\n                strings.find(_.length == longest).map(_.head)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpv6lbe1mf.scala:17:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                strings.find(_.length == longest).map(_.head)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m         Values of types Int and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv6lbe1mf.scala:17:56\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                strings.find(_.length\
    \ == longest).map(_.head)\n\e[31m\e[31m   |\e[0m                             \
    \                         ^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                               Found:    Char\n\e[31m   |\e[0m              \
    \                                        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803691
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(\"\")( (acc, s) => if (acc.length < s.length)\
    \ acc else s)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfmmr1v45.scala:13:33\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m strings.foldLeft(\e\
    [31m\"\"\e[0m)( (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803679
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ s) => {\n            if (list.length < s.length) list :+ s\n            else\
    \ list\n        })\n            .maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpklvel6db.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m13 |\e[0m            \e[33mif\e[0m (list.length < s.length) list :+ s\n\e\
    [31m14 |\e[0m            \e[33melse\e[0m list\n\e[31m15 |\e[0m        })\n\e[31m16\
    \ |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)\
    \ { (max, s) =>\n            val len = s.length\n            if (len > max.getOrElse(len))\
    \ {\n                Some(s)\n            } else {\n                max\n    \
    \        }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcfrh3dnz.scala:15:20\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                Some(s)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    Some[String]\n\e[31m   |\e[0m                Required: None.type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659803690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => Some(strings.head)\n\
    \            case _ => {\n                val longest = strings.foldLeft(\"\"\
    )(_ + _.length).length\n                strings.find(_.length == longest).map(_.head)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdmu9w91_.scala:17:56\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                strings.find(_.length\
    \ == longest).map(_.head)\n\e[31m\e[31m   |\e[0m                             \
    \                         ^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                               Found:    Char\n\e[31m   |\e[0m              \
    \                                        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ s) => {\n            if (list.exists(_.length == s.length)) {\n            \
    \    list :+ s\n            } else {\n                list\n            }\n  \
    \      })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfgh379i6.scala:12:40\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m[String]\n\
    \e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m[String]\n\e[31m13 |\e\
    [0m            \e[33mif\e[0m (list.exists(_.length == s.length)) {\n\e[31m14 |\e\
    [0m                list :+ s\n\e[31m15 |\e[0m            } \e[33melse\e[0m {\n\
    \e[31m16 |\e[0m                list\n\e[31m17 |\e[0m            }\n\e[31m18 |\e\
    [0m        })\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803690
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.sortWith(_ < _).last\n\
    \            strings.find(s => s.size == longest.size).getOrElse(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp07ienuth.scala:15:63\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            strings.find(\e[36ms\e\
    [0m => s.size == longest.size).getOrElse(longest)\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Found:    String\n\e[31m   |\e[0m            Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659803690
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(Option(\"\
    no strings\")) {\n            case (Some(longest), s) =>\n                val\
    \ len = s.length\n                if (len > longest.length) Some(s) else None\n\
    \            case (None, s) => Some(s) }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcaxodo8v.scala:19)\n\tat Problem.main(tmpcaxodo8v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.sortWith(_ < _).last\n\
    \            if (longest.length == strings.length) Some(longest)\n           \
    \ else longest.headOption\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjw8gy188.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m longest.headOption\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    Option[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m    \
    \             Required: Option[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803691
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.sortWith(_.length\
    \ < _.length).lastOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpts8vwfm3.scala:16)\n\tat Problem.main(tmpts8vwfm3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            if (list.length < str.length) list :+ str\n         \
    \   else str\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppchbikf8.scala:14:17\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33melse\e[0m str\n\
    \e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m              \
    \   Found:    (str : String)\n\e[31m   |\e[0m                 Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803691
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.sortWith(_\
    \ < _).lastOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcf7lp367.scala:16)\n\tat Problem.main(tmpcf7lp367.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\n\
    \            case (acc, s) => if (acc.length < s.length) acc :+ s else acc\n \
    \       }.maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvg15v9bk.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]()){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e\
    [0m (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc :+ s \e[33melse\e[0m\
    \ acc\n\e[31m14 |\e[0m        }.maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp30rquc3c.scala:12:89\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            if (list.length < str.length) {\n                list\
    \ :+ str\n            } else {\n                list\n            }\n        }).maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1pn_ar6q.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstr\e[0m) => {\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m  \
    \      Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m13 |\e[0m            \e[33mif\e[0m (list.length < str.length) {\n\e[31m14\
    \ |\e[0m                list :+ str\n\e[31m15 |\e[0m            } \e[33melse\e\
    [0m {\n\e[31m16 |\e[0m                list\n\e[31m17 |\e[0m            }\n\e[31m18\
    \ |\e[0m        }).maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                if (acc.length < s.length) acc else s\n    \
    \        })\n            longest.length == strings.length ? Some(longest) : longest.headOption\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpozy4pv_y.scala:17:71 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            longest.length == strings.length ? Some(longest)\
    \ : longest.headOption\n\e[31m\e[31m   |\e[0m                                \
    \                               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                          type headOption is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpozy4pv_y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            longest.length == strings.length ? Some(longest)\
    \ : longest.headOption\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value ? is not a member of Int\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659803691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            if (list.length < str.length) list :+ str\n         \
    \   else str\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppchbikf8.scala:14:17\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33melse\e[0m str\n\
    \e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m              \
    \   Found:    (str : String)\n\e[31m   |\e[0m                 Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            strings.find(s\
    \ => s == longest).getOrElse(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy5frwfk2.scala:15:53\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            strings.find(\e[36ms\e\
    [0m => s == longest).getOrElse(longest)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    String\n\e[31m   |\e[0m            Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659803691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else strings.foldLeft(strings(0))( (s, t) => if (s.length\
    \ < t.length) s else t)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5lii1d_f.scala:13:41\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m strings.foldLeft(strings(\e\
    [31m0\e[0m))( (s, t) => \e[33mif\e[0m (s.length < t.length) s \e[33melse\e[0m\
    \ t)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803692
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                if (acc.length < s.length) acc else s\n    \
    \        })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnuzymmdd.scala:22)\n\tat Problem.main(tmpnuzymmdd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)\
    \ {\n            case (Some(longest), s) =>\n                val length = s.length\n\
    \                if (length > longest.length)\n                    Some(s)\n \
    \               else\n                    longest\n            case _ => None\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4hxxt66_.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mif\e[0m (length > longest.length)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             value length is not a member of Any\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4hxxt66_.scala:16:24 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                    Some(s)\n\e[31m\e[31m   |\e[0m  \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Found:   \
    \ Some[String]\n\e[31m   |\e[0m                    Required: None.type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4hxxt66_.scala:18:20 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    longest\n\e[31m\e[31m   |\e[0m  \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Found:   \
    \ (longest : Any)\n\e[31m   |\e[0m                    Required: None.type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659803692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)\
    \ {\n            case (Some(longest), s) =>\n                val l = s.length\n\
    \                if (l > longest.length) Some(s) else None\n            case (None,\
    \ s) => Some(s) }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm4wsegr.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mif\e[0m (l > longest.length) Some(s)\
    \ \e[33melse\e[0m None\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value length is not a member of Any\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsm4wsegr.scala:15:44 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mif\e[0m (l > longest.length) Some(s)\
    \ \e[33melse\e[0m None\n\e[31m\e[31m   |\e[0m                                \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \ Found:    Some[String]\n\e[31m   |\e[0m                                    \
    \    Required: None.type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsm4wsegr.scala:16:34 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            \e[33mcase\e[0m (None, s) => Some(s) }\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               Found:    Some[String]\n\e[31m   |\e[0m                      \
    \        Required: None.type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659803692
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => Some(strings.head)\n\
    \            case _ => {\n                val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                    if (acc.length < s.length) acc else s\n\
    \                })\n                Some(longest)\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm5iht1fr.scala:25)\n\tat Problem.main(tmpm5iht1fr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            var maxLength = 0\n            var maxString\
    \ = \"\"\n            for (s <- strings) {\n                if (s.length >= maxLength)\
    \ {\n                    maxString = s\n                    maxLength = s.length\n\
    \                }\n            }\n            Some(maxString)\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7gz62ryf.scala:27)\n\tat Problem.main(tmp7gz62ryf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (list, str) => list match {\n            case Nil => Some(str)\n           \
    \ case head :: tail => if (head.length == str.length) head :: list else list\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0mz04wo.scala:13:28\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Some(str)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    \e[1m\e[31mSome\e[0m[String]\n\e\
    [31m   |\e[0m                        Required: \e[1m\e[32mList\e[0m[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(Option(\"\
    No strings\")) {\n            case (Some(longest), s) =>\n                val\
    \ len = s.length\n                if (len > longest.length)\n                \
    \    (Some(s), len)\n                else\n                    (None, len)\n \
    \       }.headOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmo5ijfm9.scala:16:20\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                    (Some(s),\
    \ len)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                    Found:    (Some[String], Int)\n\e[31m   |\e[0m  \
    \                  Required: Option[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpmo5ijfm9.scala:18:20 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    (None, len)\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    (None.type, Int)\n\e[31m   |\e[0m                    Required: Option[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ s) => if (list.length < s.length) list :+ s else list)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkrn1gpi_.scala:12:40\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (list.length\
    \ < s.length) list :+ s \e[33melse\e[0m list)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m[String]\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mOption\e[0m[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803680
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => Some(strings.head)\n\
    \            case _ => {\n                val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                    if (acc.length < s.length) acc else s\n\
    \                })\n                Some(longest)\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm5iht1fr.scala:25)\n\tat Problem.main(tmpm5iht1fr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => {\n                if (acc.length < s.length) acc else s\n           \
    \ })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdcmv_osw.scala:22)\n\tat Problem.main(tmpdcmv_osw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (a, b) => if (a.length < b.length) a else b )\n            strings.find(s =>\
    \ s == longest).getOrElse(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpni5we55q.scala:15:53\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            strings.find(\e[36ms\e\
    [0m => s == longest).getOrElse(longest)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    String\n\e[31m   |\e[0m            Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659803699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (list, str) => list match {\n            case Nil => Some(str)\n           \
    \ case list :: tail => if (str.length == list.length) str else list\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfwa8g2kk.scala:13:28\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Some(str)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    \e[1m\e[31mSome\e[0m[String]\n\e\
    [31m   |\e[0m                        Required: \e[1m\e[32mList\e[0m[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfwa8g2kk.scala:14:64\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m list\
    \ :: tail => \e[33mif\e[0m (str.length == list.length) str \e[33melse\e[0m list\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^\e[0m\n\e[31m   |\e[0m                                           \
    \     Found:    (str : String)\n\e[31m   |\e[0m                              \
    \                  Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpfwa8g2kk.scala:14:73 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m list :: tail => \e[33mif\e[0m\
    \ (str.length == list.length) str \e[33melse\e[0m list\n\e[31m\e[31m   |\e[0m\
    \                                                                         ^^^^\e\
    [0m\n\e[31m   |\e[0m                                               Found:    (list\
    \ : String)\n\e[31m   |\e[0m                                               Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659803701
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (a,b)\
    \ => if (a.length < b.length) a else b )\n            strings.find(s => s == longest)\
    \ match {\n                case Some(longest) => Some(longest)\n             \
    \   case None => None\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprt1_kpf7.scala:23)\n\tat Problem.main(tmprt1_kpf7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\n\
    \            case (acc, s) => if (acc.length < s.length) acc :+ s else acc\n \
    \       }.maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvg15v9bk.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]()){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e\
    [0m (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc :+ s \e[33melse\e[0m\
    \ acc\n\e[31m14 |\e[0m        }.maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            longest.headOption\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuocrv4ms.scala:14:107\
    \ -------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e\
    [36mlongest\e[0m = strings.foldLeft(List[\e[35mString\e[0m]())((\e[36macc\e[0m,\
    \ \e[36ms\e[0m) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e[0m s)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                                Found:    (s : String)\n\e[31m\
    \   |\e[0m                                                  Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => {\n            if (acc.length < s.length) acc :+ s\n            else Some(s)\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplrapg_v1.scala:14:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33melse\e[0m Some(s)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \       Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m   |\e[0m              \
    \   Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803701
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudgo4r6b.scala:20)\n\tat Problem.main(tmpudgo4r6b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)(\
    \ (longest, string) => {\n            if (longest.isEmpty || string.length ==\
    \ longest.get + 1) {\n                Some(string)\n            } else {\n   \
    \             longest\n            }\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpev7xn9b0.scala:13:64 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (longest.isEmpty || string.length\
    \ == longest.get + \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                    \
    \                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                             value + is not a member of Nothing\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpev7xn9b0.scala:14:20 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                Some(string)\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:    Some[String]\n\
    \e[31m   |\e[0m                Required: None.type\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803701
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(Option.empty[String]){\n\
    \            case (Some(longest), s) =>\n                if (s.length() > longest.length)\
    \ Some(s) else None\n            case (None, _) => None\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu9e14n0n.scala:20)\n\tat Problem.main(tmpu9e14n0n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(\"\")( (acc, s) => if (acc.length < s.length)\
    \ acc else s)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfmmr1v45.scala:13:33\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m strings.foldLeft(\e\
    [31m\"\"\e[0m)( (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803679
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.sortWith(_\
    \ < _)\n            .lastOption\n            .orElse(None)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyapl1fcj.scala:18)\n\tat Problem.main(tmpyapl1fcj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s :: acc)\n            .maxBy(s =>\
    \ s.length)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb281815g.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s :: acc)\n\e[31m\e[31m   |\e[0m        ^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m13 |\e\
    [0m            .maxBy(\e[36ms\e[0m => s.length)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.sortWith(_ < _).last\n\
    \            if (longest.length == strings.length) Some(longest)\n           \
    \ else longest.headOption\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjw8gy188.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m longest.headOption\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    Option[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m    \
    \             Required: Option[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.sortWith(_ < _).last\n\
    \            if (longest.length == strings.length) Some(longest)\n           \
    \ else longest.headOption\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjw8gy188.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m longest.headOption\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    Option[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m    \
    \             Required: Option[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)\
    \ {\n            case (Some(longest), s) => if (s.length() > longest.length())\
    \ Some(s) else longest\n            case _ => None\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9izuyoy0.scala:13:64 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m (Some(longest), s) => \e\
    [33mif\e[0m (s.length() > longest.length()) Some(s) \e[33melse\e[0m longest\n\e\
    [31m\e[31m   |\e[0m                                                        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value length is not a\
    \ member of Any\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9izuyoy0.scala:13:78\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m (Some(longest),\
    \ s) => \e[33mif\e[0m (s.length() > longest.length()) Some(s) \e[33melse\e[0m\
    \ longest\n\e[31m\e[31m   |\e[0m                                             \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                                Found:    Some[String]\n\e[31m   |\e[0m     \
    \                                             Required: None.type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9izuyoy0.scala:13:87 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m (Some(longest), s) => \e\
    [33mif\e[0m (s.length() > longest.length()) Some(s) \e[33melse\e[0m longest\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                             Found:    (longest : Any)\n\e[31m   |\e[0m     \
    \                                          Required: None.type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659803702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                if (acc.length < s.length) acc else s\n    \
    \        })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnuzymmdd.scala:22)\n\tat Problem.main(tmpnuzymmdd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            longest.length\
    \ match {\n                case 1 => longest\n                case _ => longest.headOption\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4bsqddmx.scala:16:26\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e\
    [0m \e[31m1\e[0m => longest\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (longest : String)\n\e\
    [31m   |\e[0m                          Required: Option[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4bsqddmx.scala:17:34 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m _ => longest.headOption\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Found:    Option[\e[1m\e[31mChar\e[0m]\n\e\
    [31m   |\e[0m                          Required: Option[\e[1m\e[32mString\e[0m]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(\"\")( (acc, s) => if (acc.length < s.length)\
    \ acc else s)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfmmr1v45.scala:13:33\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m strings.foldLeft(\e\
    [31m\"\"\e[0m)( (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (acc, s) => acc match {\n            case Nil => List(s)\n            case x\
    \ :: xs => if (x.length > s.length) x :: acc else acc match {\n              \
    \  case Nil => List(s)\n                case x :: xs => x :: longest(xs)\n   \
    \         }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaw73xnh1.scala:16:34 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m x :: xs => x :: longest(xs)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              value :: is not a member of Option[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659803702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\n\
    \            list => list.foldLeft(List[String]())(\n                list => list.foldLeft(List[String]())(\n\
    \                    list => list.foldLeft(List[String]())(\n                \
    \        list => list.foldLeft(List[String]())(\n                            list\
    \ => list.foldLeft(List[String]())(\n                                list => list.foldLeft(List[String]())(\n\
    \                                    list => list.foldLeft(List[String]())(\n\
    \                                        list => list.foldLeft(List[String]())(\n\
    \                                            list => list.foldLeft(List[String]())(\n\
    \                                                list => list.foldLeft(List[String]())(\n\
    \                                                    list => list.foldLeft(List[String]())(\n\
    \                                                        list => list.foldLeft(List[String]())(\n\
    \                                                            list => list.foldLeft(List[String]())(\n\
    \                                                                list => list.foldLeft(List[String]())(\n\
    \                                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                        list\
    \ => list.foldLeft(List[String]())(\n                                        \
    \                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \    list => list.foldLeft(List[String]())(\n                                \
    \                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \            list => list.foldLeft(List[String]())(\n                        \
    \                                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                    list => list.foldLeft(List[String]())(\n                \
    \                                                                            \
    \        list => list.foldLeft(List[String]())(\n                            \
    \                                                                            list\
    \ => list.foldLeft(List[String]())(\n                                        \
    \                                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                        list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                            list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                    list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                        list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                            list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                                list => list.foldLeft(List[String]())(\n\
    \                                                                            \
    \                                                                    list => list.foldLeft(List[String]())(\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_mccox9z.scala:46:182 --------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m                                                    \
    \                                                                            \
    \                \e[36mlist\e[0m => list.foldLeft(List[\e[35mString\e[0m]())(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                  ^\e[0m\n\e[31m   |\e[0m   \
    \                                    expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List.empty[String])\
    \ { (list, s) =>\n            val l = list.size\n            if (l > 0 && s.size\
    \ == l) {\n                list\n            } else {\n                list :+\
    \ s\n            }\n        }.maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdiydvdia.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List.empty[\e\
    [35mString\e[0m]) { (\e[36mlist\e[0m, \e[36ms\e[0m) =>\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m13 |\e[0m            \e[33mval\e[0m \e[36ml\e[0m = list.size\n\e[31m14 |\e\
    [0m            \e[33mif\e[0m (l > \e[31m0\e[0m && s.size == l) {\n\e[31m15 |\e\
    [0m                list\n\e[31m16 |\e[0m            } \e[33melse\e[0m {\n\e[31m17\
    \ |\e[0m                list :+ s\n\e[31m18 |\e[0m            }\n\e[31m19 |\e\
    [0m        }.maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(List[String]())((list,\
    \ str) => if (list.length < str.length) list :+ str else str)\n            if\
    \ (longest.length == strings.length) longest.headOption\n            else longest.headOption\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ap5fmvw.scala:14:121\
    \ -------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e\
    [36mlongest\e[0m = strings.foldLeft(List[\e[35mString\e[0m]())((\e[36mlist\e[0m,\
    \ \e[36mstr\e[0m) => \e[33mif\e[0m (list.length < str.length) list :+ str \e[33melse\e\
    [0m str)\n\e[31m\e[31m   |\e[0m                                              \
    \                                                                           ^^^\e\
    [0m\n\e[31m   |\e[0m                                                Found:   \
    \ (str : String)\n\e[31m   |\e[0m                                            \
    \    Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => {\n                if (acc.length < s.length) acc else s\n           \
    \ })\n            strings.find(s => s == longest) else None\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5is0rc37.scala:17:44 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            strings.find(\e[36ms\e[0m => s == longest)\
    \ \e[33melse\e[0m None\n\e[31m\e[31m   |\e[0m                                \
    \            ^^^^\e[0m\n\e[31m   |\e[0m                              end of statement\
    \ expected but 'else' found\n1 error found\n"
  stdout: ''
  timestamp: 1659803699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None:\
    \ Option[String]){\n            case (Some(longest), s) =>\n                val\
    \ len = s.length\n                if (len > longest.length) Some(s) else longest\n\
    \            case (None, _) => None\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiz846kvx.scala:15:55\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                \e[33mif\e[0m\
    \ (len > longest.length) Some(s) \e[33melse\e[0m longest\n\e[31m\e[31m   |\e[0m\
    \                                                       ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                            Found:    (longest : String)\n\
    \e[31m   |\e[0m                                            Required: Option[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(Option.empty[String])((acc,\
    \ s) => {\n            val length = s.length\n            if (acc.isEmpty) {\n\
    \                Some(s)\n            } else if (acc.lastOption.map(_.length).max\
    \ > length) {\n                Some(acc.lastOption.get)\n            } else {\n\
    \                None\n            }\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgsj23i9j.scala:25)\n\tat Problem.main(tmpgsj23i9j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(Option(\"\
    \")) {\n            (acc, s) =>\n                acc.map(_ + s).max match {\n\
    \                    case Some(max) => Some(max)\n                    case None\
    \ => Some(s)\n                }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8rozkuma.scala:15:43\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                    \e[33mcase\e\
    [0m Some(max) => Some(max)\n\e[31m\e[31m   |\e[0m                            \
    \               ^^^\e[0m\n\e[31m   |\e[0m                                    \
    \       Found:    (max : Any)\n\e[31m   |\e[0m                               \
    \            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8rozkuma.scala:16:25 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m                    \e[33mcase\e[0m None => Some(s)\n\e[31m\e[31m   |\e\
    [0m                         ^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Found:    None.type\n\e[31m   |\e[0m                         Required: String\n\
    \e[31m   |\e[0m                         pattern type is incompatible with expected\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(Option.empty[String])\
    \ { (longest, s) =>\n            val length = s.length\n            if (length\
    \ > longest.get || length == 0) longest = Some(s) else longest\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpj2_9n1d4.scala:14:23 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (length > longest.get || length\
    \ == \e[31m0\e[0m) longest = Some(s) \e[33melse\e[0m longest\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m None of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m>\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\
    \e[31m   |\e[0m  (x: Double): Boolean\n\e[31m   |\e[0m  (x: Float): Boolean\n\e\
    [31m   |\e[0m  (x: Long): Boolean\n\e[31m   |\e[0m  (x: Int): Boolean\n\e[31m\
    \   |\e[0m  (x: Char): Boolean\n\e[31m   |\e[0m  (x: Short): Boolean\n\e[31m \
    \  |\e[0m  (x: Byte): Boolean\n\e[31m   |\e[0m match arguments ((longest.get :\
    \ => String))\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpj2_9n1d4.scala:14:61\
    \ -----------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e\
    [0m (length > longest.get || length == \e[31m0\e[0m) longest = Some(s) \e[33melse\e\
    [0m longest\n\e[31m\e[31m   |\e[0m                                           \
    \          ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                  Reassignment to val longest\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ s) => {\n            val length = s.length\n            if (length == list.length)\
    \ list :+ s\n            else if (length > list.length) list :+ s\n          \
    \  else list\n        })\n            .maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpolnyrrwh.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m13 |\e[0m            \e[33mval\e[0m \e[36mlength\e[0m = s.length\n\e[31m14\
    \ |\e[0m            \e[33mif\e[0m (length == list.length) list :+ s\n\e[31m15\
    \ |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (length > list.length) list\
    \ :+ s\n\e[31m16 |\e[0m            \e[33melse\e[0m list\n\e[31m17 |\e[0m     \
    \   })\n\e[31m18 |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (acc, s) => {\n            if (acc.length < s.length) acc :+ s\n           \
    \ else acc\n        })\n            .maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp45vufkf5.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())( (\e[36macc\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m13 |\e[0m            \e[33mif\e[0m (acc.length < s.length) acc :+ s\n\e\
    [31m14 |\e[0m            \e[33melse\e[0m acc\n\e[31m15 |\e[0m        })\n\e[31m16\
    \ |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.sortWith(_\
    \ < _)\n        strings.headOption\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqxoetubr.scala:17)\n\tat Problem.main(tmpqxoetubr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)\
    \ { (longest, s) =>\n            val l = longest.getOrElse(s.length)\n       \
    \     if (l > s.length) Some(s) else longest\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpckc7nilt.scala:14:34\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (l\
    \ > s.length) Some(s) \e[33melse\e[0m longest\n\e[31m\e[31m   |\e[0m         \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \    Found:    Some[String]\n\e[31m   |\e[0m                              Required:\
    \ None.type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => Some(strings.head)\n\
    \            case _ => {\n                val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                    if (acc.length < s.length) acc else s\n\
    \                })\n                Some(longest)\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm5iht1fr.scala:25)\n\tat Problem.main(tmpm5iht1fr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.maxBy(_.length)\n  \
    \          if (longest.length == strings.length) Some(longest)\n            else\
    \ longest.headOption\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprjuai5m3.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m longest.headOption\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    Option[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m    \
    \             Required: Option[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803711
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.sortWith(_.length\
    \ < _.length)\n        strings.lastOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjqyd6jnf.scala:17)\n\tat Problem.main(tmpjqyd6jnf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803714
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\n\
    \            case (acc, s) => if (acc.length < s.length) acc :+ s else acc\n \
    \       }.maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvg15v9bk.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]()){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e\
    [0m (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc :+ s \e[33melse\e[0m\
    \ acc\n\e[31m14 |\e[0m        }.maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ string) => {\n            if (list.isEmpty || list.length < string.length) list\
    \ :+ string\n            else list\n        })\n            .maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp68z00pfd.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstring\e[0m) => {\n\e[31m\e[31m  \
    \ |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e\
    [0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (list.isEmpty || list.length < string.length)\
    \ list :+ string\n\e[31m14 |\e[0m            \e[33melse\e[0m list\n\e[31m15 |\e\
    [0m        })\n\e[31m16 |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)(\
    \ (max, str) => max match {\n            case None => Some(str)\n            case\
    \ Some(maxStr) if maxStr.length < str.length => Some(str)\n            case Some(maxStr)\
    \ if maxStr.length == str.length => maxStr\n            case Some(maxStr) => maxStr\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw29iyw_w.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m None\
    \ => Some(str)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    Some[String]\n\e[31m   |\e[0m\
    \                         Required: None.type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpw29iyw_w.scala:14:40 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m Some(maxStr) \e[33mif\e[0m\
    \ maxStr.length < str.length => Some(str)\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \            value length is not a member of Any\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpw29iyw_w.scala:14:67 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m            \e[33mcase\e[0m Some(maxStr) \e[33mif\e[0m maxStr.length <\
    \ str.length => Some(str)\n\e[31m\e[31m   |\e[0m                             \
    \                                  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                       Found:    Some[String]\n\e[31m   |\e[0m\
    \                                                  Required: None.type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw29iyw_w.scala:15:40 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m Some(maxStr) \e[33mif\e[0m\
    \ maxStr.length == str.length => maxStr\n\e[31m\e[31m   |\e[0m               \
    \                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \          value length is not a member of Any\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpw29iyw_w.scala:15:64 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            \e[33mcase\e[0m Some(maxStr) \e[33mif\e[0m maxStr.length ==\
    \ str.length => maxStr\n\e[31m\e[31m   |\e[0m                                \
    \                                ^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (m"
  stdout: ''
  timestamp: 1659803713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (a, b) => if (a.length < b.length) a else b )\n            strings.find(s =>\
    \ s == longest) match {\n                case Some(longest) => Some(longest)\n\
    \                case None => None\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3s4km28h.scala:23)\n\tat Problem.main(tmp3s4km28h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)\
    \ {\n            case (Some(longest), s) =>\n                if (longest.length\
    \ < s.length) Some(s) else longest\n            case (None, None)  => None\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_c7li7w5.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mif\e[0m (longest.length < s.length)\
    \ Some(s) \e[33melse\e[0m longest\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value length is not a member of Any\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_c7li7w5.scala:14:51 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mif\e[0m (longest.length < s.length)\
    \ Some(s) \e[33melse\e[0m longest\n\e[31m\e[31m   |\e[0m                     \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                          Found:    Some[String]\n\e[31m   |\e[0m           \
    \                                    Required: None.type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_c7li7w5.scala:14:60 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mif\e[0m (longest.length < s.length)\
    \ Some(s) \e[33melse\e[0m longest\n\e[31m\e[31m   |\e[0m                     \
    \                                       ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                       Found:    (longest : Any)\n\e[31m   |\e\
    [0m                                               Required: None.type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_c7li7w5.scala:15:24 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m (None, None)  => None\n\e\
    [31m\e[31m   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e[0m        \
    \                Found:    None.type\n\e[31m   |\e[0m                        Required:\
    \ String\n\e[31m   |\e[0m                        pattern type is incompatible\
    \ with expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659803714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\
    \ (list, str) =>\n            if (list.isEmpty || list.length < str.length) list\
    \ :+ str\n            else list\n        }.maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm6s2yuth.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]()){ (\e[36mlist\e[0m, \e[36mstr\e[0m) =>\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m  \
    \      Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m13 |\e[0m            \e[33mif\e[0m (list.isEmpty || list.length < str.length)\
    \ list :+ str\n\e[31m14 |\e[0m            \e[33melse\e[0m list\n\e[31m15 |\e[0m\
    \        }.maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else strings.maxBy(_.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv4pp40jk.scala:13:13\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m strings.maxBy(_.length)\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \             Found:    String\n\e[31m   |\e[0m             Required: \e[1m\e\
    [32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (acc, s) => if (acc.length < s.length) acc else s :: acc)\n            .maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmyqyvboh.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())( (\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s :: acc)\n\e[31m\e[31m   |\e[0m        ^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m13 |\e\
    [0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            if (longest.length\
    \ == strings.length) Some(longest)\n            else longest.headOption\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkvmqv5eq.scala:14:107\
    \ -------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e\
    [36mlongest\e[0m = strings.foldLeft(List[\e[35mString\e[0m]())((\e[36macc\e[0m,\
    \ \e[36ms\e[0m) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e[0m s)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                                Found:    (s : String)\n\e[31m\
    \   |\e[0m                                                  Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkvmqv5eq.scala:15:55\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (longest.length\
    \ == strings.length) Some(longest)\n\e[31m\e[31m   |\e[0m                    \
    \                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                          Found:    (longest : List[String])\n\e[31m   |\e[0m\
    \                                      Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)(\
    \ (acc, s) => {\n            val l = s.length\n            if (acc != None) acc\
    \ match {\n                case None => Some(s)\n                case Some(acc2)\
    \ => if (acc2.length < l) Some(acc2) else Some(s)\n            }\n           \
    \ else Some(s)\n        })\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx9ctl7cx.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                \e[33mcase\e\
    [0m None => Some(s)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Found:    Some[String]\n\e[31m\
    \   |\e[0m                             Required: None.type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpx9ctl7cx.scala:16:44 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m Some(acc2) => \e[33mif\e\
    [0m (acc2.length < l) Some(acc2) \e[33melse\e[0m Some(s)\n\e[31m\e[31m   |\e[0m\
    \                                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                 value length is not a member of Any\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpx9ctl7cx.scala:16:60 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m Some(acc2) => \e[33mif\e\
    [0m (acc2.length < l) Some(acc2) \e[33melse\e[0m Some(s)\n\e[31m\e[31m   |\e[0m\
    \                                                        ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                     Found:    Some[Any]\n\
    \e[31m   |\e[0m                                                     Required:\
    \ None.type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx9ctl7cx.scala:16:76\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e\
    [0m Some(acc2) => \e[33mif\e[0m (acc2.length < l) Some(acc2) \e[33melse\e[0m Some(s)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \                   Found:    Some[String]\n\e[31m   |\e[0m                  \
    \                                Required: None.type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpx9ctl7cx.scala:18:21 --------------------\e\
    ["
  stdout: ''
  timestamp: 1659803714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s :: acc)\n            .maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfcdc_4x4.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s :: acc)\n\e[31m\e[31m   |\e[0m        ^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m13 |\e\
    [0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)\
    \ {\n            case (Some(longest), s) =>\n                val l = s.length\n\
    \                if (l > longest.length) Some(s) else longest\n            case\
    \ _ => None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5jb__2lf.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mif\e[0m (l > longest.length) Some(s)\
    \ \e[33melse\e[0m longest\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value length is not a member of Any\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5jb__2lf.scala:15:44 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mif\e[0m (l > longest.length) Some(s)\
    \ \e[33melse\e[0m longest\n\e[31m\e[31m   |\e[0m                             \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \    Found:    Some[String]\n\e[31m   |\e[0m                                 \
    \       Required: None.type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5jb__2lf.scala:15:53 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m                \e[33mif\e[0m (l > longest.length) Some(s) \e[33melse\e\
    [0m longest\n\e[31m\e[31m   |\e[0m                                           \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \          Found:    (longest : Any)\n\e[31m   |\e[0m                        \
    \                       Required: None.type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659803714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\n\
    \            list => list match {\n                case Nil => None\n        \
    \        case head :: tail => if (head.length == list.head.length) Some(head)\
    \ else longest(tail)\n            }\n        )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpuv9h99dz.scala:13:17 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[36mlist\e[0m => list \e[33mmatch\e[0m\
    \ {\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Wrong\
    \ number of parameters, expected: 2\n\e[31m14 |\e[0m                \e[33mcase\e\
    [0m Nil => None\n\e[31m15 |\e[0m                \e[33mcase\e[0m head :: tail =>\
    \ \e[33mif\e[0m (head.length == list.head.length) Some(head) \e[33melse\e[0m longest(tail)\n\
    \e[31m16 |\e[0m            }\n1 error found\n"
  stdout: ''
  timestamp: 1659803710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\n\
    \            case (acc, s) => acc match {\n                case Nil => List(s)\n\
    \                case x :: xs => if (x.length > s.length) x :: xs else s :: xs\n\
    \            }\n        }.maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptwkwzkgv.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]()){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e\
    [0m (acc, s) => acc \e[33mmatch\e[0m {\n\e[31m14 |\e[0m                \e[33mcase\e\
    [0m Nil => List(s)\n\e[31m15 |\e[0m                \e[33mcase\e[0m x :: xs =>\
    \ \e[33mif\e[0m (x.length > s.length) x :: xs \e[33melse\e[0m s :: xs\n\e[31m16\
    \ |\e[0m            }\n\e[31m17 |\e[0m        }.maxBy(_.length)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659803714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(Option.empty[String])\
    \ {\n            case (Some(longest), s) => if (s.length() > longest.length) Some(s)\
    \ else longest\n            case _ => None\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn9ixu8dn.scala:13:85\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m (Some(longest),\
    \ s) => \e[33mif\e[0m (s.length() > longest.length) Some(s) \e[33melse\e[0m longest\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                          Found:    (longest : String)\n\e[31m   |\e[0m     \
    \                                       Required: Option[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659803714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None)\
    \ { (longest, s) =>\n            if (longest == None) Some(s) else longest.map(x\
    \ => if (x.length > s.length) x else s)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpla94ki_e.scala:13:37\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (longest\
    \ == None) Some(s) \e[33melse\e[0m longest.map(\e[36mx\e[0m => \e[33mif\e[0m (x.length\
    \ > s.length) x \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    Some[String]\n\e[31m   |\e[0m                                 Required: None.type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpla94ki_e.scala:13:69\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m\
    \ (longest == None) Some(s) \e[33melse\e[0m longest.map(\e[36mx\e[0m => \e[33mif\e\
    [0m (x.length > s.length) x \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m        \
    \                                                           ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue length is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import concurrent.duration.pairIntToDuration\n\
    \e[31m   |\e[0m  import concurrent.duration.pairLongToDuration\n\e[31m   |\e[0m\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List.empty[String])\
    \ { (list, s) =>\n            val l = list.size\n            if (l > 0 && l <\
    \ s.length) list :+ s\n            else list\n        }.maxBy(_.length)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp221b02m3.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List.empty[\e\
    [35mString\e[0m]) { (\e[36mlist\e[0m, \e[36ms\e[0m) =>\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m13 |\e[0m            \e[33mval\e[0m \e[36ml\e[0m = list.size\n\e[31m14 |\e\
    [0m            \e[33mif\e[0m (l > \e[31m0\e[0m && l < s.length) list :+ s\n\e\
    [31m15 |\e[0m            \e[33melse\e[0m list\n\e[31m16 |\e[0m        }.maxBy(_.length)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (a, b) => if (a.length < b.length) a else b )\n            strings.find(s =>\
    \ s == longest).getOrElse(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpni5we55q.scala:15:53\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            strings.find(\e[36ms\e\
    [0m => s == longest).getOrElse(longest)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    String\n\e[31m   |\e[0m            Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659803699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (acc, s) => acc match {\n            case Nil => List(s)\n            case x\
    \ :: xs => if (x.length > s.length) x :: acc else acc match {\n              \
    \  case Nil => List(s)\n                case x :: xs => x :: longest(xs)\n   \
    \         }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaw73xnh1.scala:16:34 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m x :: xs => x :: longest(xs)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              value :: is not a member of Option[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659803702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudgo4r6b.scala:20)\n\tat Problem.main(tmpudgo4r6b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            strings.find(s\
    \ => s == longest).getOrElse(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy5frwfk2.scala:15:53\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            strings.find(\e[36ms\e\
    [0m => s == longest).getOrElse(longest)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    String\n\e[31m   |\e[0m            Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659803691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List.empty[String])\
    \ { (list, str) =>\n            if (list.isEmpty || list.length < str.length)\
    \ {\n                list :+ str\n            } else {\n                list\n\
    \            }\n        }.maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps4fekac9.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List.empty[\e\
    [35mString\e[0m]) { (\e[36mlist\e[0m, \e[36mstr\e[0m) =>\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m13 |\e[0m            \e[33mif\e[0m (list.isEmpty || list.length < str.length)\
    \ {\n\e[31m14 |\e[0m                list :+ str\n\e[31m15 |\e[0m            }\
    \ \e[33melse\e[0m {\n\e[31m16 |\e[0m                list\n\e[31m17 |\e[0m    \
    \        }\n\e[31m18 |\e[0m        }.maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803714
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            strings.find(s =>\
    \ s == longest) match {\n                case Some(longest) => Some(longest)\n\
    \                case None => None\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn1gzzay2.scala:23)\n\tat Problem.main(tmpn1gzzay2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ s) => {\n            if (list.length < s.length) list :+ s\n            else\
    \ list\n        })\n            .maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpklvel6db.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m13 |\e[0m            \e[33mif\e[0m (list.length < s.length) list :+ s\n\e\
    [31m14 |\e[0m            \e[33melse\e[0m list\n\e[31m15 |\e[0m        })\n\e[31m16\
    \ |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            if (list.length < str.length) list :+ str\n         \
    \   else str\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppchbikf8.scala:14:17\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33melse\e[0m str\n\
    \e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m              \
    \   Found:    (str : String)\n\e[31m   |\e[0m                 Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803691
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => Some(strings.head)\n\
    \            case _ => {\n                val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                    if (acc.length < s.length) acc else s\n\
    \                })\n                Some(longest)\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm5iht1fr.scala:25)\n\tat Problem.main(tmpm5iht1fr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => Some(strings.head)\n\
    \            case _ => {\n                val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                    val l = acc.length\n                   \
    \ val c = s.charAt(l)\n                    if(c > 0) acc else s + acc\n      \
    \          })\n                Some(longest)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx7kzfd4e.scala:27)\n\tat Problem.main(tmpx7kzfd4e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803716
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => {\n            if (acc.length < s.length) acc :+ s\n            else acc\n\
    \        })\n            .sortWith((s1, s2) => s1.length < s2.length)\n      \
    \      .headOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8i85ikb7.scala:21)\n\tat Problem.main(tmp8i85ikb7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(Option.empty[String])\
    \ { (longest, s) =>\n            val len = s.length\n            if (len > longest.get\
    \ || len == 0)\n                Some(s)\n            else\n                longest\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp1r1wy0cn.scala:14:20 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (len > longest.get || len ==\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e\
    [0m None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m>\e[0m in \e\
    [33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Boolean\n\
    \e[31m   |\e[0m  (x: Float): Boolean\n\e[31m   |\e[0m  (x: Long): Boolean\n\e\
    [31m   |\e[0m  (x: Int): Boolean\n\e[31m   |\e[0m  (x: Char): Boolean\n\e[31m\
    \   |\e[0m  (x: Short): Boolean\n\e[31m   |\e[0m  (x: Byte): Boolean\n\e[31m \
    \  |\e[0m match arguments ((longest.get : => String))\n1 error found\n"
  stdout: ''
  timestamp: 1659803677
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (a,b)\
    \ => if (a.length < b.length) a else b )\n            strings.find(s => s == longest)\
    \ match {\n                case Some(longest) => Some(longest)\n             \
    \   case None => None\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprt1_kpf7.scala:23)\n\tat Problem.main(tmprt1_kpf7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (acc, s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz2bzoe_a.scala:12:90\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())( (\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp30rquc3c.scala:12:89\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803688
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                if (acc.length < s.length) acc else s\n    \
    \        })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnuzymmdd.scala:22)\n\tat Problem.main(tmpnuzymmdd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.sortWith(_\
    \ < _).lastOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcf7lp367.scala:16)\n\tat Problem.main(tmpcf7lp367.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => {\n            if (acc.length < s.length) acc :+ s\n            else acc\n\
    \        })\n            .maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx9yk5iss.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m13 |\e[0m            \e[33mif\e[0m (acc.length < s.length) acc :+ s\n\e\
    [31m14 |\e[0m            \e[33melse\e[0m acc\n\e[31m15 |\e[0m        })\n\e[31m16\
    \ |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ s) => {\n            if (list.length < s.length) list :+ s\n            else\
    \ list\n        })\n            .maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpklvel6db.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m13 |\e[0m            \e[33mif\e[0m (list.length < s.length) list :+ s\n\e\
    [31m14 |\e[0m            \e[33melse\e[0m list\n\e[31m15 |\e[0m        })\n\e[31m16\
    \ |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803690
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                if (acc.length < s.length) acc else s\n    \
    \        })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnuzymmdd.scala:22)\n\tat Problem.main(tmpnuzymmdd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (acc, s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz2bzoe_a.scala:12:90\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())( (\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803716
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                if (acc.length < s.length) acc else s\n    \
    \        })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnuzymmdd.scala:22)\n\tat Problem.main(tmpnuzymmdd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => Some(strings.head)\n\
    \            case _ => {\n                val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                    if (acc.length < s.length) acc else s\n\
    \                })\n                Some(longest)\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm5iht1fr.scala:25)\n\tat Problem.main(tmpm5iht1fr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ s) => {\n            if (list.length < s.length) list :+ s\n            else\
    \ list\n        })\n            .maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpklvel6db.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m13 |\e[0m            \e[33mif\e[0m (list.length < s.length) list :+ s\n\e\
    [31m14 |\e[0m            \e[33melse\e[0m list\n\e[31m15 |\e[0m        })\n\e[31m16\
    \ |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(\"\"){\n            case (acc, s) => if\
    \ (acc.length < s.length) acc else s}\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcyy2rt83.scala:13:33\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m strings.foldLeft(\e\
    [31m\"\"\e[0m){\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m   \
    \          Found:    String\n\e[31m   |\e[0m             Required: \e[1m\e[32mOption\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e\
    [0m (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e[0m s}\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                if (acc.length < s.length) acc else s\n    \
    \        })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnuzymmdd.scala:22)\n\tat Problem.main(tmpnuzymmdd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.sortWith(_\
    \ < _).lastOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcf7lp367.scala:16)\n\tat Problem.main(tmpcf7lp367.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => acc match {\n            case Nil => Some(s)\n            case x :: xs\
    \ => if (s.length == x.length) Some(s) else x\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdwn_jbmq.scala:13:28\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Some(s)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m\
    \   |\e[0m                        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdwn_jbmq.scala:14:58 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m x :: xs => \e[33mif\e[0m\
    \ (s.length == x.length) Some(s) \e[33melse\e[0m x\n\e[31m\e[31m   |\e[0m    \
    \                                                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                  Found:    \e[1m\e[31mSome\e\
    [0m[String]\n\e[31m   |\e[0m                                                 \
    \ Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpdwn_jbmq.scala:14:67 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m x :: xs => \e[33mif\e[0m (s.length\
    \ == x.length) Some(s) \e[33melse\e[0m x\n\e[31m\e[31m   |\e[0m              \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                                  Found:    (x : String)\n\e\
    [31m   |\e[0m                                                  Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659803723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (acc, s) => {\n            if (acc.length < s.length) acc :+ s\n           \
    \ else acc\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa6knq1z6.scala:12:40\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())( (\e[36macc\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m[String]\n\
    \e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m[String]\n\e[31m13 |\e\
    [0m            \e[33mif\e[0m (acc.length < s.length) acc :+ s\n\e[31m14 |\e[0m\
    \            \e[33melse\e[0m acc\n\e[31m15 |\e[0m        })\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659803721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else strings.foldLeft(\"\"){ (longest, s) =>\n         \
    \   if (longest.length < s.length) longest\n            else s\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1v1doof2.scala:13:33\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m strings.foldLeft(\e\
    [31m\"\"\e[0m){ (longest, s) =>\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e\
    [31m   |\e[0m             Found:    String\n\e[31m   |\e[0m             Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m14 |\e\
    [0m            \e[33mif\e[0m (longest.length < s.length) longest\n\e[31m15 |\e\
    [0m            \e[33melse\e[0m s\n\e[31m16 |\e[0m        }\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.sortWith(_\
    \ < _).lastOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcf7lp367.scala:16)\n\tat Problem.main(tmpcf7lp367.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => Some(strings.head)\n\
    \            case _ =>\n                val longest = strings.foldLeft(\"\")(\
    \ (acc, s) => {\n                    val len = s.length\n                    val\
    \ newLen = acc.length\n                    if (newLen > len) acc else s\n    \
    \            })\n                Some(longest)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoa3r0sse.scala:26)\n\tat Problem.main(tmpoa3r0sse.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803724
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (a,b) => if (a.length < b.length) a else b )\n            strings.find(s =>\
    \ s == longest).map(s => longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppe6on4oh.scala:20)\n\tat Problem.main(tmppe6on4oh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ s) => {\n            if (list.size < s.length) list :+ s\n            else s\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphegigb03.scala:14:17\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33melse\e[0m s\n\
    \e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                \
    \ Found:    (s : String)\n\e[31m   |\e[0m                 Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (acc, s) => if (acc.length < s.length) acc else s)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz2bzoe_a.scala:12:90\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())( (\e[36macc\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length\
    \ < s.length) acc \e[33melse\e[0m s)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (s\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            if (list.length < str.length) list :+ str\n         \
    \   else str\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppchbikf8.scala:14:17\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33melse\e[0m str\n\
    \e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m              \
    \   Found:    (str : String)\n\e[31m   |\e[0m                 Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803691
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => {\n                if (acc.length < s.length) acc else s\n           \
    \ })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdcmv_osw.scala:22)\n\tat Problem.main(tmpdcmv_osw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.sortWith(_\
    \ < _).lastOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcf7lp367.scala:16)\n\tat Problem.main(tmpcf7lp367.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\n\
    \            list => list match {\n                case Nil => None\n        \
    \        case head :: tail => if (head.length == tail.length) head else longest(tail)\n\
    \            }\n        )\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpuoc6ch27.scala:13:17 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[36mlist\e[0m => list \e[33mmatch\e[0m\
    \ {\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Wrong\
    \ number of parameters, expected: 2\n\e[31m14 |\e[0m                \e[33mcase\e\
    [0m Nil => None\n\e[31m15 |\e[0m                \e[33mcase\e[0m head :: tail =>\
    \ \e[33mif\e[0m (head.length == tail.length) head \e[33melse\e[0m longest(tail)\n\
    \e[31m16 |\e[0m            }\n1 error found\n"
  stdout: ''
  timestamp: 1659803721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                if (acc.length < s.length) acc else s\n    \
    \        })\n            strings.find(s => s == longest) match {\n           \
    \     case Some(longest) => Some(longest)\n                case None => None\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps58ijmsq.scala:25)\n\tat Problem.main(tmps58ijmsq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(Option(\"\
    no strings\")) {\n            (longest, string) =>\n                if (string.length\
    \ == longest.get || string.length == longest.get.length)\n                   \
    \ Some(string)\n                else\n                    longest\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgxhbj0uf.scala:14:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mif\e[0m (string.length == longest.get\
    \ || string.length == longest.get.length)\n\e[31m\e[31m   |\e[0m             \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types\
    \ Int and String cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659803724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\n\
    \            case (acc, s) => acc match {\n                case Nil => List(s)\n\
    \                case _ => if (acc.length < s.length) acc else List(s)\n     \
    \       }\n        }.maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpznqgeszs.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]()){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e\
    [0m (acc, s) => acc \e[33mmatch\e[0m {\n\e[31m14 |\e[0m                \e[33mcase\e\
    [0m Nil => List(s)\n\e[31m15 |\e[0m                \e[33mcase\e[0m _ => \e[33mif\e\
    [0m (acc.length < s.length) acc \e[33melse\e[0m List(s)\n\e[31m16 |\e[0m     \
    \       }\n\e[31m17 |\e[0m        }.maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (list, string) => {\n            if (list.length < string.length) list :+ string\n\
    \            else list\n        })\n            .maxBy(_.length)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9mf4yh8q.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())( (\e[36mlist\e[0m, \e[36mstring\e[0m) => {\n\e[31m\e[31m \
    \  |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e\
    [0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (list.length < string.length) list\
    \ :+ string\n\e[31m14 |\e[0m            \e[33melse\e[0m list\n\e[31m15 |\e[0m\
    \        })\n\e[31m16 |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(\"\") {\n            case (acc, s) => if\
    \ (acc.length < s.length) acc else s}\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6zpbgjif.scala:13:34\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m strings.foldLeft(\e\
    [31m\"\"\e[0m) {\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m  \
    \           Found:    String\n\e[31m   |\e[0m             Required: \e[1m\e[32mOption\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e\
    [0m (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e[0m s}\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803680
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(Option(\"\
    No strings\")) {\n            case (Some(longest), s) =>\n                val\
    \ l = s.length\n                if (l > longest.length)\n                    Some(s)\n\
    \                else\n                    None\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2lju7pgy.scala:22)\n\tat Problem.main(tmp2lju7pgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803725
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.sortWith(_\
    \ < _).lastOption\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcf7lp367.scala:16)\n\tat Problem.main(tmpcf7lp367.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => if (list.length < str.length) list :+ str else str)\n            .maxBy(_.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdz_r7n4z.scala:12:103\
    \ -------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstr\e[0m) => \e[33mif\e[0m (list.length\
    \ < str.length) list :+ str \e[33melse\e[0m str)\n\e[31m\e[31m   |\e[0m      \
    \                                                                            \
    \                     ^^^\e[0m\n\e[31m   |\e[0m                              \
    \                  Found:    (str : String)\n\e[31m   |\e[0m                 \
    \                               Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803724
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                if (acc.length < s.length) acc else s\n    \
    \        })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnuzymmdd.scala:22)\n\tat Problem.main(tmpnuzymmdd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                if (acc.length < s.length) acc else s\n    \
    \        })\n            strings.find(s => s == longest) match {\n           \
    \     case Some(longest) => Some(longest)\n                case None => None\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps58ijmsq.scala:25)\n\tat Problem.main(tmps58ijmsq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else strings.foldLeft(strings(0))((acc, s) => if (acc.length\
    \ < s.length) acc else s)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdjvgrslm.scala:13:41\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m strings.foldLeft(strings(\e\
    [31m0\e[0m))((acc, s) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e\
    [0m s)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    String\n\e[31m   |\e[0m           \
    \  Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\n\
    \            (acc, s) => if (acc.length < s.length) acc else s :: acc\n      \
    \  }.maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpswhe2yjz.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]()){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m13 |\e[0m            (\e[36macc\e\
    [0m, \e[36ms\e[0m) => \e[33mif\e[0m (acc.length < s.length) acc \e[33melse\e[0m\
    \ s :: acc\n\e[31m14 |\e[0m        }.maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803724
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => {\n                if (acc.length < s.length) acc else s\n    \
    \        })\n            Some(longest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnuzymmdd.scala:22)\n\tat Problem.main(tmpnuzymmdd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ s) => {\n            if (list.length < s.length) list :+ s\n            else\
    \ list\n        })\n            .maxBy(_.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpklvel6db.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m13 |\e[0m            \e[33mif\e[0m (list.length < s.length) list :+ s\n\e\
    [31m14 |\e[0m            \e[33melse\e[0m list\n\e[31m15 |\e[0m        })\n\e[31m16\
    \ |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803690
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (acc,\
    \ s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudgo4r6b.scala:20)\n\tat Problem.main(tmpudgo4r6b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(Option(\"\
    no strings\")) {\n            (maxLength, string) =>\n                maxLength\
    \ match {\n                    case Some(maxLength) if string.length >= maxLength\
    \ => Some(string)\n                    case Some(maxLength) => Some(maxLength)\n\
    \                    case None => Some(string)\n                }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp22mhoj04.scala:15:58 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                    \e[33mcase\e[0m Some(maxLength) \e\
    [33mif\e[0m string.length >= maxLength => Some(string)\n\e[31m\e[31m   |\e[0m\
    \                                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m>=\e[0m in \e\
    [33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\
    \e[31m   |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m\
    \   |\e[0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e\
    [0m (x: Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch\
    \ arguments ((maxLength : String))\n1 error found\n"
  stdout: ''
  timestamp: 1659803723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else {\n            val longest = strings.foldLeft(\"\")( (max:\
    \ String, current: String) => if (current.length >= max.length) max else current)\n\
    \            strings.find(s => s == longest).getOrElse(longest)\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2mus_6_v.scala:15:53\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            strings.find(\e[36ms\e\
    [0m => s == longest).getOrElse(longest)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    String\n\e[31m   |\e[0m            Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659803724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ string) => {\n            if (list.length < string.length) list :+ string\n\
    \            else list\n        })\n            .maxBy(_.length)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxjlg97aq.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstring\e[0m) => {\n\e[31m\e[31m  \
    \ |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e\
    [0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (list.length < string.length) list\
    \ :+ string\n\e[31m14 |\e[0m            \e[33melse\e[0m list\n\e[31m15 |\e[0m\
    \        })\n\e[31m16 |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ string) => {\n            if (list.length < string.length) list :+ string\n\
    \            else list\n        })\n            .maxBy(_.length)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxjlg97aq.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36mstring\e[0m) => {\n\e[31m\e[31m  \
    \ |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e\
    [0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (list.length < string.length) list\
    \ :+ string\n\e[31m14 |\e[0m            \e[33melse\e[0m list\n\e[31m15 |\e[0m\
    \        })\n\e[31m16 |\e[0m            .maxBy(_.length)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803724
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ str) => {\n            if (list.length >= str.length) list :+ str\n        \
    \    else str\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdzua8qn0.scala:14:17\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33melse\e[0m str\n\
    \e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m              \
    \   Found:    (str : String)\n\e[31m   |\e[0m                 Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())(\
    \ (list, str) => list match {\n            case Nil => Some(str)\n           \
    \ case _ => if (str.length < list.last.length) Some(str) else list\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_lubci_4.scala:13:28\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Some(str)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    \e[1m\e[31mSome\e[0m[String]\n\e\
    [31m   |\e[0m                        Required: \e[1m\e[32mList\e[0m[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_lubci_4.scala:14:61\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m _\
    \ => \e[33mif\e[0m (str.length < list.last.length) Some(str) \e[33melse\e[0m list\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                            \
    \      Found:    \e[1m\e[31mSome\e[0m[String]\n\e[31m   |\e[0m               \
    \                                   Required: \e[1m\e[32mList\e[0m[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]()){\n\
    \            case (acc, s) => if (acc.length < s.length) acc :+ s else acc\n \
    \       }.maxBy(_.length)\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvg15v9bk.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]()){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e[0m\e\
    [1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e\
    [0m (acc, s) => \e[33mif\e[0m (acc.length < s.length) acc :+ s \e[33melse\e[0m\
    \ acc\n\e[31m14 |\e[0m        }.maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803680
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(List[String]())((acc,\
    \ s) => {\n                if (acc.length < s.length) acc :+ s\n             \
    \   else acc\n            })\n            if (longest.length == strings.length)\
    \ longest.headOption\n            else longest.headOption\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2a8jzlg8.scala:24)\n\tat Problem.main(tmp2a8jzlg8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803726
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => Some(strings.head)\n\
    \            case _ => {\n                val longest = strings.foldLeft(List[String]())((acc,\
    \ s) => {\n                    if (acc.length < s.length) acc :+ s\n         \
    \           else s\n                })\n                longest.maxBy(s.length)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn_cdkmv4.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                    \e[33melse\e\
    [0m s\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m \
    \                        Found:    (s : String)\n\e[31m   |\e[0m             \
    \            Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpn_cdkmv4.scala:20:30 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                longest.maxBy(s.length)\n\e[31m\e[31m   |\e[0m            \
    \                  ^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpn_cdkmv4.scala:20:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                longest.maxBy(s.length)\n\e[31m\e[31m\
    \   |\e[0m                                       ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter cmp of \e[33mmethod\e\
    [0m \e[35mmaxBy\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803726
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.length\
    \ match {\n            case 0 => None\n            case 1 => Some(strings.head)\n\
    \            case _ =>\n                val longest = strings.foldLeft(\"\")(\
    \ (acc, s) =>\n                    if (acc.length < s.length) acc else s\n   \
    \             )\n                Some(longest)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps7nyke4g.scala:24)\n\tat Problem.main(tmps7nyke4g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803728
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47to48hx.scala:20)\n\tat Problem.main(tmp47to48hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((acc,\
    \ s) => {\n            val l = acc.length\n            if (l < s.length) acc :+\
    \ s\n            else acc\n        })\n            .maxBy(_.length)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw8dmcy0d.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36macc\e[0m, \e[36ms\e[0m) => {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m13 |\e[0m            \e[33mval\e[0m \e[36ml\e[0m = acc.length\n\e[31m14\
    \ |\e[0m            \e[33mif\e[0m (l < s.length) acc :+ s\n\e[31m15 |\e[0m   \
    \         \e[33melse\e[0m acc\n\e[31m16 |\e[0m        })\n\e[31m17 |\e[0m    \
    \        .maxBy(_.length)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty)\
    \ None\n        else strings.foldLeft(\"\") { (longest, s) =>\n            if\
    \ (longest.length < s.length) longest\n            else s\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb9gy413q.scala:13:34\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m strings.foldLeft(\e\
    [31m\"\"\e[0m) { (longest, s) =>\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e\
    [31m   |\e[0m             Found:    String\n\e[31m   |\e[0m             Required:\
    \ \e[1m\e[32mOption\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m14 |\e\
    [0m            \e[33mif\e[0m (longest.length < s.length) longest\n\e[31m15 |\e\
    [0m            \e[33melse\e[0m s\n\e[31m16 |\e[0m        }\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803727
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(None:\
    \ Option[String]){\n            case (Some(longest), s) =>\n                val\
    \ len = s.length\n                if (len > longest.length) Some(s) else None\n\
    \            case (None, s) => Some(s)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(longest((List[String]())).equals(None));\n    assert(longest((List[String](\"\
    x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hzu9osn.scala:21)\n\tat Problem.main(tmp9hzu9osn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.foldLeft(List[String]())((list,\
    \ s) => if (list.length < s.length) list :+ s else list)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n  \
    \  assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkrn1gpi_.scala:12:40\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strings.foldLeft(List[\e\
    [35mString\e[0m]())((\e[36mlist\e[0m, \e[36ms\e[0m) => \e[33mif\e[0m (list.length\
    \ < s.length) list :+ s \e[33melse\e[0m list)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m[String]\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mOption\e[0m[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659803680
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n    // strings of the same length. Return None in case\
    \ the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b',\
    \ 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n  \
    \  def longest(strings : List[String]) : Option[String] = {\n        strings.sortWith(_\
    \ < _)\n            .takeWhile(_ != strings.last)\n            .lastOption\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
    \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n   \
    \ assert(longest((List[String](\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
    abc\"))).equals(\"zzzz\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_btap8jj.scala:18)\n\tat Problem.main(tmp_btap8jj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803728
