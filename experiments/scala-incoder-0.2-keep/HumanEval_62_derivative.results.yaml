language: scala
name: HumanEval_62_derivative
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi71hye8.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var ds : List[Long] = Nil\n        var x : Long =\
    \ 0\n        var y : Long = 0\n        var i : Int = 0\n        var j : Int =\
    \ 0\n        for(i <- 0 until xs.length - 1) {\n            x += 1\n         \
    \   for(j <- 0 until i) {\n                y += 1\n            }\n           \
    \ ds = ds :+ xs[i] * y\n        }\n        ds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdax6hye.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            ds = ds :+ xs[\e[35mi\e[0m] * y\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           Not found: type i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail.tail.tail\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5a0145f.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n\
    \ + 1)\n        var i = 0\n        while(i < n) {\n            d(i) = xs(i) *\
    \ xs(i + 1)\n            i += 1\n        }\n        d(n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp69h6xhm2.scala:19:9\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d(n)\n\e[31m\e[31m \
    \  |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val result = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            result(i) = xs(i) * xs(i\
    \ + 1)\n            i += 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3zg4zhko.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n\
    \ + 1)\n        d(0) = 1\n        for (i<-1 to n) {\n            d(i) = xs(i)\
    \ * d(i-1)\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoh387e7l.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            ds(i) = xs(i) * xs(i\
    \ + 1)\n            i += 1\n        }\n        ds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8987809m.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprgz1m89h.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi71hye8.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail.tail.tail\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5a0145f.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp44j7h5sl.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val xs = xs.toList\n        val n = xs.size\n    \
    \    val d = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n\
    \            d(i) = xs(i) * xs(i + 1)\n            i += 1\n        }\n       \
    \ return d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcyhr7kx6.scala:12:17 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = xs.toList\n\e\
    [31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mxs\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpcyhr7kx6.scala:20:15 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mreturn\e[0m d\n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               Found:    (d : Array[Long])\n\
    \e[31m   |\e[0m               Required: List[Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n\
    \        for( i <- 0 until n ) {\n            if( i == 0 ) {\n               \
    \ ds(i) = 1\n            } else {\n                ds(i) = xs(i) * ds(i-1)\n \
    \           }\n        }\n        ds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0g9ft27n.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail.tail.tail\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5a0145f.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vqb6g0u.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vqb6g0u.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4xjrtwch.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n\
    \        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var ds\
    \ : List[Long] = Nil\n        var dc : List[Long] = Nil\n        var dp : List[Long]\
    \ = Nil\n        var dn : List[Long] = Nil\n        var ds : List[Long] = Nil\n\
    \        var dc : List[Long] = Nil\n        var dp : List[Long] = Nil\n      \
    \  var dn : List[Long] = Nil\n        var ds : List[Long] = Nil\n        var dc\
    \ : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var ds : List[Long] = Nil\n        var dc : List[Long] = Nil\n\
    \        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n      \
    \  var ds : List[Long] = Nil\n        var dc : List[Long] = Nil\n        var dp\
    \ : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var ds : List[Long]\
    \ = Nil\n        var dc : List[Long] = Nil\n        var dp : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var ds : List[Long] = Nil\n      \
    \  var dc : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn\
    \ : List[Long] = Nil\n        var ds : List[Long] = Nil\n        var dc : List[Long]\
    \ = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n\
    \        var ds : List[Long] = Nil\n        var dc : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var ds\
    \ : List[Long] = Nil\n        var dc : List[Long] = Nil\n        var dp : List[Long]\
    \ = Nil\n        var dn : List[Long] = Nil\n        var ds : List[Long] = Nil\n\
    \        var dc : List[Long] = Nil\n        var dp : List[Long] = Nil\n      \
    \  var dn : List[Long] = Nil\n        var ds : List[Long] = Nil\n        var dc\
    \ : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var ds : List[Long] = Nil\n        var dc : List[Long] = Nil\n\
    \        var dp : List[Long] = Nil\n        var dn \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvle3ns0o.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvle3ns0o.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdp\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdp is already defined\
    \ as \e[33mvariable\e[0m \e[35mdp\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvle3ns0o.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mdn\e[0m : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdn is already defined as \e[33mvariable\e[0m \e[35mdn\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvle3ns0o.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mvar\e[0m \e[36mds\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]\
    \ = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mds is already defined as \e[33mvariable\e[0m \e[35mds\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvle3ns0o.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdc\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdc is already defined\
    \ as \e[33mvariable\e[0m \e[35mdc\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvle3ns0o.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mdp\e[0m : \e[35mList\e[0m["
  stdout: ''
  timestamp: 1659794838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val x0 = xs.head\n      \
    \  val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 =\
    \ xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n     \
    \   val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyngwmfjd.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyngwmfjd.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi71hye8.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var dx : List[Long] = Nil\n        var dy : List[Long]\
    \ = Nil\n        var dn : List[Long] = Nil\n        var dx : List[Long] = Nil\n\
    \        var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n      \
    \  var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn\
    \ : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long]\
    \ = Nil\n        var dn : List[Long] = Nil\n        var dx : List[Long] = Nil\n\
    \        var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n      \
    \  var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn\
    \ : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long]\
    \ = Nil\n        var dn : List[Long] = Nil\n        var dx : List[Long] = Nil\n\
    \        var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n      \
    \  var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn\
    \ : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long]\
    \ = Nil\n        var dn : List[Long] = Nil\n        var dx : List[Long] = Nil\n\
    \        var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n      \
    \  var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn\
    \ : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long]\
    \ = Nil\n        var dn : List[Long] = Nil\n        var dx : List[Long] = Nil\n\
    \        var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n      \
    \  var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn\
    \ : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long]\
    \ = Nil\n        var dn : List[Long] = Nil\n        var dx : List[Long] = Nil\n\
    \        var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n      \
    \  var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn\
    \ : List[Long] = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long]\
    \ = Nil\n        var dn : List[Long] = N\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl32jo_7r.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mdx\e[0m : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdx is already defined as \e[33mvariable\e[0m \e[35mdx\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpl32jo_7r.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mvar\e[0m \e[36mdy\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]\
    \ = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdy is already defined as \e[33mvariable\e[0m \e[35mdy\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl32jo_7r.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdn\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdn is already defined\
    \ as \e[33mvariable\e[0m \e[35mdn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl32jo_7r.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mdx\e[0m : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdx is already defined as \e[33mvariable\e[0m \e[35mdx\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpl32jo_7r.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mvar\e[0m \e[36mdy\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]\
    \ = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdy is already defined as \e[33mvariable\e[0m \e[35mdy\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloade"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val xs = xs.tail\n     \
    \   val ys = xs.map(x => x0 * x + 1)\n        ys.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzzri0tei.scala:13:17 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = xs.tail\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mxs\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1xg9mgf4.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n      \
    \  val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val\
    \ x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 =\
    \ xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n\
    \        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n\
    \        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n\
    \        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n\
    \        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n\
    \        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n\
    \        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n\
    \        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n\
    \        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n\
    \        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n\
    \        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n\
    \        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n\
    \        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n\
    \        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n\
    \        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n\
    \        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n\
    \        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n\
    \        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2lfh_45t.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2lfh_45t.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var d = 0L\n        var dd = 1L\n        var ddd =\
    \ 1L\n        var i = 0\n        var j = 0\n        var k = 0\n        var sum\
    \ = 0L\n        var sum2 = 0L\n        var sum3 = 0L\n        var sum4 = 0L\n\
    \        var sum5 = 0L\n        var sum6 = 0L\n        var sum7 = 0L\n       \
    \ var sum8 = 0L\n        var sum9 = 0L\n        var sum10 = 0L\n        var sum11\
    \ = 0L\n        var sum12 = 0L\n        var sum13 = 0L\n        var sum14 = 0L\n\
    \        var sum15 = 0L\n        var sum16 = 0L\n        var sum17 = 0L\n    \
    \    var sum18 = 0L\n        var sum19 = 0L\n        var sum20 = 0L\n        var\
    \ sum21 = 0L\n        var sum22 = 0L\n        var sum23 = 0L\n        var sum24\
    \ = 0L\n        var sum25 = 0L\n        var sum26 = 0L\n        var sum27 = 0L\n\
    \        var sum28 = 0L\n        var sum29 = 0L\n        var sum30 = 0L\n    \
    \    var sum31 = 0L\n        var sum32 = 0L\n        var sum33 = 0L\n        var\
    \ sum34 = 0L\n        var sum35 = 0L\n        var sum36 = 0L\n        var sum37\
    \ = 0L\n        var sum38 = 0L\n        var sum39 = 0L\n        var sum40 = 0L\n\
    \        var sum41 = 0L\n        var sum42 = 0L\n        var sum43 = 0L\n    \
    \    var sum44 = 0L\n        var sum45 = 0L\n        var sum46 = 0L\n        var\
    \ sum47 = 0L\n        var sum48 = 0L\n        var sum49 = 0L\n        var sum50\
    \ = 0L\n        var sum51 = 0L\n        var sum52 = 0L\n        var sum53 = 0L\n\
    \        var sum54 = 0L\n        var sum55 = 0L\n        var sum56 = 0L\n    \
    \    var sum57 = 0L\n        var sum58 = 0L\n        var sum59 = 0L\n        var\
    \ sum60 = 0L\n        var sum61 = 0L\n        var sum62 = 0L\n        var sum63\
    \ = 0L\n        var sum64 = 0L\n        var sum65 = 0L\n        var sum66 = 0L\n\
    \        var sum67 = 0L\n        var sum68 = 0L\n        var sum69 = 0L\n    \
    \    var sum70 = 0L\n        var sum71 = 0L\n        var sum72 = 0L\n        var\
    \ sum73 = 0L\n        var sum74 = 0L\n        var sum75 = 0L\n        var sum76\
    \ = 0L\n        var sum77 = 0L\n        var sum78 = 0L\n        var sum79 = 0L\n\
    \        var sum80 = 0L\n        var sum81 = 0L\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp92wyqxro.scala:99:5\
    \ ---------------------\e[0m\e[0m\n\e[31m99 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprgz1m89h.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val x0 = xs.head\n      \
    \  val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 =\
    \ xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n     \
    \   val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyngwmfjd.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyngwmfjd.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            val x = xs(i)\n     \
    \       val d = 1\n            while (i < n && xs(i) != 0) {\n               \
    \ d *= xs(i)\n                i += 1\n            }\n            ds(i) = d\n \
    \           i += 1\n        }\n        ds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr_2jd4w6.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                d *= xs(i)\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                value *= is not a member\
    \ of Int - did you mean d.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr_2jd4w6.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            ds(i) = xs(i) * xs(i\
    \ + 1)\n            i += 1\n        }\n        ds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv6dievzo.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1xg9mgf4.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var xpow =\
    \ 0L\n        var xpow2 = 0L\n        var xpow3 = 0L\n        var xpow4 = 0L\n\
    \        var xpow5 = 0L\n        var xpow6 = 0L\n        var xpow7 = 0L\n    \
    \    var xpow8 = 0L\n        var xpow9 = 0L\n        var xpow10 = 0L\n       \
    \ var xpow11 = 0L\n        var xpow12 = 0L\n        var xpow13 = 0L\n        var\
    \ xpow14 = 0L\n        var xpow15 = 0L\n        var xpow16 = 0L\n        var xpow17\
    \ = 0L\n        var xpow18 = 0L\n        var xpow19 = 0L\n        var xpow20 =\
    \ 0L\n        var xpow21 = 0L\n        var xpow22 = 0L\n        var xpow23 = 0L\n\
    \        var xpow24 = 0L\n        var xpow25 = 0L\n        var xpow26 = 0L\n \
    \       var xpow27 = 0L\n        var xpow28 = 0L\n        var xpow29 = 0L\n  \
    \      var xpow30 = 0L\n        var xpow31 = 0L\n        var xpow32 = 0L\n   \
    \     var xpow33 = 0L\n        var xpow34 = 0L\n        var xpow35 = 0L\n    \
    \    var xpow36 = 0L\n        var xpow37 = 0L\n        var xpow38 = 0L\n     \
    \   var xpow39 = 0L\n        var xpow40 = 0L\n        var xpow41 = 0L\n      \
    \  var xpow42 = 0L\n        var xpow43 = 0L\n        var xpow44 = 0L\n       \
    \ var xpow45 = 0L\n        var xpow46 = 0L\n        var xpow47 = 0L\n        var\
    \ xpow48 = 0L\n        var xpow49 = 0L\n        var xpow50 = 0L\n        var xpow51\
    \ = 0L\n        var xpow52 = 0L\n        var xpow53 = 0L\n        var xpow54 =\
    \ 0L\n        var xpow55 = 0L\n        var xpow56 = 0L\n        var xpow57 = 0L\n\
    \        var xpow58 = 0L\n        var xpow59 = 0L\n        var xpow60 = 0L\n \
    \       var xpow61 = 0L\n        var xpow62 = 0L\n        var xpow63 = 0L\n  \
    \      var xpow64 = 0L\n        var xpow65 = 0L\n        var xpow66 = 0L\n   \
    \     var xpow67 = 0L\n        var xpow68 = 0L\n        var xpow69 = 0L\n    \
    \    var xpow70 = 0L\n        var xpow71 = 0L\n        var xpow72 = 0L\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy2y29v7s.scala:86:5\
    \ ---------------------\e[0m\e[0m\n\e[31m86 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n      \
    \  val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val\
    \ x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 =\
    \ xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n\
    \        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n\
    \        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n\
    \        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n\
    \        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n\
    \        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n\
    \        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n\
    \        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n\
    \        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n\
    \        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n\
    \        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n\
    \        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n\
    \        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n\
    \        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n\
    \        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n\
    \        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n\
    \        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n\
    \        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2lfh_45t.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2lfh_45t.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var dx : List[Long] = Nil\n        var dy : List[Long]\
    \ = Nil\n        var dn : List[Long] = Nil\n        var xs : List[Long] = Nil\n\
    \        var x = 0L\n        var y = 0L\n        var d = 0L\n        var n = 0L\n\
    \        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n      \
    \  var dn : List[Long] = Nil\n        var xs : List[Long] = Nil\n        var x\
    \ = 0L\n        var y = 0L\n        var d = 0L\n        var n = 0L\n        var\
    \ dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var xs : List[Long] = Nil\n        var x = 0L\n        var y\
    \ = 0L\n        var d = 0L\n        var n = 0L\n        var dx : List[Long] =\
    \ Nil\n        var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n\
    \        var xs : List[Long] = Nil\n        var x = 0L\n        var y = 0L\n \
    \       var d = 0L\n        var n = 0L\n        var dx : List[Long] = Nil\n  \
    \      var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var\
    \ xs : List[Long] = Nil\n        var x = 0L\n        var y = 0L\n        var d\
    \ = 0L\n        var n = 0L\n        var dx : List[Long] = Nil\n        var dy\
    \ : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var xs : List[Long]\
    \ = Nil\n        var x = 0L\n        var y = 0L\n        var d = 0L\n        var\
    \ n = 0L\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var xs : List[Long] = Nil\n      \
    \  var x = 0L\n        var y = 0L\n        var d = 0L\n        var n = 0L\n  \
    \      var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var\
    \ dn : List[Long] = Nil\n        var xs : List[Long] = Nil\n        var x = 0L\n\
    \        var y = 0L\n        var d = 0L\n        var n = 0L\n        var dx :\
    \ List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var xs : List[Long] = Nil\n        var x = 0L\n        var y\
    \ = 0L\n        var d = 0L\n        var n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj_b9mdgj.scala:88:4 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj_b9mdgj.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mx\e[0m = \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mx is already defined as \e[33mvariable\e[0m \e[35mx\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj_b9mdgj.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mvar\e[0m \e[36my\e[0m = \e[31m0L\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0my is already defined as \e[33mvariable\e\
    [0m \e[35my\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpj_b9mdgj.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36md\e[0m = \e[31m0L\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0md is already defined\
    \ as \e[33mvariable\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj_b9mdgj.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = \e[31m0L\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvariable\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj_b9mdgj.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mdx\e[0m : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdx is already defined as \e[33mvariable\e[0m \e[35mdx\e[0m\n\
    \e[31m   |\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659794844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var xd = 0L\n\
    \        var xd2 = 0L\n        var xd3 = 0L\n        var xd4 = 0L\n        var\
    \ xd5 = 0L\n        var xd6 = 0L\n        var xd7 = 0L\n        var xd8 = 0L\n\
    \        var xd9 = 0L\n        var xd10 = 0L\n        var xd11 = 0L\n        var\
    \ xd12 = 0L\n        var xd13 = 0L\n        var xd14 = 0L\n        var xd15 =\
    \ 0L\n        var xd16 = 0L\n        var xd17 = 0L\n        var xd18 = 0L\n  \
    \      var xd19 = 0L\n        var xd20 = 0L\n        var xd21 = 0L\n        var\
    \ xd22 = 0L\n        var xd23 = 0L\n        var xd24 = 0L\n        var xd25 =\
    \ 0L\n        var xd26 = 0L\n        var xd27 = 0L\n        var xd28 = 0L\n  \
    \      var xd29 = 0L\n        var xd30 = 0L\n        var xd31 = 0L\n        var\
    \ xd32 = 0L\n        var xd33 = 0L\n        var xd34 = 0L\n        var xd35 =\
    \ 0L\n        var xd36 = 0L\n        var xd37 = 0L\n        var xd38 = 0L\n  \
    \      var xd39 = 0L\n        var xd40 = 0L\n        var xd41 = 0L\n        var\
    \ xd42 = 0L\n        var xd43 = 0L\n        var xd44 = 0L\n        var xd45 =\
    \ 0L\n        var xd46 = 0L\n        var xd47 = 0L\n        var xd48 = 0L\n  \
    \      var xd49 = 0L\n        var xd50 = 0L\n        var xd51 = 0L\n        var\
    \ xd52 = 0L\n        var xd53 = 0L\n        var xd54 = 0L\n        var xd55 =\
    \ 0L\n        var xd56 = 0L\n        var xd57 = 0L\n        var xd58 = 0L\n  \
    \      var xd59 = 0L\n        var xd60 = 0L\n        var xd61 = 0L\n        var\
    \ xd62 = 0L\n        var xd63 = 0L\n        var xd64 = 0L\n        var xd65 =\
    \ 0L\n        var xd66 = 0L\n        var xd67 = 0L\n        var xd68 = 0L\n  \
    \      var xd69 = 0L\n        var xd70 = 0L\n        var xd71 = 0L\n        var\
    \ xd72 = 0L\n        var xd73 = 0L\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpar13oojq.scala:88:5\
    \ ---------------------\e[0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi71hye8.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ds = new mutable.ListBuffer[Long](n)\n\
    \        val x = new mutable.ListBuffer[Long](n)\n        val y = new mutable.ListBuffer[Long](n)\n\
    \        val z = new mutable.ListBuffer[Long](n)\n        val x2 = new mutable.ListBuffer[Long](n)\n\
    \        val y2 = new mutable.ListBuffer[Long](n)\n        val z2 = new mutable.ListBuffer[Long](n)\n\
    \        val xx = new mutable.ListBuffer[Long](n)\n        val yy = new mutable.ListBuffer[Long](n)\n\
    \        val zz = new mutable.ListBuffer[Long](n)\n        val xy = new mutable.ListBuffer[Long](n)\n\
    \        val yz = new mutable.ListBuffer[Long](n)\n        val zx = new mutable.ListBuffer[Long](n)\n\
    \        val xz = xs.tail.zipWithIndex.map { case (x, i) => x * i }\n        val\
    \ yz = xs.tail.zipWithIndex.map { case (x, i) => x * i * i }\n        val zx =\
    \ xs.tail.zipWithIndex.map { case (x, i) => x * i * i * i }\n        val xy =\
    \ xs.tail.zipWithIndex.map { case (x, i) => x * i * i * i * i }\n        val yx\
    \ = xs.tail.zipWithIndex.map { case (x, i) => x * i * i * i * i * i }\n      \
    \  val zx = xs.tail.zipWithIndex.map { case (x, i) => x * i * i * i * i * i *\
    \ i }\n        val xz = xs.tail.zipWithIndex.map { case (x, i) => x * i * i *\
    \ i * i * i * i * i }\n        val yz = xs.tail.zipWithIndex.map { case (x, i)\
    \ => x * i * i * i * i * i * i * i * i }\n        val zx = xs.tail.zipWithIndex.map\
    \ { case (x, i) => x * i * i * i * i * i * i * i * i * i }\n        val xy = xs.tail.zipWithIndex.map\
    \ { case (x, i) => x * i * i * i * i * i * i * i * i * i }\n        val yx = xs.tail.zipWithIndex.map\
    \ { case (x, i) => x * i * i * i * i * i * i * i * i * i }\n        val zx = xs.tail.zipWithIndex.map\
    \ { case (x, i) => x * i * i * i * i * i * i * i * i * i * i }\n        val xz\
    \ = xs.tail.zipWithIndex.\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphexhxk97.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphexhxk97.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36myz\e[0m = xs.tail.zipWithIndex.map { \e[33mcase\e\
    [0m (x, i) => x * i * i }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0myz is already defined as \e[33mvalue\e[0m \e[35myz\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphexhxk97.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mzx\e[0m = xs.tail.zipWithIndex.map { \e[33mcase\e\
    [0m (x, i) => x * i * i * i }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mzx is already defined as \e[33mvalue\e[0m \e[35mzx\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphexhxk97.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mxy\e[0m = xs.tail.zipWithIndex.map { \e[33mcase\e\
    [0m (x, i) => x * i * i * i * i }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mxy is already defined as \e[33mvalue\e[0m \e[35mxy\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphexhxk97.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mzx\e[0m = xs.tail.zipWithIndex.map { \e[33mcase\e\
    [0m (x, i) => x * i * i * i * i * i * i }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mzx is already def"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val x0 = xs(0)\n        val\
    \ x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 =\
    \ xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n\
    \        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n  \
    \      val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n\
    \        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n\
    \        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n\
    \        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n\
    \        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n\
    \        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n\
    \        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n\
    \        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n\
    \        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n\
    \        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n\
    \        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n\
    \        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n\
    \        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n\
    \        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n\
    \        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n\
    \        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n\
    \        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpes0ba4ti.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpes0ba4ti.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val x0 = xs.head\n      \
    \  val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 =\
    \ xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n     \
    \   val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyngwmfjd.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyngwmfjd.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi71hye8.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var y = 0L\n\
    \        var z = 0L\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        var l = 0\n        var n = 0\n        var m = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var n = 0\n        var n = 0\n        var n = 0\n        var n = 0\n\
    \        var \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpmkqhp2ef.scala:139:11 --------------------------\e\
    [0m\e[0m\n\e[31m139 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m    |\e[0m    \
    \       ^\e[0m\n\e[31m    |\e[0m           pattern expected\n\e[31m    |\e[0m\n\
    \e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmkqhp2ef.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvariable\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmkqhp2ef.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvariable\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmkqhp2ef.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvariable\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmkqhp2ef.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvariable\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmkqhp2ef.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is alread"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vqb6g0u.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vqb6g0u.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprgz1m89h.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.foldLeft(x0)((acc,\
    \ x) => acc * x)\n        List(x1 - x0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6rnqax97.scala:17)\n\tat Problem.main(tmp6rnqax97.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n\
    \ + 1)\n        val x = new Array[Long](n + 1)\n        val x0 = x(0)\n      \
    \  val x1 = x(1)\n        val x2 = x(2)\n        val x3 = x(3)\n        val x4\
    \ = x(4)\n        val x5 = x(5)\n        val x6 = x(6)\n        val x7 = x(7)\n\
    \        val x8 = x(8)\n        val x9 = x(9)\n        val x10 = x(10)\n     \
    \   val x11 = x(11)\n        val x12 = x(12)\n        val x13 = x(13)\n      \
    \  val x14 = x(14)\n        val x15 = x(15)\n        val x16 = x(16)\n       \
    \ val x17 = x(17)\n        val x18 = x(18)\n        val x19 = x(19)\n        val\
    \ x20 = x(20)\n        val x21 = x(21)\n        val x22 = x(22)\n        val x23\
    \ = x(23)\n        val x24 = x(24)\n        val x25 = x(25)\n        val x26 =\
    \ x(26)\n        val x27 = x(27)\n        val x28 = x(28)\n        val x29 = x(29)\n\
    \        val x30 = x(30)\n        val x31 = x(31)\n        val x32 = x(32)\n \
    \       val x33 = x(33)\n        val x34 = x(34)\n        val x35 = x(35)\n  \
    \      val x36 = x(36)\n        val x37 = x(37)\n        val x38 = x(38)\n   \
    \     val x39 = x(39)\n        val x40 = x(40)\n        val x41 = x(41)\n    \
    \    val x42 = x(42)\n        val x43 = x(43)\n        val x44 = x(44)\n     \
    \   val x45 = x(45)\n        val x46 = x(46)\n        val x47 = x(47)\n      \
    \  val x48 = x(48)\n        val x49 = x(49)\n        val x50 = x(50)\n       \
    \ val x51 = x(51)\n        val x52 = x(52)\n        val x53 = x(53)\n        val\
    \ x54 = x(54)\n        val x55 = x(55)\n        val x56 = x(56)\n        val x57\
    \ = x(57)\n        val x58 = x(58)\n        val x59\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsoswlnsl.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpsoswlnsl.scala:75:5 ---------------------\e[0m\e[0m\n\e[31m75 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n\
    \ + 1)\n        var i = 0\n        while (i < n) {\n            d(i) = xs(i) *\
    \ xs(i + 1)\n            i += 1\n        }\n        d(n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjuatvcoc.scala:19:9\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d(n)\n\e[31m\e[31m \
    \  |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprgz1m89h.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vqb6g0u.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vqb6g0u.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprgz1m89h.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        val dd = new Array[Long](n)\n        val ddd = new Array[Long](n)\n \
    \       val dd_1 = new Array[Long](n)\n        val dd_2 = new Array[Long](n)\n\
    \        val dd_3 = new Array[Long](n)\n        val dd_4 = new Array[Long](n)\n\
    \        val dd_5 = new Array[Long](n)\n        val dd_6 = new Array[Long](n)\n\
    \        val dd_7 = new Array[Long](n)\n        val dd_8 = new Array[Long](n)\n\
    \        val dd_9 = new Array[Long](n)\n        val dd_10 = new Array[Long](n)\n\
    \        val dd_11 = new Array[Long](n)\n        val dd_12 = new Array[Long](n)\n\
    \        val dd_13 = new Array[Long](n)\n        val dd_14 = new Array[Long](n)\n\
    \        val dd_15 = new Array[Long](n)\n        val dd_16 = new Array[Long](n)\n\
    \        val dd_17 = new Array[Long](n)\n        val dd_18 = new Array[Long](n)\n\
    \        val dd_19 = new Array[Long](n)\n        val dd_20 = new Array[Long](n)\n\
    \        val dd_21 = new Array[Long](n)\n        val dd_22 = new Array[Long](n)\n\
    \        val dd_23 = new Array[Long](n)\n        val dd_24 = new Array[Long](n)\n\
    \        val dd_25 = new Array[Long](n)\n        val dd_26 = new Array[Long](n)\n\
    \        val dd_27 = new Array[Long](n)\n        val dd_28 = new Array[Long](n)\n\
    \        val dd_29 = new Array[Long](n)\n        val dd_30 = new Array[Long](n)\n\
    \        val dd_31 = new Array[Long](n)\n        val dd_32 = new Array[Long](n)\n\
    \        val dd_33 = new Array[Long](n)\n        val dd_34 = new Array[Long](n)\n\
    \        val dd_35 = new Array[Long](n)\n        val dd_36 = new Array[Long](n)\n\
    \        val dd_37 = new Array[Long](n)\n        val dd_38 = new Array[Long](n)\n\
    \        val dd_39 = new Array[Long](n)\n        val dd_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp23tk56kw.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp23tk56kw.scala:56:5 ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1xg9mgf4.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprgz1m89h.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi71hye8.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n      \
    \  val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val\
    \ x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 =\
    \ xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n\
    \        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n\
    \        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n\
    \        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n\
    \        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n\
    \        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n\
    \        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n\
    \        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n\
    \        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n\
    \        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n\
    \        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n\
    \        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n\
    \        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n\
    \        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n\
    \        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n\
    \        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n\
    \        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n\
    \        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2lfh_45t.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2lfh_45t.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x = xs(0)\n       \
    \ val xs = xs.drop(1)\n        val ys = xs.map(x => x * x)\n        val y = (xs.head\
    \ * xs.last)\n        val ys = ys.drop(1)\n        val zs = ys.map(y => y * y)\n\
    \        val z = (ys.head * ys.last)\n        val zs = zs.drop(1)\n        val\
    \ ws = zs.map(z => z * z)\n        val w = (zs.head * zs.last)\n        val ws\
    \ = ws.drop(1)\n        val xs2 = xs.map(x => x * x)\n        val xs2s = xs2.drop(1)\n\
    \        val ys2s = xs2.map(x => x * x)\n        val ys2 = (xs2.head * xs2.last)\n\
    \        val zs2s = ys2s.map(y => y * y)\n        val zs2 = (ys2s.head * ys2s.last)\n\
    \        val ws2 = zs2s.map(z => z * z)\n        val ws2 = (zs2s.head * zs2s.last)\n\
    \        val ws2s = ws2.drop(1)\n        val xs3s = xs2s.map(x => x * x)\n   \
    \     val xs3 = (xs2s.head * xs2s.last)\n        val ys3s = xs3s.map(x => x *\
    \ x)\n        val ys3 = (xs3s.head * xs3s.last)\n        val zs3s = ys3s.map(y\
    \ => y * y)\n        val zs3 = (ys3s.head * ys3s.last)\n        val ws3s = zs3s.map(z\
    \ => z * z)\n        val ws3 = (zs3s.head * zs3s.last)\n        val ws3s = ws3.drop(1)\n\
    \        val xs4s = xs3s.map(x => x * x)\n        val xs4 = (xs3s.head * xs3s.last)\n\
    \        val ys3s = xs4s.map(x => x * x)\n        val ys3 = (xs4s.head * xs4s.last)\n\
    \        val zs3s = ys3s.map(y => y * y)\n        val zs3 = (ys3s.head * ys3s.last)\n\
    \        val ws3s = zs3s.map(z => z * z)\n        val ws3 = (zs3s.head * zs3s.last)\n\
    \        val ws4s = ws3s.drop(1)\n        val xs5s = xs4\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsc4yxd4s.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mys\e[0m = ys.drop(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mys\
    \ is already defined as \e[33mvalue\e[0m \e[35mys\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsc4yxd4s.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mzs\e[0m = zs.drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mzs is already defined as \e[33mvalue\e[0m \e[35mzs\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsc4yxd4s.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mws\e[0m = ws.drop(\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mws is already defined\
    \ as \e[33mvalue\e[0m \e[35mws\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsc4yxd4s.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mws2\e[0m = (zs2s.head *\
    \ zs2s.last)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mws2 is already defined as \e[33mvalue\e[0m \e[35mws2\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsc4yxd4s.scala:41:12 ---------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mval\e[0m \e[36mws3s\e[0m = ws3.drop(\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mws3s is already\
    \ defined as \e[33mvalue\e[0m \e[35mws3s\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E16"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            ds(i) = xs(i) * xs(i)\n\
    \            i += 1\n        }\n        val dr = new Array[Long](n)\n        var\
    \ j = 0\n        while (j < n) {\n            dr(j) = 1\n            j += 1\n\
    \        }\n        var k = 0\n        while (k < (n - 1)) {\n            dr(k\
    \ + 1) = dr(k) * xs(k)\n            k += 1\n        }\n        dr(0)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsblejk82.scala:30:10\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        dr(\e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\
    \e[31m   |\e[0m        Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e\
    [32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n\
    \        for( i <- 0 until n ) {\n            val x = xs(i)\n            val ds\
    \ = xs(i) - xs(i-1) * x\n            ds(i) = ds\n        }\n        ds\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsx7s97fy.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            ds(i) = ds\n\e[31m\e[31m   |\e[0m       \
    \     ^^\e[0m\n\e[31m   |\e[0m            value update is not a member of Long\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsx7s97fy.scala:19:8 ---------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e\
    [31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n\
    \        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n\
    \        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n\
    \        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy9l053dw.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail.tail.tail\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5a0145f.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val x0 = xs.head\n      \
    \  val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 =\
    \ xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n     \
    \   val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyngwmfjd.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyngwmfjd.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            val x = xs(i)\n     \
    \       val j = i + 1\n            while (j < n) {\n                val y = xs(j)\n\
    \                ds(i) = y\n                i += 1\n                j += 1\n \
    \           }\n            i += 1\n        }\n        ds\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp337vgwz1.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                j += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp337vgwz1.scala:26:8 ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var xs = xs.toList\n\
    \        var ys = xs.tail\n        for( x <- xs ) {\n            d += x\n    \
    \    }\n        for( x <- ys ) {\n            d *= x\n        }\n        d / xs.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps_vm539s.scala:14:17 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mxs\e[0m = xs.toList\n\e\
    [31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvariable\e[0m \e[35mxs\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi71hye8.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi71hye8.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val x0 = xs.head\n      \
    \  val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 =\
    \ xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n     \
    \   val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyngwmfjd.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyngwmfjd.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vqb6g0u.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vqb6g0u.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            ds(i) = xs(i) * xs(i\
    \ + 1)\n            i += 1\n        }\n        ds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8987809m.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail.tail.tail\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5a0145f.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vqb6g0u.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vqb6g0u.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var n1 = xs.length - 1\n        var n2 = n1 - 1\n\
    \        var n3 = n2 - 1\n        var n4 = n3 - 1\n        var n5 = n4 - 1\n \
    \       var n6 = n5 - 1\n        var n7 = n6 - 1\n        var n8 = n7 - 1\n  \
    \      var n9 = n8 - 1\n        var n10 = n9 - 1\n        var n11 = n10 - 1\n\
    \        var n12 = n11 - 1\n        var n13 = n12 - 1\n        var n14 = n13 -\
    \ 1\n        var n15 = n14 - 1\n        var n16 = n15 - 1\n        var n17 = n16\
    \ - 1\n        var n18 = n17 - 1\n        var n19 = n18 - 1\n        var n20 =\
    \ n19 - 1\n        var n21 = n20 - 1\n        var n22 = n21 - 1\n        var n23\
    \ = n22 - 1\n        var n24 = n23 - 1\n        var n25 = n24 - 1\n        var\
    \ n26 = n25 - 1\n        var n27 = n26 - 1\n        var n28 = n27 - 1\n      \
    \  var n29 = n28 - 1\n        var n30 = n29 - 1\n        var n31 = n30 - 1\n \
    \       var n32 = n31 - 1\n        var n33 = n32 - 1\n        var n34 = n33 -\
    \ 1\n        var n35 = n34 - 1\n        var n36 = n35 - 1\n        var n37 = n36\
    \ - 1\n        var n38 = n37 - 1\n        var n39 = n38 - 1\n        var n40 =\
    \ n39 - 1\n        var n41 = n40 - 1\n        var n42 = n41 - 1\n        var n43\
    \ = n42 - 1\n        var n44 = n43 - 1\n        var n45 = n44 - 1\n        var\
    \ n46 = n45 - 1\n        var n47 = n46 - 1\n        var n48 = n47 - 1\n      \
    \  var n49 = n48 - 1\n        var n50 = n49 - 1\n        var n51 = n50 - 1\n \
    \       var n52 = n51 - 1\n        var n53 = n52 - 1\n        var n54 = n53 -\
    \ 1\n        var n55 = n54 - 1\n        var n56 = n55 - 1\n        var n57 = n56\
    \ - 1\n        var n58 = n57 - 1\n        var n59 = n58 - 1\n        var n60 =\
    \ n59 - 1\n        var n61 = n60 - 1\n        var n62 = n61 - 1\n        var n63\
    \ = n62 - 1\n        var n64 = n63 - 1\n        var n65 = n64 - 1\n        var\
    \ n66 = n65 - 1\n        var n67 = n66 - 1\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgkxslhm_.scala:84:5\
    \ ---------------------\e[0m\e[0m\n\e[31m84 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi71hye8.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprgz1m89h.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val result = new Array[Long](n)\n\
    \        val x = new Array[Long](n)\n        val x0 = x(0)\n        val x1 = x(1)\n\
    \        val x2 = x(2)\n        val x3 = x(3)\n        val x4 = x(4)\n       \
    \ val x5 = x(5)\n        val x6 = x(6)\n        val x7 = x(7)\n        val x8\
    \ = x(8)\n        val x9 = x(9)\n        val x10 = x(10)\n        val x11 = x(11)\n\
    \        val x12 = x(12)\n        val x13 = x(13)\n        val x14 = x(14)\n \
    \       val x15 = x(15)\n        val x16 = x(16)\n        val x17 = x(17)\n  \
    \      val x18 = x(18)\n        val x19 = x(19)\n        val x20 = x(20)\n   \
    \     val x21 = x(21)\n        val x22 = x(22)\n        val x23 = x(23)\n    \
    \    val x24 = x(24)\n        val x25 = x(25)\n        val x26 = x(26)\n     \
    \   val x27 = x(27)\n        val x28 = x(28)\n        val x29 = x(29)\n      \
    \  val x30 = x(30)\n        val x31 = x(31)\n        val x32 = x(32)\n       \
    \ val x33 = x(33)\n        val x34 = x(34)\n        val x35 = x(35)\n        val\
    \ x36 = x(36)\n        val x37 = x(37)\n        val x38 = x(38)\n        val x39\
    \ = x(39)\n        val x40 = x(40)\n        val x41 = x(41)\n        val x42 =\
    \ x(42)\n        val x43 = x(43)\n        val x44 = x(44)\n        val x45 = x(45)\n\
    \        val x46 = x(46)\n        val x47 = x(47)\n        val x48 = x(48)\n \
    \       val x49 = x(49)\n        val x50 = x(50)\n        val x51 = x(51)\n  \
    \      val x52 = x(52)\n        val x53 = x(53)\n        val x54 = x(54)\n   \
    \     val x55 = x(55)\n        val x56 = x(56)\n        val x57 = x(57)\n    \
    \    val x58 = x(58)\n        val x59 = x(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpi0n6lhu2.scala:74:20 ---------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m        \e[33mval\e[0m \e[36mx59\e[0m = x(\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpi0n6lhu2.scala:75:5 ---------------------\e[0m\e[0m\n\e[31m75\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n\
    \        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n    \
    \    val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val\
    \ ds = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val ys\
    \ = new Array[Long](n)\n        val zs = new Array[Long](n)\n        val ds =\
    \ new Array[Long](n)\n        val xs = new Array[Long](n)\n        val ys = new\
    \ Array[Long](n)\n        val zs = new Array[Long](n)\n        val ds = new Array[Long](n)\n\
    \        val xs = new Array[Long](n)\n        val ys = new Array[Long](n)\n  \
    \      val zs = new Array[Long](n)\n        val ds = new Array[Long](n)\n    \
    \    val xs = new Array[Long](n)\n        val ys = new Array[Long](n)\n      \
    \  val zs = new Array[Long](n)\n        val ds = new Array[Long](n)\n        val\
    \ xs = new Array[Long](n)\n        val ys = new Array[Long](n)\n        val zs\
    \ = new Array[Long](n)\n        val ds = new Array[Long](n)\n        val xs =\
    \ new Array[Long](n)\n        val ys = new Array[Long](n)\n        val zs = new\
    \ Array[Long](n)\n        val ds = new Array[Long](n)\n        val xs = new Array[Long](n)\n\
    \        val ys = new Array[Long](n)\n        val zs = new Array[Long](n)\n  \
    \      val ds = new Array[Long](n)\n        val xs = new Array[Long](n)\n    \
    \    val ys = new Array[Long](n)\n        val zs = new Array[Long](n)\n      \
    \  val ds = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val\
    \ ys = new Array[Long](n)\n        val zs = new Array[Long](n)\n        val ds\
    \ = new Array[Long](n)\n        val xs = new Array[Long](n)\n        val ys =\
    \ new Array[Long](n)\n        val zs = new Array[Long](n)\n        val ds = new\
    \ Array[Long](n)\n        val xs = new Array[Long](n)\n        val ys = new Array[Long](n)\n\
    \        val zs = new Array[Long](n)\n        val ds = new Array[Long](n)\n  \
    \      val xs = new Array[\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp91t2vq_v.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp91t2vq_v.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mds is already defined as \e[33mvalue\e[0m \e[35mds\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp91t2vq_v.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mds is already defined as \e[33mvalue\e[0m \e[35mds\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp91t2vq_v.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mxs is already defined as \e[33mvalue\e[0m \e[35mxs\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp91t2vq_v.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mys\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mys is already defined as \e[33mvalue\e[0m \e[35mys\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp91t2vq_v.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail.tail.tail\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5a0145f.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val result = new Array[Long](n)\n\
    \        val x = 1L\n        val xs = xs.toList\n        var i = 0\n        while\
    \ (i < n) {\n            result(i) = xs(i) * x\n            i += 1\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptna1degu.scala:15:17 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = xs.toList\n\e\
    [31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mxs\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptna1degu.scala:21:8 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val xs = xs.toList\n        val n = xs.size\n    \
    \    val y = xs.last\n        val ds = new Array[Long](n)\n        var i = 0\n\
    \        while (i < n) {\n            val x = xs(i)\n            val d = xs(i)\
    \ - y\n            ds(i) = d\n            i += 1\n        }\n        ds\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjhcd6cnw.scala:12:17 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = xs.toList\n\e\
    [31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mxs\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjhcd6cnw.scala:23:8 ---------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e\
    [31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptgxsey66.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4xjrtwch.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n\
    \        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dm\
    \ : List[Long] = Nil\n        var ds : List[Long] = Nil\n        var dc : List[Long]\
    \ = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n\
    \        var dm : List[Long] = Nil\n        var ds : List[Long] = Nil\n      \
    \  var dc : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn\
    \ : List[Long] = Nil\n        var dm : List[Long] = Nil\n        var ds : List[Long]\
    \ = Nil\n        var dc : List[Long] = Nil\n        var dp : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var dm : List[Long] = Nil\n      \
    \  var ds : List[Long] = Nil\n        var dc : List[Long] = Nil\n        var dp\
    \ : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dm : List[Long]\
    \ = Nil\n        var ds : List[Long] = Nil\n        var dc : List[Long] = Nil\n\
    \        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n      \
    \  var dm : List[Long] = Nil\n        var ds : List[Long] = Nil\n        var dc\
    \ : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var dm : List[Long] = Nil\n        var ds : List[Long] = Nil\n\
    \        var dc : List[Long] = Nil\n        var dp : List[Long] = Nil\n      \
    \  var dn : List[Long] = Nil\n        var dm : List[Long] = Nil\n        var ds\
    \ : List[Long] = Nil\n        var dc : List[Long] = Nil\n        var dp : List[Long]\
    \ = Nil\n        var dn : List[Long] = Nil\n        var dm : List[Long] = Nil\n\
    \        var ds : List[Long] = Nil\n        var dc : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dm\
    \ : List[Long] = Nil\n        var ds : List[Long] = Nil\n        var dc : List[Long]\
    \ = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n\
    \        var dm : List[Long] = Nil\n        var ds : \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd96z4c_5.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpd96z4c_5.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mvar\e[0m \e[36mdp\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]\
    \ = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdp is already defined as \e[33mvariable\e[0m \e[35mdp\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd96z4c_5.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdn\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdn is already defined\
    \ as \e[33mvariable\e[0m \e[35mdn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd96z4c_5.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mdm\e[0m : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdm is already defined as \e[33mvariable\e[0m \e[35mdm\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpd96z4c_5.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mvar\e[0m \e[36mds\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]\
    \ = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mds is already defined as \e[33mvariable\e[0m \e[35mds\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd96z4c_5.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdc\e[0m : \e[35"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var y = 0L\n\
    \        var z = 0L\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        var n = 0\n        var n1 = xs.size\n        var n2 = n1 - 1\n      \
    \  var n3 = n2 - 1\n        var n4 = n3 - 1\n        var n5 = n4 - 1\n       \
    \ var n6 = n5 - 1\n        var n7 = n6 - 1\n        var n8 = n7 - 1\n        var\
    \ n9 = n8 - 1\n        var n10 = n9 - 1\n        var n11 = n10 - 1\n        var\
    \ n12 = n11 - 1\n        var n13 = n12 - 1\n        var n14 = n13 - 1\n      \
    \  var n15 = n14 - 1\n        var n16 = n15 - 1\n        var n17 = n16 - 1\n \
    \       var n18 = n17 - 1\n        var n19 = n18 - 1\n        var n20 = n19 -\
    \ 1\n        var n21 = n20 - 1\n        var n22 = n21 - 1\n        var n23 = n22\
    \ - 1\n        var n24 = n23 - 1\n        var n25 = n24 - 1\n        var n26 =\
    \ n25 - 1\n        var n27 = n26 - 1\n        var n28 = n27 - 1\n        var n29\
    \ = n28 - 1\n        var n30 = n29 - 1\n        var n31 = n30 - 1\n        var\
    \ n32 = n31 - 1\n        var n33 = n32 - 1\n        var n34 = n33 - 1\n      \
    \  var n35 = n34 - 1\n        var n36 = n35 - 1\n        var n37 = n36 - 1\n \
    \       var n38 = n37 - 1\n        var n39 = n38 - 1\n        var n40 = n39 -\
    \ 1\n        var n41 = n40 - 1\n        var n42 = n41 - 1\n        var n43 = n42\
    \ - 1\n        var n44 = n43 - 1\n        var n45 = n44 - 1\n        var n46 =\
    \ n45 - 1\n        var n47 = n46 - 1\n        var n48 = n47 - 1\n        var n49\
    \ = n48 - 1\n        var n50 = n49 - 1\n        var n51 = n50 - 1\n        var\
    \ n52 = n51 - 1\n        var n53 = n52 - 1\n        var n54 = n53 - 1\n      \
    \  var n55 = n54 - 1\n        var n56 = n55 - 1\n        var n57 = n56 - 1\n \
    \       var n58 = n57 - 1\n        var n59 = n58 - 1\n        var n60 = n59 -\
    \ 1\n        var n61 = n60 - 1\n        var n62 = n61 - 1\n        var n63 = n62\
    \ - 1\n        var n64 = n63 - 1\n        var n65 = n64 - 1\n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptrkemgg_.scala:86:5\
    \ ---------------------\e[0m\e[0m\n\e[31m86 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val x0 = xs.head\n      \
    \  val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 =\
    \ xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n     \
    \   val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr46po9f3.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var xd = 0L\n\
    \        var xd2 = 0L\n        var xd3 = 0L\n        var xd4 = 0L\n        var\
    \ xd5 = 0L\n        var xd6 = 0L\n        var xd7 = 0L\n        var xd8 = 0L\n\
    \        var xd9 = 0L\n        var xd10 = 0L\n        var xd11 = 0L\n        var\
    \ xd12 = 0L\n        var xd13 = 0L\n        var xd14 = 0L\n        var xd15 =\
    \ 0L\n        var xd16 = 0L\n        var xd17 = 0L\n        var xd18 = 0L\n  \
    \      var xd19 = 0L\n        var xd20 = 0L\n        var xd21 = 0L\n        var\
    \ xd22 = 0L\n        var xd23 = 0L\n        var xd24 = 0L\n        var xd25 =\
    \ 0L\n        var xd26 = 0L\n        var xd27 = 0L\n        var xd28 = 0L\n  \
    \      var xd29 = 0L\n        var xd30 = 0L\n        var xd31 = 0L\n        var\
    \ xd32 = 0L\n        var xd33 = 0L\n        var xd34 = 0L\n        var xd35 =\
    \ 0L\n        var xd36 = 0L\n        var xd37 = 0L\n        var xd38 = 0L\n  \
    \      var xd39 = 0L\n        var xd40 = 0L\n        var xd41 = 0L\n        var\
    \ xd42 = 0L\n        var xd43 = 0L\n        var xd44 = 0L\n        var xd45 =\
    \ 0L\n        var xd46 = 0L\n        var xd47 = 0L\n        var xd48 = 0L\n  \
    \      var xd49 = 0L\n        var xd50 = 0L\n        var xd51 = 0L\n        var\
    \ xd52 = 0L\n        var xd53 = 0L\n        var xd54 = 0L\n        var xd55 =\
    \ 0L\n        var xd56 = 0L\n        var xd57 = 0L\n        var xd58 = 0L\n  \
    \      var xd59 = 0L\n        var xd60 = 0L\n        var xd61 = 0L\n        var\
    \ xd62 = 0L\n        var xd63 = 0L\n        var xd64 = 0L\n        var xd65 =\
    \ 0L\n        var xd66 = 0L\n        var xd67 = 0L\n        var xd68 = 0L\n  \
    \      var xd69 = 0L\n        var xd70 = 0L\n        var xd71 = 0L\n        var\
    \ xd72 = 0L\n        var xd73 = 0L\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpar13oojq.scala:88:5\
    \ ---------------------\e[0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail.tail.tail\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5a0145f.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpys7sq6i_.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val d = new Array[Long](n\
    \ + 1)\n        var i = 0\n        while(i < n) {\n            d(i) = xs(i) *\
    \ xs(i + 1)\n            i += 1\n        }\n        d(n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwea91pw8.scala:19:9\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d(n)\n\e[31m\e[31m \
    \  |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            val x = xs(i)\n     \
    \       val j = i + 1\n            while (j < n) {\n                ds(j) = xs(j)\
    \ - xs(i)\n                j += 1\n            }\n            i += 1\n       \
    \ }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8cxzs37m.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                j += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8cxzs37m.scala:24:8 ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m\
    \        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n\
    \        for( i <- 0 until n ) {\n            ds(i) = xs(i) * xs(i) + xs(i) *\
    \ xs(i) * xs(i) + xs(i) * xs(i) * xs(i) * xs(i)\n        }\n        ds\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4yns039l.scala:17:8\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var y = 0L\n\
    \        var z = 0L\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n\
    \        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n\
    \        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n\
    \        var xi = 0\n        var yi = 0\n        var zi = 0\n        var xj =\
    \ 0\n        var yj = 0\n        var zj = 0\n        var xk = 0\n        var yk\
    \ = 0\n        var zk = 0\n        var xl = 0\n        var yl = 0\n        var\
    \ zl = 0\n        var xm = 0\n        var ym = 0\n        var zm = 0\n       \
    \ var xn = 0\n        var yn = 0\n        var zn = 0\n        var xo = 0\n   \
    \     var yo = 0\n        var zo = 0\n        var xp = 0\n        var yp = 0\n\
    \        var zp = 0\n        var xr = 0\n        var yr = 0\n        var zr =\
    \ 0\n        var xs = 0\n        var ys = 0\n        var zs = 0\n        var xu\
    \ = 0\n        var yu = 0\n        var zu = 0\n        var xi = 0\n        var\
    \ yi = 0\n        var zi = 0\n        var xj = 0\n        var yj = 0\n       \
    \ var zj = 0\n        var xk = 0\n        var yk = 0\n        var zk = 0\n   \
    \     var xl = 0\n        var yl = 0\n        var zl = 0\n        var xm = 0\n\
    \        var ym = 0\n        var zm = 0\n        var xn = 0\n        var yn =\
    \ 0\n        var zn = 0\n        var xo = 0\n        var yo = 0\n        var zo\
    \ = 0\n        var xp = 0\n        var yp = 0\n        var zp = 0\n        var\
    \ xr = 0\n        var yr = 0\n        var zr = 0\n        var xs = 0\n       \
    \ var ys = 0\n        var zs = 0\n        var xu = 0\n        var yu = 0\n   \
    \     var zu = 0\n        var xi = 0\n        var yi = 0\n        var zi = 0\n\
    \        var xj = 0\n        var yj = 0\n        var zj = 0\n        var xk =\
    \ 0\n        var yk = 0\n        var zk = 0\n        var xl = 0\n        var yl\
    \ = 0\n        var zl = 0\n        var xm = 0\n        var ym = 0\n        var\
    \ zm = 0\n        var xn = 0\n        var yn = 0\n        var zn = 0\n       \
    \ var xo = 0\n        var yo = 0\n        var zo = 0\n        var xp = 0\n   \
    \     var yp = 0\n        var zp = 0\n        var xr = 0\n        var yr = 0\n\
    \        var zr = 0\n        var xs = 0\n        var ys = 0\n        var zs =\
    \ 0\n        var xu = 0\n        var yu = 0\n        var zu = 0\n        var xi\
    \ = 0\n        var \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp_uctfy5h.scala:131:11 --------------------------\e\
    [0m\e[0m\n\e[31m131 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m    |\e[0m    \
    \       ^\e[0m\n\e[31m    |\e[0m           pattern expected\n\e[31m    |\e[0m\n\
    \e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_uctfy5h.scala:64:12 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        \e[33mvar\e[0m \e[36mxi\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mxi is already defined\
    \ as \e[33mvariable\e[0m \e[35mxi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_uctfy5h.scala:65:12 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        \e[33mvar\e[0m \e[36myi\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0myi is already defined\
    \ as \e[33mvariable\e[0m \e[35myi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_uctfy5h.scala:66:12 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mvar\e[0m \e[36mzi\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mzi is already defined\
    \ as \e[33mvariable\e[0m \e[35mzi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_uctfy5h.scala:67:12 ---------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m        \e[33mvar\e[0m \e[36mxj\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mxj is already defined\
    \ as \e[33mvariable\e[0m \e[35mxj\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_uctfy5h.scala:68:12 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mvar\e[0m \e[36myj\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659794860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val xs = xs.tail\n     \
    \   val ys = xs.map(_ * x0)\n        val x0 = xs.head\n        val xs = xs.tail\n\
    \        val ys = xs.map(_ * x0)\n        val x0 = xs.head\n        val xs = xs.tail\n\
    \        val ys = xs.map(_ * x0)\n        val x0 = xs.head\n        val xs = xs.tail\n\
    \        val ys = xs.map(_ * x0)\n        val x0 = xs.head\n        val xs = xs.tail\n\
    \        val ys = xs.map(_ * x0)\n        val x0 = xs.head\n        val xs = xs.tail\n\
    \        val ys = xs.map(_ * x0)\n        val x0 = xs.head\n        val xs = xs.tail\n\
    \        val ys = xs.map(_ * x0)\n        val x0 = xs.head\n        val xs = xs.tail\n\
    \        val ys = xs.map(_ * x0)\n        val x0 = xs.head\n        val xs = xs.tail\n\
    \        val ys = xs.map(_ * x0)\n        val x0 = xs.head\n        val xs = xs.tail\n\
    \        val ys = xs.map(_ * x0)\n        val x0 = xs.head\n        val xs = xs.tail\n\
    \        val ys = xs.map(_ * x0)\n        val x0 = xs.head\n        val xs = xs.tail\n\
    \        val ys = xs.map(_ * x0)\n        val x0 = xs.head\n        val xs = xs.tail\n\
    \        val ys = xs.map(_ * x0)\n        val x0 = xs.head\n        val xs = xs.tail\n\
    \        val ys = xs.map(_ * x0)\n        val x0 = xs.head\n        val xs = xs.tail\n\
    \        val ys = xs.map(_ * x0)\n        val x0 = xs.head\n        val xs = xs.tail\n\
    \        val ys = xs.map(_ * x0)\n        val x0 = xs.head\n        val xs = xs.tail\n\
    \        val ys = xs.map(_ * x0)\n        val x0 = xs.head\n        val xs = xs.tail\n\
    \        val ys = xs.map(_ * x0)\n        val x0 = xs.head\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi0p9rnpv.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mx0\e[0m = xs.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mx0 is already defined\
    \ as \e[33mvalue\e[0m \e[35mx0\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi0p9rnpv.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = xs.tail\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mxs is already defined\
    \ as \e[33mvalue\e[0m \e[35mxs\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi0p9rnpv.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mys\e[0m = xs.map(_ * x0)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mys is\
    \ already defined as \e[33mvalue\e[0m \e[35mys\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi0p9rnpv.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mx0\e[0m = xs.head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mx0 is already defined as \e[33mvalue\e[0m \e[35mx0\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi0p9rnpv.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = xs.tail\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mxs is already defined as \e[33mvalue\e\
    [0m \e[35mxs\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpi0p9rnpv.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e"
  stdout: ''
  timestamp: 1659794860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var d = 0\n        var x = 0\n        var y = 0\n\
    \        var z = 0\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n\
    \        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n\
    \        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n\
    \        var xi = 0\n        var yi = 0\n        var zi = 0\n        var xj =\
    \ 0\n        var yj = 0\n        var zj = 0\n        var xk = 0\n        var yk\
    \ = 0\n        var zk = 0\n        var xl = 0\n        var yl = 0\n        var\
    \ zl = 0\n        var xm = 0\n        var ym = 0\n        var zm = 0\n       \
    \ var xn = 0\n        var yn = 0\n        var zn = 0\n        var xo = 0\n   \
    \     var yo = 0\n        var zo = 0\n        var xp = 0\n        var yp = 0\n\
    \        var zp = 0\n        var xr = 0\n        var yr = 0\n        var zr =\
    \ 0\n        var xs = 0\n        var ys = 0\n        var zs = 0\n        var xu\
    \ = 0\n        var yu = 0\n        var zu = 0\n        var xi = 0\n        var\
    \ yi = 0\n        var zi = 0\n        var xj = 0\n        var yj = 0\n       \
    \ var zj = 0\n        var xk = 0\n        var yk = 0\n        var zk = 0\n   \
    \     var xl = 0\n        var yl = 0\n        var zl = 0\n        var xm = 0\n\
    \        var ym = 0\n        var zm = 0\n        var xn = 0\n        var yn =\
    \ 0\n        var zn = 0\n        var xo = 0\n        var yo = 0\n        var zo\
    \ = 0\n        var xp = 0\n        var yp = 0\n        var zp = 0\n        var\
    \ xr = 0\n        var yr = 0\n        var zr = 0\n        var xs = 0\n       \
    \ var ys = 0\n        var zs = 0\n        var xu = 0\n        var yu = 0\n   \
    \     var zu = 0\n        var xi = 0\n        var yi = 0\n        var zi = 0\n\
    \        var xj = 0\n        var yj = 0\n        var zj = 0\n        var xk =\
    \ 0\n        var yk = 0\n        var zk = 0\n        var xl = 0\n        var yl\
    \ = 0\n        var zl = 0\n        var xm = 0\n        var ym = 0\n        var\
    \ zm = 0\n        var xn = 0\n        var yn = 0\n        var zn = 0\n       \
    \ var xo = 0\n        var yo = 0\n        var zo = 0\n        var xp = 0\n   \
    \     var yp = 0\n        var zp = 0\n        var xr = 0\n        var yr = 0\n\
    \        var zr = 0\n        var xs = 0\n        var ys = 0\n        var zs =\
    \ 0\n        var xu = 0\n        var yu = 0\n        var zu = 0\n        var xi\
    \ = 0\n        var yi = 0\n        var \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpuhbg3yi_.scala:132:11 --------------------------\e\
    [0m\e[0m\n\e[31m132 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m    |\e[0m    \
    \       ^\e[0m\n\e[31m    |\e[0m           pattern expected\n\e[31m    |\e[0m\n\
    \e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuhbg3yi_.scala:64:12 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        \e[33mvar\e[0m \e[36mxi\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mxi is already defined\
    \ as \e[33mvariable\e[0m \e[35mxi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuhbg3yi_.scala:65:12 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        \e[33mvar\e[0m \e[36myi\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0myi is already defined\
    \ as \e[33mvariable\e[0m \e[35myi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuhbg3yi_.scala:66:12 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mvar\e[0m \e[36mzi\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mzi is already defined\
    \ as \e[33mvariable\e[0m \e[35mzi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuhbg3yi_.scala:67:12 ---------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m        \e[33mvar\e[0m \e[36mxj\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mxj is already defined\
    \ as \e[33mvariable\e[0m \e[35mxj\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuhbg3yi_.scala:68:12 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mvar\e[0m \e[36myj\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659794861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprgz1m89h.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi71hye8.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n\
    \        val d = 0L\n        val ds = new Array[Long](n)\n        val x = 0L\n\
    \        val xs = new Array[Long](n)\n        val x = 0L\n        val xs = new\
    \ Array[Long](n)\n        val x = 0L\n        val xs = new Array[Long](n)\n  \
    \      val x = 0L\n        val xs = new Array[Long](n)\n        val x = 0L\n \
    \       val xs = new Array[Long](n)\n        val x = 0L\n        val xs = new\
    \ Array[Long](n)\n        val x = 0L\n        val xs = new Array[Long](n)\n  \
    \      val x = 0L\n        val xs = new Array[Long](n)\n        val x = 0L\n \
    \       val xs = new Array[Long](n)\n        val x = 0L\n        val xs = new\
    \ Array[Long](n)\n        val x = 0L\n        val xs = new Array[Long](n)\n  \
    \      val x = 0L\n        val xs = new Array[Long](n)\n        val x = 0L\n \
    \       val xs = new Array[Long](n)\n        val x = 0L\n        val xs = new\
    \ Array[Long](n)\n        val x = 0L\n        val xs = new Array[Long](n)\n  \
    \      val x = 0L\n        val xs = new Array[Long](n)\n        val x = 0L\n \
    \       val xs = new Array[Long](n)\n        val x = 0L\n        val xs = new\
    \ Array[Long](n)\n        val x = 0L\n        val xs = new Array[Long](n)\n  \
    \      val x = 0L\n        val xs = new Array[Long](n)\n        val x = 0L\n \
    \       val xs = new Array[Long](n)\n        val x = 0L\n        val xs = new\
    \ Array[Long](n)\n        val x = 0L\n        val xs = new Array[Long](n)\n  \
    \      val x = 0L\n        val xs = new Array[Long](n)\n        val x = 0L\n \
    \       val xs = new Array[Long](n)\n        val x = 0L\n        val xs = new\
    \ Array[Long](n)\n        val x = 0L\n        val xs = new Array[Long](n)\n  \
    \      val x = 0L\n        val xs = new Array[Long](n)\n        val x = 0L\n \
    \       val xs = new Array[Long](n)\n        val x = 0L\n        val xs = new\
    \ Array[Long](n)\n\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdkr2m6q0.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mds is already defined as \e[33mvalue\e[0m \e[35mds\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpdkr2m6q0.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = \e[31m0L\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mx is already defined as \e[33mvalue\e\
    [0m \e[35mx\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpdkr2m6q0.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mxs is already defined as \e[33mvalue\e[0m \e[35mxs\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpdkr2m6q0.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = \e[31m0L\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mx is already defined as \e[33mvalue\e\
    [0m \e[35mx\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpdkr2m6q0.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mxs is already defined as \e[33mvalue\e[0m \e[35mxs\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of topleve"
  stdout: ''
  timestamp: 1659794860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var y = 0L\n\
    \        var z = 0L\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n\
    \        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n\
    \        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n\
    \        var xi = 0\n        var yi = 0\n        var zi = 0\n        var xi1 =\
    \ 0\n        var yi1 = 0\n        var zi1 = 0\n        var xi2 = 0\n        var\
    \ yi2 = 0\n        var zi2 = 0\n        var xi3 = 0\n        var yi3 = 0\n   \
    \     var zi3 = 0\n        var xi4 = 0\n        var yi4 = 0\n        var zi4 =\
    \ 0\n        var xi5 = 0\n        var yi5 = 0\n        var zi5 = 0\n        var\
    \ xi6 = 0\n        var yi6 = 0\n        var zi6 = 0\n        var xi7 = 0\n   \
    \     var yi7 = 0\n        var zi7 = 0\n        var xi8 = 0\n        var yi8 =\
    \ 0\n        var zi8 = 0\n        var xi9 = 0\n        var yi9 = 0\n        var\
    \ zi9 = 0\n        var xi10 = 0\n        var yi10 = 0\n        var zi10 = 0\n\
    \        var xi11 = 0\n        var yi11 = 0\n        var zi11 = 0\n        var\
    \ xi12 = 0\n        var yi12 = 0\n        var zi12 = 0\n        var xi13 = 0\n\
    \        var yi13 = 0\n        var zi13 = 0\n        var xi14 = 0\n        var\
    \ yi14 = 0\n        var zi14 = 0\n        var xi15 = 0\n        var yi15 = 0\n\
    \        var zi15 = 0\n        var xi16 = 0\n        var yi16 = 0\n        var\
    \ zi16 = 0\n        var xi17 = 0\n        var yi17 = 0\n        var zi17 = 0\n\
    \        var xi18 = 0\n        var yi18 = 0\n        var zi18 = 0\n        var\
    \ xi19 = 0\n        var yi19 = 0\n        var zi19 = 0\n        var xi20 = 0\n\
    \        var yi20 = 0\n        var zi20 = 0\n        var xi21 = 0\n        var\
    \ yi21 = 0\n        var zi21 = 0\n        var xi22 = 0\n        var yi22 = 0\n\
    \        var zi22 = 0\n        var xi23 = 0\n        var yi23 = 0\n        var\
    \ zi23 = 0\n        var xi24 = 0\n        var yi24 = 0\n        var zi24 = 0\n\
    \        var xi25 = 0\n        var yi25 = 0\n        var zi25 = 0\n        var\
    \ xi26 = 0\n        var yi26 = 0\n        var zi26 = 0\n        var xi27 = 0\n\
    \        var yi\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpemkwl9k6.scala:114:4 ---------------------------\e\
    [0m\e[0m\n\e[31m114 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpemkwl9k6.scala:114:5 --------------------\e[0m\e[0m\n\e[31m114 |\e[0m\
    \    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m    |\e[0m     Found:    Unit\n\
    \e[31m    |\e[0m     Required: List[Long]\n\e[31m    |\e[0m\n\e[31m    |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vqb6g0u.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vqb6g0u.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val x0 = xs.head\n      \
    \  val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 =\
    \ xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n     \
    \   val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp91awy2y0.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var xpow =\
    \ 0L\n        var xpow2 = 0L\n        var xpow3 = 0L\n        var xpow4 = 0L\n\
    \        var xpow5 = 0L\n        var xpow6 = 0L\n        var xpow7 = 0L\n    \
    \    var xpow8 = 0L\n        var xpow9 = 0L\n        var xpow10 = 0L\n       \
    \ var xpow11 = 0L\n        var xpow12 = 0L\n        var xpow13 = 0L\n        var\
    \ xpow14 = 0L\n        var xpow15 = 0L\n        var xpow16 = 0L\n        var xpow17\
    \ = 0L\n        var xpow18 = 0L\n        var xpow19 = 0L\n        var xpow20 =\
    \ 0L\n        var xpow21 = 0L\n        var xpow22 = 0L\n        var xpow23 = 0L\n\
    \        var xpow24 = 0L\n        var xpow25 = 0L\n        var xpow26 = 0L\n \
    \       var xpow27 = 0L\n        var xpow28 = 0L\n        var xpow29 = 0L\n  \
    \      var xpow30 = 0L\n        var xpow31 = 0L\n        var xpow32 = 0L\n   \
    \     var xpow33 = 0L\n        var xpow34 = 0L\n        var xpow35 = 0L\n    \
    \    var xpow36 = 0L\n        var xpow37 = 0L\n        var xpow38 = 0L\n     \
    \   var xpow39 = 0L\n        var xpow40 = 0L\n        var xpow41 = 0L\n      \
    \  var xpow42 = 0L\n        var xpow43 = 0L\n        var xpow44 = 0L\n       \
    \ var xpow45 = 0L\n        var xpow46 = 0L\n        var xpow47 = 0L\n        var\
    \ xpow48 = 0L\n        var xpow49 = 0L\n        var xpow50 = 0L\n        var xpow51\
    \ = 0L\n        var xpow52 = 0L\n        var xpow53 = 0L\n        var xpow54 =\
    \ 0L\n        var xpow55 = 0L\n        var xpow56 = 0L\n        var xpow57 = 0L\n\
    \        var xpow58 = 0L\n        var xpow59 = 0L\n        var xpow60 = 0L\n \
    \       var xpow61 = 0L\n        var xpow62 = 0L\n        var xpow63 = 0L\n  \
    \      var xpow64 = 0L\n        var xpow65 = 0L\n        var xpow66 = 0L\n   \
    \     var xpow67 = 0L\n        var xpow68 = 0L\n        var xpow69 = 0L\n    \
    \    var xpow70 = 0L\n        var xpow71 = 0L\n        var xpow72 = 0L\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy2y29v7s.scala:86:5\
    \ ---------------------\e[0m\e[0m\n\e[31m86 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var xd = 0L\n\
    \        var xd2 = 0L\n        var xd3 = 0L\n        var xd4 = 0L\n        var\
    \ xd5 = 0L\n        var xd6 = 0L\n        var xd7 = 0L\n        var xd8 = 0L\n\
    \        var xd9 = 0L\n        var xd10 = 0L\n        var xd11 = 0L\n        var\
    \ xd12 = 0L\n        var xd13 = 0L\n        var xd14 = 0L\n        var xd15 =\
    \ 0L\n        var xd16 = 0L\n        var xd17 = 0L\n        var xd18 = 0L\n  \
    \      var xd19 = 0L\n        var xd20 = 0L\n        var xd21 = 0L\n        var\
    \ xd22 = 0L\n        var xd23 = 0L\n        var xd24 = 0L\n        var xd25 =\
    \ 0L\n        var xd26 = 0L\n        var xd27 = 0L\n        var xd28 = 0L\n  \
    \      var xd29 = 0L\n        var xd30 = 0L\n        var xd31 = 0L\n        var\
    \ xd32 = 0L\n        var xd33 = 0L\n        var xd34 = 0L\n        var xd35 =\
    \ 0L\n        var xd36 = 0L\n        var xd37 = 0L\n        var xd38 = 0L\n  \
    \      var xd39 = 0L\n        var xd40 = 0L\n        var xd41 = 0L\n        var\
    \ xd42 = 0L\n        var xd43 = 0L\n        var xd44 = 0L\n        var xd45 =\
    \ 0L\n        var xd46 = 0L\n        var xd47 = 0L\n        var xd48 = 0L\n  \
    \      var xd49 = 0L\n        var xd50 = 0L\n        var xd51 = 0L\n        var\
    \ xd52 = 0L\n        var xd53 = 0L\n        var xd54 = 0L\n        var xd55 =\
    \ 0L\n        var xd56 = 0L\n        var xd57 = 0L\n        var xd58 = 0L\n  \
    \      var xd59 = 0L\n        var xd60 = 0L\n        var xd61 = 0L\n        var\
    \ xd62 = 0L\n        var xd63 = 0L\n        var xd64 = 0L\n        var xd65 =\
    \ 0L\n        var xd66 = 0L\n        var xd67 = 0L\n        var xd68 = 0L\n  \
    \      var xd69 = 0L\n        var xd70 = 0L\n        var xd71 = 0L\n        var\
    \ xd72 = 0L\n        var xd73 = 0L\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpar13oojq.scala:88:5\
    \ ---------------------\e[0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n\
    \        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n      \
    \  var xi = 0\n        var yi = 0\n        var xj = 0\n        var yj = 0\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        var n = 0\n  \
    \      var n1 = xs.size\n        var n2 = xs.tail.size\n        var n3 = xs.tail.tail.size\n\
    \        var n4 = xs.tail.tail.tail.size\n        var n5 = xs.tail.tail.tail.tail.size\n\
    \        var n6 = xs.tail.tail.tail.tail.tail.size\n        var n7 = xs.tail.tail.tail.tail.tail.tail.size\n\
    \        var n8 = xs.tail.tail.tail.tail.tail.tail.tail.size\n        var n9 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.size\n        var n10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n\
    \        var n11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n    \
    \    var n12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n   \
    \     var n13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n\
    \        var n14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n\
    \        var n15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n\
    \        var n16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n\
    \        var n17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n\
    \        var n18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n\
    \        var n19 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size\n\
    \        var n20 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqmdh6xgv.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpqmdh6xgv.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2pkxq74t.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val x0 = xs.head\n      \
    \  val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 =\
    \ xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n     \
    \   val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk9qfoy13.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp61qagf3c.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n      \
    \  val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val\
    \ x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 =\
    \ xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n\
    \        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n\
    \        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n\
    \        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n\
    \        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n\
    \        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n\
    \        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n\
    \        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n\
    \        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n\
    \        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n\
    \        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n\
    \        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n\
    \        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n\
    \        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n\
    \        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n\
    \        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n\
    \        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n\
    \        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2lfh_45t.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2lfh_45t.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkl1jjc6f.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi71hye8.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val result = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            result(i) = xs(i) * xs(i\
    \ + 1)\n            i += 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3zg4zhko.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        val x = new Array[Long](n)\n        val x0 = new Array[Long](n)\n   \
    \     val x1 = new Array[Long](n)\n        val x2 = new Array[Long](n)\n     \
    \   val x3 = new Array[Long](n)\n        val x4 = new Array[Long](n)\n       \
    \ val x5 = new Array[Long](n)\n        val x6 = new Array[Long](n)\n        val\
    \ x7 = new Array[Long](n)\n        val x8 = new Array[Long](n)\n        val x9\
    \ = new Array[Long](n)\n        val x10 = new Array[Long](n)\n        val x11\
    \ = new Array[Long](n)\n        val x12 = new Array[Long](n)\n        val x13\
    \ = new Array[Long](n)\n        val x14 = new Array[Long](n)\n        val x15\
    \ = new Array[Long](n)\n        val x16 = new Array[Long](n)\n        val x17\
    \ = new Array[Long](n)\n        val x18 = new Array[Long](n)\n        val x19\
    \ = new Array[Long](n)\n        val x20 = new Array[Long](n)\n        val x21\
    \ = new Array[Long](n)\n        val x22 = new Array[Long](n)\n        val x23\
    \ = new Array[Long](n)\n        val x24 = new Array[Long](n)\n        val x25\
    \ = new Array[Long](n)\n        val x26 = new Array[Long](n)\n        val x27\
    \ = new Array[Long](n)\n        val x28 = new Array[Long](n)\n        val x29\
    \ = new Array[Long](n)\n        val x30 = new Array[Long](n)\n        val x31\
    \ = new Array[Long](n)\n        val x32 = new Array[Long](n)\n        val x33\
    \ = new Array[Long](n)\n        val x34 = new Array[Long](n)\n        val x35\
    \ = new Array[Long](n)\n        val x36 = new Array[Long](n)\n        val x37\
    \ = new Array[Long](n)\n        val x38 = new Array[Long](n)\n        val x39\
    \ = new Array[Long](n)\n        val x40 = new Array[Long](n)\n        val x41\
    \ = new Array[Long](n)\n        val x42 = new Array[Long](n)\n        val x43\
    \ = new Array[Long](n)\n        val x44 = new \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7lvz9dmk.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp7lvz9dmk.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val xs = xs.toList\n        val n = xs.size\n    \
    \    val d = new Array[Long](n + 1)\n        val dd = new Array[Long](n + 1)\n\
    \        val ddd = new Array[Long](n + 1)\n        val dd = new Array[Long](n\
    \ + 1)\n        val ddd = new Array[Long](n + 1)\n        val d = new Array[Long](n\
    \ + 1)\n        val dd = new Array[Long](n + 1)\n        val ddd = new Array[Long](n\
    \ + 1)\n        val d = new Array[Long](n + 1)\n        val dd = new Array[Long](n\
    \ + 1)\n        val ddd = new Array[Long](n + 1)\n        val d = new Array[Long](n\
    \ + 1)\n        val dd = new Array[Long](n + 1)\n        val ddd = new Array[Long](n\
    \ + 1)\n        val d = new Array[Long](n + 1)\n        val dd = new Array[Long](n\
    \ + 1)\n        val ddd = new Array[Long](n + 1)\n        val d = new Array[Long](n\
    \ + 1)\n        val dd = new Array[Long](n + 1)\n        val ddd = new Array[Long](n\
    \ + 1)\n        val d = new Array[Long](n + 1)\n        val dd = new Array[Long](n\
    \ + 1)\n        val ddd = new Array[Long](n + 1)\n        val d = new Array[Long](n\
    \ + 1)\n        val dd = new Array[Long](n + 1)\n        val ddd = new Array[Long](n\
    \ + 1)\n        val d = new Array[Long](n + 1)\n        val dd = new Array[Long](n\
    \ + 1)\n        val ddd = new Array[Long](n + 1)\n        val d = new Array[Long](n\
    \ + 1)\n        val dd = new Array[Long](n + 1)\n        val ddd = new Array[Long](n\
    \ + 1)\n        val d = new Array[Long](n + 1)\n        val dd = new Array[Long](n\
    \ + 1)\n        val ddd = new Array[Long](n + 1)\n        val d = new Array[Long](n\
    \ + 1)\n        val dd = new Array[Long](n + 1)\n        val ddd = new Array[Long](n\
    \ + 1)\n        val d = new Array[Long](n + 1)\n        val dd = new Array[Long](n\
    \ + 1)\n        val ddd = new Array[Long](n + 1)\n        val d = new Array[Long](n\
    \ + 1)\n        val dd = new Array[\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbc_weqmx.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbc_weqmx.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mdd\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdd is already defined as \e[33mvalue\e[0m \e[35mdd\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbc_weqmx.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mddd\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mddd is already defined as \e[33mvalue\e[0m \e[35mddd\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbc_weqmx.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36md\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0md is already defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbc_weqmx.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mdd\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdd is already defined as \e[33mvalue\e[0m \e[35mdd\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpb"
  stdout: ''
  timestamp: 1659794861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val result = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            result(i) = xs(i) - xs(i\
    \ - 1)\n            i += 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpspbxslyq.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n\
    \        val d = 0L\n        for(i <- 0 until n) {\n            val x = xs(i)\n\
    \            val d = d * x\n            ds(i) = d\n        }\n        ds\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpf0hcuior.scala:17:20 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36md\e[0m = d * x\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Recursive\
    \ \e[33mvalue\e[0m \e[35md\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpf0hcuior.scala:20:8 ---------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    (ds : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val x0 = xs(0)\n        val\
    \ x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 =\
    \ xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n\
    \        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n  \
    \      val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n\
    \        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n\
    \        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n\
    \        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n\
    \        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n\
    \        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n\
    \        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n\
    \        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n\
    \        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n\
    \        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n\
    \        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n\
    \        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n\
    \        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n\
    \        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n\
    \        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n\
    \        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n\
    \        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpes0ba4ti.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpes0ba4ti.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vqb6g0u.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vqb6g0u.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val x = scala.math.pow(xs.last,\
    \ n - 1)\n        val y = scala.math.pow(xs.last, n - 2)\n        val z = scala.math.pow(xs.last,\
    \ n - 3)\n        val xs = xs.drop(n - 1)\n        val ys = xs.map(_ * x)\n  \
    \      val zs = xs.map(_ * x * x)\n        val xs2 = xs.drop(n - 2)\n        val\
    \ ys2 = xs2.map(_ * y)\n        val zs2 = xs2.map(_ * y * y)\n        val xs3\
    \ = xs.drop(n - 3)\n        val ys3 = xs3.map(_ * z)\n        val zs3 = xs3.map(_\
    \ * z * z)\n        val xs4 = xs.drop(n - 4)\n        val ys4 = xs4.map(_ * x\
    \ * y)\n        val zs4 = xs4.map(_ * x * y * y)\n        val xs5 = xs.drop(n\
    \ - 5)\n        val ys5 = xs5.map(_ * x * z)\n        val zs5 = xs5.map(_ * x\
    \ * z * z)\n        val xs6 = xs.drop(n - 6)\n        val ys6 = xs6.map(_ * y\
    \ * z)\n        val zs6 = xs6.map(_ * y * z * z)\n        val xs7 = xs.drop(n\
    \ - 7)\n        val ys7 = xs7.map(_ * z * z)\n        val zs7 = xs7.map(_ * z\
    \ * z * z)\n        val xs8 = xs.drop(n - 8)\n        val ys8 = xs8.map(_ * x\
    \ * y * z)\n        val zs8 = xs8.map(_ * x * y * z * z)\n        val xs9 = xs.drop(n\
    \ - 9)\n        val ys9 = xs9.map(_ * x * y * z * z)\n        val zs9 = xs9.map(_\
    \ * x * y * z * z * z)\n        val xs10 = xs.drop(n - 10)\n        val ys10 =\
    \ xs10.map(_ * x * y * z * z * z)\n        val zs10 = xs10.map(_ * x * y * z *\
    \ z * z * z)\n        val xs11 = xs.drop(n - 11)\n        val ys11 = xs11.map(_\
    \ * x * y * z * z * z * z)\n        val zs11 = xs11.map(_ * x * y * z * z * z\
    \ * z * z)\n        val xs12 = xs.drop(n - 12)\n        val ys12\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf6ecatlh.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpf6ecatlh.scala:16:17\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mxs\e[0m = xs.drop(n - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \      ^\e[0m\n\e[31m   |\e[0m                 Recursive \e[33mvalue\e[0m \e[35mxs\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf6ecatlh.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf2814ut4.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ds = new ListBuffer[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            val x = xs(i)\n     \
    \       val y = xs(i + 1)\n            ds.add(y * x)\n            i += 2\n   \
    \     }\n        ds.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8oqbnk51.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mListBuffer\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m           \
    \                           ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mListBuffer\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659794858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var d = 0L\n        var n = 0L\n        var d\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdnqi18tb.scala:115:4 ---------------------------\e\
    [0m\e[0m\n\e[31m115 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdnqi18tb.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m\
    \ \e[36md\e[0m = \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0md is already defined as \e[33mvariable\e[0m \e[35md\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpdnqi18tb.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = \e[31m0L\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as \e[33mvariable\e\
    [0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpdnqi18tb.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36md\e[0m = \e[31m0L\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0md is already defined\
    \ as \e[33mvariable\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdnqi18tb.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = \e[31m0L\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvariable\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdnqi18tb.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36md\e[0m = \e[31m0L\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0md is already defined\
    \ as \e[33mvariable\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods m"
  stdout: ''
  timestamp: 1659794868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptgxsey66.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var xd = 0L\n\
    \        var xd2 = 0L\n        var xd3 = 0L\n        var xd4 = 0L\n        var\
    \ xd5 = 0L\n        var xd6 = 0L\n        var xd7 = 0L\n        var xd8 = 0L\n\
    \        var xd9 = 0L\n        var xd10 = 0L\n        var xd11 = 0L\n        var\
    \ xd12 = 0L\n        var xd13 = 0L\n        var xd14 = 0L\n        var xd15 =\
    \ 0L\n        var xd16 = 0L\n        var xd17 = 0L\n        var xd18 = 0L\n  \
    \      var xd19 = 0L\n        var xd20 = 0L\n        var xd21 = 0L\n        var\
    \ xd22 = 0L\n        var xd23 = 0L\n        var xd24 = 0L\n        var xd25 =\
    \ 0L\n        var xd26 = 0L\n        var xd27 = 0L\n        var xd28 = 0L\n  \
    \      var xd29 = 0L\n        var xd30 = 0L\n        var xd31 = 0L\n        var\
    \ xd32 = 0L\n        var xd33 = 0L\n        var xd34 = 0L\n        var xd35 =\
    \ 0L\n        var xd36 = 0L\n        var xd37 = 0L\n        var xd38 = 0L\n  \
    \      var xd39 = 0L\n        var xd40 = 0L\n        var xd41 = 0L\n        var\
    \ xd42 = 0L\n        var xd43 = 0L\n        var xd44 = 0L\n        var xd45 =\
    \ 0L\n        var xd46 = 0L\n        var xd47 = 0L\n        var xd48 = 0L\n  \
    \      var xd49 = 0L\n        var xd50 = 0L\n        var xd51 = 0L\n        var\
    \ xd52 = 0L\n        var xd53 = 0L\n        var xd54 = 0L\n        var xd55 =\
    \ 0L\n        var xd56 = 0L\n        var xd57 = 0L\n        var xd58 = 0L\n  \
    \      var xd59 = 0L\n        var xd60 = 0L\n        var xd61 = 0L\n        var\
    \ xd62 = 0L\n        var xd63 = 0L\n        var xd64 = 0L\n        var xd65 =\
    \ 0L\n        var xd66 = 0L\n        var xd67 = 0L\n        var xd68 = 0L\n  \
    \      var xd69 = 0L\n        var xd70 = 0L\n        var xd71 = 0L\n        var\
    \ xd72 = 0L\n        var xd73 = 0L\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpar13oojq.scala:88:5\
    \ ---------------------\e[0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.foldLeft(x0)((acc,\
    \ x) => acc * x)\n        xs.tail.foldLeft(x1)((acc, x) => acc * x)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkexxu6t6.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        xs.tail.foldLeft(x1)((\e\
    [36macc\e[0m, \e[36mx\e[0m) => acc * x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required: \e\
    [1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        val x = new Array[Long](n)\n        val x0 = new Array[Long](n)\n   \
    \     val xs = new Array[Long](n + 1)\n        xs(0) = 1\n        xs(1) = xs(0)\n\
    \        xs(2) = xs(1) * x(0)\n        xs(3) = xs(2) * x(1)\n        xs(4) = xs(3)\
    \ * x(2)\n        xs(5) = xs(4) * x(3)\n        val i = 1\n        while (i <=\
    \ n) {\n            xs(i + 1) = xs(i) * x(i)\n            i += 1\n        }\n\
    \        val j = 0\n        while (j <= n) {\n            d(j) = (xs(j + 2) -\
    \ xs(j + 1) * xs(j)) / xs(j)\n            j += 1\n        }\n        d(0)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8v0zw4d4.scala:16:33 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \            Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8v0zw4d4.scala:26:14 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean i.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8v0zw4d4.scala:31:14\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m            j += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8v0zw4d4.scala:33:9 ---------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        d(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e\
    [0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            val x = xs(i)\n     \
    \       val d = 1\n            while (i < n && xs(i) == x) {\n               \
    \ d *= xs(i + 1)\n                i += 1\n            }\n            ds(i) = d\n\
    \            i += 1\n        }\n        ds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprumowc6l.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                d *= xs(i + \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value *= is\
    \ not a member of Int - did you mean d.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprumowc6l.scala:25:8 ---------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vqb6g0u.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vqb6g0u.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi71hye8.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n\
    \        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var dpy : List[Long] = Nil\n        var\
    \ dpp: List[Long] = Nil\n        var dppy : List[Long] = Nil\n        var dppp\
    \ : List[Long] = Nil\n        var dpppp : List[Long] = Nil\n        var dppppp\
    \ : List[Long] = Nil\n        var dpppppp : List[Long] = Nil\n        var dppppppp\
    \ : List[Long] = Nil\n        var dpppppppp : List[Long] = Nil\n        var dppppppppp\
    \ : List[Long] = Nil\n        var dpppppppppp : List[Long] = Nil\n        var\
    \ dppppppppppp : List[Long] = Nil\n        var dpppppppppppp : List[Long] = Nil\n\
    \        var dppppppppppppp : List[Long] = Nil\n        var dpppppppppppppp :\
    \ List[Long] = Nil\n        var dppppppppppppppp : List[Long] = Nil\n        var\
    \ dpppppppppppppppp : List[Long] = Nil\n        var dppppppppppppppppp : List[Long]\
    \ = Nil\n        var dpppppppppppppppppp : List[Long] = Nil\n        var dpppppppppppppppppp\
    \ : List[Long] = Nil\n        var dppppppppppppppppppp : List[Long] = Nil\n  \
    \      var dppppppppppppppppppp : List[Long] = Nil\n        var dpppppppppppppppppppp\
    \ : List[Long] = Nil\n        var dppppppppppppppppppppp : List[Long] = Nil\n\
    \        var dppppppppppppppppppppp : List[Long] = Nil\n        var dpppppppppppppppppppppp\
    \ : List[Long] = Nil\n        var dppppppppppppppppppppppp : List[Long] = Nil\n\
    \        var dppppppppppppppppppppppp : List[Long] = Nil\n        var dpppppppppppppppppppppppp\
    \ : List[Long] = Nil\n        var dppppppppppppppppppppppppp : List[Long] = Nil\n\
    \        var dpppppppp\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqc9p8c70.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqc9p8c70.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdpppppppppppppppppp\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mdpppppppppppppppppp is already defined as \e[33mvariable\e[0m \e\
    [35mdpppppppppppppppppp\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqc9p8c70.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mvar\e[0m \e[36mdppppppppppppppppppp\e[0m\
    \ : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdppppppppppppppppppp is already defined as \e[33mvariable\e\
    [0m \e[35mdppppppppppppppppppp\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqc9p8c70.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mvar\e[0m \e[36mdppppppppppppppppppppp\e\
    [0m : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdppppppppppppppppppppp is already defined as \e[33mvariable\e\
    [0m \e[35mdppppppppppppppppppppp\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqc9p8c70.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mvar\e[0m \e[36mdppppppppppppppppppppppp\e\
    [0m : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdppppppppppppppppppppppp is already defined as \e[33mvariable\e\
    [0m \e[35m"
  stdout: ''
  timestamp: 1659794871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi71hye8.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val x0 = xs.head\n      \
    \  val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 =\
    \ xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n     \
    \   val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr46po9f3.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val xs_size = xs.size\n        val result = new Array[Long](xs_size)\n\
    \        var i = 0\n        while (i < xs_size) {\n            result(i) = xs(i)\
    \ * xs_size - xs(i - 1)\n            i += 1\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz_xncdcf.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n\
    \ + 1)\n        d(0) = 1\n        for (i<-n;i>=0;i--) d(i) = xs(i) * d(i-1)\n\
    \        d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9h87ss0m.scala:15:22 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i<-n;i>=\e[31m0\e[0m;i--) d(i)\
    \ = xs(i) * d(i-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                      ^\e\
    [0m\n\e[31m   |\e[0m                      '<-' expected, but ';' found\n\e[31m\e\
    [31m-- [E032] Syntax Error: /tmp/tmp9h87ss0m.scala:15:26 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i<-n;i>=\e[31m0\e[0m;i--) d(i)\
    \ = xs(i) * d(i-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \ ^\e[0m\n\e[31m   |\e[0m                          pattern expected\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9h87ss0m.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i<-n;i>=\e[31m0\e[0m;i--) d(i)\
    \ = xs(i) * d(i-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e\
    [31m   |\e[0m                value foreach is not a member of Int\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9h87ss0m.scala:16:8 ---------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        d\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    (d : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n\
    \        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var i : Int = 0\n        var j : Int = 0\n\
    \        var k : Int = 0\n        var l : Int = 0\n        var m : Int = 0\n \
    \       var n : Int = 0\n        var o : Int = 0\n        var p : Int = 0\n  \
    \      var q : Int = 0\n        var r : Int = 0\n        var s : Int = 0\n   \
    \     var t : Int = 0\n        var u : Int = 0\n        var v : Int = 0\n    \
    \    var w : Int = 0\n        var x : Long = 0L\n        var y : Long = 0L\n \
    \       var z : Long = 0L\n        var a : Long = 0L\n        var b : Long = 0L\n\
    \        var c : Long = 0L\n        var d : Long = 0L\n        var e : Long =\
    \ 0L\n        var f : Long = 0L\n        var g : Long = 0L\n        var h : Long\
    \ = 0L\n        var i : Long = 0L\n        var j : Long = 0L\n        var k :\
    \ Long = 0L\n        var l : Long = 0L\n        var m : Long = 0L\n        var\
    \ n : Long = 0L\n        var o : Long = 0L\n        var p : Long = 0L\n      \
    \  var q : Long = 0L\n        var r : Long = 0L\n        var s : Long = 0L\n \
    \       var t : Long = 0L\n        var u : Long = 0L\n        var v : Long = 0L\n\
    \        var w : Long = 0L\n        var x : Long = 0L\n        var y : Long =\
    \ 0L\n        var z : Long = 0L\n        var a : Long = 0L\n        var b : Long\
    \ = 0L\n        var c : Long = 0L\n        var d : Long = 0L\n        var e :\
    \ Long = 0L\n        var f : Long = 0L\n        var g : Long = 0L\n        var\
    \ h : Long = 0L\n        var i : Long = 0L\n        var j : Long = 0L\n      \
    \  var k : Long = 0L\n        var l : Long = 0L\n        var m : Long = 0L\n \
    \       var n : Long = 0L\n        var o : Long = 0L\n        var p : Long = 0L\n\
    \        var q : Long = 0L\n        var r : Long = 0L\n        var s : Long =\
    \ 0L\n        var t : Long = 0L\n        var u : Long = 0L\n        var v : Long\
    \ = 0L\n        var w : Long = 0L\n        var x : Long = 0L\n        var y :\
    \ Long = 0L\n        var z : Long = 0L\n        var a : Long = 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxzdfc77v.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m : \e[35mLong\e[0m\
    \ = \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mx is already defined as \e[33mvariable\e[0m \e[35mx\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxzdfc77v.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mvar\e[0m\
    \ \e[36my\e[0m : \e[35mLong\e[0m = \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0my is already defined as \e[33mvariable\e\
    [0m \e[35my\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpxzdfc77v.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mvar\e[0m \e[36md\e[0m : \e[35mLong\e[0m\
    \ = \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0md is already defined as \e[33mvariable\e[0m \e[35md\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxzdfc77v.scala:44:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mi\e[0m : \e[35mLong\e[0m = \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined as \e[33mvariable\e\
    [0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpxzdfc77v.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mvar\e[0m \e[36mj\e[0m : \e[35mLong\e[0m\
    \ = \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mj is already defined as \e[33mvariable\e[0m \e[35mj\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161"
  stdout: ''
  timestamp: 1659794872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprgz1m89h.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpys7sq6i_.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n\
    \        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dp\
    \ : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dp : List[Long]\
    \ = Nil\n        var dp : List[Long] = Nil\n        var dp : List[Long] = Nil\n\
    \        var dp : List[Long] = Nil\n        var dp : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dp\
    \ : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dp : List[Long]\
    \ = Nil\n        var dp : List[Long] = Nil\n        var dp : List[Long] = Nil\n\
    \        var dp : List[Long] = Nil\n        var dp : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dp\
    \ : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dp : List[Long]\
    \ = Nil\n        var dp : List[Long] = Nil\n        var dp : List[Long] = Nil\n\
    \        var dp : List[Long] = Nil\n        var dp : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dp\
    \ : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dp : List[Long]\
    \ = Nil\n        var dp : List[Long] = Nil\n        var dp : List[Long] = Nil\n\
    \        var dp : List[Long] = Nil\n        var dp : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dp\
    \ : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dp : List[Long]\
    \ = Nil\n        var dp : List[Long] = Nil\n        var dp : List[Long] = Nil\n\
    \        var dp : List[Long] = Nil\n        var dp : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dp\
    \ : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dp : List[Long]\
    \ = Nil\n        var dp : List[Long] = Nil\n        var dp : List[Long] = Nil\n\
    \        var dp : List[Long] = Nil\n        var dp \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqr5suni_.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqr5suni_.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdp\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdp is already defined\
    \ as \e[33mvariable\e[0m \e[35mdp\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqr5suni_.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mdp\e[0m : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdp is already defined as \e[33mvariable\e[0m \e[35mdp\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqr5suni_.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mvar\e[0m \e[36mdp\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]\
    \ = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdp is already defined as \e[33mvariable\e[0m \e[35mdp\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqr5suni_.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdp\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdp is already defined\
    \ as \e[33mvariable\e[0m \e[35mdp\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqr5suni_.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mdp\e[0m : \e[35mList\e[0m["
  stdout: ''
  timestamp: 1659794872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi71hye8.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprgz1m89h.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n\
    \ + 1)\n        ds(0) = 1\n        for (i<-n;i>=0;i--)\n            ds(i+1) =\
    \ ds(i) * xs(i)\n        ds\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9z0082v2.scala:15:22 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i<-n;i>=\e[31m0\e[0m;i--)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         '<-' expected, but ';' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp9z0082v2.scala:15:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m\
    \ (i<-n;i>=\e[31m0\e[0m;i--)\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          pattern expected\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp9z0082v2.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i<-n;i>=\e[31m0\e[0m;i--)\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                value\
    \ foreach is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9z0082v2.scala:17:8\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi71hye8.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.foldLeft(x0)((acc,\
    \ x) => acc * x)\n        List(x1 - x0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6rnqax97.scala:17)\n\tat Problem.main(tmp6rnqax97.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) / xs(n -\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9tygb43d.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail.tail.tail\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5a0145f.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        val x = new Array[Long](n)\n        val x0 = xs.head\n        val x1\
    \ = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7nfp1meo.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vqb6g0u.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vqb6g0u.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n\
    \ + 1)\n        ds(0) = 1\n        for (i<-n;i>=0;i--) ds(i+1) = ds(i) * xs(i)\
    \ / ds(i-1)\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3r3tc0xg.scala:15:22 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i<-n;i>=\e[31m0\e[0m;i--) ds(i+\e\
    [31m1\e[0m) = ds(i) * xs(i) / ds(i-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                ^\e[0m\n\e[31m   |\e[0m                      '<-' expected, but\
    \ ';' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp3r3tc0xg.scala:15:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m\
    \ (i<-n;i>=\e[31m0\e[0m;i--) ds(i+\e[31m1\e[0m) = ds(i) * xs(i) / ds(i-\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m \
    \                         pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp3r3tc0xg.scala:15:16 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i<-n;i>=\e[31m0\e[0m;i--) ds(i+\e\
    [31m1\e[0m) = ds(i) * xs(i) / ds(i-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \          ^\e[0m\n\e[31m   |\e[0m                value foreach is not a member\
    \ of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3r3tc0xg.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n      \
    \  val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val\
    \ x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 =\
    \ xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n\
    \        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n\
    \        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n\
    \        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n\
    \        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n\
    \        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n\
    \        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n\
    \        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n\
    \        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n\
    \        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n\
    \        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n\
    \        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n\
    \        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n\
    \        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n\
    \        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n\
    \        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n\
    \        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n\
    \        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2lfh_45t.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2lfh_45t.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val dx = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            dx(i) = xs(i) / xs(i\
    \ + 1)\n            i += 1\n        }\n        dx\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp301_sqcb.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        dx\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (dx : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptgxsey66.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val x0 = xs.head\n      \
    \  val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 =\
    \ xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n     \
    \   val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr46po9f3.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x = scala.math.pow(xs.last,\
    \ n - 1)\n        val y = scala.math.pow(xs.last, n - 2)\n        val z = scala.math.pow(xs.last,\
    \ n - 3)\n        val result = new Array[Long](n)\n        val temp = new Array[Long](n)\n\
    \        val temp2 = new Array[Long](n)\n        val temp3 = new Array[Long](n)\n\
    \        val temp4 = new Array[Long](n)\n        val temp5 = new Array[Long](n)\n\
    \        val temp6 = new Array[Long](n)\n        val temp7 = new Array[Long](n)\n\
    \        val temp8 = new Array[Long](n)\n        val temp9 = new Array[Long](n)\n\
    \        val temp10 = new Array[Long](n)\n        val temp11 = new Array[Long](n)\n\
    \        val temp12 = new Array[Long](n)\n        val temp13 = new Array[Long](n)\n\
    \        val temp14 = new Array[Long](n)\n        val temp15 = new Array[Long](n)\n\
    \        val temp16 = new Array[Long](n)\n        val temp17 = new Array[Long](n)\n\
    \        val temp18 = new Array[Long](n)\n        val temp19 = new Array[Long](n)\n\
    \        val temp20 = new Array[Long](n)\n        val temp21 = new Array[Long](n)\n\
    \        val temp22 = new Array[Long](n)\n        val temp23 = new Array[Long](n)\n\
    \        val temp24 = new Array[Long](n)\n        val temp25 = new Array[Long](n)\n\
    \        val temp26 = new Array[Long](n)\n        val temp27 = new Array[Long](n)\n\
    \        val temp28 = new Array[Long](n)\n        val temp29 = new Array[Long](n)\n\
    \        val temp30 = new Array[Long](n)\n        val temp31 = new Array[Long](n)\n\
    \        val temp32 = new Array[Long](n)\n        val temp33 = new Array[Long](n)\n\
    \        val temp34 = new Array[Long](n)\n        val temp35 = new Array[Long](n)\n\
    \        val temp36 = new Array[Long](n)\n        val temp37 = new Array[Long](n)\n\
    \        val temp38 = new Array[Long](n)\n        val temp39 = new Array[Long](n)\n\
    \        val temp40 = new Array[Long](n)\n        val temp41 = new Array[Long](n)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp27_c7n_f.scala:59:5\
    \ ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val x0 = xs(0)\n        val\
    \ x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 =\
    \ xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n\
    \        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n  \
    \      val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n\
    \        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n\
    \        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n\
    \        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n\
    \        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n\
    \        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n\
    \        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n\
    \        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n\
    \        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n\
    \        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n\
    \        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n\
    \        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n\
    \        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n\
    \        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n\
    \        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n\
    \        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n\
    \        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpes0ba4ti.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpes0ba4ti.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val xs1 = xs.toList\n        val xs2 = xs1 :+ 0L\n\
    \        val xs3 = (xs2(0) + xs2(1)) * xs2\n        val xs4 = (xs3(0) + xs3(1))\
    \ * xs3\n        val xs5 = (xs4(0) + xs4(1)) * xs4\n        val xs6 = (xs5(0)\
    \ + xs5(1)) * xs5\n        val xs7 = (xs6(0) + xs6(1)) * xs6\n        val xs8\
    \ = (xs7(0) + xs7(1)) * xs7\n        val xs9 = (xs8(0) + xs8(1)) * xs8\n     \
    \   val xs10 = (xs9(0) + xs9(1)) * xs9\n        val xs11 = (xs10(0) + xs10(1))\
    \ * xs10\n        val xs12 = (xs11(0) + xs11(1)) * xs11\n        val xs13 = (xs12(0)\
    \ + xs12(1)) * xs12\n        val xs14 = (xs13(0) + xs13(1)) * xs13\n        val\
    \ xs15 = (xs14(0) + xs14(1)) * xs14\n        val xs16 = (xs15(0) + xs15(1)) *\
    \ xs15\n        val xs17 = (xs16(0) + xs16(1)) * xs16\n        val xs18 = (xs17(0)\
    \ + xs17(1)) * xs17\n        val xs19 = (xs18(0) + xs18(1)) * xs18\n        val\
    \ xs20 = (xs19(0) + xs19(1)) * xs19\n        val xs21 = (xs20(0) + xs20(1)) *\
    \ xs20\n        val xs22 = (xs2(0) + xs2(1))\n        val xs23 = (xs2(0) + xs2(1))\n\
    \        val xs24 = (xs2(0) + xs2(1))\n        val xs25 = (xs2(0) + xs2(1))\n\
    \        val xs26 = (xs2(0) + xs2(1))\n        val xs27 = (xs2(0) + xs2(1))\n\
    \        val xs28 = (xs2(0) + xs2(1))\n        val xs29 = (xs2(0) + xs2(1))\n\
    \        val xs30 = (xs2(0) + xs2(1))\n        val xs31 = (xs2(0) + xs2(1))\n\
    \        val xs32 = (xs2(0) + xs2(1))\n        val xs33 = (xs2(0) + xs2(1))\n\
    \        val xs34 = (xs2(0) + xs2(1))\n        val xs35 = (xs2(0) + xs2(1))\n\
    \        val xs36 = (\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps5a00xsi.scala:47:20 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mxs36\e[0m = (\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmps5a00xsi.scala:14:36 -----------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mxs3\e[0m = (xs2(\e[31m0\e[0m) + xs2(\e[31m1\e\
    [0m)) * xs2\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m*\e\
    [0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\
    \e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e\
    [0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments\
    \ ((xs2 : List[Long]))\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps5a00xsi.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6b3glew1.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val xs = xs.toList\n        val n = xs.length\n  \
    \      val d = new Array[Long](n + 1)\n        val dd = new Array[Long](n + 1)\n\
    \        val ddd = new Array[Long](n + 1)\n        val x = new Array[Long](n +\
    \ 1)\n        val x2 = new Array[Long](n + 1)\n        val x3 = new Array[Long](n\
    \ + 1)\n        val x4 = new Array[Long](n + 1)\n        val x5 = new Array[Long](n\
    \ + 1)\n        val x6 = new Array[Long](n + 1)\n        val x7 = new Array[Long](n\
    \ + 1)\n        val x8 = new Array[Long](n + 1)\n        val x9 = new Array[Long](n\
    \ + 1)\n        val x10 = new Array[Long](n + 1)\n        val x11 = new Array[Long](n\
    \ + 1)\n        val x12 = new Array[Long](n + 1)\n        val x13 = new Array[Long](n\
    \ + 1)\n        val x14 = new Array[Long](n + 1)\n        val x15 = new Array[Long](n\
    \ + 1)\n        val x16 = new Array[Long](n + 1)\n        val x17 = new Array[Long](n\
    \ + 1)\n        val x18 = new Array[Long](n + 1)\n        val x19 = new Array[Long](n\
    \ + 1)\n        val x20 = new Array[Long](n + 1)\n        val x21 = new Array[Long](n\
    \ + 1)\n        val x22 = new Array[Long](n + 1)\n        val x23 = new Array[Long](n\
    \ + 1)\n        val x24 = new Array[Long](n + 1)\n        val x25 = new Array[Long](n\
    \ + 1)\n        val x26 = new Array[Long](n + 1)\n        val x27 = new Array[Long](n\
    \ + 1)\n        val x28 = new Array[Long](n + 1)\n        val x29 = new Array[Long](n\
    \ + 1)\n        val x30 = new Array[Long](n + 1)\n        val x31 = new Array[Long](n\
    \ + 1)\n        val x32 = new Array[Long](n + 1)\n        val x33 = new Array[Long](n\
    \ + 1)\n        val x34 = new Array[Long](n + 1)\n        val x35 = new Array[Long](n\
    \ + 1)\n        val x36 = new Array[Long](n + 1)\n        val x37 = new Array[Long](n\
    \ + 1)\n        val x38 = new Array[Long](n + 1)\n        val x39 = new Array[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxfwtumny.scala:12:17 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = xs.toList\n\e\
    [31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mxs\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpxfwtumny.scala:55:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \e[36mx39\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter _length of \e[33mconstructor\e\
    [0m \e[35mArray\e[0m in \e[33mclass\e[0m \e[35mArray\e[0m: (_length: Int): Array[Long]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxfwtumny.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var y = 0L\n\
    \        var z = 0L\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        var n = 0\n        var n1 = xs.size\n        var n2 = n1 - 1\n      \
    \  var n3 = n2 - 1\n        var n4 = n3 - 1\n        var n5 = n4 - 1\n       \
    \ var n6 = n5 - 1\n        var n7 = n6 - 1\n        var n8 = n7 - 1\n        var\
    \ n9 = n8 - 1\n        var n10 = n9 - 1\n        var n11 = n10 - 1\n        var\
    \ n12 = n11 - 1\n        var n13 = n12 - 1\n        var n14 = n13 - 1\n      \
    \  var n15 = n14 - 1\n        var n16 = n15 - 1\n        var n17 = n16 - 1\n \
    \       var n18 = n17 - 1\n        var n19 = n18 - 1\n        var n20 = n19 -\
    \ 1\n        var n21 = n20 - 1\n        var n22 = n21 - 1\n        var n23 = n22\
    \ - 1\n        var n24 = n23 - 1\n        var n25 = n24 - 1\n        var n26 =\
    \ n25 - 1\n        var n27 = n26 - 1\n        var n28 = n27 - 1\n        var n29\
    \ = n28 - 1\n        var n30 = n29 - 1\n        var n31 = n30 - 1\n        var\
    \ n32 = n31 - 1\n        var n33 = n32 - 1\n        var n34 = n33 - 1\n      \
    \  var n35 = n34 - 1\n        var n36 = n35 - 1\n        var n37 = n36 - 1\n \
    \       var n38 = n37 - 1\n        var n39 = n38 - 1\n        var n40 = n39 -\
    \ 1\n        var n41 = n40 - 1\n        var n42 = n41 - 1\n        var n43 = n42\
    \ - 1\n        var n44 = n43 - 1\n        var n45 = n44 - 1\n        var n46 =\
    \ n45 - 1\n        var n47 = n46 - 1\n        var n48 = n47 - 1\n        var n49\
    \ = n48 - 1\n        var n50 = n49 - 1\n        var n51 = n50 - 1\n        var\
    \ n52 = n51 - 1\n        var n53 = n52 - 1\n        var n54 = n53 - 1\n      \
    \  var n55 = n54 - 1\n        var n56 = n55 - 1\n        var n57 = n56 - 1\n \
    \       var n58 = n57 - 1\n        var n59 = n58 - 1\n        var n60 = n59 -\
    \ 1\n        var n61 = n60 - 1\n        var n62 = n61 - 1\n        var n63 = n62\
    \ - 1\n        var n64 = n63 - 1\n        var n65 = n64 - 1\n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptrkemgg_.scala:86:5\
    \ ---------------------\e[0m\e[0m\n\e[31m86 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprgz1m89h.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n\
    \        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var i : Int = 0\n        for(i <- 0 until\
    \ xs.size) {\n            x += 1L\n            y += 1L\n            d += 1L\n\
    \            dx :+= x\n            dy :+= y\n            dp :+= d\n        }\n\
    \        val dp1 = dp.reverse\n        val dp2 = dp.reverse\n        val dp3 =\
    \ dp.reverse\n        val dp4 = dp.reverse\n        val dp5 = dp.reverse\n   \
    \     val dp6 = dp.reverse\n        val dp7 = dp.reverse\n        val dp8 = dp.reverse\n\
    \        val dp9 = dp.reverse\n        val dp10 = dp.reverse\n        val dp11\
    \ = dp.reverse\n        val dp12 = dp.reverse\n        val dp13 = dp.reverse\n\
    \        val dp14 = dp.reverse\n        val dp15 = dp.reverse\n        val dp16\
    \ = dp.reverse\n        val dp17 = dp.reverse\n        val dp18 = dp.reverse\n\
    \        val dp19 = dp.reverse\n        val dp20 = dp.reverse\n        val dp21\
    \ = dp.reverse\n        val dp22 = dp.reverse\n        val dp23 = dp.reverse\n\
    \        val dp24 = dp.reverse\n        val dp25 = dp.reverse\n        val dp26\
    \ = dp.reverse\n        val dp27 = dp.reverse\n        val dp28 = dp.reverse\n\
    \        val dp29 = dp.reverse\n        val dp30 = dp.reverse\n        val dp31\
    \ = dp.reverse\n        val dp32 = dp.reverse\n        val dp33 = dp.reverse\n\
    \        val dp34 = dp.reverse\n        val dp35 = dp.reverse\n        val dp36\
    \ = dp.reverse\n        val dp37 = dp.reverse\n        val dp38 = dp.reverse\n\
    \        val dp39 = dp.reverse\n        val dp40 = dp.reverse\n        val dp41\
    \ = dp.reverse\n        val dp42 = dp.reverse\n        val dp43 = dp.reverse\n\
    \        val dp44 = dp.reverse\n        val dp45 = dp.reverse\n        val dp46\
    \ = dp.reverse\n        val dp47 = dp.reverse\n        val dp48 = dp.reverse\n\
    \        val dp49 = dp.reverse\n        val dp50 = dp.reverse\n        val dp51\
    \ = dp.reverse\n        val dp52 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfl4ahkts.scala:78:18 ---------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m        \e[33mval\e[0m \e[36mdp52\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfl4ahkts.scala:79:5 ---------------------\e[0m\e[0m\n\e[31m79\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.foldLeft(x0)((acc,\
    \ x) => acc * x)\n        List(x1 - x0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6rnqax97.scala:17)\n\tat Problem.main(tmp6rnqax97.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4xjrtwch.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi71hye8.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var y = 0L\n\
    \        var z = 0L\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        var n = 0\n        var sum = 0L\n        var sum2 = 0L\n        var sum3\
    \ = 0L\n        var sum4 = 0L\n        var sum5 = 0L\n        var sum6 = 0L\n\
    \        var sum7 = 0L\n        var sum8 = 0L\n        var sum9 = 0L\n       \
    \ var sum10 = 0L\n        var sum11 = 0L\n        var sum12 = 0L\n        var\
    \ sum13 = 0L\n        var sum14 = 0L\n        var sum15 = 0L\n        var sum16\
    \ = 0L\n        var sum17 = 0L\n        var sum18 = 0L\n        var sum19 = 0L\n\
    \        var sum20 = 0L\n        var sum21 = 0L\n        var sum22 = 0L\n    \
    \    var sum23 = 0L\n        var sum24 = 0L\n        var sum25 = 0L\n        var\
    \ sum26 = 0L\n        var sum27 = 0L\n        var sum28 = 0L\n        var sum29\
    \ = 0L\n        var sum30 = 0L\n        var sum31 = 0L\n        var sum32 = 0L\n\
    \        var sum33 = 0L\n        var sum34 = 0L\n        var sum35 = 0L\n    \
    \    var sum36 = 0L\n        var sum37 = 0L\n        var sum38 = 0L\n        var\
    \ sum39 = 0L\n        var sum40 = 0L\n        var sum41 = 0L\n        var sum42\
    \ = 0L\n        var sum43 = 0L\n        var sum44 = 0L\n        var sum45 = 0L\n\
    \        var sum46 = 0L\n        var sum47 = 0L\n        var sum48 = 0L\n    \
    \    var sum49 = 0L\n        var sum50 = 0L\n        var sum51 = 0L\n        var\
    \ sum52 = 0L\n        var sum53 = 0L\n        var sum54 = 0L\n        var sum55\
    \ = 0L\n        var sum56 = 0L\n        var sum57 = 0L\n        var sum58 = 0L\n\
    \        var sum59 = 0L\n        var sum60 = 0L\n        var sum61 = 0L\n    \
    \    var sum62 = 0L\n        var sum63 = 0L\n        var sum64 = 0L\n        var\
    \ sum65 = 0L\n        var sum66 = 0L\n        var sum67 = 0L\n        var sum68\
    \ = 0L\n        var sum69 = 0L\n        var sum70 = 0L\n        var sum71 = 0L\n\
    \        var sum72 = 0L\n        var sum73 = 0L\n        var sum74 = 0L\n    \
    \    var sum75 = 0L\n        var sum76 = 0L\n        var sum77 = 0L\n        var\
    \ sum78 = 0L\n        var sum79 = 0L\n        var sum80 = 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_skcfks1.scala:100:5\
    \ --------------------\e[0m\e[0m\n\e[31m100 |\e[0m    }\n\e[31m\e[31m    |\e[0m\
    \     ^\e[0m\n\e[31m    |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required:\
    \ List[Long]\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n\
    \        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n\
    \        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n\
    \        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8jlphgs9.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail.tail.tail\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5a0145f.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ds = new mutable.ListBuffer[Long](n)\n\
    \        val d = 0L\n        for (i <- 0 until n) {\n            val x = xs(i)\n\
    \            ds.add(d * x)\n            d += x\n        }\n        ds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz7sjsqfg.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m              \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz7sjsqfg.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            d += x\n\e[31m\e\
    [31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Long - did you mean d.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659794873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4xjrtwch.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var n2 = 1L\n        var n3 = 2L\n        var n4\
    \ = 3L\n        var n5 = 4L\n        var n6 = 5L\n        var n7 = 6L\n      \
    \  var n8 = 7L\n        var n9 = 8L\n        var n10 = 9L\n        var n11 = 10L\n\
    \        var n12 = 11L\n        var n13 = 12L\n        var n14 = 13L\n       \
    \ var n15 = 14L\n        var n16 = 15L\n        var n17 = 16L\n        var n18\
    \ = 17L\n        var n19 = 18L\n        var n20 = 19L\n        var n21 = 20L\n\
    \        var n22 = 21L\n        var n23 = 22L\n        var n24 = 23L\n       \
    \ var n25 = 24L\n        var n26 = 25L\n        var n27 = 26L\n        var n28\
    \ = 27L\n        var n29 = 28L\n        var n30 = 29L\n        var n31 = 30L\n\
    \        var n32 = 31L\n        var n33 = 32L\n        var n34 = 33L\n       \
    \ var n35 = 34L\n        var n36 = 35L\n        var n37 = 36L\n        var n38\
    \ = 37L\n        var n39 = 38L\n        var n40 = 39L\n        var n41 = 40L\n\
    \        var n42 = 41L\n        var n43 = 42L\n        var n44 = 43L\n       \
    \ var n45 = 44L\n        var n46 = 45L\n        var n47 = 46L\n        var n48\
    \ = 47L\n        var n49 = 48L\n        var n50 = 49L\n        var n51 = 50L\n\
    \        var n52 = 51L\n        var n53 = 52L\n        var n54 = 53L\n       \
    \ var n55 = 54L\n        var n56 = 55L\n        var n57 = 56L\n        var n58\
    \ = 57L\n        var n59 = 58L\n        var n60 = 59L\n        var n61 = 60L\n\
    \        var n62 = 61L\n        var n63 = 62L\n        var n64 = 63L\n       \
    \ var n65 = 64L\n        var n66 = 65L\n        var n67 = 66L\n        var n68\
    \ = 67L\n        var n69 = 68L\n        var n70 = 69L\n        var n71 = 70L\n\
    \        var n72 = 71L\n        var n73 = 72L\n        var n74 = 73L\n       \
    \ var \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpif6l7hkt.scala:89:11 ---------------------------\e\
    [0m\e[0m\n\e[31m89 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpif6l7hkt.scala:90:5 ---------------------\e\
    [0m\e[0m\n\e[31m90 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprgz1m89h.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val x0 = xs.head\n      \
    \  val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 =\
    \ xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n     \
    \   val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyngwmfjd.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyngwmfjd.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val x0 = xs.head\n      \
    \  val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 =\
    \ xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n     \
    \   val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr46po9f3.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val x0 = xs.head\n      \
    \  val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 =\
    \ xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n     \
    \   val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyngwmfjd.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyngwmfjd.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var y = 0L\n\
    \        var i = 0\n        while (i < xs.length) {\n            x += 1L\n   \
    \         d += xs[i]\n            i += 1\n        }\n        val xs = xs.reverse\n\
    \        val ys = xs.map(x => x * d)\n        val xs = xs.reverse\n        val\
    \ ys = ys.reverse\n        val xs = xs.reverse\n        val ys = ys.reverse\n\
    \        val xs = xs.reverse\n        val ys = ys.reverse\n        val xs = xs.reverse\n\
    \        val ys = ys.reverse\n        val xs = xs.reverse\n        val ys = ys.reverse\n\
    \        val xs = xs.reverse\n        val ys = ys.reverse\n        val xs = xs.reverse\n\
    \        val ys = ys.reverse\n        val xs = xs.reverse\n        val ys = ys.reverse\n\
    \        val xs = xs.reverse\n        val ys = ys.reverse\n        val xs = xs.reverse\n\
    \        val ys = ys.reverse\n        val xs = xs.reverse\n        val ys = ys.reverse\n\
    \        val xs = xs.reverse\n        val ys = ys.reverse\n        val xs = xs.reverse\n\
    \        val ys = ys.reverse\n        val xs = xs.reverse\n        val ys = ys.reverse\n\
    \        val xs = xs.reverse\n        val ys = ys.reverse\n        val xs = xs.reverse\n\
    \        val ys = ys.reverse\n        val xs = xs.reverse\n        val ys = ys.reverse\n\
    \        val xs = xs.reverse\n        val ys = ys.reverse\n        val xs = xs.reverse\n\
    \        val ys = ys.reverse\n        val xs = xs.reverse\n        val ys = ys.reverse\n\
    \        val xs = xs.reverse\n        val ys = ys.reverse\n        val xs = xs.reverse\n\
    \        val ys = ys.reverse\n        val xs = xs.reverse\n        val ys = ys.reverse\n\
    \        val xs = xs.reverse\n        val ys = ys.reverse\n        val xs = xs.reverse\n\
    \        val ys = ys.reverse\n        val xs = xs.reverse\n        val ys = ys.reverse\n\
    \        val xs = xs.reverse\n        val ys = ys.reverse\n        val xs = xs.reverse\n\
    \        val ys = ys.reverse\n        val xs = x\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_bxly5zq.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = xs.reverse\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mxs is already\
    \ defined as \e[33mvalue\e[0m \e[35mxs\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_bxly5zq.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mys\e[0m = ys.reverse\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mys is already\
    \ defined as \e[33mvalue\e[0m \e[35mys\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_bxly5zq.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = xs.reverse\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mxs is already\
    \ defined as \e[33mvalue\e[0m \e[35mxs\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_bxly5zq.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mys\e[0m = ys.reverse\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mys is already\
    \ defined as \e[33mvalue\e[0m \e[35mys\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_bxly5zq.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = xs.reverse\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mxs is already\
    \ defined as \e[33mvalue\e[0m \e[35mxs\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_bxly5zq.scala:28:12 ---------------------------\e\
    [0"
  stdout: ''
  timestamp: 1659794878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            ds(i) = xs(i) * xs(i\
    \ + 1)\n            i += 1\n        }\n        ds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv6dievzo.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vqb6g0u.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vqb6g0u.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n      \
    \  val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val\
    \ x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 =\
    \ xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n\
    \        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n\
    \        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n\
    \        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n\
    \        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n\
    \        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n\
    \        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n\
    \        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n\
    \        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n\
    \        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n\
    \        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n\
    \        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n\
    \        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n\
    \        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n\
    \        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n\
    \        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n\
    \        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n\
    \        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2lfh_45t.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2lfh_45t.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var xpow =\
    \ 0L\n        var xpow2 = 0L\n        var xpow3 = 0L\n        var xpow4 = 0L\n\
    \        var xpow5 = 0L\n        var xpow6 = 0L\n        var xpow7 = 0L\n    \
    \    var xpow8 = 0L\n        var xpow9 = 0L\n        var xpow10 = 0L\n       \
    \ var xpow11 = 0L\n        var xpow12 = 0L\n        var xpow13 = 0L\n        var\
    \ xpow14 = 0L\n        var xpow15 = 0L\n        var xpow16 = 0L\n        var xpow17\
    \ = 0L\n        var xpow18 = 0L\n        var xpow19 = 0L\n        var xpow20 =\
    \ 0L\n        var xpow21 = 0L\n        var xpow22 = 0L\n        var xpow23 = 0L\n\
    \        var xpow24 = 0L\n        var xpow25 = 0L\n        var xpow26 = 0L\n \
    \       var xpow27 = 0L\n        var xpow28 = 0L\n        var xpow29 = 0L\n  \
    \      var xpow30 = 0L\n        var xpow31 = 0L\n        var xpow32 = 0L\n   \
    \     var xpow33 = 0L\n        var xpow34 = 0L\n        var xpow35 = 0L\n    \
    \    var xpow36 = 0L\n        var xpow37 = 0L\n        var xpow38 = 0L\n     \
    \   var xpow39 = 0L\n        var xpow40 = 0L\n        var xpow41 = 0L\n      \
    \  var xpow42 = 0L\n        var xpow43 = 0L\n        var xpow44 = 0L\n       \
    \ var xpow45 = 0L\n        var xpow46 = 0L\n        var xpow47 = 0L\n        var\
    \ xpow48 = 0L\n        var xpow49 = 0L\n        var xpow50 = 0L\n        var xpow51\
    \ = 0L\n        var xpow52 = 0L\n        var xpow53 = 0L\n        var xpow54 =\
    \ 0L\n        var xpow55 = 0L\n        var xpow56 = 0L\n        var xpow57 = 0L\n\
    \        var xpow58 = 0L\n        var xpow59 = 0L\n        var xpow60 = 0L\n \
    \       var xpow61 = 0L\n        var xpow62 = 0L\n        var xpow63 = 0L\n  \
    \      var xpow64 = 0L\n        var xpow65 = 0L\n        var xpow66 = 0L\n   \
    \     var xpow67 = 0L\n        var xpow68 = 0L\n        var xpow69 = 0L\n    \
    \    var xpow70 = 0L\n        var xpow71 = 0L\n        var xpow72 = 0L\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy2y29v7s.scala:86:5\
    \ ---------------------\e[0m\e[0m\n\e[31m86 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n\
    \        var result: List[Long] = Nil\n        for(i <- 0 until xs.size) {\n \
    \           x += 1L\n            y += 1L\n            d += 1L\n            result\
    \ ::= (x * xs + y) * x\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8p9lct9v.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            result ::= (x * xs + y) * x\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value ::= is not a member\
    \ of List[Long] - did you mean List[Long].::?\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmp8p9lct9v.scala:20:26 -----------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            result ::= (x * xs + y) * x\n\e[31m\e[31m   |\e[0m       \
    \                 ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((xs : List[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1659794877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val x0 = xs.head\n      \
    \  val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 =\
    \ xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n     \
    \   val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk9qfoy13.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        val x = new Array[Long](n)\n        val x0 = xs.head\n        val x1\
    \ = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7nfp1meo.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n\
    \ + 1)\n        for( i <- 0 until n ) {\n            ds(i) = 1\n        }\n  \
    \      for( i <- 0 until n ) {\n            if( i == 0 ) {\n                ds(i)\
    \ = xs(0)\n            } else {\n                ds(i) = xs(i) * ds(i - 1)\n \
    \           }\n        }\n        ds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpejz_flsg.scala:24:8\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vqb6g0u.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vqb6g0u.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        val dd = new Array[Long](n)\n        val ddd = new Array[Long](n)\n \
    \       val dd = new Array[Long](n)\n        val ddd = new Array[Long](n)\n  \
    \      val dd = new Array[Long](n)\n        val ddd = new Array[Long](n)\n   \
    \     val dd = new Array[Long](n)\n        val ddd = new Array[Long](n)\n    \
    \    val dd = new Array[Long](n)\n        val ddd = new Array[Long](n)\n     \
    \   val dd = new Array[Long](n)\n        val ddd = new Array[Long](n)\n      \
    \  val dd = new Array[Long](n)\n        val ddd = new Array[Long](n)\n       \
    \ val dd = new Array[Long](n)\n        val ddd = new Array[Long](n)\n        val\
    \ dd = new Array[Long](n)\n        val ddd = new Array[Long](n)\n        val dd\
    \ = new Array[Long](n)\n        val ddd = new Array[Long](n)\n        val dd =\
    \ new Array[Long](n)\n        val ddd = new Array[Long](n)\n        val dd = new\
    \ Array[Long](n)\n        val ddd = new Array[Long](n)\n        val dd = new Array[Long](n)\n\
    \        val ddd = new Array[Long](n)\n        val dd = new Array[Long](n)\n \
    \       val ddd = new Array[Long](n)\n        val dd = new Array[Long](n)\n  \
    \      val ddd = new Array[Long](n)\n        val dd = new Array[Long](n)\n   \
    \     val ddd = new Array[Long](n)\n        val dd = new Array[Long](n)\n    \
    \    val ddd = new Array[Long](n)\n        val dd = new Array[Long](n)\n     \
    \   val ddd = new Array[Long](n)\n        val dd = new Array[Long](n)\n      \
    \  val ddd = new Array[Long](n)\n        val dd = new Array[Long](n)\n       \
    \ val ddd = new Array[Long](n)\n        val dd = new Array[Long](n)\n        val\
    \ ddd = new Array[Long](n)\n        val dd = new Array[Long](n)\n        val ddd\
    \ = new Array[Long](n)\n        val dd = new Array[Long](n)\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiq8pkaiq.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdd\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdd is already defined as \e[33mvalue\e[0m \e[35mdd\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpiq8pkaiq.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mddd\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mddd is already defined as \e[33mvalue\e[0m \e[35mddd\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpiq8pkaiq.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mdd\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdd is already defined as \e[33mvalue\e[0m \e[35mdd\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpiq8pkaiq.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mddd\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mddd is already defined as \e[33mvalue\e[0m \e[35mddd\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpiq8pkaiq.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mdd\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdd is already defined as \e[33mvalue\e[0m "
  stdout: ''
  timestamp: 1659794877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        val x = new Array[Long](n)\n        val x0 = xs(0)\n        val x1 =\
    \ xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n\
    \        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n    \
    \    val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n      \
    \  val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n    \
    \    val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n  \
    \      val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n\
    \        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n\
    \        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n\
    \        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n\
    \        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n\
    \        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n\
    \        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n\
    \        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n\
    \        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n\
    \        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n\
    \        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n\
    \        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n\
    \        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n\
    \        val x56 = xs(56)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi7q66zup.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n\
    \        var result: List[Long] = Nil\n        for (i <- 0 until xs.size) {\n\
    \            x += 1L\n            y += 1L\n            d += 1L\n            result\
    \ += (xs zip ys zip d toList).map{case ((x1, y1), d1) => x1 * y1 - d1}\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnp0ah8xp.scala:20:45 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            result += (xs zip ys zip d toList).map{\e\
    [33mcase\e[0m ((x1, y1), d1) => x1 * y1 - d1}\n\e[31m\e[31m   |\e[0m         \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                      expression expected but \e[31m')'\e[0m found\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnp0ah8xp.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            result += (xs zip ys zip d toList).map{\e\
    [33mcase\e[0m ((x1, y1), d1) => x1 * y1 - d1}\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnp0ah8xp.scala:20:30\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            result += (xs\
    \ zip ys zip d toList).map{\e[33mcase\e[0m ((x1, y1), d1) => x1 * y1 - d1}\n\e\
    [31m\e[31m   |\e[0m                              ^^\e[0m\n\e[31m   |\e[0m    \
    \                          Not found: ys\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpnp0ah8xp.scala:20:37 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            result += (xs zip ys zip d toList).map{\e[33mcase\e\
    [0m ((x1, y1), d1) => x1 * y1 - d1}\n\e[31m\e[31m   |\e[0m                   \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \  Found:    (d : Long)\n\e[31m   |\e[0m                                     Required:\
    \ IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpnp0ah8xp.scala:20:51\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            result +=\
    \ (xs zip ys zip d toList).map{\e[33mcase\e[0m ((x1, y1), d1) => x1 * y1 - d1}\n\
    \e[31m\e[31m   |\e[0m                                                   ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |"
  stdout: ''
  timestamp: 1659794879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n\
    \        for( i <- 0 until n ) {\n            val x = xs(i)\n            val y\
    \ = (xs(i) + xs(i+1)) * x\n            val z = xs(i+1) + xs(i+2)\n           \
    \ val s = z * z\n            val t = x * z\n            val u = y * z\n      \
    \      val v = y * x\n            ds(i) = s * (t - u)\n        }\n        ds\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp365tgibr.scala:24:8\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprgz1m89h.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var d = 0L\n        var x = 0L\n        var y = 0L\n\
    \        var z = 0L\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n\
    \        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n\
    \        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n\
    \        var x = 0L\n        var y = 0L\n        var z = 0L\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n\
    \        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n\
    \        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n\
    \        var v = 0\n        var w = 0\n        var x = 0L\n        var y = 0L\n\
    \        var z = 0L\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n\
    \        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n\
    \        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n\
    \        var x = 0L\n        var y = 0L\n        var z = 0L\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n\
    \        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n\
    \        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n\
    \        var v = 0\n        var w = 0\n        var x = 0L\n        var y = 0L\n\
    \        var z = 0L\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n\
    \        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n\
    \        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n\
    \        var x = 0L\n        var y = 0L\n        var z = 0L\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n\
    \        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n\
    \        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n\
    \        var v = 0\n        var w = 0\n        var x = 0L\n        var y = 0L\n\
    \        var z = 0L\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n\
    \        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n\
    \        var t = 0\n        var u = 0\n        var v = 0\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5lfuxohd.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m = \e[31m0L\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mx is already defined\
    \ as \e[33mvariable\e[0m \e[35mx\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5lfuxohd.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m \e[36my\e[0m = \e[31m0L\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0my is already defined\
    \ as \e[33mvariable\e[0m \e[35my\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5lfuxohd.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m \e[36mz\e[0m = \e[31m0L\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mz is already defined\
    \ as \e[33mvariable\e[0m \e[35mz\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5lfuxohd.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined\
    \ as \e[33mvariable\e[0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5lfuxohd.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mvar\e[0m \e[36mj\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mj is already defined\
    \ as \e[33mvariable\e[0m \e[35mj\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5lfuxohd.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mvar\e[0m \e[36"
  stdout: ''
  timestamp: 1659794878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vqb6g0u.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vqb6g0u.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail.tail.tail\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5a0145f.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprgz1m89h.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var x = 0L\n        var y = 0L\n        var d = 0L\n\
    \        var n = 0L\n        var n2 = 1L\n        var n3 = 2L\n        var n4\
    \ = 3L\n        var n5 = 4L\n        var n6 = 5L\n        var n7 = 6L\n      \
    \  var n8 = 7L\n        var n9 = 8L\n        var n10 = 9L\n        var n11 = 10L\n\
    \        var n12 = 11L\n        var n13 = 12L\n        var n14 = 13L\n       \
    \ var n15 = 14L\n        var n16 = 15L\n        var n17 = 16L\n        var n18\
    \ = 17L\n        var n19 = 18L\n        var n20 = 19L\n        var n21 = 20L\n\
    \        var n22 = 21L\n        var n23 = 22L\n        var n24 = 23L\n       \
    \ var n25 = 24L\n        var n26 = 25L\n        var n27 = 26L\n        var n28\
    \ = 27L\n        var n29 = 28L\n        var n30 = 29L\n        var n31 = 30L\n\
    \        var n32 = 31L\n        var n33 = 32L\n        var n34 = 33L\n       \
    \ var n35 = 34L\n        var n36 = 35L\n        var n37 = 36L\n        var n38\
    \ = 37L\n        var n39 = 38L\n        var n40 = 39L\n        var n41 = 40L\n\
    \        var n42 = 41L\n        var n43 = 42L\n        var n44 = 43L\n       \
    \ var n45 = 44L\n        var n46 = 45L\n        var n47 = 46L\n        var n48\
    \ = 47L\n        var n49 = 48L\n        var n50 = 49L\n        var n51 = 50L\n\
    \        var n52 = 51L\n        var n53 = 52L\n        var n54 = 53L\n       \
    \ var n55 = 54L\n        var n56 = 55L\n        var n57 = 56L\n        var n58\
    \ = 57L\n        var n59 = 58L\n        var n60 = 59L\n        var n61 = 60L\n\
    \        var n62 = 61L\n        var n63 = 62L\n        var n64 = 63L\n       \
    \ var n65 = 64L\n        var n66 = 65L\n        var n67 = 66L\n        var n68\
    \ = 67L\n        var n69 = 68L\n        var n70 = 69L\n        var n71 = 70L\n\
    \        var n72 = 71L\n        var n73 = 72L\n        var n74 = 73L\n       \
    \ var \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpif6l7hkt.scala:89:11 ---------------------------\e\
    [0m\e[0m\n\e[31m89 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpif6l7hkt.scala:90:5 ---------------------\e\
    [0m\e[0m\n\e[31m90 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprgz1m89h.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprgz1m89h.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs(0)\n      \
    \  val x1 = xs(1)\n        val x2 = xs(2)\n        val x3 = xs(3)\n        val\
    \ x4 = xs(4)\n        val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 =\
    \ xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n\
    \        val x11 = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n\
    \        val x14 = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n\
    \        val x17 = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n\
    \        val x20 = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n\
    \        val x23 = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n\
    \        val x26 = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n\
    \        val x29 = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n\
    \        val x32 = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n\
    \        val x35 = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n\
    \        val x38 = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n\
    \        val x41 = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n\
    \        val x44 = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n\
    \        val x47 = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n\
    \        val x50 = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n\
    \        val x53 = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n\
    \        val x56 = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n\
    \        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2lfh_45t.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2lfh_45t.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n\
    \        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n\
    \        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n\
    \        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8jlphgs9.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            val x = xs(i)\n     \
    \       val j = i + 1\n            while (j < n) {\n                val y = xs(j)\n\
    \                ds(i) = y * x\n                j += 2\n            }\n      \
    \      i += 1\n        }\n        ds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1m_bqpo2.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                j += \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1m_bqpo2.scala:25:8 ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val d = new Array[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i +\
    \ 1)\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprgz1m89h.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vqb6g0u.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vqb6g0u.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val x0 = xs.head\n    \
    \    val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4xjrtwch.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.size\n        val x = scala.math.pow(xs.last,\
    \ n - 1)\n        val y = xs.dropRight(1).foldLeft(x) { case (acc, x) => acc *\
    \ x }\n        List(y, x)\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw6ese0jv.scala:15:13\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        List(y, x)\n\e[31m\e\
    [31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m             Found:    (y : Double)\n\
    \e[31m   |\e[0m             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpw6ese0jv.scala:15:16 --------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        List(y, x)\n\e[31m\e[31m   |\e[0m                ^\e\
    [0m\n\e[31m   |\e[0m                Found:    (x : Double)\n\e[31m   |\e[0m  \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi71hye8.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi71hye8.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val n = xs.length\n        val ds = new ListBuffer[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            val x = xs(i)\n     \
    \       val d = 1\n            while (i < n && xs(i) != x) {\n               \
    \ d *= xs(i)\n                i += 1\n            }\n            ds.push(d) \n\
    \            i += 1\n        }\n        ds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8u_f_vlh.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mListBuffer\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m           \
    \                           ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mListBuffer\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8u_f_vlh.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                d *= xs(i)\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                value *= is not a member\
    \ of Int - did you mean d.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659794878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        var d = 0L\n        var dd = 1L\n        var ddd =\
    \ 1L\n        var dddd = 1L\n        var x = 1L\n        var xs = xs.toList\n\
    \        for(i <- 0 until xs.size) {\n            d += xs(i) * x\n           \
    \ ddd += xs(i) * xs(i) * x\n            ddd += xs(i) * xs(i) * xs(i) * x\n   \
    \         dddd += xs(i) * xs(i) * xs(i) * xs(i) * x\n        }\n        for(i\
    \ <- 0 until xs.size) {\n            d += xs(i) * x\n        }\n        for(i\
    \ <- 0 until xs.size) {\n            d += xs(i) * x\n        }\n        for(i\
    \ <- 0 until xs.size) {\n            d += xs(i) * x\n        }\n        for(i\
    \ <- 0 until xs.size) {\n            d += xs(i) * x\n        }\n        for(i\
    \ <- 0 until xs.size) {\n            d += xs(i) * x\n        }\n        for(i\
    \ <- 0 until xs.size) {\n            d += xs(i) * x\n        }\n        for(i\
    \ <- 0 until xs.size) {\n            d += xs(i) * x\n        }\n        for(i\
    \ <- 0 until xs.size) {\n            d += xs(i) * x\n        }\n        for(i\
    \ <- 0 until xs.size) {\n            d += xs(i) * x\n        }\n        for(i\
    \ <- 0 until xs.size) {\n            d += xs(i) * x\n        }\n        for(i\
    \ <- 0 until xs.size) {\n            d += xs(i) * x\n        }\n        for(i\
    \ <- 0 until xs.size) {\n            d += xs(i) * x\n        }\n        for(i\
    \ <- 0 until xs.size) {\n            d += xs(i) * x\n        }\n        for(i\
    \ <- 0 until xs.size) {\n            d += xs(i) * x\n        }\n        for(i\
    \ <- 0 until xs.size) {\n            d += xs(i) * x\n        }\n        for(i\
    \ <- 0 until xs.size) {\n            d += xs(i) * x\n        }\n        for(i\
    \ <- 0 until xs.size) {\n            d += xs(i) * x\n        }\n        for(i\
    \ <- 0 until xs.size) {\n            d += xs(i) * x\n        }\n        for(i\
    \ <- 0 until xs.size) {\n            d += xs(i) * x\n        }\n        for(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp27dspaxu.scala:81:12 ---------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m        \e[33mfor\e[0m(\n\e[31m\e[31m   |\e[0m      \
    \      ^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp27dspaxu.scala:17:17 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mxs\e[0m = xs.toList\n\e\
    [31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvariable\e[0m \e[35mxs\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    //\
    \ >>> derivative([1, 2, 3])\n    // [2, 6]\n    def derivative(xs : List[Long])\
    \ : List[Long] = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbi71hye8.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794837
