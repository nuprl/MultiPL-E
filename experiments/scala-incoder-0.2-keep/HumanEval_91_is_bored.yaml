name: HumanEval_91_is_bored
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You'll be given a string of words, and your task is to count the number\n\
  \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
  \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    //\
  \ >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is blue.\
  \ The sun is shining. I love this weather\")\n    // 1\n    def isBored(S : String)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello\
  \ world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n  \
  \  assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) ==\
  \ (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill\
  \ It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) ==\
  \ (0l));\n    }\n\n}\n"
completions: ["        val boredoms = mutable.HashSet[String]()\n        val sentences\
    \ = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach { sentence\
    \ =>\n            if (sentence.startsWith(\"I\")) {\n                boredoms\
    \ += sentence\n            }\n        }\n        boredoms.size", "        val\
    \ boredoms = mutable.HashMap[String, Long]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredomWords = sentence.split(\"\\\\s+\").filter(_.startsWith(\"i\"\
    ))\n            boredomWords.foreach(word => {\n                boredoms += (word\
    \ -> 1L)\n            })\n        })\n        boredoms.values.sum", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    )\n        sentences.foreach(sentence => {\n            val boredoms = sentence.split(\"\
    I\").length\n            boredoms += sentence\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashMap[String, Long]()\n        val sentences =\
    \ S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence =>\
    \ {\n            val boredoms = sentence.split(\"i\").map(_.toLowerCase)\n   \
    \         boredoms.foreach(boredom => {\n                boredoms.put(boredom,\
    \ boredoms.get(boredom) + 1)\n            })\n        })\n        boredoms.values.sum",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach(sentence => {\n            if\
    \ (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n     \
    \       }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredoms = sentence.split(\"i\").map(_.toLowerCase)\n\
    \            boredoms.foreach(boredom => {\n                boredoms += boredom\n\
    \            })\n        })\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredom = \"I\" in sentence\n            if (boredom)\
    \ boredoms += sentence\n        })\n        boredoms.size", "        val boredoms\
    \ = mutable.HashMap[String, Int]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach { sentence =>\n            val\
    \ boredomWords = sentence.split(\"\\\\s+\").filter(_.startsWith(\"i\"))\n    \
    \        boredomWords.foreach { boredomWord =>\n                boredoms += (boredomWord\
    \ -> 1)\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\".toRegex).map(_.toLowerCase)\n\
    \        sentences.foreach(sentence => {\n            val boredom = \"I\".equals(sentence(0))\n\
    \            boredoms += sentence if boredom\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\".toRegex)\n        sentences.foreach(sentence => {\n            val boredoms\
    \ = sentence.split(\"I\".toRegex).length\n            boredoms += boredoms\n \
    \       })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredoms = sentence.split(\"i\").map(_.toLowerCase)\n\
    \            boredoms.foreach(boredom => {\n                boredoms += boredom\n\
    \            })\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"I\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val words = S.split(\" \")\n \
    \       for(word <- words) {\n            if(word.startsWith(\"I\")) {\n     \
    \           boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            val boredoms =\
    \ sentence.startsWith(\"I\")\n            boredoms += sentence\n        })\n \
    \       boredoms.size", "        val boredoms = mutable.HashSet[String]()\n  \
    \      val words = S.split(\" \")\n        words.foreach(w => {\n            if\
    \ (w.startsWith(\"I\")) {\n                boredoms += w\n            }\n    \
    \    })\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        for (sentence <- sentences)\
    \ {\n            if (sentence.startsWith(\"I\")) {\n                boredoms +=\
    \ sentence\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach { sentence =>\n            val boredomStart = sentence.indexOf(\"\
    i\")\n            if (boredomStart != -1) {\n                boredoms.add(sentence.substring(0,boredomStart))\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        for (sentence <- sentences)\
    \ {\n            if (sentence.startsWith(\"I\")) {\n                boredoms +=\
    \ sentence\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.Set[String]()\n        val sentences = S.split(\"[.?!]\")\n      \
    \  sentences.foreach(sentence => {\n            val boredoms = sentence.split(\"\
    I\").length\n            boredoms += boredoms\n        })\n        boredoms.toSet.size",
  "        val boredoms = mutable.HashMap[String, Long]()\n        val sentences =\
    \ S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence\
    \ =>\n            val boredom = \"I\".equals(sentence.head) match {\n        \
    \        case true => 1\n                case false => 0\n            }\n    \
    \        boredoms(sentence) += boredom\n        }\n        boredoms.values.sum",
  "        val boredoms = mutable.HashSet[String]()\n        val boredoms_count =\
    \ mutable.HashMap[String, Long]()\n        val sentences = S.split(\"[.?!]\".toRegex)\n\
    \        sentences.foreach(sentence => {\n            val words = sentence.split(\"\
    \ \".toRegex)\n            words.foreach(word => {\n                if (word.startsWith(\"\
    I\")) {\n                    boredoms += word\n                }\n           \
    \ })\n        })\n        boredoms.foreach(boredom => {\n            val count\
    \ = boredoms_count.get(boredom)\n            if (count == null) {\n          \
    \      boredoms_count.put(boredom, 1)\n            } else {\n                boredoms_count.put(boredom,\
    \ count + 1)\n            }\n        })\n        boredoms_count.values.sum", " \
    \       val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n   \
    \     sentences.foreach { sentence =>\n            val boredomWords = sentence.split(\"\
    \\\\s+\").filter(_.startsWith(\"i\"))\n            boredomWords.foreach { boredomWord\
    \ =>\n                val boredomCount = boredoms(boredomWord)\n             \
    \   if (boredomCount == null) boredoms(boredomWord) = 1 else boredoms(boredomWord)\
    \ += 1\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val words = S.split(\" \")\n        for(word\
    \ <- words) {\n            if(word.startsWith(\"I\")) {\n                boredoms\
    \ += word\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val words = S.split(\" \")\n        for(word\
    \ <- words) {\n            val boredom = \"I\".equals(word)\n            if(boredom)\
    \ boredoms += word\n        }\n        boredoms.size", "        val boredoms =\
    \ mutable.HashSet[String]()\n        val words = S.split(\" \")\n        for(word\
    \ <- words) {\n            if(word.startsWith(\"I\")) {\n                boredoms\
    \ += word\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach(sentence => {\n            val boredomStart = sentence.indexOf(\"\
    i\")\n            val boredomEnd = sentence.indexOf(\"i\", boredomStart + 1)\n\
    \            boredoms.add(sentence.substring(boredomStart, boredomEnd))\n    \
    \    })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\.\")\n        for(word <- words) {\n      \
    \      val boredomWord = word.substring(0,1)\n            if(boredoms.contains(boredomWord))\
    \ {\n                boredoms += boredomWord\n            }\n        }\n     \
    \   boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n   \
    \     val bored = mutable.ListBuffer[String]()\n        val boreds = mutable.ListBuffer[String]()\n\
    \        val bored = mutable.ListBuffer[String]()\n        val boreds = mutable.ListBuffer[String]()\n\
    \        val bored = mutable.ListBuffer[String]()\n        val boreds = mutable.ListBuffer[String]()\n\
    \        val bored = mutable.ListBuffer[String]()\n        val boreds = mutable.ListBuffer[String]()\n\
    \        val bored = mutable.ListBuffer[String]()\n        val boreds = mutable.ListBuffer[String]()\n\
    \        val bored = mutable.ListBuffer[String]()\n        val boreds = mutable.ListBuffer[String]()\n\
    \        val bored = mutable.ListBuffer[String]()\n        val boreds = mutable.ListBuffer[String]()\n\
    \        val bored = mutable.ListBuffer[String]()\n        val boreds = mutable.ListBuffer[String]()\n\
    \        val bored = mutable.ListBuffer[String]()\n        val boreds = mutable.ListBuffer[String]()\n\
    \        val bored = mutable.ListBuffer[String]()\n        val boreds = mutable.ListBuffer[String]()\n\
    \        val bored = mutable.ListBuffer[String]()\n        val boreds = mutable.ListBuffer[String]()\n\
    \        val bored = mutable.ListBuffer[String]()\n        val boreds = mutable.ListBuffer[String]()\n\
    \        val bored = mutable.ListBuffer[String]()\n        val boreds = mutable.ListBuffer[String]()\n\
    \        val bored = mutable.ListBuffer[String]()\n        val boreds = mutable.ListBuffer[String]()\n\
    \        val bored = mutable.ListBuffer[String]()\n        val boreds = mutable.ListBuffer[String]()\n\
    \        val bored = mutable.ListBuffer[String]()\n        val boreds = mutable.ListBuffer[String]()\n\
    \        val bored = mutable.ListBuffer[String]()\n        val boreds = mutable.ListBuffer[String]()\n\
    \        val bored = mutable.ListBuffer[String]()\n        val boreds = mutable.",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).toList\n        sentences.foreach(sentence => {\n       \
    \     val boredomWords = sentence.split(\"I\").map(_.trim).toList\n          \
    \  boredomWords.foreach(word => {\n                boredoms += word\n        \
    \    })\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach(sentence\
    \ => {\n            val boredomWords = sentence.split(\"\\\\s+\").filter(_.startsWith(\"\
    I\")).toList\n            boredomWords.foreach(word => boredoms += word)\n   \
    \     })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(w <- words) {\n            if(w.startsWith(\"\
    I\")) {\n                boredoms += w\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \\\\.\")\n        for(word <- words) {\n            if(word.startsWith(\"I\"))\
    \ {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val words = S.split(\" \"\
    )\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n  \
    \              boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredom = \"I\".equals(sentence)\n            if (boredom)\
    \ boredoms += sentence\n        })\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val bored = mutable.HashMap[String, Long]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredWords = sentence.split(\"\\\\s+\").filter(_.startsWith(\"\
    i\")).map(_.toLowerCase)\n            boredWords.foreach(boredWord => {\n    \
    \            boredoms += boredWord\n            })\n        })\n        boredoms.foreach(boredom\
    \ => {\n            bored.put(boredom, boredoms.count(_ == boredom))\n       \
    \ })\n        bored.values.sum", "        val boredoms = mutable.Set[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredom = \"I\" in sentence\n            if (boredom)\
    \ boredoms += sentence\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach(sentence => {\n            if (sentence.startsWith(\"\
    i\")) {\n                boredoms += sentence\n            }\n        })\n   \
    \     boredoms.size", "        val boredoms = mutable.HashSet[String]()\n    \
    \    val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredoms = sentence.split(\"i\").map(_.toLowerCase)\n\
    \            boredoms.foreach(boredom => {\n                boredoms += boredom\n\
    \            })\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).filter(_.nonEmpty)\n \
    \       sentences.foreach(sentence => {\n            val boredomStart = sentence.startsWith(\"\
    I\")\n            val boredomEnd = sentence.endsWith(\"I\")\n            if (boredomStart\
    \ && boredomEnd) boredoms += sentence\n        })\n        boredoms.size", " \
    \       val boredoms = mutable.HashMap[String, Long]()\n        val words = S.split(\"\
    \\\\.\")\n        for(word <- words) {\n            val boredom = (word startsWith\
    \ \"I\")\n            boredoms += (word -> boredom)\n        }\n        boredoms.values.sum",
  "        val boredoms = mutable.Set[String]()\n        val words = S.split(\" \"\
    )\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n  \
    \              boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashMap[String, Long]()\n        val sentences =\
    \ S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence =>\
    \ {\n            val boredomWords = sentence.split(\"i\").map(_.toLowerCase)\n\
    \            boredomWords.foreach(word => {\n                boredoms += (word\
    \ -> 1L)\n            })\n        })\n        boredoms.values.sum", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val boredoms_count = mutable.HashMap[String,\
    \ Long]()\n        val words = S.split(\"\\\\.\")\n        val boredom_words =\
    \ words.filter(w => w.startsWith(\"I\"))\n        boredom_words.foreach(w => boredoms\
    \ += w)\n        boredoms.foreach(w => boredoms_count += w -> 1)\n        boredoms_count.foreach(w\
    \ => boredoms_count += w -> boredoms_count(w) + 1)\n        boredoms_count.values.sum",
  "        val boredoms = mutable.Set[String]()\n        val words = S.split(\" \"\
    )\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n  \
    \              boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\".toRegex)\n        sentences.foreach(sentence => {\n            val words\
    \ = sentence.split(\"\\\\s\".toRegex)\n            words.foreach(word => {\n \
    \               if (word.equals(\"I\")) {\n                    boredoms += word\n\
    \                }\n            })\n        })\n        boredoms.size", "    \
    \    val boredoms = mutable.HashMap[String, Long]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredom = \"I\".equals(sentence(0))\n            boredoms += (sentence\
    \ -> boredom)\n        }\n        boredoms.values.sum", "        val boredoms\
    \ = mutable.ListBuffer[String]()\n        val words = S.split(\" \")\n       \
    \ for(word <- words) {\n            if(word.startsWith(\"I\")) {\n           \
    \     boredoms += word\n            }\n        }\n        boredoms.size", "  \
    \      val boredoms = mutable.HashMap[String, Long]()\n        val sentences =\
    \ S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach(sentence =>\
    \ {\n            val boredomWords = sentence.split(\"\\\\s+\").filter(word =>\
    \ word.startsWith(\"I\"))\n            boredomWords.foreach(word => boredoms +=\
    \ (word -> 1))\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomWords = sentence.split(\"i\").map(_.toLowerCase)\n\
    \            boredomWords.foreach(word => {\n                if (boredoms.contains(word))\
    \ {\n                    boredoms += word\n                }\n            })\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredoms = sentence.startsWith(\"i\")\n            boredoms\
    \ += sentence\n        })\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        val sentences = S.split(\"[.!?]\".toRegex)\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\"\\\\s\".toRegex)\n          \
    \  words.foreach(word => {\n                if (word.equals(\"I\")) {\n      \
    \              boredoms += (word -> 1L)\n                }\n            })\n \
    \       })\n        boredoms.values.sum", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredom = \"I\" in sentence\n            if (boredom)\
    \ boredoms += sentence\n        })\n        boredoms.size", "        val boredoms\
    \ = mutable.ListBuffer[String]()\n        val words = S.split(\" \")\n       \
    \ for(word <- words) {\n            val boredom = (word == \"I\")\n          \
    \  if(boredom) {\n                boredoms += word\n            }\n        }\n\
    \        boredoms.toList.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val boredoms_count = mutable.HashMap[String, Long]()\n        val boredom_words\
    \ = mutable.HashSet[String]()\n        val boredom_words_count = mutable.HashMap[String,\
    \ Long]()\n        val boredom_sentences = mutable.HashSet[String]()\n       \
    \ val boredom_sentences_count = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_per_word\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_per_sentence\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_per_sentence_per_word\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_per_sentence_per_sentence\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_per_sentence_per_sentence_per_word\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_per_sentence_per_sentence_per_sentence\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_per_sentence_per_sentence_per_sentence_per_word\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_per_sentence_per_sentence_per_sentence_per_sentence\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_per_sentence_per_sentence_per_sentence_per_sentence_per_word\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_per_sentence_per_sentence_per_sentence_per_sentence_per_sentence\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_per_sentence_per_sentence_per_sentence_per_sentence_per_sentence_per_word\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_per_sentence_per_sentence_per_sentence_per_sentence_per_sentence_per_sentence\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_per_sentence_per_sentence_per_sentence_per_sentence_per_sentence_per_sentence_per_word\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_per_sentence_per_sentence_per_sentence_per_sentence_per_sentence_per_sentence_per_sentence\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_per_sentence_per_sentence_per_sentence_per_sentence_per_sentence_per_sentence_per_sentence_per_word\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_per_sentence_per_sentence_per_sentence_per_sentence_per_sentence_per_sentence_per_sentence_per_sentence\
    \ = mutable.", "        val boredoms = mutable.HashSet[String]()\n        val\
    \ sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredom = \"I\" in sentence\n            if (boredom)\
    \ boredoms += sentence\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach { sentence =>\n            val boredomStart = sentence.indexOf(\"\
    i\")\n            if (boredomStart != -1) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val boredoms_count = mutable.HashMap[String, Long]()\n        val boredom_sentences\
    \ = mutable.HashMap[String, List[String]]()\n        val boredom_sentences_count\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_sorted\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val boredom_sentences_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\".toRegex)\n        sentences.foreach(sentence => {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        })\n   \
    \     boredoms.size", "        val boredoms = mutable.Set[String]()\n        val\
    \ sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredom = \"I\".equals(sentence)\n            if (boredom)\
    \ boredoms += sentence\n        })\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val words = S.split(\"\\\\.\")\n      \
    \  for(word <- words) {\n            if(word.startsWith(\"I\")) {\n          \
    \      boredoms += word\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredom = \"I\" in sentence\n            if (boredom) {\n          \
    \      boredoms += sentence\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.ListBuffer[String]()\n        for(word <- S.split(\"\
    \ \")){\n            if(word.startsWith(\"I\")){\n                boredoms +=\
    \ word\n            }\n        }\n        boredoms.count(_ == \"I\")", "     \
    \   val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).toList\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"I\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.HashSet[String]()\n  \
    \      val words = S.split(\"\\\\.\")\n        for(word <- words) {\n        \
    \    if(word.startsWith(\"I\")) {\n                boredoms += word\n        \
    \    }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.!?]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\.\")\n        for(w <- words) {\n         \
    \   if(w.startsWith(\"I\")) {\n                boredoms += w\n            }\n\
    \        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val boredoms = sentence.split(\"I\").length\n            boredoms\
    \ += sentence\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \")\n            words.foreach(word\
    \ => {\n                if (word.equals(\"I\")) {\n                    boredoms\
    \ += word\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).filter(_.nonEmpty)\n        sentences.foreach(sentence =>\
    \ {\n            if (sentence.startsWith(\"I\")) {\n                boredoms +=\
    \ sentence\n            }\n        })\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val words = S.split(\"\\\\.\")\n      \
    \  for(word <- words) {\n            if(word.startsWith(\"I\")) {\n          \
    \      boredoms += word\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            val words = sentence.split(\"\
    \ \").filter(_.nonEmpty)\n            words.foreach(word => {\n              \
    \  if (word.startsWith(\"I\")) {\n                    boredoms += word\n     \
    \           }\n            })\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach { sentence =>\n            val\
    \ boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart >= 0) {\n\
    \                boredoms += sentence\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \ \")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \ \")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).toList\n        sentences.foreach(sentence => {\n       \
    \     if (sentence.startsWith(\"I\")) {\n                boredoms += sentence\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Int]()\n        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n    \
    \    sentences.foreach(sentence => {\n            val words = sentence.split(\"\
    \ \").filter(_.nonEmpty)\n            words.foreach(word => {\n              \
    \  if (word.startsWith(\"I\")) {\n                    boredoms += (word -> 1)\n\
    \                }\n            })\n        })\n        boredoms.values.sum",
  "        val boredoms = mutable.HashMap[String, Long]()\n        val sentences =\
    \ S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence =>\
    \ {\n            val boredomWords = sentence.split(\"i\").map(_.toLowerCase)\n\
    \            boredomWords.foreach(word => {\n                boredoms += (word\
    \ -> 1L)\n            })\n        })\n        boredoms.values.sum", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach { sentence =>\n            val\
    \ boredoms = sentence.startsWith(\"i\")\n            boredoms += sentence\n  \
    \      }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredom = \"I\".equals(sentence(0))\n       \
    \     boredoms += sentence if boredom\n        }\n        boredoms.size", "  \
    \      val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\".toRegex).map(_.trim).toList\n        sentences.foreach { sentence =>\n\
    \            if (sentence.startsWith(\"I\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredom = \"I\" in sentence\n            if (boredom)\
    \ {\n                boredoms += sentence\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            val words = sentence.split(\"\
    \ \")\n            words.foreach(word => {\n                if (word.startsWith(\"\
    I\")) {\n                    boredoms += word\n                }\n           \
    \ })\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \")\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += word\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val boredom_words = mutable.Set[String]()\n\
    \        val boredom_sentences = mutable.Set[String]()\n        val boredom_sentences_count\
    \ = mutable.Set[String]()\n        val boredom_sentences_count_count = mutable.Set[String]()\n\
    \        val boredom_sentences_count_count_count = mutable.Set[String]()\n   \
    \     val boredom_sentences_count_count_count_count = mutable.Set[String]()\n\
    \        val boredom_sentences_count_count_count_count_count = mutable.Set[String]()\n\
    \        val boredom_sentences_count_count_count_count_count_count = mutable.Set[String]()\n\
    \        val boredom_sentences_count_count_count_count_count_count_count = mutable.Set[String]()\n\
    \        val boredom_sentences_count_count_count_count_count_count_count_count\
    \ = mutable.Set[String]()\n        val boredom_sentences_count_count_count_count_count_count_count_count_count\
    \ = mutable.Set[String]()\n        val boredom_sentences_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Set[String]()\n        val boredom_sentences_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Set[String]()\n        val boredom_sentences_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Set[String]()\n        val boredom_sentences_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Set[String]()\n        val boredom_sentences_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Set[String]()\n        val boredom_sentences_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Set[String]()\n        val boredom_sentences_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Set[String]()\n        val boredom_sentences_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Set[String]()\n        val boredom_sentences_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Set[String]()\n        val boredom_sentences_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Set[String", "        val boredoms = mutable.HashSet[String]()\n \
    \       val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomIndex = sentence.indexOf(\"i\")\n            if\
    \ (boredomIndex > 0) {\n                boredoms.add(sentence)\n            }\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach(sentence => {\n            if\
    \ (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n     \
    \       }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredom = \"I\" in sentence\n            if (boredom)\
    \ boredoms += sentence\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val boredoms_count = mutable.HashMap[String,\
    \ Long]()\n        val boredoms_count_sorted = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_2 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_3 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_4 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_5 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_6 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_7 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_8 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_9 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_10 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_11 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_12 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_13 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_14 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_15 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_16 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_17 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_18 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_19 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_20 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_21 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_22 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_23 = mutable.HashMap[String, Long]()\n\
    \        val boredoms_count_sorted_reverse_24 = mutable.HashMap[", "        val\
    \ boredoms = mutable.Set[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach { sentence =>\n            if\
    \ (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n     \
    \       }\n        }\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        val words = S.split(\"\\\\s+\")\n        for(word <- words)\
    \ {\n            val boredom: String = word match {\n                case \"I\"\
    \ => boredoms += (word -> 1)\n                case \"!\" => boredoms += (word\
    \ -> 1)\n                case \"?\" => boredoms += (word -> 1)\n             \
    \   case _ => boredoms += (word -> 0)\n            }\n        }\n        boredoms.values.sum",
  "        val boredoms = mutable.HashMap[String, Int]()\n        val sentences =\
    \ S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence =>\
    \ {\n            val boredomWords = sentence.split(\"\\\\s+\").filter(word =>\
    \ word.startsWith(\"i\"))\n            boredomWords.foreach(word => boredoms +=\
    \ (word -> 1))\n        })\n        boredoms.values.sum", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\".toRegex)\n\
    \        sentences.foreach(sentence => {\n            val boredoms = sentence.split(\"\
    I\".toRegex).length\n            boredoms += boredoms\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\".toRegex)\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    boredoms.size", "        val boredoms = mutable.HashSet[String]()\n     \
    \   val words = S.split(\" \")\n        words.foreach(word => {\n            val\
    \ boredom = (word == \"I\")\n            if (boredom) boredoms += word\n     \
    \   })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.startsWith(\"I\")\n \
    \           if (boredomStart) {\n                boredoms += sentence\n      \
    \      }\n        }\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        val sentences = S.split(\"\\\\.|\\\\?|\\\\!\")\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \").filter(_.nonEmpty)\n   \
    \         val boredomWord = words.head\n            val boredomCount = boredoms.getOrElse(boredomWord,\
    \ 0) + 1\n            boredoms.put(boredomWord, boredomCount)\n        })\n  \
    \      boredoms.size", "        val boredoms = mutable.HashSet[String]()\n   \
    \     val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\".toRegex)\n        sentences.foreach(sentence\
    \ => {\n            val boredomWords = sentence.split(\"I\".toRegex)\n       \
    \     boredomWords.foreach(word => {\n                boredoms += word\n     \
    \       })\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"I\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.HashSet[String]()\n  \
    \      val words = S.split(\"\\\\.\")\n        for(word <- words) {\n        \
    \    if(word.startsWith(\"I\")) {\n                boredoms += word\n        \
    \    }\n        }\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val words = S.split(\"\\\\.\")\n        for(w <- words) {\n         \
    \   if(w.startsWith(\"I\")) {\n                boredoms += w\n            }\n\
    \        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).filter(_.nonEmpty)\n \
    \       sentences.foreach(sentence => {\n            val boredom = \"I\".equals(sentence)\n\
    \            boredoms += sentence if boredom\n        })\n        boredoms.size",
  "        val boredoms = mutable.ListBuffer[String]()\n        val words = S.split(\"\
    \ \")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.toList.size",
  "        val boredoms = mutable.HashSet[String]()\n        val boredoms_count =\
    \ mutable.HashMap[String, Long]()\n        val boredoms_count_sorted = mutable.HashMap[String,\
    \ Long]()\n        val boredoms_count_sorted_reverse = mutable.HashMap[String,\
    \ Long]()\n        val boredoms_count_sorted_reverse_sorted = mutable.HashMap[String,\
    \ Long]()\n        val boredoms_count_sorted_reverse_sorted_reverse = mutable.HashMap[String,\
    \ Long]()\n        val boredoms_count_sorted_reverse_sorted_reverse_sorted = mutable.HashMap[String,\
    \ Long]()\n        val boredoms_count_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_sorted_reverse_sorted_reverse_sorted_",
  "        val boredoms = mutable.HashSet[String]()\n        val boredoms_count =\
    \ mutable.HashMap[String, Long]()\n        val sentences = S.split(\"[.?!]\".toRegex)\n\
    \        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    for (boredom <- boredoms) {\n            boredoms_count += boredom -> 1\n\
    \        }\n        boredoms_count.values.sum", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        S.split(\"\\\\.|\\\\?|\\\\!\").foreach(sentence => {\n    \
    \        val boredom: String = sentence.startsWith(\"I\")\n            if (boredom)\
    \ {\n                boredoms += (sentence -> 1)\n            }\n        })\n\
    \        boredoms.values.sum", "        val boredoms = mutable.HashSet[String]()\n\
    \        val boredoms_count = mutable.HashMap[String, Long]()\n        val sentences\
    \ = S.split(\"[.?!]\".toRegex)\n        sentences.foreach(sentence => {\n    \
    \        val boredoms_count = sentence.split(\"I\".toRegex).length\n         \
    \   boredoms_count.foreach {\n                case (boredom, count) => boredoms\
    \ += boredom\n            }\n        })\n        boredoms.toSet.count(boredom\
    \ => boredoms_count.contains(boredom))", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.!?]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredom = \"I\" in sentence\n            if (boredom)\
    \ boredoms += sentence\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach { sentence =>\n            if (sentence.startsWith(\"\
    i\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    boredoms.size", "        val boredoms = mutable.HashMap[String, Int]()\n\
    \        val words = S.split(\" \")\n        for (w <- words) {\n            boredoms\
    \ += (w -> 1)\n        }\n        boredoms.values.sum", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach { sentence =>\n            if (sentence.startsWith(\"\
    i\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n  \
    \      val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"I\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.count", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach { sentence =>\n            val\
    \ boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart != -1)\
    \ {\n                boredoms.add(sentence)\n            }\n        }\n      \
    \  boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n    \
    \    val boredoms_count = mutable.ListBuffer[Long]()\n        val boredom_words\
    \ = mutable.ListBuffer[String]()\n        val boredom_words_count = mutable.ListBuffer[Long]()\n\
    \        val boredom_sentences = mutable.ListBuffer[String]()\n        val boredom_sentences_count\
    \ = mutable.ListBuffer[Long]()\n        val boredom_sentences_words = mutable.ListBuffer[String]()\n\
    \        val boredom_sentences_words_count = mutable.ListBuffer[Long]()\n    \
    \    val boredom_sentences_sentences = mutable.ListBuffer[String]()\n        val\
    \ boredom_sentences_sentences_count = mutable.ListBuffer[Long]()\n        val\
    \ boredom_sentences_sentences_words = mutable.ListBuffer[String]()\n        val\
    \ boredom_sentences_sentences_words_count = mutable.ListBuffer[Long]()\n     \
    \   val boredom_sentences_sentences_sentences = mutable.ListBuffer[String]()\n\
    \        val boredom_sentences_sentences_sentences_count = mutable.ListBuffer[Long]()\n\
    \        val boredom_sentences_sentences_sentences_words = mutable.ListBuffer[String]()\n\
    \        val boredom_sentences_sentences_sentences_words_count = mutable.ListBuffer[Long]()\n\
    \        val boredom_sentences_sentences_sentences_sentences = mutable.ListBuffer[String]()\n\
    \        val boredom_sentences_sentences_sentences_sentences_count = mutable.ListBuffer[Long]()\n\
    \        val boredom_sentences_sentences_sentences_sentences_words = mutable.ListBuffer[String]()\n\
    \        val boredom_sentences_sentences_sentences_sentences_words_count = mutable.ListBuffer[Long]()\n\
    \        val boredom_sentences_sentences_sentences_sentences_sentences = mutable.ListBuffer[String]()\n\
    \        val boredom_sentences_sentences_sentences_sentences_sentences_count =\
    \ mutable.ListBuffer[Long]()\n        val boredom_sentences_sentences_sentences_sentences_sentences_words\
    \ = mutable.ListBuffer[String]()\n        val boredom_sentences_sentences_sentences_sentences_sentences_words_count\
    \ = mutable.ListBuffer[Long]()\n        val boredom_sentences_sentences_sentences_sentences_sentences_sentences\
    \ = mutable.ListBuffer[String]()\n        val bore", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \")\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += word\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            val boredoms =\
    \ sentence.split(\"I\").length\n            boredoms += sentence\n        })\n\
    \        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n \
    \       val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms.add(sentence.substring(0,boredomStart))\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\".toRegex)\n        sentences.foreach(sentence\
    \ => {\n            val boredoms = sentence.split(\"I\".toRegex).length\n    \
    \        boredoms += boredoms\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val words = S.split(\" \")\n \
    \       for(word <- words) {\n            if(word.startsWith(\"I\")) {\n     \
    \           boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\".toRegex)\n        sentences.foreach(sentence\
    \ => {\n            val boredoms = sentence.split(\"I\".toRegex).length\n    \
    \        boredoms += boredoms\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    )\n        sentences.foreach(sentence => {\n            val boredoms = sentence.split(\"\
    I\").length\n            boredoms += sentence\n        })\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\.\")\n        for(word <- words) {\n      \
    \      if(word.startsWith(\"I\")) {\n                boredoms += word\n      \
    \      }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val boredoms_count = mutable.HashMap[String, Long]()\n        val boredoms_count_count\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_count_count =\
    \ mutable.HashMap[String, Long]()\n        val boredoms_count_count_count_count\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_count_count_count_count\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_count_count_count_count_count\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_count_count_count_count_count_count\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_count_count_count_count_count_count_count_count\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_count_count_count_count_count_count_count_",
  "        val boredoms = mutable.ListBuffer[String]()\n        val sentences = S.split(\"\
    [.?!]\".toRegex)\n        sentences.foreach(sentence => {\n            val boredomWords\
    \ = sentence.split(\"I\".toRegex)\n            boredomWords.foreach(boredomWord\
    \ => {\n                boredoms += boredomWord\n            })\n        })\n\
    \        boredoms.count(boredom => boredom == \"I\")", "        val boredoms =\
    \ mutable.Set[String]()\n        val words = S.split(\" \")\n        for(word\
    \ <- words) {\n            if(word.startsWith(\"I\")) {\n                boredoms\
    \ += word\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val words = S.split(\" \")\n        for(word\
    \ <- words) {\n            if(word.startsWith(\"I\")) {\n                boredoms\
    \ += word\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach(sentence => {\n            if (sentence.startsWith(\"\
    i\")) {\n                boredoms += sentence\n            }\n        })\n   \
    \     boredoms.size", "        val boredoms = mutable.HashSet[String]()\n    \
    \    val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach(sentence\
    \ => {\n            val boredoms = sentence.split(\"I\").map(_.trim).toList\n\
    \            boredoms.foreach(boredom => {\n                boredoms += boredom\n\
    \            })\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\".toList)\n        sentences.foreach(sentence\
    \ => {\n            val boredomWords = sentence.split(\"I\".toList).length\n \
    \           boredoms += boredomWords\n        })\n        boredoms.size", "  \
    \      val boredoms = mutable.HashSet[String]()\n        val boredom_words = mutable.HashSet[String]()\n\
    \        val boredom_sentences = mutable.HashSet[String]()\n        val boredom_sentences_words\
    \ = mutable.HashSet[String]()\n        val boredom_sentences_boredoms = mutable.HashSet[String]()\n\
    \        val boredom_sentences_boredoms_words = mutable.HashSet[String]()\n  \
    \      val boredom_sentences_boredoms_boredoms = mutable.HashSet[String]()\n \
    \       val boredom_sentences_boredoms_boredoms_words = mutable.HashSet[String]()\n\
    \        val boredom_sentences_boredoms_boredoms_boredoms = mutable.HashSet[String]()\n\
    \        val boredom_sentences_boredoms_boredoms_boredoms_words = mutable.HashSet[String]()\n\
    \        val boredom_sentences_boredoms_boredoms_boredoms_boredoms = mutable.HashSet[String]()\n\
    \        val boredom_sentences_boredoms_boredoms_boredoms_boredoms_words = mutable.HashSet[String]()\n\
    \        val boredom_sentences_boredoms_boredoms_boredoms_boredoms_boredoms =\
    \ mutable.HashSet[String]()\n        val boredom_sentences_boredoms_boredoms_boredoms_boredoms_boredoms_words\
    \ = mutable.HashSet[String]()\n        val boredom_sentences_boredoms_boredoms_boredoms_boredoms_boredoms_boredoms\
    \ = mutable.HashSet[String]()\n        val boredom_sentences_boredoms_boredoms_boredoms_boredoms_boredoms_boredoms_words\
    \ = mutable.HashSet[String]()\n        val boredom_sentences_boredoms_boredoms_boredoms_boredoms_boredoms_boredoms_boredoms_boredoms\
    \ = mutable.HashSet[String]()\n        val boredom_sentences_boredoms_boredoms_boredoms_boredoms_boredoms_boredoms_boredoms_",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \ \")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredom = \"I\" in sentence\n            if (boredom) {\n          \
    \      boredoms += sentence\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.ListBuffer[String]()\n        val words = S.split(\"\
    \ \")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size\
    \ match {\n            case 0 => 0\n            case 1 => 1\n            case\
    \ _ => boredoms.size\n        }", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n   \
    \     sentences.foreach { sentence =>\n            val boredomWords = sentence.split(\"\
    i\").map(_.toLowerCase)\n            boredomWords.foreach { boredomWord =>\n \
    \               boredoms += (boredomWord -> 1)\n            }\n        }\n   \
    \     boredoms.values.sum", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val boredoms = sentence.split(\"I\").length\n            boredoms\
    \ += sentence\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredoms = sentence.split(\"i\").map(_.toLowerCase)\n\
    \            boredoms.foreach(boredom => {\n                if (boredom != \"\"\
    ) boredoms += boredom\n            })\n        })\n        boredoms.size", " \
    \       val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).toList\n        sentences.foreach(sentence => {\n       \
    \     val boredomWords = sentence.split(\"\\\\s+\").filter(_.startsWith(\"I\"\
    )).toList\n            boredomWords.foreach(boredomWord => {\n               \
    \ boredoms += boredomWord\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).toList\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"I\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredoms = sentence.split(\"i\").map(_.toLowerCase)\n\
    \            boredoms.foreach(boredom => boredoms += boredom)\n        })\n  \
    \      boredoms.size", "        val boredoms = mutable.HashSet[String]()\n   \
    \     val words = S.split(\" \")\n        for(word <- words) {\n            boredoms\
    \ += word\n        }\n        boredoms.toList.count(_ == \"I\")", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach { sentence =>\n            val\
    \ boredom = \"I\".equals(sentence.head)\n            boredoms += sentence if boredom\n\
    \        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredoms = sentence.split(\"i\").map(_.toLowerCase)\n\
    \            boredoms.foreach(boredom => {\n                boredoms += boredom\n\
    \            })\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach { sentence =>\n            val\
    \ boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart != -1)\
    \ {\n                boredoms += sentence\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            val boredoms =\
    \ sentence.split(\"I\").length\n            boredoms += sentence\n        })\n\
    \        boredoms.size", "        val boredoms = mutable.HashMap[String, Long]()\n\
    \        val sentences = S.split(\"[.!?]\".toRegex)\n        sentences.foreach(sentence\
    \ => {\n            val boredomWords = sentence.split(\"\\\\s+\".toRegex)\n  \
    \          boredomWords.foreach(word => {\n                boredoms += (word ->\
    \ 1L)\n            })\n        })\n        boredoms.values.sum", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val words = S.split(\" \")\n \
    \       for(word <- words) {\n            if(word.startsWith(\"I\")) {\n     \
    \           boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.HashSet[String]()\n  \
    \      val sentences = S.split(\"[.?!]\".toList)\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \".toList)\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += word\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        })\n   \
    \     boredoms.size", "        val boredoms = mutable.HashSet[String]()\n    \
    \    val words = S.split(\" \")\n        for(word <- words) {\n            if(word.startsWith(\"\
    I\")) {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \ \")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredom = \"I\".equals(sentence)\n            boredoms += sentence if\
    \ boredom\n        })\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n   \
    \     sentences.foreach(sentence => {\n            val boredomWords = sentence.split(\"\
    \\\\s+\").filter(_.startsWith(\"i\"))\n            boredomWords.foreach(word =>\
    \ boredoms += (word -> 1))\n        })\n        boredoms.values.sum", "      \
    \  val boredoms = mutable.HashMap[String, Int]()\n        val sentences = S.split(\"\
    \\\\.|\\\\?|\\\\!\")\n        sentences.foreach(sentence => {\n            val\
    \ words = sentence.split(\"\\\\s+\")\n            words.foreach(word => {\n  \
    \              if (word.equals(\"I\")) {\n                    boredoms += (word\
    \ -> 1)\n                }\n            })\n        })\n        boredoms.values.sum",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\".toList)\n        sentences.foreach(sentence => {\n            val words\
    \ = sentence.split(\" \").toList\n            words.foreach(word => {\n      \
    \          if (word.startsWith(\"I\")) {\n                    boredoms += word\n\
    \                }\n            })\n        })\n        boredoms.size", "    \
    \    val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).toList\n        sentences.foreach(sentence => {\n       \
    \     if (sentence.startsWith(\"I\")) {\n                boredoms += sentence\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"I\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.Set[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.trim).toList\n        sentences.foreach(sentence => {\n            if\
    \ (sentence.startsWith(\"I\")) {\n                boredoms += sentence\n     \
    \       }\n        })\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val boredoms_count = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_2\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_3\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_4\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_5\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_6\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_7\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_8\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_9\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_10\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_11\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_12\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_13\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_14\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_15\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_16\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_17\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_18\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_19\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_20\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_21\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_22\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_23\
    \ = mutable.HashMap[String, Long]()\n        val boredoms_count_sorted_reverse_24\
    \ = mutable.HashMap[", "        val boredoms = mutable.HashSet[String]()\n   \
    \     val words = S.split(\"\\\\.\")\n        for(word <- words) {\n         \
    \   if(word.startsWith(\"I\")) {\n                boredoms += word\n         \
    \   }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach(sentence\
    \ => {\n            val boredom = \"I\".equals(sentence)\n            if (boredom)\
    \ boredoms += sentence\n        })\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\")\n  \
    \      sentences.foreach(sentence => {\n            val words = sentence.split(\"\
    \ \")\n            words.foreach(word => {\n                if (word.startsWith(\"\
    I\")) {\n                    boredoms += word\n                }\n           \
    \ })\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredom = \"I\" in sentence\n            if (boredom)\
    \ {\n                boredoms += sentence\n            }\n        })\n       \
    \ boredoms.size", "        val boredoms = mutable.HashSet[String]()\n        val\
    \ sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart >= 0) {\n                boredoms += sentence\n    \
    \        }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words){\n           \
    \ if(word.startsWith(\"I\")){\n                boredoms += word\n            }\n\
    \        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"I\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.ListBuffer[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).toList\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"I\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.count(_ == \"I\")", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\".toRegex)\n\
    \        sentences.foreach(sentence => {\n            val boredoms = sentence.split(\"\
    I\".toRegex).length\n            boredoms += boredoms\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.!?]\".toList)\n        sentences.foreach(sentence => {\n            val words\
    \ = sentence.split(\" \")\n            words.foreach(word => {\n             \
    \   if (word.startsWith(\"I\")) {\n                    boredoms += word\n    \
    \            }\n            })\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    .toRegex)\n        sentences.foreach(sentence => {\n            val boredom =\
    \ \"I\".equals(sentence(0))\n            if (boredom) boredoms += sentence\n \
    \       })\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Int]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n    \
    \    sentences.foreach(sentence => {\n            val boredomWords = sentence.split(\"\
    i\").map(_.toLowerCase)\n            boredomWords.foreach(word => {\n        \
    \        boredoms += (word -> 1)\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashMap[String, Long]()\n        val sentences =\
    \ S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence =>\
    \ {\n            val boredoms = sentence.split(\"(?i)^I\").length\n          \
    \  boredoms += (sentence -> boredoms)\n        })\n        boredoms.values.sum",
  "        val boredoms = mutable.HashMap[String, Long]()\n        val words = S.split(\"\
    \\\\.\")\n        for(word <- words) {\n            if(word.startsWith(\"I\"))\
    \ {\n                boredoms += (word -> 1)\n            }\n        }\n     \
    \   boredoms.values.sum", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\.\")\n        for(word <- words) {\n      \
    \      if(word.startsWith(\"I\")) {\n                boredoms += word\n      \
    \      }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  val boredom = \"I\".equals(word)\n            if(boredom) {\n             \
    \   boredoms += word\n            }\n        }\n        boredoms.size", "    \
    \    val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredoms = sentence.split(\"i\").map(_.toLowerCase).toSet\n        \
    \    boredoms.foreach(boredom => boredoms += boredom)\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashMap[String, Long]()\n        val sentences =\
    \ S.split(\"[.?!]\".toRegex)\n        sentences.foreach(sentence => {\n      \
    \      val boredomWords = sentence.split(\"I\".toRegex).length\n            boredoms\
    \ += (sentence -> boredomWords)\n        })\n        boredoms.values.sum", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\".toList)\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    boredoms.size", "        val boredoms = mutable.HashSet[String]()\n     \
    \   val sentences = S.split(\"[.!?]\").map(_.trim).filter(_.nonEmpty)\n      \
    \  sentences.foreach(sentence => {\n            val boredomWords = sentence.split(\"\
    \\\\s+\").filter(_.nonEmpty)\n            boredomWords.foreach(word => {\n   \
    \             if (word.startsWith(\"I\")) {\n                    boredoms += word\n\
    \                }\n            })\n        })\n        boredoms.size", "    \
    \    val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredom = \"I\".equals(sentence)\n            if (boredom) boredoms\
    \ += sentence\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\".toList)\n        sentences.foreach(sentence\
    \ => {\n            val boredoms = sentence.startsWith(\"I\")\n            boredoms\
    \ += sentence\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\".toRegex)\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \".toRegex)\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += word\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size"]
stop_tokens:
- "\n    }\n"
