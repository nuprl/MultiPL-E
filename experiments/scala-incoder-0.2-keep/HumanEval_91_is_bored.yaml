name: HumanEval_91_is_bored
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You'll be given a string of words, and your task is to count the number\n\
  \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
  \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    //\
  \ >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is blue.\
  \ The sun is shining. I love this weather\")\n    // 1\n    def isBored(S : String)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello\
  \ world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n  \
  \  assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) ==\
  \ (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill\
  \ It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) ==\
  \ (0l));\n    }\n\n}\n"
completions: ["        val boredoms = mutable.HashSet[String]()\n        val sentences\
    \ = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach { sentence\
    \ =>\n            if (sentence.startsWith(\"I\")) {\n                boredoms\
    \ += sentence\n            }\n        }\n        boredoms.size", "        val\
    \ boredoms = mutable.HashMap[String, Long]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredomWords = sentence.split(\"\\\\s+\").filter(_.startsWith(\"i\"\
    ))\n            boredomWords.foreach(word => {\n                boredoms += (word\
    \ -> 1L)\n            })\n        })\n        boredoms.values.sum", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    )\n        sentences.foreach(sentence => {\n            val boredoms = sentence.split(\"\
    I\").length\n            boredoms += sentence\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashMap[String, Long]()\n        val sentences =\
    \ S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence =>\
    \ {\n            val boredoms = sentence.split(\"i\").map(_.toLowerCase)\n   \
    \         boredoms.foreach(boredom => {\n                boredoms.put(boredom,\
    \ boredoms.get(boredom) + 1)\n            })\n        })\n        boredoms.values.sum",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach(sentence => {\n            if\
    \ (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n     \
    \       }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredoms = sentence.split(\"i\").map(_.toLowerCase)\n\
    \            boredoms.foreach(boredom => {\n                boredoms += boredom\n\
    \            })\n        })\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredom = \"I\" in sentence\n            if (boredom)\
    \ boredoms += sentence\n        })\n        boredoms.size", "        val boredoms\
    \ = mutable.HashMap[String, Int]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach { sentence =>\n            val\
    \ boredomWords = sentence.split(\"\\\\s+\").filter(_.startsWith(\"i\"))\n    \
    \        boredomWords.foreach { boredomWord =>\n                boredoms += (boredomWord\
    \ -> 1)\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\".toRegex).map(_.toLowerCase)\n\
    \        sentences.foreach(sentence => {\n            val boredom = \"I\".equals(sentence(0))\n\
    \            boredoms += sentence if boredom\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\".toRegex)\n        sentences.foreach(sentence => {\n            val boredoms\
    \ = sentence.split(\"I\".toRegex).length\n            boredoms += boredoms\n \
    \       })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredoms = sentence.split(\"i\").map(_.toLowerCase)\n\
    \            boredoms.foreach(boredom => {\n                boredoms += boredom\n\
    \            })\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"I\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val words = S.split(\" \")\n \
    \       for(word <- words) {\n            if(word.startsWith(\"I\")) {\n     \
    \           boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            val boredoms =\
    \ sentence.startsWith(\"I\")\n            boredoms += sentence\n        })\n \
    \       boredoms.size", "        val boredoms = mutable.HashSet[String]()\n  \
    \      val words = S.split(\" \")\n        words.foreach(w => {\n            if\
    \ (w.startsWith(\"I\")) {\n                boredoms += w\n            }\n    \
    \    })\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        for (sentence <- sentences)\
    \ {\n            if (sentence.startsWith(\"I\")) {\n                boredoms +=\
    \ sentence\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach { sentence =>\n            val boredomStart = sentence.indexOf(\"\
    i\")\n            if (boredomStart != -1) {\n                boredoms.add(sentence.substring(0,boredomStart))\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        for (sentence <- sentences)\
    \ {\n            if (sentence.startsWith(\"I\")) {\n                boredoms +=\
    \ sentence\n            }\n        }\n        boredoms.size"]
stop_tokens:
- "\n    }\n"
