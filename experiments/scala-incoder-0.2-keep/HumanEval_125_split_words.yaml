name: HumanEval_125_split_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string of words, return a list of words split on whitespace, if\
  \ no whitespaces exists in the text you\n    // should split on commas ',' if no\
  \ commas exists you should return the number of lower-case letters with odd order\
  \ in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    //\
  \ Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n\
  \    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    // split_words(\"\
  abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String], Long] =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
  \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
  Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n \
  \   assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
  )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
  \")).equals(0l));\n    }\n\n}\n"
completions: ["        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ {\n            Left(Nil)\n        } else {\n            val wordList = words.toList\n\
    \            val evenWords = wordList.filter(word => word.length % 2 == 0)\n \
    \           val oddWords = wordList.filter(word => word.length % 2 != 0)\n   \
    \         val evenWordsCount = evenWords.map(word => word.length).sum\n      \
    \      val oddWordsCount = oddWords.map(word => word.length).sum\n           \
    \ val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.", "        val words = txt.split(\"\\\\s+\")\n        val numWords\
    \ = words.length\n        if (numWords == 0) Left(List[String]())\n        else\
    \ if (numWords == 1) Right(words(0))\n        else {\n            val evenWords\
    \ = words.filter(word => word.length % 2 == 0)\n            val oddWords = words.filter(word\
    \ => word.length % 2 != 0)\n            val evenWordsCount = evenWords.map(_.length).sum\n\
    \            val oddWordsCount = oddWords.map(_.length).sum\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            if (evenWordsCountInt == oddWordsCountInt) {\n                Right(evenWords)\n\
    \            } else {\n                Left(oddWords)\n            }\n       \
    \ }", "        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        val\
    \ commaWords = words.filter(_.contains(\",\"))\n        val commaWordsCount =\
    \ commaWords.length\n        val wordCount = words.length\n        val evenWordsCount\
    \ = wordCount - commaWordsCount\n        val oddWordsCount = evenWordsCount /\
    \ 2\n        val evenWordsCountString = evenWordsCount.toString\n        val oddWordsCountString\
    \ = oddWordsCount.toString\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0,\
    \ oddWordsCountString.length - 1)\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0,\
    \ oddWordsCountString.length - 1)\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0,\
    \ oddWordsCountString.length - 1)\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0,\
    \ oddWordsCountString.length - 1)\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0,\
    \ oddWordsCountString.length - 1)\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0,\
    \ oddWordsCountString.length - 1)\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0,\
    \ oddWordsCountString.length - 1)\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0,\
    \ oddWordsCountString.length - 1)\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0,\
    \ oddWordsCountString.length - 1)\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0, ",
  "        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        val commas\
    \ = txt.split(\"\\\\s*,\\\\s*\").filter(_.nonEmpty)\n        val letters = txt.split(\"\
    [a-z]\").filter(_.nonEmpty)\n        val lettersWithOddOrder = txt.split(\"[a-z]\"\
    ).map(x => (x.toInt, x.toInt)).toMap\n        val evenLetters = txt.split(\"[a-z]\"\
    ).map(x => (x.toInt, x.toInt)).toMap\n        val oddLetters = txt.split(\"[a-z]\"\
    ).map(x => (x.toInt, x.toInt)).toMap\n        val evenLettersWithOddOrder = txt.split(\"\
    [a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val oddLettersWithOddOrder\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val evenLettersWithOddOrderAndCommas\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val oddLettersWithOddOrderAndCommas\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val evenLettersWithOddOrderAndCommasAndLetters\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val oddLettersWithOddOrderAndCommasAndLetters\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val evenLettersWithOddOrderAndCommasAndLettersWithOddOrder\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val oddLettersWithOddOrderAndCommasAndLettersWithOddOrder\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val evenLettersWithOddOrderAndCommasAndLettersWithOddOrderAndCommas\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val oddLettersWithOddOrderAndCommasAndLettersWithOddOrderAndCommas\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val evenLettersWithOddOrderAndCommasAndLettersWithOddOrderAndCommasAndLetters\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.", "        val words = txt.split(\"\
    \\\\s+\").filter(_.nonEmpty)\n        if (words.length == 0) Left(Nil)\n     \
    \   else if (words.length == 1) Right(words.head.length)\n        else Right(words.map(_.length).sum)",
  "        val words = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val wordList = words.toList\n            val evenWords = wordList.filter(word\
    \ => word.forall(_.isLetter) && word.count(_ == 'a') % 2 == 0)\n            val\
    \ oddWords = wordList.filter(word => word.forall(_.isLetter) && word.count(_ ==\
    \ 'a') % 2 != 0)\n            val evenLetters = evenWords.map(word => word.count(_\
    \ == 'a'))\n            val oddLetters = oddWords.map(word => word.count(_ ==\
    \ 'a'))\n            val evenLettersCount = evenLetters.sum\n            val oddLettersCount\
    \ = oddLetters.sum\n            val evenLettersCountString = evenLetters.mkString(\"\
    ,\")\n            val oddLettersCountString = oddLetters.mkString(\",\")\n   \
    \         val evenLettersCountLong = evenLettersCount.toLong\n            val\
    \ oddLettersCountLong = oddLettersCount.toLong\n            val evenLettersCountString\
    \ = evenLettersCountLong.toString\n            val oddLettersCountString = oddLettersCountLong.toString\n\
    \            val evenLettersCountLong = evenLettersCountString.toLong\n      \
    \      val oddLettersCountLong = oddLettersCountString.toLong\n            val\
    \ evenLettersCountString = evenLettersCountLong.toString\n            val oddLettersCountString\
    \ = oddLettersCountLong.toString\n            val evenLettersCountLong = evenLettersCountString.toLong\n\
    \            val oddLettersCountLong = oddLettersCountString.toLong\n        \
    \    val evenLettersCountString = evenLettersCountLong.toString\n            val\
    \ oddLettersCountString = oddLettersCountLong.toString\n            val evenLettersCountLong\
    \ = evenLettersCountString.toLong\n            val oddLettersCountLong = oddLettersCountString.toLong\n\
    \            val evenLettersCountString = evenLettersCountLong.toString\n    \
    \        val oddLettersCountString = oddLettersCountLong.toString\n          \
    \  val evenLettersCountLong = evenLettersCountString.toLong\n            val oddLettersCountLong\
    \ = oddLettersCountString.toLong\n            val evenLettersCountString = evenLettersCountLong.toString\n\
    \            val oddLettersCountString = oddLettersCountLong.toString\n      \
    \      val evenLettersCountLong = evenLettersCountString.toLong\n            val\
    \ oddLettersCountLong = oddLetters", "        val words = txt.split(\"\\\\s+\"\
    )\n        if (words.length == 0) Right(words.size)\n        if (words.length\
    \ == 1) Right(words.size)\n        if (words.length == 2) Right(words.size)\n\
    \        if (words.length == 3) Right(words.size)\n        if (words.length ==\
    \ 4) Right(words.size)\n        if (words.length == 5) Right(words.size)\n   \
    \     if (words.length == 6) Right(words.size)\n        if (words.length == 7)\
    \ Right(words.size)\n        if (words.length == 8) Right(words.size)\n      \
    \  if (words.length == 9) Right(words.size)\n        if (words.length == 10) Right(words.size)\n\
    \        if (words.length == 11) Right(words.size)\n        if (words.length ==\
    \ 12) Right(words.size)\n        if (words.length == 13) Right(words.size)\n \
    \       if (words.length == 14) Right(words.size)\n        if (words.length ==\
    \ 15) Right(words.size)\n        if (words.length == 16) Right(words.size)\n \
    \       if (words.length == 17) Right(words.size)\n        if (words.length ==\
    \ 18) Right(words.size)\n        if (words.length == 19) Right(words.size)\n \
    \       if (words.length == 20) Right(words.size)\n        if (words.length ==\
    \ 21) Right(words.size)\n        if (words.length == 22) Right(words.size)\n \
    \       if (words.length == 23) Right(words.size)\n        if (words.length ==\
    \ 24) Right(words.size)\n        if (words.length == 25) Right(words.size)\n \
    \       if (words.length == 26) Right(words.size)\n        if (words.length ==\
    \ 27) Right(words.size)\n        if (words.length == 28) Right(words.size)\n \
    \       if (words.length == 29) Right(words.size)\n        if (words.length ==\
    \ 30) Right(words.size)\n        if (words.length == 31) Right(words.size)\n \
    \       if (words.length == 32) Right(words.size)\n        if (words.length ==\
    \ 33) Right(words.size)\n        if (words.length == 34) Right(words.size)\n \
    \       if (words.length == 35) Right(words.size)\n        if (words.length ==\
    \ 36) Right(words.size)\n        if (words.length == 37) Right(words.size)\n \
    \       if (words.length == 38) Right(words.size)\n        if (words.length ==\
    \ 39) Right(words.size)\n        if (words.length == 40) Right(words.size)\n \
    \       if (words.length == 41) Right(words.size)\n        if (words.length ==\
    \ 42) Right(words.size)\n        if (words.length == 43) Right(words.size)\n \
    \       if (words.length == 44) Right(words.size)\n        if (words.length ==\
    \ 45) Right(words.size)\n        if (words.length == 46) Right(words.size)\n \
    \       if (words.length == 47) ", "        val words = txt.split(\"\\\\s+\")\n\
    \        if (words.length == 0) Left(Nil)\n        else if (words.length == 1)\
    \ Right(words.length)\n        else {\n            val even = words.filter(w =>\
    \ w.length == w.toLowerCase + 1).filter(w => w.toLowerCase % 2 == 0)\n       \
    \     val odd = words.filter(w => w.length == w.toLowerCase + 1).filter(w => w.toLowerCase\
    \ % 2 != 0)\n            val evenCount = even.count(w => w.toLowerCase == w.toLowerCase\
    \ + 1)\n            val oddCount = odd.count(w => w.toLowerCase == w.toLowerCase\
    \ + 1)\n            val count = evenCount + oddCount\n            Right(List(even,\
    \ odd, count))\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val wordSet = mutable.Set[String]()\n           \
    \ val wordList = mutable.ListBuffer[String]()\n            words.foreach(word\
    \ => {\n                val wordSet = wordSet.toSet\n                val wordList\
    \ = wordList.toList\n                if (wordSet.isEmpty || wordSet.contains(word))\
    \ {\n                    wordList += word\n                    wordSet += word\n\
    \                }\n            })\n            val odd = wordList.filter(word\
    \ => wordSet.toSet.count(_ == word) % 2 == 1).length\n            Right(wordList.toList\
    \ :+ odd)\n        }", "        val words = txt.split(\"\\\\s+\")\n        if\
    \ (words.length == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(_.length == words.length).map(_.toLowerCase\
    \ + words.last).toSet\n            val odd = words.filter(_.length == words.length).map(_.toLowerCase\
    \ + words.last).filter(x => !even.contains(x))\n            Right(odd.length)\n\
    \        }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val even = words.filter(word => word.length % 2 ==\
    \ 0)\n            val odd = words.filter(word => word.length % 2 != 0)\n     \
    \       val evenSize = even.map(_.length).sum\n            val oddSize = odd.map(_.length).sum\n\
    \            val evenOrder = even.map(_.toLowerCase).map(ord).sum\n          \
    \  val oddOrder = odd.map(_.toLowerCase).map(ord).sum\n            val evenOrderOdd\
    \ = evenOrder + oddOrder\n            val oddOrderEven = oddOrder + evenOrder\n\
    \            val evenOrderEvenOdd = evenOrderEven + oddOrderEven\n           \
    \ val oddOrderEvenEven = oddOrderEven + evenOrderEven\n            val evenOrderEvenEvenOdd\
    \ = evenOrderEvenOdd + oddOrderEvenEven\n            val oddOrderEvenEvenEven\
    \ = oddOrderEvenEven + evenOrderEvenEven\n            val evenOrderEvenEvenEvenOdd\
    \ = evenOrderEvenEvenOdd + oddOrderEvenEvenEven\n            val oddOrderEvenEvenEvenEven\
    \ = oddOrderEvenEvenEven + evenOrderEvenEvenEven\n            val evenOrderEvenEvenEvenEvenOdd\
    \ = evenOrderEvenEvenEvenOdd + oddOrderEvenEvenEvenEven\n            val oddOrderEvenEvenEvenEvenEven\
    \ = oddOrderEvenEvenEvenEven + evenOrderEvenEvenEvenEven\n            val evenOrderEvenEvenEvenEvenEvenOdd\
    \ = evenOrderEvenEvenEvenEvenOdd + oddOrderEvenEvenEvenEven\n            val oddOrderEvenEvenEvenEvenEven\
    \ = oddOrderEvenEvenEvenEven + evenOrderEvenEvenEvenEven\n            val evenOrderEvenEvenEvenEvenEvenOdd\
    \ = evenOrderEvenEvenEvenEvenOdd + oddOrderEvenEvenEvenEven\n            val oddOrderEvenEvenEvenEvenEven\
    \ = oddOrderEvenEvenEvenEven + evenOrderEvenEvenEvenEven\n            val evenOrderEvenEvenEvenEvenEvenEvenOdd\
    \ = evenOrderEvenEvenEvenEvenEvenOdd + oddOrderEvenEvenEvenEvenEven\n        \
    \    val oddOrderEvenEvenEvenEvenEvenEven = oddOrderEvenEvenEvenEven + evenOrderEvenEvenEvenEven\n\
    \            val evenOrderEvenEvenEvenEvenEvenEvenOdd = evenOrderEvenEvenEvenEvenEvenOdd\
    \ + oddOrderEvenEvenEvenEvenEven\n            val oddOrderEvenEvenEvenEvenEvenEven\
    \ = oddOrderEvenEvenEven", "        val words = txt.split(\"\\\\s+\")\n      \
    \  val noWhiteSpaceWords = words.filter(_.nonEmpty)\n        val noCommaWords\
    \ = noWhiteSpaceWords.filter(_.contains(\",\"))\n        val noLettersWords =\
    \ noCommaWords.filter(_.toLowerCase == \"abcdefghijklmnopqrstuvwxyz\".toLowerCase\
    \ || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\"\
    .toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase ||\
    \ _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\"\
    .toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase ||\
    \ _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\"\
    .toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase ||\
    \ _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\"\
    .toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase ||\
    \ _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\"\
    .toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase ||\
    \ _.toLowerCase == \"abcdefghijklmnopqrstuvwxy", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length == 0) Right(words.size)\n        else if (words.length\
    \ == 1) Right(words.size)\n        else if (words.length == 2) Right(words.size)\n\
    \        else if (words.length == 3) Right(words.size)\n        else if (words.length\
    \ == 4) Right(words.size)\n        else if (words.length == 5) Right(words.size)\n\
    \        else if (words.length == 6) Right(words.size)\n        else if (words.length\
    \ == 7) Right(words.size)\n        else if (words.length == 8) Right(words.size)\n\
    \        else if (words.length == 9) Right(words.size)\n        else if (words.length\
    \ == 10) Right(words.size)\n        else if (words.length == 11) Right(words.size)\n\
    \        else if (words.length == 12) Right(words.size)\n        else if (words.length\
    \ == 13) Right(words.size)\n        else if (words.length == 14) Right(words.size)\n\
    \        else if (words.length == 15) Right(words.size)\n        else if (words.length\
    \ == 16) Right(words.size)\n        else if (words.length == 17) Right(words.size)\n\
    \        else if (words.length == 18) Right(words.size)\n        else if (words.length\
    \ == 19) Right(words.size)\n        else if (words.length == 20) Right(words.size)\n\
    \        else if (words.length == 21) Right(words.size)\n        else if (words.length\
    \ == 22) Right(words.size)\n        else if (words.length == 23) Right(words.size)\n\
    \        else if (words.length == 24) Right(words.size)\n        else if (words.length\
    \ == 25) Right(words.size)\n        else Left(words.size)", "        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val commaWordsCount = commaWords.map(_.length).sum\n        val\
    \ lowerCaseWords = words.filter(_.forall(_.isLower))\n        val lowerCaseWordsCount\
    \ = lowerCaseWords.map(_.length).sum\n        val oddLetterWords = words.filter(_.forall(_.toInt\
    \ % 2 != 0))\n        val oddLetterWordsCount = oddLetterWords.map(_.length).sum\n\
    \        val result = if (commaWordsCount == 0) List(lowerCaseWordsCount + oddLetterWordsCount)\n\
    \        else List(commaWordsCount, lowerCaseWordsCount + oddLetterWordsCount)\n\
    \        Right(result)", "        val words = txt.split(\"\\\\s+\")\n        if\
    \ (words.length == 0) Left(List[String]())\n        else if (words.length == 1)\
    \ Right(words.length)\n        else {\n            val wordSet = mutable.Set[String]()\n\
    \            val wordList = List[String]()\n            words.foreach(word =>\
    \ {\n                if (word.length == 0) return\n                if (wordSet.contains(word))\
    \ return\n                wordSet += word\n                wordList += word\n\
    \            })\n            Right(wordList)\n        }", "        val words =\
    \ txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.length)\n        else {\n            val\
    \ upperCaseLetters = words.filter(_.toLowerCase == \"a\" || _.toLowerCase == \"\
    b\" || _.toLowerCase == \"c\" || _.toLowerCase == \"d\" || _.toLowerCase == \"\
    e\" || _.toLowerCase == \"f\" || _.toLowerCase == \"g\" || _.toLowerCase == \"\
    h\" || _.toLowerCase == \"i\" || _.toLowerCase == \"j\" || _.toLowerCase == \"\
    k\" || _.toLowerCase == \"l\" || _.toLowerCase == \"m\" || _.toLowerCase == \"\
    n\" || _.toLowerCase == \"o\" || _.toLowerCase == \"p\" || _.toLowerCase == \"\
    q\" || _.toLowerCase == \"r\" || _.toLowerCase == \"s\" || _.toLowerCase == \"\
    t\" || _.toLowerCase == \"u\" || _.toLowerCase == \"v\" || _.toLowerCase == \"\
    w\" || _.toLowerCase == \"x\" || _.toLowerCase == \"y\" || _.toLowerCase == \"\
    z\").length\n            val lowerCaseLetters = words.filter(_.toLowerCase ==\
    \ \"a\" || _.toLowerCase == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase ==\
    \ \"d\" || _.toLowerCase == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase ==\
    \ \"g\" || _.toLowerCase == \"h\" || _.toLowerCase == \"i\" || _.toLowerCase ==\
    \ \"j\" || _.toLowerCase == \"k\" || _.toLowerCase == \"l\" || _.toLowerCase ==\
    \ \"m\" || _.toLowerCase == \"n\" || _.toLowerCase == \"o\" || _.toLowerCase ==\
    \ \"p\" || _.toLowerCase == \"q\" || _.toLowerCase == \"r\" || _.toLowerCase ==\
    \ \"s\" || _.toLowerCase == \"t\" || _.toLowerCase == \"u\" || _.toLowerCase ==\
    \ \"v\" || _.toLowerCase == \"w\" || _.toLowerCase == \"x\" || _.toLowerCase ==\
    \ \"y\" || _.toLowerCase == \"z\").length\n            val oddLetters = words.filter(_.toLowerCase\
    \ == \"a\" || _.toLowerCase == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase\
    \ == \"d\" || _.toLowerCase == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase\
    \ == \"g\" || _.toLowerCase == \"h\" || _.toLowerCase == \"i\" || _.toLowerCase\
    \ == \"j\" || _.toLowerCase == \"k\" || _.toLowerCase == \"l\" || _.toLower",
  "        val words = txt.split(\"\\\\s+\")\n        val numLetters = words.map(_.length).sum\n\
    \        val numWords = words.length\n        val numCommas = words.count(_.contains(\"\
    ,\"))\n        val numCommasEven = words.count(_.contains(\",\") && _.toCharArray.forall(_.isDigit))\n\
    \        val numCommasOdd = words.count(_.contains(\",\") && !_.toCharArray.forall(_.isDigit))\n\
    \        val numCommasEvenOdd = words.count(_.contains(\",\") && _.toCharArray.forall(_.isDigit)\
    \ && _.toCharArray.forall(_.isDigit))\n        val numCommasEvenOddOdd = words.count(_.contains(\"\
    ,\") && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit) &&\
    \ _.toCharArray.forall(_.isDigit))\n        val numCommasEvenOddEvenOdd = words.count(_.contains(\"\
    ,\") && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit) &&\
    \ _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit))\n      \
    \  val numCommasEvenOddEvenOddOdd = words.count(_.contains(\",\") && _.toCharArray.forall(_.isDigit)\
    \ && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit)\
    \ && _.toCharArray.forall(_.isDigit))\n        val numCommasEvenOddEvenOddEvenOdd\
    \ = words.count(_.contains(\",\") && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit)\
    \ && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit)\
    \ && _.toCharArray.forall(_.isDigit))\n        val numCommasEvenOddEvenOddEvenOddOdd\
    \ = words.count(_.contains(\",\") && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit)\
    \ && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit)\
    \ && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit))\n   \
    \     val numCommasEvenOddEvenOddEvenOdd", "        val words = txt.split(\"\\\
    \\s+\")\n        if (words.isEmpty) Left(Nil)\n        else if (words.size ==\
    \ 1) Right(words.head.toLong)\n        else Right(words.map(_.toLong).sum)", " \
    \       val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Left(Nil)\n\
    \        else if (words.size == 1) Right(words.head.toLong)\n        else Left(words.tail.map(_.toLowerCase).filter(_.isLetter).map(_.toInt).sum)",
  "        val words = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        if (words.length == 1) Right(words.size)\n        if (words.length ==\
    \ 2) Right(words.size)\n        if (words.length == 3) Right(words.size)\n   \
    \     if (words.length == 4) Right(words.size)\n        if (words.length == 5)\
    \ Right(words.size)\n        if (words.length == 6) Right(words.size)\n      \
    \  if (words.length == 7) Right(words.size)\n        if (words.length == 8) Right(words.size)\n\
    \        if (words.length == 9) Right(words.size)\n        if (words.length ==\
    \ 10) Right(words.size)\n        if (words.length == 11) Right(words.size)\n \
    \       if (words.length == 12) Right(words.size)\n        if (words.length ==\
    \ 13) Right(words.size)\n        if (words.length == 14) Right(words.size)\n \
    \       if (words.length == 15) Right(words.size)\n        if (words.length ==\
    \ 16) Right(words.size)\n        if (words.length == 17) Right(words.size)\n \
    \       if (words.length == 18) Right(words.size)\n        if (words.length ==\
    \ 19) Right(words.size)\n        if (words.length == 20) Right(words.size)\n \
    \       if (words.length == 21) Right(words.size)\n        if (words.length ==\
    \ 22) Right(words.size)\n        if (words.length == 23) Right(words.size)\n \
    \       if (words.length == 24) Right(words.size)\n        if (words.length ==\
    \ 25) Right(words.size)\n        if (words.length == 26) Right(words.size)\n \
    \       if (words.length == 27) Right(words.size)\n        if (words.length ==\
    \ 28) Right(words.size)\n        if (words.length == 29) Right(words.size)\n \
    \       if (words.length == 30) Right(words.size)\n        if (words.length ==\
    \ 31) Right(words.size)\n        if (words.length == 32) Right(words.size)\n \
    \       if (words.length == 33) Right(words.size)\n        if (words.length ==\
    \ 34) Right(words.size)\n        if (words.length == 35) Right(words.size)\n \
    \       if (words.length == 36) Right(words.size)\n        if (words.length ==\
    \ 37) Right(words.size)\n        if (words.length == 38) Right(words.size)\n \
    \       if (words.length == 39) Right(words.size)\n        if (words.length ==\
    \ 40) Right(words.size)\n        if (words.length == 41) Right(words.size)\n \
    \       if (words.length == 42) Right(words.size)\n        if (words.length ==\
    \ 43) Right(words.size)\n        if (words.length == 44) Right(words.size)\n \
    \       if (words.length == 45) Right(words.size)\n        if (words.length ==\
    \ 46) Right(words.size)\n        if (words.length == 47) "]
stop_tokens:
- "\n    }\n"
