name: HumanEval_152_compare
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // I think we all remember that feeling when the result of some long-awaited\n\
  \    // event is finally known. The feelings and thoughts you have at that moment\
  \ are\n    // definitely worth noting down and comparing.\n    // Your task is to\
  \ determine if a person correctly guessed the results of a number of matches.\n\
  \    // You are given two arrays of scores and guesses of equal length, where each\
  \ index shows a match. \n    // Return an array of the same length denoting how\
  \ far off each guess was. If they have guessed correctly,\n    // the value is 0,\
  \ and if not, the value is the absolute difference between the guess and the score.\n\
  \    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
  \    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    def compare(game\
  \ : List[Long], guess : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
completions: ["        val gameScores = game.map(x => if (x == 0) 0 else x)\n    \
    \    val guessScores = guess.map(x => if (x == 0) 0 else x)\n        val gameScore\
    \ = gameScores.sum\n        val guessScore = guessScores.sum\n        val diffs\
    \ = guessScores.zip(gameScores).map(x => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n\
    \        diffs.toList", "        val gameLen = game.length\n        val guessLen\
    \ = guess.length\n        val result = new Array[Long](guessLen)\n        var\
    \ i = 0\n        while (i < guessLen) {\n            val gameScore = game(i)\n\
    \            val guessScore = guess(i)\n            val diff = guessScore - gameScore\n\
    \            result(i) = if (gameScore == guessScore) 0 else Math.abs(diff)\n\
    \            i += 1\n        }\n        result", "        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val results = new mutable.ArrayBuffer[Long]()\n\
    \        val scoreDiffs = new mutable.ArrayBuffer[Long]()\n        val guessesDiffs\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesDiffsCount = new mutable.ArrayBuffer[Long]()\n\
    \        val guessesCount = new mutable.ArrayBuffer[Long]()\n        val guessesCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCount = new\
    \ mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCount = new mutable.ArrayBuffer[Long]()\n\
    \        val guessesCountCountCountCountCount = new mutable.ArrayBuffer[Long]()\n\
    \        val guessesCountCountCountCountCountCount = new mutable.ArrayBuffer[Long]()\n\
    \        val guessesCountCountCountCountCountCountCount = new mutable.ArrayBuffer[Long]()\n\
    \        val guessesCountCountCountCountCountCountCountCount = new mutable.ArrayBuffer[Long]()\n\
    \        val guessesCountCountCountCountCountCountCountCountCount = new mutable.ArrayBuffer[Long]()\n\
    \        val guessesCountCountCountCountCountCountCountCountCountCount = new mutable.ArrayBuffer[Long]()\n\
    \        val guessesCountCountCountCountCountCountCountCountCountCountCount =\
    \ new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCount",
  "        val guesses = gues\n        val scores = game\n        val guessesCount\
    \ = guesses.size\n        val scoresCount = scores.size\n        val result =\
    \ new Array[Long](guessesCount)\n        val guessesRemaining = guessesCount -\
    \ 1\n        val scoresRemaining = scoresCount - 1\n        val guessesRemainingInScores\
    \ = guessesRemaining / scoresCount\n        val scoresRemainingInGuesses = scoresRemaining\
    \ / guessesCount\n        val guessesRemainingInGuessesRemaining = guessesRemainingInGuesses\
    \ * scoresRemainingInGuesses\n        val scoresRemainingInGuessesRemainingInScores\
    \ = scoresRemainingInGuessesRemaining / scoresCount\n        val guessesRemainingInGuessesRemainingInScoresRemaining\
    \ = guessesRemainingInGuessesRemainingInScores * scoresRemainingInGuessesRemainingInScores\n\
    \        val guessesRemainingInGuessesRemainingInScoresRemainingInGuesses = guessesRemainingInGuessesRemainingInScoresRemaining\
    \ / guessesCount\n        val scoresRemainingInGuessesRemainingInScoresRemainingInGuessesRemaining\
    \ = scoresRemainingInGuessesRemainingInScoresRemainingInGuesses * guessesRemainingInGuessesRemainingInScoresRemainingInGuesses\n\
    \        val guessesRemainingInGuessesRemainingInScoresRemainingInGuessesRemainingInScores\
    \ = guessesRemainingInGuessesRemainingInScoresRemainingInGuessesRemaining * scoresRemainingInGuessesRemainingInScoresRemainingInGuessesRemaining\n\
    \        val guessesRemainingInGuessesRemainingInScoresRemainingInGuessesRemainingInScoresRemainingInGuesses\
    \ = guessesRemainingInGuessesRemainingInScoresRemainingInGuessesRemainingInScoresRemaining\
    \ * guessesRemainingInGuessesRemainingInScoresRemainingInGuessesRemainingInScoresRemainingInGuesses\n\
    \        val guessesRemainingInGuessesRemainingInScoresRemainingInGuessesRemainingInScoresRemainingInGuessesRemainingInScores\
    \ = guessesRemainingInGuessesRemainingInScoresRemainingInG", "        val gameSize\
    \ = game.size\n        val guessSize = guess.size\n        val result = new Array[Long](guessSize)\n\
    \        val gameScores = game.zipWithIndex.map{case (score, index) => score}.toList\n\
    \        val guessScores = guess.zipWithIndex.map{case (score, index) => score}.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_ % gameSize)\n        val guessScoreMap\
    \ = guessScores.groupBy(_ % guessSize)\n        guessScoreMap.foreach {\n    \
    \        case (guessIndex, guessScores) =>\n                val guessScore = guessScores.head\n\
    \                val gameScore = gameScores(guessIndex % gameSize)\n         \
    \       val gameScoreDiff = gameScore - guessScore\n                val guessScoreDiff\
    \ = guessScore - gameScore\n                result(guessIndex) = gameScoreDiff\n\
    \        }\n        result", "        val gameLen = game.length\n        val guessLen\
    \ = guess.length\n        val result = new Array[Long](guessLen)\n        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score }\n      \
    \  val guessScores = guess.zipWithIndex.map { case (score, index) => score }\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreKeys = gameScoreMap.keySet\n        val guessScoreKeys =\
    \ guessScoreMap.keySet\n        val gameScoreKeySet = gameScoreKeys.toSet\n  \
    \      val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySet", "        val gameLen\
    \ = game.length\n        val guessLen = guess.length\n        val result = new\
    \ Array[Long](guessLen)\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        var gameScore = 0\n        var guessScore = 0\n        var diff =\
    \ 0\n        while(i < guessLen && j < gameLen) {\n            gameScore = game(i)\n\
    \            guessScore = guess(j)\n            diff = guessScore - gameScore\n\
    \            if(diff < 0) {\n                diff = -diff\n            }\n   \
    \         result(k) = diff\n            i += 1\n            j += 1\n         \
    \   k += 1\n        }\n        result", "        val gameScores = game.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessScores = guess.zipWithIndex.map(x =>\
    \ (x._2, x._1)).toMap\n        val guessesWithScores = guess.zip(game).toMap\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScores = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => ", "        val\
    \ gameLength = game.size\n        val guessLength = guess.size\n        val gameScores\
    \ = game.zip(guess).map { case (gameScore, guessScore) => gameScore - guessScore\
    \ }\n        val guessScores = guess.zip(game).map { case (guessScore, gameScore)\
    \ => guessScore - gameScore }\n        val gameScoreSum = gameScores.sum\n   \
    \     val guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum\
    \ - guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n\
    \        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val gameScoreDiffAbsArray = Array.ofDim[Long](guessLength)\n\
    \        val guessScoreDiffAbsArray = Array.ofDim[Long](gameLength)\n        gameScoreDiffAbsArray.fill(gameScoreDiffAbs)\n\
    \        guessScoreDiffAbsArray.fill(guessScoreDiffAbs)\n        gameScoreDiffAbsArray.zip(guessScoreDiffAbsArray).map\
    \ { case (gameScoreDiffAbs, guessScoreDiffAbs) => guessScoreDiffAbs - gameScoreDiffAbs\
    \ }", "        val gameLength = game.length\n        val guessLength = guess.length\n\
    \        val result = new Array[Long](guessLength)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n\
    \        val guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessScoreValues = guessScoreMap.values.toList\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetIterator = gameScoreKeySet.iterator\n\
    \        val guessScoreKeySetIterator = guessScoreKeySet.iterator\n        val\
    \ gameScoreValueSetIterator = gameScoreValueSet.iterator\n        val guessScoreValueSetIterator\
    \ = guessScoreValueSet.iterator\n        val gameScoreKeySetIteratorSize = gameScoreKeySetIterator.size\n\
    \        val guessScoreKeySetIteratorSize = guessScoreKeySetIterator.size\n  \
    \      val gameScoreValueSetIteratorSize = gameScoreValueSetIterator.size\n  \
    \      val guessScoreValueSetIteratorSize = guessScoreValueSetIterator.size\n\
    \        val gameScoreKeySetIteratorIterator = gameScoreKeySetIterator.iterator\n\
    \        val guessScoreKeySetIteratorIterator = guessScoreKeySetIterator.iterator\n\
    \        val gameScoreValueSetIteratorIterator = gameScoreValueSetIterator.iterator\n\
    \        val guessScoreValueSetIteratorIterator = guessScoreValueSetIterator.iterator\n\
    \        val gameScoreKeySetIteratorIteratorSize = gameScoreKeySetIteratorIterator.size\n\
    \        val guessScoreKeySetIteratorIteratorSize = guessScoreKeySetIteratorIterator.size\n\
    \        val gameScoreValueSetIteratorIteratorSize = gameScoreValueSetIteratorIterator.size\n\
    \        val guessScoreValueSetIteratorIteratorSize = guessScoreValueSetIteratorIterator.size\n\
    \        val gameScoreKeySet", "        val gameLen = game.length\n        val\
    \ guessLen = guess.length\n        val result = new Array[Long](guessLen)\n  \
    \      val gameScores = game.zipWithIndex.filter(_._1 == 0)\n        val guessScores\
    \ = guess.zipWithIndex.filter(_._1 == 0)\n        gameScores.foreach { case (score,\
    \ index) =>\n            val guessIndex = guessScores.indexWhere(_._2 == index)\n\
    \            val diff = abs(guessScores._2 - score)\n            result(guessIndex)\
    \ = diff\n        }\n        result", "        val gameSet = game.distinct\n \
    \       val guessSet = guess.distinct\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSet", "        val gameScores = game.zipWithIndex.map { case\
    \ (score, index) => score -> index }.toMap\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesWithScores\
    \ = guessesScores.map { case (score, index) => index -> score }.toMap\n      \
    \  val guessesWithIndexes = guessesWithScores.map { case (score, index) => index\
    \ -> score }.toMap\n        val guessesWithIndexesSorted = guessesWithIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithScores = guessesWithIndexesSorted.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedWithScoreAndScores\
    \ = guessesWithIndexesSortedWithScores.map { case (score, index) => index -> score\
    \ -> gameScores(index) }.toMap\n        val guessesWithIndexesSortedWithScoreAndScoreAndScores\
    \ = guessesWithIndexesSortedWithScoreAndScores.map { case (score, index, score)\
    \ => index -> score -> score }.toMap\n        val guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScores.map { case (score,\
    \ index, score, score) => index -> score -> score -> score }.toMap\n        val\
    \ guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScores = guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScores.map\
    \ { case (score, index, score, score, score) => index -> score -> score -> score\
    \ -> score }.toMap\n        val guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScoreAndScores.map\
    \ { case (score, index, score, score, score, score) => index -> score -> score\
    \ -> score -> score -> score }.toMap\n        val guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores.map\
    \ { case (score, index, score, score, score, score, score) => index -> score ->\
    \ score -> score -> score -> score -> score }.toMap\n        val guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScoreAnd",
  "        val gameLen = game.length\n        val guessLen = guess.length\n      \
    \  val result = new Array[Long](guessLen)\n        var i = 0\n        while (i\
    \ < guessLen) {\n            var j = 0\n            while (j < gameLen) {\n  \
    \              if (game(j) == guess(i)) {\n                    result(i) = game(j)\n\
    \                    j++\n                }\n                else {\n        \
    \            result(i) = abs(game(j) - guess(i))\n                    j++\n  \
    \              }\n            }\n            i += 1\n        }\n        result",
  "        val gameLen = game.length\n        val guessLen = guess.length\n      \
    \  val result = new Array[Long](guessLen)\n        var i = 0\n        while (i\
    \ < guessLen) {\n            val gameScore = game(i)\n            val guessScore\
    \ = guess(i)\n            val diff = guessScore - gameScore\n            result(i)\
    \ = if (guessScore == gameScore) 0 else diff\n            i += 1\n        }\n\
    \        result", "        val gameSet = game.distinct\n        val guessSet =\
    \ guess.distinct\n        val gameSetSize = gameSet.size\n        val guessSetSize\
    \ = guessSet.size\n        val result = new mutable.ArrayList[Long](guessSetSize)\n\
    \        val gameSetIterator = gameSet.iterator\n        val guessSetIterator\
    \ = guessSet.iterator\n        val gameSetIteratorSize = gameSetIterator.size\n\
    \        val guessSetIteratorSize = guessSetIterator.size\n        val gameSetIteratorCurrent\
    \ = gameSetIterator.next\n        val guessSetIteratorCurrent = guessSetIterator.next\n\
    \        var gameSetIteratorCurrentScore = gameSetIteratorCurrent.toLong\n   \
    \     var guessSetIteratorCurrentScore = guessSetIteratorCurrent.toLong\n    \
    \    var gameSetIteratorCurrentGuess = gameSetIteratorCurrent.toLong\n       \
    \ var guessSetIteratorCurrentGuess = guessSetIteratorCurrent.toLong\n        var\
    \ gameSetIteratorCurrentGuessScore = gameSetIteratorCurrentGuess.toLong\n    \
    \    var guessSetIteratorCurrentGuessScore = guessSetIteratorCurrentGuess.toLong\n\
    \        var gameSetIteratorCurrentGuessGuess = gameSetIteratorCurrentGuess.toLong\n\
    \        var guessSetIteratorCurrentGuessGuess = guessSetIteratorCurrentGuess.toLong\n\
    \        var gameSetIteratorCurrentGuessGuessScore = gameSetIteratorCurrentGuessGuess.toLong\n\
    \        var guessSetIteratorCurrentGuessGuessScore = guessSetIteratorCurrentGuessGuess.toLong\n\
    \        var gameSetIteratorCurrentGuessGuessGuess = gameSetIteratorCurrentGuessGuess.toLong\n\
    \        var guessSetIteratorCurrentGuessGuessGuess = guessSetIteratorCurrentGuessGuess.toLong\n\
    \        var gameSetIteratorCurrentGuessGuessGuessScore = gameSetIteratorCurrentGuessGuessGuess.toLong\n\
    \        var guessSetIteratorCurrentGuessGuessGuessScore = guessSetIteratorCurrentGuessGuessGuess.toLong\n\
    \        var gameSetIteratorCurrentGuessGuessGuessGuess = gameSetIteratorCurrentGuessGuessGuess.toLong\n\
    \        var guessSetIteratorCurrentGuessGuessGuessGuess = guessSetIteratorCurrentGuessGuessGuess.toLong\n\
    \        var gameSetIteratorCurrentGuessGuessGuessGuessScore = gameSetIteratorCurrentGuessGuessGuessGuess.toLong\n\
    \        var guessSetIteratorCurrentGuessGuessGuessGuessScore = guessSetIteratorCurrentGuessGuessGuessGuess.toLong\n",
  "        val gameSet = game.distinct\n        val guessSet = guess.distinct\n  \
    \      val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val result = new mutable.ArrayList[Long]()\n        val gameSetIterator\
    \ = gameSet.iterator\n        val guessSetIterator = guessSet.iterator\n     \
    \   val gameSetIteratorSize = gameSetIterator.size\n        val guessSetIteratorSize\
    \ = guessSetIterator.size\n        var gameSetIteratorIndex = 0\n        var guessSetIteratorIndex\
    \ = 0\n        var gameSetIteratorValue = 0\n        var guessSetIteratorValue\
    \ = 0\n        var gameSetIteratorValueDiff = 0\n        var guessSetIteratorValueDiff\
    \ = 0\n        var gameSetIteratorValueDiffAbs = 0\n        var guessSetIteratorValueDiffAbs\
    \ = 0\n        var gameSetIteratorValueDiffAbsMax = 0\n        var guessSetIteratorValueDiffAbsMax\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxIndex = 0\n        var guessSetIteratorValueDiffAbsMaxIndex\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxValue = 0\n        var guessSetIteratorValueDiffAbsMaxValue\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxValueIndex = 0\n        var guessSetIteratorValueDiffAbsMaxValueIndex\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxValueDiff = 0\n        var guessSetIteratorValueDiffAbsMaxValueDiff\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxValueDiffIndex = 0\n        var\
    \ guessSetIteratorValueDiffAbsMaxValueDiffIndex = 0\n        var gameSetIteratorValueDiffAbsMaxValueDiffAbs\
    \ = 0\n        var guessSetIteratorValueDiffAbsMaxValueDiffAbs = 0\n        var\
    \ gameSetIteratorValueDiffAbsMaxValueDiffAbsIndex = 0\n        var guessSetIteratorValueDiffAbsMaxValueDiffAbsIndex\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxValueDiffAbsValue = 0\n     \
    \   var guessSetIteratorValueDiffAbsMaxValueDiffAbsValue = 0\n        var gameSetIteratorValueDiffAbsMaxValueDiffAbsValueIndex\
    \ = 0\n        var guessSetIteratorValueDiffAbsMaxValueDiffAbsValueIndex = 0\n\
    \        var gameSetIteratorValueDiffAbsMaxValueDiffAbsValueDiff = 0\n       \
    \ var guessSetIteratorValueDiffAbsMaxValueDiffAbsValueDiff = 0\n        var gameSetIteratorValueDiffAbsMaxValueDiffAbsValueDiffIndex\
    \ = 0\n        var guessSetIteratorValueDiffAbsMaxValueDiffAbsValueDiffIndex =\
    \ 0\n        var gameSetIteratorValueDiffAbsMaxValueDiffAbs", "        val gameScores\
    \ = game.map(x => if (x == 0) 0 else x)\n        val guessScores = guess.map(x\
    \ => if (x == 0) 0 else x)\n        val diffs = guessScores.zip(gameScores).map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        diffs.toList", "    \
    \    val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreSum = gameScores.sum\n        val\
    \ guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum -\
    \ guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n \
    \       val gameScoreDiffs = gameScores.zip(guessScores).map { case (gameScore,\
    \ guessScore) =>\n            if (gameScore == guessScore) {\n               \
    \ 0\n            } else {\n                Math.abs(gameScore - guessScore)\n\
    \            }\n        }\n        gameScoreDiffs.take(gameScoreCount)", "   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new mutable.ArrayBuffer[Long]()\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => score }.toList\n        val guessScore = guessScores.map\
    \ { case (index, score) => score }.toList\n        val gameScoreDiff = gameScore\
    \ diff guessScore\n        val gameScoreDiffLen = gameScoreDiff.length\n     \
    \   val guessScoreDiffLen = guessScoreDiff.length\n        val gameScoreDiffDiff\
    \ = gameScoreDiff.zipWithIndex.map { case (score, index) => index -> score }.toMap\n\
    \        val guessScoreDiffDiff = guessScoreDiff.zipWithIndex.map { case (score,\
    \ index) => index -> score }.toMap\n        val gameScoreDiffDiffLen = gameScoreDiffDiff.length\n\
    \        val guessScoreDiffDiffLen = guessScoreDiffDiff.length\n        val gameScoreDiffDiffDiff\
    \ = gameScoreDiffDiff.zipWithIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val guessScoreDiffDiffDiff = guessScoreDiffDiff.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreDiffDiffLen\
    \ = gameScoreDiffDiff.length\n        val guessScoreDiffDiffLen = guessScoreDiffDiff.length\n\
    \        val gameScoreDiffDiffDiff = gameScoreDiffDiff.zipWithIndex.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessScoreDiffDiffDiff\
    \ = guessScoreDiffDiff.zipWithIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreDiffDiffLen = gameScoreDiffDiff.length\n     \
    \   val guessScoreDiffDiffLen = guessScoreDiffDiff.length\n        val gameScoreDiffDiffDiff\
    \ = gameScoreDiffDiff.zipWithIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val guessScoreDiffDiffDiff = guessScoreDiffDiff.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreDiffDiffLen\
    \ = gameScoreDiffDiff.length\n        val guessScoreDiffDiffLen = guessScoreDiffDiff.length\n\
    \        val "]
stop_tokens:
- "\n    }\n"
