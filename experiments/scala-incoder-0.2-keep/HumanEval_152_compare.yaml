name: HumanEval_152_compare
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // I think we all remember that feeling when the result of some long-awaited\n\
  \    // event is finally known. The feelings and thoughts you have at that moment\
  \ are\n    // definitely worth noting down and comparing.\n    // Your task is to\
  \ determine if a person correctly guessed the results of a number of matches.\n\
  \    // You are given two arrays of scores and guesses of equal length, where each\
  \ index shows a match. \n    // Return an array of the same length denoting how\
  \ far off each guess was. If they have guessed correctly,\n    // the value is 0,\
  \ and if not, the value is the absolute difference between the guess and the score.\n\
  \    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
  \    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    def compare(game\
  \ : List[Long], guess : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
completions: ["        val gameScores = game.map(x => if (x == 0) 0 else x)\n    \
    \    val guessScores = guess.map(x => if (x == 0) 0 else x)\n        val gameScore\
    \ = gameScores.sum\n        val guessScore = guessScores.sum\n        val diffs\
    \ = guessScores.zip(gameScores).map(x => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n\
    \        diffs.toList", "        val gameLen = game.length\n        val guessLen\
    \ = guess.length\n        val result = new Array[Long](guessLen)\n        var\
    \ i = 0\n        while (i < guessLen) {\n            val gameScore = game(i)\n\
    \            val guessScore = guess(i)\n            val diff = guessScore - gameScore\n\
    \            result(i) = if (gameScore == guessScore) 0 else Math.abs(diff)\n\
    \            i += 1\n        }\n        result", "        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val results = new mutable.ArrayBuffer[Long]()\n\
    \        val scoreDiffs = new mutable.ArrayBuffer[Long]()\n        val guessesDiffs\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesDiffsCount = new mutable.ArrayBuffer[Long]()\n\
    \        val guessesCount = new mutable.ArrayBuffer[Long]()\n        val guessesCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCount = new\
    \ mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCount = new mutable.ArrayBuffer[Long]()\n\
    \        val guessesCountCountCountCountCount = new mutable.ArrayBuffer[Long]()\n\
    \        val guessesCountCountCountCountCountCount = new mutable.ArrayBuffer[Long]()\n\
    \        val guessesCountCountCountCountCountCountCount = new mutable.ArrayBuffer[Long]()\n\
    \        val guessesCountCountCountCountCountCountCountCount = new mutable.ArrayBuffer[Long]()\n\
    \        val guessesCountCountCountCountCountCountCountCountCount = new mutable.ArrayBuffer[Long]()\n\
    \        val guessesCountCountCountCountCountCountCountCountCountCount = new mutable.ArrayBuffer[Long]()\n\
    \        val guessesCountCountCountCountCountCountCountCountCountCountCount =\
    \ new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesCountCountCountCountCountCountCountCountCountCountCount",
  "        val guesses = gues\n        val scores = game\n        val guessesCount\
    \ = guesses.size\n        val scoresCount = scores.size\n        val result =\
    \ new Array[Long](guessesCount)\n        val guessesRemaining = guessesCount -\
    \ 1\n        val scoresRemaining = scoresCount - 1\n        val guessesRemainingInScores\
    \ = guessesRemaining / scoresCount\n        val scoresRemainingInGuesses = scoresRemaining\
    \ / guessesCount\n        val guessesRemainingInGuessesRemaining = guessesRemainingInGuesses\
    \ * scoresRemainingInGuesses\n        val scoresRemainingInGuessesRemainingInScores\
    \ = scoresRemainingInGuessesRemaining / scoresCount\n        val guessesRemainingInGuessesRemainingInScoresRemaining\
    \ = guessesRemainingInGuessesRemainingInScores * scoresRemainingInGuessesRemainingInScores\n\
    \        val guessesRemainingInGuessesRemainingInScoresRemainingInGuesses = guessesRemainingInGuessesRemainingInScoresRemaining\
    \ / guessesCount\n        val scoresRemainingInGuessesRemainingInScoresRemainingInGuessesRemaining\
    \ = scoresRemainingInGuessesRemainingInScoresRemainingInGuesses * guessesRemainingInGuessesRemainingInScoresRemainingInGuesses\n\
    \        val guessesRemainingInGuessesRemainingInScoresRemainingInGuessesRemainingInScores\
    \ = guessesRemainingInGuessesRemainingInScoresRemainingInGuessesRemaining * scoresRemainingInGuessesRemainingInScoresRemainingInGuessesRemaining\n\
    \        val guessesRemainingInGuessesRemainingInScoresRemainingInGuessesRemainingInScoresRemainingInGuesses\
    \ = guessesRemainingInGuessesRemainingInScoresRemainingInGuessesRemainingInScoresRemaining\
    \ * guessesRemainingInGuessesRemainingInScoresRemainingInGuessesRemainingInScoresRemainingInGuesses\n\
    \        val guessesRemainingInGuessesRemainingInScoresRemainingInGuessesRemainingInScoresRemainingInGuessesRemainingInScores\
    \ = guessesRemainingInGuessesRemainingInScoresRemainingInG", "        val gameSize\
    \ = game.size\n        val guessSize = guess.size\n        val result = new Array[Long](guessSize)\n\
    \        val gameScores = game.zipWithIndex.map{case (score, index) => score}.toList\n\
    \        val guessScores = guess.zipWithIndex.map{case (score, index) => score}.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_ % gameSize)\n        val guessScoreMap\
    \ = guessScores.groupBy(_ % guessSize)\n        guessScoreMap.foreach {\n    \
    \        case (guessIndex, guessScores) =>\n                val guessScore = guessScores.head\n\
    \                val gameScore = gameScores(guessIndex % gameSize)\n         \
    \       val gameScoreDiff = gameScore - guessScore\n                val guessScoreDiff\
    \ = guessScore - gameScore\n                result(guessIndex) = gameScoreDiff\n\
    \        }\n        result", "        val gameLen = game.length\n        val guessLen\
    \ = guess.length\n        val result = new Array[Long](guessLen)\n        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score }\n      \
    \  val guessScores = guess.zipWithIndex.map { case (score, index) => score }\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreKeys = gameScoreMap.keySet\n        val guessScoreKeys =\
    \ guessScoreMap.keySet\n        val gameScoreKeySet = gameScoreKeys.toSet\n  \
    \      val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySet", "        val gameLen\
    \ = game.length\n        val guessLen = guess.length\n        val result = new\
    \ Array[Long](guessLen)\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        var gameScore = 0\n        var guessScore = 0\n        var diff =\
    \ 0\n        while(i < guessLen && j < gameLen) {\n            gameScore = game(i)\n\
    \            guessScore = guess(j)\n            diff = guessScore - gameScore\n\
    \            if(diff < 0) {\n                diff = -diff\n            }\n   \
    \         result(k) = diff\n            i += 1\n            j += 1\n         \
    \   k += 1\n        }\n        result", "        val gameScores = game.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessScores = guess.zipWithIndex.map(x =>\
    \ (x._2, x._1)).toMap\n        val guessesWithScores = guess.zip(game).toMap\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScores = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => x._2 - x._1)\n\
    \        val guessesWithScore = guessesWithScores.mapValues(x => ", "        val\
    \ gameLength = game.size\n        val guessLength = guess.size\n        val gameScores\
    \ = game.zip(guess).map { case (gameScore, guessScore) => gameScore - guessScore\
    \ }\n        val guessScores = guess.zip(game).map { case (guessScore, gameScore)\
    \ => guessScore - gameScore }\n        val gameScoreSum = gameScores.sum\n   \
    \     val guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum\
    \ - guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n\
    \        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val gameScoreDiffAbsArray = Array.ofDim[Long](guessLength)\n\
    \        val guessScoreDiffAbsArray = Array.ofDim[Long](gameLength)\n        gameScoreDiffAbsArray.fill(gameScoreDiffAbs)\n\
    \        guessScoreDiffAbsArray.fill(guessScoreDiffAbs)\n        gameScoreDiffAbsArray.zip(guessScoreDiffAbsArray).map\
    \ { case (gameScoreDiffAbs, guessScoreDiffAbs) => guessScoreDiffAbs - gameScoreDiffAbs\
    \ }", "        val gameLength = game.length\n        val guessLength = guess.length\n\
    \        val result = new Array[Long](guessLength)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n\
    \        val guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessScoreValues = guessScoreMap.values.toList\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetIterator = gameScoreKeySet.iterator\n\
    \        val guessScoreKeySetIterator = guessScoreKeySet.iterator\n        val\
    \ gameScoreValueSetIterator = gameScoreValueSet.iterator\n        val guessScoreValueSetIterator\
    \ = guessScoreValueSet.iterator\n        val gameScoreKeySetIteratorSize = gameScoreKeySetIterator.size\n\
    \        val guessScoreKeySetIteratorSize = guessScoreKeySetIterator.size\n  \
    \      val gameScoreValueSetIteratorSize = gameScoreValueSetIterator.size\n  \
    \      val guessScoreValueSetIteratorSize = guessScoreValueSetIterator.size\n\
    \        val gameScoreKeySetIteratorIterator = gameScoreKeySetIterator.iterator\n\
    \        val guessScoreKeySetIteratorIterator = guessScoreKeySetIterator.iterator\n\
    \        val gameScoreValueSetIteratorIterator = gameScoreValueSetIterator.iterator\n\
    \        val guessScoreValueSetIteratorIterator = guessScoreValueSetIterator.iterator\n\
    \        val gameScoreKeySetIteratorIteratorSize = gameScoreKeySetIteratorIterator.size\n\
    \        val guessScoreKeySetIteratorIteratorSize = guessScoreKeySetIteratorIterator.size\n\
    \        val gameScoreValueSetIteratorIteratorSize = gameScoreValueSetIteratorIterator.size\n\
    \        val guessScoreValueSetIteratorIteratorSize = guessScoreValueSetIteratorIterator.size\n\
    \        val gameScoreKeySet", "        val gameLen = game.length\n        val\
    \ guessLen = guess.length\n        val result = new Array[Long](guessLen)\n  \
    \      val gameScores = game.zipWithIndex.filter(_._1 == 0)\n        val guessScores\
    \ = guess.zipWithIndex.filter(_._1 == 0)\n        gameScores.foreach { case (score,\
    \ index) =>\n            val guessIndex = guessScores.indexWhere(_._2 == index)\n\
    \            val diff = abs(guessScores._2 - score)\n            result(guessIndex)\
    \ = diff\n        }\n        result", "        val gameSet = game.distinct\n \
    \       val guessSet = guess.distinct\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSet", "        val gameScores = game.zipWithIndex.map { case\
    \ (score, index) => score -> index }.toMap\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesWithScores\
    \ = guessesScores.map { case (score, index) => index -> score }.toMap\n      \
    \  val guessesWithIndexes = guessesWithScores.map { case (score, index) => index\
    \ -> score }.toMap\n        val guessesWithIndexesSorted = guessesWithIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithScores = guessesWithIndexesSorted.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedWithScoreAndScores\
    \ = guessesWithIndexesSortedWithScores.map { case (score, index) => index -> score\
    \ -> gameScores(index) }.toMap\n        val guessesWithIndexesSortedWithScoreAndScoreAndScores\
    \ = guessesWithIndexesSortedWithScoreAndScores.map { case (score, index, score)\
    \ => index -> score -> score }.toMap\n        val guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScores.map { case (score,\
    \ index, score, score) => index -> score -> score -> score }.toMap\n        val\
    \ guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScores = guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScores.map\
    \ { case (score, index, score, score, score) => index -> score -> score -> score\
    \ -> score }.toMap\n        val guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScoreAndScores.map\
    \ { case (score, index, score, score, score, score) => index -> score -> score\
    \ -> score -> score -> score }.toMap\n        val guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores.map\
    \ { case (score, index, score, score, score, score, score) => index -> score ->\
    \ score -> score -> score -> score -> score }.toMap\n        val guessesWithIndexesSortedWithScoreAndScoreAndScoreAndScoreAndScoreAnd",
  "        val gameLen = game.length\n        val guessLen = guess.length\n      \
    \  val result = new Array[Long](guessLen)\n        var i = 0\n        while (i\
    \ < guessLen) {\n            var j = 0\n            while (j < gameLen) {\n  \
    \              if (game(j) == guess(i)) {\n                    result(i) = game(j)\n\
    \                    j++\n                }\n                else {\n        \
    \            result(i) = abs(game(j) - guess(i))\n                    j++\n  \
    \              }\n            }\n            i += 1\n        }\n        result",
  "        val gameLen = game.length\n        val guessLen = guess.length\n      \
    \  val result = new Array[Long](guessLen)\n        var i = 0\n        while (i\
    \ < guessLen) {\n            val gameScore = game(i)\n            val guessScore\
    \ = guess(i)\n            val diff = guessScore - gameScore\n            result(i)\
    \ = if (guessScore == gameScore) 0 else diff\n            i += 1\n        }\n\
    \        result", "        val gameSet = game.distinct\n        val guessSet =\
    \ guess.distinct\n        val gameSetSize = gameSet.size\n        val guessSetSize\
    \ = guessSet.size\n        val result = new mutable.ArrayList[Long](guessSetSize)\n\
    \        val gameSetIterator = gameSet.iterator\n        val guessSetIterator\
    \ = guessSet.iterator\n        val gameSetIteratorSize = gameSetIterator.size\n\
    \        val guessSetIteratorSize = guessSetIterator.size\n        val gameSetIteratorCurrent\
    \ = gameSetIterator.next\n        val guessSetIteratorCurrent = guessSetIterator.next\n\
    \        var gameSetIteratorCurrentScore = gameSetIteratorCurrent.toLong\n   \
    \     var guessSetIteratorCurrentScore = guessSetIteratorCurrent.toLong\n    \
    \    var gameSetIteratorCurrentGuess = gameSetIteratorCurrent.toLong\n       \
    \ var guessSetIteratorCurrentGuess = guessSetIteratorCurrent.toLong\n        var\
    \ gameSetIteratorCurrentGuessScore = gameSetIteratorCurrentGuess.toLong\n    \
    \    var guessSetIteratorCurrentGuessScore = guessSetIteratorCurrentGuess.toLong\n\
    \        var gameSetIteratorCurrentGuessGuess = gameSetIteratorCurrentGuess.toLong\n\
    \        var guessSetIteratorCurrentGuessGuess = guessSetIteratorCurrentGuess.toLong\n\
    \        var gameSetIteratorCurrentGuessGuessScore = gameSetIteratorCurrentGuessGuess.toLong\n\
    \        var guessSetIteratorCurrentGuessGuessScore = guessSetIteratorCurrentGuessGuess.toLong\n\
    \        var gameSetIteratorCurrentGuessGuessGuess = gameSetIteratorCurrentGuessGuess.toLong\n\
    \        var guessSetIteratorCurrentGuessGuessGuess = guessSetIteratorCurrentGuessGuess.toLong\n\
    \        var gameSetIteratorCurrentGuessGuessGuessScore = gameSetIteratorCurrentGuessGuessGuess.toLong\n\
    \        var guessSetIteratorCurrentGuessGuessGuessScore = guessSetIteratorCurrentGuessGuessGuess.toLong\n\
    \        var gameSetIteratorCurrentGuessGuessGuessGuess = gameSetIteratorCurrentGuessGuessGuess.toLong\n\
    \        var guessSetIteratorCurrentGuessGuessGuessGuess = guessSetIteratorCurrentGuessGuessGuess.toLong\n\
    \        var gameSetIteratorCurrentGuessGuessGuessGuessScore = gameSetIteratorCurrentGuessGuessGuessGuess.toLong\n\
    \        var guessSetIteratorCurrentGuessGuessGuessGuessScore = guessSetIteratorCurrentGuessGuessGuessGuess.toLong\n",
  "        val gameSet = game.distinct\n        val guessSet = guess.distinct\n  \
    \      val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val result = new mutable.ArrayList[Long]()\n        val gameSetIterator\
    \ = gameSet.iterator\n        val guessSetIterator = guessSet.iterator\n     \
    \   val gameSetIteratorSize = gameSetIterator.size\n        val guessSetIteratorSize\
    \ = guessSetIterator.size\n        var gameSetIteratorIndex = 0\n        var guessSetIteratorIndex\
    \ = 0\n        var gameSetIteratorValue = 0\n        var guessSetIteratorValue\
    \ = 0\n        var gameSetIteratorValueDiff = 0\n        var guessSetIteratorValueDiff\
    \ = 0\n        var gameSetIteratorValueDiffAbs = 0\n        var guessSetIteratorValueDiffAbs\
    \ = 0\n        var gameSetIteratorValueDiffAbsMax = 0\n        var guessSetIteratorValueDiffAbsMax\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxIndex = 0\n        var guessSetIteratorValueDiffAbsMaxIndex\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxValue = 0\n        var guessSetIteratorValueDiffAbsMaxValue\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxValueIndex = 0\n        var guessSetIteratorValueDiffAbsMaxValueIndex\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxValueDiff = 0\n        var guessSetIteratorValueDiffAbsMaxValueDiff\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxValueDiffIndex = 0\n        var\
    \ guessSetIteratorValueDiffAbsMaxValueDiffIndex = 0\n        var gameSetIteratorValueDiffAbsMaxValueDiffAbs\
    \ = 0\n        var guessSetIteratorValueDiffAbsMaxValueDiffAbs = 0\n        var\
    \ gameSetIteratorValueDiffAbsMaxValueDiffAbsIndex = 0\n        var guessSetIteratorValueDiffAbsMaxValueDiffAbsIndex\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxValueDiffAbsValue = 0\n     \
    \   var guessSetIteratorValueDiffAbsMaxValueDiffAbsValue = 0\n        var gameSetIteratorValueDiffAbsMaxValueDiffAbsValueIndex\
    \ = 0\n        var guessSetIteratorValueDiffAbsMaxValueDiffAbsValueIndex = 0\n\
    \        var gameSetIteratorValueDiffAbsMaxValueDiffAbsValueDiff = 0\n       \
    \ var guessSetIteratorValueDiffAbsMaxValueDiffAbsValueDiff = 0\n        var gameSetIteratorValueDiffAbsMaxValueDiffAbsValueDiffIndex\
    \ = 0\n        var guessSetIteratorValueDiffAbsMaxValueDiffAbsValueDiffIndex =\
    \ 0\n        var gameSetIteratorValueDiffAbsMaxValueDiffAbs", "        val gameScores\
    \ = game.map(x => if (x == 0) 0 else x)\n        val guessScores = guess.map(x\
    \ => if (x == 0) 0 else x)\n        val diffs = guessScores.zip(gameScores).map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        diffs.toList", "    \
    \    val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreSum = gameScores.sum\n        val\
    \ guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum -\
    \ guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n \
    \       val gameScoreDiffs = gameScores.zip(guessScores).map { case (gameScore,\
    \ guessScore) =>\n            if (gameScore == guessScore) {\n               \
    \ 0\n            } else {\n                Math.abs(gameScore - guessScore)\n\
    \            }\n        }\n        gameScoreDiffs.take(gameScoreCount)", "   \
    \     val gameLen = game.length\n        val guessLen = guess.length\n       \
    \ val result = new mutable.ArrayBuffer[Long]()\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => score }.toList\n        val guessScore = guessScores.map\
    \ { case (index, score) => score }.toList\n        val gameScoreDiff = gameScore\
    \ diff guessScore\n        val gameScoreDiffLen = gameScoreDiff.length\n     \
    \   val guessScoreDiffLen = guessScoreDiff.length\n        val gameScoreDiffDiff\
    \ = gameScoreDiff.zipWithIndex.map { case (score, index) => index -> score }.toMap\n\
    \        val guessScoreDiffDiff = guessScoreDiff.zipWithIndex.map { case (score,\
    \ index) => index -> score }.toMap\n        val gameScoreDiffDiffLen = gameScoreDiffDiff.length\n\
    \        val guessScoreDiffDiffLen = guessScoreDiffDiff.length\n        val gameScoreDiffDiffDiff\
    \ = gameScoreDiffDiff.zipWithIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val guessScoreDiffDiffDiff = guessScoreDiffDiff.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreDiffDiffLen\
    \ = gameScoreDiffDiff.length\n        val guessScoreDiffDiffLen = guessScoreDiffDiff.length\n\
    \        val gameScoreDiffDiffDiff = gameScoreDiffDiff.zipWithIndex.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessScoreDiffDiffDiff\
    \ = guessScoreDiffDiff.zipWithIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreDiffDiffLen = gameScoreDiffDiff.length\n     \
    \   val guessScoreDiffDiffLen = guessScoreDiffDiff.length\n        val gameScoreDiffDiffDiff\
    \ = gameScoreDiffDiff.zipWithIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val guessScoreDiffDiffDiff = guessScoreDiffDiff.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreDiffDiffLen\
    \ = gameScoreDiffDiff.length\n        val guessScoreDiffDiffLen = guessScoreDiffDiff.length\n\
    \        val ", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> score }.toMap\n    \
    \    val guessesWithIndexes = guess.zipWithIndex.map { case (guess, index) =>\
    \ guess -> index }.toMap\n        val guessesWithIndexesWithScores = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> score }.toMap\n        val guessesWithIndexesWithScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> (score, score) }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScores = guess.zipWithIndex.map { case\
    \ (guess, index) => guess -> (score, score) }.toMap\n        val guessesWithIndexesWithScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> (score, score) }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScores = guess.zipWithIndex.map { case\
    \ (guess, index) => guess -> (score, score) }.toMap\n        val guessesWithIndexesWithScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> (score, score) }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScores = guess.zipWithIndex.map { case\
    \ (guess, index) => guess -> (score, score) }.toMap\n        val guessesWithIndexesWithScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> (score, score) }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScores = guess.zipWithIndex.map { case\
    \ (guess, index) => guess -> (score, score) }.toMap\n        val guessesWithIndexesWithScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> (score, score) }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScores = guess.zipWithIndex.map { case\
    \ (guess, index) => guess -> (score, score) }.toMap\n        val guessesWithIndexesWithScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => ", "        val gameScores\
    \ = game.zipWithIndex.map(x => x._2).toList\n        val guessScores = guess.zipWithIndex.map(x\
    \ => x._2).toList\n        val gameScoreMap = gameScores.groupBy(x => x).map(x\
    \ => (x._1, x._2.size)).toMap\n        val guessScoreMap = guessScores.groupBy(x\
    \ => x).map(x => (x._1, x._2.size)).toMap\n        val gameScoreArray = gameScores.map(x\
    \ => x._2).toArray\n        val guessScoreArray = guessScores.map(x => x._2).toArray\n\
    \        val gameScoreArrayMap = gameScoreArray.groupBy(x => x).map(x => (x._1,\
    \ x._2.size)).toMap\n        val guessScoreArrayMap = guessScoreArray.groupBy(x\
    \ => x).map(x => (x._1, x._2.size)).toMap\n        val gameScoreArrayMap2 = gameScoreArrayMap.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val guessScoreArrayMap2 = guessScoreArrayMap.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val gameScoreArrayMap3 = gameScoreArrayMap2.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val guessScoreArrayMap3 = guessScoreArrayMap2.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val gameScoreArrayMap4 = gameScoreArrayMap3.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val guessScoreArrayMap4 = guessScoreArrayMap3.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val gameScoreArrayMap5 = gameScoreArrayMap4.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val guessScoreArrayMap5 = guessScoreArrayMap4.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val gameScoreArrayMap6 = gameScoreArrayMap5.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val guessScoreArrayMap6 = guessScoreArrayMap5.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val gameScoreArrayMap7 = gameScoreArrayMap6.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val guessScoreArrayMap7 = guessScoreArrayMap6.map(x\
    \ => (x._1, x._2.toArray)).toMap\n        val gameScoreArrayMap8 = gameScore",
  "        val gameLength = game.size\n        val guessLength = guess.size\n    \
    \    val result = new Array[Long](guessLength)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreDiff = gameScores.filter(_._2\
    \ > 0).map { case (score, index) => score - gameScoreSet.get(index) }\n      \
    \  val guessScoreDiff = guessScores.filter(_._2 > 0).map { case (score, index)\
    \ => score - guessScoreSet.get(index) }\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffSumAbs = gameScoreDiffSum.abs\n        val guessScoreDiffSumAbs\
    \ = guessScoreDiffSum.abs\n        val gameScoreDiffSumAbsCount = gameScoreDiffSumAbs.count\n\
    \        val guessScoreDiffSumAbsCount = guessScoreDiffSumAbs.count\n        val\
    \ gameScoreDiffSumAbsSum = gameScoreDiffSumAbs.sum\n        val guessScoreDiffSumAbsSum\
    \ = guessScoreDiffSumAbs.sum\n        val gameScoreDiffSumAbsSumAbs = gameScoreDiffSumAbsSum.abs\n\
    \        val guessScoreDiffSumAbsSumAbs = guessScoreDiffSumAbsSum.abs\n      \
    \  val gameScoreDiffSumAbsSumAbsCount = gameScoreDiffSumAbsSumAbs.count\n    \
    \    val guessScoreDiffSumAbsSumAbsCount = guessScoreDiffSumAbsSumAbs.count\n\
    \        val gameScoreDiffSumAbsSumAbsSum = gameScoreDiffSumAbsSumAbs.sum\n  \
    \      val guessScoreDiffSumAbsSumAbsSum = guessScoreDiffSumAbsSumAbs.sum\n  \
    \      val gameScoreDiffSumAbsSumAbsSumAbs = gameScoreDiffSumAbsSumAbsSum.abs\n\
    \        val guessScoreDiffSumAbsSumAbsSumAbs = guessScoreDiffSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffSumAbsSumAbsSum", "        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val results = new mutable.ArrayList[Long]()\n\
    \        for(score <- scores) {\n            val guess = guesses.find(_ == score)\n\
    \            if(guess == None) results += score\n            else results += abs(guess\
    \ - score)\n        }\n        results", "        val guesses = guess.map(x =>\
    \ Math.abs(x - game))\n        val scores = game.map(x => Math.abs(x - guess))\n\
    \        val guessesWithScores = guesses.zip(scores)\n        val guessesWithScoresSortedByScore\
    \ = guessesWithScores.sortBy(_._2)\n        val guessesWithScoresSortedByScoreWithMax\
    \ = guessesWithScoresSortedByScore.takeWhile(_._2 > 0).reverse\n        val guessesWithScoresSortedByScoreWithMaxWithMax\
    \ = guessesWithScoresSortedByScoreWithMax.takeWhile(_._2 > 0).reverse\n      \
    \  guessesWithScoresSortedByScoreWithMaxWithMax.map(x => if (x._2 == 0) 0 else\
    \ x._1 - x._2)", "        val gameLen = game.length\n        val guessLen = guess.length\n\
    \        val result = new mutable.ArrayList[Long](guessLen)\n        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n  \
    \      val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val gameScore = gameScores.map { case (score, index)\
    \ => score }.toSeq\n        val guessScore = guessScores.map { case (score, index)\
    \ => score }.toSeq\n        val gameScoreDiff = gameScore diff guessScore\n  \
    \      val gameScoreDiffLen = gameScoreDiff.length\n        val gameScoreDiffDiff\
    \ = gameScoreDiff.zipWithIndex.map { case (score, index) => score -> index }.toMap\n\
    \        val gameScoreDiffDiffLen = gameScoreDiffDiff.length\n        val gameScoreDiffDiffDiff\
    \ = gameScoreDiffDiff.map { case (score, index) => score -> index }.toMap\n  \
    \      val gameScoreDiffDiffDiffLen = gameScoreDiffDiffDiff.length\n        val\
    \ gameScoreDiffDiffDiffDiff = gameScoreDiffDiffDiff.map { case (score, index)\
    \ => score -> index }.toMap\n        val gameScoreDiffDiffDiffDiffLen = gameScoreDiffDiffDiffDiff.length\n\
    \        val gameScoreDiffDiffDiffDiffDiff = gameScoreDiffDiffDiffDiff.map { case\
    \ (score, index) => score -> index }.toMap\n        val gameScoreDiffDiffDiffDiffDiffLen\
    \ = gameScoreDiffDiffDiffDiffDiff.length\n        val gameScoreDiffDiffDiffDiffDiffDiff\
    \ = gameScoreDiffDiffDiffDiffDiff.map { case (score, index) => score -> index\
    \ }.toMap\n        val gameScoreDiffDiffDiffDiffDiffLen = gameScoreDiffDiffDiffDiffDiffDiff.length\n\
    \        val gameScoreDiffDiffDiffDiffDiffDiff = gameScoreDiffDiffDiffDiffDiffDiff.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScoreDiffDiffDiffDiffDiffLen\
    \ = gameScoreDiffDiffDiffDiffDiffDiffLen\n        val gameScoreDiffDiffDiffDiffDiffDiff\
    \ = gameScoreDiffDiffDiffDiffDiffDiff.map { case (score, index) => score -> index\
    \ }.toMap\n        val gameScoreDiffDiffDiffDiffDiffLen = gameScoreDiffDiffDiffDiffDiffLen\n\
    \        val gameScoreDiffDiffDiffDiffDiffDiff = gameScoreDiffDiffDiffDiffDiffDiff.map ",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }.toMap\n        val guessesWithScores = guessesScores.map\
    \ { case (index, score) => (index, gameScores(index) - score) }\n        val guessesWithAbsScores\
    \ = guessesWithScores.map { case (index, score) => (index, math.abs(score)) }\n\
    \        guessesWithAbsScores.map { case (index, score) => (index, gameScores(index)\
    \ - score) }", "        val gameLength = game.length\n        val guessLength\
    \ = guess.length\n        val result = new Array[Long](guessLength)\n        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score }\n      \
    \  val guessScores = guess.zipWithIndex.map { case (score, index) => score }\n\
    \        val gameScore = gameScores.sum\n        val guessScore = guessScores.sum\n\
    \        val diffs = gameScores.zip(guessScores).map { case (gameScore, guessScore)\
    \ =>\n            val diff = abs(gameScore - guessScore)\n            if (diff\
    \ > 0) diff else 0\n        }\n        val correct = gameScores.zip(guessScores).map\
    \ { case (gameScore, guessScore) =>\n            if (gameScore == guessScore)\
    \ 0 else abs(gameScore - guessScore)\n        }\n        val correctCount = correct.count(_\
    \ == 0)\n        val wrongCount = gameLength - correctCount\n        val wrongPercentage\
    \ = wrongCount / gameLength\n        val correctPercentage = correctCount / gameLength\n\
    \        val totalPercentage = correctPercentage + wrongPercentage\n        val\
    \ correctPercentages = correct.map(correctPercentage / totalPercentage)\n    \
    \    val wrongPercentages = wrong.map(wrongPercentage / totalPercentage)\n   \
    \     val correctPercentagesIndex = gameScores.zip(correctPercentages).zipWithIndex.map\
    \ { case (score, correctPercentage) =>\n            if (score == 0) 0 else index\n\
    \        }\n        val wrongPercentagesIndex = gameScores.zip(wrongPercentages).zipWithIndex.map\
    \ { case (score, wrongPercentage) =>\n            if (score == 0) 0 else index\n\
    \        }\n        val correctPercentagesIndex = gameScores.zip(correctPercentages).zipWithIndex.map\
    \ { case (score, correctPercentage) =>\n            if (score == 0) 0 else index\n\
    \        }\n        val wrongPercentagesIndex = gameScores.zip(wrongPercentages).zipWithIndex.map\
    \ { case (score, wrongPercentage) =>\n            if (score == 0) 0 else index\n\
    \        }\n        val correctPercentagesIndex = gameScores.zip(correctPercentages).zipWithIndex.map\
    \ { case (score, correctPercentage) =>\n            if (score == 0) 0 else index\n\
    \        }\n        val wrongPercentagesIndex = gameScores.zip(wrongPercentages).zipWithIndex.map\
    \ { case (score, wrongPercentage) =>\n            if (score == 0) 0 else index\n\
    \        }\n        val correctPercentagesIndex = gameScores.zip(correctPercentages).zipWithIndex.map\
    \ { case (score, correctPercentage) =>\n            if (score == 0) 0 else index\n",
  "        val gameLen = game.size\n        val guessLen = guess.size\n        val\
    \ result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.map(_.toSet)\n        val guessScoreSet = guessScoreList.map(_.toSet)\n\
    \        val gameScoreSetSize = gameScoreSet.size\n        val guessScoreSetSize\
    \ = guessScoreSet.size\n        val gameScoreSetIntersection = gameScoreSet.intersect(guessScoreSet)\n\
    \        val guessScoreSetIntersection = guessScoreSet.intersect(gameScoreSet)\n\
    \        val gameScoreSetUnion = gameScoreSet.union(guessScoreSet)\n        val\
    \ guessScoreSetUnion = guessScoreSet.union(gameScoreSet)\n        val gameScoreSetDifference\
    \ = gameScoreSet.diff(guessScoreSet)\n        val guessScoreSetDifference = guessScoreSet.diff(gameScoreSet)\n\
    \        val gameScoreSetDifferenceSize = gameScoreSetDifference.size\n      \
    \  val guessScoreSetDifferenceSize = guessScoreSetDifference.size\n        val\
    \ gameScoreSetDifferenceIntersection = gameScoreSetDifference.intersect(guessScoreSetDifference)\n\
    \        val guessScoreSetDifferenceIntersection = guessScoreSetDifference.intersect(gameScoreSetDifference)\n\
    \        val gameScoreSetDifferenceUnion = gameScoreSetDifference.union(guessScoreSetDifference)\n\
    \        val guessScoreSetDifferenceUnion = guessScoreSetDifference.union(gameScoreSetDifference)\n\
    \        val gameScoreSetDifferenceDifference = gameScoreSetDifference.diff(guessScoreSetDifference)\n\
    \        val guessScoreSetDifferenceDifference = guessScoreSetDifference.diff(gameScoreSetDifference)\n\
    \        val gameScoreSetDifferenceDifferenceSize = gameScoreSetDifferenceDifference.size\n\
    \        val guessScoreSetDifferenceDifferenceSize = guessScoreSetDifferenceDifference.size\n\
    \        val gameScoreSetDifferenceDifferenceIntersection = gameScoreSetDifferenceDifference.intersect(guessScoreSetDifferenceDifference)\n\
    \        val guessScoreSetDifferenceDifferenceIntersection = guessScoreSetDifferenceDifference.intersect(gameScoreSetDifferenceDifference)\n\
    \        val ", "        val gameSize = game.size\n        val guessSize = guess.size\n\
    \        val result = new Array[Long](guessSize)\n        val gameScores = game.map(x\
    \ => math.abs(x))\n        val guessScores = guess.map(x => math.abs(x))\n   \
    \     val gameScore = gameScores.sum\n        val guessScore = guessScores.sum\n\
    \        val gameScoreDiff = gameScore - guessScore\n        val gameScoreDiffs\
    \ = gameScoreDiff.zipWithIndex\n        val gameScoreDiffsSorted = gameScoreDiffs.sortBy(_._1).reverse\n\
    \        val gameScoreDiffsSortedIndex = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 0).map(_._1).sum\n        val gameScoreDiffsSortedIndex2 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 1).map(_._1).sum\n        val gameScoreDiffsSortedIndex3 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 2).map(_._1).sum\n        val gameScoreDiffsSortedIndex4 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 3).map(_._1).sum\n        val gameScoreDiffsSortedIndex5 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 4).map(_._1).sum\n        val gameScoreDiffsSortedIndex6 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 5).map(_._1).sum\n        val gameScoreDiffsSortedIndex7 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 6).map(_._1).sum\n        val gameScoreDiffsSortedIndex8 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 7).map(_._1).sum\n        val gameScoreDiffsSortedIndex9 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 8).map(_._1).sum\n        val gameScoreDiffsSortedIndex10 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 9).map(_._1).sum\n        val gameScoreDiffsSortedIndex11 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 10).map(_._1).sum\n        val gameScoreDiffsSortedIndex12 = gameScoreDiffsSorted.zipWithIndex.filter(x\
    \ => x._2 == 11).map(_._1).sum\n        val ", "        val gameSize = game.size\n\
    \        val guessSize = guess.size\n        val result = new mutable.ArrayList[Long]()\n\
    \        val gameScore = game.foldLeft(0L){ (sum, score) => sum + score}\n   \
    \     val guessScore = guess.foldLeft(0L){ (sum, score) => sum + score}\n    \
    \    val difference = guessScore - gameScore\n        val differenceAbs = Math.abs(difference)\n\
    \        val differenceAbsArray = Array.ofDim[Long](guessSize)\n        differenceAbsArray.fill(differenceAbs)\n\
    \        val differenceAbsArrayList = mutable.ArrayList[Long](differenceAbsArray)\n\
    \        val differenceAbsArrayListSize = differenceAbsArrayList.size\n      \
    \  val differenceAbsArrayListIterator = differenceAbsArrayList.iterator\n    \
    \    val differenceAbsArrayListIteratorSize = differenceAbsArrayListIterator.size\n\
    \        val differenceAbsArrayListIteratorNext = differenceAbsArrayListIterator.next\n\
    \        val differenceAbsArrayListIteratorNextSize = differenceAbsArrayListIteratorNext.size\n\
    \        val differenceAbsArrayListIteratorNextNext = differenceAbsArrayListIteratorNext.next\n\
    \        val differenceAbsArrayListIteratorNextNextSize = differenceAbsArrayListIteratorNextNext.size\n\
    \        val differenceAbsArrayListIteratorNextNextNext = differenceAbsArrayListIteratorNextNext.next\n\
    \        val differenceAbsArrayListIteratorNextNextNextSize = differenceAbsArrayListIteratorNextNextNext.size\n\
    \        val differenceAbsArrayListIteratorNextNextNextNext = differenceAbsArrayListIteratorNextNextNext.next\n\
    \        val differenceAbsArrayListIteratorNextNextNextNextSize = differenceAbsArrayListIteratorNextNextNextNext.size\n\
    \        val differenceAbsArrayListIteratorNextNextNextNextNext = differenceAbsArrayListIteratorNextNextNextNext.next\n\
    \        val differenceAbsArrayListIteratorNextNextNextNextNextSize = differenceAbsArrayListIteratorNextNextNextNextNext.size\n\
    \        val differenceAbsArrayListIteratorNextNextNextNextNextNext = differenceAbsArrayListIteratorNextNextNextNextNext.next\n\
    \        val differenceAbsArrayListIteratorNextNextNextNextNextNextSize = differenceAbsArrayListIteratorNextNextNextNextNextNext.size\n\
    \        val differenceAbsArrayListIteratorNextNextNextNextNextNextSize = differenceAbsArrayListIteratorNextNextNextNextNextNext.size\n\
    \        ", "        val gameLen = game.length\n        val guessLen = guess.length\n\
    \        val result = new Array[Long](guessLen)\n        var i = 0\n        var\
    \ j = 0\n        while (i < gameLen && j < guessLen) {\n            if (game(i)\
    \ == guess(j)) {\n                result(j) = 0\n                i += 1\n    \
    \            j += 1\n            } else if (game(i) < guess(j)) {\n          \
    \      result(j) = 0\n                i += 1\n            } else {\n         \
    \       result(j) = abs(game(i) - guess(j))\n                i += 1\n        \
    \        j += 1\n            }\n        }\n        result", "        val guesses\
    \ = guess.toSet\n        val scores = game.toSet\n        val guessesWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScore = game.toSet.map(x\
    \ => (x, x))\n        val guessesWithScoreWithScoreWithScore = game.toSet.map(x\
    \ => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScore = game.toSet.map(x\
    \ => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScore\
    \ = game.toSet.map(x => (x, x))\n        val guessesWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWithScoreWith",
  "        val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new mutable.ArrayList[Long]()\n        val gameScore = game.foldLeft(0L){\
    \ (sum, score) => sum + score}\n        val guessScore = guess.foldLeft(0L){ (sum,\
    \ score) => sum + score}\n        var i = 0\n        while (i < guessSize) {\n\
    \            val guessValue = guess(i)\n            val gameValue = game(i)\n\
    \            val diff = Math.abs(guessValue - gameValue)\n            val diffInGame\
    \ = gameScore - gameValue\n            val diffInGuess = guessScore - guessValue\n\
    \            if (diff == 0) {\n                result.add(0)\n            } else\
    \ {\n                result.add(diff)\n            }\n            i += 1\n   \
    \     }\n        result", "        val guesses = guess.toList\n        val scores\
    \ = game.toList\n        val result = guesses.zip(scores).map { case (guess, score)\
    \ =>\n            if (guess == score) 0 else math.abs(guess - score)\n       \
    \ }\n        result.toList", "        val gameScores = game.zipWithIndex.map {\
    \ case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesDiff = guessesScores.zip(gameScores).map\
    \ { case (guess, game) => math.abs(guess - game) }\n        guessesDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScores = gameScoreMap.values.toList\n\
    \        val guessScores = guessScoreMap.values.toList\n        val gameScoreMap\
    \ = gameScores.zip(guessScores).map { case (gameScore, guessScore) =>\n      \
    \      if (gameScore == guessScore) 0 else Math.abs(gameScore - guessScore)\n\
    \        }.toMap\n        val gameScores = gameScoreMap.values.toList\n      \
    \  val gameScoreMap = gameScores.zip(guessScores).map { case (gameScore, guessScore)\
    \ =>\n            if (gameScore == guessScore) 0 else Math.abs(gameScore - guessScore)\n\
    \        }.toMap\n        val gameScores = gameScoreMap.values.toList\n      \
    \  val gameScoreMap = gameScores.zip(guessScores).map { case (gameScore, guessScore)\
    \ =>\n            if (gameScore == guessScore) 0 else Math.abs(gameScore - guessScore)\n\
    \        }.toMap\n        val gameScores = gameScoreMap.values.toList\n      \
    \  val gameScoreMap = gameScores.zip(guessScores).map { case (gameScore, guessScore)\
    \ =>\n            if (gameScore == guessScore) 0 else Math.abs(gameScore - guessScore)\n\
    \        }.toMap\n        val gameScores = gameScoreMap.values.toList\n      \
    \  val gameScoreMap = gameScores.zip(guessScores).map { case (gameScore, guessScore)\
    \ =>\n            if (gameScore == guessScore) 0 else Math.abs(gameScore - guessScore)\n\
    \        }.toMap\n        val gameScores = gameScoreMap.values.toList\n      \
    \  val gameScoreMap = gameScores.zip(guessScores).map { case (gameScore, guessScore)\
    \ =>\n            if (gameScore == guessScore) 0 else Math.abs(gameScore - guessScore)\n\
    \        }.toMap\n        val gameScores = gameScoreMap.values.toList\n      \
    \  val gameScoreMap = gameScores.zip(guessScores).map { case (gameScore, guessScore)\
    \ =>\n            if (gameScore == guessScore) 0 else Math.abs(gameScore - guessScore)\n\
    \        }.toMap\n        val gameScores = gameScoreMap.values.toList\n      \
    \  val gameScoreMap = gameScores.zip(guessScores).map { case (", "        val\
    \ gameLen = game.size\n        val guessLen = guess.size\n        val result =\
    \ new mutable.ArrayList[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScore = gameScores.map\
    \ { case (score, index) => score }.toSeq\n        val guessScore = guessScores.map\
    \ { case (score, index) => score }.toSeq\n        val gameScoreDiff = gameScore\
    \ diff guessScore\n        val gameScoreDiffLen = gameScoreDiff.size\n       \
    \ val gameScoreDiffDiff = gameScoreDiff.zipWithIndex.map { case (score, diffIndex)\
    \ => diff -> diffIndex }.toMap\n        val gameScoreDiffDiffLen = gameScoreDiffDiff.size\n\
    \        val gameScoreDiffDiffDiff = gameScoreDiffDiff.map { case (diff, diffIndex)\
    \ => diff -> diffIndex }.toMap\n        val gameScoreDiffDiffDiffLen = gameScoreDiffDiffDiff.size\n\
    \        val gameScoreDiffDiffDiffDiff = gameScoreDiffDiffDiff.map { case (diff,\
    \ diffIndex) => diff -> diffIndex }.toMap\n        val gameScoreDiffDiffDiffDiffLen\
    \ = gameScoreDiffDiffDiffDiff.size\n        val gameScoreDiffDiffDiffDiffDiff\
    \ = gameScoreDiffDiffDiffDiff.map { case (diff, diffIndex) => diff -> diffIndex\
    \ }.toMap\n        val gameScoreDiffDiffDiffDiffLen = gameScoreDiffDiffDiffDiffLen\n\
    \        val gameScoreDiffDiffDiffDiffDiff = gameScoreDiffDiffDiffDiffDiff.map\
    \ { case (diff, diffIndex) => diff -> diffIndex }.toMap\n        val gameScoreDiffDiffDiffDiffLen\
    \ = gameScoreDiffDiffDiffDiffLen\n        val gameScoreDiffDiffDiffDiffDiff =\
    \ gameScoreDiffDiffDiffDiffDiff.map { case (diff, diffIndex) => diff -> diffIndex\
    \ }.toMap\n        val gameScoreDiffDiffDiffDiffLen = gameScoreDiffDiffDiffDiffLen\n\
    \        val gameScoreDiffDiffDiffDiffDiff = gameScoreDiffDiffDiffDiffDiff.map\
    \ { case (diff, diffIndex) => diff -> diffIndex }.toMap\n        val gameScoreDiffDiffDiffDiffLen\
    \ = gameScoreDiffDiffDiffDiffLen\n        val gameScoreDiffDiffDiffDiffDiff =\
    \ gameScoreDiffDiffDiffDiff", "        val gameLength = game.length\n        val\
    \ guessLength = guess.length\n        val result = new Array[Long](guessLength)\n\
    \        var i = 0\n        while (i < guessLength) {\n            var j = 0\n\
    \            while (j < gameLength) {\n                if (game(j) == guess(i))\
    \ {\n                    result(j) = 0\n                } else {\n           \
    \         result(j) = abs(game(j) - guess(i))\n                }\n           \
    \     j += 1\n            }\n            i += 1\n        }\n        result", " \
    \       val gameLength = game.size\n        val guessLength = guess.size\n   \
    \     val result = new mutable.ArrayList[Long](guessLength)\n        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n  \
    \      val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val gameScore = gameScores.map { case (score, index)\
    \ => score }.toList\n        val guessScore = guessScores.map { case (score, index)\
    \ => score }.toList\n        var gameIndex = 0\n        var guessIndex = 0\n \
    \       var gameScoreDiff = 0\n        var guessScoreDiff = 0\n        while (gameIndex\
    \ < gameLength && guessIndex < guessLength) {\n            val gameScore = gameScore(gameIndex)\n\
    \            val guessScore = guessScore(guessIndex)\n            val gameScoreDiff\
    \ = gameScore - guessScore\n            val guessScoreDiff = guessScore - gameScore\n\
    \            if (gameScoreDiff == guessScoreDiff) {\n                result.add(0)\n\
    \            } else {\n                result.add(Math.abs(gameScoreDiff))\n \
    \           }\n            gameIndex += 1\n            guessIndex += 1\n     \
    \   }\n        result", "        val guesses = guess.toList\n        val scores\
    \ = game.toList\n        val guessesCount = guesses.size\n        val scoresCount\
    \ = scores.size\n        val result = new Array[Long](guessesCount)\n        var\
    \ i = 0\n        while (i < guessesCount) {\n            val guess = guesses(i)\n\
    \            val score = scores(i)\n            val diff = Math.abs(guess - score)\n\
    \            result(i) = diff\n            i += 1\n        }\n        result",
  "        val gameSet = game.distinct\n        val guessSet = guess.distinct\n  \
    \      val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val result = new mutable.ArrayList[Long](guessSetSize)\n        val gameSetIterator\
    \ = gameSet.iterator\n        val guessSetIterator = guessSet.iterator\n     \
    \   val gameSetIteratorResult = gameSetIterator.next()\n        val guessSetIteratorResult\
    \ = guessSetIterator.next()\n        val gameSetIteratorResultSize = gameSetIteratorResult.size\n\
    \        val guessSetIteratorResultSize = guessSetIteratorResult.size\n      \
    \  var gameSetIteratorResultIndex = 0\n        var guessSetIteratorResultIndex\
    \ = 0\n        var gameSetIteratorResultIndexSize = 0\n        var guessSetIteratorResultIndexSize\
    \ = 0\n        var gameSetIteratorResultIndexSize2 = 0\n        var guessSetIteratorResultIndexSize2\
    \ = 0\n        var gameSetIteratorResultIndexSize3 = 0\n        var guessSetIteratorResultIndexSize3\
    \ = 0\n        var gameSetIteratorResultIndexSize4 = 0\n        var guessSetIteratorResultIndexSize4\
    \ = 0\n        var gameSetIteratorResultIndexSize5 = 0\n        var guessSetIteratorResultIndexSize5\
    \ = 0\n        var gameSetIteratorResultIndexSize6 = 0\n        var guessSetIteratorResultIndexSize6\
    \ = 0\n        var gameSetIteratorResultIndexSize7 = 0\n        var guessSetIteratorResultIndexSize7\
    \ = 0\n        var gameSetIteratorResultIndexSize8 = 0\n        var guessSetIteratorResultIndexSize8\
    \ = 0\n        var gameSetIteratorResultIndexSize9 = 0\n        var guessSetIteratorResultIndexSize9\
    \ = 0\n        var gameSetIteratorResultIndexSize10 = 0\n        var guessSetIteratorResultIndexSize10\
    \ = 0\n        var gameSetIteratorResultIndexSize11 = 0\n        var guessSetIteratorResultIndexSize11\
    \ = 0\n        var gameSetIteratorResultIndexSize12 = 0\n        var guessSetIteratorResultIndexSize12\
    \ = 0\n        var gameSetIteratorResultIndexSize13 = 0\n        var guessSetIteratorResultIndexSize13\
    \ = 0\n        var gameSetIteratorResultIndexSize14 = 0\n        var guessSetIteratorResultIndexSize14\
    \ = 0\n        var gameSetIteratorResultIndexSize15 = 0\n        var guessSetIteratorResultIndexSize15\
    \ = 0\n        var gameSetIteratorResultIndexSize16 = 0\n        var guessSetIteratorResultIndexSize16\
    \ = 0\n        var gameSetIteratorResultIndexSize17 = 0\n        var guessSetIteratorResultIndexSize17\
    \ = 0\n        var gameSetIteratorResultIndexSize18 = 0\n        var guessSetIteratorResultIndexSize18\
    \ = 0\n        var gameSetIteratorResultIndexSize19 = 0\n        var guessSetIteratorResultIndex",
  "        val gameLen = game.length\n        val guessLen = guess.length\n      \
    \  val result = new Array[Long](guessLen)\n        var i = 0\n        while (i\
    \ < guessLen) {\n            val gameScore = game(i)\n            val guessScore\
    \ = guess(i)\n            val diff = guessScore - gameScore\n            if (diff\
    \ < 0) {\n                diff = -diff\n            }\n            result(i) =\
    \ diff\n            i += 1\n        }\n        result", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreDiff = gameScoreCount - guessScoreCount\n        val guessScoreDiff\
    \ = guessScoreCount - gameScoreCount\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val guessScoreDiffs = guessScoreDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val gameScoreDiffSum = gameScoreDiffs.sum\n\
    \        val guessScoreDiffSum = guessScoreDiffs.sum\n        val gameScoreDiffAverage\
    \ = gameScoreDiffSum / gameScoreCount\n        val guessScoreDiffAverage = guessScoreDiffSum\
    \ / guessScoreCount\n        val gameScoreDiffAverages = gameScoreDiffAverage.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val guessScoreDiffAverages = guessScoreDiffAverage.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val gameScoreDiffAverageSum = gameScoreDiffAverages.sum\n\
    \        val guessScoreDiffAverageSum = guessScoreDiffAverages.sum\n        val\
    \ gameScoreDiffAverageAverage = gameScoreDiffAverageSum / gameScoreCount\n   \
    \     val guessScoreDiffAverageAverage = guessScoreDiffAverageSum / guessScoreCount\n\
    \        val gameScoreDiffAverageAverages = gameScoreDiffAverageAverage.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val guessScoreDiffAverageAverages =\
    \ guessScoreDiffAverageAverage.zipWithIndex.map { case (diff, index) => diff }\n\
    \        val gameScoreDiffAverageAverageSum = gameScoreDiffAverageAverages.sum\n\
    \        val guessScoreDiffAverageAverageSum = guessScoreDiffAverageAverages.sum\n\
    \        val gameScoreDiffAverageAverageAverage = gameScoreDiffAverageAverageSum\
    \ / gameScoreCount\n        val guessScoreDiffAverageAverageAverage = guessScoreDiffAverageAverageSum\
    \ / guessScoreCount\n        val gameScoreDiffAverageAverageAverages = gameScoreDiffAverageAverageAverage.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val guessScoreDiffAverageAverageAverages\
    \ = guessScoreDiffAverageAverage.zipWithIndex.map { case (diff, index) => diff\
    \ }\n        val ", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score }\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val gameScoreCount = gameScores.count\n        val\
    \ guessScoreCount = guessScores.count\n        val gameScoreDiffs = gameScores.zip(guessScores).map\
    \ { case (gameScore, guessScore) =>\n            val diff = gameScore - guessScore\n\
    \            if (diff < 0) diff else diff\n        }\n        val gameScoreDiffCount\
    \ = gameScoreDiffs.count\n        val gameScoreDiffDiffs = gameScoreDiffs.zip(gameScores).map\
    \ { case (gameScoreDiff, gameScore) =>\n            val diff = gameScoreDiff -\
    \ gameScore\n            if (diff < 0) diff else diff\n        }\n        val\
    \ gameScoreDiffDiffCount = gameScoreDiffDiffs.count\n        val gameScoreDiffDiffDiffs\
    \ = gameScoreDiffDiffs.zip(gameScores).map { case (gameScoreDiffDiff, gameScore)\
    \ =>\n            val diff = gameScoreDiffDiff - gameScore\n            if (diff\
    \ < 0) diff else diff\n        }\n        val gameScoreDiffDiffDiffCount = gameScoreDiffDiffDiffs.count\n\
    \        val gameScoreDiffDiffDiffDiffs = gameScoreDiffDiffDiffs.zip(gameScores).map\
    \ { case (gameScoreDiffDiffDiff, gameScore) =>\n            val diff = gameScoreDiffDiffDiff\
    \ - gameScore\n            if (diff < 0) diff else diff\n        }\n        val\
    \ gameScoreDiffDiffDiffDiffCount = gameScoreDiffDiffDiffDiffs.count\n        val\
    \ gameScoreDiffDiffDiffDiffDiffs = gameScoreDiffDiffDiffDiffs.zip(gameScores).map\
    \ { case (gameScoreDiffDiffDiffDiff, gameScore) =>\n            val diff = gameScoreDiffDiffDiffDiff\
    \ - gameScore\n            if (diff < 0) diff else diff\n        }\n        val\
    \ gameScoreDiffDiffDiffDiffDiffCount = gameScoreDiffDiffDiffDiffDiffs.count\n\
    \        val gameScoreDiffDiffDiffDiffDiffDiffs = gameScoreDiffDiffDiffDiffDiffs.zip(gameScores).map\
    \ { case (gameScoreDiffDiffDiffDiffDiff, gameScore) =>\n            val diff =\
    \ gameScoreDiffDiffDiffDiffDiff - gameScore\n            if (diff < 0) diff else\
    \ diff\n        }\n        val gameScoreDiffDiffDiffDiffDiffDiffCount = gameScoreDiffDiffDiffDiffDiffDiffs.count\n\
    \        val gameScoreDiffDiffDiffDiffDiffDiffDiffs = gameScoreDiffDiffDiffDiffDiffDiff",
  "        val gameScores = game.zipWithIndex.map(x => (x._2, x._1)).toMap\n     \
    \   val guessesScores = guess.zipWithIndex.map(x => (x._2, x._1)).toMap\n    \
    \    val guessesWithScores = guessesScores.map(x => (x._1, x._2))\n        val\
    \ guessesWithIndexes = guessesWithScores.map(x => (x._2, x._1))\n        val guessesWithIndexesSorted\
    \ = guessesWithIndexes.sortBy(x => x._1)\n        val guessesWithIndexesSortedWithScores\
    \ = guessesWithIndexesSorted.map(x => (x._2, x._1))\n        val guessesWithIndexesSortedWithScoresSorted\
    \ = guessesWithIndexesSortedWithScores.sortBy(x => x._1)\n        val guessesWithIndexesSortedWithScoresSortedWithIndex\
    \ = guessesWithIndexesSortedWithScoresSorted.map(x => (x._2, x._1))\n        val\
    \ guessesWithIndexesSortedWithScoresSortedWithIndexSorted = guessesWithIndexesSortedWithScoresSortedWithIndex.sortBy(x\
    \ => x._1)\n        val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScores\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScores.map(x =>\
    \ (x._2, x._1))\n        val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoresSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoresSorted.sortBy(x\
    \ => x._1)\n        val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoresSortedWithIndex\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoresSortedWithIndexSorted.map(x\
    \ => (x._2, x._1))\n        val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoresSortedWithIndexSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoresSortedWithIndexSortedWithIndex.sortBy(x\
    \ => x._1)\n        val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoresSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoresSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(x\
    \ => x._1)\n        val guessesWithIndexesSortedWithScoresSortedWithIndexSorted",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n        val\
    \ guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues = gameScoreMap.values.toList\n\
    \        val guessScoreValues = guessScoreMap.values.toList\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = ", "        val gameScores = game.zipWithIndex.map{ case (score, index) =>\
    \ score }.toList\n        val guessesScores = guess.zipWithIndex.map{ case (score,\
    \ index) => score }.toList\n        val gameScoreMap = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val guessesScoreMap = guessesScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val gameScoreList = gameScoreMap.values.toList\n        val guessesScoreList\
    \ = guessesScoreMap.values.toList\n        val gameScores = gameScoreList.zip(guessesScoreList).map\
    \ { case (gameScore, guessesScore) =>\n            val difference = gameScore\
    \ - guessesScore\n            val differenceAbs = math.abs(difference)\n     \
    \       if (difference < 0)\n                differenceAbs\n            else\n\
    \                differenceAbs\n        }\n        gameScores.toList", "     \
    \   val gameLength = game.size\n        val guessLength = guess.size\n       \
    \ val result = new Array[Long](guessLength)\n        val gameScores = game.map(x\
    \ => if (x == 0) 0 else x)\n        val guessScores = guess.map(x => if (x ==\
    \ 0) 0 else x)\n        var i = 0\n        while (i < guessLength) {\n       \
    \     result(i) = gameScores(i) - guessScores(i)\n            i += 1\n       \
    \ }\n        result", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score }\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val gameScoreCount = gameScores.count\n        val\
    \ guessScoreCount = guessScores.count\n        val gameScoreSum = gameScores.sum\n\
    \        val guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum\
    \ - guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n\
    \        val gameScoreDiffs = gameScoreDiff.zip(gameScores).map { case (diff,\
    \ score) => diff - score }\n        val guessScoreDiffs = guessScoreDiff.zip(guessScores).map\
    \ { case (diff, score) => diff - score }\n        val gameScoreDiffCount = gameScoreDiffs.count\n\
    \        val guessScoreDiffCount = guessScoreDiffs.count\n        val gameScoreDiffSum\
    \ = gameScoreDiffs.sum\n        val guessScoreDiffSum = guessScoreDiffs.sum\n\
    \        val gameScoreDiffDiff = gameScoreDiffSum - guessScoreDiffSum\n      \
    \  val guessScoreDiffDiff = guessScoreDiffSum - gameScoreDiffSum\n        val\
    \ gameScoreDiffDiffs = gameScoreDiffDiff.zip(gameScores).map { case (diff, score)\
    \ => diff - score }\n        val guessScoreDiffDiffs = guessScoreDiffDiff.zip(guessScores).map\
    \ { case (diff, score) => diff - score }\n        val gameScoreDiffDiffCount =\
    \ gameScoreDiffDiffs.count\n        val guessScoreDiffDiffCount = guessScoreDiffDiffs.count\n\
    \        val gameScoreDiffDiffSum = gameScoreDiffDiffs.sum\n        val guessScoreDiffDiffSum\
    \ = guessScoreDiffDiffs.sum\n        val gameScoreDiffDiffDiff = gameScoreDiffDiffSum\
    \ - guessScoreDiffDiffSum\n        val guessScoreDiffDiffDiff = guessScoreDiffDiffSum\
    \ - gameScoreDiffDiffSum\n        val gameScoreDiffDiffDiffs = gameScoreDiffDiffDiff.zip(gameScores).map\
    \ { case (diff, score) => diff - score }\n        val guessScoreDiffDiffDiffs\
    \ = guessScoreDiffDiffDiff.zip(guessScores).map { case (diff, score) => diff -\
    \ score }\n        val gameScoreDiffDiffDiffCount = gameScoreDiffDiffDiffs.count\n\
    \        val guessScoreDiffDiffCount = guessScoreDiffDiffs.count\n        val\
    \ gameScoreDiffDiffSum = game", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesDiff = guessesScores.zip(gameScores).map\
    \ { case (guess, game) => math.abs(guess - game) }\n        guessesDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameLen = game.length\n    \
    \    val guessLen = guess.length\n        val result = new Array[Long](guessLen)\n\
    \        var i = 0\n        while (i < guessLen) {\n            val gameScore\
    \ = game(i)\n            val guessScore = guess(i)\n            val diff = guessScore\
    \ - gameScore\n            if (diff < 0) {\n                diff = -diff\n   \
    \         }\n            result(i) = diff\n            i += 1\n        }\n   \
    \     result", "        val gameSet = game.distinct\n        val guessSet = guess.distinct\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val gameSetIterator\
    \ = gameSet.iterator\n        val guessSetIterator = guessSet.iterator\n     \
    \   var gameSetIndex = 0\n        var guessSetIndex = 0\n        var gameSetScore\
    \ = 0\n        var guessSetScore = 0\n        var gameSetGuessScore = 0\n    \
    \    var guessSetGuessScore = 0\n        var gameSetGuessIndex = 0\n        var\
    \ guessSetGuessIndex = 0\n        var gameSetGuessScoreDiff = 0\n        var guessSetGuessScoreDiff\
    \ = 0\n        var gameSetGuessDiff = 0\n        var guessSetGuessDiff = 0\n \
    \       var gameSetGuessDiffIndex = 0\n        var guessSetGuessDiffIndex = 0\n\
    \        while (gameSetIndex < gameSetSize && guessSetIndex < guessSetSize) {\n\
    \            gameSetScore = gameSetIterator.next\n            guessSetScore =\
    \ guessSetIterator.next\n            gameSetGuessScore = gameSetScore - guessSetScore\n\
    \            guessSetGuessScore = guessSetScore - gameSetScore\n            gameSetGuessScoreDiff\
    \ = gameSetGuessScore - gameSetScore\n            guessSetGuessScoreDiff = guessSetGuessScore\
    \ - gameSetScore\n            gameSetGuessDiff = gameSetGuessScoreDiff + guessSetGuessScoreDiff\n\
    \            guessSetGuessDiff = guessSetGuessScoreDiff + gameSetGuessScoreDiff\n\
    \            gameSetGuessDiffIndex = gameSetGuessDiff.indexOf(0)\n           \
    \ guessSetGuessDiffIndex = guessSetGuessDiff.indexOf(0)\n            if (gameSetGuessDiffIndex\
    \ != -1 && guessSetGuessDiffIndex != -1) {\n                result.add(gameSetGuessDiffIndex\
    \ - guessSetGuessDiffIndex)\n            }\n            gameSetIndex += 1\n  \
    \          guessSetIndex += 1\n        }\n        return result.toList", "   \
    \     val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new Array[Long](guessSize)\n        var i = 0\n        while (i < guessSize)\
    \ {\n            val gameScore = game(i)\n            val guessScore = guess(i)\n\
    \            val diff = abs(guessScore - gameScore)\n            result(i) = diff\n\
    \            i += 1\n        }\n        result", "        val gameScores = game.map(x\
    \ => if (x == 0) 0 else x)\n        val guessScores = guess.map(x => if (x ==\
    \ 0) 0 else x)\n        val diffs = gameScores zip guessScores\n        val diffsSorted\
    \ = diffs.sortBy(_._1).reverse\n        val diffsSortedWithZeros = diffsSorted.takeWhile(_._1\
    \ == 0).map(_._2)\n        val diffsSortedWithZerosAndOnes = diffsSorted.takeWhile(_._1\
    \ != 0).map(_._2)\n        diffsSortedWithZerosAndOnes.map(x => if (x == 0) 0\
    \ else abs(x) - abs(diffsSortedWithZerosAndOnes.head))", "        val gameLen\
    \ = game.size\n        val guessLen = guess.size\n        val result = new Array[Long](guessLen)\n\
    \        val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessScores = guess.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n     \
    \   val guessScoreList = guessScoreMap.toList\n        var gameIndex = 0\n   \
    \     var guessIndex = 0\n        var gameScore = gameScoreList.head\n       \
    \ var guessScore = guessScoreList.head\n        var gameScoreDiff = gameScoreList.tail.head\n\
    \        var guessScoreDiff = guessScoreList.tail.head\n        var gameScoreDiffIndex\
    \ = 0\n        var guessScoreDiffIndex = 0\n        while (gameIndex < gameLen\
    \ && guessIndex < guessLen) {\n            if (gameScoreMap.get(gameIndex) ==\
    \ guessScoreMap.get(guessIndex)) {\n                gameScore = gameScoreList.apply(gameIndex)\n\
    \                guessScore = guessScoreList.apply(guessIndex)\n             \
    \   gameScoreDiff = gameScoreList.apply(gameIndex + 1)\n                guessScoreDiff\
    \ = guessScoreList.apply(guessIndex + 1)\n                gameScoreDiffIndex =\
    \ gameIndex + 1\n                guessScoreDiffIndex = guessIndex + 1\n      \
    \          gameIndex += 1\n                guessIndex += 1\n            } else\
    \ if (gameScoreMap.get(gameIndex) > guessScoreMap.get(guessIndex)) {\n       \
    \         gameScore = gameScoreList.apply(gameIndex)\n                guessScore\
    \ = guessScoreList.apply(guessIndex)\n                gameScoreDiff = gameScoreList.apply(gameIndex\
    \ + 1)\n                guessScoreDiff = guessScoreList.apply(guessIndex + 1)\n\
    \                gameScoreDiffIndex = gameIndex + 1\n                guessScoreDiffIndex\
    \ = guessIndex + 1\n                gameIndex += 1\n            } else {\n   \
    \             gameScore = gameScoreList.apply(gameIndex)\n                guessScore\
    \ = guessScoreList.apply(guessIndex)\n                gameScoreDiff = gameScoreList.apply(gameIndex\
    \ + 1)\n                guessScoreDiff = guessScoreList.apply(guessIndex + 1)\n\
    \                gameScoreDiffIndex = gameIndex + 1\n                guessScoreDiffIndex\
    \ = guessIndex + 1\n                gameIndex += 1\n                guessIndex\
    \ += 1\n            }\n        }\n        while (gameIndex < gameLen) {\n    \
    \        gameScore = gameScoreList.apply(gameIndex)\n            guessScore =\
    \ guessScoreList.apply(guessIndex)\n            gameScoreDiff = gameScoreList.apply(gameIndex\
    \ + 1)\n            guessScoreDiff = guessScoreList.apply(guessIndex + 1)\n  \
    \          ", "        val gameSet = game.distinct\n        val guessSet = guess.distinct\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSet", "      \
    \  val gameScores = game.zipWithIndex.map { case (score, index) => (index, score)\
    \ }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score, index)\
    \ => (index, score) }.toMap\n        val guessesWithScores = guessesScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (index, score) => (index, score) }.toMap\n  \
    \      val guessesWithIndexesWithScores = guessesWithIndexes.map { case (index,\
    \ score) => (index, score) }.toMap\n        val guessesWithIndexesWithScoreAndScores\
    \ = guessesWithIndexesWithScores.map { case (index, score) => (index, score, gameScores(index))\
    \ }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScores = guessesWithIndexesWithScoreAndScores.map\
    \ { case (index, score, score) => (index, score, score, gameScores(index)) }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScoreAndScoreAndScores = guessesWithIndexesWithScoreAndScoreAndScores.map\
    \ { case (index, score, score, score) => (index, score, score, score, gameScores(index))\
    \ }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScores.map { case (index,\
    \ score, score, score, score) => (index, score, score, score, score, gameScores(index))\
    \ }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScores.map {\
    \ case (index, score, score, score, score, score) => (index, score, score, score,\
    \ score, score, gameScores(index)) }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores.map\
    \ { case (index, score, score, score, score, score, score) => (index, score, score,\
    \ score, score, score, score, gameScores(index)) }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScore", "        val\
    \ gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessScores =\
    \ guess.map(x => if (x == 0) 0 else x)\n        val gameScoreCount = gameScores.count(x\
    \ => x == 0)\n        val guessScoreCount = guessScores.count(x => x == 0)\n \
    \       val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        val gameScoreDiffPercent = gameScoreDiff\
    \ / gameScoreCount * 100\n        val guessScoreDiffPercent = guessScoreDiff /\
    \ guessScoreCount * 100\n        val gameScoreDiffPercent = gameScoreDiff / gameScoreCount\
    \ * 100\n        val guessScoreDiffPercent = guessScoreDiff / guessScoreCount\
    \ * 100\n        val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n\
    \        val guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n\
    \        val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n   \
    \     val guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n   \
    \     val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n      \
    \  val guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n      \
    \  val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n        val\
    \ guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n        val\
    \ gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n        val guessScoreDiffPercent\
    \ = guessScoreDiff / guessScoreCount * 100\n        val gameScoreDiffPercent =\
    \ gameScoreDiff / gameScoreCount * 100\n        val guessScoreDiffPercent = guessScoreDiff\
    \ / guessScoreCount * 100\n        val gameScoreDiffPercent = gameScoreDiff /\
    \ gameScoreCount * 100\n        val guessScoreDiffPercent = guessScoreDiff / guessScoreCount\
    \ * 100\n        val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n\
    \        val guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n\
    \        val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n   \
    \     val guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n   \
    \     val gameScoreDiffPercent = ", "        val gameScores = game.zipWithIndex.map(x\
    \ => x._1 - x._2)\n        val guessScores = guess.zipWithIndex.map(x => x._1\
    \ - x._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = new mutable.ListBuffer[Long]()\n\
    \        val guessScoreList = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach\
    \ {\n            case (score, index) =>\n                gameScoreList.add(score)\n\
    \                guessScoreList.add(guessScoreMap(index))\n        }\n       \
    \ val gameScoreArray = gameScoreList.toArray\n        val guessScoreArray = guessScoreList.toArray\n\
    \        val gameScoreArrayLength = gameScoreArray.length\n        val guessScoreArrayLength\
    \ = guessScoreArray.length\n        val gameScoreArrayLength = gameScoreArrayLength\n\
    \        val guessScoreArrayLength = guessScoreArrayLength\n        val gameScoreArrayLength\
    \ = gameScoreArrayLength\n        val guessScoreArrayLength = guessScoreArrayLength\n\
    \        val gameScoreArrayLength = gameScoreArrayLength\n        val guessScoreArrayLength\
    \ = guessScoreArrayLength\n        val gameScoreArrayLength = gameScoreArrayLength\n\
    \        val guessScoreArrayLength = guessScoreArrayLength\n        val gameScoreArrayLength\
    \ = gameScoreArrayLength\n        val guessScoreArrayLength = guessScoreArrayLength\n\
    \        val gameScoreArrayLength = gameScoreArrayLength\n        val guessScoreArrayLength\
    \ = guessScoreArrayLength\n        val gameScoreArrayLength = gameScoreArrayLength\n\
    \        val guessScoreArrayLength = guessScoreArrayLength\n        val gameScoreArrayLength\
    \ = gameScoreArrayLength\n        val guessScoreArrayLength = guessScoreArrayLength\n\
    \        val gameScoreArrayLength = gameScoreArrayLength\n        val guessScoreArrayLength\
    \ = guessScoreArrayLength\n        val gameScoreArrayLength = gameScoreArrayLength\n\
    \        val guessScoreArrayLength = guessScoreArrayLength\n        val gameScoreArrayLength\
    \ = gameScoreArrayLength\n        val guessScoreArrayLength = guessScoreArrayLength\n\
    \        val gameScoreArrayLength = gameScoreArrayLength\n        val guessScoreArrayLength\
    \ = guessScoreArrayLength\n        val gameScoreArrayLength = gameScoreArrayLength\n\
    \        val guessScoreArrayLength = guessScoreArrayLength\n        val gameScoreArrayLength\
    \ = gameScoreArrayLength\n        val guessScoreArrayLength = guessScoreArrayLength\n\
    \        val gameScoreArrayLength = gameScoreArrayLength\n        val guessScoreArrayLength\
    \ = guessScoreArrayLength\n        val gameScoreArrayLength = gameScoreArray",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreSet = gameScoreMap.toSet\n        val\
    \ guessScoreSet = guessScoreMap.toSet\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreSet = gameScoreMap.toSet\n\
    \        val guessScoreSet = guessScoreMap.toSet\n        val gameScoreList =\
    \ gameScores.toList\n        val guessScoreList = guessScores.toList\n       \
    \ val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreSet = gameScoreMap.toSet\n        val guessScoreSet = guessScoreMap.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreSet = gameScoreMap.toSet\n        val guessScoreSet = guessScoreMap.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreSet = gameScoreMap.toSet\n        val guessScoreSet = guessScoreMap.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreSet = gameScoreMap.toSet\n        val guessScoreSet = guessScoreMap.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreSet = gameScoreMap.toSet\n        val guessScoreSet = guessScoreMap.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guess",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreDiff = gameScoreCount - guessScoreCount\n\
    \        val guessScoreDiff = guessScoreCount - gameScoreCount\n        val gameScoreDiffList\
    \ = gameScoreDiff.toList.map(x => gameScoreDiffList.map(_ + x))\n        val guessScoreDiffList\
    \ = guessScoreDiff.toList.map(x => guessScoreDiffList.map(_ + x))\n        val\
    \ gameScoreDiffList2 = gameScoreDiffList.zip(guessScoreDiffList).map { case (gameScoreDiff,\
    \ guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n        val gameScoreDiffList3\
    \ = gameScoreDiffList2.zip(guessScoreDiffList).map { case (gameScoreDiff, guessScoreDiff)\
    \ => gameScoreDiff - guessScoreDiff }\n        val gameScoreDiffList4 = gameScoreDiffList3.zip(guessScoreDiffList).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList5 = gameScoreDiffList4.zip(guessScoreDiffList).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList6 = gameScoreDiffList5.zip(guessScoreDiffList).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList7 = gameScoreDiffList6.zip(guessScoreDiffList).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList8 = gameScoreDiffList7.zip(guessScoreDiffList).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList9 = gameScoreDiffList8.zip(guessScoreDiffList).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList10 = gameScoreDiffList9.zip(guessScoreDiffList).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList11 = gameScore", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameLen = game.size\n      \
    \  val guessLen = guess.size\n        val result = new Array[Long](guessLen)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var sum = 0\n\
    \        while (i < gameLen && j < guessLen) {\n            if (game(i) == guess(j))\
    \ {\n                sum = 0\n                while (i < gameLen && j < guessLen\
    \ && game(i) == guess(j)) {\n                    sum += 1\n                  \
    \  i += 1\n                    j += 1\n                }\n                result(k)\
    \ = sum\n                k += 1\n                i = 0\n                j = 0\n\
    \            } else {\n                val diff = abs(game(i) - guess(j))\n  \
    \              result(k) = diff\n                k += 1\n                i = 0\n\
    \                j = 0\n            }\n        }\n        result", "        val\
    \ gameLength = game.length\n        val guessLength = guess.length\n        val\
    \ result = new Array[Long](guessLength)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScore = gameScores.map\
    \ { case (score, index) => score }\n        val guessScore = guessScores.map {\
    \ case (score, index) => score }\n        val gameScoreDiff = gameScore diff guessScore\n\
    \        val gameScoreDiffLength = gameScoreDiff.length\n        val gameScoreDiffDiff\
    \ = gameScoreDiff.zipWithIndex.map { case (score, index) => score -> index }.toMap\n\
    \        val gameScoreDiffDiffLength = gameScoreDiffDiff.length\n        val gameScoreDiffDiffDiff\
    \ = gameScoreDiffDiff.zipWithIndex.map { case (score, index) => score -> index\
    \ }.toMap\n        val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiff.length\n\
    \        val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiff.length\n    \
    \    val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n        val\
    \ gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n        val gameScoreDiffDiffDiffLength\
    \ = gameScoreDiffDiffDiffLength\n        val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n\
    \        val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n     \
    \   val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n        val\
    \ gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n        val gameScoreDiffDiffDiffLength\
    \ = gameScoreDiffDiffDiffLength\n        val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n\
    \        val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n     \
    \   val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n        val\
    \ gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n        val gameScoreDiffDiffDiffLength\
    \ = gameScoreDiffDiffDiffLength\n        val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n\
    \        val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n     \
    \   val gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n        val\
    \ gameScoreDiffDiffDiffLength = gameScoreDiffDiffDiffLength\n        val gameScoreDiffDiffDiffLength\
    \ = gameScoreDiffDiffDiffLength\n        val gameScore", "        val guesses\
    \ = guess.toSet\n        val scores = game.toSet\n        val results = new mutable.ListBuffer[Long]()\n\
    \        val maxScore = scores.max\n        val maxGuess = guess.max\n       \
    \ val maxScoreIndex = scores.indexOf(maxScore)\n        val maxGuessIndex = guess.indexOf(maxGuess)\n\
    \        val maxScoreScore = maxScoreIndex - maxGuessIndex\n        val maxScoreGuess\
    \ = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses = maxScoreIndex\
    \ - maxGuessIndex\n        val maxScoreGuesses2 = maxScoreIndex - maxScoreIndex\n\
    \        val maxScoreGuesses3 = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses4\
    \ = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses5 = maxScoreIndex\
    \ - maxScoreIndex\n        val maxScoreGuesses6 = maxScoreIndex - maxScoreIndex\n\
    \        val maxScoreGuesses7 = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses8\
    \ = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses9 = maxScoreIndex\
    \ - maxScoreIndex\n        val maxScoreGuesses10 = maxScoreIndex - maxScoreIndex\n\
    \        val maxScoreGuesses11 = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses12\
    \ = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses13 = maxScoreIndex\
    \ - maxScoreIndex\n        val maxScoreGuesses14 = maxScoreIndex - maxScoreIndex\n\
    \        val maxScoreGuesses15 = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses16\
    \ = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses17 = maxScoreIndex\
    \ - maxScoreIndex\n        val maxScoreGuesses18 = maxScoreIndex - maxScoreIndex\n\
    \        val maxScoreGuesses19 = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses20\
    \ = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses21 = maxScoreIndex\
    \ - maxScoreIndex\n        val maxScoreGuesses22 = maxScoreIndex - maxScoreIndex\n\
    \        val maxScoreGuesses23 = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses24\
    \ = maxScoreIndex - maxScoreIndex\n        val maxScoreGuesses25 = maxScoreIndex",
  "        val gameLen = game.length\n        val guessLen = guess.length\n      \
    \  val gameScores = game.zipWithIndex.map { case (score, index) => (index, score)\
    \ }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score, index)\
    \ => (index, score) }.toMap\n        val gameScore = gameScores.map { case (index,\
    \ score) => (index, score) }.toMap\n        val guessScore = guessScores.map {\
    \ case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScore",
  "        val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ result = new mutable.ListBuffer[Long]()\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val ", "        val gameLen =\
    \ game.size\n        val guessLen = guess.size\n        val result = new Array[Long](guessLen)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        while (i < guessLen\
    \ && j < gameLen) {\n            if (game(j) == guess(i)) {\n                result(k)\
    \ = game(j)\n                i += 1\n                j += 1\n                k\
    \ += 1\n            } else if (game(j) < guess(i)) {\n                i += 1\n\
    \            } else {\n                j += 1\n            }\n        }\n    \
    \    result", "        val guesses = guess.toList\n        val scores = game.toList\n\
    \        val guessesCount = guesses.size\n        val scoresCount = scores.size\n\
    \        val guessesCorrect = guesses.zip(scores).filter(_._2 == 0).map(_._1).sum\n\
    \        val scoresCorrect = scores.zip(guesses).filter(_._2 == 0).map(_._1).sum\n\
    \        val guessesDiff = guessesCount - guessesCorrect\n        val scoresDiff\
    \ = scoresCount - scoresCorrect\n        guesses.zip(scores).filter(_._2 == 0).map(_._1).zipWithIndex.map\
    \ { case (guess, score) =>\n            if (guess == score) {\n              \
    \  0\n            } else {\n                Math.abs(guess - score)\n        \
    \    }\n        }", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score }\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val gameScoreCount = gameScores.count\n        val\
    \ guessScoreCount = guessScores.count\n        val gameScoreSum = gameScores.sum\n\
    \        val guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum\
    \ - guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n\
    \        val gameScoreDiffs = gameScores.zip(guessScores).map { case (gameScore,\
    \ guessScore) =>\n            if (gameScore == guessScore) {\n               \
    \ 0\n            } else {\n                Math.abs(gameScore - guessScore)\n\
    \            }\n        }\n        val guessScoreDiffs = guessScores.zip(gameScores).map\
    \ { case (guessScore, gameScore) =>\n            if (guessScore == gameScore)\
    \ {\n                0\n            } else {\n                Math.abs(guessScore\
    \ - gameScore)\n            }\n        }\n        gameScoreDiffs.zip(guessScoreDiffs).map\
    \ { case (gameScoreDiff, guessScoreDiff) =>\n            if (gameScoreDiff ==\
    \ guessScoreDiff) {\n                0\n            } else {\n               \
    \ gameScoreDiff + guessScoreDiff\n            }\n        }", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        val gameScoreDiffs = gameScores.zip(guessScores).map\
    \ { case (gameScore, guessScore) =>\n            if (guessScore == gameScore)\
    \ {\n                0\n            } else {\n                Math.abs(gameScore\
    \ - guessScore)\n            }\n        }\n        gameScoreDiffs.take(gameScoreCount)",
  "        val guesses = guess.map(x => Math.abs(x - game))\n        val scores =\
    \ game.map(x => Math.abs(x - guess))\n        guesses.zip(scores).map(x => if\
    \ (x._1 == 0) 0 else x._1 - x._2)", "        val gameSize = game.size\n      \
    \  val guessSize = guess.size\n        val result = new Array[Long](guessSize)\n\
    \        val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }.toMap\n        guessScores.foreach { case (index,\
    \ score) =>\n            val guessIndex = guessScores.keys.toList.indexOf(index)\n\
    \            if (guessIndex == -1) {\n                result(index) = score\n\
    \            } else {\n                val gameScore = gameScores.get(index)\n\
    \                val guessScore = guessScores.get(guessIndex)\n              \
    \  result(index) = Math.abs(guessScore - gameScore)\n            }\n        }\n\
    \        result", "        val gameLen = game.length\n        val guessLen = guess.length\n\
    \        val result = new mutable.ArrayList[Long](guessLen)\n        val gameScores\
    \ = game.zipWithIndex.map{case (score, index) => score}\n        val guessScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreKeys = gameScoreMap.keySet\n        val guessScoreKeys = guessScoreMap.keySet\n\
    \        val gameScoreValues = gameScoreMap.values.toList\n        val guessScoreValues\
    \ = guessScoreMap.values.toList\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val ", "        val gameLen = game.length\n\
    \        val guessLen = guess.length\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessScores = guess.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n       \
    \ val guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues = gameScoreMap.values.toList\n\
    \        val guessScoreValues = guessScoreMap.values.toList\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeysSet = gameScoreKeySet.toSet\n\
    \        val guessScoreKeysSet = guessScoreKeySet.toSet\n        val gameScoreValuesSet\
    \ = gameScoreValueSet.toSet\n        val guessScoreValuesSet = guessScoreValueSet.toSet\n\
    \        val gameScoreKeysSet = gameScoreKeySet.toSet\n        val guessScoreKeysSet\
    \ = guessScoreKeySet.toSet\n        val gameScoreValuesSet = gameScoreValueSet.toSet\n\
    \        val guessScoreValuesSet = guessScoreValueSet.toSet\n        val gameScoreKeysSet\
    \ = gameScoreKeySet.toSet\n        val guessScoreKeysSet = guessScoreKeySet.toSet\n\
    \        val gameScoreValuesSet = gameScoreValueSet.toSet\n        val guessScoreValuesSet\
    \ = guessScoreValueSet.toSet\n        val gameScoreKeysSet = gameScoreKeySet.toSet\n\
    \        val guessScoreKeysSet = guessScoreKeySet.toSet\n        val gameScoreValuesSet\
    \ = gameScoreValueSet.toSet\n        val guessScoreValuesSet = guessScoreValueSet.toSet\n\
    \        val gameScoreKeysSet = gameScoreKeySet.toSet\n        val guessScoreKeysSet\
    \ = guessScoreKeySet.toSet\n        val gameScoreValuesSet = gameScoreValueSet.toSet\n\
    \        val guessScoreValuesSet = guessScoreValueSet.toSet\n        val gameScoreKeysSet\
    \ = gameScoreKeySet.toSet\n        val guessScoreKeysSet = guessScore", "    \
    \    val gameLen = game.length\n        val guessLen = guess.length\n        val\
    \ result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        guessScores.foreach {\
    \ case (score, index) =>\n            val guessScore = guessScoreMap(index)\n\
    \            val gameScore = gameScoreMap(index)\n            val diff = abs(guessScore\
    \ - gameScore)\n            if (gameScore == guessScore) {\n                result(index)\
    \ = diff\n            } else {\n                result(index) = diff * -1\n  \
    \          }\n        }\n        result", "        val gameScores = game.map(x\
    \ => if (x == 0) 0 else x)\n        val guessesScores = guess.map(x => if (x ==\
    \ 0) 0 else x)\n        val diffs = guessesScores.zip(gameScores).map(x => if\
    \ (x._1 == x._2) 0 else abs(x._1 - x._2))\n        diffs.toList", "        val\
    \ guesses = guess.toSet\n        val scores = game.toSet\n        val results\
    \ = new mutable.ArrayBuffer[Long]()\n        val guessesWithScore = game.toSet.zip(guesses)\n\
    \        val scoresWithGuesses = guess.toSet.zip(game)\n        guessesWithScore.foreach\
    \ { case (score, guess) =>\n            if (scoreWithGuesses.contains(guess))\
    \ results += score\n        }\n        results", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = new\
    \ mutable.ListBuffer[Long]()\n        val guessScoreList = new mutable.ListBuffer[Long]()\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList\
    \ = new mutable.ListBuffer[Long]()\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = new\
    \ mutable.ListBuffer[Long]()\n        val guessScoreList = new mutable.ListBuffer[Long]()\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList\
    \ = new mutable.ListBuffer[Long]()\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = new\
    \ mutable.ListBuffer[Long]()\n        val guessScoreList = new mutable.ListBuffer[Long]()\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList\
    \ = new mutable.ListBuffer[Long]()\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScore", "        val gameLen = game.size\n        val guessLen\
    \ = guess.size\n        val result = new Array[Long](guessLen)\n        var i\
    \ = 0\n        while (i < guessLen) {\n            val gameScore = game(i)\n \
    \           val guessScore = guess(i)\n            val diff = guessScore - gameScore\n\
    \            if (diff < 0) {\n                val temp = gameScore\n         \
    \       gameScore = guessScore\n                guessScore = temp\n          \
    \      diff *= -1\n            }\n            result(i) = diff\n            i\
    \ += 1\n        }\n        result", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreKeys\
    \ = gameScoreMap.keySet\n        val guessesScoreKeys = guessesScoreMap.keySet\n\
    \        val gameScoreKeysSet = gameScoreKeys.toSet\n        val guessesScoreKeysSet\
    \ = guessesScoreKeys.toSet\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val gameScoreKeys", "        val gameScores\
    \ = game.map(x => if (x == 0) 0 else x)\n        val guessScores = guess.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScore = gameScores.sum\n        val\
    \ guessScore = guessScores.sum\n        val diffs = guessScores.zip(gameScores).map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        diffs.toList", "    \
    \    val guesses = guess.toSet\n        val scores = game.toSet\n        val result\
    \ = new mutable.ArrayBuffer[Long]()\n        for(score <- scores) {\n        \
    \    val guess = guesses.find(_ == score)\n            if(guess == None) result\
    \ += score\n            else result += (guess - score).abs.toLong\n        }\n\
    \        result.toList", "        val guesses = guess.toList\n        val scores\
    \ = game.toList\n        val guessesCount = guesses.size\n        val scoresCount\
    \ = scores.size\n        val result = new Array[Long](guessesCount)\n        val\
    \ guessesRemaining = guessesCount - 1\n        val scoresRemaining = scoresCount\
    \ - 1\n        var i = 0\n        while (i < guessesCount) {\n            val\
    \ guess = guesses(i)\n            val score = scores(i)\n            val guessesRemainingCount\
    \ = guessesRemaining\n            val scoresRemainingCount = scoresRemaining\n\
    \            val guessesRemainingIndex = guessesRemaining\n            val scoresRemainingIndex\
    \ = scoresRemaining\n            val guessesRemainingValue = guessesRemaining\n\
    \            val scoresRemainingValue = scoresRemaining\n            val guessesRemainingValueIndex\
    \ = guessesRemainingIndex\n            val scoresRemainingValueIndex = scoresRemainingIndex\n\
    \            val guessesRemainingValueValue = guessesRemainingValue\n        \
    \    val scoresRemainingValueValue = scoresRemainingValue\n            val guessesRemainingValueValueIndex\
    \ = guessesRemainingValueIndex\n            val scoresRemainingValueValueIndex\
    \ = scoresRemainingValueIndex\n            val guessesRemainingValueValueValue\
    \ = guessesRemainingValueValue\n            val scoresRemainingValueValueValue\
    \ = scoresRemainingValueValue\n            val guessesRemainingValueValueValueIndex\
    \ = guessesRemainingValueValueIndex\n            val scoresRemainingValueValueValueIndex\
    \ = scoresRemainingValueValueIndex\n            val guessesRemainingValueValueValueValue\
    \ = guessesRemainingValueValueValue\n            val scoresRemainingValueValueValueValue\
    \ = scoresRemainingValueValueValue\n            val guessesRemainingValueValueValueValueIndex\
    \ = guessesRemainingValueValueValueIndex\n            val scoresRemainingValueValueValueValueIndex\
    \ = scoresRemainingValueValueValueIndex\n            val guessesRemainingValueValueValueValueValue\
    \ = guessesRemainingValueValueValueValue\n            val scoresRemainingValueValueValueValueValue\
    \ = scoresRemainingValueValueValueValueValue\n            val guessesRemainingValueValueValueValueValueIndex\
    \ = guessesRemainingValueValueValueValueValueIndex\n            val scoresRemainingValueValueValueValueValueIndex\
    \ = scoresRemainingValueValueValueValueValueIndex\n            val guessesRemainingValueValueValueValueValueValue\
    \ = guessesRemainingValueValueValueValueValueValue\n            val scoresRemainingValueValueValueValueValueValue\
    \ = scoresRemainingValueValueValueValueValueValue\n            val guessesRemainingValueValueValueValue",
  "        val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ results = new mutable.ListBuffer[Long]()\n        for(score <- scores) {\n \
    \           val guess = guesses.find(_ == score)\n            if(guess == None)\
    \ results += score\n            else {\n                val diff = guess - score\n\
    \                if(diff > 0) results += diff\n                else if(diff <\
    \ 0) results += abs(diff)\n            }\n        }\n        results.toList",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val guessesScoreKeys = guessesScoreMap.keys\n\
    \        val gameScoreKeys = gameScoreMap.keys\n        val guessesScoreValues\
    \ = guessesScoreMap.values.toList\n        val gameScoreValues = gameScoreMap.values.toList\n\
    \        val guessesScoreKeysAndValues = guessesScoreKeys.zip(guessesScoreValues)\n\
    \        val gameScoreKeysAndValues = gameScoreKeys.zip(gameScoreValues)\n   \
    \     val guessesScoreKeysAndValuesSortedByKey = guessesScoreKeysAndValues.sortBy(_._1)\n\
    \        val gameScoreKeysAndValuesSortedByKey = gameScoreKeysAndValues.sortBy(_._1)\n\
    \        val guessesScoreKeysAndValuesSortedByValue = guessesScoreKeysAndValues.sortBy(_._2)\n\
    \        val gameScoreKeysAndValuesSortedByValue = gameScoreKeysAndValues.sortBy(_._2)\n\
    \        val guessesScoreKeysAndValuesSortedByValueAndKey = guessesScoreKeysAndValues.sortBy(_._3)\n\
    \        val gameScoreKeysAndValuesSortedByValueAndKey = gameScoreKeysAndValues.sortBy(_._3)\n\
    \        val guessesScoreKeysAndValuesSortedByValueAndKeyAndValue = guessesScoreKeysAndValues.sortBy(_._4)\n\
    \        val gameScoreKeysAndValuesSortedByValueAndKeyAndValue = gameScoreKeysAndValues.sortBy(_._4)\n\
    \        val guessesScoreKeysAndValuesSortedByValueAndKeyAndValueAndKey = guessesScoreKeysAndValues.sortBy(_._5)\n\
    \        val gameScoreKeysAndValuesSortedByValueAndKeyAndValueAndKey = gameScoreKeysAndValues.sortBy(_._5)\n\
    \        val guessesScoreKeysAndValuesSortedByValueAndKeyAndValueAndKeyAndValue\
    \ = guessesScoreKeysAndValues.sortBy(_._6)\n        val gameScoreKeysAndValuesSortedByValueAndKeyAndValueAndKeyAndValue\
    \ = gameScoreKeysAndValues.sortBy(_._6)\n        val guessesScoreKeysAndValuesSortedByValueAndKeyAndValueAndKeyAndValueAndKeyAndValue\
    \ = guessesScoreKeysAndValues.sortBy(_._7)\n        val game", "        val gameScores\
    \ = game.map(x => if (x == 0) 0 else x)\n        val guessScores = guess.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreCount = gameScores.distinct\n\
    \        val guessScoreCount = guessScores.distinct\n        val gameScoreCountMap\
    \ = gameScoreCount.toMap\n        val guessScoreCountMap = guessScoreCount.toMap\n\
    \        val gameScoreCountMapKeys = gameScoreCountMap.keys\n        val guessScoreCountMapKeys\
    \ = guessScoreCountMap.keys\n        val gameScoreCountMapValues = gameScoreCountMap.values.toList\n\
    \        val guessScoreCountMapValues = guessScoreCountMap.values.toList\n   \
    \     val gameScoreCountMapKeysSorted = gameScoreCountMapKeys.sortBy(x => x)\n\
    \        val guessScoreCountMapKeysSorted = guessScoreCountMapKeys.sortBy(x =>\
    \ x)\n        val gameScoreCountMapValuesSorted = gameScoreCountMapValues.sortBy(x\
    \ => x)\n        val guessScoreCountMapValuesSorted = guessScoreCountMapValues.sortBy(x\
    \ => x)\n        val gameScoreCountMapKeysSortedReversed = gameScoreCountMapKeys.sortBy(x\
    \ => x).reverse\n        val guessScoreCountMapKeysSortedReversed = guessScoreCountMapKeys.sortBy(x\
    \ => x).reverse\n        val gameScoreCountMapValuesSortedReversed = gameScoreCountMapValues.sortBy(x\
    \ => x).reverse\n        val guessScoreCountMapValuesSortedReversed = guessScoreCountMapValues.sortBy(x\
    \ => x).reverse\n        val gameScoreCountMapKeysSortedReversedMap = gameScoreCountMapKeysSortedReversed.map(x\
    \ => (x, gameScoreCountMapValuesSortedReversed(x)))\n        val guessScoreCountMapKeysSortedReversedMap\
    \ = guessScoreCountMapKeysSortedReversed.map(x => (x, guessScoreCountMapValuesSortedReversed(x)))\n\
    \        val gameScoreCountMapKeysSortedReversedMapKeys = gameScoreCountMapKeysSortedReversedMap.keys\n\
    \        val guessScoreCountMapKeysSortedReversedMapKeys = guessScoreCountMapKeysSortedReversedMap.keys\n\
    \        val gameScoreCountMapKeysSortedReversedMapValues = gameScoreCountMapKeysSortedReversedMapKeys.map(x\
    \ => gameScoreCountMapValuesSortedReversed(x))\n        val guessScoreCountMapKeysSortedReversedMapValues\
    \ = guessScoreCountMapKeysSortedReversedMapKeys.map(x => guessScoreCountMapValuesSortedReverse",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => guess -> score }.toMap\n        val guessesWithIndexes\
    \ = guess.zip(game).map { case (guess, score) => guess -> index }.toMap\n    \
    \    val guessesWithScoreAndIndex = guess.zip(game).map { case (guess, score)\
    \ => guess -> score -> index }.toMap\n        val guessesWithScoreAndIndexAndScore\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> score\
    \ }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndex = guess.zip(game).map\
    \ { case (guess, score) => guess -> score -> index -> score -> index }.toMap\n\
    \        val guessesWithScoreAndIndexAndScoreAndIndexAndScore = guess.zip(game).map\
    \ { case (guess, score) => guess -> score -> index -> score -> index -> score\
    \ }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> score\
    \ -> index -> score -> index }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> score\
    \ -> index -> score -> index -> score }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> score\
    \ -> index -> score -> index -> score -> index }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> score\
    \ -> index -> score -> index -> score -> index -> score -> index }.toMap\n   \
    \     val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> score\
    \ -> index -> score -> index -> ", "        val guesses = gues\n        val scores\
    \ = game\n        val guessesCount = guesses.size\n        val scoresCount = scores.size\n\
    \        val result = new Array[Long](guessesCount)\n        var i = 0\n     \
    \   while (i < guessesCount) {\n            val guess = guesses(i)\n         \
    \   val score = scores(i)\n            if (guess == score) {\n               \
    \ result(i) = score\n                i += 1\n            } else {\n          \
    \      val diff = abs(guess - score)\n                result(i) = diff\n     \
    \           i += 1\n            }\n        }\n        result", "        val gameLength\
    \ = game.size\n        val guessLength = guess.size\n        val result = new\
    \ Array[Long](guessLength)\n        var i = 0\n        while (i < guessLength)\
    \ {\n            val gameScore = game(i)\n            val guessScore = guess(i)\n\
    \            val diff = guessScore - gameScore\n            if (diff < 0) {\n\
    \                diff = -diff\n            }\n            result(i) = diff\n \
    \           i += 1\n        }\n        result", "        val gameLen = game.size\n\
    \        val guessLen = guess.size\n        val result = new mutable.ArrayList[Long](guessLen)\n\
    \        var i = 0\n        while (i < guessLen) {\n            var j = 0\n  \
    \          while (j < gameLen) {\n                if (game(j) == guess(i)) {\n\
    \                    result(i) += 1\n                    j += 1\n            \
    \    }\n                else {\n                    result(i) += abs(game(j) -\
    \ guess(i))\n                    j += 1\n                }\n            }\n  \
    \          i += 1\n        }\n        result", "        val gameLen = game.length\n\
    \        val guessLen = guess.length\n        val result = new Array[Long](guessLen)\n\
    \        val gameScores = game.zipWithIndex.filter(_._1 == 0).map(_._2)\n    \
    \    val guessScores = guess.zipWithIndex.filter(_._1 == 0).map(_._2)\n      \
    \  val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreKeys = gameScoreMap.keySet\n        val guessScoreKeys =\
    \ guessScoreMap.keySet\n        val gameScoreValues = gameScoreMap.values.toList\n\
    \        val guessScoreValues = guessScoreMap.values.toList\n        var i = 0\n\
    \        while (i < guessLen) {\n            val guessScore = guessScoreValues(i)\n\
    \            val gameScore = gameScoreValues(i)\n            val gameScoreKey\
    \ = gameScoreKeys(i)\n            val guessScoreKey = guessScoreKeys(i)\n    \
    \        val gameScoreDiff = gameScore - guessScore\n            val guessScoreDiff\
    \ = guessScore - gameScore\n            if (gameScoreKey == guessScoreKey) {\n\
    \                result(i) = gameScoreDiff\n            } else {\n           \
    \     result(i) = Math.abs(guessScoreDiff)\n            }\n            i += 1\n\
    \        }\n        result", "        val gameSize = game.size\n        val guessSize\
    \ = guess.size\n        val result = new mutable.ArrayList[Long](guessSize)\n\
    \        val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }.toMap\n        guessScores.foreach { case (index,\
    \ score) =>\n            val guess = guessScores.get(index)._1\n            val\
    \ gameScore = gameScores.get(index)._1\n            val diff = abs(guess - gameScore)\n\
    \            if (guess == gameScore) {\n                result.add(0)\n      \
    \      } else {\n                result.add(diff)\n            }\n        }\n\
    \        result.toList", "        val gameScores = game.zipWithIndex.map { case\
    \ (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreCount = gameScores.count\n\
    \        val guessScoreCount = guessScores.count\n        val gameScoreSum = gameScores.sum\n\
    \        val guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum\
    \ - guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n\
    \        val gameScoreDiffs = gameScores.zip(guessScores).map { case (gameScore,\
    \ guessScore) =>\n            val diff = Math.abs(gameScore - guessScore)\n  \
    \          diff match {\n                case 0 => diff\n                case\
    \ diff if diff < 0 => diff + gameScoreDiff\n                case diff if diff\
    \ > 0 => diff - gameScoreDiff\n            }\n        }\n        gameScoreDiffs.toList",
  "        val gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessScores\
    \ = guess.map(x => if (x == 0) 0 else x)\n        val gameScore = gameScores.sum\n\
    \        val guessScore = guessScores.sum\n        val gameDiff = gameScore -\
    \ guessScore\n        val guessedCorrectly = gameScores.forall(x => x == guessScore)\n\
    \        val diffs = guessScores.map(x => if (x == 0) 0 else abs(x - gameScore))\n\
    \        val correctGuesses = gameScores.filter(x => x == guessScore)\n      \
    \  val correctGuessesDiffs = correctGuesses.map(x => if (x == 0) 0 else abs(x\
    \ - gameScore))\n        val diffsCorrectGuesses = correctGuesses.map(x => if\
    \ (x == 0) 0 else abs(x - guessScore))\n        val diffsCorrectGuessesDiffs =\
    \ correctGuesses.map(x => if (x == 0) 0 else abs(x - guessScore))\n        val\
    \ diffsCorrectGuessesDiffsCorrectGuesses = correctGuesses.map(x => if (x == 0)\
    \ 0 else abs(x - guessScore))\n        val diffsCorrectGuessesDiffsCorrectGuessesDiffs\
    \ = correctGuesses.map(x => if (x == 0) 0 else abs(x - guessScore))\n        val\
    \ diffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuesses = correctGuesses.map(x\
    \ => if (x == 0) 0 else abs(x - guessScore))\n        val diffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuessesDiffs\
    \ = correctGuesses.map(x => if (x == 0) 0 else abs(x - guessScore))\n        val\
    \ diffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuesses\
    \ = correctGuesses.map(x => if (x == 0) 0 else abs(x - guessScore))\n        val\
    \ diffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuessesDiffs\
    \ = correctGuesses.map(x => if (x == 0) 0 else abs(x - guessScore))\n        val\
    \ diffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuesses\
    \ = correctGuesses.map(x => if (x == 0) 0 else abs(x - guessScore))\n        val\
    \ diffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectGuessesDiffsCorrectG", " \
    \       val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessScores = guess.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreDiff = gameScoreCount - guessScoreCount\n\
    \        val guessScoreDiff = guessScoreCount - gameScoreCount\n        val gameScoreDiffs\
    \ = gameScores.zip(guessScores).map { case (gameScore, guessScore) => abs(gameScore\
    \ - guessScore) }\n        val guessScoreDiffs = guessScores.zip(gameScores).map\
    \ { case (guessScore, gameScore) => abs(guessScore - gameScore) }\n        gameScoreDiffs.zip(guessScoreDiffs).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff + guessScoreDiff }",
  "        val gameLen = game.length\n        val guessLen = guess.length\n      \
    \  val result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreArray =\
    \ gameScores.toArray\n        val guessScoreArray = guessScores.toArray\n    \
    \    val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreArray = gameScores.toArray\n        val guessScoreArray\
    \ = guessScores.toArray\n        val gameScoreMap = gameScores.toMap\n       \
    \ val guessScoreMap = guessScores.toMap\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreArray =\
    \ gameScores.toArray\n        val guessScoreArray = guessScores.toArray\n    \
    \    val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreArray = gameScores.toArray\n        val guessScoreArray\
    \ = guessScores.toArray\n        val gameScore", "        val gameScores = game.map(x\
    \ => if (x == 0) 0 else x)\n        val guessScores = guess.map(x => if (x ==\
    \ 0) 0 else x)\n        val gameScore = gameScores.sum\n        val guessScore\
    \ = guessScores.sum\n        val gameDiff = gameScore - guessScore\n        val\
    \ guessDiff = guessScore - gameScore\n        gameDiff.map(x => if (x == 0) 0\
    \ else x)", "        val gameLen = game.size\n        val guessLen = guess.size\n\
    \        val result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => (index, score) }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => (index, score) }.toMap\n        guessScores.foreach\
    \ { case (index, score) =>\n            val guess = guessScores.filter(_._1 ==\
    \ index).map(_._2).head\n            val gameScore = gameScores.getOrElse(index,\
    \ 0)\n            val diff = abs(guess - score)\n            if (diff == 0) result(0)\
    \ = 0\n            else result(index) = diff\n        }\n        result", "  \
    \      val gameLen = game.length\n        val guessLen = guess.length\n      \
    \  val result = new mutable.ArrayBuffer[Long]()\n        var i = 0\n        while\
    \ (i < gameLen) {\n            val gameScore = game(i)\n            val guessScore\
    \ = guess(i)\n            val diff = abs(guessScore - gameScore)\n           \
    \ if (gameScore == guessScore) {\n                result.append((gameScore - guessScore))\n\
    \                i += 1\n            } else {\n                result.append((guessScore\
    \ - gameScore))\n                i += 1\n            }\n        }\n        result",
  "        val gameSet = game.distinct\n        val guessSet = guess.distinct\n  \
    \      val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val result = new mutable.ArrayList[Long]()\n        val gameSetIterator\
    \ = gameSet.iterator\n        val guessSetIterator = guessSet.iterator\n     \
    \   val gameSetIteratorSize = gameSetIterator.size\n        val guessSetIteratorSize\
    \ = guessSetIterator.size\n        var gameSetIteratorIndex = 0\n        var guessSetIteratorIndex\
    \ = 0\n        var gameSetIteratorValue = 0\n        var guessSetIteratorValue\
    \ = 0\n        var gameSetIteratorValueDiff = 0\n        var guessSetIteratorValueDiff\
    \ = 0\n        var gameSetIteratorValueDiffAbs = 0\n        var guessSetIteratorValueDiffAbs\
    \ = 0\n        var gameSetIteratorValueDiffAbsMax = 0\n        var guessSetIteratorValueDiffAbsMax\
    \ = 0\n        var gameSetIteratorValueDiffAbsMin = 0\n        var guessSetIteratorValueDiffAbsMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMin = 0\n        var guessSetIteratorValueDiffAbsMaxMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValueDiffAbsMaxMinMin = 0\n        var guessSetIteratorValueDiffAbsMaxMinMin\
    \ = 0\n        var gameSetIteratorValue", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessesScores = guess.zipWithIndex.map{case\
    \ (score, index) => score}\n        val gameScoreMap = gameScores.toMap\n    \
    \    val guessesScoreMap = guessesScores.toMap\n        val gameScores = gameScoreMap.values.toList\n\
    \        val guessesScores = guessesScoreMap.values.toList\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScores = gameScoreMap.values.toList\n        val guessesScores =\
    \ guessesScoreMap.values.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScores = gameScoreMap.values.toList\n\
    \        val guessesScores = guessesScoreMap.values.toList\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScores = gameScoreMap.values.toList\n        val guessesScores =\
    \ guessesScoreMap.values.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScores = gameScoreMap.values.toList\n\
    \        val guessesScores = guessesScoreMap.values.toList\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScores = gameScoreMap.values.toList\n        val guessesScores =\
    \ guessesScoreMap.values.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScores = gameScoreMap.values.toList\n\
    \        val guessesScores = guessesScoreMap.values.toList\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScores = gameScoreMap.values.toList\n        val guessesScores =\
    \ guessesScoreMap.values.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScores = gameScoreMap.values.toList\n\
    \        val guessesScores = guessesScoreMap.values.toList\n        val ", " \
    \       val gameLen = game.size\n        val guessLen = guess.size\n        val\
    \ result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map{\
    \ case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map{\
    \ case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keySet\n\
    \        val guessScoreKeys = guessScoreMap.keySet\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessScoreValues = guessScoreMap.values.toList\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScore", "        val guesses = guess.toSet\n        val scores\
    \ = game.toSet\n        val guessesCount = guesses.size\n        val scoresCount\
    \ = scores.size\n        val result = new mutable.ArrayBuffer[Long]()\n      \
    \  var i = 0\n        while (i < guessesCount) {\n            val guess = guesses(i)\n\
    \            val score = scores(i)\n            val difference = abs(guess - score)\n\
    \            if (difference == 0) {\n                result.add(i)\n         \
    \   } else {\n                result.add(difference)\n            }\n        \
    \    i += 1\n        }\n        result.toList", "        val gameLength = game.length\n\
    \        val guessLength = guess.length\n        val result = new Array[Long](guessLength)\n\
    \        val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val gameScore = gameScores.foldLeft(0L)\
    \ { (sum, score) => sum + score }\n        val guessScore = guessScores.foldLeft(0L)\
    \ { (sum, score) => sum + score }\n        val difference = gameScore - guessScore\n\
    \        guess.zipWithIndex.foreach { case (score, index) =>\n            if (gameScores(index)\
    \ == guessScores(index)) {\n                result(index) = difference\n     \
    \       } else {\n                result(index) = abs(score - gameScores(index))\n\
    \            }\n        }\n        result", "        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val results = new mutable.ArrayBuffer[Long]()\n\
    \        for(score <- scores) {\n            val guess = guesses.find(_ == score)\n\
    \            if (guess == None) results += score\n            else results +=\
    \ guess - score\n        }\n        results", "        val guesses = gues\n  \
    \      val scores = game\n        val result = new mutable.ArrayList[Long]()\n\
    \        val guessesCount = guesses.size\n        val scoresCount = scores.size\n\
    \        val diff = new mutable.ArrayList[Long](guessesCount)\n        val diffCount\
    \ = guessesCount\n        var i = 0\n        while(i < guessesCount) {\n     \
    \       val guess = guesses(i)\n            val score = scores(i)\n          \
    \  val diffIndex = i\n            val diffValue = score\n            while(i <\
    \ guessesCount && guesses(i) == guess) {\n                i += 1\n           \
    \     diffIndex += 1\n                diffValue += scores(i)\n            }\n\
    \            diff(i) = diffValue\n            i += 1\n        }\n        result.toList",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }\n        val gameScoreSet = gameScores.toSet\n  \
    \      val guessesScoreSet = guessesScores.toSet\n        val gameScoreList =\
    \ gameScores.toList\n        val guessesScoreList = guessesScores.toList\n   \
    \     val gameScoreSetSize = gameScoreSet.size\n        val guessesScoreSetSize\
    \ = guessesScoreSet.size\n        val gameScoreSetIterator = gameScoreSet.iterator\n\
    \        val guessesScoreSetIterator = guessesScoreSet.iterator\n        val gameScoreSetIteratorSize\
    \ = gameScoreSetIterator.size\n        val guessesScoreSetIteratorSize = guessesScoreSetIterator.size\n\
    \        val gameScoreSetIteratorIterator = gameScoreSetIterator.iterator\n  \
    \      val guessesScoreSetIteratorIterator = guessesScoreSetIterator.iterator\n\
    \        val gameScoreSetIteratorIteratorSize = gameScoreSetIteratorIterator.size\n\
    \        val guessesScoreSetIteratorIteratorSize = guessesScoreSetIteratorIterator.size\n\
    \        val gameScoreSetIteratorIteratorIterator = gameScoreSetIteratorIterator.iterator\n\
    \        val guessesScoreSetIteratorIteratorIterator = guessesScoreSetIteratorIterator.iterator\n\
    \        val gameScoreSetIteratorIteratorIteratorSize = gameScoreSetIteratorIteratorIterator.size\n\
    \        val guessesScoreSetIteratorIteratorIteratorSize = guessesScoreSetIteratorIteratorIterator.size\n\
    \        val gameScoreSetIteratorIteratorIteratorIterator = gameScoreSetIteratorIteratorIterator.iterator\n\
    \        val guessesScoreSetIteratorIteratorIteratorIterator = guessesScoreSetIteratorIteratorIterator.iterator\n\
    \        val gameScoreSetIteratorIteratorIteratorIteratorSize = gameScoreSetIteratorIteratorIteratorIterator.size\n\
    \        val guessesScoreSetIteratorIteratorIteratorIteratorSize = guessesScoreSetIteratorIteratorIteratorIterator.size\n\
    \        val gameScoreSetIteratorIteratorIteratorIteratorIterator = gameScoreSetIteratorIteratorIteratorIterator.iterator\n\
    \        val guessesScoreSetIteratorIteratorIteratorIteratorIterator = guessesScoreSetIteratorIteratorIteratorIterator.iterator\n\
    \        val gameScoreSetIteratorIteratorIteratorIteratorIteratorSize = gameScoreSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val guessesScoreSetIteratorIteratorIteratorIteratorSize = guessesScoreSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val gameScoreSetIteratorIteratorIteratorIteratorIteratorIterator = gameScoreSetIteratorIteratorIteratorIteratorIterator.iterator\n",
  "        val gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessesScores\
    \ = guess.map(x => if (x == 0) 0 else x)\n        val diffs = guessesScores.zip(gameScores).map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        diffs.toList", "    \
    \    val gameLen = game.length\n        val guessLen = guess.length\n        val\
    \ result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n\
    \        val guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessScoreValues = guessScoreMap.values.toList\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet", "        val gameScores = game.zipWithIndex.map(x\
    \ => x._2 - x._1).toList\n        val guessesScores = guess.zipWithIndex.map(x\
    \ => x._2 - x._1).toList\n        val guessesDiff = guessesScores.zip(gameScores).map(x\
    \ => if (x._1 == 0) 0 else x._1 - x._2)\n        val guessesDiffList = guessesDiff.toList\n\
    \        val guessesDiffListSorted = guessesDiffList.sortBy(x => x)\n        val\
    \ guessesDiffListSortedReversed = guessesDiffListSorted.reverse\n        val guessesDiffListSortedReversedSorted\
    \ = guessesDiffListSortedReversed.sortBy(x => x)\n        val guessesDiffListSortedReversedSortedSorted:\
    \ Seq[Long] = guessesDiffListSortedReversedSorted.take(guessesDiffListSortedReversedSortedSorted.length)\n\
    \        val guessesDiffListSortedReversedSortedSortedSorted: Seq[Long] = guessesDiffListSortedReversedSortedSorted.takeRight(guessesDiffListSortedReversedSortedSorted.length)\n\
    \        val guessesDiffListSortedReversedSortedSortedSortedSorted: Seq[Long]\
    \ = guessesDiffListSortedReversedSortedSortedSorted.take(guessesDiffListSortedReversedSortedSortedSorted.length)\n\
    \        val guessesDiffListSortedReversedSortedSortedSortedSorted: Seq[Long]\
    \ = guessesDiffListSortedReversedSortedSortedSorted.takeRight(guessesDiffListSortedReversedSortedSortedSorted.length)\n\
    \        val guessesDiffListSortedReversedSortedSortedSortedSorted: Seq[Long]\
    \ = guessesDiffListSortedReversedSortedSortedSorted.take(guessesDiffListSortedReversedSortedSortedSorted.length)\n\
    \        val guessesDiffListSortedReversedSortedSortedSortedSorted: Seq[Long]\
    \ = guessesDiffListSortedReversedSortedSortedSorted.takeRight(guessesDiffListSortedReversedSortedSortedSorted.length)\n\
    \        val guessesDiffListSortedReversedSortedSortedSortedSortedSorted: Seq[Long]\
    \ = guessesDiffListSortedReversedSortedSortedSortedSorted.take(guessesDiffListSortedReversedSortedSortedSortedSorted.length)\n\
    \        val guessesDiffListSortedReversedSortedSortedSortedSortedSorted: Seq[Long]\
    \ = guessesDiffListSortedReversedSortedSortedSortedSorted.takeRight(guessesDiffListSortedReversedSortedSortedSortedSorted.length)\n\
    \        val guessesDiffListSortedReversedSorted", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keySet\n\
    \        val guessScoreKeys = guessScoreMap.keySet\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessScoreValues = guessScoreMap.values.toList\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValue", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = new\
    \ mutable.ListBuffer[Long]()\n        val guessScoreList = new mutable.ListBuffer[Long]()\n\
    \        gameScoreMap.foreach { case (score, index) => gameScoreList += score\
    \ }\n        guessScoreMap.foreach { case (score, index) => guessScoreList +=\
    \ score }\n        val gameScores = gameScoreList.toList\n        val guessScores\
    \ = guessScoreList.toList\n        val gameScoreMap = gameScores.toMap\n     \
    \   val guessScoreMap = guessScores.toMap\n        val gameScoreList = new mutable.ListBuffer[Long]()\n\
    \        val guessScoreList = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach\
    \ { case (score, index) => gameScoreList += score }\n        guessScoreMap.foreach\
    \ { case (score, index) => guessScoreList += score }\n        val gameScores =\
    \ gameScoreList.toList\n        val guessScores = guessScoreList.toList\n    \
    \    val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList\
    \ = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach { case (score,\
    \ index) => gameScoreList += score }\n        guessScoreMap.foreach { case (score,\
    \ index) => guessScoreList += score }\n        val gameScores = gameScoreList.toList\n\
    \        val guessScores = guessScoreList.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = new\
    \ mutable.ListBuffer[Long]()\n        val guessScoreList = new mutable.ListBuffer[Long]()\n\
    \        gameScoreMap.foreach { case (score, index) => gameScoreList += score\
    \ }\n        guessScoreMap.foreach { case (score, index) => guessScoreList +=\
    \ score }\n        val gameScores = gameScoreList.toList\n        val guessScores\
    \ = guessScoreList.toList\n        val gameScoreMap = gameScores.toMap\n     \
    \   val guessScoreMap = guessScores.toMap\n        ", "        val gameLength\
    \ = game.length\n        val guessLength = guess.length\n        val result =\
    \ new Array[Long](guessLength)\n        var i = 0\n        while (i < guessLength)\
    \ {\n            val gameScore = game(i)\n            val guessScore = guess(i)\n\
    \            val diff = guessScore - gameScore\n            result(i) = if (diff\
    \ < 0) -diff else diff\n            i += 1\n        }\n        result", "    \
    \    val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ guessesWithScores = guesses.zip(scores)\n        val guessesWithScoresSortedByScore\
    \ = guessesWithScores.sortBy(_._2)\n        val guessesWithScoresSortedByScoreWithCorrectGuesses\
    \ = guessesWithScoresSortedByScore\n            .filter(_._1 == 0)\n         \
    \   .filter(_._2 > 0)\n        val guessesWithScoresSortedByScoreWithIncorrectGuesses\
    \ = guessesWithScoresSortedByScore\n            .filter(_._1 == 0)\n         \
    \   .filter(_._2 < 0)\n        val guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuesses\
    \ = guessesWithScoresSortedByScoreWithCorrectGuesses\n            .union(guessesWithScoresSortedByScoreWithIncorrectGuesses)\n\
    \        val guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuessesWithCorrectGuesses\
    \ = guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuesses\n    \
    \        .filter(_._2 == 0)\n        val guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuessesWithIncorrectGuesses\
    \ = guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuesses\n    \
    \        .filter(_._2 < 0)\n        val guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuessesWithCorrectGuessesAndIncorrectGuesses\
    \ = guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuessesWithCorrectGuesses\n\
    \            .filter(_._2 == 0)\n            .filter(_._2 < 0)\n        val guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuessesWithIncorrectGuessesAndCorrectGuesses\
    \ = guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuessesWithIncorrectGuesses\n\
    \            .filter(_._2 < 0)\n            .filter(_._2 == 0)\n        val guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuessesWithCorrectGuessesAndIncorrectGuessesAndCorrectGuesses\
    \ = guessesWithScoresSortedByScoreWithCorrectGuessesAndIncorrectGuessesWithCorrectGuessesAndIncorrectGuesses\n\
    \            .filter(_", "        val guesses = guess.toSet\n        val scores\
    \ = game.toSet\n        val diffs = scores.map(x => if (guesses.contains(x)) 0\
    \ else abs(x - guess(x)))\n        diffs.toList", "        val gameSet = game.distinct\n\
    \        val guessSet = guess.distinct\n        val result = gameSet.zip(guessSet).map\
    \ { case (game, guess) =>\n            if (game == guess) 0 else Math.abs(guess\
    \ - game)\n        }\n        result.toList", "        val gameScores = game.zipWithIndex.map(x\
    \ => x._1 - x._2)\n        val guessScores = guess.zipWithIndex.map(x => x._1\
    \ - x._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScores.toList\n       \
    \ val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameSet = game.toSet\n     \
    \   val guessSet = guess.toSet\n        val result = new mutable.ArrayList[Long]\n\
    \        val gameSize = game.size\n        val guessSize = guess.size\n      \
    \  val gameIndex = 0\n        val guessIndex = 0\n        val gameScore = game(gameIndex)\n\
    \        val guessScore = guess(guessIndex)\n        val gameScoreDiff = gameScore\
    \ - guessScore\n        val guessScoreDiff = guessScore - gameScore\n        while\
    \ (gameIndex < gameSize && guessIndex < guessSize) {\n            if (gameSet(gameIndex)\
    \ == guessSet(guessIndex)) {\n                result.add(gameScoreDiff)\n    \
    \            gameIndex += 1\n                guessIndex += 1\n            } else\
    \ if (gameSet(gameIndex) < guessSet(guessIndex)) {\n                result.add(guessScoreDiff)\n\
    \                gameIndex += 1\n            } else {\n                result.add(gameScoreDiff)\n\
    \                guessIndex += 1\n            }\n        }\n        result", " \
    \       val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessScores = guess.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n     \
    \   val guessScoreList = guessScoreMap.toList\n        val gameScoreSet = gameScoreList.distinct\n\
    \        val guessScoreSet = guessScoreList.distinct\n        val gameScoreSetSize\
    \ = gameScoreSet.size\n        val guessScoreSetSize = guessScoreSet.size\n  \
    \      val gameScoreSetIterator = gameScoreSet.iterator\n        val guessScoreSetIterator\
    \ = guessScoreSet.iterator\n        val gameScoreSetIteratorSize = gameScoreSetIterator.size\n\
    \        val guessScoreSetIteratorSize = guessScoreSetIterator.size\n        val\
    \ gameScoreSetIteratorIterator = gameScoreSetIterator.iterator\n        val guessScoreSetIteratorIterator\
    \ = guessScoreSetIterator.iterator\n        val gameScoreSetIteratorIteratorSize\
    \ = gameScoreSetIteratorIterator.size\n        val guessScoreSetIteratorIteratorSize\
    \ = guessScoreSetIteratorIterator.size\n        val gameScoreSetIteratorIteratorIterator\
    \ = gameScoreSetIteratorIterator.iterator\n        val guessScoreSetIteratorIteratorIterator\
    \ = guessScoreSetIteratorIterator.iterator\n        val gameScoreSetIteratorIteratorIteratorSize\
    \ = gameScoreSetIteratorIteratorIterator.size\n        val guessScoreSetIteratorIteratorIteratorSize\
    \ = guessScoreSetIteratorIteratorIterator.size\n        val gameScoreSetIteratorIteratorIteratorIterator\
    \ = gameScoreSetIteratorIteratorIterator.iterator\n        val guessScoreSetIteratorIteratorIteratorIterator\
    \ = guessScoreSetIteratorIteratorIterator.iterator\n        val gameScoreSetIteratorIteratorIteratorIteratorSize\
    \ = gameScoreSetIteratorIteratorIteratorIterator.size\n        val guessScoreSetIteratorIteratorIteratorIteratorSize\
    \ = guessScoreSetIteratorIteratorIteratorIterator.size\n        val gameScoreSetIteratorIteratorIteratorIteratorIterator\
    \ = gameScoreSetIteratorIteratorIteratorIterator.iterator\n        val guessScoreSetIteratorIteratorIteratorIteratorIterator\
    \ = guessScoreSetIteratorIteratorIteratorIterator.iterator\n        val gameScoreSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = gameScoreSetIteratorIteratorIteratorIteratorIterator.size\n        val guessScoreSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = guessScoreSetIteratorIteratorIteratorIteratorIterator.size\n        val gameScoreSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = gameScoreSetIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ guessScoreSetIteratorIteratorIteratorIteratorIteratorIterator = ", "       \
    \ val gameScores = game.zipWithIndex.map { case (score, index) => (index, score)\
    \ }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score, index)\
    \ => (index, score) }.toMap\n        val guessesWithScores = guessesScores.map\
    \ { case (index, score) => (index, gameScores(index) - score) }\n        val guessesWithAbsScores\
    \ = guessesWithScores.map { case (index, score) => (index, Math.abs(score)) }\n\
    \        guessesWithAbsScores.map { case (index, score) => (index, gameScores(index)\
    \ - score) }.toList", "        val guesses = guess.toSet\n        val scores =\
    \ game.toSet\n        val result = new mutable.ArrayBuffer[Long]()\n        for\
    \ (score <- scores) {\n            if (guesses.contains(score)) {\n          \
    \      result.append((score - guesses(score)).toLong)\n            } else {\n\
    \                result.append((score - score).toLong)\n            }\n      \
    \  }\n        result", "        val guesses = guess.toSet\n        val scores\
    \ = game.toSet\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ scoreDiffs = scores.map(x => Math.abs(x - guess(x)))\n        val guesseDiffs\
    \ = guesses.map(x => Math.abs(x - scores(x)))\n        guesseDiffs.zip(scoreDiffs).foreach\
    \ { case (guess, scoreDiff) =>\n            if (guess == 0) {\n              \
    \  result.add(0)\n            } else {\n                result.add(scoreDiff)\n\
    \            }\n        }\n        result.toList", "        val gameLength = game.length\n\
    \        val guessLength = guess.length\n        val result = new mutable.ArrayList[Long](guessLength)\n\
    \        val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }.toMap\n        val gameScore = gameScores.map { case\
    \ (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score", "        val gameSize = game.size\n\
    \        val guessSize = guess.size\n        val result = new Array[Long](guessSize)\n\
    \        var i = 0\n        while (i < guessSize) {\n            val gameScore\
    \ = game(i)\n            val guessScore = guess(i)\n            val diff = guessScore\
    \ - gameScore\n            if (diff < 0) {\n                val temp = gameScore\n\
    \                gameScore = guessScore\n                guessScore = temp\n \
    \               diff = -diff\n            }\n            result(i) = diff\n  \
    \          i += 1\n        }\n        result", "        val gameLen = game.length\n\
    \        val guessLen = guess.length\n        val result = new Array[Long](guessLen)\n\
    \        val gameScores = game.zipWithIndex.map(_._2)\n        val guessScores\
    \ = guess.zipWithIndex.map(_._2)\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        guessScoreMap.foreach\
    \ { case (score, index) =>\n            val guessIndex = guessScoreMap.get(score)\n\
    \            if (guessIndex == None) result(0) = score\n            else result(0)\
    \ = abs(guessIndex.get._1 - index)\n        }\n        result", "        val gameMap\
    \ = game.zipWithIndex.toMap\n        val guessMap = guess.zipWithIndex.toMap\n\
    \        val gameScores = gameMap.map(_._2).distinct\n        val guessScores\
    \ = guessMap.map(_._2).distinct\n        val gameScoreMap = gameScores.zip(guessScores).map(x\
    \ => (x._1, x._2)).toMap\n        val gameScoreArray = gameScoreMap.values\n \
    \       val guessScoreArray = guessScoreMap.values\n        val gameScoreArrayLength\
    \ = gameScoreArray.length\n        val guessScoreArrayLength = guessScoreArray.length\n\
    \        val gameScoreArrayCopy = gameScoreArray.clone()\n        val guessScoreArrayCopy\
    \ = guessScoreArray.clone()\n        var gameScoreArrayCopyLength = gameScoreArrayCopy.length\n\
    \        var guessScoreArrayCopyLength = guessScoreArrayCopy.length\n        var\
    \ gameScoreArrayCopyIndex = 0\n        var guessScoreArrayCopyIndex = 0\n    \
    \    var gameScoreArrayCopyIndexLength = 0\n        var guessScoreArrayCopyIndexLength\
    \ = 0\n        var gameScoreArrayCopyIndexLength2 = 0\n        var guessScoreArrayCopyIndexLength2\
    \ = 0\n        var gameScoreArrayCopyIndexLength3 = 0\n        var guessScoreArrayCopyIndexLength3\
    \ = 0\n        var gameScoreArrayCopyIndexLength4 = 0\n        var guessScoreArrayCopyIndexLength4\
    \ = 0\n        var gameScoreArrayCopyIndexLength5 = 0\n        var guessScoreArrayCopyIndexLength5\
    \ = 0\n        var gameScoreArrayCopyIndexLength6 = 0\n        var guessScoreArrayCopyIndexLength6\
    \ = 0\n        var gameScoreArrayCopyIndexLength7 = 0\n        var guessScoreArrayCopyIndexLength7\
    \ = 0\n        var gameScoreArrayCopyIndexLength8 = 0\n        var guessScoreArrayCopyIndexLength8\
    \ = 0\n        var gameScoreArrayCopyIndexLength9 = 0\n        var guessScoreArrayCopyIndexLength9\
    \ = 0\n        var gameScoreArrayCopyIndexLength10 = 0\n        var guessScoreArrayCopyIndexLength10\
    \ = 0\n        var gameScoreArrayCopyIndexLength11 = 0\n        var guessScoreArrayCopyIndexLength11\
    \ = 0\n        var gameScoreArrayCopyIndexLength12 = 0\n        var guessScoreArrayCopyIndexLength12\
    \ = 0\n        var gameScoreArrayCopyIndexLength13 = 0\n        var guessScoreArrayCopyIndexLength13\
    \ = 0\n        var gameScoreArrayCopyIndexLength14 = 0\n        var guessScoreArrayCopyIndexLength14\
    \ = 0\n        var gameScoreArrayCopyIndexLength15 = 0\n        var guessScoreArrayCopyIndexLength15\
    \ = 0\n        var gameScoreArrayCopyIndexLength16 = 0\n        var guessScoreArrayCopyIndexLength16\
    \ = 0\n        var gameScoreArrayCopyIndexLength17 = 0\n        var guess", " \
    \       val gameSet = game.distinct\n        val guessSet = guess.distinct\n \
    \       val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val result = new mutable.ArrayList[Long]()\n        val gameSetIterator\
    \ = gameSet.iterator\n        val guessSetIterator = guessSet.iterator\n     \
    \   var gameSetIndex = 0\n        var guessSetIndex = 0\n        var gameSetScore\
    \ = 0\n        var guessSetScore = 0\n        var gameSetGuess = 0\n        var\
    \ guessSetGuess = 0\n        var gameSetGuessDiff = 0\n        var guessSetGuessDiff\
    \ = 0\n        var gameSetGuessDiffDiff = 0\n        var guessSetGuessDiffDiff\
    \ = 0\n        var gameSetGuessDiffDiffDiff = 0\n        var guessSetGuessDiffDiffDiff\
    \ = 0\n        var gameSetGuessDiffDiffDiffDiff = 0\n        var guessSetGuessDiffDiffDiffDiff\
    \ = 0\n        var gameSetGuessDiffDiffDiffDiffDiff = 0\n        var guessSetGuessDiffDiffDiffDiffDiff\
    \ = 0\n        var gameSetGuessDiffDiffDiffDiffDiffDiff = 0\n        var guessSetGuessDiffDiffDiffDiffDiffDiff\
    \ = 0\n        var gameSetGuessDiffDiffDiffDiffDiffDiff = 0\n        var guessSetGuessDiffDiffDiffDiffDiffDiff\
    \ = 0\n        var gameSetGuessDiffDiffDiffDiffDiffDiffDiff = 0\n        var guessSetGuessDiffDiffDiffDiffDiffDiff\
    \ = 0\n        var gameSetGuessDiffDiffDiffDiffDiffDiffDiff = 0\n        var guessSetGuessDiffDiffDiffDiffDiffDiffDiff\
    \ = 0\n        var gameSetGuessDiffDiffDiffDiffDiffDiffDiffDiff = 0\n        var\
    \ guessSetGuessDiffDiffDiffDiffDiffDiffDiffDiff = 0\n        var gameSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiff\
    \ = 0\n        var guessSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiff = 0\n   \
    \     var gameSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = 0\n        var\
    \ guessSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiff = 0\n        var gameSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff\
    \ = 0\n        var guessSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = 0\n\
    \        var gameSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = 0\n  \
    \      var guessSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = 0\n       \
    \ var gameSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = 0\n        var\
    \ guessSetGuessDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = 0\n", "        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score }\n      \
    \  val guessScores = guess.zipWithIndex.map { case (score, index) => score }\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guess",
  "        val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new mutable.ArrayList[Long](guessSize)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score + index * gameSize }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score + index * guessSize\
    \ }\n        val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        gameScores.zipWithIndex.foreach { case\
    \ (score, index) =>\n            val guessScore = guessScores(index)\n       \
    \     val gameScore = gameScores(index)\n            val diff = abs(guessScore\
    \ - gameScore)\n            if (diff == 0) {\n                result.add(0)\n\
    \            } else {\n                result.add(diff)\n            }\n     \
    \   }\n        result.toList", "        val gameScores = game.zipWithIndex.map(x\
    \ => x._2 - x._1)\n        val guessScores = guess.zipWithIndex.map(x => x._2\
    \ - x._1)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.map(x => gameScoreMap(x))\n        val guessScoreSet = guessScoreList.map(x\
    \ => guessScoreMap(x))\n        val gameScoreSum = gameScoreSet.foldLeft(0)(_\
    \ + _)\n        val guessScoreSum = guessScoreSet.foldLeft(0)(_ + _)\n       \
    \ val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        val gameScoreDiffList = gameScoreDiff.toList\n\
    \        val guessScoreDiffList = guessScoreDiff.toList\n        val gameScoreDiffSet\
    \ = gameScoreDiffList.map(x => gameScoreDiffMap(x))\n        val guessScoreDiffSet\
    \ = guessScoreDiffList.map(x => guessScoreDiffMap(x))\n        val gameScoreDiffSum\
    \ = gameScoreDiffSet.foldLeft(0)(_ + _)\n        val guessScoreDiffSum = guessScoreDiffSet.foldLeft(0)(_\
    \ + _)\n        val gameScoreDiffDiff = gameScoreDiffSum - guessScoreDiffSum\n\
    \        val guessScoreDiffDiff = guessScoreDiffSum - gameScoreDiffSum\n     \
    \   val gameScoreDiffDiffList = gameScoreDiffDiff.toList\n        val guessScoreDiffDiffList\
    \ = guessScoreDiffDiff.toList\n        val gameScoreDiffDiffSet = gameScoreDiffDiffList.map(x\
    \ => gameScoreDiffDiffMap(x))\n        val guessScoreDiffDiffSet = guessScoreDiffDiffList.map(x\
    \ => guessScoreDiffDiffMap(x))\n        val gameScoreDiffDiffSum = gameScoreDiffDiffSet.foldLeft(0)(_\
    \ + _)\n        val guessScoreDiffDiffSum = guessScoreDiffDiffSet.foldLeft(0)(_\
    \ + _)\n        val gameScoreDiffDiffDiff = gameScoreDiffDiffSum - guessScoreDiffDiffSum\n\
    \        val guessScoreDiffDiffDiff = guessScoreDiffDiffSum - gameScoreDiffDiffSum\n\
    \        val gameScoreDiffDiffDiffList = gameScoreDiffDiffDiff.toList\n      \
    \  val guessScoreDiffDiffDiff", "        val gameScores = game.zipWithIndex.map(x\
    \ => x._2)\n        val guessScores = guess.zipWithIndex.map(x => x._2)\n    \
    \    val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        ", "        val gameMap = game.zipWithIndex.toMap\n        val guessMap\
    \ = guess.zipWithIndex.toMap\n        val resultList = mutable.ArrayBuffer.empty[Long]\n\
    \        val gameSize = game.size\n        val guessSize = guess.size\n      \
    \  val gameKeys = gameMap.keySet\n        val guessKeys = guessMap.keySet\n  \
    \      val gameValues = gameMap.values.toList\n        val guessValues = guessMap.values.toList\n\
    \        gameKeys.foreach(key => {\n            val gameValue = gameMap.get(key)\n\
    \            val guessValue = guessMap.get(key)\n            val diff = Math.abs(guessValue\
    \ - gameValue)\n            resultList += diff\n        })\n        resultList.toList",
  "        val gameLen = game.length\n        val guessLen = guess.length\n      \
    \  val result = new mutable.ArrayList[Long](guessLen)\n        var i = 0\n   \
    \     var j = 0\n        while (i < gameLen && j < guessLen) {\n            if\
    \ (game(i) == guess(j)) {\n                result.add(0)\n                i +=\
    \ 1\n                j += 1\n            } else if (game(i) < guess(j)) {\n  \
    \              result.add(game(i) - guess(j))\n                i += 1\n      \
    \      } else {\n                result.add(guess(j) - game(i))\n            \
    \    j += 1\n            }\n        }\n        result", "        val gameLen =\
    \ game.size\n        val guessLen = guess.size\n        val result = new Array[Long](guessLen)\n\
    \        val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessScores = guess.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n       \
    \ val guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues = gameScoreMap.values.toList\n\
    \        val guessScoreValues = guessScoreMap.values.toList\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n        val\
    \ guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues = gameScoreMap.values\n\
    \        val guessScoreValues = guessScoreMap.values\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => (index, score) }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => (index, score) }.toMap\n        val guessesWithScores\
    \ = guessScores.map { case (index, score) => (index, score) }.toMap\n        val\
    \ guessesWithIndexes = guessScores.map { case (index, score) => (index, index)\
    \ }.toMap\n        val guessesWithIndexesAndScores = guessScores.map { case (index,\
    \ score) => (index, score, gameScores(index)) }.toMap\n        val guessesWithIndexesAndScoresAndScores\
    \ = guessScores.map { case (index, score, gameScore) => (index, score, gameScore,\
    \ gameScores(index)) }.toMap\n        val guessesWithIndexesAndScoresAndScoresAndScores\
    \ = guessScores.map { case (index, score, gameScore, gameScore) => (index, score,\
    \ gameScore, gameScore, gameScores(index)) }.toMap\n        val guessesWithIndexesAndScoresAndScoresAndScoresAndScores\
    \ = guessScores.map { case (index, score, gameScore, gameScore, gameScore) =>\
    \ (index, score, gameScore, gameScore, gameScore, gameScores(index)) }.toMap\n\
    \        val guessesWithIndexesAndScoresAndScoresAndScoresAndScoresAndScores =\
    \ guessScores.map { case (index, score, gameScore, gameScore, gameScore, gameScore)\
    \ => (index, score, gameScore, gameScore, gameScore, gameScore, gameScores(index))\
    \ }.toMap\n        val guessesWithIndexesAndScoresAndScoresAndScoresAndScoresAndScoresAndScores\
    \ = guessScores.map { case (index, score, gameScore, gameScore, gameScore, gameScore,\
    \ gameScore) => (index, score, gameScore, gameScore, gameScore, gameScore, gameScore,\
    \ gameScores(index)) }.toMap\n        val guessesWithIndexesAndScoresAndScoresAndScoresAndScoresAndScoresAndScoresAndScores\
    \ = guessScores.map { case (index, score, gameScore, gameScore, gameScore, gameScore,\
    \ gameScore, gameScore) => (index, score, gameScore, gameScore, gameScore, gameScore,\
    \ gameScore, gameScore, gameScores(index)) }", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScoreMap.values.toList\n        val guessesScoreList = guessesScoreMap.values.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet =\
    \ guessesScoreList.toSet\n        val gameScoreDiff = gameScoreList.map { case\
    \ (score, index) => Math.abs(score - gameScoreMap.get(index)) }\n        val guessesScoreDiff\
    \ = guessesScoreList.map { case (score, index) => Math.abs(score - guessesScoreMap.get(index))\
    \ }\n        val gameScoreDiffSet = gameScoreDiff.toSet\n        val guessesScoreDiffSet\
    \ = guessesScoreDiff.toSet\n        val gameScoreDiffSet = gameScoreDiffSet.toList\n\
    \        val guessesScoreDiffSet = guessesScoreDiffSet.toList\n        val gameScoreDiffSet\
    \ = gameScoreDiffSet.toList\n        val guessesScoreDiffSet = guessesScoreDiffSet.toList\n\
    \        val gameScoreDiffSet = gameScoreDiffSet.toList\n        val guessesScoreDiffSet\
    \ = guessesScoreDiffSet.toList\n        val gameScoreDiffSet = gameScoreDiffSet.toList\n\
    \        val guessesScoreDiffSet = guessesScoreDiffSet.toList\n        val gameScoreDiffSet\
    \ = gameScoreDiffSet.toList\n        val guessesScoreDiffSet = guessesScoreDiffSet.toList\n\
    \        val gameScoreDiffSet = gameScoreDiffSet.toList\n        val guessesScoreDiffSet\
    \ = guessesScoreDiffSet.toList\n        val gameScoreDiffSet = gameScoreDiffSet.toList\n\
    \        val guessesScoreDiffSet = guessesScoreDiffSet.toList\n        val gameScoreDiffSet\
    \ = gameScoreDiffSet.toList\n        val guessesScoreDiffSet = guessesScoreDiffSet.toList\n\
    \        val gameScoreDiffSet = gameScoreDiffSet.toList\n        val guessesScoreDiffSet\
    \ = guessesScoreDiffSet.toList\n        val gameScoreDiffSet = gameScoreDiffSet.toList\n\
    \        val guessesScoreDiffSet = guessesScoreDiffSet.toList\n        val game",
  "        val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ result = new mutable.ListBuffer[Long]()\n        val guessesCount = guesses.size\n\
    \        val scoresCount = scores.size\n        val guessesRemaining = guessesCount\
    \ - 1\n        val scoresRemaining = scoresCount - 1\n        val guessesRemainingIndex\
    \ = guessesRemaining\n        val scoresRemainingIndex = scoresRemaining\n   \
    \     val guessesRemainingScore = guesses(guessesRemainingIndex)\n        val\
    \ scoresRemainingScore = scores(scoresRemainingIndex)\n        val guessesRemainingGuess\
    \ = guesses(guessesRemainingIndex + 1)\n        val scoresRemainingGuess = scores(scoresRemainingIndex\
    \ + 1)\n        val guessesRemainingGuessIndex = guessesRemainingIndex + 1\n \
    \       val scoresRemainingGuessIndex = scoresRemainingIndex + 1\n        val\
    \ guessesRemainingGuessScore = guesses(guessesRemainingGuessIndex)\n        val\
    \ scoresRemainingGuessScore = scores(scoresRemainingGuessIndex)\n        val guessesRemainingGuessGuess\
    \ = guesses(guessesRemainingGuessIndex + 1)\n        val scoresRemainingGuessGuess\
    \ = scores(scoresRemainingGuessIndex + 1)\n        val guessesRemainingGuessGuessIndex\
    \ = guessesRemainingGuessIndex + 1\n        val scoresRemainingGuessGuessIndex\
    \ = scoresRemainingGuessIndex + 1\n        val guessesRemainingGuessGuessScore\
    \ = guesses(guessesRemainingGuessGuessIndex)\n        val scoresRemainingGuessGuessScore\
    \ = scores(scoresRemainingGuessGuessIndex)\n        val guessesRemainingGuessGuessGuess\
    \ = guesses(guessesRemainingGuessGuessIndex + 1)\n        val scoresRemainingGuessGuessGuess\
    \ = scores(scoresRemainingGuessGuessGuessIndex)\n        val guessesRemainingGuessGuessGuessIndex\
    \ = guessesRemainingGuessGuessIndex + 1\n        val scoresRemainingGuessGuessGuessIndex\
    \ = scoresRemainingGuessGuessIndex + 1\n        val guessesRemainingGuessGuessGuessScore\
    \ = guesses(guessesRemainingGuessGuessGuessIndex)\n        val scoresRemainingGuessGuessGuessScore\
    \ = scores(scoresRemainingGuessGuessGuessIndex)\n        val guessesRemainingGuess",
  "        val gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessesScores\
    \ = guess.map(x => if (x == 0) 0 else x)\n        val diffs = guessesScores.zip(gameScores).map(x\
    \ => if (x._1 == 0) 0 else x._1 - x._2)\n        diffs.toList", "        val gameSet\
    \ = game.distinct\n        val guessSet = guess.distinct\n        val gameSetSize\
    \ = gameSet.size\n        val guessSetSize = guessSet.size\n        val result\
    \ = new mutable.ArrayList[Long](guessSetSize)\n        val gameSetIterator = gameSet.iterator\n\
    \        val guessSetIterator = guessSet.iterator\n        var gameSetIndex =\
    \ 0\n        var guessSetIndex = 0\n        while (gameSetIndex < gameSetSize\
    \ && guessSetIndex < guessSetSize) {\n            val gameSetScore = gameSetIterator.next\n\
    \            val guessSetScore = guessSetIterator.next\n            val gameSetGuess\
    \ = gameSetIndex\n            val guessSetGuess = guessSetIndex\n            val\
    \ gameSetScoreDiff = gameSetScore - guessSetScore\n            val guessSetScoreDiff\
    \ = guessSetScore - gameSetScore\n            if (gameSetScoreDiff == guessSetScoreDiff)\
    \ {\n                result.add(gameSetGuess)\n                result.add(guessSetGuess)\n\
    \                gameSetIndex += 1\n                guessSetIndex += 1\n     \
    \       } else if (gameSetScoreDiff < guessSetScoreDiff) {\n                result.add(gameSetGuess)\n\
    \                result.add(guessSetGuess)\n                gameSetIndex += 1\n\
    \            } else {\n                result.add(guessSetGuess)\n           \
    \     result.add(gameSetGuess)\n                guessSetIndex += 1\n         \
    \   }\n        }\n        result.toList", "        val gameLength = game.length\n\
    \        val guessLength = guess.length\n        val result = new Array[Long](guessLength)\n\
    \        val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val gameScoreKeys = gameScores.keySet\n\
    \        val guessScoreKeys = guessScores.keySet\n        val gameScoreValues\
    \ = gameScores.values\n        val guessScoreValues = guessScores.values\n   \
    \     gameScoreKeys.foreach { key =>\n            val guessScore = guessScores.get(key)\n\
    \            val gameScore = gameScores.get(key)\n            val diff = guessScore\
    \ - gameScore\n            result(guessScoreKeys) = diff\n        }\n        result",
  "        val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ guessesCount = guesses.size\n        val scoresCount = scores.size\n       \
    \ val result = new mutable.ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < guessesCount) {\n            val guess = guesses(i)\n            val score\
    \ = scores(i)\n            val diff = Math.abs(guess - score)\n            if\
    \ (diff == 0) {\n                result.clear()\n                result.add(i)\n\
    \                result.add(diff)\n            } else {\n                result.add(diff)\n\
    \            }\n            i += 1\n        }\n        result.toList", "     \
    \   val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ guessesCount = guesses.size\n        val scoresCount = scores.size\n       \
    \ val result = new mutable.ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < guessesCount) {\n            val guess = guesses(i)\n            val score\
    \ = scores(i)\n            val difference = guess - score\n            if (difference\
    \ < 0) {\n                result.add(-difference)\n            } else {\n    \
    \            result.add(difference)\n            }\n            i += 1\n     \
    \   }\n        result.toList", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreArray =\
    \ gameScores.toArray\n        val guessScoreArray = guessScores.toArray\n    \
    \    val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreArray = gameScores.toArray\n        val guessScoreArray\
    \ = guessScores.toArray\n        val gameScoreMap = gameScores.toMap\n       \
    \ val guessScoreMap = guessScores.toMap\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreArray =\
    \ gameScores.toArray\n        val guessScoreArray = guessScores.toArray\n    \
    \    val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreArray = gameScores.toArray\n        val guessScoreArray\
    \ = guessScores.toArray\n        val gameScoreMap = gameScores.toMap\n       \
    \ val guessScoreMap = guessScores.toMap\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreArray =\
    \ gameScores.toArray\n        val guessScoreArray = guessScores.toArray\n    \
    \    val gameScoreMap = gameScores.toMap\n", "        val gameSet = game.toSet\n\
    \        val guessSet = guess.toSet\n        val resultSet = guessSet.diff(gameSet)\n\
    \        resultSet.map(x => if (x == 0) 0 else abs(x - game(x)))", "        val\
    \ gameSize = game.size\n        val guessSize = guess.size\n        val result\
    \ = new Array[Long](guessSize)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        var i = 0\n        while (i < guessSize)\
    \ {\n            val gameScore = gameScores(i)\n            val guessScore = guessScores(i)\n\
    \            val diff = guessScore - gameScore\n            if (diff < 0) {\n\
    \                diff *= -1\n            }\n            result(i) = diff\n   \
    \         i += 1\n        }\n        result", "        val gameSet = game.distinct\n\
    \        val guessSet = guess.distinct\n        val gameSetSize = gameSet.size\
    \ \n        val guessSetSize = guessSet.size \n        val gameSetSize = gameSetSize\
    \ + 1\n        val guessSetSize = guessSetSize + 1\n        val gameSetSize =\
    \ gameSetSize + 1\n        val guessSetSize = guessSetSize + 1\n        val gameSetSize\
    \ = gameSetSize + 1\n        val guessSetSize = guessSetSize + 1\n        val\
    \ gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize + 1\n\
    \        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSet",
  "        val gameSize = game.size\n        val guessSize = guess.size\n        val\
    \ result = new Array[Long](guessSize)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScore = gameScores.map\
    \ { case (score, index) => score }.toSeq\n        val guessScore = guessScores.map\
    \ { case (score, index) => score }.toSeq\n        val gameScoreDiff = gameScore\
    \ diff guessScore\n        val gameScoreDiffIndex = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val gameScoreDiffIndexSorted\
    \ = gameScoreDiffIndex.sortBy(_._1)\n        val gameScoreDiffIndexSortedReversed\
    \ = gameScoreDiffIndexSorted.reverse\n        val gameScoreDiffIndexSortedReversedSorted\
    \ = gameScoreDiffIndexSortedReversed.sortBy(_._1)\n        val gameScoreDiffIndexSortedReversedSortedReversed\
    \ = gameScoreDiffIndexSortedReversedSorted.reverse\n        val gameScoreDiffIndexSortedReversedSortedReversedSorted\
    \ = gameScoreDiffIndexSortedReversedSortedReversed.sortBy(_._1)\n        val gameScoreDiffIndexSortedReversedSortedReversedSortedReversed\
    \ = gameScoreDiffIndexSortedReversedSortedReversedSortedReversed.reverse\n   \
    \     val gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSorted =\
    \ gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSorted.sortBy(_._1)\n\
    \        val gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \        val gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSortedReversedSorted.sortBy(_._1)\n\
    \        val gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSorted.reverse\n\
    \        val gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = gameScoreDiffIndexSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed.sortBy(_._1)\n\
    \        val ", "        val gameLen = game.size\n        val guessLen = guess.size\n\
    \        val result = new Array[Long](guessLen)\n        var i = 0\n        var\
    \ j = 0\n        while (i < gameLen && j < guessLen) {\n            if (game(i)\
    \ == guess(j)) {\n                result(j) = 0\n                i += 1\n    \
    \            j += 1\n            } else if (game(i) < guess(j)) {\n          \
    \      result(j) = 0\n                i += 1\n            } else {\n         \
    \       result(j) = abs(game(i) - guess(j))\n                i += 1\n        \
    \        j += 1\n            }\n        }\n        result", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreList = new mutable.ListBuffer[Long]()\n        val guessesScoreList\
    \ = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach { case (score,\
    \ index) => gameScoreList.add(score) }\n        guessesScoreMap.foreach { case\
    \ (score, index) => guessesScoreList.add(score) }\n        val gameScores = gameScoreList.toList\n\
    \        val guessesScores = guessesScoreList.toList\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreList = new mutable.ListBuffer[Long]()\n        val guessesScoreList\
    \ = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach { case (score,\
    \ index) => gameScoreList.add(score) }\n        guessesScoreMap.foreach { case\
    \ (score, index) => guessesScoreList.add(score) }\n        val gameScores = gameScoreList.toList\n\
    \        val guessesScores = guessesScoreList.toList\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreList = new mutable.ListBuffer[Long]()\n        val guessesScoreList\
    \ = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach { case (score,\
    \ index) => gameScoreList.add(score) }\n        guessesScoreMap.foreach { case\
    \ (score, index) => guessesScoreList.add(score) }\n        val gameScores = gameScoreList.toList\n\
    \        val guessesScores = guessesScoreList.toList\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreList = new mutable.ListBuffer[Long]()\n        val guessesScoreList\
    \ = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach { case (score,\
    \ index) => gameScoreList.add(score) }\n        guessesScoreMap.foreach { case\
    \ (score, index) => guessesScoreList.add(score) }\n        val gameScores = gameScoreList.toList",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessesDiff = guessesScores.zip(gameScores).map { case (guess,\
    \ game) => guess - game }\n        guessesDiff.zipWithIndex.map { case (guess,\
    \ index) => guess }", "        val gameSize = game.size\n        val guessSize\
    \ = guess.size\n        val result = new mutable.ArrayList[Long]()\n        var\
    \ i = 0\n        var j = 0\n        var gameScore = 0\n        var guessScore\
    \ = 0\n        while (i < gameSize && j < guessSize) {\n            if (game(i)\
    \ == guess(j)) {\n                gameScore += 1\n                guessScore +=\
    \ 1\n                i += 1\n                j += 1\n            } else if (game(i)\
    \ < guess(j)) {\n                gameScore += 1\n                i += 1\n    \
    \        } else {\n                guessScore += 1\n                j += 1\n \
    \           }\n        }\n        if (i == gameSize) {\n            result.add(0)\n\
    \        } else if (j == guessSize) {\n            result.add(0)\n        } else\
    \ {\n            result.add(Math.abs(gameScore - guessScore))\n        }\n   \
    \     result", "        val gameSize = game.size\n        val guessSize = guess.size\n\
    \        val result = new mutable.ArrayList[Long](guessSize)\n        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n  \
    \      val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val gameScore = gameScores.map { case (score, index)\
    \ => score }\n        val guessScore = guessScores.map { case (score, index) =>\
    \ score }\n        val gameScoreDiff = gameScore diff guessScore\n        val\
    \ gameScoreDiffMap = gameScoreDiff.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScoreDiffMap\
    \ = gameScoreDiff.zipWithIndex.map { case (score, index) => score -> index }.toMap\n\
    \        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScoreDiffMap\
    \ = gameScoreDiff.zipWithIndex.map { case (score, index) => score -> index }.toMap\n\
    \        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScoreDiffMap\
    \ = gameScoreDiff.zipWithIndex.map { case (score, index) => score -> index }.toMap\n\
    \        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScoreDiffMap\
    \ = gameScoreDiff.zipWithIndex.map { case (score, index) => score -> index }.toMap\n\
    \        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score ", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesCorrect = guessesScores.zip(gameScores).map\
    \ { case (guess, gameScore) =>\n            if (guess == gameScore) 0 else Math.abs(guess\
    \ - gameScore)\n        }\n        guessesCorrect.toList", "        val gameSize\
    \ = game.size\n        val guessSize = guess.size\n        val result = new Array[Long](guessSize)\n\
    \        val gameScores = game.zipWithIndex.map(_._2)\n        val guessScores\
    \ = guess.zipWithIndex.map(_._2)\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = new\
    \ ArrayList[Long]()\n        val guessScoreList = new ArrayList[Long]()\n    \
    \    val gameScoreSet = new HashSet[Long]()\n        val guessScoreSet = new HashSet[Long]()\n\
    \        val gameScoreListIterator = gameScoreList.iterator\n        val guessScoreListIterator\
    \ = guessScoreList.iterator\n        val gameScoreSetIterator = gameScoreSet.iterator\n\
    \        val guessScoreSetIterator = guessScoreSet.iterator\n        val gameScoreMapIterator\
    \ = gameScoreMap.iterator\n        val guessScoreMapIterator = guessScoreMap.iterator\n\
    \        val gameScoreSetIterator = gameScoreSet.iterator\n        val guessScoreSetIterator\
    \ = guessScoreSet.iterator\n        val gameScoreMapIterator = gameScoreMap.iterator\n\
    \        val guessScoreMapIterator = guessScoreMap.iterator\n        val gameScoreSetIterator\
    \ = gameScoreSet.iterator\n        val guessScoreSetIterator = guessScoreSet.iterator\n\
    \        val gameScoreMapIterator = gameScoreMap.iterator\n        val guessScoreMapIterator\
    \ = guessScoreMap.iterator\n        val gameScoreSetIterator = gameScoreSet.iterator\n\
    \        val guessScoreSetIterator = guessScoreSet.iterator\n        val gameScoreMapIterator\
    \ = gameScoreMap.iterator\n        val guessScoreMapIterator = guessScoreMap.iterator\n\
    \        val gameScoreSetIterator = gameScoreSet.iterator\n        val guessScoreSetIterator\
    \ = guessScoreSet.iterator\n        val gameScoreMapIterator = gameScoreMap.iterator\n\
    \        val guessScoreMapIterator = guessScoreMap.iterator\n        val gameScoreSetIterator\
    \ = gameScoreSet.iterator\n        val guessScoreSetIterator = guessScoreSet.iterator\n\
    \        val gameScoreMapIterator = gameScoreMap.iterator\n        val guessScoreMapIterator\
    \ = guessScoreMap.iterator\n        val gameScoreSetIterator = gameScoreSet.iterator\n\
    \        val guessScoreSetIterator = guessScoreSet.iterator\n        val gameScoreMapIterator\
    \ = gameScoreMap.iterator\n        val guessScoreMapIterator = guessScoreMap.iterator\n\
    \        val gameScoreSetIterator = gameScoreSet.iterator\n        val guessScoreSetIterator\
    \ = guessScoreSet.", "        val guesses = guess.toList\n        val scores =\
    \ game.toList\n        val guessesCount = guesses.size\n        val scoresCount\
    \ = scores.size\n        val result = new mutable.ArrayList[Long](guessesCount)\n\
    \        val guessesRemaining = guessesCount - 1\n        val scoresRemaining\
    \ = scoresCount - 1\n        val guessesRemainingIndex = guessesRemaining - 1\n\
    \        val scoresRemainingIndex = scoresRemaining - 1\n        val guessesRemainingScore\
    \ = scores.get(guessesRemainingIndex)\n        val scoresRemainingScore = scores.get(scoresRemainingIndex)\n\
    \        val guessesRemainingGuess = guesses.get(guessesRemainingIndex)\n    \
    \    val scoresRemainingGuess = guesses.get(scoresRemainingIndex)\n        var\
    \ i = 0\n        while (i < guessesCount) {\n            val guessesRemainingScoreDiff\
    \ = abs(guessesRemainingScore - scoresRemainingScore)\n            val scoresRemainingGuessDiff\
    \ = abs(scoresRemainingGuess - guessesRemainingGuess)\n            if (scoresRemainingGuessDiff\
    \ < scoresRemainingScore) {\n                result(i) = guessesRemainingScoreDiff\n\
    \            } else {\n                result(i) = scoresRemainingGuessDiff\n\
    \            }\n            i += 1\n        }\n        result.toList", "     \
    \   val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ guessesCount = guesses.size\n        val scoresCount = scores.size\n       \
    \ val guessesCorrect = guesses.zip(scores).filter(_._2 == 0).map(_._1).sum\n \
    \       val scoresCorrect = scores.zip(guesses).filter(_._2 == 0).map(_._1).sum\n\
    \        val guessesDiff = guessesCount - guessesCorrect\n        val scoresDiff\
    \ = scoresCount - scoresCorrect\n        guessesDiff.zip(scoresDiff).map { case\
    \ (guess, diff) => guess + diff }", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScores = gameScoreMap.values.toList\n\
    \        val guessScores = guessScoreMap.values.toList\n        val gameScoreMap\
    \ = gameScores.zipWithIndex.map { case (score, index) => index -> score }\n  \
    \      val guessScoreMap = guessScores.zipWithIndex.map { case (score, index)\
    \ => index -> score }\n        val gameScoreMap = gameScoreMap.map { case (index,\
    \ score) => index -> score }\n        val guessScoreMap = guessScoreMap.map {\
    \ case (index, score) => index -> score }\n        val gameScores = gameScoreMap.map\
    \ { case (index, score) => score }\n        val guessScores = guessScoreMap.map\
    \ { case (index, score) => score }\n        val gameScores = gameScores.toList\n\
    \        val guessScores = guessScores.toList\n        val gameScoreMap = gameScores.zipWithIndex.map\
    \ { case (score, index) => index -> score }\n        val guessScoreMap = guessScores.zipWithIndex.map\
    \ { case (score, index) => index -> score }\n        val gameScoreMap = gameScoreMap.map\
    \ { case (index, score) => index -> score }\n        val guessScoreMap = guessScoreMap.map\
    \ { case (index, score) => index -> score }\n        val gameScores = gameScoreMap.map\
    \ { case (index, score) => score }\n        val guessScores = guessScoreMap.map\
    \ { case (index, score) => score }\n        val gameScores = gameScores.toList\n\
    \        val guessScores = guessScores.toList\n        val gameScoreMap = gameScores.zipWithIndex.map\
    \ { case (score, index) => index -> score }\n        val guessScoreMap = guessScores.zipWithIndex.map\
    \ { case (score, index) => index -> score }\n        val gameScoreMap = gameScoreMap.map\
    \ { case (index, score) => index -> score }\n        val guessScoreMap = guessScoreMap.map\
    \ { case (index, score) => index -> score }\n        val gameScores = gameScoreMap.map\
    \ { case (index, score) => score }\n        val guessScores = guessScoreMap.map\
    \ { case (index, score) => score }\n        val gameScores = gameScore", "   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScores.toList\n     \
    \   val guessesScoreList = guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessesScoreSet = guessesScores.toSet\n        val gameScoreMap =\
    \ gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n      \
    \  val gameScoreList = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val ", "        val gameLen = game.length\n        val guessLen = guess.length\n\
    \        val result = new Array[Long](guessLen)\n        var i = 0\n        while\
    \ (i < guessLen) {\n            val gameScore = game(i)\n            val guessScore\
    \ = guess(i)\n            val diff = guessScore - gameScore\n            if (diff\
    \ < 0) {\n                diff = -diff\n            }\n            result(i) =\
    \ diff\n            i += 1\n        }\n        result", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessesScoreCount = guessesScores.count\n  \
    \      val gameScoreDiff = gameScoreCount - guessesScoreCount\n        val guessesScoreDiff\
    \ = guessesScoreCount - gameScoreCount\n        val guessesScoreDiffs = guessesScores.zipWithIndex.map\
    \ { case (score, index) => (index, abs(score - guessesScores(index)))}\n     \
    \   val guessesScoreDiffsSorted = guessesScoreDiffs.sortBy(_._2)\n        val\
    \ guessesScoreDiffsSortedSortedByIndex = guessesScoreDiffsSorted.sortBy(_._1)\n\
    \        val guessesScoreDiffsSortedSortedByIndexReversed = guessesScoreDiffsSortedSortedByIndex.reverse\n\
    \        val guessesScoreDiffsSortedSortedByIndexReversedSortedByIndex = guessesScoreDiffsSortedSortedByIndexReversed.sortBy(_._1)\n\
    \        val guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversed\
    \ = guessesScoreDiffsSortedSortedByIndexReversedSortedByIndex.reverse\n      \
    \  val guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndex\
    \ = guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndex.reverse\n\
    \        val guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed\
    \ = guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndex.reverse\n\
    \        val guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndex\
    \ = guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndex.reverse\n\
    \        val guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed\
    \ = guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndex.reverse\n\
    \        val guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndex\
    \ = guessesScoreDiffsSortedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedBy",
  "        val gameLen = game.length\n        val guessLen = guess.length\n      \
    \  val result = new mutable.ArrayList[Long](guessLen)\n        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n        val\
    \ guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues = gameScoreMap.values\n\
    \        val guessScoreValues = guessScoreMap.values\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet",
  "        val gameSet = game.distinct\n        val guessSet = guess.distinct\n  \
    \      val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSet",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScores.toList\n        val\
    \ guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val guesses = guess.map(x => x ->\
    \ game(x))\n        val scores = game.map(x => x -> x)\n        val guessesWithScores\
    \ = guesses.toSeq.sortBy(_._2)\n        val scoresWithGuesses = scores.toSeq.sortBy(_._2)\n\
    \        val guessesWithScoresWithGuesses = guessesWithScores.toSeq.sortBy(_._1)\n\
    \        val scoresWithGuessesWithGuesses = scoresWithGuesses.toSeq.sortBy(_._1)\n\
    \        val guessesWithScoresWithGuessesWithGuesses = guessesWithScoresWithGuesses.toSeq.sortBy(_._1)\n\
    \        val scoresWithGuessesWithGuessesWithGuesses = scoresWithGuessesWithGuesses.toSeq.sortBy(_._1)\n\
    \        val guessesWithScoresWithGuessesWithGuessesWithGuesses = guessesWithScoresWithGuessesWithGuesses.toSeq.sortBy(_._1)\n\
    \        val scoresWithGuessesWithGuessesWithGuessesWithGuesses = scoresWithGuessesWithGuessesWithGuesses.toSeq.sortBy(_._1)\n\
    \        val guessesWithScoresWithGuessesWithGuessesWithGuessesWithGuesses = guessesWithScoresWithGuessesWithGuessesWithGuesses.toSeq.sortBy(_._1)\n\
    \        val scoresWithGuessesWithGuessesWithGuessesWithGuessesWithGuesses = scoresWithGuessesWithGuessesWithGuessesWithGuesses.toSeq.sortBy(_._1)\n\
    \        val guessesWithScoresWithGuessesWithGuessesWithGuessesWithGuessesWithGuesses\
    \ = guessesWithScoresWithGuessesWithGuessesWithGuessesWithGuesses.toSeq.sortBy(_._1)\n\
    \        val scoresWithGuessesWithGuessesWithGuessesWithGuessesWithGuessesWithGuesses\
    \ = scoresWithGuessesWithGuessesWithGuessesWithGuessesWithGuesses.toSeq.sortBy(_._1)\n\
    \        val guessesWithScoresWithGuessesWithGuessesWithGuessesWith", "      \
    \  val gameLen = game.length\n        val guessLen = guess.length\n        val\
    \ result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreSet = gameScoreMap.values.toSet\n\
    \        val guessScoreSet = guessScoreMap.values.toSet\n        val gameScoreList\
    \ = gameScoreMap.values.toList\n        val guessScoreList = guessScoreMap.values.toList\n\
    \        val gameScoreSetSet = gameScoreSet.intersect(guessScoreSet)\n       \
    \ val gameScoreListSet = gameScoreList.intersect(guessScoreList)\n        val\
    \ gameScoreSetListSet = gameScoreSetSet.intersect(guessScoreListSet)\n       \
    \ val gameScoreSetSetListSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScoreSetListSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.intersect(guessScore",
  "        val gameLength = game.length\n        val guessLength = guess.length\n\
    \        val result = new mutable.ArrayList[Long](guessLength)\n        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n        val\
    \ guessScoreKeys = guessScoreMap.keys\n        val gameScoreKeysSet = gameScoreKeys.toSet\n\
    \        val guessScoreKeysSet = guessScoreKeys.toSet\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessScoreKeysSetSize = guessScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeys",
  "        val gameLen = game.length\n        val guessLen = guess.length\n      \
    \  val result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        guessScoreMap.foreach\
    \ { case (guess, score) =>\n            val gameScore = gameScoreMap.get(guess)\n\
    \            if (gameScore == null) {\n                result(index) = guess\n\
    \            } else {\n                result(index) = abs(guess - gameScore)\n\
    \            }\n        }\n        result", "        val gameSize = game.size\n\
    \        val guessSize = guess.size\n        val result = new Array[Long](guessSize)\n\
    \        val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val gameScore = gameScores.map { case\
    \ (score, index) => score }.toList\n        val guessScore = guessScores.map {\
    \ case (score, index) => score }.toList\n        val gameScoreDiff = gameScore\
    \ diff guessScore\n        val gameScoreDiffMap = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScoreDiffMapSorted\
    \ = gameScoreDiffMap.sortBy(_._1).reverse\n        val gameScoreDiffMapSortedReversed\
    \ = gameScoreDiffMapSorted.reverse\n        val gameScoreDiffMapSortedReversedIter\
    \ = gameScoreDiffMapSortedReversed.iterator\n        val gameScoreDiffMapSortedReversedIterNext\
    \ = gameScoreDiffMapSortedReversedIter.next\n        val gameScoreDiffMapSortedReversedIterNextValue\
    \ = gameScoreDiffMapSortedReversedIterNext._2._1\n        val gameScoreDiffMapSortedReversedIterNextKey\
    \ = gameScoreDiffMapSortedReversedIterNext._2._2\n        val gameScoreDiffMapSortedReversedIterNextKeyValue\
    \ = gameScoreDiffMapSortedReversedIterNext._2._3\n        val gameScoreDiffMapSortedReversedIterNextKeyValue\
    \ = gameScoreDiffMapSortedReversedIterNext._2._4\n        val gameScoreDiffMapSortedReversedIterNextKeyValue\
    \ = gameScoreDiffMapSortedReversedIterNext._2._5\n        val gameScoreDiffMapSortedReversedIterNextKeyValue\
    \ = gameScoreDiffMapSortedReversedIterNext._2._6\n        val gameScoreDiffMapSortedReversedIterNextKeyValue\
    \ = gameScoreDiffMapSortedReversedIterNext._2._7\n        val gameScoreDiffMapSortedReversedIterNextKeyValue\
    \ = gameScoreDiffMapSortedReversedIterNext._2._8\n        val gameScoreDiffMapSortedReversedIterNextKeyValue\
    \ = gameScoreDiffMapSortedReversedIterNext._2._9\n        val gameScoreDiffMapSortedReversedIterNextKeyValue\
    \ = gameScoreDiffMapSortedReversedIterNext._2._10\n        val gameScore", " \
    \       val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ results = new mutable.ArrayBuffer[Long]()\n        for(score <- scores) {\n\
    \            val guess = guesses.find(_ == score)\n            if(guess == None)\
    \ results += score\n            else results += guess - score\n        }\n   \
    \     results", "        val gameScores = game.zipWithIndex.map(x => x._1 + x._2)\n\
    \        val guessesScores = guess.zipWithIndex.map(x => x._1 + x._2)\n      \
    \  val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScoreMap.values.toList\n        val guessesScoreList\
    \ = guessesScoreMap.values.toList\n        val gameScoreSet = gameScoreList.toSet\n\
    \        val guessesScoreSet = guessesScoreList.toSet\n        val gameScoreList\
    \ = gameScoreSet.map(x => gameScoreMap.get(x))\n        val guessesScoreList =\
    \ guessesScoreSet.map(x => guessesScoreMap.get(x))\n        val gameScoreList\
    \ = gameScoreList.map(x => Math.abs(x))\n        val guessesScoreList = guessesScoreList.map(x\
    \ => Math.abs(x))\n        val gameScoreList = gameScoreList.map(x => if (x ==\
    \ 0) 0 else x)\n        val guessesScoreList = guessesScoreList.map(x => if (x\
    \ == 0) 0 else x)\n        val gameScoreList = gameScoreList.map(x => if (x ==\
    \ 0) 0 else x)\n        val guessesScoreList = guessesScoreList.map(x => if (x\
    \ == 0) 0 else x)\n        val gameScoreList = gameScoreList.map(x => if (x ==\
    \ 0) 0 else x)\n        val guessesScoreList = guessesScoreList.map(x => if (x\
    \ == 0) 0 else x)\n        val gameScoreList = gameScoreList.map(x => if (x ==\
    \ 0) 0 else x)\n        val guessesScoreList = guessesScoreList.map(x => if (x\
    \ == 0) 0 else x)\n        val gameScoreList = gameScoreList.map(x => if (x ==\
    \ 0) 0 else x)\n        val guessesScoreList = guessesScoreList.map(x => if (x\
    \ == 0) 0 else x)\n        val gameScoreList = gameScoreList.map(x => if (x ==\
    \ 0) 0 else x)\n        val guessesScoreList = guessesScoreList.map(x => if (x\
    \ == 0) 0 else x)\n        val gameScoreList = gameScoreList.map(x => if (x ==\
    \ 0) 0 else x)\n        val guessesScoreList = guessesScoreList.map(x => if (x\
    \ == 0) 0 else x)\n        val gameScoreList = gameScoreList.map(x => if (x ==\
    \ 0) 0 else x)\n        val guessesScoreList = guessesScoreList.map(x => if (x\
    \ == 0) 0 else x)\n        val gameScoreList = gameScoreList.map(x => if (x ==\
    \ 0) 0 else x)\n        val guessesScoreList = guessesScoreList.map(x => if (x\
    \ == 0) 0 else x)\n        ", "        val gameScores = game.zipWithIndex.map{\
    \ case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map{\
    \ case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.distinct\n        val guessScoreSet = guessScoreList.distinct\n\
    \        val gameScoreMap = gameScoreSet.zip(gameScoreList).map{ case (score,\
    \ index) => index -> score }.toMap\n        val guessScoreMap = guessScoreSet.zip(guessScoreList).map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.distinct\n        val guessScoreSet = guessScoreList.distinct\n\
    \        val gameScoreMap = gameScoreSet.zip(gameScoreList).map{ case (score,\
    \ index) => index -> score }.toMap\n        val guessScoreMap = guessScoreSet.zip(guessScoreList).map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.distinct\n        val guessScoreSet = guessScoreList.distinct\n\
    \        val gameScoreMap = gameScoreSet.zip(gameScoreList).map{ case (score,\
    \ index) => index -> score }.toMap\n        val guessScoreMap = guessScoreSet.zip(guessScoreList).map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.distinct\n        val guessScoreSet = guessScoreList.distinct\n\
    \        val gameScoreMap = gameScoreSet.zip(gameScoreList).map{ case (score,\
    \ index) => index -> score }.toMap\n        val guessScoreMap = guessScoreSet.zip(guessScoreList).map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.distinct\n        val guessScore", "        val gameScores =\
    \ game.map(x => if (x == 0) 0 else x)\n        val guessScores = guess.map(x =>\
    \ if (x == 0) 0 else x)\n        val gameScoreCount = gameScores.count\n     \
    \   val guessScoreCount = guessScores.count\n        val gameScoreSum = gameScores.sum\n\
    \        val guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum\
    \ - guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n\
    \        val gameScoreDiffs = gameScores.zip(guessScores).map(x => (x._1 - x._2))\n\
    \        val guessScoreDiffs = guessScores.zip(gameScores).map(x => (x._1 - x._2))\n\
    \        val gameScoreDiffsCount = gameScoreDiffs.count\n        val guessScoreDiffsCount\
    \ = guessScoreDiffs.count\n        val gameScoreDiffsSum = gameScoreDiffs.sum\n\
    \        val guessScoreDiffsSum = guessScoreDiffs.sum\n        val gameScoreDiffsDiff\
    \ = gameScoreDiffsSum - guessScoreDiffsSum\n        val guessScoreDiffsDiff =\
    \ guessScoreDiffsSum - gameScoreDiffsSum\n        val gameScoreDiffsDiffs = gameScoreDiffs.zip(guessScoreDiffs).map(x\
    \ => (x._1 - x._2))\n        val guessScoreDiffsDiffs = guessScoreDiffs.zip(gameScoreDiffs).map(x\
    \ => (x._1 - x._2))\n        val gameScoreDiffsDiffsCount = gameScoreDiffsDiffs.count\n\
    \        val guessScoreDiffsDiffsCount = guessScoreDiffsDiffs.count\n        val\
    \ gameScoreDiffsDiffsSum = gameScoreDiffsDiffs.sum\n        val guessScoreDiffsDiffsSum\
    \ = guessScoreDiffsDiffs.sum\n        val gameScoreDiffsDiffsDiff = gameScoreDiffsDiffsSum\
    \ - guessScoreDiffsDiffsSum\n        val guessScoreDiffsDiffsDiff = guessScoreDiffsDiffsSum\
    \ - gameScoreDiffsDiffsSum\n        val gameScoreDiffsDiffsDiffs = gameScoreDiffsDiffs.zip(guessScoreDiffsDiffs).map(x\
    \ => (x._1 - x._2))\n        val guessScoreDiffsDiffsDiffs = guessScoreDiffsDiffs.zip(gameScoreDiffsDiffs).map(x\
    \ => (x._1 - x._2))\n        val gameScoreDiffsDiffsDiffsCount = gameScoreDiffsDiffsDiffs.count\n\
    \        val guessScoreDiffs", "        val gameScores = game.map(x => if (x ==\
    \ 0) 0 else x)\n        val guessScores = guess.map(x => if (x == 0) 0 else x)\n\
    \        val diffs = gameScores zip guessScores\n        diffs.map(x => if (x._1\
    \ == x._2) 0 else abs(x._1 - x._2))", "        val gameScores = game.map(x =>\
    \ if (x == 0) 0 else x)\n        val guessScores = guess.map(x => if (x == 0)\
    \ 0 else x)\n        val gameScoreCount = gameScores.distinct\n        val guessScoreCount\
    \ = guessScores.distinct\n        val gameScoreCountMap = gameScoreCount.toMap\n\
    \        val guessScoreCountMap = guessScoreCount.toMap\n        val gameScoreCountMapKeys\
    \ = gameScoreCountMap.keys\n        val guessScoreCountMapKeys = guessScoreCountMap.keys\n\
    \        val gameScoreCountMapValues = gameScoreCountMap.values.toList\n     \
    \   val guessScoreCountMapValues = guessScoreCountMap.values.toList\n        val\
    \ gameScoreCountMapValueCount = gameScoreCountMapValues.size\n        val guessScoreCountMapValueCount\
    \ = guessScoreCountMapValues.size\n        val gameScoreCountMapValueCountMap\
    \ = gameScoreCountMapValues.toMap\n        val guessScoreCountMapValueCountMap\
    \ = guessScoreCountMapValues.toMap\n        val gameScoreCountMapValueCountMapKeys\
    \ = gameScoreCountMapValueCountMap.keys\n        val guessScoreCountMapValueCountMapKeys\
    \ = guessScoreCountMapValueCountMap.keys\n        val gameScoreCountMapValueCountMapValues\
    \ = gameScoreCountMapValueCountMap.values.toList\n        val guessScoreCountMapValueCountMapValues\
    \ = guessScoreCountMapValueCountMap.values.toList\n        val gameScoreCountMapValueCountMapValueCount\
    \ = gameScoreCountMapValueCountMapValues.size\n        val guessScoreCountMapValueCountMapValueCount\
    \ = guessScoreCountMapValueCountMapValues.size\n        val gameScoreCountMapValueCountMapValueCountMap\
    \ = gameScoreCountMapValueCountMapValues.toMap\n        val guessScoreCountMapValueCountMapValueCountMap\
    \ = guessScoreCountMapValueCountMapValues.toMap\n        val gameScoreCountMapValueCountMapValueCountMapKeys\
    \ = gameScoreCountMapValueCountMapValueCountMap.keys\n        val guessScoreCountMapValueCountMapValueCountMapKeys\
    \ = guessScoreCountMapValueCountMapValueCountMap.keys\n        val gameScoreCountMapValueCountMapValueCountMapValues\
    \ = gameScoreCountMapValueCountMapValueCountMapValues.toList\n        val guessScoreCountMapValueCountMapValueCountMapValues\
    \ = guessScoreCountMapValueCountMapValueCountMapValues.toList\n        val gameScoreCountMapValueCountMapValueCountMapValueCount\
    \ = gameScoreCountMapValueCountMap", "        val gameLen = game.size\n      \
    \  val guessLen = guess.size\n        val result = new Array[Long](guessLen)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var gameScore\
    \ = 0\n        var guessScore = 0\n        while (i < gameLen && j < guessLen)\
    \ {\n            if (game(i) == guess(j)) {\n                gameScore += 1\n\
    \                i += 1\n                j += 1\n            } else if (game(i)\
    \ < guess(j)) {\n                gameScore += 1\n                i += 1\n    \
    \        } else {\n                guessScore += 1\n                j += 1\n \
    \           }\n        }\n        if (i == gameLen) {\n            result(k) =\
    \ gameScore\n        } else if (j == guessLen) {\n            result(k) = guessScore\n\
    \        } else {\n            result(k) = abs(gameScore - guessScore)\n     \
    \   }\n        result", "        val gameList = game.map(x => if (x == 0) 0 else\
    \ x)\n        val guessList = guess.map(x => if (x == 0) 0 else x)\n        val\
    \ gameLength = game.length\n        val guessLength = guess.length\n        val\
    \ gameScores = gameList.zipWithIndex.map(x => (x._2, x._1))\n        val guessScores\
    \ = guessList.zipWithIndex.map(x => (x._2, x._1))\n        val gameScoreMap =\
    \ gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList =\
    \ new mutable.ListBuffer[Long]()\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        for (i <- 0 until guessLength)\
    \ {\n            val guessScore = guessScoreMap.get(i)\n            val gameScore\
    \ = gameScoreMap.get(i)\n            val diff = guessScore - gameScore\n     \
    \       if (gameScore != 0) {\n                gameScoreList.add(gameScore)\n\
    \                guessScoreList.add(guessScore)\n            }\n            guessScoreMap\
    \ += i -> diff\n            gameScoreMap += i -> diff\n        }\n        guessScoreList.map(x\
    \ => Math.abs(x))", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> score }.toMap\n    \
    \    val guessesWithIndexes = guess.zip(game).map { case (guess, score) => guess\
    \ -> index }.toMap\n        val guessesWithIndexesWithScores = guess.zip(game).map\
    \ { case (guess, score) => guess -> index -> score }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> index -> score }.toMap\n\
    \        val guessesWithIndexesWithScores = guess.zip(game).map { case (guess,\
    \ score) => guess -> index -> score }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> index -> score }.toMap\n\
    \        val guessesWithIndexesWithScores = guess.zip(game).map { case (guess,\
    \ score) => guess -> index -> score }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> index -> score }.toMap\n\
    \        val guessesWithIndexesWithScores = guess.zip(game).map { case (guess,\
    \ score) => guess -> index -> score }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> index -> score }.toMap\n\
    \        val guessesWithIndexesWithScores = guess.zip(game).map { case (guess,\
    \ score) => guess -> index -> score }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> index -> score }.toMap\n\
    \        val guessesWithIndexesWithScores = guess.zip(game).map { case (guess,\
    \ score) => guess -> index -> score }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> index -> score }.toMap\n\
    \        val guessesWithIndexesWithScores = guess.zip(game).map { case (guess,\
    \ score) => guess ", "        val gameScores = game.map(x => if (x == 0) 0 else\
    \ x)\n        val guessScores = guess.map(x => if (x == 0) 0 else x)\n       \
    \ val diffs = gameScores zip guessScores\n        val correct = diffs.filter(x\
    \ => x._1 == x._2).length\n        val wrong = diffs.filter(x => x._1 != x._2).length\n\
    \        val result = new Array[Long](guess.length)\n        for (i<- 0 until\
    \ guess.length) result(i) = if (correct == 0) 0 else Math.abs(guess(i) - game(i))\n\
    \        result", "        val gameLen = game.size\n        val guessLen = guess.size\n\
    \        val result = new Array[Long](guessLen)\n        var i = 0\n        while\
    \ (i < guessLen) {\n            var j = 0\n            while (j < gameLen) {\n\
    \                if (game(j) == guess(i)) {\n                    result(j) = 0\n\
    \                    j++\n                } else {\n                    result(j)\
    \ = abs(game(j) - guess(i))\n                    j++\n                }\n    \
    \        }\n            i += 1\n        }\n        result", "        val gameLen\
    \ = game.length\n        val guessLen = guess.length\n        val result = new\
    \ mutable.ArrayList[Long]()\n        var i = 0\n        var j = 0\n        var\
    \ k = 0\n        var diff = 0\n        while (i < gameLen && j < guessLen) {\n\
    \            if (game(i) == guess(j)) {\n                result.add(game(i))\n\
    \                i += 1\n                j += 1\n            } else if (game(i)\
    \ < guess(j)) {\n                result.add(game(i))\n                i += 1\n\
    \            } else {\n                result.add(guess(j))\n                j\
    \ += 1\n            }\n        }\n        while (i < gameLen) {\n            result.add(game(i))\n\
    \            i += 1\n        }\n        while (j < guessLen) {\n            result.add(guess(j))\n\
    \            j += 1\n        }\n        result", "        val gameScores = game.zipWithIndex.map{\
    \ case (score, index) => score }.toList\n        val guessesScores = guess.zipWithIndex.map{\
    \ case (score, index) => score }.toList\n        val gameScoreMap = gameScores.groupBy(x\
    \ => x).mapValues(_.size)\n        val guessesScoreMap = guessesScores.groupBy(x\
    \ => x).mapValues(_.size)\n        val gameScoreList = gameScoreMap.mapValues(_.toList).values.toList\n\
    \        val guessesScoreList = guessesScoreMap.mapValues(_.toList).values.toList\n\
    \        val gameScores = gameScoreList.zip(guessesScoreList).map{ case (gameScore,\
    \ guessesScore) =>\n            val gameScoreDiff = gameScore - guessesScore\n\
    \            val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n            gameScoreDiffAbs\n\
    \        }\n        gameScores.toList.map(x => x._1).toList", "        val guesses\
    \ = guess.toSet\n        val scores = game.toSet\n        val results = new mutable.ArrayList[Long]()\n\
    \        for(score <- scores) {\n            val guess = guesses.find(_ == score)\n\
    \            if (guess == None) {\n                results.add(score)\n      \
    \      } else {\n                val diff = guess - score\n                if\
    \ (diff > 0) results.add(diff) else results.add(Math.abs(diff))\n            }\n\
    \        }\n        results.toList", "        val guesses = guess.map(x => Math.abs(x\
    \ - game))\n        val correct = game.zip(guesses).filter(_._1 == 0).map(_._2)\n\
    \        val wrong = game.zip(guesses).filter(_._1 == 0).map(_._2)\n        correct.toList\
    \ ++ wrong.toList", "        val gameSize = game.size\n        val guessSize =\
    \ guess.size\n        val result = new Array[Long](guessSize)\n        var i =\
    \ 0\n        while (i < guessSize) {\n            val gameScore = game(i)\n  \
    \          val guessScore = guess(i)\n            val diff = guessScore - gameScore\n\
    \            if (diff < 0) {\n                val temp = gameScore\n         \
    \       gameScore = guessScore\n                guessScore = temp\n          \
    \      diff = -diff\n            }\n            result(i) = diff\n           \
    \ i += 1\n        }\n        result", "        val guesses = guess.map(x => Math.abs(x\
    \ - game))\n        val correct = game.zip(guesses).filter(_._1 == 0).map(_._2)\n\
    \        val wrong = game.zip(guesses).filter(_._1 == 1).map(_._2)\n        correct.toList\
    \ ++ wrong.toList", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score }\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n\
    \        val guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessScoreValues = guessScoreMap.values.toList\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = ", "        val guesses = guess.toList\n\
    \        val scores = game.toList\n        val guesses_count = guesses.size\n\
    \        val scores_count = scores.size\n        val result = new Array[Long](guesses_count)\n\
    \        var i = 0\n        while (i < guesses_count) {\n            var j = 0\n\
    \            while (j < scores_count) {\n                if (scores(j) == guesses(i))\
    \ {\n                    result(i) = j\n                    j++\n            \
    \    }\n                else {\n                    result(i) = abs(scores(j)\
    \ - guesses(i))\n                    j++\n                }\n            }\n \
    \           i++\n        }\n        result", "        val gameScores = game.zipWithIndex.map(x\
    \ => x._2)\n        val guessesScores = guess.zipWithIndex.map(x => x._2)\n  \
    \      val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val result = guessesScoreMap.map { case (guess, score) =>\n         \
    \   val gameScore = gameScoreMap.get(guess)\n            if (gameScore == null)\
    \ {\n                0\n            } else {\n                Math.abs(score -\
    \ gameScore)\n            }\n        }\n        result.toList", "        val gameLen\
    \ = game.length\n        val guessLen = guess.length\n        val result = new\
    \ Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScore = gameScores.toSeq.sortBy(_._1).reverse.head._2\n\
    \        val guessScore = guessScores.toSeq.sortBy(_._1).reverse.head._2\n   \
    \     var i = 0\n        while (i < guessLen) {\n            val guess = guess(i)\n\
    \            val gameScore = gameScores.toSeq.sortBy(_._1).reverse.head._2\n \
    \           val guessScore = guessScores.toSeq.sortBy(_._1).reverse.head._2\n\
    \            val diff = Math.abs(guess - gameScore)\n            val diff2 = Math.abs(guess\
    \ - guessScore)\n            if (diff == 0) {\n                result(i) = diff2\n\
    \            } else {\n                result(i) = diff\n            }\n     \
    \       i += 1\n        }\n        result", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesWithScores\
    \ = guess.zip(game).map { case (guess, score) => (guess, score) }\n        val\
    \ guessesWithScoreAndIndex = guessesWithScores.zipWithIndex.map { case (guess,\
    \ score, index) => (guess, score, index) }\n        val guessesWithScoreAndIndexSorted\
    \ = guessesWithScoreAndIndex.sortBy(_._2)\n        val guessesWithScoreAndIndexSortedWithIndex\
    \ = guessesWithScoreAndIndexSorted.zipWithIndex.map { case (guess, score, index)\
    \ => (guess, score, index._2) }\n        val guessesWithScoreAndIndexSortedWithIndexSorted\
    \ = guessesWithScoreAndIndexSortedWithIndex.sortBy(_._2)\n        val guessesWithScoreAndIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoreAndIndexSortedWithIndex.zipWithIndex.map { case (guess, score,\
    \ index) => (guess, score, index._2) }\n        val guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoreAndIndexSortedWithIndexSortedWithIndex.sortBy(_._2)\n    \
    \    val guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex.map\
    \ { case (guess, score, index) => (guess, score, index._2) }\n        val guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._2)\n\
    \        val guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex.map\
    \ { case (guess, score, index) => (guess, score, index._2) }\n        val guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._2)\n\
    \        val guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val diffs = guessesScores.zip(gameScores).map { case (guess, game)\
    \ => math.abs(guess - game) }\n        diffs.toList", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreKeys = gameScoreMap.keySet\n        val guessScoreKeys = guessScoreMap.keySet\n\
    \        val gameScoreValues = gameScoreMap.values.toList\n        val guessScoreValues\
    \ = guessScoreMap.values.toList\n        val gameScoreKeysSet = gameScoreKeys.toSet\n\
    \        val guessScoreKeysSet = guessScoreKeys.toSet\n        val gameScoreValuesSet\
    \ = gameScoreValues.toSet\n        val guessScoreValuesSet = guessScoreValues.toSet\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessScoreKeysSetSize\
    \ = guessScoreKeysSet.size\n        val gameScoreValuesSetSize = gameScoreValuesSet.size\n\
    \        val guessScoreValuesSetSize = guessScoreValuesSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessScoreKeysSetSize = guessScoreKeysSet.size\n\
    \        val gameScoreValuesSetSize = gameScoreValuesSet.size\n        val guessScoreValuesSetSize\
    \ = guessScoreValuesSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessScoreKeysSetSize = guessScoreKeysSet.size\n        val gameScoreValuesSetSize\
    \ = gameScoreValuesSet.size\n        val guessScoreValuesSetSize = guessScoreValuesSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessScoreKeysSetSize\
    \ = guessScoreKeysSet.size\n        val gameScoreValuesSetSize = gameScoreValuesSet.size\n\
    \        val guessScoreValuesSetSize = guessScoreValuesSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessScoreKeysSetSize = guessScoreKeysSet.size\n\
    \        val gameScoreValuesSetSize = gameScoreValuesSet.size\n        val guessScoreValuesSetSize\
    \ = guessScoreValuesSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessScoreKeysSetSize = guessScoreKeysSet.size\n        val gameScoreValuesSetSize\
    \ = gameScoreValuesSet.size\n        val guessScoreValuesSetSize = guessScoreValuesSet.size\n\
    \        val gameScoreKey", "        val guesses = guess.toSet\n        val scores\
    \ = game.toSet\n        val result = new mutable.ArrayList[Long]\n        val\
    \ guessesWithScore = scores.toList.zip(guesses)\n        guessesWithScore.foreach\
    \ { case (score, guess) =>\n            if (guess == score) {\n              \
    \  result.add(0)\n            } else {\n                val difference = guess\
    \ - score\n                result.add(difference)\n            }\n        }\n\
    \        result.toList", "        val gameScores = game.zipWithIndex.map { case\
    \ (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScores\
    \ = gameScoreList.zipWithIndex.map { case (score, index) => score }\n        val\
    \ guessScores = guessScoreList.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScores\
    \ = gameScoreList.zipWithIndex.map { case (score, index) => score }\n        val\
    \ guessScores = guessScoreList.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScores\
    \ = gameScoreList.zipWithIndex.map { case (score, index) => score }\n        val\
    \ guessScores = guessScoreList.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScores\
    \ = gameScoreList.zipWithIndex.map { case (score, index) => score }\n        val\
    \ guessScores = guessScoreList.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScores\
    \ = gameScoreList.zipWithIndex.map { case (score, index) => score }\n        val\
    \ guessScores = guessScoreList.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n", "        val gameLen = game.size\n\
    \        val guessLen = guess.size\n        val result = new Array[Long](guessLen)\n\
    \        val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }\n        val guessScores = guess.zipWithIndex.map { case (score, index)\
    \ => (index, score) }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n\
    \        val guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessScoreValues = guessScoreMap.values.toList\n\
    \        var i = 0\n        while (i < guessLen) {\n            val gameScore\
    \ = gameScoreValues(i)\n            val guessScore = guessScoreValues(i)\n   \
    \         val gameScoreKey = gameScoreKeys(i)\n            val guessScoreKey =\
    \ guessScoreKeys(i)\n            val gameScoreDiff = gameScore - guessScore\n\
    \            val guessScoreDiff = guessScore - gameScore\n            if (gameScoreKey\
    \ == guessScoreKey) {\n                result(i) = gameScoreDiff\n           \
    \ } else {\n                result(i) = Math.abs(gameScoreDiff)\n            }\n\
    \            i += 1\n        }\n        result"]
stop_tokens:
- "\n    }\n"
