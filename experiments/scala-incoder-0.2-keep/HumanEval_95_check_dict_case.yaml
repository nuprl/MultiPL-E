name: HumanEval_95_check_dict_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a dictionary, return True if all keys are strings in lower \n    //\
  \ case or all keys are strings in upper case, else return False.\n    // The function\
  \ should return False is the given dictionary is empty.\n    // Examples:\n    //\
  \ check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n   \
  \ // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
  \ return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
  :\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"John\", \"\
  Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
  STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
  \ : Map[String,String]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
  banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
  Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"\
  12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" ->\
  \ \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isAllLowerCase\
    \ = lowerCaseKeys.forall(_.equals(_))\n        val isAllUpperCase = upperCaseKeys.forall(_.equals(_))\n\
    \        isAllLowerCase && isAllUpperCase", "        if(dict.isEmpty) false\n\
    \        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n \
    \       val upper = keys.map(_.toUpperCase)\n        val result = lower.forall(x\
    \ => upper.contains(x))\n        result", "        val keys = dict.keys\n    \
    \    val isUpper = keys.forall(_.isUpper)\n        val isLower = keys.forall(_.isLower)\n\
    \        if(keys.isEmpty) false else (isUpper && isLower)", "        val keys\
    \ = dict.keys\n        val values = dict.values.toList\n        val keysLower\
    \ = keys.map(_.toLowerCase)\n        val keysUpper = keys.map(_.toUpperCase)\n\
    \        val keysEqual = keysLower == keysUpper\n        val valuesEqual = values.forall(_.toString.toLowerCase()\
    \ == _.toString.toUpperCase)\n        keysEqual && valuesEqual", "        val\
    \ keys = dict.keys\n        if(keys.length == 0) return false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keySet\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toLowerCase)\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toUpperCase)\n        val isAllUpperCase = upperCaseKeys.size\
    \ == keys.size\n        val isAllLowerCase = lowerCaseKeys.size == keys.size\n\
    \        val isAllKeysString = keys.size == upperCaseKeys.size + lowerCaseKeys.size\n\
    \        isAllUpperCase && isAllLowerCase && isAllKeysString", "        val keys\
    \ = dict.keySet\n        val lowerCaseKeys = keys.filter(_.isLower)\n        val\
    \ upperCaseKeys = keys.filter(_.isUpper)\n        val allKeys = lowerCaseKeys\
    \ ++ upperCaseKeys\n        allKeys.forall(key => dict.get(key).isInstanceOf[String])",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        val isAllLowerCase = lowerCaseKeys.size == keys.size\n        val\
    \ isAllUpperCase = upperCaseKeys.size == keys.size\n        isAllLowerCase &&\
    \ isAllUpperCase && keys.size == 0", "        val keys = dict.keys\n        val\
    \ lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val result = lowerCaseKeys.forall(key => upperCaseKeys.contains(key))\n\
    \        result || keys.forall(key => upperCaseKeys.contains(key.toLowerCase))",
  "        val keys = dict.keys\n        val values = dict.values.toList\n       \
    \ val upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n\
    \        val lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n\
    \        val upperCaseValues = values.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n\
    \        val lowerCaseValues = values.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n\
    \        val isAllKeysUpperCase = upperCaseKeys.size == keys.size\n        val\
    \ isAllKeysLowerCase = lowerCaseKeys.size == keys.size\n        val isAllValuesUpperCase\
    \ = upperCaseValues.size == values.size\n        val isAllValuesLowerCase = lowerCaseValues.size\
    \ == values.size\n        val isAllKeysAndValuesUpperCase = isAllKeysUpperCase\
    \ && isAllValuesUpperCase\n        val isAllKeysAndValuesLowerCase = isAllKeysLowerCase\
    \ && isAllValuesLowerCase\n        val isAllKeysAndValuesBothCases = isAllKeysUpperCase\
    \ && isAllKeysLowerCase && isAllValuesUpperCase && isAllValuesLowerCase\n    \
    \    val isAllKeysAndValuesBothCasesOrNone = isAllKeysAndValuesBothCases || isAllKeysAndValuesBothCasesOrNone\n\
    \        val isAllKeysAndValuesBothCasesOrNoneOrEmpty = isAllKeysAndValuesBothCasesOrNone\
    \ || isAllKeysAndValuesBothCasesOrNoneOrEmpty\n        val isAllKeysAndValuesBothCasesOrNoneOrEmptyOrFalse\
    \ = isAllKeysAndValuesBothCasesOrNone || isAllKeysAndValuesBothCasesOrNoneOrEmpty\n\
    \        val isAllKeysAndValuesBothCasesOrNoneOrEmptyOrTrue = isAllKeysAndValuesBothCasesOrNone\
    \ || isAllKeysAndValuesBothCasesOrNoneOrEmpty\n        val isAllKeysAndValuesBothCasesOrNoneOrEmptyOrFalse\
    \ = isAllKeysAndValuesBothCasesOrNone || isAllKeysAndValuesBothCasesOrNoneOrEmpty\n\
    \        val isAllKeysAndValuesBothCasesOrNoneOrEmptyOrTrue = isAllKeysAndValuesBothCasesOrNone\
    \ || isAllKeysAndValuesBothCasesOrNoneOrEmpty\n        val isAllKeysAndValuesBothCasesOrNoneOrEmptyOrFalse\
    \ = isAllKeysAndValuesBothCasesOrNone || isAllKeysAndValuesBothCasesOrNoneOrEmpty\n\
    \        val isAllKeysAndValues", "        val keys = dict.keys\n        val upperCaseKeys\
    \ = keys.filter(_.toUpperCase == _)\n        val lowerCaseKeys = keys.filter(_.toLowerCase\
    \ == _)\n        val allKeys = keys.toSet\n        val upperCaseKeysSet = upperCaseKeys.toSet\n\
    \        val lowerCaseKeysSet = lowerCaseKeys.toSet\n        val allKeysSet =\
    \ allKeys.toSet\n        val upperCaseKeysSetSize = upperCaseKeysSet.size\n  \
    \      val lowerCaseKeysSetSize = lowerCaseKeysSet.size\n        val allKeysSetSize\
    \ = allKeysSet.size\n        val isAllKeysSet = allKeysSet.isEmpty\n        val\
    \ isAllKeysSetSize = allKeysSet.size\n        val isAllKeysSetIsEmpty = allKeysSet.isEmpty\n\
    \        val isAllKeysSetIsNotEmpty = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAndNotEmpty\
    \ = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAndNotEmptyAndNotEmpty\
    \ = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAnd", "        val keys\
    \ = dict.keys\n        val values = dict.values.toList\n        val isUpper =\
    \ keys.forall(_.isUpper)\n        val isLower = keys.forall(_.isLower)\n     \
    \   if(keys.length == 0 || keys.length == values.length){\n            return\
    \ false\n        }\n        if(!isUpper && !isLower){\n            return false\n\
    \        }\n        val isAllUpper = keys.forall(_.isUpper)\n        val isAllLower\
    \ = keys.forall(_.isLower)\n        if(isAllUpper && isAllLower){\n          \
    \  return true\n        }\n        if(!isAllUpper && !isAllLower){\n         \
    \   return false\n        }\n        val isAllUpperAndAllLower = keys.forall(_.isUpper\
    \ && _.isLower)\n        if(isAllUpperAndAllLower){\n            return true\n\
    \        }\n        if(!isAllUpperAndAllLower){\n            return false\n  \
    \      }\n        val isAllUpperAndAllLowerAndAllUpper = keys.forall(_.isUpper\
    \ && _.isLower && _.isUpper)\n        if(isAllUpperAndAllLowerAndAllUpper){\n\
    \            return true\n        }\n        if(!isAllUpperAndAllLowerAndAllUpper){\n\
    \            return false\n        }\n        val isAllUpperAndAllLowerAndAllUpperAndAllLower\
    \ = keys.forall(_.isUpper && _.isLower && _.isUpper && _.isLower)\n        if(isAllUpperAndAllLowerAndAllUpperAndAllLower){\n\
    \            return true\n        }\n        if(!isAllUpperAndAllLowerAndAllUpperAndAllLower){\n\
    \            return false\n        }\n        val isAllUpperAndAllLowerAndAllUpperAndAllLowerAndAllUpper\
    \ = keys.forall(_.isUpper && _.isLower && _.isUpper && _.isLower && _.isUpper)\n\
    \        if(isAllUpperAndAllLowerAndAllUpperAndAllLowerAndAllUpper){\n       \
    \     return true\n        }\n        if(!isAllUpperAndAllLowerAndAllUpperAndAllLowerAndAllUpper){\n\
    \            return false\n        }\n        val isAllUpperAndAllLowerAndAllUpperAndAllLowerAndAllUpperAndAllLower\
    \ = keys.forall(_.isUpper && _.isLower && _.isUpper && _.isLower && _.isUpper\
    \ && _.isLower && _.isUpper)\n        if(isAllUpperAndAllLowerAndAllUpperAndAllLowerAndAllUpperAndAllLower){\n\
    \            return true\n        }\n        if(!isAllUpper", "        val keys\
    \ = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        val isStringInLowerCase = lowerCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val isStringInUpperCase = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val isStringInBothCases = isStringInLowerCase && isStringInUpperCase\n\
    \        val isStringInBothCasesOrEmpty = \n            isStringInBothCases ||\
    \ keys.isEmpty\n        isStringInBothCasesOrEmpty", "        val keys = dict.keys\n\
    \        if(keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = lowerCaseKeys.toSet\n        val upperCaseDict = upperCaseKeys.toSet\n   \
    \     lowerCaseDict.isEmpty || upperCaseDict.isEmpty", "        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = keys.map(key => (key.toLowerCase, key.toUpperCase))\n    \
    \    val both_lower = keys.map(key => (key.toLowerCase, key.toLowerCase))\n  \
    \      val both_upper = keys.map(key => (key.toUpperCase, key.toUpperCase))\n\
    \        val both_both = keys.map(key => (key.toLowerCase, key.toUpperCase))\n\
    \        val both_both_lower = keys.map(key => (key.toLowerCase, key.toLowerCase))\n\
    \        val both_both_upper = keys.map(key => (key.toUpperCase, key.toUpperCase))\n\
    \        val both_both_both = keys.map(key => (key.toLowerCase, key.toUpperCase))\n\
    \        val both_both_both_lower = keys.map(key => (key.toLowerCase, key.toLowerCase))\n\
    \        val both_both_both_upper = keys.map(key => (key.toUpperCase, key.toUpperCase))\n\
    \        val both_both_both_both = keys.map(key => (key.toLowerCase, key.toUpperCase))\n\
    \        val both_both_both_both_lower = keys.map(key => (key.toLowerCase, key.toLowerCase))\n\
    \        val both_both_both_both_upper = keys.map(key => (key.toUpperCase, key.toUpperCase))\n\
    \        val both_both_both_both_both = keys.map(key => (key.toLowerCase, key.toUpperCase))\n\
    \        val both_both_both_both_both_lower = keys.map(key => (key.toLowerCase,\
    \ key.toLowerCase))\n        val both_both_both_both_both_upper = keys.map(key\
    \ => (key.toUpperCase, key.toUpperCase))\n        val both_both_both_both_both_both\
    \ = keys.map(key => (key.toLowerCase, key.toUpperCase))\n        val both_both_both_both_both_both_lower\
    \ = keys.map(key => (key.toLowerCase, key.toLowerCase))\n        val both_both_both_both_both_both_upper\
    \ = keys.map(key => (key.toUpperCase, key.toUpperCase))\n        val both_both_both_both_both_both_both\
    \ = keys.map(key => (key.toLowerCase, key.toUpperCase))\n        val both_both_both_both_both_both_both_lower\
    \ = keys.map(key => (key.toLowerCase, key.toLowerCase))\n        val both_both_both_both_both_both_both_upper\
    \ = keys.map(key => (key.toUpperCase, key.toUpperCase))\n        val both_both_both_both_both_both_both_",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isStringInLowerCase\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val isStringInUpperCase\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        isStringInLowerCase\
    \ && isStringInUpperCase", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filter(_._1.toLowerCase.contains(_))\n     \
    \   val upperCaseDict = dict.filter(_._1.toUpperCase.contains(_))\n        val\
    \ lowerCaseDictSize = lowerCaseDict.size\n        val upperCaseDictSize = upperCaseDict.size\n\
    \        val isDictEmpty = lowerCaseDictSize == 0 && upperCaseDictSize == 0\n\
    \        isDictEmpty", "        val keys = dict.keys\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val isAllUpper = upperCaseKeys.forall(_.contains(_))\n        val isAllLower\
    \ = lowerCaseKeys.forall(_.contains(_))\n        isAllUpper && isAllLower", " \
    \       val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val allLowerCaseKeys\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val allUpperCaseKeys\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        allLowerCaseKeys &&\
    \ allUpperCaseKeys", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(_.toLowerCase.contains(\"a\"))\n\
    \        val upperCaseDict = dict.filterKeys(_.toUpperCase.contains(\"A\"))\n\
    \        val lowerCaseDict2 = dict.filterKeys(_.toLowerCase.contains(\"8\"))\n\
    \        val upperCaseDict2 = dict.filterKeys(_.toUpperCase.contains(\"8\"))\n\
    \        val lowerCaseDict3 = dict.filterKeys(_.toLowerCase.contains(\"a\"))\n\
    \        val upperCaseDict3 = dict.filterKeys(_.toUpperCase.contains(\"A\"))\n\
    \        val lowerCaseDict4 = dict.filterKeys(_.toLowerCase.contains(\"8\"))\n\
    \        val upperCaseDict4 = dict.filterKeys(_.toUpperCase.contains(\"8\"))\n\
    \        val lowerCaseDict5 = dict.filterKeys(_.toLowerCase.contains(\"a\"))\n\
    \        val upperCaseDict5 = dict.filterKeys(_.toUpperCase.contains(\"A\"))\n\
    \        val lowerCaseDict6 = dict.filterKeys(_.toLowerCase.contains(\"8\"))\n\
    \        val upperCaseDict6 = dict.filterKeys(_.toUpperCase.contains(\"8\"))\n\
    \        val lowerCaseDict7 = dict.filterKeys(_.toLowerCase.contains(\"a\"))\n\
    \        val upperCaseDict7 = dict.filterKeys(_.toUpperCase.contains(\"A\"))\n\
    \        val lowerCaseDict8 = dict.filterKeys(_.toLowerCase.contains(\"8\"))\n\
    \        val upperCaseDict8 = dict.filterKeys(_.toUpperCase.contains(\"8\"))\n\
    \        val lowerCaseDict9 = dict.filterKeys(_.toLowerCase.contains(\"a\"))\n\
    \        val upperCaseDict9 = dict.filterKeys(_.toUpperCase.contains(\"A\"))\n\
    \        val lowerCaseDict10 = dict.filterKeys(_.toLowerCase.contains(\"8\"))\n\
    \        val upperCaseDict10 = dict.filterKeys(_.toUpperCase.contains(\"8\"))\n\
    \        val lowerCaseDict11 = dict.filterKeys(_.toLowerCase.contains(\"a\"))\n\
    \        val upperCaseDict11 = dict.filterKeys(_.toUpperCase.contains(\"A\"))\n\
    \        val lowerCaseDict12 = dict.filterKeys(_.toLowerCase.contains(\"8\"))\n\
    \        val upperCaseDict12 = dict.filterKeys(_.toUpperCase.contains(\"8\"))\n\
    \        val lowerCaseDict13 = dict.filterKeys(_.toLowerCase.contains(\"a\"))\n\
    \        val upperCaseDict13 = dict.filterKeys(_.toUpperCase.contains(\"A\"))\n\
    \        val lowerCaseDict14 = dict.filterKeys(_.toLowerCase.contains(\"8\"))\n\
    \        val upperCaseDict14"]
stop_tokens:
- "\n    }\n"
