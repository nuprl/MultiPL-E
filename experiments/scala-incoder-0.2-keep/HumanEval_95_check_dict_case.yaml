name: HumanEval_95_check_dict_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a dictionary, return True if all keys are strings in lower \n    //\
  \ case or all keys are strings in upper case, else return False.\n    // The function\
  \ should return False is the given dictionary is empty.\n    // Examples:\n    //\
  \ check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n   \
  \ // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
  \ return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
  :\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"John\", \"\
  Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"\
  STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    def checkDictCase(dict\
  \ : Map[String,String]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
  banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
  Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"\
  12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" ->\
  \ \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isAllLowerCase\
    \ = lowerCaseKeys.forall(_.equals(_))\n        val isAllUpperCase = upperCaseKeys.forall(_.equals(_))\n\
    \        isAllLowerCase && isAllUpperCase", "        if(dict.isEmpty) false\n\
    \        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n \
    \       val upper = keys.map(_.toUpperCase)\n        val result = lower.forall(x\
    \ => upper.contains(x))\n        result", "        val keys = dict.keys\n    \
    \    val isUpper = keys.forall(_.isUpper)\n        val isLower = keys.forall(_.isLower)\n\
    \        if(keys.isEmpty) false else (isUpper && isLower)", "        val keys\
    \ = dict.keys\n        val values = dict.values.toList\n        val keysLower\
    \ = keys.map(_.toLowerCase)\n        val keysUpper = keys.map(_.toUpperCase)\n\
    \        val keysEqual = keysLower == keysUpper\n        val valuesEqual = values.forall(_.toString.toLowerCase()\
    \ == _.toString.toUpperCase)\n        keysEqual && valuesEqual", "        val\
    \ keys = dict.keys\n        if(keys.length == 0) return false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keySet\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toLowerCase)\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toUpperCase)\n        val isAllUpperCase = upperCaseKeys.size\
    \ == keys.size\n        val isAllLowerCase = lowerCaseKeys.size == keys.size\n\
    \        val isAllKeysString = keys.size == upperCaseKeys.size + lowerCaseKeys.size\n\
    \        isAllUpperCase && isAllLowerCase && isAllKeysString", "        val keys\
    \ = dict.keySet\n        val lowerCaseKeys = keys.filter(_.isLower)\n        val\
    \ upperCaseKeys = keys.filter(_.isUpper)\n        val allKeys = lowerCaseKeys\
    \ ++ upperCaseKeys\n        allKeys.forall(key => dict.get(key).isInstanceOf[String])",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        val isAllLowerCase = lowerCaseKeys.size == keys.size\n        val\
    \ isAllUpperCase = upperCaseKeys.size == keys.size\n        isAllLowerCase &&\
    \ isAllUpperCase && keys.size == 0", "        val keys = dict.keys\n        val\
    \ lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val result = lowerCaseKeys.forall(key => upperCaseKeys.contains(key))\n\
    \        result || keys.forall(key => upperCaseKeys.contains(key.toLowerCase))",
  "        val keys = dict.keys\n        val values = dict.values.toList\n       \
    \ val upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n\
    \        val lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n\
    \        val upperCaseValues = values.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n\
    \        val lowerCaseValues = values.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n\
    \        val isAllKeysUpperCase = upperCaseKeys.size == keys.size\n        val\
    \ isAllKeysLowerCase = lowerCaseKeys.size == keys.size\n        val isAllValuesUpperCase\
    \ = upperCaseValues.size == values.size\n        val isAllValuesLowerCase = lowerCaseValues.size\
    \ == values.size\n        val isAllKeysAndValuesUpperCase = isAllKeysUpperCase\
    \ && isAllValuesUpperCase\n        val isAllKeysAndValuesLowerCase = isAllKeysLowerCase\
    \ && isAllValuesLowerCase\n        val isAllKeysAndValuesBothCases = isAllKeysUpperCase\
    \ && isAllKeysLowerCase && isAllValuesUpperCase && isAllValuesLowerCase\n    \
    \    val isAllKeysAndValuesBothCasesOrNone = isAllKeysAndValuesBothCases || isAllKeysAndValuesBothCasesOrNone\n\
    \        val isAllKeysAndValuesBothCasesOrNoneOrEmpty = isAllKeysAndValuesBothCasesOrNone\
    \ || isAllKeysAndValuesBothCasesOrNoneOrEmpty\n        val isAllKeysAndValuesBothCasesOrNoneOrEmptyOrFalse\
    \ = isAllKeysAndValuesBothCasesOrNone || isAllKeysAndValuesBothCasesOrNoneOrEmpty\n\
    \        val isAllKeysAndValuesBothCasesOrNoneOrEmptyOrTrue = isAllKeysAndValuesBothCasesOrNone\
    \ || isAllKeysAndValuesBothCasesOrNoneOrEmpty\n        val isAllKeysAndValuesBothCasesOrNoneOrEmptyOrFalse\
    \ = isAllKeysAndValuesBothCasesOrNone || isAllKeysAndValuesBothCasesOrNoneOrEmpty\n\
    \        val isAllKeysAndValuesBothCasesOrNoneOrEmptyOrTrue = isAllKeysAndValuesBothCasesOrNone\
    \ || isAllKeysAndValuesBothCasesOrNoneOrEmpty\n        val isAllKeysAndValuesBothCasesOrNoneOrEmptyOrFalse\
    \ = isAllKeysAndValuesBothCasesOrNone || isAllKeysAndValuesBothCasesOrNoneOrEmpty\n\
    \        val isAllKeysAndValues", "        val keys = dict.keys\n        val upperCaseKeys\
    \ = keys.filter(_.toUpperCase == _)\n        val lowerCaseKeys = keys.filter(_.toLowerCase\
    \ == _)\n        val allKeys = keys.toSet\n        val upperCaseKeysSet = upperCaseKeys.toSet\n\
    \        val lowerCaseKeysSet = lowerCaseKeys.toSet\n        val allKeysSet =\
    \ allKeys.toSet\n        val upperCaseKeysSetSize = upperCaseKeysSet.size\n  \
    \      val lowerCaseKeysSetSize = lowerCaseKeysSet.size\n        val allKeysSetSize\
    \ = allKeysSet.size\n        val isAllKeysSet = allKeysSet.isEmpty\n        val\
    \ isAllKeysSetSize = allKeysSet.size\n        val isAllKeysSetIsEmpty = allKeysSet.isEmpty\n\
    \        val isAllKeysSetIsNotEmpty = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAndNotEmpty\
    \ = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAndNotEmptyAndNotEmpty\
    \ = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = allKeysSet.size!=0\n        val isAllKeysSetIsNotEmptyAnd", "        val keys\
    \ = dict.keys\n        val values = dict.values.toList\n        val isUpper =\
    \ keys.forall(_.isUpper)\n        val isLower = keys.forall(_.isLower)\n     \
    \   if(keys.length == 0 || keys.length == values.length){\n            return\
    \ false\n        }\n        if(!isUpper && !isLower){\n            return false\n\
    \        }\n        val isAllUpper = keys.forall(_.isUpper)\n        val isAllLower\
    \ = keys.forall(_.isLower)\n        if(isAllUpper && isAllLower){\n          \
    \  return true\n        }\n        if(!isAllUpper && !isAllLower){\n         \
    \   return false\n        }\n        val isAllUpperAndAllLower = keys.forall(_.isUpper\
    \ && _.isLower)\n        if(isAllUpperAndAllLower){\n            return true\n\
    \        }\n        if(!isAllUpperAndAllLower){\n            return false\n  \
    \      }\n        val isAllUpperAndAllLowerAndAllUpper = keys.forall(_.isUpper\
    \ && _.isLower && _.isUpper)\n        if(isAllUpperAndAllLowerAndAllUpper){\n\
    \            return true\n        }\n        if(!isAllUpperAndAllLowerAndAllUpper){\n\
    \            return false\n        }\n        val isAllUpperAndAllLowerAndAllUpperAndAllLower\
    \ = keys.forall(_.isUpper && _.isLower && _.isUpper && _.isLower)\n        if(isAllUpperAndAllLowerAndAllUpperAndAllLower){\n\
    \            return true\n        }\n        if(!isAllUpperAndAllLowerAndAllUpperAndAllLower){\n\
    \            return false\n        }\n        val isAllUpperAndAllLowerAndAllUpperAndAllLowerAndAllUpper\
    \ = keys.forall(_.isUpper && _.isLower && _.isUpper && _.isLower && _.isUpper)\n\
    \        if(isAllUpperAndAllLowerAndAllUpperAndAllLowerAndAllUpper){\n       \
    \     return true\n        }\n        if(!isAllUpperAndAllLowerAndAllUpperAndAllLowerAndAllUpper){\n\
    \            return false\n        }\n        val isAllUpperAndAllLowerAndAllUpperAndAllLowerAndAllUpperAndAllLower\
    \ = keys.forall(_.isUpper && _.isLower && _.isUpper && _.isLower && _.isUpper\
    \ && _.isLower && _.isUpper)\n        if(isAllUpperAndAllLowerAndAllUpperAndAllLowerAndAllUpperAndAllLower){\n\
    \            return true\n        }\n        if(!isAllUpper", "        val keys\
    \ = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        val isStringInLowerCase = lowerCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val isStringInUpperCase = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val isStringInBothCases = isStringInLowerCase && isStringInUpperCase\n\
    \        val isStringInBothCasesOrEmpty = \n            isStringInBothCases ||\
    \ keys.isEmpty\n        isStringInBothCasesOrEmpty", "        val keys = dict.keys\n\
    \        if(keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = lowerCaseKeys.toSet\n        val upperCaseDict = upperCaseKeys.toSet\n   \
    \     lowerCaseDict.isEmpty || upperCaseDict.isEmpty", "        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = keys.map(key => (key.toLowerCase, key.toUpperCase))\n    \
    \    val both_lower = keys.map(key => (key.toLowerCase, key.toLowerCase))\n  \
    \      val both_upper = keys.map(key => (key.toUpperCase, key.toUpperCase))\n\
    \        val both_both = keys.map(key => (key.toLowerCase, key.toUpperCase))\n\
    \        val both_both_lower = keys.map(key => (key.toLowerCase, key.toLowerCase))\n\
    \        val both_both_upper = keys.map(key => (key.toUpperCase, key.toUpperCase))\n\
    \        val both_both_both = keys.map(key => (key.toLowerCase, key.toUpperCase))\n\
    \        val both_both_both_lower = keys.map(key => (key.toLowerCase, key.toLowerCase))\n\
    \        val both_both_both_upper = keys.map(key => (key.toUpperCase, key.toUpperCase))\n\
    \        val both_both_both_both = keys.map(key => (key.toLowerCase, key.toUpperCase))\n\
    \        val both_both_both_both_lower = keys.map(key => (key.toLowerCase, key.toLowerCase))\n\
    \        val both_both_both_both_upper = keys.map(key => (key.toUpperCase, key.toUpperCase))\n\
    \        val both_both_both_both_both = keys.map(key => (key.toLowerCase, key.toUpperCase))\n\
    \        val both_both_both_both_both_lower = keys.map(key => (key.toLowerCase,\
    \ key.toLowerCase))\n        val both_both_both_both_both_upper = keys.map(key\
    \ => (key.toUpperCase, key.toUpperCase))\n        val both_both_both_both_both_both\
    \ = keys.map(key => (key.toLowerCase, key.toUpperCase))\n        val both_both_both_both_both_both_lower\
    \ = keys.map(key => (key.toLowerCase, key.toLowerCase))\n        val both_both_both_both_both_both_upper\
    \ = keys.map(key => (key.toUpperCase, key.toUpperCase))\n        val both_both_both_both_both_both_both\
    \ = keys.map(key => (key.toLowerCase, key.toUpperCase))\n        val both_both_both_both_both_both_both_lower\
    \ = keys.map(key => (key.toLowerCase, key.toLowerCase))\n        val both_both_both_both_both_both_both_upper\
    \ = keys.map(key => (key.toUpperCase, key.toUpperCase))\n        val both_both_both_both_both_both_both_",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isStringInLowerCase\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val isStringInUpperCase\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        isStringInLowerCase\
    \ && isStringInUpperCase", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filter(_._1.toLowerCase.contains(_))\n     \
    \   val upperCaseDict = dict.filter(_._1.toUpperCase.contains(_))\n        val\
    \ lowerCaseDictSize = lowerCaseDict.size\n        val upperCaseDictSize = upperCaseDict.size\n\
    \        val isDictEmpty = lowerCaseDictSize == 0 && upperCaseDictSize == 0\n\
    \        isDictEmpty", "        val keys = dict.keys\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val isAllUpper = upperCaseKeys.forall(_.contains(_))\n        val isAllLower\
    \ = lowerCaseKeys.forall(_.contains(_))\n        isAllUpper && isAllLower", " \
    \       val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val allLowerCaseKeys\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val allUpperCaseKeys\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        allLowerCaseKeys &&\
    \ allUpperCaseKeys", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(_.toLowerCase.contains(\"a\"))\n\
    \        val upperCaseDict = dict.filterKeys(_.toUpperCase.contains(\"A\"))\n\
    \        val lowerCaseDict2 = dict.filterKeys(_.toLowerCase.contains(\"8\"))\n\
    \        val upperCaseDict2 = dict.filterKeys(_.toUpperCase.contains(\"8\"))\n\
    \        val lowerCaseDict3 = dict.filterKeys(_.toLowerCase.contains(\"a\"))\n\
    \        val upperCaseDict3 = dict.filterKeys(_.toUpperCase.contains(\"A\"))\n\
    \        val lowerCaseDict4 = dict.filterKeys(_.toLowerCase.contains(\"8\"))\n\
    \        val upperCaseDict4 = dict.filterKeys(_.toUpperCase.contains(\"8\"))\n\
    \        val lowerCaseDict5 = dict.filterKeys(_.toLowerCase.contains(\"a\"))\n\
    \        val upperCaseDict5 = dict.filterKeys(_.toUpperCase.contains(\"A\"))\n\
    \        val lowerCaseDict6 = dict.filterKeys(_.toLowerCase.contains(\"8\"))\n\
    \        val upperCaseDict6 = dict.filterKeys(_.toUpperCase.contains(\"8\"))\n\
    \        val lowerCaseDict7 = dict.filterKeys(_.toLowerCase.contains(\"a\"))\n\
    \        val upperCaseDict7 = dict.filterKeys(_.toUpperCase.contains(\"A\"))\n\
    \        val lowerCaseDict8 = dict.filterKeys(_.toLowerCase.contains(\"8\"))\n\
    \        val upperCaseDict8 = dict.filterKeys(_.toUpperCase.contains(\"8\"))\n\
    \        val lowerCaseDict9 = dict.filterKeys(_.toLowerCase.contains(\"a\"))\n\
    \        val upperCaseDict9 = dict.filterKeys(_.toUpperCase.contains(\"A\"))\n\
    \        val lowerCaseDict10 = dict.filterKeys(_.toLowerCase.contains(\"8\"))\n\
    \        val upperCaseDict10 = dict.filterKeys(_.toUpperCase.contains(\"8\"))\n\
    \        val lowerCaseDict11 = dict.filterKeys(_.toLowerCase.contains(\"a\"))\n\
    \        val upperCaseDict11 = dict.filterKeys(_.toUpperCase.contains(\"A\"))\n\
    \        val lowerCaseDict12 = dict.filterKeys(_.toLowerCase.contains(\"8\"))\n\
    \        val upperCaseDict12 = dict.filterKeys(_.toUpperCase.contains(\"8\"))\n\
    \        val lowerCaseDict13 = dict.filterKeys(_.toLowerCase.contains(\"a\"))\n\
    \        val upperCaseDict13 = dict.filterKeys(_.toUpperCase.contains(\"A\"))\n\
    \        val lowerCaseDict14 = dict.filterKeys(_.toLowerCase.contains(\"8\"))\n\
    \        val upperCaseDict14", "        if(dict.isEmpty) false\n        val keys\
    \ = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val result = lower == upper || lower == upper.tail\n\
    \        if(result) true\n        else false", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = lowerCaseKeys.toSet\n\
    \        val upperCaseDict = upperCaseKeys.toSet\n        lowerCaseDict.isEmpty\
    \ || upperCaseDict.isEmpty", "        val keys = dict.keySet\n        val isString\
    \ = keys.forall(_.isInstanceOf[String])\n        val isUpperCase = keys.forall(_.isInstanceOf[String]\
    \ && _.toUpperCase == _)\n        isString && isUpperCase", "        val keys\
    \ = dict.keys\n        if(keys.length == 0) return false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.contains(key.toLowerCase))\n       \
    \ || upperCaseKeys.forall(key => dict.contains(key.toUpperCase))", "        if(dict.isEmpty)\
    \ false\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val result = lower.forall(x\
    \ => upper.contains(x))\n        result", "        val keys = dict.keys\n    \
    \    val upperCaseKeys = keys.filter(_.toUpperCase == _)\n        val lowerCaseKeys\
    \ = keys.filter(_.toLowerCase == _)\n        val upperCaseKeysSet = upperCaseKeys.toSet\n\
    \        val lowerCaseKeysSet = lowerCaseKeys.toSet\n        val result = upperCaseKeysSet.subsetOf(lowerCaseKeysSet)\n\
    \        result || keys.forall(_.toUpperCase == _)", "        val keys = dict.keys\n\
    \        val isStringInLowerCase : Boolean = keys.forall(_.toString.toLowerCase.contains(\"\
    a\"))\n        val isStringInUpperCase : Boolean = keys.forall(_.toString.toUpperCase.contains(\"\
    A\"))\n        isStringInLowerCase && isStringInUpperCase", "        val keys\
    \ = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val both = keys.zip(lower).zip(upper)\n \
    \       val result = both.forall(x => x._1 == x._2)\n        result", "      \
    \  val keys = dict.keys\n        val lowerKeys = keys.map(_.toLowerCase)\n   \
    \     val upperKeys = keys.map(_.toUpperCase)\n        val lowerDict = lowerKeys.toSet\n\
    \        val upperDict = upperKeys.toSet\n        val result = lowerDict.subsetOf(upperDict)\n\
    \        result && keys.forall(_.toString.toLowerCase.equals(_.toString.toUpperCase))",
  "        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        lowerCaseKeys.forall(key\
    \ => upperCaseKeys.contains(key)) || upperCaseKeys.forall(key => lowerCaseKeys.contains(key))",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isLowerCase\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val isUpperCase = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val isAllStrings = isLowerCase && isUpperCase\n        val isAllStringsOrNone\
    \ = keys.forall(_.isInstanceOf[String])\n        isAllStringsOrNone && isAllStrings",
  "        val keys = dict.keys\n        val values = dict.values\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseValues = values.map(_.toLowerCase)\n        val upperCaseValues\
    \ = values.map(_.toUpperCase)\n        val allLowerCase = lowerCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val allUpperCase = upperCaseKeys.forall(_.isInstanceOf[String])\n   \
    \     val allLowerCaseAndUpperCase = lowerCaseKeys.forall(_.isInstanceOf[String])\
    \ && upperCaseKeys.forall(_.isInstanceOf[String])\n        val allLowerCaseAndUpperCaseAndValues\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String]) && upperCaseKeys.forall(_.isInstanceOf[String])\
    \ && values.forall(_.isInstanceOf[String])\n        val allLowerCaseAndUpperCaseAndValuesAndKeys\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String]) && upperCaseKeys.forall(_.isInstanceOf[String])\
    \ && values.forall(_.isInstanceOf[String]) && keys.forall(_.isInstanceOf[String])\n\
    \        val allLowerCaseAndUpperCaseAndValuesAndKeysAndValues = lowerCaseKeys.forall(_.isInstanceOf[String])\
    \ && upperCaseKeys.forall(_.isInstanceOf[String]) && values.forall(_.isInstanceOf[String])\
    \ && keys.forall(_.isInstanceOf[String]) && values.forall(_.isInstanceOf[String])\n\
    \        val allLowerCaseAndUpperCaseAndValuesAndKeysAndValuesAndValues = lowerCaseKeys.forall(_.isInstanceOf[String])\
    \ && upperCaseKeys.forall(_.isInstanceOf[String]) && values.forall(_.isInstanceOf[String])\
    \ && keys.forall(_.isInstanceOf[String]) && values.forall(_.isInstanceOf[String])\
    \ && values.forall(_.isInstanceOf[String])\n        val allLowerCaseAndUpperCaseAndValuesAndKeysAndValuesAndValuesAndValues\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String]) && upperCaseKeys.forall(_.isInstanceOf[String])\
    \ && values.forall(_.isInstanceOf[String]) && keys.forall(_.isInstanceOf[String])\
    \ && values.forall(_.isInstanceOf[String]) && values.forall(_.isInstanceOf[String])\
    \ && values.forall(_.isInstanceOf[String])\n        val allLowerCaseAndUpper",
  "        val keys = dict.keySet\n        val isStringInLowerCase = keys.forall(_.toString.toLowerCase.contains(\"\
    a\"))\n        val isStringInUpperCase = keys.forall(_.toString.toUpperCase.contains(\"\
    A\"))\n        isStringInLowerCase && isStringInUpperCase", "        val keys\
    \ = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val isLowerOrUpper = lower ++ upper\n   \
    \     val isAllLowerOrUpper = isLowerOrUpper.forall(_.isInstanceOf[String])\n\
    \        val isAllLowerOrUpperOrEmpty = isAllLowerOrUpper.forall(_.nonEmpty)\n\
    \        isAllLowerOrUpperOrEmpty", "        val keys = dict.keys\n        val\
    \ lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val allLowerOrAllUpper = lower ++ upper\n        val allLowerOrAllUpperSet\
    \ = allLowerOrAllUpper.distinct\n        val allLowerOrAllUpperSetSize = allLowerOrAllUpperSet.size\n\
    \        val allUpperOrAllLower = upper.filter(x => !lower.contains(x))\n    \
    \    val allUpperOrAllLowerSet = allUpperOrAllLower.distinct\n        val allUpperOrAllLowerSetSize\
    \ = allUpperOrAllLowerSet.size\n        val allLowerOrAllUpperSetSize = allLowerOrAllUpperSet.size\n\
    \        val allUpperOrAllLowerSetSize = allUpperOrAllLowerSet.size\n        val\
    \ allLowerOrAllUpperSetSize = allLowerOrAllUpperSet.size\n        val allUpperOrAllLowerSetSize\
    \ = allUpperOrAllLowerSet.size\n        val allLowerOrAllUpperSetSize = allLowerOrAllUpperSet.size\n\
    \        val allUpperOrAllLowerSetSize = allUpperOrAllLowerSet.size\n        val\
    \ allLowerOrAllUpperSetSize = allLowerOrAllUpperSet.size\n        val allUpperOrAllLowerSetSize\
    \ = allUpperOrAllLowerSet.size\n        val allLowerOrAllUpperSetSize = allLowerOrAllUpperSet.size\n\
    \        val allUpperOrAllLowerSetSize = allUpperOrAllLowerSet.size\n        val\
    \ allLowerOrAllUpperSetSize = allLowerOrAllUpperSet.size\n        val allUpperOrAllLowerSetSize\
    \ = allUpperOrAllLowerSet.size\n        val allLowerOrAllUpperSetSize = allLowerOrAllUpperSet.size\n\
    \        val allUpperOrAllLowerSetSize = allUpperOrAllLowerSet.size\n        val\
    \ allLowerOrAllUpperSetSize = allLowerOrAllUpperSet.size\n        val allUpperOrAllLowerSetSize\
    \ = allUpperOrAllLowerSet.size\n        val allLowerOrAllUpperSetSize = allLowerOrAllUpperSet.size\n\
    \        val allUpperOrAllLowerSetSize = allUpperOrAllLowerSet.size\n        val\
    \ allLowerOrAllUpperSetSize = allLowerOrAllUpperSet.size\n        val allUpperOrAllLowerSetSize\
    \ = allUpperOrAllLowerSet.size\n        val allLowerOrAllUpperSetSize = allLowerOrAllUpperSet.size\n\
    \        val allUpperOrAllLowerSetSize = allUpperOrAllLowerSet.size\n        val\
    \ allLowerOrAllUpperSetSize = allLowerOr", "        val keys = dict.keys\n   \
    \     val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys =\
    \ keys.map(_.toUpperCase)\n        val isLowerCase = lowerCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val isUpperCase = upperCaseKeys.forall(_.isInstanceOf[String])\n    \
    \    isLowerCase && isUpperCase", "        val keys = dict.keys\n        val keys\
    \ = keys.toSet\n        val keys = keys.toSeq\n        val keys = keys.toList\n\
    \        val keys = keys.toBuffer\n        val keys = keys.toArray\n        val\
    \ keys = keys.toIterator\n        val keys = keys.toIterable\n        val keys\
    \ = keys.toStream\n        val keys = keys.toTraversable\n        val keys = keys.toSet\n\
    \        val keys = keys.toSeq\n        val keys = keys.toList\n        val keys\
    \ = keys.toBuffer\n        val keys = keys.toArray\n        val keys = keys.toIterator\n\
    \        val keys = keys.toIterable\n        val keys = keys.toStream\n      \
    \  val keys = keys.toTraversable\n        val keys = keys.toSet\n        val keys\
    \ = keys.toSeq\n        val keys = keys.toList\n        val keys = keys.toBuffer\n\
    \        val keys = keys.toArray\n        val keys = keys.toIterator\n       \
    \ val keys = keys.toIterable\n        val keys = keys.toStream\n        val keys\
    \ = keys.toTraversable\n        val keys = keys.toSet\n        val keys = keys.toSeq\n\
    \        val keys = keys.toList\n        val keys = keys.toBuffer\n        val\
    \ keys = keys.toArray\n        val keys = keys.toIterator\n        val keys =\
    \ keys.toIterable\n        val keys = keys.toStream\n        val keys = keys.toTraversable\n\
    \        val keys = keys.toSet\n        val keys = keys.toSeq\n        val keys\
    \ = keys.toList\n        val keys = keys.toBuffer\n        val keys = keys.toArray\n\
    \        val keys = keys.toIterator\n        val keys = keys.toIterable\n    \
    \    val keys = keys.toStream\n        val keys = keys.toTraversable\n       \
    \ val keys = keys.toSet\n        val keys = keys.toSeq\n        val keys = keys.toList\n\
    \        val keys = keys.toBuffer\n        val keys = keys.toArray\n        val\
    \ keys = keys.toIterator\n        val keys = keys.toIterable\n        val keys\
    \ = keys.toStream\n        val keys = keys.toTraversable\n        val keys = keys.toSet\n\
    \        val keys = keys.toSeq\n        val keys = keys.toList\n        val keys\
    \ = keys.toBuffer\n        val keys = keys.toArray\n        val keys = keys.toIterator\n\
    \        val keys = keys.toIterable\n        val keys = keys.toStream\n      \
    \  val keys = keys.toTraversable\n        val keys = keys.toSet\n        val keys\
    \ = keys.toSeq\n        val keys = keys.toList\n        val keys = keys.toBuffer\n\
    \        val keys = keys.toArray\n        val keys = keys.toIterator\n       \
    \ val keys = keys.toIterable\n        val ", "        val keys = dict.keys\n \
    \       val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val isLowerCase = lowerCaseKeys.forall(_.equals(_))\n\
    \        val isUpperCase = upperCaseKeys.forall(_.equals(_))\n        isLowerCase\
    \ && isUpperCase", "        val keys = dict.keys\n        val lowerCaseKeys =\
    \ keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = lowerCaseKeys.toSet\n        val upperCaseDict =\
    \ upperCaseKeys.toSet\n        val isAllLowerCase = lowerCaseDict.size == keys.size\
    \ && lowerCaseDict.size == dict.size\n        val isAllUpperCase = upperCaseDict.size\
    \ == keys.size && upperCaseDict.size == dict.size\n        isAllLowerCase && isAllUpperCase\
    \ && lowerCaseDict.intersect(upperCaseDict).isEmpty", "        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = lower ++ upper\n        val notBoth = keys.filter(!both.contains(_))\n\
    \        notBoth.isEmpty", "        val keys = dict.keySet\n        if (keys.length\
    \ == 0) return false\n        val upperCaseKeys = keys.filter(x => x.toUpperCase()\
    \ == x)\n        val lowerCaseKeys = keys.filter(x => x.toLowerCase() == x)\n\
    \        if (upperCaseKeys.isEmpty() && lowerCaseKeys.isEmpty()) return true\n\
    \        if (upperCaseKeys.isEmpty()) return false\n        if (lowerCaseKeys.isEmpty())\
    \ return false\n        false", "        val keys = dict.keys\n        val keys\
    \ = keys.toSet\n        val keys = keys.toSeq\n        val keys = keys.toList\n\
    \        val keys = keys.toArray\n        val keys = keys.toIterator\n       \
    \ val keys = keys.toList\n        val keys = keys.toArray\n        val keys =\
    \ keys.toIterator\n        val keys = keys.toList\n        val keys = keys.toArray\n\
    \        val keys = keys.toIterator\n        val keys = keys.toList\n        val\
    \ keys = keys.toArray\n        val keys = keys.toIterator\n        val keys =\
    \ keys.toList\n        val keys = keys.toArray\n        val keys = keys.toIterator\n\
    \        val keys = keys.toList\n        val keys = keys.toArray\n        val\
    \ keys = keys.toIterator\n        val keys = keys.toList\n        val keys = keys.toArray\n\
    \        val keys = keys.toIterator\n        val keys = keys.toList\n        val\
    \ keys = keys.toArray\n        val keys = keys.toIterator\n        val keys =\
    \ keys.toList\n        val keys = keys.toArray\n        val keys = keys.toIterator\n\
    \        val keys = keys.toList\n        val keys = keys.toArray\n        val\
    \ keys = keys.toIterator\n        val keys = keys.toList\n        val keys = keys.toArray\n\
    \        val keys = keys.toIterator\n        val keys = keys.toList\n        val\
    \ keys = keys.toArray\n        val keys = keys.toIterator\n        val keys =\
    \ keys.toList\n        val keys = keys.toArray\n        val keys = keys.toIterator\n\
    \        val keys = keys.toList\n        val keys = keys.toArray\n        val\
    \ keys = keys.toIterator\n        val keys = keys.toList\n        val keys = keys.toArray\n\
    \        val keys = keys.toIterator\n        val keys = keys.toList\n        val\
    \ keys = keys.toArray\n        val keys = keys.toIterator\n        val keys =\
    \ keys.toList\n        val keys = keys.toArray\n        val keys = keys.toIterator\n\
    \        val keys = keys.toList\n        val keys = keys.toArray\n        val\
    \ keys = keys.toIterator\n        val keys = keys.toList\n        val keys = keys.toArray\n\
    \        val keys = keys.toIterator\n        val keys = keys.toList\n        val\
    \ keys = keys.toArray\n        val keys = keys.toIterator\n        val keys =\
    \ keys.toList\n        val keys = keys.toArray\n        val keys = keys.toIterator\n\
    \        val keys = keys.toList\n        val keys = keys.toArray\n        val\
    \ keys = keys.toIterator\n        val keys = keys.toList\n        val keys = keys.toArray\n\
    \        val keys = keys.toIterator\n        val keys = keys.toList\n        val ",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val result = lower.forall(key\
    \ => upper.contains(key))\n        result", "        val keys = dict.keys\n  \
    \      if(keys.isEmpty) false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.contains(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.contains(key.toUpperCase))",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n\
    \        val result = both.forall(key => dict.get(key).isInstanceOf[String])\n\
    \        result", "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = lowerCaseKeys.toSet\n        val upperCaseDict = upperCaseKeys.toSet\n   \
    \     val isAllLowerCase = lowerCaseDict.size == keys.size\n        val isAllUpperCase\
    \ = upperCaseDict.size == keys.size\n        isAllLowerCase && isAllUpperCase\
    \ && keys.forall(_.isInstanceOf[String])", "        val keys = dict.keys\n   \
    \     val values = dict.values.toList\n        val upperCase = keys.map(_.toUpperCase)\n\
    \        val lowerCase = keys.map(_.toLowerCase)\n        val allUpper = upperCase.forall(_.equals(values))\n\
    \        val allLower = lowerCase.forall(_.equals(values))\n        allUpper &&\
    \ allLower", "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val all = lower ++ upper\n\
    \        all forall (keys.contains)", "        if(dict.isEmpty) false\n      \
    \  val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        lowerCaseKeys.forall(key => dict.get(key).toString.toLowerCase.contains(\"\
    a\"))\n        upperCaseKeys.forall(key => dict.get(key).toString.toUpperCase.contains(\"\
    A\"))", "        val keys = dict.keys\n        if (keys.length == 0) return false\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val isLowerOrUpper = lower ++ upper\n        val isAllLowerOrUpper =\
    \ isLowerOrUpper.forall(_.equals(keys.toSet))\n        val isAllUpper = isLowerOrUpper.forall(_.equals(upper.toSet))\n\
    \        isAllLowerOrUpper && isAllUpper", "        val keys = dict.keySet\n \
    \       if (keys.isEmpty) false\n        else keys.forall(key => key.isLowerCase\
    \ || key.isUpperCase )", "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val all = lower ++ upper\n\
    \        val notAll = keys.filter(!all.contains(_))\n        notAll.isEmpty",
  "        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        lowerCaseKeys.isEmpty  ||  upperCaseKeys.isEmpty", "        val\
    \ keys = dict.keys\n        if (keys.length == 0) return false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(_.toLowerCase)\n        val upperCaseDict\
    \ = dict.filterKeys(_.toUpperCase)\n        lowerCaseKeys.forall(lowerCaseDict.contains)\
    \ &&\n        upperCaseKeys.forall(upperCaseDict.contains)", "        val keys\
    \ = dict.keys\n        val keys = keys.toSet\n        val keys = keys.toSeq\n\
    \        val keys = keys.toList\n        val keys = keys.toArray\n        val\
    \ keys = keys.toIterator\n        val keys = keys.toSeq\n        val keys = keys.toList\n\
    \        val keys = keys.toArray\n        val keys = keys.toIterator\n       \
    \ val keys = keys.toSeq\n        val keys = keys.toList\n        val keys = keys.toArray\n\
    \        val keys = keys.toIterator\n        val keys = keys.toSeq\n        val\
    \ keys = keys.toList\n        val keys = keys.toArray\n        val keys = keys.toIterator\n\
    \        val keys = keys.toSeq\n        val keys = keys.toList\n        val keys\
    \ = keys.toArray\n        val keys = keys.toIterator\n        val keys = keys.toSeq\n\
    \        val keys = keys.toList\n        val keys = keys.toArray\n        val\
    \ keys = keys.toIterator\n        val keys = keys.toSeq\n        val keys = keys.toList\n\
    \        val keys = keys.toArray\n        val keys = keys.toIterator\n       \
    \ val keys = keys.toSeq\n        val keys = keys.toList\n        val keys = keys.toArray\n\
    \        val keys = keys.toIterator\n        val keys = keys.toSeq\n        val\
    \ keys = keys.toList\n        val keys = keys.toArray\n        val keys = keys.toIterator\n\
    \        val keys = keys.toSeq\n        val keys = keys.toList\n        val keys\
    \ = keys.toArray\n        val keys = keys.toIterator\n        val keys = keys.toSeq\n\
    \        val keys = keys.toList\n        val keys = keys.toArray\n        val\
    \ keys = keys.toIterator\n        val keys = keys.toSeq\n        val keys = keys.toList\n\
    \        val keys = keys.toArray\n        val keys = keys.toIterator\n       \
    \ val keys = keys.toSeq\n        val keys = keys.toList\n        val keys = keys.toArray\n\
    \        val keys = keys.toIterator\n        val keys = keys.toSeq\n        val\
    \ keys = keys.toList\n        val keys = keys.toArray\n        val keys = keys.toIterator\n\
    \        val keys = keys.toSeq\n        val keys = keys.toList\n        val keys\
    \ = keys.toArray\n        val keys = keys.toIterator\n        val keys = keys.toSeq\n\
    \        val keys = keys.toList\n        val keys = keys.toArray\n        val\
    \ keys = keys.toIterator\n        val keys = keys.toSeq\n        val keys = keys.toList\n\
    \        val keys = keys.toArray\n        val keys = keys.toIterator\n       \
    \ val keys = keys.toSeq\n        val keys = keys.toList\n        val keys = keys.toArray\n\
    \        val ", "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val allLowerCaseKeys\
    \ = lowerCaseKeys.forall(_.equals(_))\n        val allUpperCaseKeys = upperCaseKeys.forall(_.equals(_))\n\
    \        allLowerCaseKeys && allUpperCaseKeys", "        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val all = lower ++ upper\n        val isAll = all.forall(x => keys.contains(x))\n\
    \        isAll || dict.isEmpty", "        if(dict.isEmpty) false\n        val\
    \ keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val low = lower.toSet\n        val up = upper.toSet\n\
    \        if(low.size == up.size) true\n        else false", "        val keys\
    \ = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        val isStringInLowerCase = lowerCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val isStringInUpperCase = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val isStringInBothCases = isStringInLowerCase && isStringInUpperCase\n\
    \        isStringInBothCases", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val isLowerCase = lowerCaseKeys.forall(_.equals(_))\n        val isUpperCase\
    \ = upperCaseKeys.forall(_.equals(_))\n        isLowerCase && isUpperCase", " \
    \       val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase.nonEmpty)\n        val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n\
    \        val lowerCaseDictKeys = lowerCaseDict.keys\n        val upperCaseDictKeys\
    \ = upperCaseDict.keys\n        val result = lowerCaseKeys.forall(lowerCaseDictKeys.contains)\
    \ &&\n            upperCaseKeys.forall(upperCaseDictKeys.contains)\n        result",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val result = lower == upper\
    \ || lower == upper.flatten\n        result && dict.isEmpty", "        val keys\
    \ = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val both = keys.map(key => (key.toLowerCase,\
    \ key.toUpperCase))\n        val result = lower == upper || both == keys\n   \
    \     result", "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val all = lower ++ upper\n\
    \        val isAll = all.forall(key => dict.contains(key))\n        isAll", " \
    \       val keys = dict.keys\n        val values = dict.values\n        if(keys.length\
    \ == 0){\n            return false\n        }\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val lowerSet = lower.toSet\n\
    \        val upperSet = upper.toSet\n        if(lowerSet.size == keys.length &&\
    \ upperSet.size == keys.length){\n            val lowerSetSet = lowerSet.toSet\n\
    \            val upperSetSet = upperSet.toSet\n            if(lowerSetSet.size\
    \ == upperSetSet.size){\n                val intersection = lowerSetSet.intersect(upperSetSet)\n\
    \                if(intersection.isEmpty){\n                    return true\n\
    \                }\n            }\n        }\n        return false", "       \
    \ val keys = dict.keys\n        if (keys.length == 0) return false\n        val\
    \ lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val all = lower ++ upper\n\
    \        val notAll = keys.filter(!all.contains(_))\n        notAll.isEmpty",
  "        val keys = dict.keys\n        if (keys.length == 0) return false\n    \
    \    val keys = keys.toSet\n        if (keys.size == 0) return false\n       \
    \ val keys = keys.toSeq\n        if (keys.size == 0) return false\n        val\
    \ keys = keys.toSeq\n        if (keys.size == 0) return false\n        val keys\
    \ = keys.toSeq\n        if (keys.size == 0) return false\n        val keys = keys.toSeq\n\
    \        if (keys.size == 0) return false\n        val keys = keys.toSeq\n   \
    \     if (keys.size == 0) return false\n        val keys = keys.toSeq\n      \
    \  if (keys.size == 0) return false\n        val keys = keys.toSeq\n        if\
    \ (keys.size == 0) return false\n        val keys = keys.toSeq\n        if (keys.size\
    \ == 0) return false\n        val keys = keys.toSeq\n        if (keys.size ==\
    \ 0) return false\n        val keys = keys.toSeq\n        if (keys.size == 0)\
    \ return false\n        val keys = keys.toSeq\n        if (keys.size == 0) return\
    \ false\n        val keys = keys.toSeq\n        if (keys.size == 0) return false\n\
    \        val keys = keys.toSeq\n        if (keys.size == 0) return false\n   \
    \     val keys = keys.toSeq\n        if (keys.size == 0) return false\n      \
    \  val keys = keys.toSeq\n        if (keys.size == 0) return false\n        val\
    \ keys = keys.toSeq\n        if (keys.size == 0) return false\n        val keys\
    \ = keys.toSeq\n        if (keys.size == 0) return false\n        val keys = keys.toSeq\n\
    \        if (keys.size == 0) return false\n        val keys = keys.toSeq\n   \
    \     if (keys.size == 0) return false\n        val keys = keys.toSeq\n      \
    \  if (keys.size == 0) return false\n        val keys = keys.toSeq\n        if\
    \ (keys.size == 0) return false\n        val keys = keys.toSeq\n        if (keys.size\
    \ == 0) return false\n        val keys = keys.toSeq\n        if (keys.size ==\
    \ 0) return false\n        val keys = keys.toSeq\n        if (keys.size == 0)\
    \ return false\n        val keys = keys.toSeq\n        if (keys.size == 0) return\
    \ false\n        val keys = keys.toSeq\n        if (keys.size == 0) return false\n\
    \        val keys = keys.toSeq\n        if (keys.size == 0) return false\n   \
    \     val keys = keys.toSeq\n        if (keys.size == 0) return false\n      \
    \  val keys = keys.toSeq\n        if (keys.size == 0) return false\n        val\
    \ keys = keys.toSeq\n        if (keys.size == 0) return false\n        val keys\
    \ = keys.toSeq\n        if (keys.size == 0) return false\n        val keys = keys.toSeq\n\
    \        if (keys.size == 0) return false\n        val keys = keys.toSeq\n   \
    \     if (keys.size == 0) return false\n        val keys = keys.toSeq\n      \
    \  if (keys.size == 0) return false\n        val keys = keys.toSeq\n        if\
    \ (", "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = lowerCaseKeys.toSet\n        val upperCaseDict = upperCaseKeys.toSet\n   \
    \     val isAllLowerCase = lowerCaseDict.size == keys.size\n        val isAllUpperCase\
    \ = upperCaseDict.size == keys.size\n        val isAllKeysString = keys.forall(_.isInstanceOf[String])\n\
    \        val isAllKeysStringOrAllLowerCase = keys.forall(_.isInstanceOf[String]\
    \ || lowerCaseDict.contains(_))\n        val isAllKeysStringOrAllUpperCase = keys.forall(_.isInstanceOf[String]\
    \ || upperCaseDict.contains(_))\n        isAllKeysString && isAllKeysStringOrAllLowerCase\
    \ && isAllKeysStringOrAllUpperCase && isAllLowerCase && isAllUpperCase && isAllKeysStringOrAllLowerCase\
    \ && isAllKeysStringOrAllUpperCase && isAllLowerCase && isAllUpperCase && isAllKeysStringOrAllLowerCase\
    \ && isAllKeysStringOrAllUpperCase && isAllLowerCase && isAllUpperCase && isAllKeysStringOrAllLowerCase\
    \ && isAllKeysStringOrAllUpperCase && isAllLowerCase && isAllUpperCase && isAllKeysStringOrAllLowerCase\
    \ && isAllKeysStringOrAllUpperCase && isAllLowerCase && isAllUpperCase && isAllKeysStringOrAllLowerCase\
    \ && isAllKeysStringOrAllUpperCase && isAllLowerCase && isAllUpperCase && isAllKeysStringOrAllLowerCase\
    \ && isAllKeysStringOrAllUpperCase && isAllLowerCase && isAllUpperCase && isAllKeysStringOrAllLowerCase\
    \ && isAllKeysStringOrAllUpperCase && isAllLowerCase && isAllUpperCase && isAllKeysStringOrAllLowerCase\
    \ && isAllKeysStringOrAllUpperCase && isAllLowerCase && isAllUpperCase && isAllKeysStringOrAllLowerCase\
    \ && isAllKeysStringOrAllUpperCase && isAllLowerCase && isAllUpperCase && isAllKeysStringOrAllLowerCase\
    \ && isAllKeysStringOrAllUpperCase && isAllLowerCase && isAllUpperCase && isAllKeysStringOrAllLowerCase\
    \ && isAllKeysStringOrAll", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val isAllLowerCase = lowerCaseKeys.forall(_.equals(_))\n        val isAllUpperCase\
    \ = upperCaseKeys.forall(_.equals(_))\n        isAllLowerCase && isAllUpperCase",
  "        val keys = dict.keySet\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        val lowerCaseKeys = keys.filter(_.isLower)\n        val allKeys = upperCaseKeys\
    \ ++ lowerCaseKeys\n        allKeys.forall(key => dict.get(key).isInstanceOf[String])",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val result = lower == upper\
    \ || lower == upper.flatten\n        result && dict.isEmpty", "        val keys\
    \ = dict.keySet\n        val isStringInLowerCase = keys.forall(_.toLowerCase.contains(\"\
    a\"))\n        val isStringInUpperCase = keys.forall(_.toUpperCase.contains(\"\
    A\"))\n        isStringInLowerCase && isStringInUpperCase", "        val keys\
    \ = dict.keys\n        if(keys.isEmpty) false\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n\
    \        val result = lower == upper || both == keys\n        result", "     \
    \   val keys = dict.keys\n        if (keys.length == 0) return false\n       \
    \ val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(lowerCaseKeys.contains)\n       \
    \ val upperCaseDict = dict.filterKeys(upperCaseKeys.contains)\n        lowerCaseDict.isEmpty\
    \  && upperCaseDict.isEmpty", "        val keys = dict.keys\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val allKeys = upperCaseKeys ++ lowerCaseKeys\n        allKeys.forall(key\
    \ => dict.get(key).isInstanceOf[String])", "        val keys = dict.keySet\n \
    \       val isAllStrings = keys.forall(_.isInstanceOf[String])\n        val isAllUppercase\
    \ = keys.forall(_.toUpperCase.isInstanceOf[String])\n        isAllStrings && isAllUppercase",
  "        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        val allKeys = lowerCaseKeys\
    \ ++ upperCaseKeys\n        allKeys.size == keys.size", "        val keys = dict.keys\n\
    \        val keys = keys.toSet\n        val keys = keys.toList\n        val keys\
    \ = keys.toSeq\n        val keys = keys.toIterator\n        val keys = keys.toList\n\
    \        val keys = keys.toSeq\n        val keys = keys.toIterator\n        val\
    \ keys = keys.toList\n        val keys = keys.toSeq\n        val keys = keys.toIterator\n\
    \        val keys = keys.toList\n        val keys = keys.toSeq\n        val keys\
    \ = keys.toIterator\n        val keys = keys.toList\n        val keys = keys.toSeq\n\
    \        val keys = keys.toIterator\n        val keys = keys.toList\n        val\
    \ keys = keys.toSeq\n        val keys = keys.toIterator\n        val keys = keys.toList\n\
    \        val keys = keys.toSeq\n        val keys = keys.toIterator\n        val\
    \ keys = keys.toList\n        val keys = keys.toSeq\n        val keys = keys.toIterator\n\
    \        val keys = keys.toList\n        val keys = keys.toSeq\n        val keys\
    \ = keys.toIterator\n        val keys = keys.toList\n        val keys = keys.toSeq\n\
    \        val keys = keys.toIterator\n        val keys = keys.toList\n        val\
    \ keys = keys.toSeq\n        val keys = keys.toIterator\n        val keys = keys.toList\n\
    \        val keys = keys.toSeq\n        val keys = keys.toIterator\n        val\
    \ keys = keys.toList\n        val keys = keys.toSeq\n        val keys = keys.toIterator\n\
    \        val keys = keys.toList\n        val keys = keys.toSeq\n        val keys\
    \ = keys.toIterator\n        val keys = keys.toList\n        val keys = keys.toSeq\n\
    \        val keys = keys.toIterator\n        val keys = keys.toList\n        val\
    \ keys = keys.toSeq\n        val keys = keys.toIterator\n        val keys = keys.toList\n\
    \        val keys = keys.toSeq\n        val keys = keys.toIterator\n        val\
    \ keys = keys.toList\n        val keys = keys.toSeq\n        val keys = keys.toIterator\n\
    \        val keys = keys.toList\n        val keys = keys.toSeq\n        val keys\
    \ = keys.toIterator\n        val keys = keys.toList\n        val keys = keys.toSeq\n\
    \        val keys = keys.toIterator\n        val keys = keys.toList\n        val\
    \ keys = keys.toSeq\n        val keys = keys.toIterator\n        val keys = keys.toList\n\
    \        val keys = keys.toSeq\n        val keys = keys.toIterator\n        val\
    \ keys = keys.toList\n        val keys = keys.toSeq\n        val keys = keys.toIterator\n\
    \        val keys = keys.toList\n        val keys = keys.toSeq\n        val ",
  "        if(dict.isEmpty) false\n        else (dict.keys.toSet.toList.size == dict.keys.toSet.toList.size)",
  "        val keys = dict.keySet\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toLowerCase)\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toUpperCase)\n        val allKeys = upperCaseKeys ++ lowerCaseKeys\n\
    \        allKeys.forall(key => dict.get(key).isInstanceOf[String])", "       \
    \ val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val\
    \ upper = keys.map(_.toUpperCase)\n        val allLower = lower.forall(_.isInstanceOf[String])\n\
    \        val allUpper = upper.forall(_.isInstanceOf[String])\n        allLower\
    \ && allUpper", "        val keys = dict.keySet\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        val lowerCaseKeys = keys.filter(_.isLower)\n        val isAllUpper =\
    \ upperCaseKeys.size == keys.size\n        val isAllLower = lowerCaseKeys.size\
    \ == keys.size\n        val isAllStrings = lowerCaseKeys.size + upperCaseKeys.size\
    \ == keys.size\n        val isAllStringsOrAllUpper = lowerCaseKeys.size + upperCaseKeys.size\
    \ == keys.size\n        val isAllStringsOrAllLower = lowerCaseKeys.size + upperCaseKeys.size\
    \ == keys.size\n        val isAllStringsOrAllUpperOrAllLower = lowerCaseKeys.size\
    \ + upperCaseKeys.size + lowerCaseKeys.size == keys.size\n        val isAllStringsOrAllUpperOrAllLower\
    \ = lowerCaseKeys.size + upperCaseKeys.size + lowerCaseKeys.size == keys.size\n\
    \        val isAllStringsOrAllUpperOrAllLowerOrAllStrings = lowerCaseKeys.size\
    \ + upperCaseKeys.size + lowerCaseKeys.size + keys.size == keys.size\n       \
    \ val isAllStringsOrAllUpperOrAllLowerOrAllStrings = lowerCaseKeys.size + upperCaseKeys.size\
    \ + lowerCaseKeys.size + keys.size == keys.size\n        val isAllStringsOrAllUpperOrAllLowerOrAllStringsOrAllUpperOrAllLower\
    \ = lowerCaseKeys.size + upperCaseKeys.size + lowerCaseKeys.size + keys.size +\
    \ upperCaseKeys.size + lowerCaseKeys.size == keys.size\n        val isAllStringsOrAllUpperOrAllLowerOrAllStringsOrAllUpperOrAllLowerOrAllStrings\
    \ = lowerCaseKeys.size + upperCaseKeys.size + lowerCaseKeys.size + keys.size +\
    \ upperCaseKeys.size + lowerCaseKeys.size + keys.size == keys.size\n        val\
    \ isAllStringsOrAllUpperOrAllLowerOrAllStringsOrAllUpperOrAllLowerOrAllStringsOrAllUpperOrAllLower\
    \ = lowerCaseKeys.size + upperCaseKeys.size + lowerCaseKeys.size + keys.size +\
    \ upperCaseKeys.size + lowerCaseKeys.size + keys.size + upperCaseKeys.size + lowerCaseKeys.size\
    \ + keys.size == keys.size\n        val isAllStringsOrAllUpperOrAllLowerOrAllStringsOrAllUpperOrAllLowerOrAllStringsOrAllUpperOrAllLowerOrAllStrings\
    \ = lowerCaseKeys.size + upperCaseKeys.size + lowerCaseKeys.size + keys.size +\
    \ upperCaseKeys.size + lowerCaseKeys.size + keys.size + upperCaseKeys.size + lowerCaseKeys.size\
    \ + keys.size + upperCaseKeys.size + lowerCaseKeys.size + keys.size == keys.size\n\
    \        val isAllStringsOrAllUpperOrAllLowerOrAllStringsOrAll", "        val\
    \ keys = dict.keySet\n        if (keys.isEmpty) false\n        else keys.forall(key\
    \ => key.isLowerCase || key.isUpperCase || key.equals(\"\"))", "        val keys\
    \ = dict.keys\n        if(keys.length == 0) return false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val isLowerOrUpper = lower\
    \ ++ upper\n        val isAllLowerOrUpper = isLowerOrUpper.forall(_.isInstanceOf[String])\n\
    \        val isAllLowerOrUpperOrEmpty = isAllLowerOrUpper.forall(_.nonEmpty)\n\
    \        isAllLowerOrUpperOrEmpty", "        val keys = dict.keys\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val isAllUpperCase = upperCaseKeys.forall(_.equals(_))\n        val isAllLowerCase\
    \ = lowerCaseKeys.forall(_.equals(_))\n        isAllUpperCase && isAllLowerCase",
  "        if(dict.isEmpty) false\n        else (dict.keys.toSet.size == dict.keys.toSet.toList.size)",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isLowerCase\
    \ = lowerCaseKeys.forall(_.equals(_))\n        val isUpperCase = upperCaseKeys.forall(_.equals(_))\n\
    \        isLowerCase && isUpperCase", "        val keys = dict.keys\n        val\
    \ isString = (keys: Iterable[String]).forall(_.isInstanceOf[String])\n       \
    \ val isStringUpper = (keys: Iterable[String]).forall(_.isInstanceOf[String] &&\
    \ _.toUpperCase() == _)\n        isString && isStringUpper", "        val keys\
    \ = dict.keySet\n        val keysLower = keys.map(_.toLowerCase)\n        val\
    \ keysUpper = keys.map(_.toUpperCase)\n        val keysAll = keysLower ++ keysUpper\n\
    \        val keysAllLower = keysAll.map(_.toLowerCase)\n        val keysAllUpper\
    \ = keysAll.map(_.toUpperCase)\n        val keysAll = keysLower ++ keysUpper ++\
    \ keysAllLower ++ keysAllUpper\n        val keysAll = keysLower ++ keysUpper ++\
    \ keysAllLower ++ keysAllUpper ++ keysAll\n        keysAll.forall(key => dict.get(key).toString.toLowerCase\
    \ == dict.get(key).toString.toUpperCase)", "        if(dict.isEmpty) false\n \
    \       val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = lowerCaseKeys.toSet\n        val upperCaseDict = upperCaseKeys.toSet\n   \
    \     lowerCaseDict.forall(key => upperCaseDict.contains(key))", "        if(dict.isEmpty)\
    \ false\n        else (dict.keys.toList.map(_.toLowerCase).forall(_.equals(_.toLowerCase))\
    \ || \n              dict.keys.toList.map(_.toUpperCase).forall(_.equals(_.toUpperCase)))",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        lowerCaseKeys.size\
    \ == keys.size && upperCaseKeys.size == keys.size && lowerCaseKeys.forall(_.equals(upperCaseKeys))",
  "        val keys = dict.keys\n        if(keys.length == 0) return false\n     \
    \   val lowerKeys = keys.map(_.toLowerCase)\n        val upperKeys = keys.map(_.toUpperCase)\n\
    \        val lowerDict = lowerKeys.toSet\n        val upperDict = upperKeys.toSet\n\
    \        if(lowerDict.size == upperDict.size) return true\n        if(lowerDict.size\
    \ == 0) return false\n        if(upperDict.size == 0) return false\n        val\
    \ lowerSet = lowerDict.toSet\n        val upperSet = upperDict.toSet\n       \
    \ if(lowerSet.size == upperSet.size) return true\n        if(lowerSet.size ==\
    \ 0) return false\n        if(upperSet.size == 0) return false\n        val lowerSet2\
    \ = lowerSet.toSet\n        val upperSet2 = upperSet.toSet\n        if(lowerSet2.size\
    \ == upperSet2.size) return true\n        if(lowerSet2.size == 0) return false\n\
    \        if(upperSet2.size == 0) return false\n        val lowerSet3 = lowerSet2.toSet\n\
    \        val upperSet3 = upperSet2.toSet\n        if(lowerSet3.size == upperSet3.size)\
    \ return true\n        if(lowerSet3.size == 0) return false\n        if(upperSet3.size\
    \ == 0) return false\n        val lowerSet4 = lowerSet3.toSet\n        val upperSet4\
    \ = upperSet3.toSet\n        if(lowerSet4.size == upperSet4.size) return true\n\
    \        if(lowerSet4.size == 0) return false\n        if(upperSet4.size == 0)\
    \ return false\n        val lowerSet5 = lowerSet4.toSet\n        val upperSet5\
    \ = upperSet4.toSet\n        if(lowerSet5.size == upperSet5.size) return true\n\
    \        if(lowerSet5.size == 0) return false\n        if(upperSet5.size == 0)\
    \ return false\n        val lowerSet6 = lowerSet5.toSet\n        val upperSet6\
    \ = upperSet5.toSet\n        if(lowerSet6.size == upperSet6.size) return true\n\
    \        if(lowerSet6.size == 0) return false\n        if(upperSet6.size == 0)\
    \ return false\n        val lowerSet7 = lowerSet6.toSet\n        val upperSet7\
    \ = upperSet6.toSet\n        if(lowerSet7.size == upperSet7.size) return true\n\
    \        if(lowerSet7.size == 0) return false\n        if(upperSet7.size == 0)\
    \ return false\n        val lowerSet8 = lowerSet7.toSet\n        val upperSet8\
    \ = upperSet7.toSet\n        if(lowerSet8.size == upperSet8.size) return true\n\
    \        if(lowerSet8.size == 0) return false\n        if(upperSet8.size == 0)\
    \ return false\n        val lowerSet9 = lowerSet8.toSet\n        val upperSet9\
    \ = upperSet8.toSet", "        val keys = dict.keySet\n        val upperCaseKeys\
    \ = keys.filter(_.isUpper)\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeysSet = upperCaseKeys.toSet\n        val lowerCaseKeysSet\
    \ = lowerCaseKeys.toSet\n        val keysSet = keys.toSet\n        if(keysSet.isEmpty)\
    \ false else (upperCaseKeysSet.size == lowerCaseKeysSet.size && upperCaseKeysSet.size\
    \ == keysSet.size)", "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n\
    \        val isLowerOrUpper = both.forall(_.contains(_))\n        val isAllLowerOrUpper\
    \ = both.forall(_.contains(_))\n        isLowerOrUpper && isAllLowerOrUpper",
  "        val keys = dict.keySet\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        val lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeysSet\
    \ = upperCaseKeys.toSet\n        val lowerCaseKeysSet = lowerCaseKeys.toSet\n\
    \        if(upperCaseKeysSet.isEmpty && lowerCaseKeysSet.isEmpty)\n          \
    \  true\n        else if(upperCaseKeysSet.isEmpty && lowerCaseKeysSet.isEmpty)\n\
    \            false\n        else if(upperCaseKeysSet.isEmpty && lowerCaseKeysSet.isEmpty)\n\
    \            false\n        else if(upperCaseKeysSet.size == lowerCaseKeysSet.size)\n\
    \            true\n        else\n            false", "        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val isAllLowerOrAllUpper = lower.forall(_.isEmpty || upper.forall(_.isEmpty))\n\
    \        val isAllLowerOrAllUpperOrEmpty = lower.forall(_.isEmpty || upper.forall(_.isEmpty)\
    \ || keys.forall(_.isEmpty))\n        isAllLowerOrAllUpper || isAllLowerOrAllUpperOrEmpty",
  "        val keys = dict.keys\n        val upper = keys.map(_.toUpperCase)\n   \
    \     val lower = keys.map(_.toLowerCase)\n        val result = upper.forall(x\
    \ => lower.contains(x))\n        !result", "        val keys = dict.keys\n   \
    \     val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys =\
    \ keys.map(_.toUpperCase)\n        val allLowerCaseKeys = lowerCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val allUpperCaseKeys = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val allKeys = allLowerCaseKeys || allUpperCaseKeys\n        allKeys",
  "        val keys = dict.keys\n        if(keys.length == 0)\n            return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = lowerCaseKeys.toMap\n\
    \        val upperCaseDict = upperCaseKeys.toMap\n        val keys = lowerCaseKeys.union(upperCaseKeys)\n\
    \        val result = keys.forall(key => lowerCaseDict.get(key) != null &&\n \
    \           upperCaseDict.get(key) != null)\n        result", "        val keys\
    \ = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict = lowerCaseKeys.toSet\n\
    \        val upperCaseDict = upperCaseKeys.toSet\n        lowerCaseDict.isEmpty\
    \ || upperCaseDict.isEmpty || lowerCaseDict.subsetOf(upperCaseDict)", "      \
    \  val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toLowerCase\
    \ == _)\n        val upperCaseKeys = keys.filter(_.toUpperCase == _)\n       \
    \ lowerCaseKeys.size == keys.size && upperCaseKeys.size == keys.size", "     \
    \   val keys = dict.keys\n        val values = dict.values\n        if (keys.length\
    \ == 0) return false\n        if (keys.length == 1) return keys.get(0).toLowerCase\
    \ == keys.get(0)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n      \
    \  val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseValues =\
    \ values.map(_.toUpperCase)\n        val lowerCaseValues = values.map(_.toLowerCase)\n\
    \        val keysMatch = upperCaseKeys.zip(upperCaseValues).forall(x => lowerCaseKeys.contains(x._1)\
    \ && lowerCaseValues.contains(x._2))\n        val valuesMatch = upperCaseValues.zip(upperCaseKeys).forall(x\
    \ => lowerCaseKeys.contains(x._1) && lowerCaseValues.contains(x._2))\n       \
    \ return keysMatch && valuesMatch", "        val keys = dict.keySet\n        val\
    \ lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        lowerCaseKeys.size == keys.size && upperCaseKeys.size == keys.size &&\
    \ lowerCaseKeys.toSet.size == upperCaseKeys.toSet.size", "        val keys = dict.keys\n\
    \        if(keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase)\n        val upperCaseDict = dict.filterKeys(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(lowerCaseDict.contains) &&\n        upperCaseKeys.forall(upperCaseDict.contains)",
  "        val keys = dict.keySet\n        val lower = keys.map(_.toLowerCase)\n \
    \       val upper = keys.map(_.toUpperCase)\n        val both = keys.map(key =>\
    \ (key.toLowerCase, key.toUpperCase))\n        val all = lower ++ upper ++ both\n\
    \        val notAll = keys.map(key => key.toUpperCase)\n        val notAll = keys.map(key\
    \ => key.toLowerCase)\n        val notAll = keys.map(key => key.toUpperCase)\n\
    \        val notAll = keys.map(key => key.toLowerCase)\n        val notAll = keys.map(key\
    \ => key.toUpperCase)\n        val notAll = keys.map(key => key.toLowerCase)\n\
    \        val notAll = keys.map(key => key.toUpperCase)\n        val notAll = keys.map(key\
    \ => key.toLowerCase)\n        val notAll = keys.map(key => key.toUpperCase)\n\
    \        val notAll = keys.map(key => key.toLowerCase)\n        val notAll = keys.map(key\
    \ => key.toUpperCase)\n        val notAll = keys.map(key => key.toLowerCase)\n\
    \        val notAll = keys.map(key => key.toUpperCase)\n        val notAll = keys.map(key\
    \ => key.toLowerCase)\n        val notAll = keys.map(key => key.toUpperCase)\n\
    \        val notAll = keys.map(key => key.toLowerCase)\n        val notAll = keys.map(key\
    \ => key.toUpperCase)\n        val notAll = keys.map(key => key.toLowerCase)\n\
    \        val notAll = keys.map(key => key.toUpperCase)\n        val notAll = keys.map(key\
    \ => key.toLowerCase)\n        val notAll = keys.map(key => key.toUpperCase)\n\
    \        val notAll = keys.map(key => key.toLowerCase)\n        val notAll = keys.map(key\
    \ => key.toUpperCase)\n        val notAll = keys.map(key => key.toLowerCase)\n\
    \        val notAll = keys.map(key => key.toUpperCase)\n        val notAll = keys.map(key\
    \ => key.toLowerCase)\n        val notAll = keys.map(key => key.toUpperCase)\n\
    \        val notAll = keys.map(key => key.toLowerCase)\n        val notAll = keys.map(key\
    \ => key.toUpperCase)\n        val notAll = keys.map(key => key.toLowerCase)\n\
    \        val notAll = keys.map(key => key.toUpperCase)\n        val notAll = keys.map(key\
    \ => key.toLowerCase)\n        val notAll = keys.map(key => key.toUpperCase)\n\
    \        val notAll = keys.map(key => key.toLowerCase)\n        val notAll = keys.map(key\
    \ => key.toUpperCase)\n        val notAll = ", "        val keys = dict.keySet\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        val lowerCaseKeys\
    \ = keys.filter(_.isLower)\n        val allKeys = upperCaseKeys ++ lowerCaseKeys\n\
    \        allKeys.forall(key => dict.get(key).isInstanceOf[String])", "       \
    \ val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isStringInLowerCase\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val isStringInUpperCase\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        val isStringInBothCases\
    \ = isStringInLowerCase && isStringInUpperCase\n        val isStringInBothCasesOrEmpty\
    \ = keys.forall(_.isInstanceOf[String]) || keys.isEmpty\n        isStringInBothCasesOrEmpty\
    \ && isStringInBothCases", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = lowerCaseKeys.toSet\n        val upperCaseDict =\
    \ upperCaseKeys.toSet\n        val allKeys = lowerCaseDict.union(upperCaseDict)\n\
    \        val allKeysSet = allKeys.toSet\n        allKeysSet.size == keys.length",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val both = keys.map(key =>\
    \ key -> dict(key))\n        val both_lower = keys.map(key => key -> lower(key))\n\
    \        val both_upper = keys.map(key => key -> upper(key))\n        val both_both\
    \ = keys.map(key => key -> both(key))\n        val both_lower = keys.map(key =>\
    \ key -> both_lower(key))\n        val both_upper = keys.map(key => key -> both_upper(key))\n\
    \        val both_both = keys.map(key => key -> both_both(key))\n        val lower\
    \ = keys.map(key => key -> lower(key))\n        val upper = keys.map(key => key\
    \ -> upper(key))\n        val both = keys.map(key => key -> both(key))\n     \
    \   val both_lower = keys.map(key => key -> both_lower(key))\n        val both_upper\
    \ = keys.map(key => key -> both_upper(key))\n        val both_both = keys.map(key\
    \ => key -> both_both(key))\n        val lower = keys.map(key => key -> lower(key))\n\
    \        val upper = keys.map(key => key -> upper(key))\n        val both = keys.map(key\
    \ => key -> both(key))\n        val both_lower = keys.map(key => key -> both_lower(key))\n\
    \        val both_upper = keys.map(key => key -> both_upper(key))\n        val\
    \ both_both = keys.map(key => key -> both_both(key))\n        val lower = keys.map(key\
    \ => key -> lower(key))\n        val upper = keys.map(key => key -> upper(key))\n\
    \        val both = keys.map(key => key -> both(key))\n        val both_lower\
    \ = keys.map(key => key -> both_lower(key))\n        val both_upper = keys.map(key\
    \ => key -> both_upper(key))\n        val both_both = keys.map(key => key -> both_both(key))\n\
    \        val lower = keys.map(key => key -> lower(key))\n        val upper = keys.map(key\
    \ => key -> upper(key))\n        val both = keys.map(key => key -> both(key))\n\
    \        val both_lower = keys.map(key => key -> both_lower(key))\n        val\
    \ both_upper = keys.map(key => key -> both_upper(key))\n        val both_both\
    \ = keys.map(key => key -> both", "        val keys = dict.keys\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val allLowerCase = keys.forall(_.toLowerCase.contains(\"a\"))\n     \
    \   val allUpperCase = keys.forall(_.toUpperCase.contains(\"A\"))\n        val\
    \ allKeysAreStrings = keys.forall(_.isInstanceOf[String])\n        val allKeysAreStringsOrAllUpperCase\
    \ = keys.forall(_.isInstanceOf[String] || allUpperCase)\n        val allKeysAreStringsOrAllLowerCase\
    \ = keys.forall(_.isInstanceOf[String] || allLowerCase)\n        val allKeysAreStringsOrAllKeysAreStrings\
    \ = keys.forall(_.isInstanceOf[String] || allKeysAreStrings)\n        val allKeysAreStringsOrAllKeysAreStringsOrAllUpperCase\
    \ = keys.forall(_.isInstanceOf[String] || allKeysAreStrings || allUpperCase)\n\
    \        val allKeysAreStringsOrAllKeysAreStringsOrAllLowerCase = keys.forall(_.isInstanceOf[String]\
    \ || allKeysAreStrings || allLowerCase)\n        val allKeysAreStringsOrAllKeysAreStringsOrAllKeysAreStrings\
    \ = keys.forall(_.isInstanceOf[String] || allKeysAreStrings || allKeysAreStrings)\n\
    \        val allKeysAreStringsOrAllKeysAreStringsOrAllKeysAreStringsOrAllUpperCase\
    \ = keys.forall(_.isInstanceOf[String] || allKeysAreStrings || allKeysAreStrings\
    \ || allUpperCase)\n        val allKeysAreStringsOrAllKeysAreStringsOrAllKeysAreStringsOrAllLowerCase\
    \ = keys.forall(_.isInstanceOf[String] || allKeysAreStrings || allKeysAreStrings\
    \ || allLowerCase)\n        val allKeysAreStringsOrAllKeysAreStringsOrAllKeysAreStringsOrAllKeysAreStrings\
    \ = keys.forall(_.isInstanceOf[String] || allKeysAreStrings || allKeysAreStrings\
    \ || allKeysAreStrings)\n        val allKeysAreStringsOrAllKeysAreStringsOrAllKeysAreStringsOrAllKeysAreStringsOrAllUpperCase\
    \ = keys.forall(_.isInstanceOf[String] || allKey", "        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val all = lower ++ upper\n        val result = all forall { key =>\n\
    \            (lower contains key) || (upper contains key)\n        }\n       \
    \ result", "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isLowerCase\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val isUpperCase = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        isLowerCase && isUpperCase", "        val keys = dict.keys\n        val\
    \ lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val result = lower == upper || lower == upper.flatten\n        result\
    \ && dict.isEmpty", "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val both = keys.map(key\
    \ => key -> dict(key))\n        val both_lower = keys.map(key => key -> lower(key))\n\
    \        val both_upper = keys.map(key => key -> upper(key))\n        val both_both\
    \ = keys.map(key => key -> both(key))\n        val both_lower = keys.map(key =>\
    \ key -> lower(key))\n        val both_upper = keys.map(key => key -> upper(key))\n\
    \        val both_both = keys.map(key => key -> both(key))\n        val lower\
    \ = keys.map(key => key -> lower(key))\n        val upper = keys.map(key => key\
    \ -> upper(key))\n        val both = keys.map(key => key -> both(key))\n     \
    \   val both_lower = keys.map(key => key -> lower(key))\n        val both_upper\
    \ = keys.map(key => key -> upper(key))\n        val both_both = keys.map(key =>\
    \ key -> both(key))\n        val lower = keys.map(key => key -> lower(key))\n\
    \        val upper = keys.map(key => key -> upper(key))\n        val both = keys.map(key\
    \ => key -> both(key))\n        val both_lower = keys.map(key => key -> lower(key))\n\
    \        val both_upper = keys.map(key => key -> upper(key))\n        val both_both\
    \ = keys.map(key => key -> both(key))\n        val lower = keys.map(key => key\
    \ -> lower(key))\n        val upper = keys.map(key => key -> upper(key))\n   \
    \     val both = keys.map(key => key -> both(key))\n        val both_lower = keys.map(key\
    \ => key -> lower(key))\n        val both_upper = keys.map(key => key -> upper(key))\n\
    \        val both_both = keys.map(key => key -> both(key))\n        val lower\
    \ = keys.map(key => key -> lower(key))\n        val upper = keys.map(key => key\
    \ -> upper(key))\n        val both = keys.map(key => key -> both(key))\n     \
    \   val both_lower = keys.map(key => key -> lower(key))\n        val both_upper\
    \ = keys.map(key => key -> upper(key))\n        val both_both = keys.map(key =>\
    \ key -> both(key))\n        val lower = keys.map(key => key -> lower(key))\n\
    \        val upper = keys.map(key => key -> upper(key", "        val keys = dict.keys\n\
    \        if (keys.length == 0) return false\n        val lowerKeys = keys.map(_.toLowerCase)\n\
    \        val upperKeys = keys.map(_.toUpperCase)\n        val lowerDict = lowerKeys.toSet\n\
    \        val upperDict = upperKeys.toSet\n        if (lowerDict.size == upperDict.size)\
    \ return true\n        else return false", "        val keys = dict.keys\n   \
    \     val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys =\
    \ keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filter(_._1.toLowerCase.equals(_._1))\n\
    \        val upperCaseDict = dict.filter(_._1.toUpperCase.equals(_._1))\n    \
    \    lowerCaseKeys.forall(lowerCaseDict.contains) || upperCaseKeys.forall(upperCaseDict.contains)",
  "        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty", "        val\
    \ keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val all = lower ++ upper\n        val count\
    \ = keys.count(_ == \"a\" || _ == \"A\" || _ == \"b\" || _ == \"B\" || _ == \"\
    8\" || _ == \"9\")\n        val empty = keys.count(_ == \"\")\n        val all\
    \ = keys.count(_ == \"a\" || _ == \"A\" || _ == \"b\" || _ == \"B\" || _ == \"\
    8\" || _ == \"9\")\n        val all = keys.count(_ == \"a\" || _ == \"A\" || _\
    \ == \"b\" || _ == \"B\" || _ == \"8\" || _ == \"9\")\n        val all = keys.count(_\
    \ == \"a\" || _ == \"A\" || _ == \"b\" || _ == \"B\" || _ == \"8\" || _ == \"\
    9\")\n        val all = keys.count(_ == \"a\" || _ == \"A\" || _ == \"b\" || _\
    \ == \"B\" || _ == \"8\" || _ == \"9\")\n        val all = keys.count(_ == \"\
    a\" || _ == \"A\" || _ == \"b\" || _ == \"B\" || _ == \"8\" || _ == \"9\")\n \
    \       val all = keys.count(_ == \"a\" || _ == \"A\" || _ == \"b\" || _ == \"\
    B\" || _ == \"8\" || _ == \"9\")\n        val all = keys.count(_ == \"a\" || _\
    \ == \"A\" || _ == \"b\" || _ == \"B\" || _ == \"8\" || _ == \"9\")\n        val\
    \ all = keys.count(_ == \"a\" || _ == \"A\" || _ == \"b\" || _ == \"B\" || _ ==\
    \ \"8\" || _ == \"9\")\n        val all = keys.count(_ == \"a\" || _ == \"A\"\
    \ || _ == \"b\" || _ == \"B\" || _ == \"8\" || _ == \"9\")\n        val all =\
    \ keys.count(_ == \"a\" || _ == \"A\" || _ == \"b\" || _ == \"B\" || _ == \"8\"\
    \ || _ == \"9\")\n        val all = keys.count(_ == \"a\" || _ == \"A\" || _ ==\
    \ \"b\" || _ == \"B\" || _ == \"8\" || _ == \"9\")\n        val all = keys.count(_\
    \ == \"a\" || _ == \"A\" || _ == \"b\" || _ == \"B\" || _ == \"8\" || _ == \"\
    9\")\n        val all = keys.count(_ == \"a\" || _ == \"A\" || _ == \"b\" || _\
    \ == \"B\" || _ == \"8\" || _ == \"9\")\n        val all = keys.count(_ == \"\
    a\" || _ == \"A\" || _ == \"b\" || _ == \"B\" || _ == \"8\" || _ == \"9\")\n \
    \       val all = keys.count(_ == \"a\" || _ == \"A\" || _ == \"b\" || _", " \
    \       val keys = dict.keySet\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val both = keys.map(key\
    \ => key -> dict(key))\n        val bothLower = both.filter(pair => pair._1.toLowerCase.equals(pair._2))\n\
    \        val bothUpper = both.filter(pair => pair._1.toUpperCase.equals(pair._2))\n\
    \        val bothEqual = both.filter(pair => pair._1 == pair._2)\n        val\
    \ bothNotEqual = both.filter(pair => !pair._1 == pair._2)\n        val bothEqualLower\
    \ = bothEqual.filter(pair => pair._1.toLowerCase.equals(pair._2))\n        val\
    \ bothEqualUpper = bothEqual.filter(pair => pair._1.toUpperCase.equals(pair._2))\n\
    \        val bothEqualEqual = bothEqual.filter(pair => pair._1 == pair._2)\n \
    \       val bothEqualNotEqual = bothEqual.filter(pair => !pair._1 == pair._2)\n\
    \        val bothNotEqualLower = bothNotEqual.filter(pair => pair._1.toLowerCase.equals(pair._2))\n\
    \        val bothNotEqualUpper = bothNotEqual.filter(pair => pair._1.toUpperCase.equals(pair._2))\n\
    \        val bothNotEqualEqual = bothNotEqual.filter(pair => pair._1 == pair._2)\n\
    \        val bothNotEqualNotEqual = bothNotEqual.filter(pair => !pair._1 == pair._2)\n\
    \        val bothEqualLower = bothEqualLower.filter(pair => pair._1.toLowerCase.equals(pair._2))\n\
    \        val bothEqualUpper = bothEqualUpper.filter(pair => pair._1.toUpperCase.equals(pair._2))\n\
    \        val bothEqualEqual = bothEqualEqual.filter(pair => pair._1 == pair._2)\n\
    \        val bothEqualNotEqual = bothEqualNotEqual.filter(pair => !pair._1 ==\
    \ pair._2)\n        val bothNotEqualLower = bothNotEqualLower.filter(pair => pair._1.toLowerCase.equals(pair._2))\n\
    \        val bothNotEqualUpper = bothNotEqualUpper.filter(pair => pair._1.toUpperCase.equals(pair._2))\n\
    \        val bothNotEqualEqual = bothNotEqualEqual.filter(pair => pair._1 == pair._2)\n\
    \        val bothNotEqualNotEqual = bothNotEqualNotEqual.filter(pair => !pair._1\
    \ == pair._2)\n        val bothEqualLower = bothEqualLower.filter(pair => pair._1.toLowerCase.equals(pair._2))\n\
    \        val bothEqual", "        if(dict.isEmpty) false\n        else (dict.keys.toSet.toList.map(_.toLowerCase).toSet\
    \ == dict.keys.toSet.toList.map(_.toUpperCase).toSet)", "        val keys = dict.keys\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString.toLowerCase)\n\
    \        val lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString.toUpperCase)\n\
    \        val isAllUpper = upperCaseKeys.size == keys.size\n        val isAllLower\
    \ = lowerCaseKeys.size == keys.size\n        isAllUpper && isAllLower", "    \
    \    val keys = dict.keySet\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        val lowerCaseKeys = keys.filter(_.isLower)\n        val isAllUpper =\
    \ upperCaseKeys.size == keys.size\n        val isAllLower = lowerCaseKeys.size\
    \ == keys.size\n        val isAllKeysString = keys.forall(_.isInstanceOf[String])\n\
    \        val isAllKeysStringOrUpper = keys.forall(_.isInstanceOf[String] || _.isUpper)\n\
    \        val isAllKeysStringOrLower = keys.forall(_.isInstanceOf[String] || _.isLower)\n\
    \        val isAllKeysStringOrAllUpper = keys.forall(_.isInstanceOf[String] ||\
    \ isAllUpper)\n        val isAllKeysStringOrAllLower = keys.forall(_.isInstanceOf[String]\
    \ || isAllLower)\n        val isAllKeysStringOrAllKeysStringOrAllUpper = keys.forall(_.isInstanceOf[String]\
    \ || isAllKeysString || isAllKeysStringOrUpper || isAllKeysStringOrLower)\n  \
    \      val isAllKeysStringOrAllKeysStringOrAllLower = keys.forall(_.isInstanceOf[String]\
    \ || isAllKeysString || isAllKeysStringOrLower || isAllKeysStringOrAllUpper ||\
    \ isAllKeysStringOrAllLower)\n        val isAllKeysStringOrAllKeysStringOrAllKeysStringOrAllUpper\
    \ = keys.forall(_.isInstanceOf[String] || isAllKeysString || isAllKeysStringOrLower\
    \ || isAllKeysStringOrAllUpper || isAllKeysStringOrAllLower || isAllKeysStringOrAllKeysStringOrAllUpper\
    \ || isAllKeysStringOrAllKeysStringOrAllLower)\n        val isAllKeysStringOrAllKeysStringOrAllKeysStringOrAllLower\
    \ = keys.forall(_.isInstanceOf[String] || isAllKeysString || isAllKeysStringOrLower\
    \ || isAllKeysStringOrAllUpper || isAllKeysStringOrAllLower || isAllKeysStringOrAllKeysStringOrAllUpper\
    \ || isAllKeysStringOrAllKeysStringOrAllLower)\n        val isAllKeysStringOrAllKeysStringOrAllKeysStringOrAllKeysStringOrAllUpper\
    \ = keys.forall(_.isInstanceOf[String] || isAllKeysString || isAllKeys", "   \
    \     val keys = dict.keySet\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        val lowerCaseKeys = keys.filter(_.isLower)\n        val isAllUpper =\
    \ upperCaseKeys.size == keys.size\n        val isAllLower = lowerCaseKeys.size\
    \ == keys.size\n        isAllUpper && isAllLower", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = lowerCaseKeys.toSet\n\
    \        val upperCaseDict = upperCaseKeys.toSet\n        val result = lowerCaseDict.subsetOf(upperCaseDict)\n\
    \        result && keys.forall(_.toString.toLowerCase.equals(_.toString.toUpperCase))",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = lowerCaseKeys.toSet\n        val upperCaseDict = upperCaseKeys.toSet\n   \
    \     lowerCaseDict.isEmpty || upperCaseDict.isEmpty || lowerCaseDict.subsetOf(upperCaseDict)",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val all = lower ++ upper\n\
    \        val notAll = keys.filter(!all.contains(_))\n        !notAll.isEmpty",
  "        val keys = dict.keys\n        if(keys.length == 0) return false\n     \
    \   val lowerKeys = keys.map(_.toLowerCase)\n        val upperKeys = keys.map(_.toUpperCase)\n\
    \        val lowerSet = lowerKeys.toSet\n        val upperSet = upperKeys.toSet\n\
    \        if(lowerSet.size == keys.length && upperSet.size == keys.length)\n  \
    \          true\n        else\n            false", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(_.toLowerCase.nonEmpty)\n\
    \        val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n       \
    \ val lowerCaseDictKeys = lowerCaseDict.keys\n        val upperCaseDictKeys =\
    \ upperCaseDict.keys\n        val lowerCaseDictValues = lowerCaseDict.values\n\
    \        val upperCaseDictValues = upperCaseDict.values\n        val lowerCaseDictKeysSet\
    \ = lowerCaseKeys.toSet\n        val upperCaseDictKeysSet = upperCaseKeys.toSet\n\
    \        val lowerCaseDictValuesSet = lowerCaseValues.toSet\n        val upperCaseDictValuesSet\
    \ = upperCaseValues.toSet\n        val lowerCaseDictKeysSet = lowerCaseKeys.toSet\n\
    \        val upperCaseDictKeysSet = upperCaseKeys.toSet\n        val lowerCaseDictValuesSet\
    \ = lowerCaseValues.toSet\n        val upperCaseDictValuesSet = upperCaseValues.toSet\n\
    \        val lowerCaseDictKeysSet = lowerCaseKeys.toSet\n        val upperCaseDictKeysSet\
    \ = upperCaseKeys.toSet\n        val lowerCaseDictValuesSet = lowerCaseValues.toSet\n\
    \        val upperCaseDictValuesSet = upperCaseValues.toSet\n        val lowerCaseDictKeysSet\
    \ = lowerCaseKeys.toSet\n        val upperCaseDictKeysSet = upperCaseKeys.toSet\n\
    \        val lowerCaseDictValuesSet = lowerCaseValues.toSet\n        val upperCaseDictValuesSet\
    \ = upperCaseValues.toSet\n        val lowerCaseDictKeysSet = lowerCaseKeys.toSet\n\
    \        val upperCaseDictKeysSet = upperCaseKeys.toSet\n        val lowerCaseDictValuesSet\
    \ = lowerCaseValues.toSet\n        val upperCaseDictValuesSet = upperCaseValues.toSet\n\
    \        val lowerCaseDictKeysSet = lowerCaseKeys.toSet\n        val upperCaseDictKeysSet\
    \ = upperCaseKeys.toSet\n        val lowerCaseDictValuesSet = lowerCaseValues.toSet\n\
    \        val upperCaseDictValuesSet = upperCaseValues.toSet\n        val lowerCaseDictKeysSet\
    \ = lowerCaseKeys.toSet\n        val upperCaseDictKeysSet = upperCaseKeys.toSet\n\
    \        val lowerCaseDictValuesSet = lowerCase", "        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val isLower = lower.forall(_.isInstanceOf[String])\n        val isUpper\
    \ = upper.forall(_.isInstanceOf[String])\n        isLower && isUpper", "     \
    \   val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n      \
    \  val upper = keys.map(_.toUpperCase)\n        val both = keys.map(key => (key.toLowerCase,\
    \ key.toUpperCase))\n        val all = lower ++ upper ++ both\n        val result\
    \ = all.forall(key => dict.get(key) != null)\n        result", "        val keys\
    \ = dict.keys\n        val values = dict.values.toList\n        val lowerCaseKeys\
    \ = keys.filter(_.toString.toLowerCase.contains(\"a\"))\n        val upperCaseKeys\
    \ = keys.filter(_.toString.toUpperCase.contains(\"A\"))\n        val lowerCaseValues\
    \ = values.filter(_.toString.toLowerCase.contains(\"a\"))\n        val upperCaseValues\
    \ = values.filter(_.toString.toUpperCase.contains(\"A\"))\n        lowerCaseKeys.isEmpty\
    \  && upperCaseKeys.isEmpty  && lowerCaseValues.isEmpty  && upperCaseValues.isEmpty",
  "        val keys = dict.keys\n        val keys = keys.toSet\n        val keys =\
    \ keys.toSeq\n        val keys = keys.toList\n        val keys = keys.toArray\n\
    \        val keys = keys.toBuffer\n        val keys = keys.toIterator\n      \
    \  val keys = keys.toList\n        val keys = keys.toArray\n        val keys =\
    \ keys.toBuffer\n        val keys = keys.toIterator\n        val keys = keys.toList\n\
    \        val keys = keys.toArray\n        val keys = keys.toBuffer\n        val\
    \ keys = keys.toIterator\n        val keys = keys.toList\n        val keys = keys.toArray\n\
    \        val keys = keys.toBuffer\n        val keys = keys.toIterator\n      \
    \  val keys = keys.toList\n        val keys = keys.toArray\n        val keys =\
    \ keys.toBuffer\n        val keys = keys.toIterator\n        val keys = keys.toList\n\
    \        val keys = keys.toArray\n        val keys = keys.toBuffer\n        val\
    \ keys = keys.toIterator\n        val keys = keys.toList\n        val keys = keys.toArray\n\
    \        val keys = keys.toBuffer\n        val keys = keys.toIterator\n      \
    \  val keys = keys.toList\n        val keys = keys.toArray\n        val keys =\
    \ keys.toBuffer\n        val keys = keys.toIterator\n        val keys = keys.toList\n\
    \        val keys = keys.toArray\n        val keys = keys.toBuffer\n        val\
    \ keys = keys.toIterator\n        val keys = keys.toList\n        val keys = keys.toArray\n\
    \        val keys = keys.toBuffer\n        val keys = keys.toIterator\n      \
    \  val keys = keys.toList\n        val keys = keys.toArray\n        val keys =\
    \ keys.toBuffer\n        val keys = keys.toIterator\n        val keys = keys.toList\n\
    \        val keys = keys.toArray\n        val keys = keys.toBuffer\n        val\
    \ keys = keys.toIterator\n        val keys = keys.toList\n        val keys = keys.toArray\n\
    \        val keys = keys.toBuffer\n        val keys = keys.toIterator\n      \
    \  val keys = keys.toList\n        val keys = keys.toArray\n        val keys =\
    \ keys.toBuffer\n        val keys = keys.toIterator\n        val keys = keys.toList\n\
    \        val keys = keys.toArray\n        val keys = keys.toBuffer\n        val\
    \ keys = keys.toIterator\n        val keys = keys.toList\n        val keys = keys.toArray\n\
    \        val keys = keys.toBuffer\n        val keys = keys.toIterator\n      \
    \  val keys = keys.toList\n        val keys = keys.toArray\n        val keys =\
    \ keys.toBuffer\n        val keys = keys.toIterator\n        val keys = keys.toList\n\
    \        val keys = keys.toArray\n        val ", "        val keys = dict.keys\n\
    \        if(keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        if(lowerCaseKeys.forall(_.equals(upperCaseKeys)))\
    \ return true\n        false", "        val keys = dict.keys\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val keysSet = keys.toSet\n        val upperCaseKeysSet = upperCaseKeys.toSet\n\
    \        val lowerCaseKeysSet = lowerCaseKeys.toSet\n        val keysSetSize =\
    \ keysSet.size\n        val upperCaseKeysSetSize = upperCaseKeysSet.size\n   \
    \     val lowerCaseKeysSetSize = lowerCaseKeysSet.size\n        val keysSetIsEmpty\
    \ = keysSet.isEmpty\n        val upperCaseKeysSetIsEmpty = upperCaseKeysSet.isEmpty\n\
    \        val lowerCaseKeysSetIsEmpty = lowerCaseKeysSet.isEmpty\n        val keysSetIsNotEmpty\
    \ = keysSet.isDefined\n        val upperCaseKeysSetIsNotEmpty = upperCaseKeysSet.isDefined\n\
    \        val lowerCaseKeysSetIsNotEmpty = lowerCaseKeysSet.isDefined\n       \
    \ val keysSetIsSubset = keysSet.isSubset(upperCaseKeysSet)\n        val upperCaseKeysSetIsSubset\
    \ = upperCaseKeysSet.isSubset(lowerCaseKeysSet)\n        val lowerCaseKeysSetIsSubset\
    \ = lowerCaseKeysSet.isSubset(upperCaseKeysSet)\n        val keysSetIsSuperset\
    \ = keysSet.isSuperset(upperCaseKeysSet)\n        val upperCaseKeysSetIsSuperset\
    \ = upperCaseKeysSet.isSuperset(lowerCaseKeysSet)\n        val lowerCaseKeysSetIsSuperset\
    \ = lowerCaseKeysSet.isSuperset(upperCaseKeysSet)\n        val keysSetIsEqual\
    \ = keysSet.isEqual(upperCaseKeysSet)\n        val upperCaseKeysSetIsEqual = upperCaseKeysSet.isEqual(lowerCaseKeysSet)\n\
    \        val lowerCaseKeysSetIsEqual = lowerCaseKeysSet.isEqual(upperCaseKeysSet)\n\
    \        val keysSetIsNotEqual = keysSet.isNotEqual(upperCaseKeysSet)\n      \
    \  val upperCaseKeysSetIsNotEqual = upperCaseKeysSet.isNotEqual(lowerCaseKeysSet)\n\
    \        val lowerCaseKeysSetIsNotEqual = lowerCaseKeysSet.isNotEqual(upperCaseKeysSet)\n\
    \        val keysSetIsSubsetOfUpperCaseKeysSet = keysSet.isSubset(upperCaseKeysSet)\n\
    \        ", "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val all = lower ++ upper\n\
    \        val result = all forall keys.contains(\"string\")\n        result", " \
    \       val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n  \
    \      val upper = keys.map(_.toUpperCase)\n        val allLower = lower.forall(_.isInstanceOf[String])\n\
    \        val allUpper = upper.forall(_.isInstanceOf[String])\n        val allKeys\
    \ = allLower || allUpper\n        allKeys", "        val keys = dict.keys\n  \
    \      val upperCaseKeys = keys.filter(_.isUpper)\n        val lowerCaseKeys =\
    \ keys.filter(_.isLower)\n        val upperCaseKeySet = upperCaseKeys.toSet\n\
    \        val lowerCaseKeySet = lowerCaseKeys.toSet\n        val allKeySet = upperCaseKeySet.union(lowerCaseKeySet)\n\
    \        allKeySet.size == keys.size", "        if(dict.isEmpty) false\n     \
    \   val keys = dict.keys\n        val lowerKeys = keys.map(_.toLowerCase)\n  \
    \      val upperKeys = keys.map(_.toUpperCase)\n        val lowerDict = lowerKeys.toSet\n\
    \        val upperDict = upperKeys.toSet\n        lowerDict.forall(key => upperDict.contains(key))",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val both = keys.map(k => k.toLowerCase.equals(k.toUpperCase))\n\
    \        val bothOrLower = keys.map(k => k.toLowerCase.equals(k) || k.toLowerCase.equals(k.toUpperCase))\n\
    \        val bothOrUpper = keys.map(k => k.toUpperCase.equals(k) || k.toUpperCase.equals(k.toLowerCase))\n\
    \        val bothOrBoth = keys.map(k => k.toLowerCase.equals(k.toUpperCase) ||\
    \ k.toUpperCase.equals(k.toLowerCase))\n        val bothOrNot = keys.map(k =>\
    \ k.toLowerCase.equals(k.toUpperCase) && !k.toUpperCase.equals(k.toLowerCase))\n\
    \        val bothOrNot = keys.map(k => k.toUpperCase.equals(k) && !k.toLowerCase.equals(k.toUpperCase))\n\
    \        val bothOrNot = keys.map(k => k.toLowerCase.equals(k) && !k.toUpperCase.equals(k))\n\
    \        val bothOrNot = keys.map(k => k.toUpperCase.equals(k) && !k.toLowerCase.equals(k))\n\
    \        val bothOrNot = keys.map(k => k.toLowerCase.equals(k) && !k.toUpperCase.equals(k))\n\
    \        val bothOrNot = keys.map(k => k.toUpperCase.equals(k) && !k.toLowerCase.equals(k))\n\
    \        val bothOrNot = keys.map(k => k.toLowerCase.equals(k) && !k.toUpperCase.equals(k))\n\
    \        val bothOrNot = keys.map(k => k.toUpperCase.equals(k) && !k.toLowerCase.equals(k))\n\
    \        val bothOrNot = keys.map(k => k.toLowerCase.equals(k) && !k.toUpperCase.equals(k))\n\
    \        val bothOrNot = keys.map(k => k.toUpperCase.equals(k) && !k.toLowerCase.equals(k))\n\
    \        val bothOrNot = keys.map(k => k.toLowerCase.equals(k) && !k.toUpperCase.equals(k))\n\
    \        val bothOrNot = keys.map(k => k.toUpperCase.equals(k) && !k.toLowerCase.equals(k))\n\
    \        val bothOrNot = keys.map(k => k.toLowerCase.equals(k) && !k.toUpperCase.equals(k))\n\
    \        val bothOrNot = keys.map(k => k.toUpperCase.equals(k) && !k.toLowerCase.equals(k))\n\
    \        val bothOrNot = keys.map(k => k.toLowerCase.equals(k) && !k.toUpperCase.equals(k))\n\
    \        val bothOrNot = keys.map(k => k.toUpperCase.equals(k) && !k.toLowerCase.equals(k))\n\
    \        val bothOrNot = keys.map(k => k.toLowerCase.equals(k) && !k.toUpperCase.equals(k))\n\
    \        val bothOrNot = keys.map(k => k.toUpperCase.equals(k) && !", "      \
    \  val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = lowerCaseKeys.toSet\n        val upperCaseDict = upperCaseKeys.toSet\n   \
    \     lowerCaseDict.size == upperCaseDict.size && lowerCaseDict.size == keys.length",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val result = lower == upper\
    \ || lower == upper.flatten\n        result && dict.isEmpty", "        val keys\
    \ = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val both = keys.zip(lower).zip(upper)\n \
    \       val result = both.forall(x => x._1 == x._2)\n        result", "      \
    \  if(dict.isEmpty) false\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val lower = lower.toSet\n\
    \        val upper = upper.toSet\n        val result = lower == upper || lower\
    \ == upper\n        if(result) true\n        else false", "        val keys =\
    \ dict.keySet\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val all = lower ++ upper\n        all forall\
    \ (k => k != null)\n        all forall (k => lower(k) == upper(k))", "       \
    \ val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val\
    \ upper = keys.map(_.toUpperCase)\n        val allLowerOrAllUpper = lower ++ upper\n\
    \        allLowerOrAllUpper.forall(key => key != dict.get(key))", "        if(dict.isEmpty)\n\
    \            return false\n        val keys = dict.keys\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseDict = dict.filterKeys(_.toUpperCase.equals(_))\n      \
    \  val lowerCaseDict = dict.filterKeys(_.toLowerCase.equals(_))\n        if(upperCaseKeys.toSet.size\
    \ == keys.toSet.size &&\n            lowerCaseKeys.toSet.size == keys.toSet.size\
    \ &&\n            upperCaseDict.size == lowerCaseDict.size &&\n            upperCaseDict.size\
    \ == keys.toSet.size)\n            return true\n        else\n            return\
    \ false", "        val keys = dict.keys\n        val values = dict.values\n  \
    \      val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val lowerSet = keys.toSet\n        val upperSet = keys.toSet\n      \
    \  val lowerSetSize = lowerSet.size\n        val upperSetSize = upperSet.size\n\
    \        val lowerSetContains = lowerSet.contains\n        val upperSetContains\
    \ = upperSet.contains\n        val lowerSetContainsAll = lowerSetContains && lowerSetSize\
    \ == keys.size\n        val upperSetContainsAll = upperSetContains && upperSetSize\
    \ == keys.size\n        val lowerSetContainsAny = lowerSetContains && !lowerSetContainsAll\n\
    \        val upperSetContainsAny = upperSetContains && !upperSetContainsAll\n\
    \        val lowerSetContainsAllAny = lowerSetContainsAll && !lowerSetContainsAny\n\
    \        val upperSetContainsAllAny = upperSetContainsAll && !upperSetContainsAny\n\
    \        val lowerSetContainsAllAny = lowerSetContainsAll && lowerSetContainsAny\n\
    \        val upperSetContainsAllAny = upperSetContainsAll && upperSetContainsAny\n\
    \        val lowerSetContainsAllAll = lowerSetContainsAll && lowerSetContainsAll\n\
    \        val upperSetContainsAllAll = upperSetContainsAll && upperSetContainsAll\n\
    \        val lowerSetContainsAllAllAny = lowerSetContainsAllAll && !lowerSetContainsAllAny\n\
    \        val upperSetContainsAllAllAny = upperSetContainsAllAll && !upperSetContainsAllAny\n\
    \        val lowerSetContainsAllAllAny = lowerSetContainsAllAll && lowerSetContainsAllAny\n\
    \        val upperSetContainsAllAllAny = upperSetContainsAllAll && upperSetContainsAllAny\n\
    \        val lowerSetContainsAllAllAll = lowerSetContainsAllAll && lowerSetContainsAllAll\n\
    \        val upperSetContainsAllAllAll = upperSetContainsAllAll && upperSetContainsAllAll\n\
    \        val lowerSetContainsAllAllAllAny = lowerSetContainsAllAllAll && !lowerSetContainsAllAllAny\n\
    \        val upperSetContainsAllAllAllAny = upperSetContainsAllAllAll && !upperSetContainsAllAllAny\n\
    \        val lowerSetContainsAllAllAllAny = lowerSetContainsAllAllAll && lowerSetContains",
  "        val keys = dict.keys\n        if(keys.length == 0) return false\n     \
    \   val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key).toLowerCase == dict.get(key))\n\
    \        upperCaseKeys.forall(key => dict.get(key).toUpperCase == dict.get(key))",
  "        val keys = dict.keys\n        if (keys.length == 0) return false\n    \
    \    val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys =\
    \ keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key) ==\
    \ key.toLowerCase)\n        upperCaseKeys.forall(key => dict.get(key) == key.toUpperCase)",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n\
    \        val result = both.forall(key => dict.get(key).toLowerCase == dict.get(key).toUpperCase)\n\
    \        result", "        val keys = dict.keySet\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val both = keys.map(_.toLowerCase\
    \ + _.toUpperCase)\n        val all = lower ++ upper ++ both\n        all forall\
    \ keys.toSet", "        val keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val isUpperCase\
    \ = upperCaseKeys.forall(_.contains(_))\n        val isLowerCase = lowerCaseKeys.forall(_.contains(_))\n\
    \        isUpperCase && isLowerCase", "        val keys = dict.keys\n        val\
    \ lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = keys.map(key => key -> dict(key))\n        val low = lower.toSet\n\
    \        val up = upper.toSet\n        val bothSet = both.toSet\n        val lowSet\
    \ = low.toSet\n        val upSet = up.toSet\n        val bothSetSet = bothSet.toSet\n\
    \        val lowSetSet = lowSet.toSet\n        val upSetSet = upSet.toSet\n  \
    \      val lowSetSetSet = lowSetSet.toSet\n        val upSetSetSet = upSetSet.toSet\n\
    \        val lowSetSetSetSet = lowSetSetSet.toSet\n        val upSetSetSetSet\
    \ = upSetSetSet.toSet\n        val lowSetSetSetSetSet = lowSetSetSetSet.toSet\n\
    \        val upSetSetSetSetSet = upSetSetSetSet.toSet\n        val lowSetSetSetSetSetSet\
    \ = lowSetSetSetSetSet.toSet\n        val upSetSetSetSetSetSet = upSetSetSetSetSet.toSet\n\
    \        val lowSetSetSetSetSetSetSet = lowSetSetSetSetSetSet.toSet\n        val\
    \ upSetSetSetSetSetSetSet = upSetSetSetSetSetSet.toSet\n        val lowSetSetSetSetSetSetSetSet\
    \ = lowSetSetSetSetSetSetSet.toSet\n        val upSetSetSetSetSetSetSetSet = upSetSetSetSetSetSetSet.toSet\n\
    \        val lowSetSetSetSetSetSetSetSetSet = lowSetSetSetSetSetSetSetSet.toSet\n\
    \        val upSetSetSetSetSetSetSetSetSet = upSetSetSetSetSetSetSetSet.toSet\n\
    \        val lowSetSetSetSetSetSetSetSetSet = lowSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val upSetSetSetSetSetSetSetSetSet = upSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val lowSetSetSetSetSetSetSetSetSetSet = lowSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val upSetSetSetSetSetSetSetSetSetSet = upSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val lowSetSetSetSetSetSetSetSetSetSet = lowSetSetSetSetSetSetSet", " \
    \       val keys = dict.keySet\n        val isStringInLowerCase = keys.forall(_.toString.toLowerCase.contains(\"\
    a\"))\n        val isStringInUpperCase = keys.forall(_.toString.toUpperCase.contains(\"\
    A\"))\n        isStringInLowerCase && isStringInUpperCase", "        val keys\
    \ = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val both = keys.map(key => (key.toLowerCase,\
    \ key.toUpperCase))\n        val result = lower == upper || both == keys\n   \
    \     result ", "        val keys = dict.keySet\n        val upperCaseKeys = keys.filter(_.toUpperCase\
    \ == _)\n        val lowerCaseKeys = keys.filter(_.toLowerCase == _)\n       \
    \ val allKeys = upperCaseKeys ++ lowerCaseKeys\n        allKeys.forall(key =>\
    \ dict.get(key).isInstanceOf[String])", "        val keys = dict.keySet\n    \
    \    val upperCaseKeys = keys.filter(_.isUpper)\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val allKeys = upperCaseKeys ++ lowerCaseKeys\n        allKeys.forall(key\
    \ => dict.get(key).isInstanceOf[String])", "        val keys = dict.keys\n   \
    \     val values = dict.values\n        if(keys.length == 0) return false\n  \
    \      val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseValues = values.map(_.toLowerCase)\n\
    \        val upperCaseValues = values.map(_.toUpperCase)\n        val keysAreStrings\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val valuesAreStrings\
    \ = lowerCaseValues.forall(_.isInstanceOf[String])\n        val keysAreStringsOrUpperCase\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        val valuesAreStringsOrUpperCase\
    \ = upperCaseValues.forall(_.isInstanceOf[String])\n        val keysAreStringsOrUpperCaseAndValuesAreStrings\
    \ = keysAreStrings || keysAreStringsOrUpperCase\n        val valuesAreStringsOrUpperCaseAndKeysAreStrings\
    \ = valuesAreStrings || valuesAreStringsOrUpperCase\n        val keysAreStringsOrUpperCaseAndValuesAreStringsOrKeysAreStrings\
    \ = keysAreStringsOrUpperCase || valuesAreStringsOrUpperCase\n        val keysAreStringsOrUpperCaseAndValuesAreStringsOrKeysAreStringsOrValuesAreStrings\
    \ = keysAreStringsOrUpperCase || valuesAreStringsOrUpperCase || keysAreStrings\n\
    \        val keysAreStringsOrUpperCaseAndValuesAreStringsOrKeysAreStringsOrValuesAreStringsOrKeysAreStrings\
    \ = keysAreStringsOrUpperCase || valuesAreStringsOrUpperCase || keysAreStringsOrUpperCase\
    \ || valuesAreStrings\n        val keysAreStringsOrUpperCaseAndValuesAreStringsOrKeysAreStringsOrValuesAreStringsOrKeysAreStringsOrValuesAreStrings\
    \ = keysAreStringsOrUpperCase || valuesAreStringsOrUpperCase || keysAreStringsOrUpperCase\
    \ || valuesAreStringsOrUpperCase || keysAreStringsOrUpperCase\n        val keysAreStringsOrUpperCaseAndValuesAreStringsOrKeysAreStringsOrValuesAreStringsOrKeysAreStringsOrValuesAreStringsOrKeysAreStrings\
    \ = keysAreStringsOrUpperCase || valuesAreStringsOrUpperCase || keysAreStringsOrUpperCase\
    \ || valuesAreStringsOrUpperCase || keysAreStringsOrUpperCase || valuesAreStringsOrUpperCase\n\
    \        val keysAreStringsOrUpperCaseAnd", "        val keys = dict.keys\n  \
    \      val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val all = lower ++ upper\n        all forall keys.contains.toLowerCase\
    \ || all forall keys.contains.toUpperCase", "        val keys = dict.keys\n  \
    \      val upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString.toLowerCase)\n\
    \        val lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString.toUpperCase)\n\
    \        val allKeys = upperCaseKeys ++ lowerCaseKeys\n        allKeys.forall(key\
    \ => dict.get(key) != null)", "        val keys = dict.keySet\n        val upperCaseKeys\
    \ = keys.filter(_.isUpper)\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val allKeys = upperCaseKeys ++ lowerCaseKeys\n        allKeys.forall(key\
    \ => dict.get(key).isInstanceOf[String])", "        val keys = dict.keys\n   \
    \     if (keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key).isInstanceOf[String]) &&\n            upperCaseKeys.forall(key\
    \ => dict.get(key).isInstanceOf[String])", "        if(dict.isEmpty) false\n \
    \       val keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeySet\
    \ = upperCaseKeys.toSet\n        val lowerCaseKeySet = lowerCaseKeys.toSet\n \
    \       if(upperCaseKeySet.size == keys.length && lowerCaseKeySet.size == keys.length)\
    \ true\n        else false", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val allLowerCaseKeys = lowerCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val allUpperCaseKeys = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val isAllKeysStrings = allLowerCaseKeys && allUpperCaseKeys\n       \
    \ val isAllKeysStringsAndNotEmpty = keys.forall(_.nonEmpty)\n        val isAllKeysStringsAndNotEmptyAndNotNull\
    \ = keys.forall(_.nonEmpty && _.nonEmpty)\n        val isAllKeysStringsAndNotEmptyAndNotNullAndNotEmpty\
    \ = keys.forall(_.nonEmpty && _.nonEmpty && _.nonEmpty)\n        val isAllKeysStringsAndNotEmptyAndNotNullAndNotEmptyAndNotEmpty\
    \ = keys.forall(_.nonEmpty && _.nonEmpty && _.nonEmpty && _.nonEmpty)\n      \
    \  val isAllKeysStringsAndNotEmptyAndNotNullAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = keys.forall(_.nonEmpty && _.nonEmpty && _.nonEmpty && _.nonEmpty && _.nonEmpty)\n\
    \        val isAllKeysStringsAndNotEmptyAndNotNullAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = keys.forall(_.nonEmpty && _.nonEmpty && _.nonEmpty && _.nonEmpty && _.nonEmpty\
    \ && _.nonEmpty)\n        val isAllKeysStringsAndNotEmptyAndNotNullAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = keys.forall(_.nonEmpty && _.nonEmpty && _.nonEmpty && _.nonEmpty && _.nonEmpty\
    \ && _.nonEmpty && _.nonEmpty)\n        val isAllKeysStringsAndNotEmptyAndNotNullAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = keys.forall(_.nonEmpty && _.nonEmpty && _.nonEmpty && _.nonEmpty && _.nonEmpty\
    \ && _.nonEmpty && _.nonEmpty && _.nonEmpty)\n        val isAllKeysStringsAndNotEmptyAndNotNullAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty\
    \ = keys.forall(_.nonEmpty && _.nonEmpty && _.nonEmpty && _.nonEmpty && _.nonEmpty\
    \ && _.nonEmpty && _.nonEmpty && _.nonEmpty && _.nonEmpty)", "        val keys\
    \ = dict.keys\n        if(keys.length == 0) return false\n        val lower =\
    \ keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n     \
    \   val all = lower ++ upper\n        val count = all.count(_ == keys.head)\n\
    \        if(count == keys.length) return true\n        else return false", " \
    \       val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n  \
    \      val upper = keys.map(_.toUpperCase)\n        val allLowerOrUpper = lower\
    \ ++ upper\n        val allStrings = allLowerOrUpper.map(_.toString.toLowerCase)\n\
    \        val allStringsUpper = allLowerOrUpper.map(_.toString.toUpperCase)\n \
    \       val allStringsUpperOrLower = allStrings.filter(x => allStringsUpper.contains(x))\n\
    \        val allStringsUpperOrLowerOrEmpty = allStringsUpperOrLower.filter(x =>\
    \ x.isEmpty)\n        val allStringsUpperOrLowerOrEmptyOrFalse = allStringsUpperOrLowerOrEmpty.filter(x\
    \ => x == false)\n        val allStringsUpperOrLowerOrEmptyOrFalseOrFalse = allStringsUpperOrLowerOrEmptyOrFalse.filter(x\
    \ => x == false)\n        val allStringsUpperOrLowerOrEmptyOrFalseOrFalseOrFalse\
    \ = allStringsUpperOrLowerOrEmptyOrFalseOrFalse.filter(x => x == false)\n    \
    \    val allStringsUpperOrLowerOrEmptyOrFalseOrFalseOrFalseOrFalse = allStringsUpperOrLowerOrEmptyOrFalseOrFalseOrFalseOrFalse.filter(x\
    \ => x == false)\n        val allStringsUpperOrLowerOrEmptyOrFalseOrFalseOrFalseOrFalseOrFalse\
    \ = allStringsUpperOrLowerOrEmptyOrFalseOrFalseOrFalseOrFalseOrFalse.filter(x\
    \ => x == false)\n        val allStringsUpperOrLowerOrEmptyOrFalseOrFalseOrFalseOrFalseOrFalseOrFalse\
    \ = allStringsUpperOrLowerOrEmptyOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalse.filter(x\
    \ => x == false)\n        val allStringsUpperOrLowerOrEmptyOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalse\
    \ = allStringsUpperOrLowerOrEmptyOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalse.filter(x\
    \ => x == false)\n        val allStringsUpperOrLowerOrEmptyOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalse\
    \ = allStringsUpperOrLowerOrEmptyOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalse.filter(x\
    \ => x == false)\n        val allStringsUpperOrLowerOrEmptyOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalse\
    \ = allStringsUpperOrLowerOr", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) return false\n        val lowerKeys = keys.map(_.toLowerCase)\n      \
    \  val upperKeys = keys.map(_.toUpperCase)\n        lowerKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))", "        val keys = dict.keys\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val allStrings = keys.forall(_.isInstanceOf[String])\n        val allUpperCaseStrings\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        val allLowerCaseStrings\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        allStrings && allUpperCaseStrings\
    \ && allLowerCaseStrings", "        val keys = dict.keys\n        if(keys.isEmpty)\
    \ false\n        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = lower ++ upper\n        val result = lower == upper || both\
    \ == keys\n        result", "        val keys = dict.keys\n        val values\
    \ = dict.values\n        val isStringInLowerCase = keys.map(_.toLowerCase).forall(_.equals(_))\n\
    \        val isStringInUpperCase = keys.map(_.toUpperCase).forall(_.equals(_))\n\
    \        isStringInLowerCase && isStringInUpperCase", "        val keys = dict.keySet\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n\
    \        val lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n\
    \        val allKeys = upperCaseKeys ++ lowerCaseKeys\n        allKeys.forall(key\
    \ => dict.get(key).isInstanceOf[String])", "        val keys = dict.keys\n   \
    \     val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val all = lower ++ upper\n        val isAll = all.forall(key => dict.get(key).isInstanceOf[String])\n\
    \        isAll", "        val keys = dict.keySet\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val all = lower ++ upper\n\
    \        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n    \
    \    val all = lower ++ upper\n        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n\
    \        val all = lower ++ upper\n        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n\
    \        val all = lower ++ upper\n        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n\
    \        val all = lower ++ upper\n        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n\
    \        val all = lower ++ upper\n        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n\
    \        val all = lower ++ upper\n        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n\
    \        val all = lower ++ upper\n        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n\
    \        val all = lower ++ upper\n        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n\
    \        val all = lower ++ upper\n        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n\
    \        val all = lower ++ upper\n        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n\
    \        val all = lower ++ upper\n        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n\
    \        val all = lower ++ upper\n        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n\
    \        val all = lower ++ upper\n        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n\
    \        val all = lower ++ upper\n        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n\
    \        val all = lower ++ upper\n        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n\
    \        val all = lower ++ upper\n        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n\
    \        val all = lower ++ upper\n        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n\
    \        val all = lower ++ upper\n        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n\
    \        val all = lower ++ upper\n        val none = keys.filterNot(_.toLowerCase.equals(_.toUpperCase))\n\
    \        val all = lower ", "        val keys = dict.keys\n        val lower =\
    \ keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n     \
    \   val both = keys.map(key => (key, key.toLowerCase, key.toUpperCase))\n    \
    \    val result = lower == upper || both == keys\n        result && dict.isEmpty",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val allLowerCaseKeys\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val allUpperCaseKeys\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        allLowerCaseKeys &&\
    \ allUpperCaseKeys", "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val result = lower.forall(x\
    \ => upper.contains(x))\n        result || keys.forall(x => upper.contains(x))",
  "        val keys = dict.keys\n        if(keys.length == 0) return false\n     \
    \   val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        if(lowerCaseKeys.toSet == upperCaseKeys.toSet) return true\n        else\
    \ return false", "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val result = lowerCaseKeys.forall(key\
    \ => dict.contains(key))\n        result && upperCaseKeys.forall(key => dict.contains(key))",
  "        val keys = dict.keySet\n        val keysLower = keys.map(_.toLowerCase)\n\
    \        val keysUpper = keys.map(_.toUpperCase)\n        val keysBoth = keysLower\
    \ ++ keysUpper\n        val keysNotBoth = keys.filter(!keysBoth.contains(_))\n\
    \        keysNotBoth.isEmpty", "        val keys = dict.keySet\n        val upperCaseKeys\
    \ = keys.filter(_.toUpperCase == _)\n        val lowerCaseKeys = keys.filter(_.toLowerCase\
    \ == _)\n        val isAllUpperCase = upperCaseKeys.size == keys.size\n      \
    \  val isAllLowerCase = lowerCaseKeys.size == keys.size\n        isAllUpperCase\
    \ && isAllLowerCase", "        val keys = dict.keySet\n        val isStringInLowerCase\
    \ : Boolean = keys.forall(_.toLowerCase.contains(\"a\"))\n        val isStringInUpperCase\
    \ : Boolean = keys.forall(_.toUpperCase.contains(\"A\"))\n        isStringInLowerCase\
    \ && isStringInUpperCase", "        val keys = dict.keys\n        val lower =\
    \ keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n     \
    \   val all = lower ++ upper\n        val result = all forall { key =>\n     \
    \       val value = dict.get(key)\n            val lower = key.toLowerCase\n \
    \           val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase\n            val lower = key.toLowerCase\n\
    \            val upper = key.toUpperCase", "        val keys = dict.keys\n   \
    \     val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = lower ++ upper\n        val result = both.forall(key => dict.get(key).isInstanceOf[String])\n\
    \        result", "        val keys = dict.keySet\n        if (keys.length ==\
    \ 0) return false\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        if (lowerCaseKeys.length == keys.length && lowerCaseKeys.size ==\
    \ keys.size) true\n        else if (upperCaseKeys.length == keys.length && upperCaseKeys.size\
    \ == keys.size) true\n        else false", "        val keys = dict.keySet\n \
    \       val upperCaseKeys = keys.filter(_.isUpper)\n        val lowerCaseKeys\
    \ = keys.filter(_.isLower)\n        val upperCaseKeySet = upperCaseKeys.toSet\n\
    \        val lowerCaseKeySet = lowerCaseKeys.toSet\n        val result = upperCaseKeySet.size\
    \ == lowerCaseKeySet.size && upperCaseKeySet.size == keys.size\n        result ",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isLowerCase\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val isUpperCase = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        isLowerCase && isUpperCase", "        val keys = dict.keySet\n      \
    \  val lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        val isStringInLowerCase = lowerCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val isStringInUpperCase = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val isAllStringsInLowerCaseOrAllStringsInUpperCase = \n            isStringInLowerCase\
    \ || isStringInUpperCase\n        val isAllStringsInLowerCaseOrAllStringsInUpperCase\
    \ = \n            isStringInLowerCase || isStringInUpperCase\n        isAllStringsInLowerCaseOrAllStringsInUpperCase",
  "        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        val allKeys = lowerCaseKeys\
    \ ++ upperCaseKeys\n        allKeys.forall(key => dict.get(key).isInstanceOf[String])",
  "        val keys = dict.keys\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        val lowerCaseKeys = keys.filter(_.isLower)\n        if(upperCaseKeys.isEmpty)\
    \ lowerCaseKeys.isEmpty\n        else upperCaseKeys.forall(lowerCaseKeys.contains)",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val all = lower ++ upper\n\
    \        val result = all forall { key => key.isEmpty || key.toLowerCase == key.toUpperCase\
    \ }\n        result", "        val keys = dict.keySet\n        val upperCaseKeys\
    \ = keys.filter(_.isUpper)\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        if(keys.isEmpty) false else (upperCaseKeys.size == lowerCaseKeys.size)",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toLowerCase\
    \ == _)\n        val upperCaseKeys = keys.filter(_.toUpperCase == _)\n       \
    \ lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty", "        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val all = lower ++ upper\n        val notAll = keys.filterNot(all.toSet)\n\
    \        notAll.isEmpty", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val isLowerCase = lowerCaseKeys.forall(_.isInstanceOf[String])\n    \
    \    val isUpperCase = upperCaseKeys.forall(_.isInstanceOf[String])\n        isLowerCase\
    \ && isUpperCase", "        val keys = dict.keySet\n        val lowerCaseKeys\
    \ = keys.filter(_.isLower)\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        val allLowerCaseKeys = keys.filter(_.isLower)\n        val allUpperCaseKeys\
    \ = keys.filter(_.isUpper)\n        val allKeys = lowerCaseKeys ++ upperCaseKeys\n\
    \        val allKeySet = allKeys.toSet\n        val lowerCaseKeySet = lowerCaseKeys.toSet\n\
    \        val upperCaseKeySet = upperCaseKeys.toSet\n        val lowerCaseKeysSet\
    \ = lowerCaseKeys.toSet\n        val upperCaseKeysSet = upperCaseKeys.toSet\n\
    \        val keysSet = keys.toSet\n        val keysSetSize = keysSet.size\n  \
    \      val lowerCaseKeysSetSize = lowerCaseKeysSet.size\n        val upperCaseKeysSetSize\
    \ = upperCaseKeysSet.size\n        val allKeysSetSize = allKeysSet.size\n    \
    \    val allLowerCaseKeysSetSize = allLowerCaseKeysSet.size\n        val allUpperCaseKeysSetSize\
    \ = allUpperCaseKeysSet.size\n        val allKeysSetSize = allKeysSet.size\n \
    \       val keysSetSize = keysSet.size\n        val lowerCaseKeysSetSize = lowerCaseKeysSet.size\n\
    \        val upperCaseKeysSetSize = upperCaseKeysSet.size\n        val allKeysSetSize\
    \ = allKeysSet.size\n        val allLowerCaseKeysSetSize = allLowerCaseKeysSet.size\n\
    \        val allUpperCaseKeysSetSize = allUpperCaseKeysSet.size\n        val allKeysSetSize\
    \ = allKeysSet.size\n        val keysSetSize = keysSet.size\n        val lowerCaseKeysSetSize\
    \ = lowerCaseKeysSet.size\n        val upperCaseKeysSetSize = upperCaseKeysSet.size\n\
    \        val allKeysSetSize = allKeysSet.size\n        val allLowerCaseKeysSetSize\
    \ = allLowerCaseKeysSet.size\n        val allUpperCaseKeysSetSize = allUpperCaseKeysSet.size\n\
    \        val allKeysSetSize = allKeysSet.size\n        val keysSetSize = keysSet.size\n\
    \        val lowerCaseKeysSetSize = lowerCaseKeysSet.size\n        val upperCaseKeysSetSize\
    \ = upperCaseKeysSet.size\n        val allKeysSetSize = allKeysSet.size\n    \
    \    val allLowerCaseKeysSetSize = allLowerCaseKey", "        if(dict.isEmpty)\
    \ false\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val both = keys.map(key\
    \ => (key.toLowerCase, key.toUpperCase))\n        val result = lower == upper\
    \ || both == keys\n        result", "        val keys = dict.keys\n        val\
    \ lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        lowerCaseKeys.size == upperCaseKeys.size || lowerCaseKeys.size == keys.length"]
stop_tokens:
- "\n    }\n"
