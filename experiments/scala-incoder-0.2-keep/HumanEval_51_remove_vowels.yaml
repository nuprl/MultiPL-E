name: HumanEval_51_remove_vowels
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // remove_vowels is a function that takes string and returns string without\
  \ vowels.\n    // >>> remove_vowels('')\n    // ''\n    // >>> remove_vowels('abcdef')\n\
  \    // 'bcdf'\n    // >>> remove_vowels('aaaaa')\n    // ''\n    // >>> remove_vowels('aaBAA')\n\
  \    // 'B'\n    // >>> remove_vowels('zbcd')\n    // 'zbcd'\n    def removeVowels(text\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(removeVowels((\"\"\
  )).equals((\"\")));\n    assert(removeVowels((\"abcdef\\nghijklm\")).equals((\"\
  bcdf\\nghjklm\")));\n    assert(removeVowels((\"fedcba\")).equals((\"fdcb\")));\n\
  \    assert(removeVowels((\"eeeee\")).equals((\"\")));\n    assert(removeVowels((\"\
  acBAA\")).equals((\"cB\")));\n    assert(removeVowels((\"EcBOO\")).equals((\"cB\"\
  )));\n    assert(removeVowels((\"ybcd\")).equals((\"ybcd\")));\n    }\n\n}\n"
completions: ["        val vowels = \"aeiouAEIOU\"\n        var result = \"\"\n  \
    \      for (c <- text) {\n            if (vowels.contains(c)) {\n            \
    \    result += c\n            }\n        }\n        result", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val vowelsSet = vowels.toSet\n        val result =\
    \ text.filterNot(vowelsSet.contains)\n        return result", "        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val result = text.filter(x\
    \ => !vowels.contains(x))\n        return result", "        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val newText = text.filterNot(vowels.contains)\n\
    \        val newText2 = newText.reverse\n        val newText3 = newText2.reverse\n\
    \        val newText4 = newText3.reverse\n        val newText5 = newText4.reverse\n\
    \        val newText6 = newText5.reverse\n        val newText7 = newText6.reverse\n\
    \        val newText8 = newText7.reverse\n        val newText9 = newText8.reverse\n\
    \        val newText10 = newText9.reverse\n        val newText11 = newText10.reverse\n\
    \        val newText12 = newText11.reverse\n        val newText13 = newText12.reverse\n\
    \        val newText14 = newText13.reverse\n        val newText15 = newText14.reverse\n\
    \        val newText16 = newText15.reverse\n        val newText17 = newText16.reverse\n\
    \        val newText18 = newText17.reverse\n        val newText19 = newText18.reverse\n\
    \        val newText20 = newText19.reverse\n        val newText21 = newText20.reverse\n\
    \        val newText22 = newText21.reverse\n        val newText23 = newText22.reverse\n\
    \        val newText24 = newText23.reverse\n        val newText25 = newText24.reverse\n\
    \        val newText26 = newText25.reverse\n        val newText27 = newText26.reverse\n\
    \        val newText28 = newText27.reverse\n        val newText29 = newText28.reverse\n\
    \        val newText30 = newText29.reverse\n        val newText31 = newText30.reverse\n\
    \        val newText32 = newText31.reverse\n        val newText33 = newText32.reverse\n\
    \        val newText34 = newText33.reverse\n        val newText35 = newText34.reverse\n\
    \        val newText36 = newText35.reverse\n        val newText37 = newText36.reverse\n\
    \        val newText38 = newText37.reverse\n        val newText39 = newText38.reverse\n\
    \        val newText40 = newText39.reverse\n        val newText41 = newText40.reverse\n\
    \        val newText42 = newText41.reverse\n        val newText43 = newText42.reverse\n\
    \        val newText44 = newText43.reverse\n        val newText45 = newText44.reverse\n\
    \        val newText46 = newText45.reverse\n        val newText47 = newText46.reverse\n\
    \        val newText48 = newText47.reverse\n        val newText49", "        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val result = text.filterNot(vowels.contains)\n\
    \        return result", "        var vowels = \"aeiouAEIOU\"\n        var newText\
    \ = \"\"\n        for (i <- 0 until text.length){\n            val char = text.charAt(i)\n\
    \            if (vowels.contains(char)) {\n                newText += char\n \
    \           }\n        }\n        return newText", "        val vowels = \"aeiouAEIOU\"\
    \n        val result = text.filterNot(vowels.contains)\n        return result",
  "        val vowels = Set('a','e','i','o','u')\n        val newText = text.toLowerCase\
    \ // convert text to lowercase\n        val newTextWithoutVowels = newText.filterNot(vowels.contains)\n\
    \        return newTextWithoutVowels", "        val vowels = \"aeiouAEIOU\"\n\
    \        val result = text.filterNot(vowels.contains)\n        result", "    \
    \    val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val result =\
    \ text.filter(x => !vowels.contains(x))\n        result", "        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val result = text.filter(x\
    \ => !vowels.contains(x))\n        result", "        val vowels = \"aeiouAEIOU\"\
    \n        val withoutVowels = text.replaceAll(\"[\" + vowels + \"]\", \"\")\n\
    \        return withoutVowels", "        val vowels = Set(\"a\", \"e\", \"i\"\
    , \"o\", \"u\")\n        val result = new StringBuilder\n        for (c <- text)\
    \ {\n            if (vowels.contains(c)) {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString()", "        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val result = text.filter(x => !vowels.contains(x))\n\
    \        result", "        val vowels = \"aeiouAEIOU\".toSet\n        val result\
    \ = text.filterNot(vowels.contains)\n        return result", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val result = text.filterNot(vowels.contains)\n   \
    \     return result", "        val vowels = Set('a','e','i','o','u')\n       \
    \ val result = text.filter(c => !vowels.contains(c))\n        result", "     \
    \   val vowels = Set('a','e','i','o','u')\n        val result = text.filterNot(vowels.contains)\n\
    \        return result", "        val vowels = \"aeiouAEIOU\"\n        val vowelsSet\
    \ = vowels.toSet\n        val newText = text.replaceAll(\"[aeiouAEIOU]\", \"\"\
    )\n        val newTextSet = newText.toSet\n        val newTextSetWithoutVowels\
    \ = newTextSet.filterNot(vowelsSet.contains)\n        newTextSetWithoutVowels.mkString",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val newText\
    \ = text.filterNot(vowels.contains)\n        newText"]
stop_tokens:
- "\n    }\n"
