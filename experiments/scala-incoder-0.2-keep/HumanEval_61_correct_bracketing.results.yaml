language: scala
name: HumanEval_61_correct_bracketing
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketCount = 0\n        var closingBracketCount\
    \ = 0\n        var currentBracket = bracketsArray(0)\n        var currentBracketCount\
    \ = 1\n        var currentBracketIndex = 0\n        var isCorrect = true\n   \
    \     for (i <- 1 to bracketsArrayLength) {\n            currentBracket = bracketsArray(i)\n\
    \            if (currentBracket == '(') {\n                openingBracketCount\
    \ += 1\n            } else if (currentBracket == ')') {\n                closingBracketCount\
    \ += 1\n            }\n            if (openingBracketCount != closingBracketCount)\
    \ {\n                isCorrect = false\n            }\n            if (currentBracket\
    \ == '(') {\n                currentBracketCount += 1\n            } else if (currentBracket\
    \ == ')') {\n                currentBracketCount -= 1\n            }\n       \
    \     if (currentBracketCount < 0) {\n                isCorrect = false\n    \
    \        }\n        }\n        return isCorrect\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length\
    \ 2\n\tat Problem$.correctBracketing$$anonfun$1(tmpz_jj7p6v.scala:24)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.correctBracketing(tmpz_jj7p6v.scala:41)\n\
    \tat Problem$.main(tmpz_jj7p6v.scala:45)\n\tat Problem.main(tmpz_jj7p6v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfxr1sjd4.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfxr1sjd4.scala:69:5 ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptvz8fnnh.scala:22)\n\tat Problem.main(tmptvz8fnnh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwoe7vrkd.scala:24)\n\tat Problem.main(tmpwoe7vrkd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = mutable.Set[Char]()\n        val closingBrackets = mutable.Set[Char]()\n \
    \       val openingBracketsArray = mutable.Array[Char](bracketsArray.length)\n\
    \        val closingBracketsArray = mutable.Array[Char](bracketsArray.length)\n\
    \        var i = 0\n        while (i < bracketsArray.length) {\n            val\
    \ c = bracketsArray(i)\n            if (c == '(') {\n                openingBrackets\
    \ += c\n                openingBracketsArray(i) = c\n            } else if (c\
    \ == ')') {\n                closingBrackets += c\n                closingBracketsArray(i)\
    \ = c\n            }\n            i += 1\n        }\n        if (openingBrackets.size\
    \ == closingBrackets.size) {\n            val openingBracketsArrayCopy = openingBracketsArray.clone()\n\
    \            val closingBracketsArrayCopy = closingBracketsArray.clone()\n   \
    \         var j = 0\n            while (j < openingBracketsArrayCopy.length) {\n\
    \                if (openingBracketsArrayCopy(j) != closingBracketsArrayCopy(j))\
    \ {\n                    return false\n                }\n                j +=\
    \ 1\n            }\n            return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd2r30fw0.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd2r30fw0.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd2r30fw0.scala:18:35 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArray\e[0m\
    \ = mutable.Array[\e[35mChar\e[0m](bracketsArray.length)\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpd2r30fw0.scala:19:35 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArray\e[0m = mutable.Array[\e\
    [35mChar\e[0m](bracketsArray.length)\n\e[31m\e[31m   |\e[0m                  \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentBracket = bracketsArray(0)\n        var currentBracketCount\
    \ = 0\n        var currentBracketCountInCurrentBracket = 0\n        var currentBracketCountInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBra\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr46fa44j.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr46fa44j.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpr46fa44j.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => true\n       \
    \     case head :: tail => {\n                val openingBrackets = brackets.substring(0,head.length)\n\
    \                val closingBrackets = brackets.substring(head.length)\n     \
    \           openingBrackets.toList match {\n                    case Nil => true\n\
    \                    case head :: tail => {\n                        closingBrackets.toList\
    \ match {\n                            case Nil => true\n                    \
    \        case head :: tail => {\n                                head == tail\
    \ => false\n                            }\n                        }\n       \
    \             }\n                }\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9pon92p3.scala:26:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                                head == tail => \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                not a legal formal parameter\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp9pon92p3.scala:18:64 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mopeningBrackets\e\
    [0m = brackets.substring(\e[31m0\e[0m,head.length)\n\e[31m\e[31m   |\e[0m    \
    \                                                       ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value length is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9pon92p3.scala:19:62 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mclosingBrackets\e\
    [0m = brackets.substring(head.length)\n\e[31m\e[31m   |\e[0m                 \
    \                                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                 value length is not a member of Char\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.flatMap(_.toList).forall(_.toList.forall(_.toString\
    \ == \"(\"))\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp018xcysd.scala:15:34 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(_.toList).forall(_.toList.forall(_.toString\
    \ == \e[31m\"(\"\e[0m))\n\e[31m\e[31m   |\e[0m                               \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m          value toList is not a member of Char\
    \ - did you mean _$1.toInt?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp018xcysd.scala:15:51\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(_.toList).forall(_.toList.forall(_.toString\
    \ == \e[31m\"(\"\e[0m))\n\e[31m\e[31m   |\e[0m                               \
    \                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toList is not a member\
    \ of Nothing, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import\
    \ collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.list asScalaBuffer\n\e[31m  \
    \ |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5tcx0jiy.scala:22)\n\tat Problem.main(tmp5tcx0jiy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBracketCount\
    \ = 0\n        var closingBracketCount = 0\n        var openingBracket = bracketsArray(0)\n\
    \        var closingBracket = bracketsArray(0)\n        var openingBracketCount\
    \ = 0\n        var closingBracketCount = 0\n        var openingBracket = bracketsArray(0)\n\
    \        var closingBracket = bracketsArray(0)\n        var openingBracketCount\
    \ = 0\n        var closingBracketCount = 0\n        var openingBracket = bracketsArray(0)\n\
    \        var closingBracket = bracketsArray(0)\n        var openingBracketCount\
    \ = 0\n        var closingBracketCount = 0\n        var openingBracket = bracketsArray(0)\n\
    \        var closingBracket = bracketsArray(0)\n        var openingBracketCount\
    \ = 0\n        var closingBracketCount = 0\n        var openingBracket = bracketsArray(0)\n\
    \        var closingBracket = bracketsArray(0)\n        var openingBracketCount\
    \ = 0\n        var closingBracketCount = 0\n        var openingBracket = bracketsArray(0)\n\
    \        var closingBracket = bracketsArray(0)\n        var openingBracketCount\
    \ = 0\n        var closingBracketCount = 0\n        var openingBracket = bracketsArray(0)\n\
    \        var closingBracket = bracketsArray(0)\n        var openingBracketCount\
    \ = 0\n        var closingBracketCount = 0\n        var openingBracket = bracketsArray(0)\n\
    \        var closingBracket = bracketsArray(0)\n        var openingBracketCount\
    \ = 0\n        var closingBracketCount = 0\n        var openingBracket = bracketsArray(0)\n\
    \        var closingBracket = bracketsArray(0)\n        var openingBracketCount\
    \ = 0\n        var closingBracketCount = 0\n        var openingBracket = bracketsArray(0)\n\
    \        var closingBracket = bracketsArray(0)\n        var openingBracketCount\
    \ = 0\n        var closingBracketCount = 0\n        var openingBracket = bracketsArray(0)\n\
    \        var closingBracket = bracketsArray(0)\n        var openingBracketCount\
    \ = 0\n        var closingBracketCount = 0\n        var openingBracket = bracketsArray(0)\n\
    \        var closingBracket = bracketsArray(0)\n        var openingBracketCount\
    \ = 0\n        var closingBracketCount = 0\n        var openingBracket = bracketsArray(0)\n\
    \        var closingBracket = bracketsArray(0)\n        var openingBracketCount\
    \ = 0\n        var closingBracketCount = 0\n        var openingBracket = bracketsArray(0)\n\
    \        var closingBracket = bracket\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk7o9zowt.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mopeningBracketCount\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mopeningBracketCount is already defined as \e[33mvariable\e[0m \e\
    [35mopeningBracketCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpk7o9zowt.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mclosingBracketCount\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mclosingBracketCount is already defined as \e[33mvariable\e[0m \e\
    [35mclosingBracketCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpk7o9zowt.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mopeningBracket\e[0m = bracketsArray(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracket is already defined as \e[33mvariable\e[0m \e\
    [35mopeningBracket\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpk7o9zowt.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mclosingBracket\e[0m = bracketsArray(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracket is already defined as \e[33mvariable\e[0m \e\
    [35mclosingBracket\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpk7o9zowt.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mopeningBracketCount\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayCopy = Array(bracketsArrayLength)\n\
    \        System.arraycopy(bracketsArray, 0, bracketsArrayCopy, 0, bracketsArrayLength)\n\
    \        val openingBracketsArray = Array(bracketsArrayLength)\n        val closingBracketsArray\
    \ = Array(bracketsArrayLength)\n        var openingBracketsIndex = 0\n       \
    \ var closingBracketsIndex = 0\n        var openingBracketsCount = 0\n       \
    \ var closingBracketsCount = 0\n        while (openingBracketsIndex < bracketsArrayLength)\
    \ {\n            val currentChar = bracketsArray(openingBracketsIndex)\n     \
    \       if (currentChar == '(') {\n                openingBracketsCount += 1\n\
    \                openingBracketsArray(openingBracketsIndex) = currentChar\n  \
    \              openingBracketsIndex += 1\n            } else if (currentChar ==\
    \ ')') {\n                closingBracketsCount += 1\n                closingBracketsArray(closingBracketsIndex)\
    \ = currentChar\n                closingBracketsIndex += 1\n            } else\
    \ if (currentChar == '(') {\n                openingBracketsCount += 1\n     \
    \           openingBracketsArray(openingBracketsIndex) = currentChar\n       \
    \         openingBracketsIndex += 1\n            } else if (currentChar == ')')\
    \ {\n                closingBracketsCount += 1\n                closingBracketsArray(closingBracketsIndex)\
    \ = currentChar\n                closingBracketsIndex += 1\n            } else\
    \ if (currentChar == '[') {\n                openingBracketsCount += 1\n     \
    \           openingBracketsArray(openingBracketsIndex) = currentChar\n       \
    \         openingBracketsIndex += 1\n            } else if (currentChar == ']')\
    \ {\n                closingBracketsCount += 1\n                closingBracketsArray(closingBracketsIndex)\
    \ = currentChar\n                closingBracketsIndex += 1\n            } else\
    \ if (currentChar == '(') {\n                openingBracketsCount += 1\n     \
    \           openingBracketsArray(openingBracketsIndex) = currentChar\n       \
    \         openingBracketsIndex += 1\n            } else if (currentChar == ')')\
    \ {\n                closingBracketsCount += 1\n                closingBracketsArray(closingBracketsIndex)\
    \ = currentChar\n                closingBracketsIndex += 1\n            } else\
    \ if (currentChar == '{') {\n                openingBracketsCount += 1\n     \
    \           openingBracketsArray(openingBracketsIndex) = currentChar\n       \
    \         \n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj4ncxjfl.scala:80:0 ----------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj4ncxjfl.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mwhile\e[0m (openingBracketsIndex\
    \ < bracketsArrayLength) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e\
    [0m        Found:    Unit\n\e[31m   |\e[0m        Required: Boolean\n\e[31m26\
    \ |\e[0m            \e[33mval\e[0m \e[36mcurrentChar\e[0m = bracketsArray(openingBracketsIndex)\n\
    \e[31m27 |\e[0m            \e[33mif\e[0m (currentChar == \e[31m'('\e[0m) {\n\e\
    [31m28 |\e[0m                openingBracketsCount += \e[31m1\e[0m\n\e[31m29 |\e\
    [0m                openingBracketsArray(openingBracketsIndex) = currentChar\n\e\
    [31m30 |\e[0m                openingBracketsIndex += \e[31m1\e[0m\n\e[31m31 |\e\
    [0m            } \e[33melse\e[0m \e[33mif\e[0m (currentChar == \e[31m')'\e[0m)\
    \ {\n\e[31m32 |\e[0m                closingBracketsCount += \e[31m1\e[0m\n\e[31m33\
    \ |\e[0m                closingBracketsArray(closingBracketsIndex) = currentChar\n\
    \e[31m34 |\e[0m                closingBracketsIndex += \e[31m1\e[0m\n\e[31m35\
    \ |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (currentChar == \e[31m'('\e\
    [0m) {\n\e[31m36 |\e[0m                openingBracketsCount += \e[31m1\e[0m\n\e\
    [31m37 |\e[0m                openingBracketsArray(openingBracketsIndex) = currentChar\n\
    \e[31m38 |\e[0m                openingBracketsIndex += \e[31m1\e[0m\n\e[31m39\
    \ |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (currentChar == \e[31m')'\e\
    [0m) {\n\e[31m40 |\e[0m                closingBracketsCount += \e[31m1\e[0m\n\e\
    [31m41 |\e[0m                closingBracketsArray(closingBracketsIndex) = currentChar\n\
    \e[31m42 |\e[0m                closingBracketsIndex += \e[31m1\e[0m\n\e[31m43\
    \ |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (currentChar == \e[31m'['\e\
    [0m) {\n\e[31m44 |\e[0m                openingBracketsCount += \e[31m1\e[0m\n\e\
    [31m45 |\e[0m                openingBracketsArray(openingBracketsIndex) = currentChar\n\
    \e[31m46 |\e[0m                openingBracketsIndex += \e[31m1\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659795078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.flatMap(_.toInt).forall(x => brackets.toList.flatMap(_.toInt).contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5t9qjlqo.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(_.toInt).forall(\e\
    [36mx\e[0m => brackets.toList.flatMap(_.toInt).contains(x))\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   Found:    Int\n\e[31m   |\e[0m                           \
    \     Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5t9qjlqo.scala:15:79 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        brackets.toList.flatMap(_.toInt).forall(\e[36mx\e[0m => brackets.toList.flatMap(_.toInt).contains(x))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                   Found:    Int\n\e[31m   |\e[0m                           \
    \                  Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.flatMap(_.toInt).forall(_.toString == \"(\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd128uii7.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(_.toInt).forall(_.toString\
    \ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    Int\n\e[31m   |\e\
    [0m                                Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659795077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ = 0\n        var closingBrackets = 0\n        var openingBracketsArray = new\
    \ Array[Char](bracketsArray.length)\n        var closingBracketsArray = new Array[Char](bracketsArray.length)\n\
    \        var currentChar = 0\n        var currentBracket = 0\n        var currentBracketArray\
    \ = new Array[Char](bracketsArray.length)\n        var currentBracketArrayIndex\
    \ = 0\n        var currentBracketArrayIndex2 = 0\n        var currentBracketArrayIndex3\
    \ = 0\n        var currentBracketArrayIndex4 = 0\n        var currentBracketArrayIndex5\
    \ = 0\n        var currentBracketArrayIndex6 = 0\n        var currentBracketArrayIndex7\
    \ = 0\n        var currentBracketArrayIndex8 = 0\n        var currentBracketArrayIndex9\
    \ = 0\n        var currentBracketArrayIndex10 = 0\n        var currentBracketArrayIndex11\
    \ = 0\n        var currentBracketArrayIndex12 = 0\n        var currentBracketArrayIndex13\
    \ = 0\n        var currentBracketArrayIndex14 = 0\n        var currentBracketArrayIndex15\
    \ = 0\n        var currentBracketArrayIndex16 = 0\n        var currentBracketArrayIndex17\
    \ = 0\n        var currentBracketArrayIndex18 = 0\n        var currentBracketArrayIndex19\
    \ = 0\n        var currentBracketArrayIndex20 = 0\n        var currentBracketArrayIndex21\
    \ = 0\n        var currentBracketArrayIndex22 = 0\n        var currentBracketArrayIndex23\
    \ = 0\n        var currentBracketArrayIndex24 = 0\n        var currentBracketArrayIndex25\
    \ = 0\n        var currentBracketArrayIndex26 = 0\n        var currentBracketArrayIndex27\
    \ = 0\n        var currentBracketArrayIndex28 = 0\n        var currentBracketArrayIndex29\
    \ = 0\n        var currentBracketArrayIndex30 = 0\n        var currentBracketArrayIndex31\
    \ = 0\n        var currentBracketArrayIndex32 = 0\n        var currentBracketArrayIndex33\
    \ = 0\n        var currentBracketArrayIndex34 = 0\n        var currentBracketArrayIndex35\
    \ = 0\n        var currentBracketArrayIndex36 = 0\n        var currentBracketArrayIndex37\
    \ = 0\n        var currentBracketArrayIndex38 = 0\n        var currentBracketArrayIndex39\
    \ = 0\n        var currentBracketArrayIndex40 = 0\n        var currentBracketArrayIndex41\
    \ = 0\n        var currentBracketArrayIndex42 = 0\n        var currentBracketArrayIndex43\
    \ = 0\n        var currentBracketArrayIndex44 = 0\n        var currentBracketArrayIndex45\
    \ = 0\n        var currentBracketArrayIndex46 = 0\n        var currentBracketArrayIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7lg_g7ex.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp7lg_g7ex.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '(')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == ')')\n        openingBracketsCount == closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmdbdd1d_.scala:26)\n\tat Problem.main(tmpmdbdd1d_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayCopy = Array(bracketsArrayLength)\n\
    \        bracketsArray.copyTo(bracketsArrayCopy)\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        var currentBracketsCount\
    \ = 0\n        var currentBracketsCountCopy = 0\n        var currentBracketsCountCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopyCopyCopy = 0\n        var\
    \ currentBracketsCountCopyCopyCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopyCopyCopy = 0\n        var\
    \ currentBracketsCountCopyCopyCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopyCopyCopyCopy = 0\n    \
    \    var currentBracketsCountCopyCopyCopyCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopyCopyCopyCopy = 0\n    \
    \    var currentBracketsCountCopyCopyCopyCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopyCopyCopyCopy = 0\n    \
    \    var currentBracketsCountCopyCopyCopyCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopyCopyCopyCopy = 0\n    \
    \    var currentBracketsCountCopyCopyCopy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdxpvh8rd.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdxpvh8rd.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketsCountCopyCopyCopy\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentBracketsCountCopyCopyCopy\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentBracketsCountCopyCopyCopy\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdxpvh8rd.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketsCountCopyCopyCopy\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketsCountCopyCopyCopy is already defined as \e\
    [33mvariable\e[0m \e[35mcurrentBracketsCountCopyCopyCopy\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdxpvh8rd.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketsCountCopyCopyCopyCopy\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mcurrentBracketsCountCopyCopyCopyCopy is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentBracketsCountCopyCopyCopyCopy\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdxpvh8rd.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketsCountCopyCopyCopyCopy\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mcurrentBracketsCountCopyCopyCopyCopy is alread"
  stdout: ''
  timestamp: 1659795078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(true){ (acc, c) =>\n            if (acc)\
    \ {\n                if (c == \"(\") {\n                    acc && correctBracketing(brackets.dropRight(1))\n\
    \                } else if (c == \")\") {\n                    acc && correctBracketing(brackets.dropRight(2))\n\
    \                } else {\n                    acc && false\n                }\n\
    \            } else {\n                if (c == \"(\") {\n                   \
    \ acc && correctBracketing(brackets.dropRight(1))\n                } else if (c\
    \ == \")\") {\n                    acc && true\n                } else {\n   \
    \                 acc && false\n                }\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpe1p1fzuo.scala:17:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (c == \e[31m\"(\"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpe1p1fzuo.scala:19:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                } \e[33melse\e[0m \e[33mif\e[0m (c ==\
    \ \e[31m\")\"\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpe1p1fzuo.scala:25:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mif\e[0m (c == \e[31m\"(\"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpe1p1fzuo.scala:27:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                } \e[33melse\e[0m \e[33mif\e[0m (c ==\
    \ \e[31m\")\"\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n4 errors found\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        openingBrackets.forall(x => closingBrackets.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnwwxzlpg.scala:20)\n\tat Problem.main(tmpnwwxzlpg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayCopy = Array(bracketsArrayLength)\n\
    \        bracketsArray.copyTo(bracketsArrayCopy)\n        val openingBracketsArray\
    \ = Array(\"(\", \")\")\n        val closingBracketsArray = Array(\")(\", \")\"\
    )\n        val openingBracketsArrayLength = openingBracketsArray.length\n    \
    \    val closingBracketsArrayLength = closingBracketsArray.length\n        val\
    \ openingBracketsArrayCopy = Array(openingBracketsArrayLength)\n        openingBracketsArray.copyTo(openingBracketsArrayCopy)\n\
    \        val closingBracketsArrayCopy = Array(closingBracketsArrayLength)\n  \
    \      closingBracketsArray.copyTo(closingBracketsArrayCopy)\n        val openingBracketsArrayLength\
    \ = openingBracketsArrayCopy.length\n        val closingBracketsArrayLength =\
    \ closingBracketsArrayCopy.length\n        val openingBracketsArrayCopy = Array(openingBracketsArrayLength)\n\
    \        openingBracketsArray.copyTo(openingBracketsArrayCopy)\n        val closingBracketsArrayCopy\
    \ = Array(closingBracketsArrayLength)\n        closingBracketsArray.copyTo(closingBracketsArrayCopy)\n\
    \        val openingBracketsArrayLength = openingBracketsArrayCopy.length\n  \
    \      val closingBracketsArrayLength = closingBracketsArrayCopy.length\n    \
    \    val openingBracketsArrayCopy = Array(openingBracketsArrayLength)\n      \
    \  openingBracketsArray.copyTo(openingBracketsArrayCopy)\n        val closingBracketsArrayCopy\
    \ = Array(closingBracketsArrayLength)\n        closingBracketsArray.copyTo(closingBracketsArrayCopy)\n\
    \        val openingBracketsArrayLength = openingBracketsArrayCopy.length\n  \
    \      val closingBracketsArrayLength = closingBracketsArrayCopy.length\n    \
    \    val openingBracketsArrayCopy = Array(openingBracketsArrayLength)\n      \
    \  openingBracketsArray.copyTo(openingBracketsArrayCopy)\n        val closingBracketsArrayCopy\
    \ = Array(closingBracketsArrayLength)\n        closingBracketsArray.copyTo(closingBracketsArrayCopy)\n\
    \        val openingBra\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo5165qnb.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo5165qnb.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopeningBracketsArrayLength\e[0m = openingBracketsArrayCopy.length\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo5165qnb.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayLength\e\
    [0m = closingBracketsArrayCopy.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mclosingBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo5165qnb.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArrayCopy\e\
    [0m = Array(openingBracketsArrayLength)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayCopy is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsArrayCopy\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo5165qnb.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayCopy\e\
    [0m = Array(closingBracketsArrayLength)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toList\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == \"(\")\n        val closingBracketsCount = bracketsArray.count(_\
    \ == \")\")\n        openingBracketsCount == closingBracketsCount\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3yuqc8sh.scala:16:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsCount\e[0m\
    \ = bracketsArray.count(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \                                               ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp3yuqc8sh.scala:17:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsCount\e[0m\
    \ = bracketsArray.count(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \                                               ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        openingBrackets.size == closingBrackets.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptu298any.scala:20)\n\tat Problem.main(tmptu298any.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(false)((acc, c) => acc && brackets.indexOf(c)\
    \ == brackets.lastIndexOf(c))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp760kn3sl.scala:18)\n\tat Problem.main(tmp760kn3sl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toList\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '(')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == ')')\n        openingBracketsCount == closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgiodoyk1.scala:26)\n\tat Problem.main(tmpgiodoyk1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.filter(c => c == '(').length\n        val closingBracketsCount\
    \ = bracketsArray.filter(c => c == ')').length\n        openingBracketsCount ==\
    \ closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphpz2_v2p.scala:26)\n\tat Problem.main(tmphpz2_v2p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795087
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toList\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '(')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == ')')\n        openingBracketsCount != closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6xdbq5bd.scala:21)\n\tat Problem.main(tmp6xdbq5bd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayCopy = Array(bracketsArrayLength)\n\
    \        bracketsArrayCopy.copyToArray(bracketsArray, 0)\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        var currentBracketsCount\
    \ = 0\n        var currentBracketsCountCopy = 0\n        var currentBracketsCountCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopyCopyCopy = 0\n        var\
    \ currentBracketsCountCopyCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopyCopyCopy = 0\n        var\
    \ currentBracketsCountCopyCopyCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopyCopyCopy = 0\n        var\
    \ currentBracketsCountCopyCopyCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopyCopyCopy = 0\n        var\
    \ currentBracketsCountCopyCopyCopyCopyCopyCopy = 0\n        var currentBracketsCountCopyCopyCopyCopyCopyCopy\
    \ = 0\n        var currentBracketsCountCopyCopyCopyCopyCopyCopy = 0\n        var\
    \ currentBracketsCountCopyCopyCopy\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqhb21be3.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqhb21be3.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketsCountCopyCopyCopy\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentBracketsCountCopyCopyCopy\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentBracketsCountCopyCopyCopy\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqhb21be3.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketsCountCopyCopyCopy\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketsCountCopyCopyCopy is already defined as \e\
    [33mvariable\e[0m \e[35mcurrentBracketsCountCopyCopyCopy\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqhb21be3.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketsCountCopyCopyCopyCopy\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mcurrentBracketsCountCopyCopyCopyCopy is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentBracketsCountCopyCopyCopyCopy\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqhb21be3.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketsCountCopyCopyCopyCopy\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mcurrentBracketsCountCopyCopyCopyCopy is alread"
  stdout: ''
  timestamp: 1659795088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toList\n        val openingBrackets\
    \ = bracketsArray.filter(x => x == \"(\")\n        val closingBrackets = bracketsArray.filter(x\
    \ => x == \")\")\n        openingBrackets.size == closingBrackets.size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\"))\
    \ == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpic6_kr_4.scala:16:56 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = bracketsArray.filter(\e\
    [36mx\e[0m => x == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpic6_kr_4.scala:17:56 -----------------------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = bracketsArray.filter(\e\
    [36mx\e[0m => x == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659795089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ = 0\n        var closingBrackets = 0\n        var openingBracketsArray = new\
    \ Array[Char](bracketsArray.length)\n        var closingBracketsArray = new Array[Char](bracketsArray.length)\n\
    \        var currentChar = 0\n        var currentBracket = 0\n        var currentBracketArray\
    \ = new Array[Char](bracketsArray.length)\n        var currentBracketArrayIndex\
    \ = 0\n        var currentBracketArrayIndex2 = 0\n        var currentBracketArrayIndex3\
    \ = 0\n        var currentBracketArrayIndex4 = 0\n        var currentBracketArrayIndex5\
    \ = 0\n        var currentBracketArrayIndex6 = 0\n        var currentBracketArrayIndex7\
    \ = 0\n        var currentBracketArrayIndex8 = 0\n        var currentBracketArrayIndex9\
    \ = 0\n        var currentBracketArrayIndex10 = 0\n        var currentBracketArrayIndex11\
    \ = 0\n        var currentBracketArrayIndex12 = 0\n        var currentBracketArrayIndex13\
    \ = 0\n        var currentBracketArrayIndex14 = 0\n        var currentBracketArrayIndex15\
    \ = 0\n        var currentBracketArrayIndex16 = 0\n        var currentBracketArrayIndex17\
    \ = 0\n        var currentBracketArrayIndex18 = 0\n        var currentBracketArrayIndex19\
    \ = 0\n        var currentBracketArrayIndex20 = 0\n        var currentBracketArrayIndex21\
    \ = 0\n        var currentBracketArrayIndex22 = 0\n        var currentBracketArrayIndex23\
    \ = 0\n        var currentBracketArrayIndex24 = 0\n        var currentBracketArrayIndex25\
    \ = 0\n        var currentBracketArrayIndex26 = 0\n        var currentBracketArrayIndex27\
    \ = 0\n        var currentBracketArrayIndex28 = 0\n        var currentBracketArrayIndex29\
    \ = 0\n        var currentBracketArrayIndex30 = 0\n        var currentBracketArrayIndex31\
    \ = 0\n        var currentBracketArrayIndex32 = 0\n        var currentBracketArrayIndex33\
    \ = 0\n        var currentBracketArrayIndex34 = 0\n        var currentBracketArrayIndex35\
    \ = 0\n        var currentBracketArrayIndex36 = 0\n        var currentBracketArrayIndex37\
    \ = 0\n        var currentBracketArrayIndex38 = 0\n        var currentBracketArrayIndex39\
    \ = 0\n        var currentBracketArrayIndex40 = 0\n        var currentBracketArrayIndex41\
    \ = 0\n        var currentBracketArrayIndex42 = 0\n        var currentBracketArrayIndex43\
    \ = 0\n        var currentBracketArrayIndex44 = 0\n        var currentBracketArrayIndex45\
    \ = 0\n        var currentBracketArrayIndex46 = 0\n        var currentBracketArrayIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7lg_g7ex.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp7lg_g7ex.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '(')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == ')')\n        openingBracketsCount != closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdqnh_c71.scala:21)\n\tat Problem.main(tmpdqnh_c71.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.filter(c => c == '(').length\n        val closingBracketsCount\
    \ = bracketsArray.filter(c => c == ')').length\n        openingBracketsCount ==\
    \ closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphpz2_v2p.scala:26)\n\tat Problem.main(tmphpz2_v2p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795087
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '(')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == ')')\n        openingBracketsCount == closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmdbdd1d_.scala:26)\n\tat Problem.main(tmpmdbdd1d_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        openingBrackets.forall(openingBracket =>\
    \ closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9he68p5g.scala:20)\n\tat Problem.main(tmp9he68p5g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795090
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => true\n       \
    \     case head :: tail => {\n                val openingBrackets = brackets.toList.filter(c\
    \ => c == '(')\n                val closingBrackets = brackets.toList.filter(c\
    \ => c == ')')\n                openingBrackets.forall(c => closingBrackets.contains(c))\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcwcoxxs_.scala:25)\n\tat Problem.main(tmpcwcoxxs_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795090
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ : List[Char] = Nil\n        var closingBrackets : List[Char] = Nil\n       \
    \ var openingBracketsCount : Int = 0\n        var closingBracketsCount : Int =\
    \ 0\n        for(i <- 0 until bracketsArray.length){\n            if(bracketsArray(i)\
    \ == '('){\n                openingBrackets = openingBrackets :+ bracketsArray(i)\n\
    \                openingBracketsCount += 1\n            }\n            if(bracketsArray(i)\
    \ == ')'){\n                closingBrackets = closingBrackets :+ bracketsArray(i)\n\
    \                closingBracketsCount += 1\n            }\n        }\n       \
    \ if(openingBracketsCount == closingBracketsCount){\n            true\n      \
    \  }\n        else{\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmped19ct82.scala:43)\n\tat Problem.main(tmped19ct82.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.flatMap(c => if (c == '(') List(c + ')') else List(c)).forall(c\
    \ => brackets.indexOf(c) == brackets.lastIndexOf(c))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpfdaoe3cv.scala:15:123 ----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(\e[36mc\e[0m => \e[33mif\e\
    [0m (c == \e[31m'('\e[0m) List(c + \e[31m')'\e[0m) \e[33melse\e[0m List(c)).forall(\e\
    [36mc\e[0m => brackets.indexOf(c) == brackets.lastIndexOf(c))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mlastIndexOf\e\
    [0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String,\
    \ x$1: Int): Int\n\e[31m   |\e[0m (x$0: String): Int\n\e[31m   |\e[0m (x$0: Int,\
    \ x$1: Int): Int\n\e[31m   |\e[0m (x$0: Int): Int\n\e[31m   |\e[0mmatch arguments\
    \ ((c : AnyVal))\n1 error found\n"
  stdout: ''
  timestamp: 1659795087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => true\n       \
    \     case head :: tail =>\n                head == \"(\" && correctBracketing(tail)\n\
    \            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjos0tw0d.scala:18:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                head == \e[31m\"(\"\e[0m && correctBracketing(tail)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Values of types Char and String cannot be compared with == or !=\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjos0tw0d.scala:18:49 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                head == \e[31m\"(\"\e[0m && correctBracketing(tail)\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^\e[0m\n\
    \e[31m   |\e[0m                                           Found:    (tail : List[Char])\n\
    \e[31m   |\e[0m                                           Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795090
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsCount = bracketsArray.filter(c\
    \ => c == '(').length\n        val closingBracketsCount = bracketsArray.filter(c\
    \ => c == ')').length\n        openingBracketsCount == closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwyb7eumx.scala:27)\n\tat Problem.main(tmpwyb7eumx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case List() => false\n   \
    \         case x :: xs => x.equals(\"(\") && correctBracketing(xs)\n         \
    \   case _ => true\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb2oj3o5t.scala:17:63\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m x\
    \ :: xs => x.equals(\e[31m\"(\"\e[0m) && correctBracketing(xs)\n\e[31m\e[31m \
    \  |\e[0m                                                               ^^\e[0m\n\
    \e[31m   |\e[0m                                             Found:    (xs : List[Char])\n\
    \e[31m   |\e[0m                                             Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketCount = 0\n        var closingBracketCount\
    \ = 0\n        var currentBracket = bracketsArray(0)\n        var currentBracketCount\
    \ = 0\n        var currentBracketCountForCurrentBracket = 0\n        var currentBracketCountForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var current\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpljeml9jc.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpljeml9jc.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ = 0\n        var closingBrackets = 0\n        var openingBracketsArray = Array.empty[Char]\n\
    \        var closingBracketsArray = Array.empty[Char]\n        for(i <- 0 until\
    \ bracketsArray.length){\n            if(bracketsArray(i) == '('){\n         \
    \       openingBracketsArray = openingBracketsArray :+ bracketsArray(i)\n    \
    \            openingBrackets += 1\n            }\n            else if(bracketsArray(i)\
    \ == ')'){\n                closingBracketsArray = closingBracketsArray :+ bracketsArray(i)\n\
    \                closingBrackets += 1\n            }\n        }\n        if(openingBrackets\
    \ == closingBrackets){\n            true\n        }\n        else{\n         \
    \   false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmr94wcnw.scala:43)\n\tat Problem.main(tmpmr94wcnw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(true) {\n            case (true, x) =>\
    \ x match {\n                case \")\" => false\n                case \")()\"\
    \ => true\n                case \")(\" => false\n                case \")(()\"\
    \ => true\n                case \")(()()\" => true\n                case \")(()())\"\
    \ => true\n                case \")(()())(\" => false\n                case \"\
    )(()())()\" => true\n                case \")(()())()()\" => true\n          \
    \      case \")(()())()()()\" => true\n                case \")(()())()()()()\"\
    \ => true\n                case \")(()())()()()()()\" => true\n              \
    \  case \")(()())()()()()()()\" => true\n                case \")(()())()()()()()()()\"\
    \ => true\n                case \")(()())()()()()()()()()\" => true\n        \
    \        case \")(()())()()()()()()()()()\" => true\n                case \")(()())()()()()()()()()()()\"\
    \ => true\n                case \")(()())()()()()()()()()()()()\" => true\n  \
    \              case \")(()())()()()()()()()()()()()()\" => true\n            \
    \    case \")(()())()()()()()()()()()()()()()\" => true\n                case\
    \ \")(()())()()()()()()()()()()()()()\" => true\n                case \")(()())()()()()()()()()()()()()()()\"\
    \ => true\n                case \")(()())()()()()()()()()()()()()()()()\" => true\n\
    \                case \")(()())()()()()()()()()()()()()()()()\" => true\n    \
    \            case \")(()())()()()()()()()()()()()()()()()()\" => true\n      \
    \          case \")(()())()()()()()()()()()()()()()()()()\" => true\n        \
    \        case \")(()())()()()()()()()()()()()()()()()()\" => true\n          \
    \      case \")(()())()()()()()()()()()()()()()()()()\" => true\n            \
    \    case \")(()())()()()()()()()()()()()()()()()()\" => true\n              \
    \  case \")(()())()()()()()\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpar7jq60z.scala:46:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m                \e[33mcase\e[0m \")(()())()()()()()\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpar7jq60z.scala:48:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m48 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpar7jq60z.scala:64:0 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmpar7jq60z.scala:17:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m \e[31m\")\"\e[0m => \e\
    [31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpar7jq60z.scala:18:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m \e[31m\")()\"\e[0m =>\
    \ \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpar7jq60z.scala:19:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m \e[31m\")(\"\e[0m =>\
    \ \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpar7jq60z.scala:20:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m \e[31m\")(()\"\e[0m =>\
    \ \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpar7jq"
  stdout: ''
  timestamp: 1659795091
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.filter(c => c == '(').length\n        val closingBracketsCount\
    \ = bracketsArray.filter(c => c == ')').length\n        openingBracketsCount ==\
    \ closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphpz2_v2p.scala:26)\n\tat Problem.main(tmphpz2_v2p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentChar = bracketsArray(0)\n        var currentCharIsClosingBracket\
    \ = false\n        var currentCharIsOpeningBracket = false\n        var currentCharIsNextChar\
    \ = false\n        var currentCharIsNextCharOrClosingBracket = false\n       \
    \ var currentCharIsNextCharOrOpeningBracket = false\n        var currentCharIsNextCharOrClosingBracketOrOpeningBracket\
    \ = false\n        var currentCharIsNextCharOrClosingBracketOrOpeningBracketOrNextChar\
    \ = false\n        var currentCharIsNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextChar\
    \ = false\n        var currentCharIsNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracketOrOpeningBracketOrNextCharOrClosingBracket\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0s1srdf6.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0s1srdf6.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(true){ (acc, c) =>\n            if (acc.toBoolean)\
    \ {\n                acc && brackets.toList.contains(c)\n            } else {\n\
    \                acc && !brackets.toList.contains(c)\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl63tuvp2.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (acc.toBoolean) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   value toBoolean is not a member of Boolean\n1 error found\n"
  stdout: ''
  timestamp: 1659795089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmb8_p5od.scala:22)\n\tat Problem.main(tmpmb8_p5od.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.flatMap(_.toList).forall(x => brackets.indexOf(x)\
    \ == brackets.lastIndexOf(x))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1_cp1ssu.scala:15:34 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(_.toList).forall(\e[36mx\e\
    [0m => brackets.indexOf(x) == brackets.lastIndexOf(x))\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^^\e[0m\n\e[31m   |\e[0m          value\
    \ toList is not a member of Char - did you mean _$1.toInt?\n\e[31m\e[31m-- [E051]\
    \ Reference Error: /tmp/tmp1_cp1ssu.scala:15:86 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(_.toList).forall(\e[36mx\e\
    [0m => brackets.indexOf(x) == brackets.lastIndexOf(x))\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \ ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mlastIndexOf\e[0m in \e[33mclass\e[0m\
    \ \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String): Int\n\e[31m   |\e\
    [0m (x$0: Int): Int\n\e[31m   |\e[0mboth match arguments ((x : Nothing))\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E051] Reference Error: /tmp/tmp1_cp1ssu.scala:15:63 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(_.toList).forall(\e[36mx\e\
    [0m => brackets.indexOf(x) == brackets.lastIndexOf(x))\n\e[31m\e[31m   |\e[0m\
    \                                                      ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mAmbiguous overload. The overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mindexOf\e[0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m\
    \   |\e[0m (x$0: String): Int\n\e[31m   |\e[0m (x$0: Int): Int\n\e[31m   |\e[0mboth\
    \ match arguments ((x : Nothing))\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentBracket = bracketsArray(0)\n        var currentBracketCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpen\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq6dkisss.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq6dkisss.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketOpeningCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentBracketOpeningCount\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentBracketOpeningCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq6dkisss.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketClosingCount\e[0m = \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketClosingCount is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentBracketClosingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq6dkisss.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketOpeningCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketOpeningCount is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentBracketOpeningCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq6dkisss.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketClosingCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketClosingCount is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentBracketClosingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded met"
  stdout: ''
  timestamp: 1659795090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"(\", \")\")\n        val closingBracketsArray = Array(\"(\", \")\"\
    )\n        val openingBracketsSet = openingBracketsArray.toSet\n        val closingBracketsSet\
    \ = closingBracketsArray.toSet\n        val openingBracketsCount = openingBracketsArray.length\n\
    \        val closingBracketsCount = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength * closingBracketsArrayLength\n\
    \        val openingBracketsArray = openingBracketsArray.zip(closingBracketsArray).map(x\
    \ => x._1).toArray\n        val closingBracketsArray = openingBracketsArray.zip(closingBracketsArray).map(x\
    \ => x._2).toArray\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArrayLength = openingBracketsArrayLength * closingBracketsArrayLength\n\
    \        val openingBracketsArray = openingBracketsArray.zip(closingBracketsArray).map(x\
    \ => x._1).toArray\n        val closingBracketsArray = openingBracketsArray.zip(closingBracketsArray).map(x\
    \ => x._2).toArray\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArrayLength = openingBracketsArrayLength * closingBracketsArrayLength\n\
    \        val openingBracketsArray = openingBracketsArray.zip(closingBracketsArray).map(x\
    \ => x._1).toArray\n        val closingBracketsArray = openingBracketsArray.zip(closingBracketsArray).map(x\
    \ => x._2).toArray\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArrayLength = openingBracketsArrayLength * closingBracketsArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpka9j4clz.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArrayLength\e\
    [0m = openingBracketsArrayLength * closingBracketsArrayLength\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpka9j4clz.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArray\e[0m\
    \ = openingBracketsArray.zip(closingBracketsArray).map(\e[36mx\e[0m => x._1).toArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArray is already defined as \e[33mvalue\e[0m\
    \ \e[35mopeningBracketsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpka9j4clz.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArray\e[0m\
    \ = openingBracketsArray.zip(closingBracketsArray).map(\e[36mx\e[0m => x._2).toArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArray is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosingBracketsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpka9j4clz.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArrayLength\e\
    [0m = openingBracketsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e"
  stdout: ''
  timestamp: 1659795090
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '(')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == ')')\n        openingBracketsCount == closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmdbdd1d_.scala:26)\n\tat Problem.main(tmpmdbdd1d_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"(\", \")\")\n        val closingBracketsArray = Array(\"(\", \")\"\
    )\n        val openingBracketsCount = openingBracketsArray.length\n        val\
    \ closingBracketsCount = closingBracketsArray.length\n        val bracketsCount\
    \ = bracketsArray.length\n        val openingBracketsMap = mutable.HashMap[Char,\
    \ Int]()\n        val closingBracketsMap = mutable.HashMap[Char, Int]()\n    \
    \    var openingBracketsCountInCurrentBracket = 0\n        var closingBracketsCountInCurrentBracket\
    \ = 0\n        var currentBracket = ' '\n        var currentBracketCount = 0\n\
    \        var currentBracketCountInCurrentBracket = 0\n        var currentBracketCountInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketIn\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3bacnhnl.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3bacnhnl.scala:21:33\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mopeningBracketsMap\e[0m = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp3bacnhnl.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m\
    \ = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp3bacnhnl.scala:39:5 ---------------------\e[0m\e\
    [0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfxr1sjd4.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfxr1sjd4.scala:69:5 ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(true){ (acc, elem) =>\n            if\
    \ (elem == \"(\")\n                acc && correctBracketing(brackets.substring(0,brackets.indexOf(elem)))\n\
    \            else if (elem == \")\")\n                acc && correctBracketing(brackets.substring(0,brackets.lastIndexOf(elem)))\n\
    \            else acc\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbgxf4a3v.scala:16:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (elem == \e[31m\"(\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Values of types Char and String cannot be compared with == or !=\n\e[31m\e[31m--\
    \ Error: /tmp/tmpbgxf4a3v.scala:18:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (elem == \e\
    [31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659795090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toList\n        val openingBrackets\
    \ = bracketsArray.filter(x => x == \"(\")\n        val closingBrackets = bracketsArray.filter(x\
    \ => x == \")\")\n        openingBrackets.size == closingBrackets.size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\"))\
    \ == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpic6_kr_4.scala:16:56 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = bracketsArray.filter(\e\
    [36mx\e[0m => x == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpic6_kr_4.scala:17:56 -----------------------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = bracketsArray.filter(\e\
    [36mx\e[0m => x == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659795089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayCopy = Array(bracketsArrayLength)\n\
    \        System.arraycopy(bracketsArray, 0, bracketsArrayCopy, 0, bracketsArrayLength)\n\
    \        val openingBracketsArray = Array(\"(\", \")\")\n        val closingBracketsArray\
    \ = Array(\")(\", \")\")\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArrayCopy = Array(openingBracketsArrayLength)\n        System.arraycopy(openingBracketsArray,\
    \ 0, openingBracketsArrayCopy, 0, openingBracketsArrayLength)\n        val closingBracketsArrayCopy\
    \ = Array(closingBracketsArrayLength)\n        System.arraycopy(closingBracketsArray,\
    \ 0, closingBracketsArrayCopy, 0, closingBracketsArrayLength)\n        val openingBracketsArrayCopyLength\
    \ = openingBracketsArrayCopy.length\n        val closingBracketsArrayCopyLength\
    \ = closingBracketsArrayCopy.length\n        val openingBracketsArrayCopy = Array(openingBracketsArrayCopyLength)\n\
    \        System.arraycopy(openingBracketsArrayCopy, 0, openingBracketsArrayCopy,\
    \ 0, openingBracketsArrayCopyLength)\n        val closingBracketsArrayCopy = Array(closingBracketsArrayCopyLength)\n\
    \        System.arraycopy(closingBracketsArrayCopy, 0, closingBracketsArrayCopy,\
    \ 0, closingBracketsArrayCopyLength)\n        val openingBracketsArrayCopyLength\
    \ = openingBracketsArrayCopy.length\n        val closingBracketsArrayCopyLength\
    \ = closingBracketsArrayCopy.length\n        val openingBracketsArrayCopy = Array(openingBracketsArrayCopyLength)\n\
    \        System.arraycopy(openingBracketsArrayCopy, 0, openingBracketsArrayCopy,\
    \ 0, openingBracketsArrayCopyLength)\n        val closingBracketsArrayCopy = Array(closingBracketsArrayCopyLength)\n\
    \        System.arraycopy(closingBracketsArrayCopy, 0, closingBracketsArrayCopy,\
    \ 0, closingBracketsArrayCopyLength)\n        val openingBracketsArrayCopyLength\
    \ = openingBracketsArrayCopy.length\n        val closingBracketsArrayCopyLength\
    \ = closingBracket\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo_md8_m2.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArrayCopy\e\
    [0m = Array(openingBracketsArrayCopyLength)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayCopy is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsArrayCopy\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo_md8_m2.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayCopy\e\
    [0m = Array(closingBracketsArrayCopyLength)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayCopy is already defined as \e[33mvalue\e\
    [0m \e[35mclosingBracketsArrayCopy\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo_md8_m2.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArrayCopyLength\e\
    [0m = openingBracketsArrayCopy.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayCopyLength is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsArrayCopyLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo_md8_m2.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayCopyLength\e\
    [0m = closingBracketsArrayCopy.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayCopyLength is already defined as \e[33mvalue\e\
    [0m \e[35mclosingBracketsArrayCopyLength\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => false\n      \
    \      case head :: tail => {\n                val openingBrackets = brackets.substring(0,head.length)\n\
    \                val closingBrackets = brackets.substring(head.length)\n     \
    \           val openingBracketsCount = openingBrackets.toList.size\n         \
    \       val closingBracketsCount = closingBrackets.toList.size\n             \
    \   openingBracketsCount != closingBracketsCount && openingBrackets.toList ==\
    \ closingBrackets.toList\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4scrcidt.scala:18:64 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mopeningBrackets\e\
    [0m = brackets.substring(\e[31m0\e[0m,head.length)\n\e[31m\e[31m   |\e[0m    \
    \                                                       ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value length is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4scrcidt.scala:19:62 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mclosingBrackets\e\
    [0m = brackets.substring(head.length)\n\e[31m\e[31m   |\e[0m                 \
    \                                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                 value length is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795098
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmb8_p5od.scala:22)\n\tat Problem.main(tmpmb8_p5od.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayCopy = Array(bracketsArrayLength)\n\
    \        System.arraycopy(bracketsArray, 0, bracketsArrayCopy, 0, bracketsArrayLength)\n\
    \        val openingBracketsArray = Array(\"(\", \")\")\n        val closingBracketsArray\
    \ = Array(\")(\", \")\")\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  var openingBracketsArrayCopy = Array(openingBracketsArrayLength)\n        var\
    \ closingBracketsArrayCopy = Array(closingBracketsArrayLength)\n        System.arraycopy(openingBracketsArray,\
    \ 0, openingBracketsArrayCopy, 0, openingBracketsArrayLength)\n        System.arraycopy(closingBracketsArray,\
    \ 0, closingBracketsArrayCopy, 0, closingBracketsArrayLength)\n        var openingBracketsArrayCopyLength\
    \ = openingBracketsArrayCopy.length\n        var closingBracketsArrayCopyLength\
    \ = closingBracketsArrayCopy.length\n        var openingBracketsArrayCopyIndex\
    \ = 0\n        var closingBracketsArrayCopyIndex = 0\n        var openingBracketsArrayCopyIndexLength\
    \ = 0\n        var closingBracketsArrayCopyIndexLength = 0\n        var openingBracketsArrayCopyIndexLength\
    \ = 0\n        var closingBracketsArrayCopyIndexLength = 0\n        var openingBracketsArrayCopyIndex\
    \ = 0\n        var closingBracketsArrayCopyIndex = 0\n        var openingBracketsArrayCopyIndexLength\
    \ = 0\n        var closingBracketsArrayCopyIndexLength = 0\n        var openingBracketsArrayCopyIndex\
    \ = 0\n        var closingBracketsArrayCopyIndex = 0\n        var openingBracketsArrayCopyIndexLength\
    \ = 0\n        var closingBracketsArrayCopyIndexLength = 0\n        var openingBracketsArrayCopyIndex\
    \ = 0\n        var closingBracketsArrayCopyIndex = 0\n        var openingBracketsArrayCopyIndexLength\
    \ = 0\n        var closingBracketsArrayCopyIndexLength = 0\n        var openingBracketsArrayCopyIndex\
    \ = 0\n        var closingBracketsArrayCopyIndex = 0\n        var openingBracketsArrayCopyIndexLength\
    \ = 0\n        var closingBracketsArrayCopyIndexLength = 0\n        var openingBracketsArrayCopyIndex\
    \ = 0\n        var closingBracketsArrayCopyIndex = 0\n        var \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpq9onw0p6.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpq9onw0p6.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m \e[36mopeningBracketsArrayCopyIndexLength\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayCopyIndexLength is already defined as\
    \ \e[33mvariable\e[0m \e[35mopeningBracketsArrayCopyIndexLength\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq9onw0p6.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mvar\e[0m \e[36mclosingBracketsArrayCopyIndexLength\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayCopyIndexLength is already defined as\
    \ \e[33mvariable\e[0m \e[35mclosingBracketsArrayCopyIndexLength\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq9onw0p6.scala:35:12 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mvar\e[0m \e[36mopeningBracketsArrayCopyIndex\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mopeningBracketsArrayCopyIndex is already defined as \e[33mvariable\e\
    [0m \e[35mopeningBracketsArrayCopyIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq9onw0p6.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mvar\e[0m \e[36mclosingBracketsArrayCopyIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(true)(_ && _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7mqxl_p1.scala:15:44\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.foldLeft(\e\
    [31mtrue\e[0m)(_ && _)\n\e[31m\e[31m   |\e[0m                                \
    \            ^\e[0m\n\e[31m   |\e[0m                                         \
    \   Found:    (_$2 : Char)\n\e[31m   |\e[0m                                  \
    \          Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(true) {\n            (acc, c) => acc &&\
    \ brackets.indexOf(c) != brackets.lastIndexOf(c)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy9uqbbkr.scala:20)\n\tat Problem.main(tmpy9uqbbkr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBrackets = 0\n        var closingBrackets\
    \ = 0\n        var openingBracketsArray = new Array[Char](bracketsArrayLength)\n\
    \        var closingBracketsArray = new Array[Char](bracketsArrayLength)\n   \
    \     var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsArrayIndex2 = 0\n        var closingBracketsArrayIndex2\
    \ = 0\n        var openingBracketsArrayIndex3 = 0\n        var closingBracketsArrayIndex3\
    \ = 0\n        var openingBracketsArrayIndex4 = 0\n        var closingBracketsArrayIndex4\
    \ = 0\n        var openingBracketsArrayIndex5 = 0\n        var closingBracketsArrayIndex5\
    \ = 0\n        var openingBracketsArrayIndex6 = 0\n        var closingBracketsArrayIndex6\
    \ = 0\n        var openingBracketsArrayIndex7 = 0\n        var closingBracketsArrayIndex7\
    \ = 0\n        var openingBracketsArrayIndex8 = 0\n        var closingBracketsArrayIndex8\
    \ = 0\n        var openingBracketsArrayIndex9 = 0\n        var closingBracketsArrayIndex9\
    \ = 0\n        var openingBracketsArrayIndex10 = 0\n        var closingBracketsArrayIndex10\
    \ = 0\n        var openingBracketsArrayIndex11 = 0\n        var closingBracketsArrayIndex11\
    \ = 0\n        var openingBracketsArrayIndex12 = 0\n        var closingBracketsArrayIndex12\
    \ = 0\n        var openingBracketsArrayIndex13 = 0\n        var closingBracketsArrayIndex13\
    \ = 0\n        var openingBracketsArrayIndex14 = 0\n        var closingBracketsArrayIndex14\
    \ = 0\n        var openingBracketsArrayIndex15 = 0\n        var closingBracketsArrayIndex15\
    \ = 0\n        var openingBracketsArrayIndex16 = 0\n        var closingBracketsArrayIndex16\
    \ = 0\n        var openingBracketsArrayIndex17 = 0\n        var closingBracketsArrayIndex17\
    \ = 0\n        var openingBracketsArrayIndex18 = 0\n        var closingBracketsArrayIndex18\
    \ = 0\n        var openingBracketsArrayIndex19 = 0\n        var closingBracketsArrayIndex19\
    \ = 0\n        var openingBracketsArrayIndex20 = 0\n        var closingBracketsArrayIndex20\
    \ = 0\n        var openingBracketsArrayIndex21 = 0\n        var closingBracketsArrayIndex21\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprcd2oi68.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprcd2oi68.scala:63:5 ---------------------\e[0m\e[0m\n\e[31m63 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmb8_p5od.scala:22)\n\tat Problem.main(tmpmb8_p5od.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '(')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == ')')\n        openingBracketsCount == closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmdbdd1d_.scala:26)\n\tat Problem.main(tmpmdbdd1d_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayCopy = Array(bracketsArrayLength)\n\
    \        bracketsArrayCopy.copyToArray(bracketsArray, 0)\n        val openingBracketsArray\
    \ = Array(bracketsArrayLength)\n        val closingBracketsArray = Array(bracketsArrayLength)\n\
    \        val openingBracketsArrayCopy = Array(openingBracketsArray.length)\n \
    \       val closingBracketsArrayCopy = Array(closingBracketsArray.length)\n  \
    \      val openingBracketsArrayCopy = Array(openingBracketsArray.length)\n   \
    \     val closingBracketsArrayCopy = Array(closingBracketsArray.length)\n    \
    \    var openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n    \
    \    var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBrackets\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4di8yeg_.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4di8yeg_.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopeningBracketsArrayCopy\e[0m = Array(openingBracketsArray.length)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayCopy is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsArrayCopy\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4di8yeg_.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayCopy\e\
    [0m = Array(closingBracketsArray.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayCopy is already defined as \e[33mvalue\e\
    [0m \e[35mclosingBracketsArrayCopy\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4di8yeg_.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m \e[36mopeningBracketsArrayCopyIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayCopyIndex is already defined as \e[33mvariable\e\
    [0m \e[35mopeningBracketsArrayCopyIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4di8yeg_.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m \e[36mclosingBracketsArrayCopyIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayCopyIndex is already def"
  stdout: ''
  timestamp: 1659795101
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '(')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == ')')\n        openingBracketsCount == closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmdbdd1d_.scala:26)\n\tat Problem.main(tmpmdbdd1d_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.flatMap(x => List(\"(\", \")\").contains(x)).forall(x\
    \ => brackets.indexOf(x) == brackets.lastIndexOf(x))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpau2_okzv.scala:15:60\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(\e\
    [36mx\e[0m => List(\e[31m\"(\"\e[0m, \e[31m\")\"\e[0m).contains(x)).forall(\e\
    [36mx\e[0m => brackets.indexOf(x) == brackets.lastIndexOf(x))\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                     Found:    Boolean\n\e[31m\
    \   |\e[0m                                     Required: IterableOnce[Any]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpau2_okzv.scala:15:109\
    \ -----------------------\e[0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(\e\
    [36mx\e[0m => List(\e[31m\"(\"\e[0m, \e[31m\")\"\e[0m).contains(x)).forall(\e\
    [36mx\e[0m => brackets.indexOf(x) == brackets.lastIndexOf(x))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous\
    \ overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35mlastIndexOf\e\
    [0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String):\
    \ Int\n\e[31m   |\e[0m (x$0: Int): Int\n\e[31m   |\e[0mboth match arguments ((x\
    \ : Nothing))\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpau2_okzv.scala:15:86\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(\e\
    [36mx\e[0m => List(\e[31m\"(\"\e[0m, \e[31m\")\"\e[0m).contains(x)).forall(\e\
    [36mx\e[0m => brackets.indexOf(x) == brackets.lastIndexOf(x))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mindexOf\e[0m in \e[33mclass\e[0m \e\
    [35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String): Int\n\e[31m   |\e[0m\
    \ (x$0: Int): Int\n\e[31m   |\e[0mboth match arguments ((x : Nothing))\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation a"
  stdout: ''
  timestamp: 1659795100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => true\n       \
    \     case head :: tail => {\n                val openingBrackets = brackets.substring(0,head.length)\n\
    \                val closingBrackets = brackets.substring(head.length)\n     \
    \           val openingBracketsCount = openingBrackets.split(\"\\\\(\").length\n\
    \                val closingBracketsCount = closingBrackets.split(\"\\\\)\").length\n\
    \                openingBracketsCount == closingBracketsCount\n            }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7832bwp.scala:18:64 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mopeningBrackets\e\
    [0m = brackets.substring(\e[31m0\e[0m,head.length)\n\e[31m\e[31m   |\e[0m    \
    \                                                       ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value length is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7832bwp.scala:19:62 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mclosingBrackets\e\
    [0m = brackets.substring(head.length)\n\e[31m\e[31m   |\e[0m                 \
    \                                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                 value length is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795102
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsCount = bracketsArray.count(_\
    \ == '(')\n        val closingBracketsCount = bracketsArray.count(_ == ')')\n\
    \        openingBracketsCount != closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6iv5mnwq.scala:22)\n\tat Problem.main(tmp6iv5mnwq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfxr1sjd4.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfxr1sjd4.scala:69:5 ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwoe7vrkd.scala:24)\n\tat Problem.main(tmpwoe7vrkd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsCount = bracketsArray.count(_\
    \ == '(')\n        val closingBracketsCount = bracketsArray.count(_ == ')')\n\
    \        openingBracketsCount != closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6iv5mnwq.scala:22)\n\tat Problem.main(tmp6iv5mnwq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795102
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ = 0\n        var closingBrackets = 0\n        var currentChar = 0\n        for(currentChar\
    \ <- 0 until bracketsArray.length) {\n            if(bracketsArray(currentChar)\
    \ == '(') {\n                openingBrackets += 1\n            } else if(bracketsArray(currentChar)\
    \ == ')') {\n                closingBrackets += 1\n            }\n        }\n\
    \        if(openingBrackets == closingBrackets) {\n            return true\n \
    \       }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1p8huchg.scala:37)\n\tat Problem.main(tmp1p8huchg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfxr1sjd4.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfxr1sjd4.scala:69:5 ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        if (openingBracketsCount\
    \ != closingBracketsCount) {\n            return false\n        }\n        val\
    \ openingBracketsMap = openingBrackets.toMap\n        val closingBracketsMap =\
    \ closingBrackets.toMap\n        val openingBracketsMapKeys = openingBracketsMap.keys\n\
    \        val closingBracketsMapKeys = closingBracketsMap.keys\n        val openingBracketsMapValues\
    \ = openingBracketsMap.values.toList\n        val closingBracketsMapValues = closingBracketsMap.values.toList\n\
    \        val openingBracketsMapValuesCount = openingBracketsMapValues.size\n \
    \       val closingBracketsMapValuesCount = closingBracketsMapValues.size\n  \
    \      if (openingBracketsMapValuesCount != closingBracketsMapValuesCount) {\n\
    \            return false\n        }\n        val openingBracketsMapKeysCount\
    \ = openingBracketsMapKeys.size\n        val closingBracketsMapKeysCount = closingBracketsMapKeys.size\n\
    \        if (openingBracketsMapKeysCount != closingBracketsMapKeysCount) {\n \
    \           return false\n        }\n        val openingBracketsMapValuesCount\
    \ = openingBracketsMapValues.map(_.length).sum\n        val closingBracketsMapValuesCount\
    \ = closingBracketsMapValues.map(_.length).sum\n        if (openingBracketsMapValuesCount\
    \ != closingBracketsMapValuesCount) {\n            return false\n        }\n \
    \       val openingBracketsMapValuesSet = openingBracketsMapValues.toSet\n   \
    \     val closingBracketsMapValuesSet = closingBracketsMapValues.toSet\n     \
    \   val openingBracketsMapValuesSetCount = openingBracketsMapValuesSet.size\n\
    \        val closingBracketsMapValuesSetCount = closingBracketsMapValuesSet.size\n\
    \        if (openingBracketsMapValuesSetCount != closingBracketsMapValuesSetCount)\
    \ {\n            return false\n        }\n        val openingBracketsMapValuesSet\
    \ = openingBracketsMapValues.toSet\n        val closingBracketsMapValuesSet =\
    \ closingBra\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjiq52mat.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMapValuesCount\e\
    [0m = openingBracketsMapValues.map(_.length).sum\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsMapValuesCount is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsMapValuesCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjiq52mat.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMapValuesCount\e\
    [0m = closingBracketsMapValues.map(_.length).sum\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsMapValuesCount is already defined as \e[33mvalue\e\
    [0m \e[35mclosingBracketsMapValuesCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjiq52mat.scala:50:12 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMapValuesSet\e\
    [0m = openingBracketsMapValues.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsMapValuesSet is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsMapValuesSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjiq52mat.scala:51:12 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMapValuesSet\e\
    [0m = closingBra\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsMapValuesSet is already defined as \e[33mvalue\e\
    [0m \e[35mclosingBracketsMapValuesSet\e[0m\n\e[31m   |\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659795102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case List() | List(\"(\",\
    \ \")\") => true\n            case List(\"(\", \")\") => true\n            case\
    \ _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqzg8biq5.scala:16:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m List() | List(\e[31m\"(\"\
    \e[0m, \e[31m\")\"\e[0m) => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^\e[0m\n\e[31m   |\e[0m        Values of types String and\
    \ Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpqzg8biq5.scala:16:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \     \e[33mcase\e[0m List() | List(\e[31m\"(\"\e[0m, \e[31m\")\"\e[0m) => \e\
    [31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                                    ^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpqzg8biq5.scala:17:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m List(\e[31m\"(\"\e[0m, \e\
    [31m\")\"\e[0m) => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char cannot be\
    \ compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpqzg8biq5.scala:17:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m List(\e[31m\"(\"\e[0m, \e\
    [31m\")\"\e[0m) => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \       ^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char cannot\
    \ be compared with == or !=\n4 errors found\n"
  stdout: ''
  timestamp: 1659795102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"(\", \")\")\n        val closingBracketsArray = Array(\"(\", \")\"\
    )\n        val openingBracketsCount = openingBracketsArray.length\n        val\
    \ closingBracketsCount = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArray = Array.fill(openingBracketsArrayLength)(0)\n\
    \        val closingBracketsArray = Array.fill(closingBracketsArrayLength)(0)\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArray\
    \ = Array.fill(openingBracketsArrayLength)(0)\n        val closingBracketsArray\
    \ = Array.fill(closingBracketsArrayLength)(0)\n        val openingBracketsCount\
    \ = openingBracketsArray.length\n        val closingBracketsCount = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArray\
    \ = Array.fill(openingBracketsArrayLength)(0)\n        val closingBracketsArray\
    \ = Array.fill(closingBracketsArrayLength)(0)\n        val openingBracketsCount\
    \ = openingBracketsArray.length\n        val closingBracketsCount = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArray\
    \ = Array.fill(openingBracketsArrayLength)(0)\n        val closingBracketsArray\
    \ = Array.fill(closingBracketsArrayLength)(0)\n        val openingBracketsCount\
    \ = openingBracketsArray.length\n        val closingBracketsCount = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArray\
    \ = Array.fill(openingBracketsArrayLength)(0)\n        val closingBracketsArray\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa2kx3o3d.scala:45:34 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArray\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa2kx3o3d.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopeningBracketsArray\e[0m = Array.fill(openingBracketsArrayLength)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArray is already defined as \e[33mvalue\e[0m\
    \ \e[35mopeningBracketsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpa2kx3o3d.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArray\e[0m\
    \ = Array.fill(closingBracketsArrayLength)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArray is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosingBracketsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpa2kx3o3d.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArrayLength\e\
    [0m = openingBracketsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa2kx3o3d.scala:"
  stdout: ''
  timestamp: 1659795101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayIndex = 0\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        var currentBracketsCount\
    \ = 0\n        var currentBracketsIndex = 0\n        var currentBracketsString\
    \ = \"\"\n        var currentBracketsStringIndex = 0\n        var currentBracketsStringLength\
    \ = 0\n        var currentBracketsStringChar = 0\n        var currentBracketsStringCharIndex\
    \ = 0\n        var currentBracketsStringCharLength = 0\n        var currentBracketsStringCharArrayIndex\
    \ = 0\n        var currentBracketsStringCharArrayLength = 0\n        var currentBracketsStringCharArrayIndex\
    \ = 0\n        var currentBracketsStringCharArrayIndex = 0\n        var currentBracketsStringCharArrayIndex\
    \ = 0\n        var currentBracketsStringCharArrayIndex = 0\n        var currentBracketsStringCharArrayIndex\
    \ = 0\n        var currentBracketsStringCharArrayIndex = 0\n        var currentBracketsStringCharArrayIndex\
    \ = 0\n        var currentBracketsStringCharArrayIndex = 0\n        var currentBracketsStringCharArrayIndex\
    \ = 0\n        var currentBracketsStringCharArrayIndex = 0\n        var currentBracketsStringCharArrayIndex\
    \ = 0\n        var currentBracketsStringCharArrayIndex = 0\n        var currentBracketsStringCharArrayIndex\
    \ = 0\n        var currentBracketsStringCharArrayIndex = 0\n        var currentBracketsStringCharArrayIndex\
    \ = 0\n        var currentBracketsStringCharArrayIndex = 0\n        var currentBracketsStringCharArrayIndex\
    \ = 0\n        var currentBracketsStringCharArrayIndex = 0\n        var currentBracketsStringCharArrayIndex\
    \ = 0\n        var currentBracketsStringCharArrayIndex = 0\n        var currentBracketsStringCharArrayIndex\
    \ = 0\n        var currentBracketsStringCharArrayIndex = 0\n        var currentBracketsStringCharArrayIndex\
    \ = 0\n        var currentBracketsStringCharArrayIndex = 0\n        var currentBracketsStringCharArrayIndex\
    \ = 0\n        var currentBracketsStringCharArrayIndex = 0\n        var currentBracketsStringCharArrayIndex\
    \ = 0\n        var currentBracketsStringCharArrayIndex = 0\n        var currentBracketsStringCharArrayIndex\
    \ = 0\n        var currentBracketsStringCharArrayIndex = 0\n        var currentBracketsStringCharArrayIndex\
    \ = 0\n        var currentBracketsStringCharArrayIndex = 0\n        var currentBracketsStringCharArrayIndex\
    \ = 0\n        var currentBracketsStringCharArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptzkecoki.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptzkecoki.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketsStringCharArrayIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcurrentBracketsStringCharArrayIndex is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentBracketsStringCharArrayIndex\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptzkecoki.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketsStringCharArrayIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcurrentBracketsStringCharArrayIndex is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentBracketsStringCharArrayIndex\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptzkecoki.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketsStringCharArrayIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcurrentBracketsStringCharArrayIndex is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentBracketsStringCharArrayIndex\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptzkecoki.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketsStringCharArrayIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcurrentBracketsStringCharArr"
  stdout: ''
  timestamp: 1659795101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toList\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayIterator = bracketsArray.iterator\n\
    \        var openingBracketsCount = 0\n        var closingBracketsCount = 0\n\
    \        while (bracketsArrayIterator.hasNext) {\n            val currentBracket\
    \ = bracketsArrayIterator.next()\n            if (currentBracket == \"(\") {\n\
    \                openingBracketsCount += 1\n            } else if (currentBracket\
    \ == \")\") {\n                closingBracketsCount += 1\n            }\n    \
    \    }\n        return openingBracketsCount == bracketsArrayLength && closingBracketsCount\
    \ == bracketsArrayLength\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpd2x6mxdc.scala:22:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (currentBracket == \e[31m\"\
    (\"\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpd2x6mxdc.scala:24:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (currentBracket\
    \ == \e[31m\")\"\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659795101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketCount = 0\n        var closingBracketCount\
    \ = 0\n        var currentBracket = bracketsArray(0)\n        for(i <- 1 to bracketsArrayLength)\
    \ {\n            currentBracket = currentBracket + bracketsArray(i)\n        \
    \    if(currentBracket == \"(\") {\n                openingBracketCount = openingBracketCount\
    \ + 1\n            }\n            if(currentBracket == \")\") {\n            \
    \    closingBracketCount = closingBracketCount + 1\n            }\n          \
    \  if(openingBracketCount == closingBracketCount) {\n                return true\n\
    \            }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9r7i8tk6.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            currentBracket =\
    \ currentBracket + bracketsArray(i)\n\e[31m\e[31m   |\e[0m                   \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                  Found:    Int\n\e[31m   |\e[0m                            \
    \ Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp9r7i8tk6.scala:22:15\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \     \e[33mif\e[0m(currentBracket == \e[31m\"(\"\e[0m) {\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp9r7i8tk6.scala:25:15 -----------------------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            \e[33mif\e[0m(currentBracket == \e[31m\")\"\e\
    [0m) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n3 errors found\n"
  stdout: ''
  timestamp: 1659795102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.flatMap(x => x.toList).forall(x => brackets.indexOf(x)\
    \ == brackets.lastIndexOf(x))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8thcidzq.scala:15:39 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(\e[36mx\e[0m => x.toList).forall(\e\
    [36mx\e[0m => brackets.indexOf(x) == brackets.lastIndexOf(x))\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \          value toList is not a member of Char - did you mean x.toInt?\n\e[31m\e\
    [31m-- [E051] Reference Error: /tmp/tmp8thcidzq.scala:15:91 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(\e[36mx\e[0m => x.toList).forall(\e\
    [36mx\e[0m => brackets.indexOf(x) == brackets.lastIndexOf(x))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mlastIndexOf\e[0m in \e[33mclass\e\
    [0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String): Int\n\e[31m \
    \  |\e[0m (x$0: Int): Int\n\e[31m   |\e[0mboth match arguments ((x : Nothing))\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmp8thcidzq.scala:15:68\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(\e\
    [36mx\e[0m => x.toList).forall(\e[36mx\e[0m => brackets.indexOf(x) == brackets.lastIndexOf(x))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mindexOf\e[0m in \e[33mclass\e[0m \e[35mString\e[0m\
    \ with types\n\e[31m   |\e[0m (x$0: String): Int\n\e[31m   |\e[0m (x$0: Int):\
    \ Int\n\e[31m   |\e[0mboth match arguments ((x : Nothing))\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795102
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        openingBrackets.forall(closingBrackets.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphjtlrxev.scala:20)\n\tat Problem.main(tmphjtlrxev.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayCopy = Array(bracketsArrayLength)\n\
    \        System.arraycopy(bracketsArray, 0, bracketsArrayCopy, 0, bracketsArrayLength)\n\
    \        val bracketsArrayCopyLength = bracketsArrayCopy.length\n        val bracketsArrayCopyCopy\
    \ = Array(bracketsArrayCopyLength)\n        System.arraycopy(bracketsArrayCopy,\
    \ 0, bracketsArrayCopyCopy, 0, bracketsArrayCopyLength)\n        val bracketsArrayCopyCopyLength\
    \ = bracketsArrayCopyCopy.length\n        val bracketsArrayCopyCopyCopy = Array(bracketsArrayCopyCopyLength)\n\
    \        System.arraycopy(bracketsArrayCopyCopy, 0, bracketsArrayCopyCopyCopy,\
    \ 0, bracketsArrayCopyCopyLength)\n        val bracketsArrayCopyCopyCopyLength\
    \ = bracketsArrayCopyCopyCopy.length\n        val bracketsArrayCopyCopyCopyCopy\
    \ = Array(bracketsArrayCopyCopyCopyLength)\n        System.arraycopy(bracketsArrayCopyCopyCopy,\
    \ 0, bracketsArrayCopyCopyCopyCopy, 0, bracketsArrayCopyCopyCopyLength)\n    \
    \    val bracketsArrayCopyCopyCopyCopyLength = bracketsArrayCopyCopyCopyCopy.length\n\
    \        val bracketsArrayCopyCopyCopyCopyCopy = Array(bracketsArrayCopyCopyCopyCopyLength)\n\
    \        System.arraycopy(bracketsArrayCopyCopyCopyCopy, 0, bracketsArrayCopyCopyCopyCopyCopy,\
    \ 0, bracketsArrayCopyCopyCopyCopyLength)\n        val bracketsArrayCopyCopyCopyCopyCopyLength\
    \ = bracketsArrayCopyCopyCopyCopyCopy.length\n        val bracketsArrayCopyCopyCopyCopyCopyCopy\
    \ = Array(bracketsArrayCopyCopyCopyCopyCopyLength)\n        System.arraycopy(bracketsArrayCopyCopyCopyCopyCopyCopy,\
    \ 0, bracketsArrayCopyCopyCopyCopyCopyCopy, 0, bracketsArrayCopyCopyCopyCopyCopyLength)\n\
    \        val bracketsArrayCopyCopyCopyCopyCopyCopyLength = bracketsArrayCopyCopyCopyCopyCopyCopy.length\n\
    \        val bracketsArrayCopyCopyCopyCopyCopyCopyCopy = Array(bracketsArrayCopyCopyCopyCopyCopyCopyLength)\n\
    \        System.arraycopy(bracketsArrayCopyCopyCopyCopyCopyCopy, 0, bracketsArrayCopyCopyCopyCopyCopyCopy,\
    \ 0, bracketsArrayCopyCopyCopyCopyCopyCopyLength)\n        val bracketsArrayCopyCopyCopyCopyCopyCopyCopyLength\
    \ = bracketsArrayCopy\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2c8j8p8x.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795102
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5tcx0jiy.scala:22)\n\tat Problem.main(tmp5tcx0jiy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(true){ (acc, c) =>\n            if (acc.toBoolean)\
    \ {\n                if (c == \"(\")\n                    acc && correctBracketing(brackets.dropRight(1))\n\
    \                else if (c == \")\")\n                    acc && correctBracketing(brackets.dropRight(2))\n\
    \                else\n                    acc && false\n            }\n     \
    \       else false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdvcecrm5.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (acc.toBoolean) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   value toBoolean is not a member of Boolean\n\e[31m\e[31m-- Error: /tmp/tmpdvcecrm5.scala:17:20\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \         \e[33mif\e[0m (c == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpdvcecrm5.scala:19:25\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \         \e[33melse\e[0m \e[33mif\e[0m (c == \e[31m\")\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1659795103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ = 0\n        var closingBrackets = 0\n        var openingBracketsArray = Array[Char]()\n\
    \        var closingBracketsArray = Array[Char]()\n        var currentChar = bracketsArray(0)\n\
    \        for(i <- 0 until bracketsArray.length){\n            currentChar = bracketsArray(i)\n\
    \            if(currentChar == '('){\n                openingBrackets += 1\n \
    \               openingBracketsArray += currentChar\n            }\n         \
    \   if(currentChar == ')'){\n                closingBrackets += 1\n          \
    \      closingBracketsArray += currentChar\n            }\n        }\n       \
    \ if(openingBrackets == closingBrackets){\n            true\n        }\n     \
    \   else{\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnr_c8yqw.scala:25:37 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                openingBracketsArray += currentChar\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m  value += is not a member of Array[Char] - did you mean Array[Char].!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnr_c8yqw.scala:29:37 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                closingBracketsArray += currentChar\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m  value += is not a member of Array[Char] - did you mean Array[Char].!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795103
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        openingBrackets.size == closingBrackets.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptu298any.scala:20)\n\tat Problem.main(tmptu298any.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfxr1sjd4.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfxr1sjd4.scala:69:5 ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentBracket = bracketsArray(0)\n        var currentBracketCount\
    \ = 0\n        var currentBracketCount2 = 0\n        var currentBracketCount3\
    \ = 0\n        var currentBracketCount4 = 0\n        var currentBracketCount5\
    \ = 0\n        var currentBracketCount6 = 0\n        var currentBracketCount7\
    \ = 0\n        var currentBracketCount8 = 0\n        var currentBracketCount9\
    \ = 0\n        var currentBracketCount10 = 0\n        var currentBracketCount11\
    \ = 0\n        var currentBracketCount12 = 0\n        var currentBracketCount13\
    \ = 0\n        var currentBracketCount14 = 0\n        var currentBracketCount15\
    \ = 0\n        var currentBracketCount16 = 0\n        var currentBracketCount17\
    \ = 0\n        var currentBracketCount18 = 0\n        var currentBracketCount19\
    \ = 0\n        var currentBracketCount20 = 0\n        var currentBracketCount21\
    \ = 0\n        var currentBracketCount22 = 0\n        var currentBracketCount23\
    \ = 0\n        var currentBracketCount24 = 0\n        var currentBracketCount25\
    \ = 0\n        var currentBracketCount26 = 0\n        var currentBracketCount27\
    \ = 0\n        var currentBracketCount28 = 0\n        var currentBracketCount29\
    \ = 0\n        var currentBracketCount30 = 0\n        var currentBracketCount31\
    \ = 0\n        var currentBracketCount32 = 0\n        var currentBracketCount33\
    \ = 0\n        var currentBracketCount34 = 0\n        var currentBracketCount35\
    \ = 0\n        var currentBracketCount36 = 0\n        var currentBracketCount37\
    \ = 0\n        var currentBracketCount38 = 0\n        var currentBracketCount39\
    \ = 0\n        var currentBracketCount40 = 0\n        var currentBracketCount41\
    \ = 0\n        var currentBracketCount42 = 0\n        var currentBracketCount43\
    \ = 0\n        var currentBracketCount44 = 0\n        var currentBracketCount45\
    \ = 0\n        var currentBracketCount46 = 0\n        var currentBracketCount47\
    \ = 0\n        var currentBracketCount48 = 0\n        var currentBracketCount49\
    \ = 0\n        var currentBracketCount50 = 0\n        var currentBracketCount51\
    \ = 0\n        var currentBracketCount52 = 0\n        var currentBracketCount53\
    \ = 0\n        var currentBracketCount54 = 0\n        var currentBracketCount55\
    \ = 0\n        var currentBracketCount56 = 0\n        var currentBracketCount57\
    \ = 0\n        var currentBracketCount58 = 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0lmprq8g.scala:78:5\
    \ ---------------------\e[0m\e[0m\n\e[31m78 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795103
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        openingBrackets.forall(closingBrackets.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphjtlrxev.scala:20)\n\tat Problem.main(tmphjtlrxev.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795103
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsCount = bracketsArray.filter(c\
    \ => c == '(').length\n        val closingBracketsCount = bracketsArray.filter(c\
    \ => c == ')').length\n        openingBracketsCount == closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwyb7eumx.scala:27)\n\tat Problem.main(tmpwyb7eumx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketCount = 0\n        var closingBracketCount\
    \ = 0\n        var currentBracket = bracketsArray(0)\n        var currentBracketCount\
    \ = 0\n        var currentBracketOpeningCount = 1\n        var currentBracketClosingCount\
    \ = 1\n        var currentBracketOpeningChar = currentBracket\n        var currentBracketClosingChar\
    \ = currentBracket\n        var currentBracketOpeningCharCount = 1\n        var\
    \ currentBracketClosingCharCount = 1\n        var currentBracketOpeningCharArray\
    \ = Array[Char]()\n        var currentBracketClosingCharArray = Array[Char]()\n\
    \        var currentBracketOpeningCharArrayLength = currentBracketOpeningCharArray.length\n\
    \        var currentBracketClosingCharArrayLength = currentBracketClosingCharArray.length\n\
    \        var currentBracketOpeningCharArrayIndex = 0\n        var currentBracketClosingCharArrayIndex\
    \ = 0\n        var currentBracketOpeningCharArrayIndexLength = 0\n        var\
    \ currentBracketClosingCharArrayIndexLength = 0\n        var currentBracketOpeningCharArrayIndexLength\
    \ = 0\n        var currentBracketOpeningCharArrayIndex = 0\n        var currentBracketClosingCharArrayIndex\
    \ = 0\n        var currentBracketOpeningCharArrayIndexLength = 0\n        var\
    \ currentBracketClosingCharArrayIndexLength = 0\n        var currentBracketOpeningCharArrayIndex\
    \ = 0\n        var currentBracketClosingCharArrayIndex = 0\n        var currentBracketOpeningCharArrayIndexLength\
    \ = 0\n        var currentBracketClosingCharArrayIndexLength = 0\n        var\
    \ currentBracketOpeningCharArrayIndex = 0\n        var currentBracketClosingCharArrayIndex\
    \ = 0\n        var currentBracketOpeningCharArrayIndexLength = 0\n        var\
    \ currentBracketClosingCharArrayIndexLength = 0\n        var currentBracketOpeningCharArrayIndex\
    \ = 0\n        var currentBracketClosingCharArrayIndex = 0\n        var currentBracketOpeningCharArrayIndexLength\
    \ = 0\n        var currentBracketClosingCharArrayIndexLength = 0\n        var\
    \ currentBracketOpeningCharArrayIndex = 0\n        var currentBracketClosingCharArrayIndex\
    \ = 0\n        var currentBracketOpeningCharArrayIndexLength = 0\n        var\
    \ currentBracketClosingCharArrayIndexLength = 0\n        var currentBracketOpeningCharArrayIndex\
    \ = 0\n        var currentBracketClosingCharArrayIndex = 0\n        var currentBracketOpeningCharArrayIndexLength\
    \ = 0\n        var currentBracketClosingChar\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvtkteo88.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvtkteo88.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketOpeningCharArrayIndexLength\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mcurrentBracketOpeningCharArrayIndexLength is already defined as \e\
    [33mvariable\e[0m \e[35mcurrentBracketOpeningCharArrayIndexLength\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvtkteo88.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketOpeningCharArrayIndex\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketOpeningCharArrayIndex is already defined as\
    \ \e[33mvariable\e[0m \e[35mcurrentBracketOpeningCharArrayIndex\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvtkteo88.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketClosingCharArrayIndex\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketClosingCharArrayIndex is already defined as\
    \ \e[33mvariable\e[0m \e[35mcurrentBracketClosingCharArrayIndex\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvtkteo88.scala:38:12 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketOpeningCharArrayIndexLength\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m"
  stdout: ''
  timestamp: 1659795109
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCountInString = 0\n        var closingBracketsCountInString\
    \ = 0\n        var openingBracketsCountInArray = 0\n        var closingBracketsCountInArray\
    \ = 0\n        var openingBracketsCountInArrayAndString = 0\n        var closingBracketsCountInArrayAndString\
    \ = 0\n        var openingBracketsCountInArrayAndStringAndBrackets = 0\n     \
    \   var closingBracketsCountInArrayAndStringAndBrackets = 0\n        var openingBracketsCountInArrayAndStringAndBracketsAndBrackets\
    \ = 0\n        var closingBracketsCountInArrayAndStringAndBracketsAndBrackets\
    \ = 0\n        var openingBracketsCountInArrayAndStringAndBracketsAndBracketsAndBrackets\
    \ = 0\n        var closingBracketsCountInArrayAndStringAndBracketsAndBracketsAndBrackets\
    \ = 0\n        var openingBracketsCountInArrayAndStringAndBracketsAndBracketsAndBracketsAndBrackets\
    \ = 0\n        var closingBracketsCountInArrayAndStringAndBracketsAndBracketsAndBracketsAndBrackets\
    \ = 0\n        var openingBracketsCountInArrayAndStringAndBracketsAndBracketsAndBracketsAndBracketsAndBrackets\
    \ = 0\n        var closingBracketsCountInArrayAndStringAndBracketsAndBracketsAndBracketsAndBracketsAndBrackets\
    \ = 0\n        var openingBracketsCountInArrayAndStringAndBracketsAndBracketsAndBracketsAndBracketsAndBracketsAndBrackets\
    \ = 0\n        var closingBracketsCountInArrayAndStringAndBracketsAndBracketsAndBracketsAndBracketsAndBracketsAndBrackets\
    \ = 0\n        var openingBracketsCountInArrayAndStringAndBracketsAndBracketsAndBracketsAndBracketsAndBracketsAndBracketsAndBrackets\
    \ = 0\n        var closingBracketsCountInArrayAndStringAndBracketsAndBracketsAndBracketsAndBracketsAndBracketsAndBracketsAndBrackets\
    \ = 0\n        var openingBracketsCountInArrayAndStringAndBracketsAndBracketsAndBracketsAndBracketsAndBracketsAndBracketsAndBracketsAndBrackets\
    \ = 0\n        var closingBracketsCountInArrayAndStringAndBracketsAndBracketsAndBracketsAndBracketsAndBracket\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu1yksam9.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpu1yksam9.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        openingBrackets.forall(x => closingBrackets.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnwwxzlpg.scala:20)\n\tat Problem.main(tmpnwwxzlpg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfxr1sjd4.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfxr1sjd4.scala:69:5 ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentBracket = bracketsArray(0)\n        var currentBracketCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpen\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq6dkisss.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq6dkisss.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketOpeningCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentBracketOpeningCount\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentBracketOpeningCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq6dkisss.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketClosingCount\e[0m = \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketClosingCount is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentBracketClosingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq6dkisss.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketOpeningCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketOpeningCount is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentBracketOpeningCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq6dkisss.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketClosingCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketClosingCount is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentBracketClosingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded met"
  stdout: ''
  timestamp: 1659795090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(true){\n            case (true, x) =>\
    \ x\n            case (false, (x: String, y: String)) => if (x == y) true else\
    \ false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv8n7nqom.scala:16:30\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m (\e\
    [31mtrue\e[0m, x) => x\n\e[31m\e[31m   |\e[0m                              ^\e\
    [0m\n\e[31m   |\e[0m                              Found:    (x : Char)\n\e[31m\
    \   |\e[0m                              Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"(\", \"[\", \"{\", \"(\", \")\", \"]\", \"}\", \"]\")\n        val\
    \ closingBracketsArray = Array(\")\", \"]\", \"}\", \"]\", \"]\", \"}\", \"}\"\
    , \"}\")\n        val openingBracketsSet = openingBracketsArray.toSet\n      \
    \  val closingBracketsSet = closingBracketsArray.toSet\n        val openingBracketsArraySize\
    \ = openingBracketsArray.length\n        val closingBracketsArraySize = closingBracketsArray.length\n\
    \        val openingBracketsArrayIterator = openingBracketsArray.iterator\n  \
    \      val closingBracketsArrayIterator = closingBracketsArray.iterator\n    \
    \    val openingBracketsSetIterator = openingBracketsSet.iterator\n        val\
    \ closingBracketsSetIterator = closingBracketsSet.iterator\n        var openingBracketsArrayIndex\
    \ = 0\n        var closingBracketsArrayIndex = 0\n        var openingBracketsSetIndex\
    \ = 0\n        var closingBracketsSetIndex = 0\n        while (openingBracketsArrayIndex\
    \ < openingBracketsArraySize && closingBracketsArrayIndex < closingBracketsArraySize)\
    \ {\n            if (openingBracketsArrayIndex == closingBracketsArrayIndex) {\n\
    \                openingBracketsArrayIndex += 1\n                closingBracketsArrayIndex\
    \ += 1\n            } else if (openingBracketsArrayIndex < closingBracketsArrayIndex)\
    \ {\n                val openingBracket = openingBracketsArrayIterator.next\n\
    \                val closingBracket = closingBracketsArrayIterator.next\n    \
    \            if (openingBracket == closingBracket) {\n                    openingBracketsArrayIndex\
    \ += 1\n                    closingBracketsArrayIndex += 1\n                }\
    \ else {\n                    return false\n                }\n            } else\
    \ if (openingBracketsArrayIndex > closingBracketsArrayIndex) {\n             \
    \   val openingBracket = openingBracketsSetIterator.next\n                val\
    \ closingBracket = closingBracketsSetIterator.next\n                if (openingBracket\
    \ == closingBracket) {\n                    openingBracketsSetIndex += 1\n   \
    \                 closingBracketsSetIndex += 1\n                } else {\n   \
    \                 return false\n                }\n            }\n        }\n\
    \        return openingBracketsArrayIndex == openingBracketsArraySize && closingBracketsArrayIndex\
    \ == closingBracketsArraySize\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp74nnivs6.scala:61)\n\tat Problem.main(tmp74nnivs6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketCount = 0\n        var closingBracketCount\
    \ = 0\n        var currentBracket = bracketsArray(0)\n        var currentBracketCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount = 0\n        var currentBracketClosingCount\
    \ = 0\n        var currentBracketOpeningCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptjy8r8ot.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjy8r8ot.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketOpeningCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentBracketOpeningCount\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentBracketOpeningCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptjy8r8ot.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketClosingCount\e[0m = \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketClosingCount is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentBracketClosingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjy8r8ot.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketOpeningCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketOpeningCount is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentBracketOpeningCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjy8r8ot.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketClosingCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketClosingCount is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentBracketClosingCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded met"
  stdout: ''
  timestamp: 1659795110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptvz8fnnh.scala:22)\n\tat Problem.main(tmptvz8fnnh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCountArray = new Array[Int](bracketsArrayLength)\n\
    \        var closingBracketsCountArray = new Array[Int](bracketsArrayLength)\n\
    \        var openingBracketsCountArrayIndex = 0\n        var closingBracketsCountArrayIndex\
    \ = 0\n        var openingBracketsCountArrayIndex2 = 0\n        var closingBracketsCountArrayIndex2\
    \ = 0\n        var openingBracketsCountArrayIndex3 = 0\n        var closingBracketsCountArrayIndex3\
    \ = 0\n        var openingBracketsCountArrayIndex4 = 0\n        var closingBracketsCountArrayIndex4\
    \ = 0\n        var openingBracketsCountArrayIndex5 = 0\n        var closingBracketsCountArrayIndex5\
    \ = 0\n        var openingBracketsCountArrayIndex6 = 0\n        var closingBracketsCountArrayIndex6\
    \ = 0\n        var openingBracketsCountArrayIndex7 = 0\n        var closingBracketsCountArrayIndex7\
    \ = 0\n        var openingBracketsCountArrayIndex8 = 0\n        var closingBracketsCountArrayIndex8\
    \ = 0\n        var openingBracketsCountArrayIndex9 = 0\n        var closingBracketsCountArrayIndex9\
    \ = 0\n        var openingBracketsCountArrayIndex10 = 0\n        var closingBracketsCountArrayIndex10\
    \ = 0\n        var openingBracketsCountArrayIndex11 = 0\n        var closingBracketsCountArrayIndex11\
    \ = 0\n        var openingBracketsCountArrayIndex12 = 0\n        var closingBracketsCountArrayIndex12\
    \ = 0\n        var openingBracketsCountArrayIndex13 = 0\n        var closingBracketsCountArrayIndex13\
    \ = 0\n        var openingBracketsCountArrayIndex14 = 0\n        var closingBracketsCountArrayIndex14\
    \ = 0\n        var openingBracketsCountArrayIndex15 = 0\n        var closingBracketsCountArrayIndex15\
    \ = 0\n        var openingBracketsCountArrayIndex16 = 0\n        var closingBracketsCountArrayIndex16\
    \ = 0\n        var openingBracketsCountArrayIndex17 = 0\n        var closingBracketsCountArrayIndex17\
    \ = 0\n        var openingBracketsCountArrayIndex18 = 0\n        var closingBracketsCountArrayIndex18\
    \ = 0\n        var openingBracketsCountArrayIndex19 = 0\n        var closingBracketsCountArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpanxz5n9y.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpanxz5n9y.scala:59:5 ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795111
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => true\n       \
    \     case head :: tail =>\n                head == \"(\" && correctBracketing(tail)\n\
    \            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjos0tw0d.scala:18:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                head == \e[31m\"(\"\e[0m && correctBracketing(tail)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Values of types Char and String cannot be compared with == or !=\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjos0tw0d.scala:18:49 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                head == \e[31m\"(\"\e[0m && correctBracketing(tail)\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^\e[0m\n\
    \e[31m   |\e[0m                                           Found:    (tail : List[Char])\n\
    \e[31m   |\e[0m                                           Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsArray = new Array[Int](bracketsArrayLength)\n\
    \        var closingBracketsArray = new Array[Int](bracketsArrayLength)\n    \
    \    var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var currentBracketsArrayIndex = 0\n        var currentBracketsArrayIndexCount\
    \ = 0\n        var currentBracketsArrayIndexCountMax = 0\n        var currentBracketsArrayIndexCountMin\
    \ = 0\n        var currentBracketsArrayIndexCountMaxIndex = 0\n        var currentBracketsArrayIndexCountMinIndex\
    \ = 0\n        var currentBracketsArrayIndexCountMaxIndex = 0\n        var currentBracketsArrayIndexCountMinIndex\
    \ = 0\n        var currentBracketsArrayIndexCountMaxIndex = 0\n        var currentBracketsArrayIndexCountMinIndex\
    \ = 0\n        var currentBracketsArrayIndexCountMaxIndex = 0\n        var currentBracketsArrayIndexCountMinIndex\
    \ = 0\n        var currentBracketsArrayIndexCountMaxIndex = 0\n        var currentBracketsArrayIndexCountMinIndex\
    \ = 0\n        var currentBracketsArrayIndexCountMaxIndex = 0\n        var currentBracketsArrayIndexCountMinIndex\
    \ = 0\n        var currentBracketsArrayIndexCountMaxIndex = 0\n        var currentBracketsArrayIndexCountMinIndex\
    \ = 0\n        var currentBracketsArrayIndexCountMaxIndex = 0\n        var currentBracketsArrayIndexCountMinIndex\
    \ = 0\n        var currentBracketsArrayIndexCountMaxIndex = 0\n        var currentBracketsArrayIndexCountMinIndex\
    \ = 0\n        var currentBracketsArrayIndexCountMaxIndex = 0\n        var currentBracketsArrayIndexCountMinIndex\
    \ = 0\n        var currentBracketsArrayIndexCountMaxIndex = 0\n        var currentBracketsArrayIndexCountMinIndex\
    \ = 0\n        var currentBracketsArrayIndexCountMaxIndex = 0\n        var currentBracketsArrayIndexCountMinIndex\
    \ = 0\n        var currentBracketsArrayIndexCountMaxIndex = 0\n        var currentBracketsArrayIndexCountMinIndex\
    \ = 0\n        var currentBracketsArrayIndexCountMaxIndex = 0\n        var currentBracketsArrayIndexCountMinIndex\
    \ = 0\n        var currentBracketsArrayIndexCountMaxIndex = 0\n        var currentBracketsArrayIndexCountMinIndex\
    \ = 0\n        var currentBracketsArrayIndexCountMaxIndex = 0\n        var \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmph1kz0nk7.scala:58:11 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmph1kz0nk7.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketsArrayIndexCountMaxIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketsArrayIndexCountMaxIndex is already defined\
    \ as \e[33mvariable\e[0m \e[35mcurrentBracketsArrayIndexCountMaxIndex\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmph1kz0nk7.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketsArrayIndexCountMinIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketsArrayIndexCountMinIndex is already defined\
    \ as \e[33mvariable\e[0m \e[35mcurrentBracketsArrayIndexCountMinIndex\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmph1kz0nk7.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketsArrayIndexCountMaxIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketsArrayIndexCountMaxIndex is already defined\
    \ as \e[33mvariable\e[0m \e[35mcurrentBracketsArrayIndexCountMaxIndex\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmph1kz0nk7.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketsArrayIndex"
  stdout: ''
  timestamp: 1659795112
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = bracketsArray.filter(c => c == '(')\n        val closingBrackets = bracketsArray.filter(c\
    \ => c == ')')\n        openingBrackets.size == closingBrackets.size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\"))\
    \ == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz_o59_ep.scala:26)\n\tat Problem.main(tmpz_o59_ep.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => true\n       \
    \     case head :: tail => {\n                val openingBrackets = brackets.substring(0,head.length)\n\
    \                val closingBrackets = brackets.substring(head.length)\n     \
    \           openingBrackets.toList match {\n                    case Nil => true\n\
    \                    case head :: tail => {\n                        closingBrackets.toList\
    \ match {\n                            case Nil => true\n                    \
    \        case head :: tail => {\n                                (head == tail.head)\
    \ && correctBracketing(tail.tail)\n                            }\n           \
    \             }\n                    }\n                }\n            }\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsp02ierl.scala:18:64 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mopeningBrackets\e\
    [0m = brackets.substring(\e[31m0\e[0m,head.length)\n\e[31m\e[31m   |\e[0m    \
    \                                                       ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value length is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsp02ierl.scala:19:62 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mclosingBrackets\e\
    [0m = brackets.substring(head.length)\n\e[31m\e[31m   |\e[0m                 \
    \                                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                 value length is not a member of Char\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpsp02ierl.scala:26:78 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                                (head == tail.head) &&\
    \ correctBracketing(tail.tail)\n\e[31m\e[31m   |\e[0m                        \
    \                                                 ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Found:    List[Char @uncheckedVariance]\n\e\
    [31m   |\e[0m                                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ = 0\n        var closingBrackets = 0\n        var openingBracketsArray = Array[Char]()\n\
    \        var closingBracketsArray = Array[Char]()\n        var openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        var closingBracketsArrayLength = closingBracketsArray.length\n\
    \        var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsArrayLength = openingBracketsArray.length\n\
    \        var closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex =\
    \ 0\n        var openingBracketsArrayLength = openingBracketsArray.length\n  \
    \      var closingBracketsArrayLength = closingBracketsArray.length\n        var\
    \ openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex = 0\n \
    \       var openingBracketsArrayLength = openingBracketsArray.length\n       \
    \ var closingBracketsArrayLength = closingBracketsArray.length\n        var openingBracketsArrayIndex\
    \ = 0\n        var closingBracketsArrayIndex = 0\n        var openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        var closingBracketsArrayLength = closingBracketsArray.length\n\
    \        var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsArrayLength = openingBracketsArray.length\n\
    \        var closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex =\
    \ 0\n        var openingBracketsArrayLength = openingBracketsArray.length\n  \
    \      var closingBracketsArrayLength = closingBracketsArray.length\n        var\
    \ openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex = 0\n \
    \       var openingBracketsArrayLength = openingBracketsArray.length\n       \
    \ var closingBracketsArrayLength = closingBracketsArray.length\n        var openingBracketsArrayIndex\
    \ = 0\n        var closingBracketsArrayIndex = 0\n        var openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        var closingBracketsArrayLength = closingBracketsArray.length\n\
    \        var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsArrayLength = openingBracketsArray.length\n\
    \        var closingBra\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpelsz1bjz.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpelsz1bjz.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mopeningBracketsArrayLength\e[0m = openingBracketsArray.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayLength is already defined as \e[33mvariable\e\
    [0m \e[35mopeningBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpelsz1bjz.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mclosingBracketsArrayLength\e\
    [0m = closingBracketsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayLength is already defined as \e[33mvariable\e\
    [0m \e[35mclosingBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpelsz1bjz.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36mopeningBracketsArrayIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayIndex is already defined as \e[33mvariable\e\
    [0m \e[35mopeningBracketsArrayIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpelsz1bjz.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m \e[36mclosingBracketsArrayIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayIndex is already defined as \e[33mvariable\e\
    [0m \e[35mclo"
  stdout: ''
  timestamp: 1659795112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfxr1sjd4.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfxr1sjd4.scala:69:5 ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfxr1sjd4.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfxr1sjd4.scala:69:5 ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(true) {\n            (acc, b) =>\n   \
    \             acc && brackets.indexOf(b) != brackets.lastIndexOf(b)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbudj2wh8.scala:21)\n\tat Problem.main(tmpbudj2wh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = mutable.HashSet[Char]()\n        val closingBrackets = mutable.HashSet[Char]()\n\
    \        val openingBracketsArray = mutable.ArrayBuffer.empty[Char]\n        val\
    \ closingBracketsArray = mutable.ArrayBuffer.empty[Char]\n        val openingBracketsString\
    \ = mutable.StringBuilder.empty[Char]\n        val closingBracketsString = mutable.StringBuilder.empty[Char]\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsString\
    \ = openingBracketsString.length\n        val closingBracketsString = closingBracketsString.length\n\
    \        var openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n\
    \        var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsStringIndex = 0\n        var closingBracketsStringIndex\
    \ = 0\n        var openingBracketsArrayIndexLength = 0\n        var closingBracketsArrayIndexLength\
    \ = 0\n        var openingBracketsStringIndexLength = 0\n        var closingBracketsStringIndexLength\
    \ = 0\n        var openingBracketsArrayIndexLength = 0\n        var closingBracketsArrayIndexLength\
    \ = 0\n        var openingBracketsStringIndexLength = 0\n        var closingBracketsStringIndexLength\
    \ = 0\n        var openingBracketsArrayIndexLength = 0\n        var closingBracketsArrayIndexLength\
    \ = 0\n        var openingBracketsStringIndexLength = 0\n        var closingBracketsStringIndexLength\
    \ = 0\n        var openingBracketsArrayIndexLength = 0\n        var closingBracketsArrayIndexLength\
    \ = 0\n        var openingBracketsStringIndexLength = 0\n        var closingBracketsStringIndexLength\
    \ = 0\n        var openingBracketsArrayIndexLength = 0\n        var closingBracketsArrayIndexLength\
    \ = 0\n        var openingBracketsStringIndexLength = 0\n        var closingBracketsStringIndexLength\
    \ = 0\n        var openingBracketsArrayIndexLength = 0\n        var closingBracketsArrayIndexLength\
    \ = 0\n        var openingBracketsStringIndexLength = 0\n        var closingBracketsStringIndexLength\
    \ = 0\n        var openingBracketsArrayIndexLength = 0\n        var closingBracketsArrayIndexLength\
    \ = 0\n        var openingBracketsStringIndexLength\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfpkg7cou.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfpkg7cou.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopeningBracketsString\e[0m = openingBracketsString.length\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mopeningBracketsString is already defined as \e[33mvalue\e[0m \e\
    [35mopeningBracketsString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfpkg7cou.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsString\e\
    [0m = closingBracketsString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsString is already defined as \e[33mvalue\e\
    [0m \e[35mclosingBracketsString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfpkg7cou.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mvar\e[0m \e[36mopeningBracketsArrayIndexLength\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayIndexLength is already defined as \e[33mvariable\e\
    [0m \e[35mopeningBracketsArrayIndexLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfpkg7cou.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mclosingBracketsArrayIndexLength\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mclosingBracketsArrayIndexLength\
    \ is already defined as \e[33mvariable\e[0m \e[35mclo"
  stdout: ''
  timestamp: 1659795113
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5tcx0jiy.scala:22)\n\tat Problem.main(tmp5tcx0jiy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => true\n       \
    \     case head :: tail =>\n                head == \"(\" && correctBracketing(tail)\n\
    \            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjos0tw0d.scala:18:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                head == \e[31m\"(\"\e[0m && correctBracketing(tail)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Values of types Char and String cannot be compared with == or !=\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjos0tw0d.scala:18:49 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                head == \e[31m\"(\"\e[0m && correctBracketing(tail)\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^\e[0m\n\
    \e[31m   |\e[0m                                           Found:    (tail : List[Char])\n\
    \e[31m   |\e[0m                                           Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795090
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(true){ (acc, c) =>\n            acc &&\
    \ brackets.toList.contains(c)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0p132wi8.scala:24)\n\tat Problem.main(tmp0p132wi8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795115
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '(')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == ')')\n        openingBracketsCount == closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmdbdd1d_.scala:26)\n\tat Problem.main(tmpmdbdd1d_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketCount = 0\n        var closingBracketCount\
    \ = 0\n        var openingBracketIndex = 0\n        var closingBracketIndex =\
    \ 0\n        var currentBracket = bracketsArray(0)\n        while (openingBracketCount\
    \ < bracketsArrayLength) {\n            if (currentBracket == bracketsArray(openingBracketCount))\
    \ {\n                openingBracketCount += 1\n            } else {\n        \
    \        openingBracketCount = 0\n                openingBracketIndex = openingBracketCount\n\
    \                currentBracket = bracketsArray(openingBracketCount)\n       \
    \     }\n        }\n        while (closingBracketCount < bracketsArrayLength)\
    \ {\n            if (currentBracket == bracketsArray(closingBracketCount)) {\n\
    \                closingBracketCount += 1\n            } else {\n            \
    \    closingBracketCount = 0\n                closingBracketIndex = closingBracketCount\n\
    \                currentBracket = bracketsArray(closingBracketCount)\n       \
    \     }\n        }\n        if (openingBracketCount != closingBracketCount) {\n\
    \            return false\n        }\n        if (openingBracketIndex != closingBracketIndex)\
    \ {\n            return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659795116
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentChar = bracketsArray(0)\n        var nextChar = bracketsArray(1)\n\
    \        while (openingBracketsCount < bracketsArrayLength) {\n            if\
    \ (currentChar == nextChar) {\n                openingBracketsCount += 1\n   \
    \         } else {\n                closingBracketsCount += 1\n              \
    \  if (openingBracketsCount == bracketsArrayLength) {\n                    if\
    \ (closingBracketsCount == bracketsArrayLength) {\n                        return\
    \ true\n                    } else {\n                        return false\n \
    \                   }\n                }\n            }\n            currentChar\
    \ = nextChar\n            nextChar = bracketsArray(openingBracketsCount + 1)\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length\
    \ 2\n\tat Problem$.correctBracketing(tmp2ktejpud.scala:35)\n\tat Problem$.main(tmp2ktejpud.scala:40)\n\
    \tat Problem.main(tmp2ktejpud.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ = 0\n        var closingBrackets = 0\n        var openingBracketsArray = Array[Char]()\n\
    \        var closingBracketsArray = Array[Char]()\n        var openingBracketsArraySize\
    \ = Array[Int]()\n        var closingBracketsArraySize = Array[Int]()\n      \
    \  var openingBracketsArrayPosition = Array[Int]()\n        var closingBracketsArrayPosition\
    \ = Array[Int]()\n        var openingBracketsArrayPositionSize = Array[Int]()\n\
    \        var closingBracketsArrayPositionSize = Array[Int]()\n        var openingBracketsArrayPositionPosition\
    \ = Array[Int]()\n        var closingBracketsArrayPositionPosition = Array[Int]()\n\
    \        var openingBracketsArrayPositionPositionSize = Array[Int]()\n       \
    \ var closingBracketsArrayPositionPositionSize = Array[Int]()\n        var openingBracketsArrayPositionPositionPosition\
    \ = Array[Int]()\n        var closingBracketsArrayPositionPositionPosition = Array[Int]()\n\
    \        var openingBracketsArrayPositionPositionPositionSize = Array[Int]()\n\
    \        var closingBracketsArrayPositionPositionPositionSize = Array[Int]()\n\
    \        var openingBracketsArrayPositionPositionPositionPosition = Array[Int]()\n\
    \        var closingBracketsArrayPositionPositionPositionPosition = Array[Int]()\n\
    \        var openingBracketsArrayPositionPositionPositionPositionSize = Array[Int]()\n\
    \        var closingBracketsArrayPositionPositionPositionPositionSize = Array[Int]()\n\
    \        var openingBracketsArrayPositionPositionPositionPositionPosition = Array[Int]()\n\
    \        var closingBracketsArrayPositionPositionPositionPositionPosition = Array[Int]()\n\
    \        var openingBracketsArrayPositionPositionPositionPositionPositionSize\
    \ = Array[Int]()\n        var closingBracketsArrayPositionPositionPositionPositionPositionSize\
    \ = Array[Int]()\n        var openingBracketsArrayPositionPositionPositionPositionPositionPosition\
    \ = Array[Int]()\n        var closingBracketsArrayPositionPositionPositionPositionPositionPosition\
    \ = Array[Int]()\n        var openingBracketsArrayPositionPositionPositionPositionPositionPositionSize\
    \ = Array[Int]()\n        var closingBracketsArrayPositionPositionPositionPositionPositionPositionSize\
    \ = Array[Int]()\n        var openingBracketsArrayPositionPositionPositionPositionPositionPositionPositionPosition\
    \ = Array[Int]()\n        var closingBra\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9u68jq2s.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9u68jq2s.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCountArray = new Array[Int](bracketsArrayLength)\n\
    \        var closingBracketsCountArray = new Array[Int](bracketsArrayLength)\n\
    \        var openingBracketsCountArrayIndex = 0\n        var closingBracketsCountArrayIndex\
    \ = 0\n        var openingBracketsCountArrayIndex2 = 0\n        var closingBracketsCountArrayIndex2\
    \ = 0\n        var openingBracketsCountArrayIndex3 = 0\n        var closingBracketsCountArrayIndex3\
    \ = 0\n        var openingBracketsCountArrayIndex4 = 0\n        var closingBracketsCountArrayIndex4\
    \ = 0\n        var openingBracketsCountArrayIndex5 = 0\n        var closingBracketsCountArrayIndex5\
    \ = 0\n        var openingBracketsCountArrayIndex6 = 0\n        var closingBracketsCountArrayIndex6\
    \ = 0\n        var openingBracketsCountArrayIndex7 = 0\n        var closingBracketsCountArrayIndex7\
    \ = 0\n        var openingBracketsCountArrayIndex8 = 0\n        var closingBracketsCountArrayIndex8\
    \ = 0\n        var openingBracketsCountArrayIndex9 = 0\n        var closingBracketsCountArrayIndex9\
    \ = 0\n        var openingBracketsCountArrayIndex10 = 0\n        var closingBracketsCountArrayIndex10\
    \ = 0\n        var openingBracketsCountArrayIndex11 = 0\n        var closingBracketsCountArrayIndex11\
    \ = 0\n        var openingBracketsCountArrayIndex12 = 0\n        var closingBracketsCountArrayIndex12\
    \ = 0\n        var openingBracketsCountArrayIndex13 = 0\n        var closingBracketsCountArrayIndex13\
    \ = 0\n        var openingBracketsCountArrayIndex14 = 0\n        var closingBracketsCountArrayIndex14\
    \ = 0\n        var openingBracketsCountArrayIndex15 = 0\n        var closingBracketsCountArrayIndex15\
    \ = 0\n        var openingBracketsCountArrayIndex16 = 0\n        var closingBracketsCountArrayIndex16\
    \ = 0\n        var openingBracketsCountArrayIndex17 = 0\n        var closingBracketsCountArrayIndex17\
    \ = 0\n        var openingBracketsCountArrayIndex18 = 0\n        var closingBracketsCountArrayIndex18\
    \ = 0\n        var openingBracketsCountArrayIndex19 = 0\n        var closingBracketsCountArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpanxz5n9y.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpanxz5n9y.scala:59:5 ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795111
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"(\", \")\")\n        val closingBracketsArray = Array(\"(\", \")\"\
    )\n        val openingBracketsSet = openingBracketsArray.toSet\n        val closingBracketsSet\
    \ = closingBracketsArray.toSet\n        val openingBracketsArraySize = openingBracketsArray.length\n\
    \        val closingBracketsArraySize = closingBracketsArray.length\n        val\
    \ openingBracketsArrayIterator = openingBracketsArray.iterator\n        val closingBracketsArrayIterator\
    \ = closingBracketsArray.iterator\n        val openingBracketsSetIterator = openingBracketsSet.iterator\n\
    \        val closingBracketsSetIterator = closingBracketsSet.iterator\n      \
    \  val openingBracketsArrayIteratorSize = openingBracketsArrayIterator.size\n\
    \        val closingBracketsArrayIteratorSize = closingBracketsArrayIterator.size\n\
    \        val openingBracketsSetIteratorSize = openingBracketsSetIterator.size\n\
    \        val closingBracketsSetIteratorSize = closingBracketsSetIterator.size\n\
    \        val openingBracketsArrayIteratorElement = openingBracketsArrayIterator.next()\n\
    \        val closingBracketsArrayIteratorElement = closingBracketsArrayIterator.next()\n\
    \        val openingBracketsSetIteratorElement = openingBracketsSetIterator.next()\n\
    \        val closingBracketsSetIteratorElement = closingBracketsSetIterator.next()\n\
    \        val openingBracketsArrayIteratorElementSize = openingBracketsArrayIteratorElement.size\n\
    \        val closingBracketsArrayIteratorElementSize = closingBracketsArrayIteratorElement.size\n\
    \        val openingBracketsSetIteratorElementSize = openingBracketsSetIteratorElement.size\n\
    \        val closingBracketsSetIteratorElementSize = closingBracketsSetIteratorElement.size\n\
    \        val openingBracketsArrayIteratorElementElement = openingBracketsArrayIteratorElement.next()\n\
    \        val closingBracketsArrayIteratorElementElement = closingBracketsArrayIteratorElement.next()\n\
    \        val openingBracketsSetIteratorElementElement = openingBracketsSetIteratorElement.next()\n\
    \        val closingBracketsSetIteratorElementElement = closingBracketsSetIteratorElement.next()\n\
    \        val openingBracketsArrayIteratorElementElementSize = openingBra\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_33yfdqt.scala:38:93 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArrayIteratorElementElement\e\
    [0m = openingBracketsArrayIteratorElement.next()\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean openingBracketsArrayIteratorElement.indent?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_33yfdqt.scala:39:93 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayIteratorElementElement\e\
    [0m = closingBracketsArrayIteratorElement.next()\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean closingBracketsArrayIteratorElement.indent?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_33yfdqt.scala:40:89 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsSetIteratorElementElement\e\
    [0m = openingBracketsSetIteratorElement.next()\n\e[31m\e[31m   |\e[0m        \
    \                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean openingBracketsSetIteratorElement.indent?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_33yfdqt.scala:41:89 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsSetIteratorElementElement\e\
    [0m = closingBracketsSetIteratorElement.next()\n\e[31m\e[31m   |\e[0m        \
    \                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean closingBracketsSetIteratorElement.indent?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_33yfdqt.scala:42:61 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArrayIteratorElementElementSize\e\
    [0m = openingBra\n\e[31m\e[31m   |\e[0m            "
  stdout: ''
  timestamp: 1659795114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(true)((acc, b) => {\n            if (b\
    \ == \"(\") {\n                acc && correctBracketing(brackets.dropRight(1))\n\
    \            } else if (b == \")\") {\n                acc && correctBracketing(brackets.dropRight(1))\n\
    \            } else {\n                acc\n            }\n        })\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\"))\
    \ == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps9f87ruk.scala:16:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (b == \e[31m\"(\"\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmps9f87ruk.scala:18:23 -----------------------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (b == \e[31m\"\
    )\"\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659795114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => false\n      \
    \      case head :: tail => {\n                val openingBrackets = brackets.substring(0,head.length)\n\
    \                val closingBrackets = brackets.substring(head.length)\n     \
    \           openingBrackets.toList match {\n                    case Nil => false\n\
    \                    case head :: tail => {\n                        closingBrackets.toList\
    \ match {\n                            case Nil => true\n                    \
    \        case head :: tail => {\n                                head == tail\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqowa6x6l.scala:18:64 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mopeningBrackets\e\
    [0m = brackets.substring(\e[31m0\e[0m,head.length)\n\e[31m\e[31m   |\e[0m    \
    \                                                       ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value length is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqowa6x6l.scala:19:62 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mclosingBrackets\e\
    [0m = brackets.substring(head.length)\n\e[31m\e[31m   |\e[0m                 \
    \                                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                 value length is not a member of Char\n\e[31m\e\
    [31m-- Error: /tmp/tmpqowa6x6l.scala:26:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                                head == tail\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \    Values of types Char and List[Char] cannot be compared with == or !=\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795114
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmb8_p5od.scala:22)\n\tat Problem.main(tmpmb8_p5od.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => true\n       \
    \     case head :: tail => {\n                val openingBrackets = brackets.substring(0,head.length)\n\
    \                val closingBrackets = brackets.substring(head.length,brackets.length)\n\
    \                openingBrackets.toList match {\n                    case Nil\
    \ => true\n                    case head :: tail => {\n                      \
    \  closingBrackets.toList match {\n                            case Nil => true\n\
    \                            case head :: tail => {\n                        \
    \        head == tail => false\n                                head != tail &&\
    \ correctBracketing(head + tail)\n                            }\n            \
    \            }\n                    }\n                }\n            }\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpi74n00ro.scala:26:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                                head == tail => \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                not a legal formal parameter\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpi74n00ro.scala:18:64 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mopeningBrackets\e\
    [0m = brackets.substring(\e[31m0\e[0m,head.length)\n\e[31m\e[31m   |\e[0m    \
    \                                                       ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value length is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi74n00ro.scala:19:62 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mclosingBrackets\e\
    [0m = brackets.substring(head.length,brackets.length)\n\e[31m\e[31m   |\e[0m \
    \                                                        ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                    value length is not a member\
    \ of Char\n\e[31m\e[31m-- Error: /tmp/tmpi74n00ro.scala:27:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                                head != tail && correctBracketing(head\
    \ + tail)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    Values of types Char and List[Char] cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpi74n00ro.scala:27:71\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                   \
    \             head != tail && correctBracketing(head + tail)\n\e[31m\e[31m   |\e\
    [0m                                                                  ^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m+\e[0m in \e[33mclass\e[0m \e[35mChar\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m   |\e[0m (x: Char): Int\n\e[31m\
    \   |\e[0m (x: Short): Int\n\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1659795115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayIndex = 0\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        while(openingBracketsCount\
    \ < bracketsArrayLength) {\n            if(bracketsArray(openingBracketsCount)\
    \ == '(') {\n                openingBracketsCount += 1\n            } else if(bracketsArray(openingBracketsCount)\
    \ == ')') {\n                closingBracketsCount += 1\n            } else if(bracketsArray(openingBracketsCount)\
    \ == '(') {\n                openingBracketsCount += 1\n            } else if(bracketsArray(openingBracketsCount)\
    \ == ')') {\n                closingBracketsCount += 1\n            } else if(bracketsArray(openingBracketsCount)\
    \ == '(') {\n                openingBracketsCount += 1\n            } else if(bracketsArray(openingBracketsCount)\
    \ == ')') {\n                closingBracketsCount += 1\n            } else if(bracketsArray(openingBracketsCount)\
    \ == '(') {\n                openingBracketsCount += 1\n            } else if(bracketsArray(openingBracketsCount)\
    \ == ')') {\n                closingBracketsCount += 1\n            } else if(bracketsArray(openingBracketsCount)\
    \ == '(') {\n                openingBracketsCount += 1\n            } else if(bracketsArray(openingBracketsCount)\
    \ == ')') {\n                closingBracketsCount += 1\n            } else if(bracketsArray(openingBracketsCount)\
    \ == '(') {\n                openingBracketsCount += 1\n            } else if(bracketsArray(openingBracketsCount)\
    \ == ')') {\n                closingBracketsCount += 1\n            } else if(bracketsArray(openingBracketsCount)\
    \ == '(') {\n                openingBracketsCount += 1\n            } else if(bracketsArray(openingBracketsCount)\
    \ == ')') {\n                closingBracketsCount += 1\n            } else if(bracketsArray(openingBracketsCount)\
    \ == '(') {\n                openingBracketsCount += 1\n            } else if(bracketsArray(openingBracketsCount)\
    \ == ')') {\n                closingBracketsCount += 1\n            } else if(bracketsArray(openingBracketsCount)\
    \ == '(') {\n                openingBracketsCount += 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc23b7pix.scala:72:0 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc23b7pix.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mwhile\e[0m(openingBracketsCount\
    \ < bracketsArrayLength) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e\
    [0m        Found:    Unit\n\e[31m   |\e[0m        Required: Boolean\n\e[31m21\
    \ |\e[0m            \e[33mif\e[0m(bracketsArray(openingBracketsCount) == \e[31m'('\e\
    [0m) {\n\e[31m22 |\e[0m                openingBracketsCount += \e[31m1\e[0m\n\e\
    [31m23 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(bracketsArray(openingBracketsCount)\
    \ == \e[31m')'\e[0m) {\n\e[31m24 |\e[0m                closingBracketsCount +=\
    \ \e[31m1\e[0m\n\e[31m25 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(bracketsArray(openingBracketsCount)\
    \ == \e[31m'('\e[0m) {\n\e[31m26 |\e[0m                openingBracketsCount +=\
    \ \e[31m1\e[0m\n\e[31m27 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(bracketsArray(openingBracketsCount)\
    \ == \e[31m')'\e[0m) {\n\e[31m28 |\e[0m                closingBracketsCount +=\
    \ \e[31m1\e[0m\n\e[31m29 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(bracketsArray(openingBracketsCount)\
    \ == \e[31m'('\e[0m) {\n\e[31m30 |\e[0m                openingBracketsCount +=\
    \ \e[31m1\e[0m\n\e[31m31 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(bracketsArray(openingBracketsCount)\
    \ == \e[31m')'\e[0m) {\n\e[31m32 |\e[0m                closingBracketsCount +=\
    \ \e[31m1\e[0m\n\e[31m33 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(bracketsArray(openingBracketsCount)\
    \ == \e[31m'('\e[0m) {\n\e[31m34 |\e[0m                openingBracketsCount +=\
    \ \e[31m1\e[0m\n\e[31m35 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(bracketsArray(openingBracketsCount)\
    \ == \e[31m')'\e[0m) {\n\e[31m36 |\e[0m                closingBracketsCount +=\
    \ \e[31m1\e[0m\n\e[31m37 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(bracketsArray(openingBracketsCount)\
    \ == \e[31m'('\e[0m) {\n\e[31m38 |\e[0m                openingBracketsCount +=\
    \ \e[31m1\e[0m\n\e[31m39 |\e[0m            } \e[33melse\e[0m \e[33mif\e["
  stdout: ''
  timestamp: 1659795115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(true){\n            case (true, x) =>\
    \ x\n            case (false, (x)) => false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa2bncaxl.scala:16:30\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m (\e\
    [31mtrue\e[0m, x) => x\n\e[31m\e[31m   |\e[0m                              ^\e\
    [0m\n\e[31m   |\e[0m                              Found:    (x : Char)\n\e[31m\
    \   |\e[0m                              Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795115
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => true\n       \
    \     case head :: tail => {\n                val openingBrackets = brackets.toList.filter(c\
    \ => c == '(')\n                val closingBrackets = brackets.toList.filter(c\
    \ => c == ')')\n                openingBrackets.forall(c => closingBrackets.contains(c))\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcwcoxxs_.scala:25)\n\tat Problem.main(tmpcwcoxxs_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795090
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toList\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '(')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == ')')\n        openingBracketsCount != closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6xdbq5bd.scala:21)\n\tat Problem.main(tmp6xdbq5bd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayCopy = Array(bracketsArrayLength)\n\
    \        System.arraycopy(bracketsArray, 0, bracketsArrayCopy, 0, bracketsArrayLength)\n\
    \        val openingBracketsArray = Array(\"(\", \")\")\n        val closingBracketsArray\
    \ = Array(\")(\", \")\")\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArrayCopy = Array(openingBracketsArrayLength)\n        System.arraycopy(openingBracketsArray,\
    \ 0, openingBracketsArrayCopy, 0, openingBracketsArrayLength)\n        val closingBracketsArrayCopy\
    \ = Array(closingBracketsArrayLength)\n        System.arraycopy(closingBracketsArray,\
    \ 0, closingBracketsArrayCopy, 0, closingBracketsArrayLength)\n        val openingBracketsArrayCopyLength\
    \ = openingBracketsArrayCopy.length\n        val closingBracketsArrayCopyLength\
    \ = closingBracketsArrayCopy.length\n        val openingBracketsArrayCopy = Array(openingBracketsArrayCopyLength)\n\
    \        System.arraycopy(openingBracketsArrayCopy, 0, openingBracketsArrayCopy,\
    \ 0, openingBracketsArrayCopyLength)\n        val closingBracketsArrayCopy = Array(closingBracketsArrayCopyLength)\n\
    \        System.arraycopy(closingBracketsArrayCopy, 0, closingBracketsArrayCopy,\
    \ 0, closingBracketsArrayCopyLength)\n        val openingBracketsArrayCopyLength\
    \ = openingBracketsArrayCopy.length\n        val closingBracketsArrayCopyLength\
    \ = closingBracketsArrayCopy.length\n        val openingBracketsArrayCopy = Array(openingBracketsArrayCopyLength)\n\
    \        System.arraycopy(openingBracketsArrayCopy, 0, openingBracketsArrayCopy,\
    \ 0, openingBracketsArrayCopyLength)\n        val closingBracketsArrayCopy = Array(closingBracketsArrayCopyLength)\n\
    \        System.arraycopy(closingBracketsArrayCopy, 0, closingBracketsArrayCopy,\
    \ 0, closingBracketsArrayCopyLength)\n        val openingBracketsArrayCopyLength\
    \ = openingBracketsArrayCopy.length\n        val closingBracketsArrayCopyLength\
    \ = closingBracket\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo_md8_m2.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArrayCopy\e\
    [0m = Array(openingBracketsArrayCopyLength)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayCopy is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsArrayCopy\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo_md8_m2.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayCopy\e\
    [0m = Array(closingBracketsArrayCopyLength)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayCopy is already defined as \e[33mvalue\e\
    [0m \e[35mclosingBracketsArrayCopy\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo_md8_m2.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArrayCopyLength\e\
    [0m = openingBracketsArrayCopy.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayCopyLength is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsArrayCopyLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo_md8_m2.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayCopyLength\e\
    [0m = closingBracketsArrayCopy.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayCopyLength is already defined as \e[33mvalue\e\
    [0m \e[35mclosingBracketsArrayCopyLength\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659795098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfxr1sjd4.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfxr1sjd4.scala:69:5 ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentBracketsCount = 0\n        var currentBracketsCountArray\
    \ = new Array[Int](bracketsArrayLength)\n        var currentBracketsCountArrayIndex\
    \ = 0\n        var currentBracketsCountArrayIndexMax = bracketsArrayLength - 1\n\
    \        var currentBracketsCountArrayIndexMin = 0\n        var currentBracketsCountArrayIndexMinMax\
    \ = bracketsArrayLength - 1\n        var currentBracketsCountArrayIndexMaxMin\
    \ = 0\n        var currentBracketsCountArrayIndexMinMaxMax = bracketsArrayLength\
    \ - 1\n        var currentBracketsCountArrayIndexMaxMinMax = bracketsArrayLength\
    \ - 1\n        var currentBracketsCountArrayIndexMinMaxMaxMax = bracketsArrayLength\
    \ - 1\n        var currentBracketsCountArrayIndexMinMaxMaxMax = bracketsArrayLength\
    \ - 1\n        var currentBracketsCountArrayIndexMinMaxMaxMax = bracketsArrayLength\
    \ - 1\n        var currentBracketsCountArrayIndexMinMaxMaxMaxMax = bracketsArrayLength\
    \ - 1\n        var currentBracketsCountArrayIndexMinMaxMaxMaxMax = bracketsArrayLength\
    \ - 1\n        var currentBracketsCountArrayIndexMinMaxMaxMaxMax = bracketsArrayLength\
    \ - 1\n        var currentBracketsCountArrayIndexMinMaxMaxMaxMax = bracketsArrayLength\
    \ - 1\n        var currentBracketsCountArrayIndexMinMaxMaxMaxMax = bracketsArrayLength\
    \ - 1\n        var currentBracketsCountArrayIndexMinMaxMaxMaxMaxMax = bracketsArrayLength\
    \ - 1\n        var currentBracketsCountArrayIndexMinMaxMaxMaxMaxMax = bracketsArrayLength\
    \ - 1\n        var currentBracketsCountArrayIndexMinMaxMaxMaxMaxMaxMax = bracketsArrayLength\
    \ - 1\n        var currentBracketsCountArrayIndexMinMaxMaxMaxMaxMaxMax = bracketsArrayLength\
    \ - 1\n        var currentBracketsCountArrayIndexMinMaxMaxMaxMaxMaxMaxMax = bracketsArrayLength\
    \ - 1\n        var currentBracketsCountArrayIndexMinMaxMaxMaxMaxMaxMaxMax = bracketsArrayLength\
    \ - 1\n        var currentBracketsCountArrayIndexMinMaxMaxMaxMaxMaxMaxMax = bracketsArrayLength\
    \ - 1\n        var currentBracketsCountArrayIndexMinMaxMaxMaxMaxMaxMaxMaxMax =\
    \ bracketsArrayLength - 1\n        var currentBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp32gtx0tx.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp32gtx0tx.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketsCountArrayIndexMinMaxMaxMax\e[0m = bracketsArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketsCountArrayIndexMinMaxMaxMax is already defined\
    \ as \e[33mvariable\e[0m \e[35mcurrentBracketsCountArrayIndexMinMaxMaxMax\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp32gtx0tx.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketsCountArrayIndexMinMaxMaxMax\e\
    [0m = bracketsArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketsCountArrayIndexMinMaxMaxMax is already defined\
    \ as \e[33mvariable\e[0m \e[35mcurrentBracketsCountArrayIndexMinMaxMaxMax\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp32gtx0tx.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketsCountArrayIndexMinMaxMaxMaxMax\e\
    [0m = bracketsArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketsCountArrayIndexMinMaxMaxMaxMax is already defined\
    \ as \e[33mvariable\e[0m \e[35mcurrentBracketsCountArrayIndexMinMaxMaxMaxMax\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp32gtx0tx.scala:33:12 ---------------"
  stdout: ''
  timestamp: 1659795115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => true\n       \
    \     case head :: tail => {\n                val openingBrackets = brackets.substring(0,head.length)\n\
    \                val closingBrackets = brackets.substring(head.length)\n     \
    \           openingBrackets.toList match {\n                    case Nil => true\n\
    \                    case head :: tail => {\n                        closingBrackets.toList\
    \ match {\n                            case Nil => true\n                    \
    \        case head :: tail => {\n                                val openingBracketsCount\
    \ = openingBrackets.toList.length\n                                val closingBracketsCount\
    \ = closingBrackets.toList.length\n                                openingBracketsCount\
    \ match {\n                                    case 0 => closingBracketsCount\
    \ match {\n                                        case 0 => true\n          \
    \                              case _ => false\n                             \
    \       }\n                                    case _ => closingBracketsCount\
    \ match {\n                                        case 0 => false\n         \
    \                               case _ => openingBracketsCount match {\n     \
    \                                       case 0 => false\n                    \
    \                        case _ => openingBracketsCount == closingBracketsCount\n\
    \                                        }\n                                 \
    \   }\n                                }\n                            }\n    \
    \                    }\n                    }\n                }\n           \
    \ }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9fabtzkv.scala:18:64 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mopeningBrackets\e\
    [0m = brackets.substring(\e[31m0\e[0m,head.length)\n\e[31m\e[31m   |\e[0m    \
    \                                                       ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value length is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9fabtzkv.scala:19:62 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mclosingBrackets\e\
    [0m = brackets.substring(head.length)\n\e[31m\e[31m   |\e[0m                 \
    \                                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                 value length is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795121
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = bracketsArray.filter(_ == '(')\n        val closingBracketsArray = bracketsArray.filter(_\
    \ == ')')\n        openingBracketsArray.forall(closingBracketsArray.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3rfbbfbw.scala:21)\n\tat Problem.main(tmp3rfbbfbw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        if (openingBracketsCount\
    \ != closingBracketsCount) {\n            return false\n        }\n        openingBrackets.zipWithIndex.forall\
    \ { case (open, index) =>\n            closingBrackets.contains(open) && index\
    \ != openingBracketsCount - 1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpozgq62lf.scala:27)\n\tat Problem.main(tmpozgq62lf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBracketCount\
    \ = 0\n        var closingBracketCount = 0\n        var openingBracketsArray =\
    \ Array[Char]()\n        var closingBracketsArray = Array[Char]()\n        for\
    \ (i <- 0 until bracketsArray.length) {\n            val c = bracketsArray(i)\n\
    \            if (c == '(') {\n                openingBracketCount += 1\n     \
    \           openingBracketsArray += c\n            } else if (c == ')') {\n  \
    \              closingBracketCount += 1\n                closingBracketsArray\
    \ += c\n            }\n        }\n        if (openingBracketCount != closingBracketCount)\
    \ {\n            return false\n        }\n        for (i <- 0 until openingBracketsArray.length)\
    \ {\n            val c = openingBracketsArray(i)\n            if (closingBracketsArray.contains(c))\
    \ {\n                return false\n            }\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgiknociz.scala:24:37 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                openingBracketsArray += c\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value\
    \ += is not a member of Array[Char] - did you mean Array[Char].!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpgiknociz.scala:27:37 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                closingBracketsArray += c\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value\
    \ += is not a member of Array[Char] - did you mean Array[Char].!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659795122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ = 0\n        var closingBrackets = 0\n        var currentBracket = bracketsArray(0)\n\
    \        var currentBracketCount = 0\n        var currentBracketCountArray = new\
    \ Array[Int](3)\n        var currentBracketCountArrayIndex = 0\n        var currentBracketCountArrayIndex2\
    \ = 0\n        var currentBracketCountArrayIndex3 = 0\n        var currentBracketCountArrayIndex4\
    \ = 0\n        var currentBracketCountArrayIndex5 = 0\n        var currentBracketCountArrayIndex6\
    \ = 0\n        var currentBracketCountArrayIndex7 = 0\n        var currentBracketCountArrayIndex8\
    \ = 0\n        var currentBracketCountArrayIndex9 = 0\n        var currentBracketCountArrayIndex10\
    \ = 0\n        var currentBracketCountArrayIndex11 = 0\n        var currentBracketCountArrayIndex12\
    \ = 0\n        var currentBracketCountArrayIndex13 = 0\n        var currentBracketCountArrayIndex14\
    \ = 0\n        var currentBracketCountArrayIndex15 = 0\n        var currentBracketCountArrayIndex16\
    \ = 0\n        var currentBracketCountArrayIndex17 = 0\n        var currentBracketCountArrayIndex18\
    \ = 0\n        var currentBracketCountArrayIndex19 = 0\n        var currentBracketCountArrayIndex20\
    \ = 0\n        var currentBracketCountArrayIndex21 = 0\n        var currentBracketCountArrayIndex22\
    \ = 0\n        var currentBracketCountArrayIndex23 = 0\n        var currentBracketCountArrayIndex24\
    \ = 0\n        var currentBracketCountArrayIndex25 = 0\n        var currentBracketCountArrayIndex26\
    \ = 0\n        var currentBracketCountArrayIndex27 = 0\n        var currentBracketCountArrayIndex28\
    \ = 0\n        var currentBracketCountArrayIndex29 = 0\n        var currentBracketCountArrayIndex30\
    \ = 0\n        var currentBracketCountArrayIndex31 = 0\n        var currentBracketCountArrayIndex32\
    \ = 0\n        var currentBracketCountArrayIndex33 = 0\n        var currentBracketCountArrayIndex34\
    \ = 0\n        var currentBracketCountArrayIndex35 = 0\n        var currentBracketCountArrayIndex36\
    \ = 0\n        var currentBracketCountArrayIndex37 = 0\n        var currentBracketCountArrayIndex38\
    \ = 0\n        var currentBracketCountArrayIndex39 = 0\n        var currentBracketCountArrayIndex40\
    \ = 0\n        var currentBracketCountArrayIndex41 = 0\n        var currentBracketCountArrayIndex42\
    \ = 0\n        var currentBracketCountArrayIndex43 = 0\n        var currentBracketCountArrayIndex44\
    \ = 0\n        var currentBracketCountArrayIndex45 = 0\n        var currentBracketCountArrayIndex46\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp22em91_6.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp22em91_6.scala:67:5 ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => true\n       \
    \     case head :: tail => {\n                val openingBrackets = brackets.substring(0,head.length)\n\
    \                val closingBrackets = brackets.substring(head.length)\n     \
    \           openingBrackets.toList match {\n                    case Nil => true\n\
    \                    case head :: tail => {\n                        closingBrackets.toList\
    \ match {\n                            case Nil => true\n                    \
    \        case head :: tail => {\n                                head == tail\
    \ => false\n                            }\n                        }\n       \
    \             }\n                }\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9pon92p3.scala:26:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                                head == tail => \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                not a legal formal parameter\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp9pon92p3.scala:18:64 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mopeningBrackets\e\
    [0m = brackets.substring(\e[31m0\e[0m,head.length)\n\e[31m\e[31m   |\e[0m    \
    \                                                       ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value length is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9pon92p3.scala:19:62 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mclosingBrackets\e\
    [0m = brackets.substring(head.length)\n\e[31m\e[31m   |\e[0m                 \
    \                                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                 value length is not a member of Char\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsArray = ArrayBuffer.empty[Char]\n\
    \        val closingBracketsArray = ArrayBuffer.empty[Char]\n        var openingBracketsArrayIndex\
    \ = 0\n        var closingBracketsArrayIndex = 0\n        var openingBracketsArrayLength\
    \ = 0\n        var closingBracketsArrayLength = 0\n        var openingBracketsArrayLastIndex\
    \ = 0\n        var closingBracketsArrayLastIndex = 0\n        var openingBracketsArrayLastLength\
    \ = 0\n        var closingBracketsArrayLastLength = 0\n        var openingBracketsArrayFirstIndex\
    \ = 0\n        var closingBracketsArrayFirstIndex = 0\n        var openingBracketsArrayFirstLength\
    \ = 0\n        var closingBracketsArrayFirstLength = 0\n        var openingBracketsArraySecondIndex\
    \ = 0\n        var closingBracketsArraySecondIndex = 0\n        var openingBracketsArraySecondLength\
    \ = 0\n        var closingBracketsArraySecondLength = 0\n        var openingBracketsArrayThirdIndex\
    \ = 0\n        var closingBracketsArrayThirdIndex = 0\n        var openingBracketsArrayThirdLength\
    \ = 0\n        var closingBracketsArrayThirdLength = 0\n        var openingBracketsArrayFourthIndex\
    \ = 0\n        var closingBracketsArrayFourthIndex = 0\n        var openingBracketsArrayFourthLength\
    \ = 0\n        var closingBracketsArrayFourthLength = 0\n        var openingBracketsArrayFifthIndex\
    \ = 0\n        var closingBracketsArrayFifthIndex = 0\n        var openingBracketsArrayFifthLength\
    \ = 0\n        var closingBracketsArrayFifthLength = 0\n        var openingBracketsArraySixthIndex\
    \ = 0\n        var closingBracketsArraySixthIndex = 0\n        var openingBracketsArraySixthLength\
    \ = 0\n        var closingBracketsArraySixthLength = 0\n        var openingBracketsArraySeventhIndex\
    \ = 0\n        var closingBracketsArraySeventhIndex = 0\n        var openingBracketsArraySeventhLength\
    \ = 0\n        var closingBracketsArraySeventhLength = 0\n        var openingBracketsArrayEighthIndex\
    \ = 0\n        var closingBracketsArrayEighthIndex = 0\n        var openingBracketsArrayEighthLength\
    \ = 0\n        var closingBracketsArrayEighthLength = 0\n        var open\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu29re8k_.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpu29re8k_.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketCount = 0\n        var closingBracketCount\
    \ = 0\n        var currentBracket = bracketsArray(0)\n        var currentBracketCount\
    \ = 0\n        var currentBracketCountForCurrentBracket = 0\n        var currentBracketCountForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var currentBracketCountForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracketForCurrentBracket\
    \ = 0\n        var current\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpljeml9jc.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpljeml9jc.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayIndex = 0\n        var bracketsArrayIndex2\
    \ = 0\n        var bracketsArrayIndex3 = 0\n        var bracketsArrayIndex4 =\
    \ 0\n        var bracketsArrayIndex5 = 0\n        var bracketsArrayIndex6 = 0\n\
    \        var bracketsArrayIndex7 = 0\n        var bracketsArrayIndex8 = 0\n  \
    \      var bracketsArrayIndex9 = 0\n        var bracketsArrayIndex10 = 0\n   \
    \     var bracketsArrayIndex11 = 0\n        var bracketsArrayIndex12 = 0\n   \
    \     var bracketsArrayIndex13 = 0\n        var bracketsArrayIndex14 = 0\n   \
    \     var bracketsArrayIndex15 = 0\n        var bracketsArrayIndex16 = 0\n   \
    \     var bracketsArrayIndex17 = 0\n        var bracketsArrayIndex18 = 0\n   \
    \     var bracketsArrayIndex19 = 0\n        var bracketsArrayIndex20 = 0\n   \
    \     var bracketsArrayIndex21 = 0\n        var bracketsArrayIndex22 = 0\n   \
    \     var bracketsArrayIndex23 = 0\n        var bracketsArrayIndex24 = 0\n   \
    \     var bracketsArrayIndex25 = 0\n        var bracketsArrayIndex26 = 0\n   \
    \     var bracketsArrayIndex27 = 0\n        var bracketsArrayIndex28 = 0\n   \
    \     var bracketsArrayIndex29 = 0\n        var bracketsArrayIndex30 = 0\n   \
    \     var bracketsArrayIndex31 = 0\n        var bracketsArrayIndex32 = 0\n   \
    \     var bracketsArrayIndex33 = 0\n        var bracketsArrayIndex34 = 0\n   \
    \     var bracketsArrayIndex35 = 0\n        var bracketsArrayIndex36 = 0\n   \
    \     var bracketsArrayIndex37 = 0\n        var bracketsArrayIndex38 = 0\n   \
    \     var bracketsArrayIndex39 = 0\n        var bracketsArrayIndex40 = 0\n   \
    \     var bracketsArrayIndex41 = 0\n        var bracketsArrayIndex42 = 0\n   \
    \     var bracketsArrayIndex43 = 0\n        var bracketsArrayIndex44 = 0\n   \
    \     var bracketsArrayIndex45 = 0\n        var bracketsArrayIndex46 = 0\n   \
    \     var bracketsArrayIndex47 = 0\n        var bracketsArrayIndex48 = 0\n   \
    \     var bracketsArrayIndex49 = 0\n        var bracketsArrayIndex50 = 0\n   \
    \     var bracketsArrayIndex51 = 0\n        var bracketsArrayIndex52 = 0\n   \
    \     var bracketsArrayIndex53 = 0\n        var bracketsArrayIndex54 = 0\n   \
    \     var bracketsArrayIndex55 = 0\n        var bracketsArrayIndex56 = 0\n   \
    \     var bracketsArrayIndex57 = 0\n        var bracketsArrayIndex58 = 0\n   \
    \     var bracketsArrayIndex59 = 0\n        var bracketsArrayIndex60 = 0\n   \
    \     var bracketsArrayIndex61 = 0\n        var \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp99go1sto.scala:78:11 ---------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp99go1sto.scala:79:5 ---------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = bracketsArray.filter(_ == '(')\n        val closingBracketsArray = bracketsArray.filter(_\
    \ == ')')\n        openingBracketsArray.forall(closingBracketsArray.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3rfbbfbw.scala:21)\n\tat Problem.main(tmp3rfbbfbw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ = 0\n        var closingBrackets = 0\n        for (i <- 0 until bracketsArray.length)\
    \ {\n            if (bracketsArray(i) == '(') {\n                openingBrackets\
    \ += 1\n            } else if (bracketsArray(i) == ')') {\n                closingBrackets\
    \ += 1\n            }\n        }\n        return openingBrackets == closingBrackets\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp82gn17q7.scala:33)\n\tat Problem.main(tmp82gn17q7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => true\n       \
    \     case head :: tail =>\n                head == \"(\" && correctBracketing(tail)\n\
    \            case _ => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjos0tw0d.scala:18:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                head == \e[31m\"(\"\e[0m && correctBracketing(tail)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Values of types Char and String cannot be compared with == or !=\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjos0tw0d.scala:18:49 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                head == \e[31m\"(\"\e[0m && correctBracketing(tail)\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^\e[0m\n\
    \e[31m   |\e[0m                                           Found:    (tail : List[Char])\n\
    \e[31m   |\e[0m                                           Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.flatMap(x => x.toList).forall(y => brackets.indexOf(y)\
    \ == brackets.lastIndexOf(y))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpda2ahfso.scala:15:39 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(\e[36mx\e[0m => x.toList).forall(\e\
    [36my\e[0m => brackets.indexOf(y) == brackets.lastIndexOf(y))\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \          value toList is not a member of Char - did you mean x.toInt?\n\e[31m\e\
    [31m-- [E051] Reference Error: /tmp/tmpda2ahfso.scala:15:91 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(\e[36mx\e[0m => x.toList).forall(\e\
    [36my\e[0m => brackets.indexOf(y) == brackets.lastIndexOf(y))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mlastIndexOf\e[0m in \e[33mclass\e\
    [0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String): Int\n\e[31m \
    \  |\e[0m (x$0: Int): Int\n\e[31m   |\e[0mboth match arguments ((y : Nothing))\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpda2ahfso.scala:15:68\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(\e\
    [36mx\e[0m => x.toList).forall(\e[36my\e[0m => brackets.indexOf(y) == brackets.lastIndexOf(y))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mindexOf\e[0m in \e[33mclass\e[0m \e[35mString\e[0m\
    \ with types\n\e[31m   |\e[0m (x$0: String): Int\n\e[31m   |\e[0m (x$0: Int):\
    \ Int\n\e[31m   |\e[0mboth match arguments ((y : Nothing))\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795124
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        openingBrackets.size == closingBrackets.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptu298any.scala:20)\n\tat Problem.main(tmptu298any.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(true)((acc, c) => {\n            if (acc\
    \ && brackets.indexOf(c) == brackets.lastIndexOf(c)) {\n                false\n\
    \            } else {\n                acc\n            }\n        })\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\"))\
    \ == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpskiu4u9x.scala:24)\n\tat Problem.main(tmpskiu4u9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpozai17kz.scala:22)\n\tat Problem.main(tmpozai17kz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795125
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmb8_p5od.scala:22)\n\tat Problem.main(tmpmb8_p5od.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.flatMap(x => x.toList).forall(x => brackets.indexOf(x)\
    \ == brackets.lastIndexOf(x))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8thcidzq.scala:15:39 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(\e[36mx\e[0m => x.toList).forall(\e\
    [36mx\e[0m => brackets.indexOf(x) == brackets.lastIndexOf(x))\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \          value toList is not a member of Char - did you mean x.toInt?\n\e[31m\e\
    [31m-- [E051] Reference Error: /tmp/tmp8thcidzq.scala:15:91 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(\e[36mx\e[0m => x.toList).forall(\e\
    [36mx\e[0m => brackets.indexOf(x) == brackets.lastIndexOf(x))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mlastIndexOf\e[0m in \e[33mclass\e\
    [0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String): Int\n\e[31m \
    \  |\e[0m (x$0: Int): Int\n\e[31m   |\e[0mboth match arguments ((x : Nothing))\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmp8thcidzq.scala:15:68\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(\e\
    [36mx\e[0m => x.toList).forall(\e[36mx\e[0m => brackets.indexOf(x) == brackets.lastIndexOf(x))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mindexOf\e[0m in \e[33mclass\e[0m \e[35mString\e[0m\
    \ with types\n\e[31m   |\e[0m (x$0: String): Int\n\e[31m   |\e[0m (x$0: Int):\
    \ Int\n\e[31m   |\e[0mboth match arguments ((x : Nothing))\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsSet = brackets.toSet\n        val openingBrackets =\
    \ bracketsSet.filter(_ == \"(\")\n        val closingBrackets = bracketsSet.filter(_\
    \ == \")\")\n        openingBrackets.size == closingBrackets.size\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvjhvfvcp.scala:16:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = bracketsSet.filter(_\
    \ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and\
    \ String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpvjhvfvcp.scala:17:49\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mclosingBrackets\e[0m = bracketsSet.filter(_ == \e[31m\"\
    )\"\e[0m)\n\e[31m\e[31m   |\e[0m                                             \
    \    ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659795125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfxr1sjd4.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfxr1sjd4.scala:69:5 ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.flatMap(_.toInt).forall(x => brackets.toList.flatMap(_.toInt).contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5t9qjlqo.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(_.toInt).forall(\e\
    [36mx\e[0m => brackets.toList.flatMap(_.toInt).contains(x))\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   Found:    Int\n\e[31m   |\e[0m                           \
    \     Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5t9qjlqo.scala:15:79 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        brackets.toList.flatMap(_.toInt).forall(\e[36mx\e[0m => brackets.toList.flatMap(_.toInt).contains(x))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                   Found:    Int\n\e[31m   |\e[0m                           \
    \                  Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5tcx0jiy.scala:22)\n\tat Problem.main(tmp5tcx0jiy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpozai17kz.scala:22)\n\tat Problem.main(tmpozai17kz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case List() => false\n   \
    \         case x :: xs => x.equals(\"(\") && correctBracketing(xs)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpagk5wjdg.scala:17:63\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m x\
    \ :: xs => x.equals(\e[31m\"(\"\e[0m) && correctBracketing(xs)\n\e[31m\e[31m \
    \  |\e[0m                                                               ^^\e[0m\n\
    \e[31m   |\e[0m                                             Found:    (xs : List[Char])\n\
    \e[31m   |\e[0m                                             Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfxr1sjd4.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfxr1sjd4.scala:69:5 ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentChar = bracketsArray(0)\n        var nextChar = bracketsArray(0)\n\
    \        var isCorrect = true\n        for(i <- 1 to bracketsArrayLength) {\n\
    \            currentChar = nextChar\n            nextChar = bracketsArray(i)\n\
    \            if((currentChar == '(') && (nextChar == ')')) {\n               \
    \ openingBracketsCount += 1\n            } else if((currentChar == ')') && (nextChar\
    \ == '(')) {\n                closingBracketsCount += 1\n            } else if((currentChar\
    \ == '(') && (nextChar == ')')) {\n                openingBracketsCount += 1\n\
    \                closingBracketsCount += 1\n            } else if((currentChar\
    \ == ')') && (nextChar == '(')) {\n                openingBracketsCount += 1\n\
    \            } else if((currentChar == '(') && (nextChar == ')')) {\n        \
    \        openingBracketsCount += 1\n            } else if((currentChar == ')')\
    \ && (nextChar == '(')) {\n                closingBracketsCount += 1\n       \
    \     } else {\n                isCorrect = false\n            }\n        }\n\
    \        if(openingBracketsCount != closingBracketsCount) {\n            isCorrect\
    \ = false\n        }\n        isCorrect\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length\
    \ 2\n\tat Problem$.correctBracketing$$anonfun$1(tmp5od17ag1.scala:24)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.correctBracketing(tmp5od17ag1.scala:41)\n\
    \tat Problem$.main(tmp5od17ag1.scala:48)\n\tat Problem.main(tmp5od17ag1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795127
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.filter(c => c == '(').length\n        val closingBracketsCount\
    \ = bracketsArray.filter(c => c == ')').length\n        openingBracketsCount ==\
    \ closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphpz2_v2p.scala:26)\n\tat Problem.main(tmphpz2_v2p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayIndex = 0\n        val bracketsArrayIndexEnd\
    \ = bracketsArrayLength - 1\n        val bracketsArrayIndexStart = 0\n       \
    \ var bracketsArrayIndexStartEnd = 1\n        var bracketsArrayIndexEndStart =\
    \ 0\n        var bracketsArrayIndexStartEndEnd = 1\n        var bracketsArrayIndexEndStartStart\
    \ = 0\n        var bracketsArrayIndexStartEndEndEnd = 1\n        var bracketsArrayIndexEndStartStartEnd\
    \ = 1\n        var bracketsArrayIndexStartEndEndEndEnd = 1\n        var bracketsArrayIndexEndStartStartEndEndEnd\
    \ = 1\n        var bracketsArrayIndexStartEndEndEndEndEnd = 1\n        var bracketsArrayIndexStartEndEndEndEndEndEnd\
    \ = 1\n        var bracketsArrayIndexStartEndEndEndEndEndEndEnd = 1\n        var\
    \ bracketsArrayIndexStartEndEndEndEndEndEndEndEnd = 1\n        var bracketsArrayIndexStartEndEndEndEndEndEndEndEndEnd\
    \ = 1\n        var bracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEnd = 1\n\
    \        var bracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEnd = 1\n  \
    \      var bracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEnd = 1\n \
    \       var bracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEnd = 1\n\
    \        var bracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEnd =\
    \ 1\n        var bracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 1\n        var bracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 1\n        var bracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 1\n        var bracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 1\n        var bracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 1\n        var bracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 1\n        var bracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 1\n        var bracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 1\n        var bracketsArrayIndexStartEnd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu9rpy2a2.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu9rpy2a2.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mbracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEnd\e[0m =\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ is already defined as \e[33mvariable\e[0m \e[35mbracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEnd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu9rpy2a2.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mvar\e[0m \e[36mbracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEnd\e\
    [0m = \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ is already defined as \e[33mvariable\e[0m \e[35mbracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEnd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu9rpy2a2.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mvar\e[0m \e[36mbracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\e\
    [0m = \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ is already defined as \e[33mvariable\e[0m \e[35mbracketsArrayIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all"
  stdout: ''
  timestamp: 1659795126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(true){\n            case (true, x) =>\
    \ false\n            case (false, (x: String, y: String)) => x == y\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[33m\e[33m-- [E029] Pattern Match Exhaustivity Warning: /tmp/tmp6u7kjx9e.scala:16:12\
    \ -----\e[0m\e[0m\n\e[33m16 |\e[0m            \e[33mcase\e[0m (\e[31mtrue\e[0m,\
    \ x) => \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m            ^\e[0m\n\e[33m   |\e\
    [0m            \e[33mmatch\e[0m may not be exhaustive.\n\e[33m   |\e[0m\n\e[33m\
    \   |\e[0m            It would fail on pattern case: (false, _)\n\e[33m   |\e\
    [0m\n\e[33m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmp6u7kjx9e.scala:17:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m (\e[31mfalse\e[0m, (x: String,\
    \ y: String)) => x == y\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        cannot test if value of type Char is a reference of\
    \ \e[33mclass\e[0m \e[35mTuple2\e[0m\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1659795125
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        for(i <- 0 until bracketsArray.length){\n\
    \            if(bracketsArray(i) == '('){\n                openingBracketsCount\
    \ += 1\n            }\n            if(bracketsArray(i) == ')'){\n            \
    \    closingBracketsCount += 1\n            }\n        }\n        if(openingBracketsCount\
    \ != closingBracketsCount){\n            return false\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw30qck67.scala:37)\n\tat Problem.main(tmpw30qck67.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentBracket = bracketsArray(0)\n        var currentBracketCount\
    \ = 0\n        var currentBracketOpeningCount = 1\n        var currentBracketClosingCount\
    \ = 1\n        var currentBracketOpeningCountMax = bracketsArrayLength\n     \
    \   var currentBracketClosingCountMax = bracketsArrayLength\n        var currentBracketOpeningCountMin\
    \ = bracketsArrayLength\n        var currentBracketClosingCountMin = bracketsArrayLength\n\
    \        var currentBracketOpeningCountMaxIndex = 0\n        var currentBracketClosingCountMaxIndex\
    \ = 0\n        var currentBracketOpeningCountMinIndex = 0\n        var currentBracketClosingCountMinIndex\
    \ = 0\n        var currentBracketOpeningCountMaxIndexMin = 0\n        var currentBracketClosingCountMaxIndexMin\
    \ = 0\n        var currentBracketOpeningCountMaxIndexMax = 0\n        var currentBracketClosingCountMaxIndexMax\
    \ = 0\n        var currentBracketOpeningCountMinIndexMin = 0\n        var currentBracketClosingCountMinIndexMin\
    \ = 0\n        var currentBracketOpeningCountMinIndexMax = 0\n        var currentBracketClosingCountMinIndexMax\
    \ = 0\n        var currentBracketOpeningCountMaxIndexMin = 0\n        var currentBracketClosingCountMaxIndexMin\
    \ = 0\n        var currentBracketOpeningCountMaxIndexMax = 0\n        var currentBracketClosingCountMaxIndexMax\
    \ = 0\n        var currentBracketOpeningCountMinIndexMin = 0\n        var currentBracketClosingCountMinIndexMin\
    \ = 0\n        var currentBracketOpeningCountMinIndexMax = 0\n        var currentBracketClosingCountMinIndexMax\
    \ = 0\n        var currentBracketOpeningCountMaxIndexMin = 0\n        var currentBracketClosingCountMaxIndexMin\
    \ = 0\n        var currentBracketOpeningCountMaxIndexMax = 0\n        var currentBracketClosingCountMaxIndexMax\
    \ = 0\n        var currentBracketOpeningCountMinIndexMin = 0\n        var currentBracketClosingCountMinIndexMin\
    \ = 0\n        var currentBracketOpeningCountMinIndexMax = 0\n        var currentBracketClosingCountMinIndexMax\
    \ = 0\n        var currentBracketOpeningCountMaxIndexMin = 0\n        var currentBracketClosingCountMaxIndexMin\
    \ = 0\n        var currentBracketOpeningCountMaxIndexMax = 0\n        var currentBracketClosingCountMaxIndexMax\
    \ = 0\n        var \n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmphzq8ap_j.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmphzq8ap_j.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketOpeningCountMaxIndexMin\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketOpeningCountMaxIndexMin is already defined as\
    \ \e[33mvariable\e[0m \e[35mcurrentBracketOpeningCountMaxIndexMin\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphzq8ap_j.scala:40:12 ---------------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketClosingCountMaxIndexMin\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketClosingCountMaxIndexMin is already defined as\
    \ \e[33mvariable\e[0m \e[35mcurrentBracketClosingCountMaxIndexMin\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphzq8ap_j.scala:41:12 ---------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketOpeningCountMaxIndexMax\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketOpeningCountMaxIndexMax is already defined as\
    \ \e[33mvariable\e[0m \e[35mcurrentBracketOpeningCountMaxIndexMax\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphzq8ap_j.scala:42:12 ---------------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentBracketClosingCountMaxIndexMax"
  stdout: ''
  timestamp: 1659795126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ = 0\n        var closingBrackets = 0\n        var openingBracketsArray = new\
    \ Array[Char](bracketsArray.length)\n        var closingBracketsArray = new Array[Char](bracketsArray.length)\n\
    \        var currentChar = 0\n        var currentCharArray = new Array[Char](bracketsArray.length)\n\
    \        var currentCharArrayIndex = 0\n        var currentCharArrayIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndexIndex\
    \ = 0\n        var currentCharArrayIndexIndexIndex = 0\n        var currentCharArrayIndexIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfmbkg630.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfmbkg630.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentCharArrayIndexIndexIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentCharArrayIndexIndexIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentCharArrayIndexIndexIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfmbkg630.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mvar\e[0m \e[36mcurrentCharArrayIndexIndexIndex\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentCharArrayIndexIndexIndex is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentCharArrayIndexIndexIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfmbkg630.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentCharArrayIndexIndexIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentCharArrayIndexIndexIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentCharArrayIndexIndexIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfmbkg630.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mvar\e[0m \e[36mcurrentCharArrayIndexIndexIndex\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentCharArrayIndexIndexIndex is already defined as \e[33mvariable\e\
    [0m \e[35mcurrent"
  stdout: ''
  timestamp: 1659795125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => true\n       \
    \     case head :: tail =>\n                val openingBrackets = brackets.substring(0,head.length)\n\
    \                val closingBrackets = brackets.substring(head.length)\n     \
    \           openingBrackets.toList match {\n                    case Nil => false\n\
    \                    case head :: tail =>\n                        closingBrackets.toList\
    \ match {\n                            case Nil => true\n                    \
    \        case head :: tail =>\n                                head == tail\n\
    \                        }\n                }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf7ybz49f.scala:18:64 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mopeningBrackets\e\
    [0m = brackets.substring(\e[31m0\e[0m,head.length)\n\e[31m\e[31m   |\e[0m    \
    \                                                       ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value length is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf7ybz49f.scala:19:62 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mclosingBrackets\e\
    [0m = brackets.substring(head.length)\n\e[31m\e[31m   |\e[0m                 \
    \                                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                 value length is not a member of Char\n\e[31m\e\
    [31m-- Error: /tmp/tmpf7ybz49f.scala:26:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                                head == tail\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \    Values of types Char and List[Char] cannot be compared with == or !=\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => true\n       \
    \     case head :: tail => {\n                val openingBrackets = brackets.substring(0,head.length)\n\
    \                val closingBrackets = brackets.substring(head.length)\n     \
    \           val openingBracketsCount = openingBrackets.toList.length\n       \
    \         val closingBracketsCount = closingBrackets.toList.length\n         \
    \       openingBracketsCount == closingBracketsCount && openingBrackets.toList\
    \ == closingBrackets.toList\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfza1c3_y.scala:18:64 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mopeningBrackets\e\
    [0m = brackets.substring(\e[31m0\e[0m,head.length)\n\e[31m\e[31m   |\e[0m    \
    \                                                       ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value length is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfza1c3_y.scala:19:62 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mclosingBrackets\e\
    [0m = brackets.substring(head.length)\n\e[31m\e[31m   |\e[0m                 \
    \                                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                 value length is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(true) {\n            (acc, c) =>\n   \
    \             if (acc.isEmpty && c == \"(\")\n                    acc := true\n\
    \                else if (acc.isEmpty && c == \")\")\n                    acc\
    \ := false\n                else if (acc.isEmpty && c == \"[\")\n            \
    \        acc := true\n                else if (acc.isEmpty && c == \"]\")\n  \
    \                  acc := false\n                else if (acc.isEmpty && c ==\
    \ \"{\")\n                    acc := true\n                else if (acc.isEmpty\
    \ && c == \"}\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"(\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \")\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"[\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"]\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"{\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"}\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"(\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \")\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"[\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"]\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"{\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"}\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"(\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \")\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"[\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"]\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"{\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"}\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"(\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \")\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"[\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"]\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"{\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"}\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \"(\")\n                    acc := false\n                else if (acc.isEmpty\
    \ && c == \")\")\n                    acc := false\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp78oypqvo.scala:99:0 ----------------------------\e\
    [0m\e[0m\n\e[31m99 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp78oypqvo.scala:17:24\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e\
    [0m (acc.isEmpty && c == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value isEmpty is\
    \ not a member of Boolean\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp78oypqvo.scala:18:24\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                    acc :=\
    \ \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m              value := is not a member of Boolean - did you mean acc.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp78oypqvo.scala:19:29 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (acc.isEmpty\
    \ && c == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value isEmpty is not a member of\
    \ Boolean\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp78oypqvo.scala:20:24\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                    acc :=\
    \ \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m              value := is not a member of Boolean - did you mean acc.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp78oypqvo.scala:21:29 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (acc.isEmpty\
    \ && c == \e[31m\"[\"\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value isEmpty is not a member of\
    \ Boolean\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp78oypqvo.scala:22:24\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    acc :=\
    \ \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m              value := is not a member of Boolean - did you mean acc.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp78o"
  stdout: ''
  timestamp: 1659795132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsCount = bracketsArray.count(_\
    \ == '(')\n        val closingBracketsCount = bracketsArray.count(_ == ')')\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyzgq4d6n.scala:27)\n\tat Problem.main(tmpyzgq4d6n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795129
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(c => c == '(')\n        val closingBracketsCount = bracketsArray.count(c\
    \ => c == ')')\n        openingBracketsCount == closingBracketsCount\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\"))\
    \ == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyg84rsdy.scala:26)\n\tat Problem.main(tmpyg84rsdy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsSet = brackets.toSet\n        val openingBrackets =\
    \ bracketsSet.filter(_ == \"(\")\n        val closingBrackets = bracketsSet.filter(_\
    \ == \")\")\n        openingBrackets.size == closingBrackets.size\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvjhvfvcp.scala:16:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = bracketsSet.filter(_\
    \ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and\
    \ String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpvjhvfvcp.scala:17:49\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mclosingBrackets\e[0m = bracketsSet.filter(_ == \e[31m\"\
    )\"\e[0m)\n\e[31m\e[31m   |\e[0m                                             \
    \    ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659795125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsArray = new Array[Char](bracketsArrayLength)\n\
    \        var closingBracketsArray = new Array[Char](bracketsArrayLength)\n   \
    \     var currentOpeningBracket = 0\n        var currentClosingBracket = 0\n \
    \       var currentOpeningBracketArray = new Array[Char](bracketsArrayLength)\n\
    \        var currentClosingBracketArray = new Array[Char](bracketsArrayLength)\n\
    \        var currentOpeningBracketIndex = 0\n        var currentClosingBracketIndex\
    \ = 0\n        var currentOpeningBracketArrayIndex = 0\n        var currentClosingBracketArrayIndex\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCountArray = new Array[Int](bracketsArrayLength)\n\
    \        var currentClosingBracketCountArray = new Array[Int](bracketsArrayLength)\n\
    \        var currentOpeningBracketCountIndex = 0\n        var currentClosingBracketCountIndex\
    \ = 0\n        var currentOpeningBracketCountArrayIndex = 0\n        var currentClosingBracketCountArrayIndex\
    \ = 0\n        var currentOpeningBracketCountArrayIndex = 0\n        var currentClosingBracketCountArrayIndex\
    \ = 0\n        var currentOpeningBracketCountArrayIndex = 0\n        var currentClosingBracketCountArrayIndex\
    \ = 0\n        var currentOpeningBracketCountArrayIndex = 0\n        var currentClosingBracketCountArrayIndex\
    \ = 0\n        var currentOpeningBracketCountArrayIndex = 0\n        var currentClosingBracketCountArrayIndex\
    \ = 0\n        var currentOpeningBracketCountArrayIndex = 0\n        var currentClosingBracketCountArrayIndex\
    \ = 0\n        var currentOpeningBracketCountArrayIndex = 0\n        var currentClosingBracketCountArrayIndex\
    \ = 0\n        var currentOpeningBracketCountArrayIndex = 0\n        var currentClosingBracketCountArrayIndex\
    \ = 0\n        var currentOpeningBracketCountArrayIndex = 0\n        var currentClosingBracketCountArrayIndex\
    \ = 0\n        var currentOpeningBracketCountArrayIndex = 0\n        var currentClosingBracketCountArrayIndex\
    \ = 0\n        var currentOpeningBracketCountArrayIndex = 0\n        var currentClosingBracketCountArrayIndex\
    \ = 0\n        var currentOpeningBracketCountArrayIndex = 0\n        var currentClosingBracket\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5xsmq7uc.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5xsmq7uc.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentOpeningBracketCountArrayIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mcurrentOpeningBracketCountArrayIndex is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentOpeningBracketCountArrayIndex\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5xsmq7uc.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentClosingBracketCountArrayIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mcurrentClosingBracketCountArrayIndex is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentClosingBracketCountArrayIndex\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5xsmq7uc.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentOpeningBracketCountArrayIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mcurrentOpeningBracketCountArrayIndex is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentOpeningBracketCountArrayIndex\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5xsmq7uc.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentClosingBracketCountArrayIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mcurrentClosing"
  stdout: ''
  timestamp: 1659795132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsArray = Array.fill(\n   \
    \         bracketsArrayLength\n        )(bracketsArray(0))\n        val closingBracketsArray\
    \ = Array.fill(\n            bracketsArrayLength\n        )(bracketsArray(0))\n\
    \        var openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n\
    \        var openingBracketsCount = 0\n        var closingBracketsCount = 0\n\
    \        while (openingBracketsIndex < bracketsArrayLength) {\n            val\
    \ currentChar = bracketsArray(openingBracketsIndex)\n            if (currentChar\
    \ == '(') {\n                openingBracketsCount += 1\n                openingBracketsArray(openingBracketsIndex)\
    \ = currentChar\n                openingBracketsIndex += 1\n            } else\
    \ if (currentChar == ')') {\n                closingBracketsCount += 1\n     \
    \           closingBracketsArray(closingBracketsIndex) = currentChar\n       \
    \         closingBracketsIndex += 1\n            } else if (currentChar == '(')\
    \ {\n                openingBracketsCount += 1\n                openingBracketsArray(openingBracketsIndex)\
    \ = currentChar\n                openingBracketsIndex += 1\n            } else\
    \ if (currentChar == ')') {\n                closingBracketsCount += 1\n     \
    \           closingBracketsArray(closingBracketsIndex) = currentChar\n       \
    \         closingBracketsIndex += 1\n            } else if (currentChar == '[')\
    \ {\n                openingBracketsCount += 1\n                openingBracketsArray(openingBracketsIndex)\
    \ = currentChar\n                openingBracketsIndex += 1\n            } else\
    \ if (currentChar == ']') {\n                closingBracketsCount += 1\n     \
    \           closingBracketsArray(closingBracketsIndex) = currentChar\n       \
    \         closingBracketsIndex += 1\n            } else if (currentChar == '[')\
    \ {\n                openingBracketsCount += 1\n                openingBracketsArray(openingBracketsIndex)\
    \ = currentChar\n                openingBracketsIndex += 1\n            } else\
    \ if (currentChar == ']') {\n                closingBracketsCount += 1\n     \
    \           closingBracketsArray(closingBracketsIndex) = currentChar\n       \
    \         closingBracketsIndex += 1\n            } else if (currentChar == '{')\
    \ {\n                openingBracketsCount += 1\n                openingBracketsArray(openingBracketsIndex)\
    \ = currentChar\n                openingBracketsIndex += 1\n            } else\
    \ if (currentChar == '}') {\n                closingBracketsCount \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt674qudv.scala:84:0 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt674qudv.scala:27:8\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mwhile\e[0m (openingBracketsIndex\
    \ < bracketsArrayLength) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e\
    [0m        Found:    Unit\n\e[31m   |\e[0m        Required: Boolean\n\e[31m28\
    \ |\e[0m            \e[33mval\e[0m \e[36mcurrentChar\e[0m = bracketsArray(openingBracketsIndex)\n\
    \e[31m29 |\e[0m            \e[33mif\e[0m (currentChar == \e[31m'('\e[0m) {\n\e\
    [31m30 |\e[0m                openingBracketsCount += \e[31m1\e[0m\n\e[31m31 |\e\
    [0m                openingBracketsArray(openingBracketsIndex) = currentChar\n\e\
    [31m32 |\e[0m                openingBracketsIndex += \e[31m1\e[0m\n\e[31m33 |\e\
    [0m            } \e[33melse\e[0m \e[33mif\e[0m (currentChar == \e[31m')'\e[0m)\
    \ {\n\e[31m34 |\e[0m                closingBracketsCount += \e[31m1\e[0m\n\e[31m35\
    \ |\e[0m                closingBracketsArray(closingBracketsIndex) = currentChar\n\
    \e[31m36 |\e[0m                closingBracketsIndex += \e[31m1\e[0m\n\e[31m37\
    \ |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (currentChar == \e[31m'('\e\
    [0m) {\n\e[31m38 |\e[0m                openingBracketsCount += \e[31m1\e[0m\n\e\
    [31m39 |\e[0m                openingBracketsArray(openingBracketsIndex) = currentChar\n\
    \e[31m40 |\e[0m                openingBracketsIndex += \e[31m1\e[0m\n\e[31m41\
    \ |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (currentChar == \e[31m')'\e\
    [0m) {\n\e[31m42 |\e[0m                closingBracketsCount += \e[31m1\e[0m\n\e\
    [31m43 |\e[0m                closingBracketsArray(closingBracketsIndex) = currentChar\n\
    \e[31m44 |\e[0m                closingBracketsIndex += \e[31m1\e[0m\n\e[31m45\
    \ |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (currentChar == \e[31m'['\e\
    [0m) {\n\e[31m46 |\e[0m                openingBracketsCount += \e[31m1\e[0m\n\e\
    [31m47 |\e[0m                openingBracketsArray(openingBracketsIndex) = currentChar\n\
    \e[31m48 |\e[0m                openingBracketsIndex += \e[31m1\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659795135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        openingBrackets.forall(x => closingBrackets.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnwwxzlpg.scala:20)\n\tat Problem.main(tmpnwwxzlpg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(true) { (result, next) =>\n          \
    \  if (next == \"(\") result && correctBracketing(next)\n            else result\
    \ && !correctBracketing(next)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzbngrcj_.scala:16:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (next == \e[31m\"(\"\e[0m)\
    \ result && correctBracketing(next)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzbngrcj_.scala:16:57\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (next\
    \ == \e[31m\"(\"\e[0m) result && correctBracketing(next)\n\e[31m\e[31m   |\e[0m\
    \                                                         ^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                                 Found:    (next : Char)\n\
    \e[31m   |\e[0m                                                 Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzbngrcj_.scala:17:46\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e[0m result\
    \ && !correctBracketing(next)\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                 Found:    (next : Char)\n\e[31m   |\e[0m                   \
    \                           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.map(x => if (x == '(') '(' else ')').contains(_)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzyb91rxl.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m'('\e[0m) \e[31m'('\e[0m \e[33melse\e\
    [0m \e[31m')'\e[0m).contains(_)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mChar\e[0m\e[1m\e[31m \e[0m\e\
    [1m\e[31m=\e[0m\e[1m\e[31m>\e[0m\e[1m\e[31m \e[0mBoolean\n\e[31m   |\e[0m    \
    \    Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.flatMap(_.toInt).forall(x => brackets.toList.flatMap(_.toInt).contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5t9qjlqo.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(_.toInt).forall(\e\
    [36mx\e[0m => brackets.toList.flatMap(_.toInt).contains(x))\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   Found:    Int\n\e[31m   |\e[0m                           \
    \     Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5t9qjlqo.scala:15:79 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        brackets.toList.flatMap(_.toInt).forall(\e[36mx\e[0m => brackets.toList.flatMap(_.toInt).contains(x))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                   Found:    Int\n\e[31m   |\e[0m                           \
    \                  Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(true)(_ && _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7mqxl_p1.scala:15:44\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.foldLeft(\e\
    [31mtrue\e[0m)(_ && _)\n\e[31m\e[31m   |\e[0m                                \
    \            ^\e[0m\n\e[31m   |\e[0m                                         \
    \   Found:    (_$2 : Char)\n\e[31m   |\e[0m                                  \
    \          Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"(\", \")\")\n        val closingBracketsArray = Array(\"(\", \")\"\
    )\n        val openingBracketsCount = openingBracketsArray.length\n        val\
    \ closingBracketsCount = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArray = openingBracketsArray.iterator\n        val\
    \ closingBracketsArray = closingBracketsArray.iterator\n        val openingBracketsArrayLength\
    \ = openingBracketsArrayLength\n        val closingBracketsArrayLength = closingBracketsArrayLength\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracketsArrayLength = closingBracketsArrayLength\n        val openingBracketsArrayLength\
    \ = openingBracketsArrayLength\n        val closingBracketsArrayLength = closingBracketsArrayLength\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracketsArrayLength = closingBracketsArrayLength\n        val openingBracketsArrayLength\
    \ = openingBracketsArrayLength\n        val closingBracketsArrayLength = closingBracketsArrayLength\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracketsArrayLength = closingBracketsArrayLength\n        val openingBracketsArrayLength\
    \ = openingBracketsArrayLength\n        val closingBracketsArrayLength = closingBracketsArrayLength\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracketsArrayLength = closingBracketsArrayLength\n        val openingBracketsArrayLength\
    \ = openingBracketsArrayLength\n        val closingBracketsArrayLength = closingBracketsArrayLength\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracketsArrayLength = closingBracketsArrayLength\n        val openingBracketsArrayLength\
    \ = openingBracketsArrayLength\n        val closingBracketsArrayLength = closingBracketsArrayLength\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBrackets\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpki2bbk14.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpki2bbk14.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopeningBracketsArray\e[0m = openingBracketsArray.iterator\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mopeningBracketsArray is already defined as \e[33mvalue\e[0m \e\
    [35mopeningBracketsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpki2bbk14.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArray\e[0m\
    \ = closingBracketsArray.iterator\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArray is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosingBracketsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpki2bbk14.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArrayLength\e\
    [0m = openingBracketsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpki2bbk14.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayLength\e\
    [0m = closingBracketsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayLength is alrea"
  stdout: ''
  timestamp: 1659795134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsArray = Array[Int](bracketsArrayLength)\n\
    \        var i = 0\n        while (i < bracketsArrayLength) {\n            openingBracketsArray(i)\
    \ = bracketsArray(i) == '(' ? 1 : bracketsArray(i) == ')' ? -1 : 0\n         \
    \   i += 1\n        }\n        val closingBracketsArray = Array[Int](bracketsArrayLength)\n\
    \        i = 0\n        while (i < bracketsArrayLength) {\n            closingBracketsArray(i)\
    \ = bracketsArray(i) == ')' ? 1 : bracketsArray(i) == '(' ? -1 : 0\n         \
    \   i += 1\n        }\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  if (openingBracketsArrayLength != closingBracketsArrayLength) {\n         \
    \   return false\n        }\n        var i = 0\n        while (i < openingBracketsArrayLength)\
    \ {\n            if (openingBracketsArray(i) != closingBracketsArray(i)) {\n \
    \               return false\n            }\n            i += 1\n        }\n \
    \       return true\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmplnutlj_p.scala:20:81 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            openingBracketsArray(i) = bracketsArray(i)\
    \ == \e[31m'('\e[0m ? \e[31m1\e[0m : \e[35mbracketsArray\e[0m(i) == \e[31m')'\e\
    [0m ? -\e[31m1\e[0m : \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                 end of statement expected but '(' found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplnutlj_p.scala:20:62 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            openingBracketsArray(i) = bracketsArray(i)\
    \ == \e[31m'('\e[0m ? \e[31m1\e[0m : \e[35mbracketsArray\e[0m(i) == \e[31m')'\e\
    [0m ? -\e[31m1\e[0m : \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \                                      ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                              value ? is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659795134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.filter(c => c == '(').length\n        val closingBracketsCount\
    \ = bracketsArray.filter(c => c == ')').length\n        openingBracketsCount ==\
    \ closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphpz2_v2p.scala:26)\n\tat Problem.main(tmphpz2_v2p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795087
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        var openingBrackets\
    \ = 0\n        var closingBrackets = 0\n        var openingBracketsArray = Array.empty[Char]\n\
    \        var closingBracketsArray = Array.empty[Char]\n        for (i <- 0 until\
    \ bracketsArray.length) {\n            if (bracketsArray(i) == '(') {\n      \
    \          openingBrackets += 1\n                openingBracketsArray :+= bracketsArray(i)\n\
    \            } else if (bracketsArray(i) == ')') {\n                closingBrackets\
    \ += 1\n                closingBracketsArray :+= bracketsArray(i)\n          \
    \  }\n        }\n        if (openingBrackets == closingBrackets) {\n         \
    \   if (openingBracketsArray.length == closingBracketsArray.length) {\n      \
    \          for (i <- 0 until openingBracketsArray.length) {\n                \
    \    if (openingBracketsArray(i) != closingBracketsArray(i)) {\n             \
    \           return false\n                    }\n                }\n         \
    \       return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\"))\
    \ == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2jptfxl1.scala:42)\n\tat Problem.main(tmp2jptfxl1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795137
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpozai17kz.scala:22)\n\tat Problem.main(tmpozai17kz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayIndex = 0\n        val bracketsArrayIndex2\
    \ = 0\n        var bracketsArrayIndex3 = 0\n        var bracketsArrayIndex4 =\
    \ 0\n        var bracketsArrayIndex5 = 0\n        var bracketsArrayIndex6 = 0\n\
    \        var bracketsArrayIndex7 = 0\n        var bracketsArrayIndex8 = 0\n  \
    \      var bracketsArrayIndex9 = 0\n        var bracketsArrayIndex10 = 0\n   \
    \     var bracketsArrayIndex11 = 0\n        var bracketsArrayIndex12 = 0\n   \
    \     var bracketsArrayIndex13 = 0\n        var bracketsArrayIndex14 = 0\n   \
    \     var bracketsArrayIndex15 = 0\n        var bracketsArrayIndex16 = 0\n   \
    \     var bracketsArrayIndex17 = 0\n        var bracketsArrayIndex18 = 0\n   \
    \     var bracketsArrayIndex19 = 0\n        var bracketsArrayIndex20 = 0\n   \
    \     var bracketsArrayIndex21 = 0\n        var bracketsArrayIndex22 = 0\n   \
    \     var bracketsArrayIndex23 = 0\n        var bracketsArrayIndex24 = 0\n   \
    \     var bracketsArrayIndex25 = 0\n        var bracketsArrayIndex26 = 0\n   \
    \     var bracketsArrayIndex27 = 0\n        var bracketsArrayIndex28 = 0\n   \
    \     var bracketsArrayIndex29 = 0\n        var bracketsArrayIndex30 = 0\n   \
    \     var bracketsArrayIndex31 = 0\n        var bracketsArrayIndex32 = 0\n   \
    \     var bracketsArrayIndex33 = 0\n        var bracketsArrayIndex34 = 0\n   \
    \     var bracketsArrayIndex35 = 0\n        var bracketsArrayIndex36 = 0\n   \
    \     var bracketsArrayIndex37 = 0\n        var bracketsArrayIndex38 = 0\n   \
    \     var bracketsArrayIndex39 = 0\n        var bracketsArrayIndex40 = 0\n   \
    \     var bracketsArrayIndex41 = 0\n        var bracketsArrayIndex42 = 0\n   \
    \     var bracketsArrayIndex43 = 0\n        var bracketsArrayIndex44 = 0\n   \
    \     var bracketsArrayIndex45 = 0\n        var bracketsArrayIndex46 = 0\n   \
    \     var bracketsArrayIndex47 = 0\n        var bracketsArrayIndex48 = 0\n   \
    \     var bracketsArrayIndex49 = 0\n        var bracketsArrayIndex50 = 0\n   \
    \     var bracketsArrayIndex51 = 0\n        var bracketsArrayIndex52 = 0\n   \
    \     var bracketsArrayIndex53 = 0\n        var bracketsArrayIndex54 = 0\n   \
    \     var bracketsArrayIndex55 = 0\n        var bracketsArrayIndex56 = 0\n   \
    \     var bracketsArrayIndex57 = 0\n        var bracketsArrayIndex58 = 0\n   \
    \     var bracketsArrayIndex59 = 0\n        var bracketsArrayIndex60 = 0\n   \
    \     var bracketsArrayIndex61 = 0\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx0ovykoz.scala:79:5\
    \ ---------------------\e[0m\e[0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toList\n        val openingBracketsCount\
    \ = bracketsArray.count(x => x == \"(\")\n        val closingBracketsCount = bracketsArray.count(x\
    \ => x == \")\")\n        openingBracketsCount == closingBracketsCount\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\"))\
    \ == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpy5e4npc4.scala:16:60 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsCount\e[0m\
    \ = bracketsArray.count(\e[36mx\e[0m => x == \e[31m\"(\"\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                                                            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpy5e4npc4.scala:17:60 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsCount\e[0m\
    \ = bracketsArray.count(\e[36mx\e[0m => x == \e[31m\")\"\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                                                            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659795136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => true\n       \
    \     case head :: tail => {\n                val openingBrackets = head.split(\"\
    \\\\(\")\n                val closingBrackets = tail.split(\"\\\\)\")\n      \
    \          openingBrackets.forall(closingBrackets.contains)\n            }\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmposxocquy.scala:18:43 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mopeningBrackets\e\
    [0m = head.split(\e[31m\"\\\\(\"\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \                      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \               value split is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmposxocquy.scala:19:43 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m                \e[33mval\e[0m \e[36mclosingBrackets\e[0m = tail.split(\e\
    [31m\"\\\\)\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value split is not a member of List[Char]\
    \ - did you mean tail.splitAt?\n2 errors found\n"
  stdout: ''
  timestamp: 1659795136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => true\n       \
    \     case head :: tail =>\n                val openingBrackets = brackets.substring(0,head.length)\n\
    \                val closingBrackets = brackets.substring(head.length,brackets.length)\n\
    \                openingBrackets.toList match {\n                    case Nil\
    \ => true\n                    case head :: tail =>\n                        closingBrackets.toList\
    \ match {\n                            case Nil => true\n                    \
    \        case head :: tail =>\n                                head.equals(tail)\n\
    \                        }\n                }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv4crcln5.scala:18:64 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mopeningBrackets\e\
    [0m = brackets.substring(\e[31m0\e[0m,head.length)\n\e[31m\e[31m   |\e[0m    \
    \                                                       ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value length is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv4crcln5.scala:19:62 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mclosingBrackets\e\
    [0m = brackets.substring(head.length,brackets.length)\n\e[31m\e[31m   |\e[0m \
    \                                                        ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                    value length is not a member\
    \ of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659795136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => true\n       \
    \     case head :: tail => {\n                val openingBrackets = brackets.substring(0,head.length)\n\
    \                val closingBrackets = brackets.substring(head.length,brackets.length)\n\
    \                openingBrackets.toList match {\n                    case Nil\
    \ => true\n                    case head :: tail => {\n                      \
    \  closingBrackets.toList match {\n                            case Nil => true\n\
    \                            case head :: tail => {\n                        \
    \        head == tail => false\n                            }\n              \
    \          }\n                    }\n                }\n            }\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmplpkdf43o.scala:26:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                                head == tail => \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                not a legal formal parameter\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmplpkdf43o.scala:18:64 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mopeningBrackets\e\
    [0m = brackets.substring(\e[31m0\e[0m,head.length)\n\e[31m\e[31m   |\e[0m    \
    \                                                       ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value length is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplpkdf43o.scala:19:62 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mclosingBrackets\e\
    [0m = brackets.substring(head.length,brackets.length)\n\e[31m\e[31m   |\e[0m \
    \                                                        ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                    value length is not a member\
    \ of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659795137
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmb8_p5od.scala:22)\n\tat Problem.main(tmpmb8_p5od.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toList\n        val bracketsArraySize\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCountArray = new Array[Int](bracketsArraySize)\n\
    \        var closingBracketsCountArray = new Array[Int](bracketsArraySize)\n \
    \       var openingBracketsCountArrayIndex = 0\n        var closingBracketsCountArrayIndex\
    \ = 0\n        var openingBracketsCountArrayIndex2 = 0\n        var closingBracketsCountArrayIndex2\
    \ = 0\n        var openingBracketsCountArrayIndex3 = 0\n        var closingBracketsCountArrayIndex3\
    \ = 0\n        var openingBracketsCountArrayIndex4 = 0\n        var closingBracketsCountArrayIndex4\
    \ = 0\n        var openingBracketsCountArrayIndex5 = 0\n        var closingBracketsCountArrayIndex5\
    \ = 0\n        var openingBracketsCountArrayIndex6 = 0\n        var closingBracketsCountArrayIndex6\
    \ = 0\n        var openingBracketsCountArrayIndex7 = 0\n        var closingBracketsCountArrayIndex7\
    \ = 0\n        var openingBracketsCountArrayIndex8 = 0\n        var closingBracketsCountArrayIndex8\
    \ = 0\n        var openingBracketsCountArrayIndex9 = 0\n        var closingBracketsCountArrayIndex9\
    \ = 0\n        var openingBracketsCountArrayIndex10 = 0\n        var closingBracketsCountArrayIndex10\
    \ = 0\n        var openingBracketsCountArrayIndex11 = 0\n        var closingBracketsCountArrayIndex11\
    \ = 0\n        var openingBracketsCountArrayIndex12 = 0\n        var closingBracketsCountArrayIndex12\
    \ = 0\n        var openingBracketsCountArrayIndex13 = 0\n        var closingBracketsCountArrayIndex13\
    \ = 0\n        var openingBracketsCountArrayIndex14 = 0\n        var closingBracketsCountArrayIndex14\
    \ = 0\n        var openingBracketsCountArrayIndex15 = 0\n        var closingBracketsCountArrayIndex15\
    \ = 0\n        var openingBracketsCountArrayIndex16 = 0\n        var closingBracketsCountArrayIndex16\
    \ = 0\n        var openingBracketsCountArrayIndex17 = 0\n        var closingBracketsCountArrayIndex17\
    \ = 0\n        var openingBracketsCountArrayIndex18 = 0\n        var closingBracketsCountArrayIndex18\
    \ = 0\n        var openingBracketsCountArrayIndex19 = 0\n        var closingBracketsCountArrayIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpawnp2jk2.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpawnp2jk2.scala:59:5 ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayCopy = Array(bracketsArrayLength)\n\
    \        bracketsArrayCopy.copyToArray(bracketsArray, 0)\n        val openingBracketsArray\
    \ = Array(bracketsArrayLength)\n        val closingBracketsArray = Array(bracketsArrayLength)\n\
    \        val openingBracketsArrayCopy = Array(openingBracketsArray.length)\n \
    \       val closingBracketsArrayCopy = Array(closingBracketsArray.length)\n  \
    \      val openingBracketsArrayCopy = Array(openingBracketsArray.length)\n   \
    \     val closingBracketsArrayCopy = Array(closingBracketsArray.length)\n    \
    \    var openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n    \
    \    var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBracketsArrayCopyIndex\
    \ = 0\n        var openingBracketsArrayCopyIndex = 0\n        var closingBrackets\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4di8yeg_.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4di8yeg_.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopeningBracketsArrayCopy\e[0m = Array(openingBracketsArray.length)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayCopy is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsArrayCopy\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4di8yeg_.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayCopy\e\
    [0m = Array(closingBracketsArray.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayCopy is already defined as \e[33mvalue\e\
    [0m \e[35mclosingBracketsArrayCopy\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4di8yeg_.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m \e[36mopeningBracketsArrayCopyIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayCopyIndex is already defined as \e[33mvariable\e\
    [0m \e[35mopeningBracketsArrayCopyIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4di8yeg_.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m \e[36mclosingBracketsArrayCopyIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayCopyIndex is already def"
  stdout: ''
  timestamp: 1659795101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.flatMap(x => x.toList).forall(x => brackets.indexOf(x)\
    \ == brackets.lastIndexOf(x))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8thcidzq.scala:15:39 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(\e[36mx\e[0m => x.toList).forall(\e\
    [36mx\e[0m => brackets.indexOf(x) == brackets.lastIndexOf(x))\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \          value toList is not a member of Char - did you mean x.toInt?\n\e[31m\e\
    [31m-- [E051] Reference Error: /tmp/tmp8thcidzq.scala:15:91 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(\e[36mx\e[0m => x.toList).forall(\e\
    [36mx\e[0m => brackets.indexOf(x) == brackets.lastIndexOf(x))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mlastIndexOf\e[0m in \e[33mclass\e\
    [0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String): Int\n\e[31m \
    \  |\e[0m (x$0: Int): Int\n\e[31m   |\e[0mboth match arguments ((x : Nothing))\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmp8thcidzq.scala:15:68\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.flatMap(\e\
    [36mx\e[0m => x.toList).forall(\e[36mx\e[0m => brackets.indexOf(x) == brackets.lastIndexOf(x))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mindexOf\e[0m in \e[33mclass\e[0m \e[35mString\e[0m\
    \ with types\n\e[31m   |\e[0m (x$0: String): Int\n\e[31m   |\e[0m (x$0: Int):\
    \ Int\n\e[31m   |\e[0mboth match arguments ((x : Nothing))\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList match {\n            case Nil => true\n       \
    \     case head :: tail => {\n                val openingBrackets = brackets.substring(0,head.length)\n\
    \                val closingBrackets = brackets.substring(head.length)\n     \
    \           val openingBracketsCount = openingBrackets.toList.length\n       \
    \         val closingBracketsCount = closingBrackets.toList.length\n         \
    \       openingBracketsCount == closingBracketsCount && openingBrackets.toList\
    \ == closingBrackets.toList\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfza1c3_y.scala:18:64 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mopeningBrackets\e\
    [0m = brackets.substring(\e[31m0\e[0m,head.length)\n\e[31m\e[31m   |\e[0m    \
    \                                                       ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value length is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfza1c3_y.scala:19:62 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mclosingBrackets\e\
    [0m = brackets.substring(head.length)\n\e[31m\e[31m   |\e[0m                 \
    \                                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                 value length is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsSet = brackets.toSet\n        val openingBrackets =\
    \ bracketsSet.filter(_ == \"(\")\n        val closingBrackets = bracketsSet.filter(_\
    \ == \")\")\n        openingBrackets.size == closingBrackets.size\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvjhvfvcp.scala:16:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = bracketsSet.filter(_\
    \ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and\
    \ String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpvjhvfvcp.scala:17:49\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mclosingBrackets\e[0m = bracketsSet.filter(_ == \e[31m\"\
    )\"\e[0m)\n\e[31m\e[31m   |\e[0m                                             \
    \    ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659795125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfxr1sjd4.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfxr1sjd4.scala:69:5 ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        openingBrackets.size == closingBrackets.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptu298any.scala:20)\n\tat Problem.main(tmptu298any.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = bracketsArray.filter(c => c == '(')\n        val closingBracketsArray = bracketsArray.filter(c\
    \ => c == ')')\n        openingBracketsArray.forall(c => closingBracketsArray.contains(c))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprz1hmh1s.scala:21)\n\tat Problem.main(tmprz1hmh1s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBrackets = 0\n        var closingBrackets\
    \ = 0\n        var openingBracketsArray = new Array[Int](bracketsArrayLength)\n\
    \        var closingBracketsArray = new Array[Int](bracketsArrayLength)\n    \
    \    var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var currentOpeningBracket = 0\n        var currentClosingBracket\
    \ = 0\n        var currentOpeningBracketArrayIndex = 0\n        var currentClosingBracketArrayIndex\
    \ = 0\n        var currentOpeningBracketArray = new Array[Int](bracketsArrayLength)\n\
    \        var currentClosingBracketArray = new Array[Int](bracketsArrayLength)\n\
    \        var currentOpeningBracketArrayIndex = 0\n        var currentClosingBracketArrayIndex\
    \ = 0\n        var currentOpeningBracketArray = new Array[Int](bracketsArrayLength)\n\
    \        var currentClosingBracketArray = new Array[Int](bracketsArrayLength)\n\
    \        var currentOpeningBracketArrayIndex = 0\n        var currentClosingBracketArrayIndex\
    \ = 0\n        var currentOpeningBracketArray = new Array[Int](bracketsArrayLength)\n\
    \        var currentClosingBracketArray = new Array[Int](bracketsArrayLength)\n\
    \        var currentOpeningBracketArrayIndex = 0\n        var currentClosingBracketArrayIndex\
    \ = 0\n        var currentOpeningBracketArray = new Array[Int](bracketsArrayLength)\n\
    \        var currentClosingBracketArray = new Array[Int](bracketsArrayLength)\n\
    \        var currentOpeningBracketArrayIndex = 0\n        var currentClosingBracketArrayIndex\
    \ = 0\n        var currentOpeningBracketArray = new Array[Int](bracketsArrayLength)\n\
    \        var currentClosingBracketArray = new Array[Int](bracketsArrayLength)\n\
    \        var currentOpeningBracketArrayIndex = 0\n        var currentClosingBracketArrayIndex\
    \ = 0\n        var currentOpeningBracketArray = new Array[Int](bracketsArrayLength)\n\
    \        var currentClosingBracketArray = new Array[Int](bracketsArrayLength)\n\
    \        var currentOpeningBracketArrayIndex = 0\n        var currentClosingBracketArrayIndex\
    \ = 0\n        var currentOpeningBracketArray = new Array[Int](bracketsArrayLength)\n\
    \        var current\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqsfz9kkg.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqsfz9kkg.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentOpeningBracketArrayIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentOpeningBracketArrayIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentOpeningBracketArrayIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqsfz9kkg.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mvar\e[0m \e[36mcurrentClosingBracketArrayIndex\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentClosingBracketArrayIndex is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentClosingBracketArrayIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqsfz9kkg.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentOpeningBracketArray\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e\
    [0m](bracketsArrayLength)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentOpeningBracketArray is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentOpeningBracketArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqsfz9kkg.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m \e[36mcurrentClosingBracketArray\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](bracketsArrayLength)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659795136
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsCount = bracketsArray.count(_\
    \ == '(')\n        val closingBracketsCount = bracketsArray.count(_ == ')')\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyzgq4d6n.scala:27)\n\tat Problem.main(tmpyzgq4d6n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795129
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBrackets.zipWithIndex.forall\
    \ { case (open, index) =>\n            closingBrackets.contains(open) && index\
    \ != openingBracketsCount - 1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9kgvypgd.scala:24)\n\tat Problem.main(tmp9kgvypgd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsArray = Array(\"(\", \")\"\
    )\n        val closingBracketsArray = Array(\"(\", \")\")\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracketsArrayLength = closingBracketsArrayLength\n        var openingBracketsArrayIndex\
    \ = 0\n        var closingBracketsArrayIndex = 0\n        var openingBracketsArrayIndex2\
    \ = 0\n        var closingBracketsArrayIndex2 = 0\n        var openingBracketsArrayIndex3\
    \ = 0\n        var closingBracketsArrayIndex3 = 0\n        var openingBracketsArrayIndex4\
    \ = 0\n        var closingBracketsArrayIndex4 = 0\n        var openingBracketsArrayIndex5\
    \ = 0\n        var closingBracketsArrayIndex5 = 0\n        var openingBracketsArrayIndex6\
    \ = 0\n        var closingBracketsArrayIndex6 = 0\n        var openingBracketsArrayIndex7\
    \ = 0\n        var closingBracketsArrayIndex7 = 0\n        var openingBracketsArrayIndex8\
    \ = 0\n        var closingBracketsArrayIndex8 = 0\n        var openingBracketsArrayIndex9\
    \ = 0\n        var closingBracketsArrayIndex9 = 0\n        var openingBracketsArrayIndex10\
    \ = 0\n        var closingBracketsArrayIndex10 = 0\n        var openingBracketsArrayIndex11\
    \ = 0\n        var closingBracketsArrayIndex11 = 0\n        var openingBracketsArrayIndex12\
    \ = 0\n        var closingBracketsArrayIndex12 = 0\n        var openingBracketsArrayIndex13\
    \ = 0\n        var closingBracketsArrayIndex13 = 0\n        var openingBracketsArrayIndex14\
    \ = 0\n        var closingBracketsArrayIndex14 = 0\n        var openingBracketsArrayIndex15\
    \ = 0\n        var closingBracketsArrayIndex15 = 0\n        var openingBracketsArrayIndex16\
    \ = 0\n        var closingBracketsArrayIndex16 = 0\n        var openingBracketsArrayIndex17\
    \ = 0\n        var closingBracketsArrayIndex17 = 0\n        var openingBracketsArrayIndex18\
    \ = 0\n        var closingBracketsArrayIndex18 = 0\n        var openingBracketsArrayIndex19\
    \ = 0\n        var closingBracketsArrayIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp44ze_12e.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44ze_12e.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopeningBracketsArrayLength\e[0m = openingBracketsArrayLength\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44ze_12e.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsArrayLength\e\
    [0m = closingBracketsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mclosingBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp44ze_12e.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659795137
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        openingBrackets.size == closingBrackets.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptu298any.scala:20)\n\tat Problem.main(tmptu298any.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        brackets.toList.foldLeft(true)(_ && _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n   \
    \ assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7mqxl_p1.scala:15:44\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        brackets.toList.foldLeft(\e\
    [31mtrue\e[0m)(_ && _)\n\e[31m\e[31m   |\e[0m                                \
    \            ^\e[0m\n\e[31m   |\e[0m                                         \
    \   Found:    (_$2 : Char)\n\e[31m   |\e[0m                                  \
    \          Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBrackets = 0\n        var closingBrackets\
    \ = 0\n        var currentBracket = bracketsArray(0)\n        var currentBracketIndex\
    \ = 0\n        var currentBracketCount = 0\n        var currentBracketCountInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracket = 0\n \
    \       var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracket\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx4tpyqb6.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx4tpyqb6.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpx4tpyqb6.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"\
    (\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    //\
    \ >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\"\
    )(()\")\n    // False\n    def correctBracketing(brackets : String) : Boolean\
    \ = {\n        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketCount = 0\n        var closingBracketCount\
    \ = 0\n        var openingBracketsArray = new Array[Char](bracketsArrayLength)\n\
    \        var closingBracketsArray = new Array[Char](bracketsArrayLength)\n   \
    \     var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsArrayLength = 0\n        var closingBracketsArrayLength\
    \ = 0\n        var openingBracketsArrayLastChar = ' '\n        var closingBracketsArrayLastChar\
    \ = ' '\n        var openingBracketsArrayLastCharIndex = 0\n        var closingBracketsArrayLastCharIndex\
    \ = 0\n        var openingBracketsArrayLastCharLength = 0\n        var closingBracketsArrayLastCharLength\
    \ = 0\n        var openingBracketsArrayLastCharIsWhitespace = false\n        var\
    \ closingBracketsArrayLastCharIsWhitespace = false\n        var openingBracketsArrayLastCharIsWhitespaceIndex\
    \ = 0\n        var closingBracketsArrayLastCharIsWhitespaceIndex = 0\n       \
    \ var openingBracketsArrayLastCharIsWhitespaceLength = 0\n        var closingBracketsArrayLastCharIsWhitespaceLength\
    \ = 0\n        var openingBracketsArrayLastCharIsWhitespaceLastChar = false\n\
    \        var closingBracketsArrayLastCharIsWhitespaceLastChar = false\n      \
    \  var openingBracketsArrayLastCharIsWhitespaceLastCharIndex = 0\n        var\
    \ closingBracketsArrayLastCharIsWhitespaceLastCharIndex = 0\n        var openingBracketsArrayLastCharIsWhitespaceLastCharLength\
    \ = 0\n        var closingBracketsArrayLastCharIsWhitespaceLastCharLength = 0\n\
    \        var openingBracketsArrayLastCharIsWhitespaceLastCharIsWhitespace = false\n\
    \        var closingBracketsArrayLastCharIsWhitespaceLastCharIsWhitespace = false\n\
    \        var openingBracketsArrayLastCharIsWhitespaceLastCharIsWhitespaceIndex\
    \ = 0\n        var closingBracketsArrayLastCharIsWhitespaceLastCharIsWhitespaceIndex\
    \ = 0\n        var openingBracketsArrayLastCharIsWhitespaceLastCharIsWhitespaceLength\
    \ = 0\n        var closingBracketsArrayLastCharIsWhitespaceLastCharIsWhitespaceLength\
    \ = 0\n        var openingBracketsArrayLastCharIsWhitespaceLastCharIsWhitespaceLastChar\
    \ = false\n        var closingBracketsArrayLastCharIsWhitespaceLastCharIsWhitespaceLastChar\
    \ = false\n        var openingBracketsArrayLastCharIsWhitespaceLastCharIsWhitespaceLastCharIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuhoj6_5l.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpuhoj6_5l.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795137
