language: scala
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val result = new mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\
    \n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantSet\
    \ = consonants.toSet\n        val vowelSet = vowels.toSet\n        val vowelCounts\
    \ = mutable.Map[String, Int]()\n        val consonantCounts = mutable.Map[String,\
    \ Int]()\n        val wordCounts = mutable.Map[String, Int]()\n        val wordList\
    \ = s.split(\" \").toList\n        wordList.foreach(word => {\n            val\
    \ wordArray = word.split(\"\")\n            wordArray.foreach(letter => {\n  \
    \              if (vowelSet.contains(letter)) {\n                    vowelCounts(letter)\
    \ = vowelCounts(letter) + 1\n                } else if (consonantSet.contains(letter))\
    \ {\n                    consonantCounts(letter) = consonantCounts(letter) + 1\n\
    \                }\n            })\n        })\n        vowelCounts.foreach {\
    \ case (letter, count) =>\n            if (count == n) {\n                result.add(word)\n\
    \            }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv2ihdks2.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv2ihdks2.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelCounts\e[0m = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpv2ihdks2.scala:22:30 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv2ihdks2.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mwordCounts\e[0m = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpv2ihdks2.scala:28:38 --------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m                \e[33mif\e[0m (vowelSet.contains(letter)) {\n\e[31m\e\
    [31m   |\e[0m                                      ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                      Found:    (letter : String)\n\e[31m   |\e\
    [0m                                      Required: Char\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation"
  stdout: ''
  timestamp: 1659805881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).toList\n\
    \        val consonants: List[String] = words.filter(_.matches(\"[aeiou]\"))\n\
    \        val consonantsCount: Map[String, Long] = consonants.groupBy(_.toLowerCase).mapValues(_.length)\n\
    \        val consonantsCountSorted: Map[String, Long] = consonantsCount.sortBy(_._2).reverse\n\
    \        val consonantsCountSortedKeys: List[String] = consonantsCountSorted.keys.toList\n\
    \        val consonantsCountSortedValues: List[Long] = consonantsCountSorted.values.toList\n\
    \        val consonantsCountSortedKeysSorted: Map[String, Long] = consonantsCountSorted.sortBy(_._1).reverse\n\
    \        val consonantsCountSortedKeysSortedValues: List[Long] = consonantsCountSortedKeys.map(consonantsCountSortedKeysSorted.get(_)).toList\n\
    \        val consonantsCountSortedKeysSortedValuesSorted: Map[String, Long] =\
    \ consonantsCountSortedKeysSortedValues.sortBy(_._1).reverse\n        val consonantsCountSortedKeysSortedValuesSortedKeys:\
    \ List[String] = consonantsCountSortedKeysSortedValuesSorted.keys.toList\n   \
    \     val consonantsCountSortedKeysSortedValuesSortedValues: List[Long] = consonantsCountSortedKeysSortedValuesSorted.values.toList\n\
    \        val consonantsCountSortedKeysSortedValuesSortedKeysSorted: Map[String,\
    \ Long] = consonantsCountSortedKeysSortedValuesSortedKeys.map(consonantsCountSortedKeysSortedValuesSortedKeysSorted.get(_)).toList\n\
    \        val consonantsCountSortedKeysSortedValuesSortedKeysSortedValues: List[Long]\
    \ = consonantsCountSortedKeysSortedValuesSortedKeys.map(consonantsCountSortedKeysSortedValuesSortedKeysSortedValues.get(_)).toList\n\
    \        val consonantsCountSortedKeysSortedValuesSortedKeysSortedValuesSorted:\
    \ Map[String, Long] = consonantsCountSortedKeysSortedValuesSortedKeysSortedValues.map(consonantsCountSortedKeysSortedValuesSortedKeysSortedValuesSorted.get(_)).toList\n\
    \        val consonantsCountSortedKeysSortedValuesSortedKeysSortedValuesSortedKeys:\
    \ List[String] = consonantsCountSortedKeysSortedValuesSortedKeysSortedValuesSorted.keys.toList\n\
    \        val consonantsCountSortedKeysSortedValuesSortedKeysSortedValuesSorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr3p3xq29.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr3p3xq29.scala:18:92 --------------------\e[0m\e[0m\n\e[31m18 |\e[0m\
    \        \e[33mval\e[0m \e[36mconsonantsCount\e[0m: \e[35mMap\e[0m[\e[35mString\e\
    [0m, \e[35mLong\e[0m] = consonants.groupBy(_.toLowerCase).mapValues(_.length)\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    scala.collection.MapView[String,\
    \ Int]\n\e[31m   |\e[0m                         Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr3p3xq29.scala:19:71\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantsCountSorted\e[0m: \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e\
    [0m] = consonantsCount.sortBy(_._2).reverse\n\e[31m\e[31m   |\e[0m           \
    \                                            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m    value sortBy is not a member of collection.mutable.Map[String, Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr3p3xq29.scala:22:87 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCountSortedKeysSorted\e\
    [0m: \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = consonantsCountSorted.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value sortBy is\
    \ not a member of collection.mutable.Map[String, Long]\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpr3p3xq29.scala:23:134 -------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCountSortedKeysSortedValues\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = consonantsCountSortedKeys.map(consonantsCountSortedKeysSorted.get(_)).toList\n\
    \e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659805883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jfvso53.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(n)).map(_.split(\"\
    \")).filter(_.size == n).map(_.mkString(\"\")).filter(_.nonEmpty)\n        words.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz511pm0i.scala:16:170\
    \ -------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(n)).map(_.split(\e\
    [31m\"\"\e[0m)).filter(_.size == n).map(_.mkString(\e[31m\"\"\e[0m)).filter(_.nonEmpty)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.split(\"\\\\W\"\
    ).length\n            if (count == n) {\n                result += (word + \"\
    \ \")\n            }\n        })\n        return result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpikftikv0.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \")\n        val list = mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            if (word.contains(\"a\") || word.contains(\"\
    e\") || word.contains(\"i\") || word.contains(\"o\") || word.contains(\"u\"))\
    \ {\n                list += word\n            }\n        }\n        if (list.size\
    \ < n) {\n            list\n        } else {\n            list.filter(_ => list.count(_\
    \ == word) == n)\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpofcb4k11.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \").filter(_.isLetter).map(_.toUpperCase)\n       \
    \ val list = words.toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\")\n        val consonantCount = new mutable.HashMap[String, Int]()\n  \
    \      val vowelCount = new mutable.HashMap[String, Int]()\n        val consonantCounts\
    \ = consonants.foldLeft(0)((acc, c) => acc + (consonantCount.getOrElse(c + \"\"\
    , 0)))\n        val vowelCounts = vowels.foldLeft(0)((acc, v) => acc + (vowelCount.getOrElse(v\
    \ + \"\", 0)))\n        list.foreach { word =>\n            val count = consonantCounts.get(word).orElse(vowelCounts.get(word).orElse(0))\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        result toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdg8caoys.scala:31:21 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        result toList\n\e[31m\e[31m   |\e[0m        \
    \             ^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpdg8caoys.scala:16:42 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mwords\e[0m = s.split(\e[31m\" \"\e[0m).filter(_.isLetter).map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg8caoys.scala:18:25\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdg8caoys.scala:21:33 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg8caoys.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelCount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpdg8caoys.scala:26:40 -----"
  stdout: ''
  timestamp: 1659805881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += (word + \" \")\n        })\n        if\
    \ (result.isEmpty) result else result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb9oa7c6c.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonants_count\
    \ = consonants.count(_ == ' ')\n        val vowels_count = vowels.count(_ == '\
    \ ')\n        val consonants_count = consonants.count(_ == ' ')\n        val vowels_count\
    \ = vowels.count(_ == ' ')\n        val consonants_count = consonants.count(_\
    \ == ' ')\n        val vowels_count = vowels.count(_ == ' ')\n        val consonants_count\
    \ = consonants.count(_ == ' ')\n        val vowels_count = vowels.count(_ == '\
    \ ')\n        val consonants_count = consonants.count(_ == ' ')\n        val vowels_count\
    \ = vowels.count(_ == ' ')\n        val consonants_count = consonants.count(_\
    \ == ' ')\n        val vowels_count = vowels.count(_ == ' ')\n        val consonants_count\
    \ = consonants.count(_ == ' ')\n        val vowels_count = vowels.count(_ == '\
    \ ')\n        val consonants_count = consonants.count(_ == ' ')\n        val vowels_count\
    \ = vowels.count(_ == ' ')\n        val consonants_count = consonants.count(_\
    \ == ' ')\n        val vowels_count = vowels.count(_ == ' ')\n        val consonants_count\
    \ = consonants.count(_ == ' ')\n        val vowels_count = vowels.count(_ == '\
    \ ')\n        val consonants_count = consonants.count(_ == ' ')\n        val vowels_count\
    \ = vowels.count(_ == ' ')\n        val consonants_count = consonants.count(_\
    \ == ' ')\n        val vowels_count = vowels.count(_ == ' ')\n        val consonants_count\
    \ = consonants.count(_ == ' ')\n        val vowels_count = vowels.count(_ == '\
    \ ')\n        val consonants_count = consonants.count(_ == ' ')\n        val vowels_count\
    \ = vowels.count(_ == ' ')\n        val consonants_count = consonants.count(_\
    \ == ' ')\n        val vowels_count = vowels.count(_ == ' ')\n        val consonants_count\
    \ = consonants.count(_ == ' ')\n        val vowels_count = vowels.count(_ == '\
    \ ')\n        val consonants_count = consonants.count(_ == ' ')\n        val vowels_count\
    \ = vowels.count(_ == \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpz470hnj6.scala:52:44 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mvowels_count\e[0m = vowels.count(_\
    \ == \n\e[31m\e[31m   |\e[0m                                            ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz470hnj6.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonants_count\e[0m = consonants.count(_ == \e[31m' '\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mconsonants_count is already defined as \e[33mvalue\e[0m \e[35mconsonants_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz470hnj6.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowels_count\e[0m = vowels.count(_ ==\
    \ \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowels_count is already defined as \e[33mvalue\e[0m \e[35mvowels_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz470hnj6.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mconsonants_count\e[0m = consonants.count(_\
    \ == \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonants_count is already defined as \e[33mvalue\e[0m \e\
    [35mconsonants_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpz470hnj6.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowels_count\e[0m = vowels.count(_\
    \ == \e[31m'"
  stdout: ''
  timestamp: 1659805879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += word\n        }\n        if (result.isEmpty)\
    \ result else result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp27l6db2p.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val list2 = list.map(x => x.toUpperCase)\n\
    \        val list3 = list2.filter(x => x.contains(\"A\"))\n        val list4 =\
    \ list3.filter(x => x.contains(\"B\"))\n        val list5 = list4.filter(x =>\
    \ x.contains(\"C\"))\n        val list6 = list5.filter(x => x.contains(\"D\"))\n\
    \        val list7 = list6.filter(x => x.contains(\"E\"))\n        val list8 =\
    \ list7.filter(x => x.contains(\"F\"))\n        val list9 = list8.filter(x =>\
    \ x.contains(\"G\"))\n        val list10 = list9.filter(x => x.contains(\"H\"\
    ))\n        val list11 = list10.filter(x => x.contains(\"I\"))\n        val list12\
    \ = list11.filter(x => x.contains(\"J\"))\n        val list13 = list12.filter(x\
    \ => x.contains(\"K\"))\n        val list14 = list13.filter(x => x.contains(\"\
    L\"))\n        val list15 = list14.filter(x => x.contains(\"M\"))\n        val\
    \ list16 = list15.filter(x => x.contains(\"N\"))\n        val list17 = list16.filter(x\
    \ => x.contains(\"O\"))\n        val list18 = list17.filter(x => x.contains(\"\
    P\"))\n        val list19 = list18.filter(x => x.contains(\"Q\"))\n        val\
    \ list20 = list19.filter(x => x.contains(\"R\"))\n        val list21 = list20.filter(x\
    \ => x.contains(\"S\"))\n        val list22 = list21.filter(x => x.contains(\"\
    T\"))\n        val list23 = list22.filter(x => x.contains(\"U\"))\n        val\
    \ list24 = list23.filter(x => x.contains(\"V\"))\n        val list25 = list24.filter(x\
    \ => x.contains(\"W\"))\n        val list26 = list25.filter(x => x.contains(\"\
    X\"))\n        val list27 = list26.filter(x => x.contains(\"Y\"))\n        val\
    \ list28 = list27.filter(x => x.contains(\"Z\"))\n        val list29 = list28.filter(x\
    \ => x.contains(\"a\"))\n        val list30 = list29.filter(x => x.contains(\"\
    b\"))\n        val list31 = list30.filter(x => x.contains(\"c\"))\n        val\
    \ list32 = list31.filter(x => x.contains(\"d\"))\n        val list33 = list32.filter(x\
    \ => x.contains(\"e\"))\n        val list34 = list33.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9nzl0q9x.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9nzl0q9x.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val list2 = list.map(x => x.toUpperCase)\n\
    \        val list3 = list2.filter(x => x.contains(\"A\"))\n        val list4 =\
    \ list3.filter(x => x.contains(\"E\"))\n        val list5 = list4.filter(x =>\
    \ x.contains(\"I\"))\n        val list6 = list5.filter(x => x.contains(\"O\"))\n\
    \        val list7 = list6.filter(x => x.contains(\"U\"))\n        val list8 =\
    \ list7.filter(x => x.contains(\"a\"))\n        val list9 = list8.filter(x =>\
    \ x.contains(\"e\"))\n        val list10 = list9.filter(x => x.contains(\"i\"\
    ))\n        val list11 = list10.filter(x => x.contains(\"o\"))\n        val list12\
    \ = list11.filter(x => x.contains(\"u\"))\n        val list13 = list12.filter(x\
    \ => x.contains(\"A\"))\n        val list14 = list13.filter(x => x.contains(\"\
    E\"))\n        val list15 = list14.filter(x => x.contains(\"I\"))\n        val\
    \ list16 = list15.filter(x => x.contains(\"O\"))\n        val list17 = list16.filter(x\
    \ => x.contains(\"U\"))\n        val list18 = list17.filter(x => x.contains(\"\
    a\"))\n        val list19 = list18.filter(x => x.contains(\"e\"))\n        val\
    \ list20 = list19.filter(x => x.contains(\"i\"))\n        val list21 = list20.filter(x\
    \ => x.contains(\"o\"))\n        val list22 = list21.filter(x => x.contains(\"\
    u\"))\n        val list23 = list22.filter(x => x.contains(\"A\"))\n        val\
    \ list24 = list23.filter(x => x.contains(\"E\"))\n        val list25 = list24.filter(x\
    \ => x.contains(\"I\"))\n        val list26 = list25.filter(x => x.contains(\"\
    O\"))\n        val list27 = list26.filter(x => x.contains(\"U\"))\n        val\
    \ list28 = list27.filter(x => x.contains(\"a\"))\n        val list29 = list28.filter(x\
    \ => x.contains(\"e\"))\n        val list30 = list29.filter(x => x.contains(\"\
    i\"))\n        val list31 = list30.filter(x => x.contains(\"o\"))\n        val\
    \ list32 = list31.filter(x => x.contains(\"u\"))\n        val list33 = list32.filter(x\
    \ => x.contains(\"A\"))\n        val list34 = list33.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpue5_otql.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpue5_otql.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) result += (word + \" \")\n        }\n  \
    \      return result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdkixjcu4.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        })\n        if (result.isEmpty) {\n            List()\n        } else\
    \ {\n            result.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqh235gy9.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isDigit)\n        val list = list.filterNot(_.isLetter)\n\
    \        val list = list.filterNot(_.isSpace)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isSpace)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filterNot(_.isEmpty)\n        val list = list.filterNot(_.isEmpty)\n\
    \        val list = list.filter\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbfw81rjd.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filterNot(_.isEmpty)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbfw81rjd.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filterNot(_.isDigit)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbfw81rjd.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filterNot(_.isLetter)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbfw81rjd.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filterNot(_.isSpace)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbfw81rjd.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filterNot(_.isEmpty)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659805880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).toList\n\
    \        val consonants: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(\"\
    a\")).toList\n        val vowels: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(\"\
    e\")).toList\n        val consonantCounts = consonants.groupBy(c => c).mapValues(_.size).toList\n\
    \        val vowelCounts = vowels.groupBy(c => c).mapValues(_.size).toList\n \
    \       val consonantCountAndVowelCounts = consonantCounts ++ vowelCounts\n  \
    \      val consonantAndVowelCounts = consonantCountAndVowelCounts.filter(_._2\
    \ > n)\n        val consonantAndVowelCountPairs = consonantAndVowelCounts.map(_._1\
    \ -> _._2)\n        val consonantAndVowelCountPairsSorted = consonantAndVowelCountPairs.sortBy(_._1)\n\
    \        val consonantAndVowelCountPairsSortedByCount = consonantAndVowelCountPairsSorted.sortBy(_._2)\n\
    \        val consonantAndVowelCountPairsSortedByCountReversed = consonantAndVowelCountPairsSortedByCount.reverse\n\
    \        consonantAndVowelCountPairsSortedByCountReversed.map(_._1).filter(_._2\
    \ == n).map(_._1)\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8jqtvbjk.scala:23:72 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mconsonantAndVowelCountPairs\e\
    [0m = consonantAndVowelCounts.map(_._1 -> _._2)\n\e[31m\e[31m   |\e[0m       \
    \                                                               ^^^^\e[0m\n\e\
    [31m   |\e[0m                                      value _1 is not a member of\
    \ String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8jqtvbjk.scala:24:85\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantAndVowelCountPairsSorted\e[0m = consonantAndVowelCountPairs.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                           ^^^^\e[0m\n\e[31m   |\e[0m                       \
    \              value _1 is not a member of Nothing\n\e[31m\e[31m-- Error: /tmp/tmp8jqtvbjk.scala:24:88\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ \e[33mval\e[0m \e[36mconsonantAndVowelCountPairsSorted\e[0m = consonantAndVowelCountPairs.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mBigDecimal\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659805881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val list2 = list.filter(_ => _.length ==\
    \ n)\n        val list3 = list2.filter(_ => _.contains(\"a\"))\n        val list4\
    \ = list3.filter(_ => _.contains(\"e\"))\n        val list5 = list4.filter(_ =>\
    \ _.contains(\"i\"))\n        val list6 = list5.filter(_ => _.contains(\"o\"))\n\
    \        val list7 = list6.filter(_ => _.contains(\"u\"))\n        list7\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpbq4urjv3.scala:17:37 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n)\n\e[31m\e[31m   |\e[0m                                   \
    \  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => _$2.length == n.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpbq4urjv3.scala:18:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e\
    [0m \e[36mlist3\e[0m = list2.filter(_ => _.contains(\e[31m\"a\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$4 of expanded function:\n\e[31m   |\e[0m   _$4 => _$4.contains(\e\
    [32m\"a\"\e[0m).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpbq4urjv3.scala:19:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e\
    [0m \e[36mlist4\e[0m = list3.filter(_ => _.contains(\e[31m\"e\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$6 of expanded function:\n\e[31m   |\e[0m   _$6 => _$6.contains(\e\
    [32m\"e\"\e[0m).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpbq4urjv3.scala:20:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mlist5\e[0m = list4.filter(_ => _.contains(\e[31m\"i\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$8 of expanded function:\n\e[31m   |\e[0m   _$8 => _$8.contains(\e\
    [32m\"i\"\e[0m).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpbq4urjv3.scala:21:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e\
    [0m \e[36mlist6\e[0m = list5.filter(_ => _.contains(\e[31m\"o\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m  Missing\
    \ parameter"
  stdout: ''
  timestamp: 1659805880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        if (result.isEmpty) {\n            List()\n  \
    \      } else {\n            result.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3uk85cz5.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val wordList = s.split(\" \").toList\n        val wordSet = wordList.map(_.toUpperCase).toSet\n\
    \        val result = wordList.filter(word => wordSet.toSet.size == n)\n     \
    \   result.map(word => word.toUpperCase).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptf98j70f.scala:19:53\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        result.map(\e[36mword\e\
    [0m => word.toUpperCase).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmay3tny6.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until list.size) {\n            val word = list(i)\n    \
    \        if (word.contains(\"a\") || word.contains(\"e\") || word.contains(\"\
    i\") || word.contains(\"o\") || word.contains(\"u\")) {\n                result.add(word)\n\
    \            }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpozosuhhi.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val list2 = list.map(x => x.toUpperCase)\n\
    \        val list3 = list2.filter(x => x.contains(\"A\"))\n        val list4 =\
    \ list3.filter(x => x.contains(\"E\"))\n        val list5 = list4.filter(x =>\
    \ x.contains(\"I\"))\n        val list6 = list5.filter(x => x.contains(\"O\"))\n\
    \        val list7 = list6.filter(x => x.contains(\"U\"))\n        val list8 =\
    \ list7.filter(x => x.contains(\"Y\"))\n        val list9 = list8.filter(x =>\
    \ x.contains(\"a\"))\n        val list10 = list9.filter(x => x.contains(\"e\"\
    ))\n        val list11 = list10.filter(x => x.contains(\"i\"))\n        val list12\
    \ = list11.filter(x => x.contains(\"o\"))\n        val list13 = list12.filter(x\
    \ => x.contains(\"u\"))\n        val list14 = list13.filter(x => x.contains(\"\
    y\"))\n        val list15 = list14.filter(x => x.contains(\"A\"))\n        val\
    \ list16 = list15.filter(x => x.contains(\"E\"))\n        val list17 = list16.filter(x\
    \ => x.contains(\"I\"))\n        val list18 = list17.filter(x => x.contains(\"\
    O\"))\n        val list19 = list18.filter(x => x.contains(\"U\"))\n        val\
    \ list20 = list19.filter(x => x.contains(\"Y\"))\n        val list21 = list20.filter(x\
    \ => x.contains(\"a\"))\n        val list22 = list21.filter(x => x.contains(\"\
    e\"))\n        val list23 = list22.filter(x => x.contains(\"i\"))\n        val\
    \ list24 = list23.filter(x => x.contains(\"o\"))\n        val list25 = list24.filter(x\
    \ => x.contains(\"u\"))\n        val list26 = list25.filter(x => x.contains(\"\
    y\"))\n        val list27 = list26.filter(x => x.contains(\"A\"))\n        val\
    \ list28 = list27.filter(x => x.contains(\"E\"))\n        val list29 = list28.filter(x\
    \ => x.contains(\"I\"))\n        val list30 = list29.filter(x => x.contains(\"\
    O\"))\n        val list31 = list30.filter(x => x.contains(\"U\"))\n        val\
    \ list32 = list31.filter(x => x.contains(\"Y\"))\n        val list33 = list32.filter(x\
    \ => x.contains(\"a\"))\n        val list34 = list33.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2xgl_6kn.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2xgl_6kn.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        }\n        if (result.isEmpty) {\n            List()\n        } else\
    \ {\n            result.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps58a3hu9.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        words.foreach(word => {\n            val count = word.count(c => c !=\
    \ \" \")\n            if (count == n) {\n                result += word\n    \
    \        }\n        })\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp68_s_m1d.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp68_s_m1d.scala:19:40\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \     \e[33mval\e[0m \e[36mcount\e[0m = word.count(\e[36mc\e[0m => c != \e[31m\"\
    \ \"\e[0m)\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659805892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \").filter(_.isLetter)\n        val list = words.toList\n\
    \        val count = words.count(_.isLetter)\n        val list2 = list.filter(_\
    \ => count(_) == n)\n        list2.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph4h6vd4l.scala:16:42 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = s.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter)\n\e[31m\e[31m   |\e[0m                    \
    \                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \        value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmph4h6vd4l.scala:18:34 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = words.count(_.isLetter)\n\e\
    [31m\e[31m   |\e[0m                                ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value isLetter is not a member of String\n\e\
    [31m\e[31m-- [E081] Type Error: /tmp/tmph4h6vd4l.scala:19:43 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => count(_) == n)\n\e[31m\e[31m   |\e[0m                                   \
    \        ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m   I could not infer the type of the parameter _$4 of expanded function:\n\
    \e[31m   |\e[0m   _$4 => count(_$4) == n.\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmph4h6vd4l.scala:19:37\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e\
    [0m \e[36mlist2\e[0m = list.filter(_ => count(_) == n)\n\e[31m\e[31m   |\e[0m\
    \                                     ^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                        \e[33mvalue\e[0m \e[35mcount\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        words.foreach(w => {\n            val letters = w.toCharArray\n     \
    \       val count = letters.filter(x => x != 'a' && x != 'e' && x != 'i' && x\
    \ != 'o' && x != 'u').length\n            if (count == n) {\n                result\
    \ += (w + \" \")\n            }\n        })\n        return result.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpycsaumg8.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        })\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx8pysd8s.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result: List[String] = new ArrayList[String]()\n\
    \        list.foreach(word => {\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) {\n                result.add(word)\n  \
    \          }\n        })\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo7wm79rq.scala:17:39 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m \e[35mArrayList\e[0m[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                       Not found: type ArrayList\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo7wm79rq.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                result.add(word)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        value add is not a member of List[String]\n2 errors found\n"
  stdout: ''
  timestamp: 1659805894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = new mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\
    \n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantSet\
    \ = consonants.toSet\n        val vowelSet = vowels.toSet\n        val vowelCount\
    \ = vowels.toSet.size\n        val consonantCount = consonants.toSet.size\n  \
    \      val vowelCountSet = vowelCount.toSet\n        val consonantCountSet = consonantCount.toSet\n\
    \        val vowelCountSet = vowelCount.toSet\n        val consonantCountSet =\
    \ consonantCount.toSet\n        val vowelCountSet = vowelCount.toSet\n       \
    \ val consonantCountSet = consonantCount.toSet\n        val vowelCountSet = vowelCount.toSet\n\
    \        val consonantCountSet = consonantCount.toSet\n        val vowelCountSet\
    \ = vowelCount.toSet\n        val consonantCountSet = consonantCount.toSet\n \
    \       val vowelCountSet = vowelCount.toSet\n        val consonantCountSet =\
    \ consonantCount.toSet\n        val vowelCountSet = vowelCount.toSet\n       \
    \ val consonantCountSet = consonantCount.toSet\n        val vowelCountSet = vowelCount.toSet\n\
    \        val consonantCountSet = consonantCount.toSet\n        val vowelCountSet\
    \ = vowelCount.toSet\n        val consonantCountSet = consonantCount.toSet\n \
    \       val vowelCountSet = vowelCount.toSet\n        val consonantCountSet =\
    \ consonantCount.toSet\n        val vowelCountSet = vowelCount.toSet\n       \
    \ val consonantCountSet = consonantCount.toSet\n        val vowelCountSet = vowelCount.toSet\n\
    \        val consonantCountSet = consonantCount.toSet\n        val vowelCountSet\
    \ = vowelCount.toSet\n        val consonantCountSet = consonantCount.toSet\n \
    \       val vowelCountSet = vowelCount.toSet\n        val consonantCountSet =\
    \ consonantCount.toSet\n        val vowelCountSet = vowelCount.toSet\n       \
    \ val consonantCountSet = consonantCount.toSet\n        val vowelCountSet\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpflaaklld.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpflaaklld.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelCountSet\e[0m = vowelCount.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCountSet is already defined as \e[33mvalue\e[0m \e[35mvowelCountSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpflaaklld.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantCountSet\e[0m = consonantCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantCountSet is already defined as \e[33mvalue\e[0m \e[35mconsonantCountSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpflaaklld.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelCountSet\e[0m = vowelCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelCountSet is already defined as \e[33mvalue\e[0m \e[35mvowelCountSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpflaaklld.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantCountSet\e[0m = consonantCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantCountSet is already defined as \e[33mvalue\e[0m \e[35mconsonantCountSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] N"
  stdout: ''
  timestamp: 1659805897
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowel_consonants\
    \ = vowels ++ consonants\n        val vowel_consonant_pairs = vowel_consonants.grouped(2).map(_.mkString)\n\
    \        val vowel_consonant_pairs_with_n = vowel_consonant_pairs.filter(_ =>\
    \ n >= 0)\n        val vowel_consonant_pairs_with_n2 = vowel_consonant_pairs_with_n.filter(_\
    \ => n <= 0)\n        val vowel_consonant_pairs_with_n3 = vowel_consonant_pairs_with_n2.filter(_\
    \ => n >= 1)\n        val vowel_consonant_pairs_with_n4 = vowel_consonant_pairs_with_n3.filter(_\
    \ => n <= 1)\n        val vowel_consonant_pairs_with_n5 = vowel_consonant_pairs_with_n4.filter(_\
    \ => n >= 2)\n        val vowel_consonant_pairs_with_n6 = vowel_consonant_pairs_with_n5.filter(_\
    \ => n <= 2)\n        val vowel_consonant_pairs_with_n7 = vowel_consonant_pairs_with_n6.filter(_\
    \ => n >= 3)\n        val vowel_consonant_pairs_with_n8 = vowel_consonant_pairs_with_n7.filter(_\
    \ => n <= 3)\n        val vowel_consonant_pairs_with_n9 = vowel_consonant_pairs_with_n8.filter(_\
    \ => n >= 4)\n        val vowel_consonant_pairs_with_n10 = vowel_consonant_pairs_with_n9.filter(_\
    \ => n <= 4)\n        val vowel_consonant_pairs_with_n11 = vowel_consonant_pairs_with_n10.filter(_\
    \ => n >= 5)\n        val vowel_consonant_pairs_with_n12 = vowel_consonant_pairs_with_n11.filter(_\
    \ => n <= 5)\n        val vowel_consonant_pairs_with_n13 = vowel_consonant_pairs_with_n12.filter(_\
    \ => n >= 6)\n        val vowel_consonant_pairs_with_n14 = vowel_consonant_pairs_with_n13.filter(_\
    \ => n <= 6)\n        val vowel_consonant_pairs_with_n15 = vowel_consonant_pairs_with_n14.filter(_\
    \ => n >= 7)\n        val vowel_consonant_pairs_with_n16 = vowel_conson\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp35o_my6x.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp35o_my6x.scala:36:45 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mvowel_consonant_pairs_with_n16\e\
    [0m = vowel_conson\n\e[31m\e[31m   |\e[0m                                    \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \            Not found: vowel_conson\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp35o_my6x.scala:37:5 ---------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val list2 = list.filter(_ != \"\
    \ \")\n        val list3 = list2.filter(_ != \" \")\n        val list4 = list3.filter(_\
    \ != \" \")\n        val list5 = list4.filter(_ != \" \")\n        val list6 =\
    \ list5.filter(_ != \" \")\n        val list7 = list6.filter(_ != \" \")\n   \
    \     val list8 = list7.filter(_ != \" \")\n        val list9 = list8.filter(_\
    \ != \" \")\n        val list10 = list9.filter(_ != \" \")\n        val list11\
    \ = list10.filter(_ != \" \")\n        val list12 = list11.filter(_ != \" \")\n\
    \        val list13 = list12.filter(_ != \" \")\n        val list14 = list13.filter(_\
    \ != \" \")\n        val list15 = list14.filter(_ != \" \")\n        val list16\
    \ = list15.filter(_ != \" \")\n        val list17 = list16.filter(_ != \" \")\n\
    \        val list18 = list17.filter(_ != \" \")\n        val list19 = list18.filter(_\
    \ != \" \")\n        val list20 = list19.filter(_ != \" \")\n        val list21\
    \ = list20.filter(_ != \" \")\n        val list22 = list21.filter(_ != \" \")\n\
    \        val list23 = list22.filter(_ != \" \")\n        val list24 = list23.filter(_\
    \ != \" \")\n        val list25 = list24.filter(_ != \" \")\n        val list26\
    \ = list25.filter(_ != \" \")\n        val list27 = list26.filter(_ != \" \")\n\
    \        val list28 = list27.filter(_ != \" \")\n        val list29 = list28.filter(_\
    \ != \" \")\n        val list30 = list29.filter(_ != \" \")\n        val list31\
    \ = list30.filter(_ != \" \")\n        val list32 = list31.filter(_ != \" \")\n\
    \        val list33 = list32.filter(_ != \" \")\n        val list34 = list33.filter(_\
    \ != \" \")\n        val list35 = list34.filter(_ != \" \")\n        val list36\
    \ = list35.filter(_ != \" \")\n        val list37 = list36.filter(_ != \" \")\n\
    \        val list38 = list37.filter(_ != \" \")\n        val list39 = list38.filter(_\
    \ != \" \")\n        val list40 = list39.filter(_ != \" \")\n        val list41\
    \ = list40.filter(_ != \" \")\n        val list42 = list41.filter(_ != \" \")\n\
    \        val list43 = list42.filter(_ != \" \")\n        val list44 = list43.filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqz1bze06.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").map(_.toUpperCase).toList\n        val result =\
    \ new mutable.ListBuffer[String]()\n        list.foreach { word =>\n         \
    \   val count = word.count(c => c.isLetter)\n            if (count == n) result\
    \ += word\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpojz6ya8l.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = new mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\
    \n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonants_count\
    \ = consonants.length\n        val vowels_count = vowels.length\n        val consonant_count\
    \ = n - consonants_count\n        val vowel_count =  n - vowels_count\n      \
    \  val consonant_index = s.toCharArray.zipWithIndex.filter(_._2 == consonants_count).map(_._1).reverse\n\
    \        val vowel_index = s.toCharArray.zipWithIndex.filter(_._2 == vowels_count).map(_._1).reverse\n\
    \        val consonant_char = s.toCharArray.filter(x => consonant_index.contains(x.toInt)).map(x\
    \ => x.toChar).reverse\n        val vowel_char = s.toCharArray.filter(x => vowel_index.contains(x.toInt)).map(x\
    \ => x.toChar).reverse\n        val consonant_str = consonant_char.mkString(\"\
    \")\n        val vowel_str = vowel_char.mkString(\"\")\n        val consonant_list\
    \ = consonant_str.split(\"\").filter(x => x != \" \")\n        val vowel_list\
    \ = vowel_str.split(\"\").filter(x => x != \" \")\n        vowel_list foreach\
    \ { x => words += x }\n        consonant_list foreach { x => words += x }\n  \
    \      words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy19mopln.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy19mopln.scala:25:82\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mconsonant_char\e\
    [0m = s.toCharArray.filter(\e[36mx\e[0m => consonant_index.contains(x.toInt)).map(\e\
    [36mx\e[0m => x.toChar).reverse\n\e[31m\e[31m   |\e[0m                       \
    \                                                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                          Found:   \
    \ Int\n\e[31m   |\e[0m                                                       \
    \   Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy19mopln.scala:26:74\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowel_char\e\
    [0m = s.toCharArray.filter(\e[36mx\e[0m => vowel_index.contains(x.toInt)).map(\e\
    [36mx\e[0m => x.toChar).reverse\n\e[31m\e[31m   |\e[0m                       \
    \                                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                          Found:    Int\n\e[31m\
    \   |\e[0m                                                          Required:\
    \ Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val wordsWithNConsonants = s.split(\" \").filter(_.length == n).map(_.split(\"\
    \").filter(_ => !_.isLetter).mkString(\"\"))\n        wordsWithNConsonants.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp8l8mf82e.scala:16:99 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonants\e[0m\
    \ = s.split(\e[31m\" \"\e[0m).filter(_.length == n).map(_.split(\e[31m\"\"\e[0m).filter(_\
    \ => !_.isLetter).mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \             ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m   I could not infer the type of the parameter _$4 of expanded\
    \ function:\n\e[31m   |\e[0m   _$4 => ! _$4.isLetter.\n1 error found\n"
  stdout: ''
  timestamp: 1659805891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val list2 = list.map(x => x.toUpperCase)\n\
    \        val list3 = list2.filter(x => x.contains(\"A\"))\n        val list4 =\
    \ list3.filter(x => x.contains(\"E\"))\n        val list5 = list4.filter(x =>\
    \ x.contains(\"I\"))\n        val list6 = list5.filter(x => x.contains(\"O\"))\n\
    \        val list7 = list6.filter(x => x.contains(\"U\"))\n        val list8 =\
    \ list7.filter(x => x.contains(\"a\"))\n        val list9 = list8.filter(x =>\
    \ x.contains(\"e\"))\n        val list10 = list9.filter(x => x.contains(\"i\"\
    ))\n        val list11 = list10.filter(x => x.contains(\"o\"))\n        val list12\
    \ = list11.filter(x => x.contains(\"u\"))\n        val list13 = list12.filter(x\
    \ => x.contains(\"A\"))\n        val list14 = list13.filter(x => x.contains(\"\
    E\"))\n        val list15 = list14.filter(x => x.contains(\"I\"))\n        val\
    \ list16 = list15.filter(x => x.contains(\"O\"))\n        val list17 = list16.filter(x\
    \ => x.contains(\"U\"))\n        val list18 = list17.filter(x => x.contains(\"\
    a\"))\n        val list19 = list18.filter(x => x.contains(\"e\"))\n        val\
    \ list20 = list19.filter(x => x.contains(\"i\"))\n        val list21 = list20.filter(x\
    \ => x.contains(\"o\"))\n        val list22 = list21.filter(x => x.contains(\"\
    u\"))\n        val list23 = list22.filter(x => x.contains(\"A\"))\n        val\
    \ list24 = list23.filter(x => x.contains(\"E\"))\n        val list25 = list24.filter(x\
    \ => x.contains(\"I\"))\n        val list26 = list25.filter(x => x.contains(\"\
    O\"))\n        val list27 = list26.filter(x => x.contains(\"U\"))\n        val\
    \ list28 = list27.filter(x => x.contains(\"a\"))\n        val list29 = list28.filter(x\
    \ => x.contains(\"e\"))\n        val list30 = list29.filter(x => x.contains(\"\
    i\"))\n        val list31 = list30.filter(x => x.contains(\"o\"))\n        val\
    \ list32 = list31.filter(x => x.contains(\"u\"))\n        val list33 = list32.filter(x\
    \ => x.contains(\"A\"))\n        val list34 = list33.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpue5_otql.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpue5_otql.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(x => {\n            val words = x.split(\"[^aeiou]\".toRegex)\n\
    \            words.foreach(y => {\n                if (y.length == n) {\n    \
    \                result += y\n                }\n            })\n        })\n\
    \        return result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsd1__me0.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsd1__me0.scala:19:43\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36mwords\e[0m = x.split(\e[31m\"[^aeiou]\"\e[0m.toRegex)\n\e[31m\e[31m  \
    \ |\e[0m                                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value toRegex is not a member of String\n2\
    \ errors found\n"
  stdout: ''
  timestamp: 1659805898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \")\n        val result: List[String] = new mutable.ListBuffer[String]\n\
    \        for(word <- words) {\n            val letters = word.split(\"\")\n  \
    \          val consonants = letters.filter(letter => letter != \"a\" && letter\
    \ != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\")\n       \
    \     if(consonants.length == n) {\n                result += word\n         \
    \   }\n        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5hvb7ooi.scala:17:39 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5hvb7ooi.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                result += word\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value += is not a member\
    \ of List[String] - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659805900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowelCounts =\
    \ mutable.Map[String, Int]()\n        val consonantCounts = mutable.Map[String,\
    \ Int]()\n        val vowelCount = 0\n        val consonantCount = 0\n       \
    \ val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts =\
    \ mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5nrjb3kl.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCounts is already defined as \e[33mvalue\e[0m \e[35mvowelCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5nrjb3kl.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCounts is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5nrjb3kl.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5nrjb3kl.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5nrjb3kl.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^"
  stdout: ''
  timestamp: 1659805900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val wordsWithNConsonants = mutable.ListBuffer[String]()\n        val wordsWithNConsonantsCount\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountMax = mutable.ListBuffer[Int]()\n\
    \        val wordsWithNConsonantsCountMin = mutable.ListBuffer[Int]()\n      \
    \  val wordsWithNConsonantsCountSum = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProduct\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductMax\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductMin\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSum\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumMax\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumMin\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSum\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumMax\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumMin\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumSum\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumSumMax\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumSumMin\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumSumSum\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumSumMax\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumSumMin\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumSumSum\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumSumSumMax\
    \ = mutable.ListBuffer[Int]()\n        val wordsWithNConsonantsCountProductSumSumSumSumMin\
    \ = mutable.ListBuffer[Int]()\n        val wordsWith\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9gt6rb_u.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9gt6rb_u.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mwordsWithNConsonantsCountProductSumSumSumMax\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsWithNConsonantsCountProductSumSumSumMax is already defined\
    \ as \e[33mvalue\e[0m \e[35mwordsWithNConsonantsCountProductSumSumSumMax\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9gt6rb_u.scala:35:12 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonantsCountProductSumSumSumMin\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsWithNConsonantsCountProductSumSumSumMin is already defined\
    \ as \e[33mvalue\e[0m \e[35mwordsWithNConsonantsCountProductSumSumSumMin\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9gt6rb_u.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mwordsWithNConsonantsCountProductSumSumSumSum\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsWithNConsonantsCountProductSumSumSumSum is already defined\
    \ as \e[33mvalue\e[0m \e[35mwordsWithNConsonantsCountProductSumSumSumSum\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9gt6rb_u.scala:16:"
  stdout: ''
  timestamp: 1659805899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) {\n                result += word\n    \
    \        }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp34uglpjn.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantSet\
    \ = consonants.toSet\n        val vowelSet = vowels.toSet\n        val vowelCount\
    \ = vowelSet.count\n        val consonantCount = consonantSet.count\n        val\
    \ vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val consonantCount = consonantSet.count\n\
    \        val vowelCount = vowelSet.count\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpshdzlxv4.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpshdzlxv4.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowelSet.count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvowelCount is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpshdzlxv4.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonantSet.count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpshdzlxv4.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowelSet.count\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvowelCount is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpshdzlxv4.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonantSet.count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of"
  stdout: ''
  timestamp: 1659805900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val count = word.count(c => c.isLetter)\n\
    \            if(count == n) {\n                result += (word + \" \")\n    \
    \        }\n        }\n        if(result.isEmpty) {\n            List()\n    \
    \    } else {\n            result.mkString(\"\")\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt6e892b5.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        })\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsru8r3fj.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).toList\n\
    \        val consonants: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(\"\
    a\")).toList\n        val vowels: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(\"\
    e\")).toList\n        val consonantCount: Map[String, Long] = consonants.groupBy(_.toLowerCase).mapValues(_.length)\n\
    \        val vowelCount: Map[String, Long] = vowels.groupBy(_.toLowerCase).mapValues(_.length)\n\
    \        val consonantWords: List[String] = words.filter(word => consonantCount.get(word).map(_\
    \ == n).forall(identity))\n        val vowelWords: List[String] = words.filter(word\
    \ => vowelCount.get(word).map(_ == n).forall(identity))\n        consonantWords.toList\
    \ ++ vowelWords.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzex7alh2.scala:19:91\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e\
    [0m: \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = consonants.groupBy(_.toLowerCase).mapValues(_.length)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    scala.collection.MapView[String,\
    \ Int]\n\e[31m   |\e[0m                         Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzex7alh2.scala:20:83\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e\
    [0m: \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = vowels.groupBy(_.toLowerCase).mapValues(_.length)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    scala.collection.MapView[String,\
    \ Int]\n\e[31m   |\e[0m                         Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(_ == 'a')\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        }\n        if (result.isEmpty) {\n            List()\n        } else\
    \ {\n            result.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbxhzdv81.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805897
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += (word + \" \")\n        }\n        if (result.isEmpty)\
    \ List()\n        else result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpigwveme7.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805897
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowelCounts =\
    \ mutable.Map[String, Int]()\n        val consonantCounts = mutable.Map[String,\
    \ Int]()\n        val vowelCount = 0\n        val consonantCount = 0\n       \
    \ val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts =\
    \ mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n        val consonantCounts\
    \ = mutable.Map[String, Int]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Int]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5nrjb3kl.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCounts is already defined as \e[33mvalue\e[0m \e[35mvowelCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5nrjb3kl.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCounts is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5nrjb3kl.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5nrjb3kl.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5nrjb3kl.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^"
  stdout: ''
  timestamp: 1659805900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val list = list.filter(x => x.contains(\"\
    a\"))\n        val list = list.filter(x => x.contains(\"e\"))\n        val list\
    \ = list.filter(x => x.contains(\"i\"))\n        val list = list.filter(x => x.contains(\"\
    o\"))\n        val list = list.filter(x => x.contains(\"u\"))\n        val list\
    \ = list.filter(x => x.contains(\"l\"))\n        val list = list.filter(x => x.contains(\"\
    s\"))\n        val list = list.filter(x => x.contains(\"m\"))\n        val list\
    \ = list.filter(x => x.contains(\"h\"))\n        val list = list.filter(x => x.contains(\"\
    w\"))\n        val list = list.filter(x => x.contains(\"d\"))\n        val list\
    \ = list.filter(x => x.contains(\"c\"))\n        val list = list.filter(x => x.contains(\"\
    b\"))\n        val list = list.filter(x => x.contains(\"g\"))\n        val list\
    \ = list.filter(x => x.contains(\"f\"))\n        val list = list.filter(x => x.contains(\"\
    e\"))\n        val list = list.filter(x => x.contains(\"j\"))\n        val list\
    \ = list.filter(x => x.contains(\"k\"))\n        val list = list.filter(x => x.contains(\"\
    q\"))\n        val list = list.filter(x => x.contains(\"p\"))\n        val list\
    \ = list.filter(x => x.contains(\"r\"))\n        val list = list.filter(x => x.contains(\"\
    t\"))\n        val list = list.filter(x => x.contains(\"n\"))\n        val list\
    \ = list.filter(x => x.contains(\"v\"))\n        val list = list.filter(x => x.contains(\"\
    x\"))\n        val list = list.filter(x => x.contains(\"z\"))\n        val list\
    \ = list.filter(x => x.contains(\"x\"))\n        val list = list.filter(x => x.contains(\"\
    z\"))\n        val list = list.filter(x => x.contains(\"y\"))\n        val list\
    \ = list.filter(x => x.contains(\"s\"))\n        val list = list.filter(x => x.contains(\"\
    m\"))\n        val list = list.filter(x => x.contains(\"l\"))\n        val list\
    \ = list.filter(x => x.contains(\"k\"))\n        val list = list.filter(x => x.contains(\"\
    j\"))\n        val list = list.filter(x => x.contains(\"q\"))\n        val list\
    \ = list.filter(x => x.contains(\"p\"))\n        val list = list.filter(x => x.contains(\"\
    r\"))\n        val list = list.filter(x => x.contains(\"t\"))\n        val list\
    \ = list.filter(x => x.contains(\"\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgaa6vukh.scala:55:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e\
    [36mx\e[0m => x.contains(\"\n\e[31m\e[31m   |\e[0m                           \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \              unclosed string literal\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgaa6vukh.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e[31m\"a\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgaa6vukh.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"e\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgaa6vukh.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"i\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgaa6vukh.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"o\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as "
  stdout: ''
  timestamp: 1659805906
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(_ == 'a')\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        if (result.isEmpty) {\n            List()\n  \
    \      } else {\n            result.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo1ap1ur6.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = new mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\
    \n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowelsCount\
    \ = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n \
    \       val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbwewov4h.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbwewov4h.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbwewov4h.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbwewov4h.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbwewov4h.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e"
  stdout: ''
  timestamp: 1659805910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until list.size) {\n            val word = list(i)\n    \
    \        if (word.contains(\"a\") || word.contains(\"e\") || word.contains(\"\
    i\") || word.contains(\"o\") || word.contains(\"u\")) {\n                result.add(word)\n\
    \            }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpozosuhhi.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \").toList\n        val consonants = Set(\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonantCount = words.count(x\
    \ => consonants.contains(x))\n        val vowelCount = words.count(x => vowels.contains(x))\n\
    \        val consonantWords = words.filter(x => consonants.contains(x))\n    \
    \    val vowelWords = words.filter(x => vowels.contains(x))\n        val consonantWordCount\
    \ = consonantWords.size\n        val vowelWordCount = vowelWords.size\n      \
    \  if (consonantCount >= n && vowelCount >= n && consonantWordCount >= n && vowelWordCount\
    \ >= n) {\n            consonantWords.toList\n        } else {\n            List()\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj0jolz93.scala:32)\n\tat Problem.main(tmpj0jolz93.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = new mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\
    \n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonants_count\
    \ = consonants.toSet.size\n        val vowels_count = vowels.toSet.size\n    \
    \    val consonant_count = consonants.toSet.count(_ == \" \")\n        val vowel_count\
    \ = vowels.toSet.count(_ == \" \")\n        val consonant_vowel_count = consonants.toSet.count(_\
    \ == vowel)\n        val vowel_consonant_count = vowels.toSet.count(_ == consonant)\n\
    \        val vowel_consonant_vowel_count = vowels.toSet.count(_ == vowel && _\
    \ == consonant)\n        val vowel_consonant_vowel_consonant_count = vowels.toSet.count(_\
    \ == vowel && _ == consonant && _ == consonant)\n        val vowel_consonant_vowel_consonant_vowel_count\
    \ = vowels.toSet.count(_ == vowel && _ == consonant && _ == consonant && _ ==\
    \ vowel)\n        val vowel_consonant_vowel_consonant_vowel_consonant_count =\
    \ vowels.toSet.count(_ == vowel && _ == consonant && _ == consonant && _ == consonant\
    \ && _ == vowel && _ == consonant)\n        val vowel_consonant_vowel_consonant_vowel_consonant_vowel_count\
    \ = vowels.toSet.count(_ == vowel && _ == consonant && _ == consonant && _ ==\
    \ consonant && _ == vowel && _ == consonant && _ == vowel)\n        val vowel_consonant_vowel_consonant_vowel_consonant_vowel_consonant_count\
    \ = vowels.toSet.count(_ == vowel && _ == consonant && _ == consonant && _ ==\
    \ consonant && _ == vowel && _ == consonant && _ == vowel && _ == consonant)\n\
    \        val vowel_consonant_vowel_consonant_vowel_consonant_vowel_consonant_vowel_count\
    \ = vowels.toSet.count(_ == vowel && _ == consonant && _ == consonant && _ ==\
    \ consonant && _ == vowel && _ == consonant && _ == vowel && _ == consonant &&\
    \ _ == vowel)\n        val vowel_consonant_vowel\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp420x0v6l.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp420x0v6l.scala:16:24\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mwords\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp420x0v6l.scala:21:53\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mconsonant_count\e[0m = consonants.toSet.count(_ == \e[31m\"\
    \ \"\e[0m)\n\e[31m\e[31m   |\e[0m                                            \
    \         ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp420x0v6l.scala:22:45\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mvowel_count\e[0m = vowels.toSet.count(_ == \e[31m\" \"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                             ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp420x0v6l.scala:23:64\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonant_vowel_count\e[0m = consonants.toSet.count(_ == vowel)\n\e[31m\e\
    [31m   |\e[0m                                                                ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Not\
    \ found: vowel\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp420x0v6l.scala:24:60\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mvowel_consonant_count\e[0m = vowels.toSet.count(_ == consonant)\n\e[31m\e\
    [31m   |\e[0m                                            "
  stdout: ''
  timestamp: 1659805914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += (word + \" \")\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8orrekoa.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val letters = word.split(\"\")\n\
    \            letters.foreach { letter =>\n                if (letters.count(_\
    \ == 'a') >= n && letters.count(_ == 'e') >= n && letters.count(_ == 'i') >= n\
    \ && letters.count(_ == 'o') >= n && letters.count(_ == 'u') >= n && letters.count(_\
    \ == 'y') >= n) {\n                    result += word\n                }\n   \
    \         }\n        }\n        if (result.isEmpty) {\n            List()\n  \
    \      } else {\n            result.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppuuyblp5.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmppuuyblp5.scala:21:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \         \e[33mif\e[0m (letters.count(_ == \e[31m'a'\e[0m) >= n && letters.count(_\
    \ == \e[31m'e'\e[0m) >= n && letters.count(_ == \e[31m'i'\e[0m) >= n && letters.count(_\
    \ == \e[31m'o'\e[0m) >= n && letters.count(_ == \e[31m'u'\e[0m) >= n && letters.count(_\
    \ == \e[31m'y'\e[0m) >= n) {\n\e[31m\e[31m   |\e[0m                          \
    \        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmppuuyblp5.scala:21:66\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \         \e[33mif\e[0m (letters.count(_ == \e[31m'a'\e[0m) >= n && letters.count(_\
    \ == \e[31m'e'\e[0m) >= n && letters.count(_ == \e[31m'i'\e[0m) >= n && letters.count(_\
    \ == \e[31m'o'\e[0m) >= n && letters.count(_ == \e[31m'u'\e[0m) >= n && letters.count(_\
    \ == \e[31m'y'\e[0m) >= n) {\n\e[31m\e[31m   |\e[0m                          \
    \                                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \  Values of types String and Char cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmppuuyblp5.scala:21:98 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e[0m (letters.count(_ == \e\
    [31m'a'\e[0m) >= n && letters.count(_ == \e[31m'e'\e[0m) >= n && letters.count(_\
    \ == \e[31m'i'\e[0m) >= n && letters.count(_ == \e[31m'o'\e[0m) >= n && letters.count(_\
    \ == \e[31m'u'\e[0m) >= n && letters.count(_ == \e[31m'y'\e[0m) >= n) {\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m        V"
  stdout: ''
  timestamp: 1659805920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        words.foreach(word => {\n            if (word.count(_ == 'a') >= n &&\
    \ word.count(_ == 'e') >= n && word.count(_ == 'i') >= n && word.count(_ == 'o')\
    \ >= n && word.count(_ == 'u') >= n && word.count(_ == 'y') >= n) {\n        \
    \        result += word\n            }\n        })\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9676_cw9.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(x => {\n            val count = x.count(_ == 'a')\n    \
    \        if (count == n) {\n                result += x\n            }\n     \
    \   })\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptj87hhar.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val result = new mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\
    \n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowelsCount\
    \ = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n \
    \       val vowelsIndex = vowels.toSet.toList.zipWithIndex.filter(_._1 == true).map(_._2)\n\
    \        val consonantsIndex = consonants.toSet.toList.zipWithIndex.filter(_._1\
    \ == true).map(_._2)\n        val vowelsIndexCount = vowelsIndex.size\n      \
    \  val consonantsIndexCount = consonantsIndex.size\n        val vowelsIndexList\
    \ = new mutable.ListBuffer[Int]()\n        val consonantsIndexList = new mutable.ListBuffer[Int]()\n\
    \        val vowelsIndexSet = new mutable.HashSet[Int]()\n        val consonantsIndexSet\
    \ = new mutable.HashSet[Int]()\n        val vowelsIndexSet2 = new mutable.HashSet[Int]()\n\
    \        val consonantsIndexSet2 = new mutable.HashSet[Int]()\n        val vowelsIndexSet3\
    \ = new mutable.HashSet[Int]()\n        val consonantsIndexSet3 = new mutable.HashSet[Int]()\n\
    \        val vowelsIndexSet4 = new mutable.HashSet[Int]()\n        val consonantsIndexSet4\
    \ = new mutable.HashSet[Int]()\n        val vowelsIndexSet5 = new mutable.HashSet[Int]()\n\
    \        val consonantsIndexSet5 = new mutable.HashSet[Int]()\n        val vowelsIndexSet6\
    \ = new mutable.HashSet[Int]()\n        val consonantsIndexSet6 = new mutable.HashSet[Int]()\n\
    \        val vowelsIndexSet7 = new mutable.HashSet[Int]()\n        val consonantsIndexSet7\
    \ = new mutable.HashSet[Int]()\n        val vowelsIndexSet8 = new mutable.HashSet[Int]()\n\
    \        val consonantsIndexSet8 = new mutable.HashSet[Int]()\n        val vowelsIndexSet9\
    \ = new mutable.HashSet[Int]()\n        val consonantsIndexSet9 = new mutable.HashSet[Int]()\n\
    \        val vowelsIndexSet10 = new mutable.HashSet[Int]()\n        val consonantsIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiz07leyv.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiz07leyv.scala:16:25\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpiz07leyv.scala:21:66\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowels.toSet.toList.zipWithIndex.filter(_._1\
    \ == \e[31mtrue\e[0m).map(_._2)\n\e[31m\e[31m   |\e[0m                       \
    \                                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues\
    \ of types Char @uncheckedVariance and Boolean cannot be compared with == or !=\n\
    \e[31m\e[31m-- Error: /tmp/tmpiz07leyv.scala:22:74 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = consonants.toSet.toList.zipWithIndex.filter(_._1\
    \ == \e[31mtrue\e[0m).map(_._2)\n\e[31m\e[31m   |\e[0m                       \
    \                                                   ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mValues of types Char @uncheckedVariance and Boolean cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiz07leyv.scala:25:34\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsIndexList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                  Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpiz07leyv.scala:26:38 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndexList"
  stdout: ''
  timestamp: 1659805918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(word => word.split(\"[^aeiou]\")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(word => word.split(\"[^aeiou]\")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(word => word.split(\"[^aeiou]\")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(word => word.split(\"[^aeiou]\")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(word => word.split(\"[^aeiou]\")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(word => word.split(\"[^aeiou]\")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(word => word.split(\"[^aeiou]\")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(word => word.split(\"[^aeiou]\")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(word => word.split(\"[^aeiou]\")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(word => word.split(\"[^aeiou]\")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(word => word.split(\"[^aeiou]\")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(word => word.split(\"[^aeiou]\")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(word => word.split(\"[^aeiou]\")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(word => word.split(\"[^aeiou]\")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(word => word.split(\"[^aeiou]\")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(word => word.split(\"[^aeiou]\")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(word => word.split(\"[^aeiou]\")).flatten.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(word => word.split(\"[^aeiou]\")).\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy967tvi_.scala:17:4 ----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpy967tvi_.scala:17:5 ---------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").map(_.toUpperCase).toList\n        val result: List[String]\
    \ = new mutable.ListBuffer[String]()\n        list.foreach { word =>\n       \
    \     val count = word.count(_ == 'A') +\n                word.count(_ == 'E')\
    \ +\n                word.count(_ == 'I') +\n                word.count(_ == 'O')\
    \ +\n                word.count(_ == 'U')\n            if (count == n) {\n   \
    \             result ++= word\n            }\n        }\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ywgvfvn.scala:17:39 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_ywgvfvn.scala:25:23 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                result ++= word\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value ++= is not a member\
    \ of List[String] - did you mean result.++?\n2 errors found\n"
  stdout: ''
  timestamp: 1659805917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = mutable.ListBuffer[String]()\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u'){\n                words += s.substring(0,i)\n \
    \           }\n        }\n        words.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnest75of.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659805911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { x =>\n            val list = x.split(\"\\\\s\")\n    \
    \        list.foreach { y =>\n                if (y.length == n) {\n         \
    \           result += y\n                }\n            }\n        }\n       \
    \ return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn8ducc3z.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val result = new mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\
    \n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonants_count\
    \ = consonants.length\n        val vowels_count = vowels.length\n        val consonant_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val consonant_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        val vowel_count\
    \ = s.length - n\n        val vowel_count = s.length - n\n        \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvh7bytsh.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mconsonant_count\e[0m = s.length\
    \ - n\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mconsonant_count is already defined as \e[33mvalue\e[0m \e[35mconsonant_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvh7bytsh.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowel_count\e[0m = s.length - n\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowel_count\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowel_count\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvh7bytsh.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowel_count\e[0m = s.length - n\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowel_count is already defined as \e[33mvalue\e[0m \e[35mvowel_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvh7bytsh.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mvowel_count\e[0m = s.length - n\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowel_count\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowel_count\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvh7bytsh.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowel_count\e[0m = s.length - n\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowel_count is already defined as \e[33mvalue\e[0m \e[35mvowel_count"
  stdout: ''
  timestamp: 1659805917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        })\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsru8r3fj.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \").map(_.toUpperCase).toList\n        val result =\
    \ new mutable.ListBuffer[String]()\n        val vowels = \"AEIOU\".toList\n  \
    \      val consonants = \"BCDFGHJKLMNPQRSTVWXYZ\".toList\n        val consonantsCount\
    \ = consonants.count(_ == \" \")\n        val vowelsCount = vowels.count(_ ==\
    \ \" \")\n        val consonantsCountAndVowelsCount = consonantsCount + vowelsCount\n\
    \        val consonantsCountAndVowelsCountAndWords = consonantsCountAndVowelsCount\
    \ + words.count(_ == \" \")\n        val consonantsCountAndVowelsCountAndWordsLessThanN\
    \ = consonantsCountAndVowelsCountAndWords - n\n        val consonantsCountAndVowelsCountAndWordsLessThanNAndNotVowel\
    \ = consonantsCountAndVowelsCountAndWordsLessThanN - vowelsCount\n        val\
    \ consonantsCountAndVowelsCountAndWordsLessThanNAndNotVowelAndNotConsonant = consonantsCountAndVowelsCountAndWordsLessThanNAndNotVowel\
    \ - consonantsCount\n        val consonantsCountAndVowelsCountAndWordsLessThanNAndNotVowelAndNotConsonantAndNotSpace\
    \ = consonantsCountAndVowelsCountAndWordsLessThanNAndNotVowelAndNotConsonant -\
    \ consonantsCount + words.count(_ == \" \")\n        val consonantsCountAndVowelsCountAndWordsLessThanNAndNotVowelAndNotConsonantAndNotSpaceLessThanN\
    \ = consonantsCountAndVowelsCountAndWordsLessThanNAndNotVowelAndNotConsonantAndNotSpace\
    \ - consonantsCountAndVowelsCountAndWordsLessThanN\n        val consonantsCountAndVowelsCountAndWordsLessThanNAndNotVowelAndNotConsonantAndNotSpaceLessThanNAndNotVowel\
    \ = consonantsCountAndVowelsCountAndWordsLessThanNAndNotVowelAndNotConsonantAndNotSpaceLessThanN\
    \ - vowelsCount\n        val consonantsCountAndVowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp92p2zp2i.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp92p2zp2i.scala:17:25\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp92p2zp2i.scala:20:47\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.count(_ == \e[31m\" \"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                                               ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp92p2zp2i.scala:21:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.count(_\
    \ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \       ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp92p2zp2i.scala:31:5 ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659805920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \")\n        val result: List[String] = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            if (word.length == n) {\n        \
    \        result.add(word)\n            }\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4no0sfw5.scala:17:39 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4no0sfw5.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result.add(word)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value add is\
    \ not a member of List[String]\n2 errors found\n"
  stdout: ''
  timestamp: 1659805919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val wordList = word.split(\" \")\n\
    \            wordList.foreach { word =>\n                if (wordList.length ==\
    \ n) {\n                    result += word\n                }\n            }\n\
    \        }\n        if (result.isEmpty) {\n            List()\n        } else\
    \ {\n            result.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf2v6g604.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until list.size) {\n            val word = list(i)\n    \
    \        if (word.contains(\"a\") || word.contains(\"e\") || word.contains(\"\
    i\") || word.contains(\"o\") || word.contains(\"u\")) {\n                if (word.contains(\"\
    a\") && word.contains(\"e\") && word.contains(\"i\") && word.contains(\"o\") &&\
    \ word.contains(\"u\")) {\n                    result.add(word)\n            \
    \    }\n            }\n            if (word.contains(\"b\") || word.contains(\"\
    c\") || word.contains(\"d\") || word.contains(\"f\") || word.contains(\"g\") ||\
    \ word.contains(\"h\") || word.contains(\"j\") || word.contains(\"k\") || word.contains(\"\
    l\") || word.contains(\"m\") || word.contains(\"n\") || word.contains(\"p\") ||\
    \ word.contains(\"q\") || word.contains(\"r\") || word.contains(\"s\") || word.contains(\"\
    t\") || word.contains(\"v\") || word.contains(\"w\") || word.contains(\"x\") ||\
    \ word.contains(\"y\") || word.contains(\"z\")) {\n                if (word.contains(\"\
    b\") && word.contains(\"c\") && word.contains(\"d\") && word.contains(\"f\") &&\
    \ word.contains(\"g\") && word.contains(\"h\") && word.contains(\"j\") && word.contains(\"\
    k\") && word.contains(\"l\") && word.contains(\"m\") && word.contains(\"n\") &&\
    \ word.contains(\"p\") && word.contains(\"q\") && word.contains(\"r\") && word.contains(\"\
    s\") && word.contains(\"t\") && word.contains(\"v\") && word.contains(\"w\") &&\
    \ word.contains(\"x\") && word.contains(\"y\") && word.contains(\"z\")) {\n  \
    \                  result.add(word)\n                }\n            }\n      \
    \      if (word.contains(\"p\") || word.contains(\"q\") || word.contains(\"r\"\
    ) || word.contains(\"s\") || word.contains(\"t\") || word.contains(\"v\") || word.contains(\"\
    w\") || word.contains(\"x\") || word.contains(\"y\") || word.contains(\"z\"))\
    \ {\n                if (word.contains(\"p\") && word.contains(\"q\") && word.contains(\"\
    r\") && word.contains(\"s\") && word.contains(\"t\") && word.contains(\"v\") &&\
    \ word.contains(\"w\") && word.contains(\"x\") && word.contains(\"y\") && word.contains(\"\
    z\")) {\n                    result.add(word)\n                }\n           \
    \ }\n            if (word.contains(\"s\") || word.contains(\"t\") || word.contain\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz5zw349g.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz5zw349g.scala:48:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m48 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpz5zw349g.scala:17:25 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpz5zw349g.scala:35:65 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            \e[33mif\e[0m (word.contains(\e[31m\"s\"\e\
    [0m) || word.contains(\e[31m\"t\"\e[0m) || word.contain\n\e[31m\e[31m   |\e[0m\
    \                                                            ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m   value contain is not a member of String - did you mean word.contains?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz5zw349g.scala:47:1 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpz5zw349g.scala:37:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m37 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659805922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").map(_.toUpperCase).toList\n        val result =\
    \ new mutable.ListBuffer[String]()\n        list.foreach { word =>\n         \
    \   val count = word.count(c => c.toString.toUpperCase == \"A\" || c.toString.toUpperCase\
    \ == \"E\" || c.toString.toUpperCase == \"I\" || c.toString.toUpperCase == \"\
    O\" || c.toString.toUpperCase == \"U\")\n            if (count == n) {\n     \
    \           result += (word + \" \")\n            }\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr0w3a5wg.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += word\n        })\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwznb6lbd.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \").filter(_.isLetter).map(_.toUpperCase)\n       \
    \ val result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n\
    \            val count = word.count(c => c.isLetter)\n            if (count ==\
    \ n) {\n                result += word\n            }\n        }\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpss_np47x.scala:16:42 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = s.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m \
    \                                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                           value isLetter is not a member of String\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpss_np47x.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantSet\
    \ = consonants.toSet\n        val vowelSet = vowels.toSet\n        val vowelCount\
    \ = vowels.toSet.size\n        val consonantCount = consonants.toSet.size\n  \
    \      val vowelCounts = vowels.toList.map(vowelCount _)\n        val consonantCounts\
    \ = consonants.toList.map(consonantCount _)\n        val vowelCountPairs = vowelCounts.zip(consonantCounts)\n\
    \        val vowelCountPairsSorted = vowelCountPairs.sortWith((a, b) => a._1 <\
    \ b._1)\n        val vowelCountPairsSortedWithCount = vowelCountPairsSorted.map(pair\
    \ => pair._1 -> pair._2)\n        val vowelCountPairsSortedWithCountSorted = vowelCountPairsSortedWithCount.sortWith((a,\
    \ b) => a._1 < b._1)\n        val vowelCountPairsSortedWithCountSortedWithCount\
    \ = vowelCountPairsSortedWithCountSorted.map(pair => pair._1 -> pair._2)\n   \
    \     val vowelCountPairsSortedWithCountSortedWithCountSorted = vowelCountPairsSortedWithCountSortedWithCount.sortWith((a,\
    \ b) => a._1 < b._1)\n        val vowelCountPairsSortedWithCountSortedWithCountSortedWithCount\
    \ = vowelCountPairsSortedWithCountSortedWithCountSorted.map(pair => pair._1 ->\
    \ pair._2)\n        val vowelCountPairsSortedWithCountSortedWithCountSortedWithCountSorted\
    \ = vowelCountPairsSortedWithCountSortedWithCountSortedWithCount.sortWith((a,\
    \ b) => a._1 < b._1)\n        val vowelCountPairsSortedWithCountSortedWithCountSortedWithCountSortedWithCount\
    \ = vowelCountPairsSortedWithCountSortedWithCountSortedWithCountSorted.map(pair\
    \ => pair._1 -> pair._2)\n        val vowelCountPairsSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted\
    \ = vowelCountPairsSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted.sortWith((a,\
    \ b) => a._1 < b._1)\n        val vowelCountPairsSortedWithCountSortedWithCountSortedWithCountSortedWithCountSortedWithCount\
    \ = vowelCountPairsSortedWithCountSortedWithCountSortedWithCountSortedWithCountSorted.map(pair\
    \ => pair._1 -> pair._2)\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppkzg6i4z.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E099] Syntax Error: /tmp/tmppkzg6i4z.scala:23:55 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = vowels.toList.map(vowelCount\
    \ _)\n\e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mOnly function types can be followed by _ but the current expression\
    \ has type Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E099] Syntax Error: /tmp/tmppkzg6i4z.scala:24:67\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantCounts\e[0m = consonants.toList.map(consonantCount _)\n\e[31m\e\
    [31m   |\e[0m                                                    ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mOnly function types can be followed by _ but the current expression\
    \ has type Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppkzg6i4z.scala:26:76\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelCountPairsSorted\e[0m = vowelCountPairs.sortWith((\e[36ma\e[0m, \e[36mb\e\
    [0m) => a._1 < b._1)\n\e[31m\e[31m   |\e[0m                                  \
    \                                     ^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not\
    \ a member of Nothing, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2do"
  stdout: ''
  timestamp: 1659805930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val list2 = list.filter(x => x.contains(\"\
    a\"))\n        val list3 = list.filter(x => x.contains(\"e\"))\n        val list4\
    \ = list.filter(x => x.contains(\"i\"))\n        val list5 = list.filter(x =>\
    \ x.contains(\"o\"))\n        val list6 = list.filter(x => x.contains(\"u\"))\n\
    \        val list7 = list.filter(x => x.contains(\"y\"))\n        val list8 =\
    \ list.filter(x => x.contains(\"h\"))\n        val list9 = list.filter(x => x.contains(\"\
    l\"))\n        val list10 = list.filter(x => x.contains(\"l\"))\n        val list11\
    \ = list.filter(x => x.contains(\"a\"))\n        val list12 = list.filter(x =>\
    \ x.contains(\"e\"))\n        val list13 = list.filter(x => x.contains(\"i\"))\n\
    \        val list14 = list.filter(x => x.contains(\"o\"))\n        val list15\
    \ = list.filter(x => x.contains(\"u\"))\n        val list16 = list.filter(x =>\
    \ x.contains(\"y\"))\n        val list17 = list.filter(x => x.contains(\"h\"))\n\
    \        val list18 = list.filter(x => x.contains(\"l\"))\n        val list19\
    \ = list.filter(x => x.contains(\"l\"))\n        val list20 = list.filter(x =>\
    \ x.contains(\"a\"))\n        val list21 = list.filter(x => x.contains(\"e\"))\n\
    \        val list22 = list.filter(x => x.contains(\"i\"))\n        val list23\
    \ = list.filter(x => x.contains(\"o\"))\n        val list24 = list.filter(x =>\
    \ x.contains(\"u\"))\n        val list25 = list.filter(x => x.contains(\"y\"))\n\
    \        val list26 = list.filter(x => x.contains(\"h\"))\n        val list27\
    \ = list.filter(x => x.contains(\"l\"))\n        val list28 = list.filter(x =>\
    \ x.contains(\"l\"))\n        val list29 = list.filter(x => x.contains(\"a\"))\n\
    \        val list30 = list.filter(x => x.contains(\"e\"))\n        val list31\
    \ = list.filter(x => x.contains(\"i\"))\n        val list32 = list.filter(x =>\
    \ x.contains(\"o\"))\n        val list33 = list.filter(x => x.contains(\"u\"))\n\
    \        val list34 = list.filter(x => x.contains(\"y\"))\n        val list35\
    \ = list.filter(x => x.contains(\"h\"))\n        val list36 = list.filter(\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5sx7nvzi.scala:51:33 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mlist36\e[0m = list.filter(\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5sx7nvzi.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c >=\
    \ 'a' && c <= 'z' || c >= 'A' && c <= 'Z')\n            if (count == n) {\n  \
    \              result += word\n            }\n        })\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8c8sks7m.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = new mutable.ListBuffer[String]()\n        val consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        val vowels = \"aeiouAEIOU\"\
    \n        val consonantCount = s.count(consonants.toChar)\n        val vowelCount\
    \ = s.count(vowels.toChar)\n        val consonantCountMinusVowels = consonantCount\
    \ - vowelCount\n        val vowelCountMinusConsonants = vowelCount - consonantCount\n\
    \        val consonantCountMinusConsonants2 = consonantCount - consonantCountMinusVowels\n\
    \        val vowelCountMinusConsonants2 = vowelCount - consonantCountMinusVowels\n\
    \        val consonantCountMinusVowels2 = consonantCount - vowelCountMinusConsonants\n\
    \        val vowelCountMinusConsonants2 = vowelCount - consonantCountMinusVowels\n\
    \        val consonantCountMinusVowels3 = consonantCount - vowelCountMinusConsonants2\n\
    \        val vowelCountMinusConsonants3 = vowelCount - consonantCountMinusVowels2\n\
    \        val consonantCountMinusVowels4 = consonantCount - vowelCountMinusConsonants3\n\
    \        val vowelCountMinusConsonants4 = vowelCount - consonantCountMinusVowels3\n\
    \        val consonantCountMinusVowels5 = consonantCount - vowelCountMinusConsonants4\n\
    \        val vowelCountMinusConsonants5 = vowelCount - consonantCountMinusVowels4\n\
    \        val consonantCountMinusVowels6 = consonantCount - vowelCountMinusConsonants5\n\
    \        val vowelCountMinusConsonants6 = vowelCount - consonantCountMinusVowels5\n\
    \        val consonantCountMinusVowels7 = consonantCount - vowelCountMinusConsonants6\n\
    \        val vowelCountMinusConsonants7 = vowelCount - consonantCountMinusVowels6\n\
    \        val consonantCountMinusVowels8 = consonantCount - vowelCountMinusConsonants7\n\
    \        val vowelCountMinusCon\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6r3lpkwz.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6r3lpkwz.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelCountMinusConsonants2\e[0m = vowelCount - consonantCountMinusVowels\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCountMinusConsonants2 is already defined as \e[33mvalue\e\
    [0m \e[35mvowelCountMinusConsonants2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6r3lpkwz.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6r3lpkwz.scala:19:48\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantCount\e[0m = s.count(consonants.toChar)\n\e[31m\e[31m   |\e[0m  \
    \                                   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                value toChar is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp6r3lpkwz.scala:20:40 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = s.count(vowels.toChar)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 value toChar is not a member of String\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6r3lpkwz.scala:39:5 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m"
  stdout: ''
  timestamp: 1659805931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        words.foreach(word => {\n            if (word.contains(\"a\") || word.contains(\"\
    e\") || word.contains(\"i\") || word.contains(\"o\") || word.contains(\"u\") ||\
    \ word.contains(\"y\")) {\n                result.add(word)\n            }\n \
    \       })\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpai1hshjq.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \").filter(_.nonEmpty)\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val count = word.count(_ == 'a')\n\
    \            if(count == n) {\n                result += word\n            }\n\
    \        }\n        if(result.isEmpty) {\n            List()\n        } else {\n\
    \            result.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqmgtwchs.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        words.foreach(word => {\n            val count = word.count(_ == 'a')\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        })\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp05r6zi46.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jfvso53.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- list) {\n            if (word.length == n) {\n         \
    \       result += (word + \" \")\n            }\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcli__je0.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]\n\
    \        list.foreach { word =>\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) result += word\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmparh4qk1w.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = new mutable.ListBuffer[String]()\n        val consonants = \"\
    bcdfghjklmnpqrstvwxyz\"\n        val vowels = \"aeiou\"\n        val consonantCount\
    \ = s.count(consonants)\n        val vowelCount = s.count(vowels)\n        val\
    \ consonantCountInWord = consonantCount + n\n        val vowelCountInWord = vowelCount\
    \ + n\n        val consonantCountInWordInWord = consonantCountInWord * n\n   \
    \     val vowelCountInWordInWord = vowelCountInWord * n\n        val consonantCountInWordInWordInWord\
    \ = consonantCountInWordInWord * n\n        val vowelCountInWordInWordInWord =\
    \ vowelCountInWordInWord * n\n        val consonantCountInWordInWordInWordInWord\
    \ = consonantCountInWordInWordInWord * n\n        val vowelCountInWordInWordInWordInWord\
    \ = vowelCountInWordInWordInWord * n\n        val consonantCountInWordInWordInWordInWordInWord\
    \ = consonantCountInWordInWordInWordInWord * n\n        val vowelCountInWordInWordInWordInWordInWord\
    \ = vowelCountInWordInWordInWordInWord * n\n        val consonantCountInWordInWordInWordInWordInWord\
    \ = consonantCountInWordInWordInWordInWordInWord * n\n        val vowelCountInWordInWordInWordInWordInWord\
    \ = vowelCountInWordInWordInWordInWordInWord * n\n        val consonantCountInWordInWordInWordInWordInWordInWord\
    \ = consonantCountInWordInWordInWordInWordInWordInWord * n\n        val vowelCountInWordInWordInWordInWordInWordInWord\
    \ = vowelCountInWordInWordInWordInWordInWordInWord * n\n        val consonantCountInWordInWordInWordInWordInWordInWord\
    \ = consonantCountInWordInWordInWordInWordInWordInWord * n\n        val vowelCountInWordInWordInWordInWordInWordInWord\
    \ = vowelCountInWordInWordInWordInWordInWordInWordInWord * n\n        val consonantCountInWordInWordInWordInWordInWordInWord\
    \ = conson\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq7aa9sp_.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mconsonantCountInWordInWordInWordInWordInWord\e\
    [0m = consonantCountInWordInWordInWordInWordInWord * n\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCountInWordInWordInWordInWordInWord is already defined\
    \ as \e[33mvalue\e[0m \e[35mconsonantCountInWordInWordInWordInWordInWord\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq7aa9sp_.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelCountInWordInWordInWordInWordInWord\e\
    [0m = vowelCountInWordInWordInWordInWordInWord * n\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCountInWordInWordInWordInWordInWord is already defined\
    \ as \e[33mvalue\e[0m \e[35mvowelCountInWordInWordInWordInWordInWord\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq7aa9sp_.scala:35:12 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mval\e[0m \e[36mconsonantCountInWordInWordInWordInWordInWordInWord\e\
    [0m = consonantCountInWordInWordInWordInWordInWordInWord * n\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCountInWordInWordInWordInWordInWordInWord is already\
    \ defined as \e[33mvalue\e[0m \e[35mconsonantCountInWordInWordInWordInWordInWordInWord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq7aa9sp_.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0"
  stdout: ''
  timestamp: 1659805935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = mutable.ListBuffer.empty[String]\n        val vowels = mutable.ListBuffer.empty[String]\n\
    \        val consonants = mutable.ListBuffer.empty[String]\n        val vowelsCount\
    \ = mutable.ListBuffer.empty[String]\n        val consonantsCount = mutable.ListBuffer.empty[String]\n\
    \        val vowelsCountMap = mutable.HashMap[String, Int]()\n        val consonantsCountMap\
    \ = mutable.HashMap[String, Int]()\n        val vowelsCountMap2 = mutable.HashMap[String,\
    \ Int]()\n        val consonantsCountMap2 = mutable.HashMap[String, Int]()\n \
    \       val vowelsCountMap3 = mutable.HashMap[String, Int]()\n        val consonantsCountMap3\
    \ = mutable.HashMap[String, Int]()\n        val vowelsCountMap4 = mutable.HashMap[String,\
    \ Int]()\n        val consonantsCountMap4 = mutable.HashMap[String, Int]()\n \
    \       val vowelsCountMap5 = mutable.HashMap[String, Int]()\n        val consonantsCountMap5\
    \ = mutable.HashMap[String, Int]()\n        val vowelsCountMap6 = mutable.HashMap[String,\
    \ Int]()\n        val consonantsCountMap6 = mutable.HashMap[String, Int]()\n \
    \       val vowelsCountMap7 = mutable.HashMap[String, Int]()\n        val consonantsCountMap7\
    \ = mutable.HashMap[String, Int]()\n        val vowelsCountMap8 = mutable.HashMap[String,\
    \ Int]()\n        val consonantsCountMap8 = mutable.HashMap[String, Int]()\n \
    \       val vowelsCountMap9 = mutable.HashMap[String, Int]()\n        val consonantsCountMap9\
    \ = mutable.HashMap[String, Int]()\n        val vowelsCountMap10 = mutable.HashMap[String,\
    \ Int]()\n        val consonantsCountMap10 = mutable.HashMap[String, Int]()\n\
    \        val vowelsCountMap11 = mutable.HashMap[String, Int]()\n        val consonantsCountMap11\
    \ = mutable.HashMap[String, Int]()\n        val vowelsCountMap12 = mutable.HashMap[String,\
    \ Int]()\n        val consonantsCountMap12 = mutable.HashMap[String, Int]()\n\
    \        val vowelsCountMap13 = mutable.HashMap[String, Int]()\n        val consonantsCountMap13\
    \ = mutable.HashMap[String, Int]()\n        val vowelsCountMap14 = mutable.HashMap[String,\
    \ Int\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7mizdpao.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7mizdpao.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mwords\e[0m = mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7mizdpao.scala:17:21\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mvowels\e[0m = mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m  \
    \ |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7mizdpao.scala:18:25\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonants\e[0m = mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7mizdpao.scala:19:26 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7mizdpao.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  "
  stdout: ''
  timestamp: 1659805936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \")\n        val result: List[String] = new ListBuffer[String]\n\
    \        for(word <- words) {\n            val letters = word.split(\"\")\n  \
    \          val count = new mutable.HashMap[String, Int]()\n            for(letter\
    \ <- letters) {\n                if(letter.toString.toUpperCase == \"A\" || letter.toString.toUpperCase\
    \ == \"E\" || letter.toString.toUpperCase == \"I\" || letter.toString.toUpperCase\
    \ == \"O\" || letter.toString.toUpperCase == \"U\") {\n                    count.put(letter,\
    \ count.getOrElse(letter, 0) + 1)\n                }\n            }\n        \
    \    if(count.size == n) {\n                result += (word + \" \")\n       \
    \     }\n        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzp9tz6nj.scala:17:35\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m                   Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzp9tz6nj.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpzp9tz6nj.scala:27:23 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m                result += (word + \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value += is not a member\
    \ of List[String] - did you mean result.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659805937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += (word + \" \")\n        }\n        if (result.isEmpty)\
    \ result else result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7s1x_n_d.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = mutable.ListBuffer[String]()\n        val vowels = \"aeiouAEIOU\"\
    \n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n  \
    \      val consonants_count = consonants.toSet.size\n        val vowels_count\
    \ = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n    \
    \    val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val vowels_count = consonants.toSet.size\n\
    \        val vowels_count = vowels.toSet.size\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpf11l_ykj.scala:57:11 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpf11l_ykj.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowels_count\e[0m = consonants.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvowels_count is already defined as \e[33mvalue\e[0m \e[35mvowels_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf11l_ykj.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowels_count\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowels_count is already defined as \e[33mvalue\e[0m \e[35mvowels_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf11l_ykj.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowels_count\e[0m = consonants.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvowels_count is already defined as \e[33mvalue\e[0m \e[35mvowels_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf11l_ykj.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowels_count\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowels_count is already defined as \e[33mvalue\e[0m \e[35mvowels_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defi"
  stdout: ''
  timestamp: 1659805937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words: List[String] = s.split(\" \").filter(_.length == n).map(_.toLowerCase)\n\
    \        val counts = words.map(word => word.count(_ == 'a')).toList\n       \
    \ val maxCount = counts.max\n        val maxIndex = counts.indexWhere(_ == maxCount)\n\
    \        val maxWord = words(maxIndex)\n        val maxCount = maxCount.toInt\n\
    \        val maxIndex = maxIndex.toInt\n        val maxWordCount = words.count(word\
    \ => word == maxWord)\n        val maxWordIndex = words.indexOf(maxWord)\n   \
    \     val maxWordCount = maxWordCount.toInt\n        val maxWordIndex = maxWordIndex.toInt\n\
    \        val maxWordCount = maxWordCount.toInt\n        if (maxWordCount == maxCount)\
    \ {\n            if (maxWordIndex == maxIndex) {\n                if (maxWordIndex\
    \ == maxWordIndex) {\n                    if (maxWordIndex == maxWordIndex + 1)\
    \ {\n                        words.take(maxWordIndex + 1).map(_.toLowerCase)\n\
    \                    } else {\n                        words.take(maxWordIndex).map(_.toLowerCase)\n\
    \                    }\n                } else {\n                    words.take(maxWordIndex).map(_.toLowerCase)\n\
    \                }\n            } else {\n                words.take(maxWordIndex).map(_.toLowerCase)\n\
    \            }\n        } else {\n            words.take(maxWordIndex).map(_.toLowerCase)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpheij1c94.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = maxCount.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxCount is already defined as \e[33mvalue\e[0m \e[35mmaxCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpheij1c94.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpheij1c94.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordCount\e[0m = maxWordCount.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCount is already defined as \e[33mvalue\e[0m \e[35mmaxWordCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpheij1c94.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = maxWordIndex.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpheij1c94.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxWordCount\e[0m = maxWordCount.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxWordCount is already defined as \e[33mvalue\e[0m \e"
  stdout: ''
  timestamp: 1659805938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words: List[String] = s.split(\" \").map(_.toLowerCase).toList\n     \
    \   val consonants: List[String] = s.split(\" \").filter(_.isLetter).toList\n\
    \        val consonantsSet = consonants.toSet\n        val consonantsSetSize =\
    \ consonantsSet.size\n        val consonantsSetIterator = consonantsSet.iterator\n\
    \        val consonantsSetIteratorSize = consonantsSetIterator.size\n        val\
    \ consonantsSetIteratorIterator = consonantsSetIterator.iterator\n        val\
    \ consonantsSetIteratorIteratorSize = consonantsSetIteratorIterator.size\n   \
    \     val consonantsSetIteratorIteratorIterator = consonantsSetIteratorIterator.iterator\n\
    \        val consonantsSetIteratorIteratorIteratorSize = consonantsSetIteratorIteratorIterator.size\n\
    \        val consonantsSetIteratorIteratorIteratorIterator = consonantsSetIteratorIteratorIterator.iterator\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorSize = consonantsSetIteratorIteratorIteratorIterator.size\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIterator = consonantsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorSize = consonantsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIterator = consonantsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIteratorSize = consonantsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIteratorIterator = consonantsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIteratorSize = consonantsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIteratorIterator = consonantsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = consonants\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmylnztm9.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetIteratorIteratorIteratorIteratorSize\e\
    [0m = consonantsSetIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsSetIteratorIteratorIteratorIteratorSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mconsonantsSetIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmylnztm9.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetIteratorIteratorIteratorIteratorIterator\e\
    [0m = consonantsSetIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsSetIteratorIteratorIteratorIteratorIterator is already\
    \ defined as \e[33mvalue\e[0m \e[35mconsonantsSetIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmylnztm9.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = consonantsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mconsonantsSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ d"
  stdout: ''
  timestamp: 1659805939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \").toList\n        val wordSet = mutable.Set[String]()\n\
    \        words.foreach(word => {\n            val charSet = word.split(\"\").toSet\n\
    \            if (charSet.size == n) {\n                wordSet += word\n     \
    \       }\n        })\n        wordSet.distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph0x6m_5o.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mwordSet\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659805935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jfvso53.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val list2 = list.filter(_ != \"\
    \ \")\n        val list3 = list2.filter(_ != \" \")\n        val list4 = list3.filter(_\
    \ != \" \")\n        val list5 = list4.filter(_ != \" \")\n        val list6 =\
    \ list5.filter(_ != \" \")\n        val list7 = list6.filter(_ != \" \")\n   \
    \     val list8 = list7.filter(_ != \" \")\n        val list9 = list8.filter(_\
    \ != \" \")\n        val list10 = list9.filter(_ != \" \")\n        val list11\
    \ = list10.filter(_ != \" \")\n        val list12 = list11.filter(_ != \" \")\n\
    \        val list13 = list12.filter(_ != \" \")\n        val list14 = list13.filter(_\
    \ != \" \")\n        val list15 = list14.filter(_ != \" \")\n        val list16\
    \ = list15.filter(_ != \" \")\n        val list17 = list16.filter(_ != \" \")\n\
    \        val list18 = list17.filter(_ != \" \")\n        val list19 = list18.filter(_\
    \ != \" \")\n        val list20 = list19.filter(_ != \" \")\n        val list21\
    \ = list20.filter(_ != \" \")\n        val list22 = list21.filter(_ != \" \")\n\
    \        val list23 = list22.filter(_ != \" \")\n        val list24 = list23.filter(_\
    \ != \" \")\n        val list25 = list24.filter(_ != \" \")\n        val list26\
    \ = list25.filter(_ != \" \")\n        val list27 = list26.filter(_ != \" \")\n\
    \        val list28 = list27.filter(_ != \" \")\n        val list29 = list28.filter(_\
    \ != \" \")\n        val list30 = list29.filter(_ != \" \")\n        val list31\
    \ = list30.filter(_ != \" \")\n        val list32 = list31.filter(_ != \" \")\n\
    \        val list33 = list32.filter(_ != \" \")\n        val list34 = list33.filter(_\
    \ != \" \")\n        val list35 = list34.filter(_ != \" \")\n        val list36\
    \ = list35.filter(_ != \" \")\n        val list37 = list36.filter(_ != \" \")\n\
    \        val list38 = list37.filter(_ != \" \")\n        val list39 = list38.filter(_\
    \ != \" \")\n        val list40 = list39.filter(_ != \" \")\n        val list41\
    \ = list40.filter(_ != \" \")\n        val list42 = list41.filter(_ != \" \")\n\
    \        val list43 = list42.filter(_ != \" \")\n        val list44 = list43.filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqz1bze06.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until list.size) {\n            val word = list(i)\n    \
    \        val count = word.count(c => c.isLetter)\n            if (count == n)\
    \ {\n                result += (word + \" \")\n            }\n        }\n    \
    \    return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvgbc961w.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(x => {\n            val count = x.count(_ == 'a')\n    \
    \        if (count == n) {\n                result += x\n            }\n     \
    \   })\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbn4u3y03.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            if (word.contains(\"a\") || word.contains(\"\
    e\") || word.contains(\"i\") || word.contains(\"o\") || word.contains(\"u\"))\
    \ {\n                result.add(word)\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2nrovis3.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jfvso53.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) result += (word + \" \")\n        }\n  \
    \      return result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdkixjcu4.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val list2 = list.filter(_ => _.length\
    \ == n)\n        list2.map(_.split(\"\")).filter(_.length == n).map(_.mkString(\"\
    \")).filter(_.nonEmpty).map(_.toLowerCase).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpxgocsyp8.scala:17:37 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list.filter(_\
    \ => _.length == n)\n\e[31m\e[31m   |\e[0m                                   \
    \  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => _$2.length == n.\n1 error found\n"
  stdout: ''
  timestamp: 1659805937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { x =>\n            val y = x.toUpperCase\n            val\
    \ z = y.replaceAll(\"[^A-Z]\", \"\")\n            val z = z.split(\" \").toList\n\
    \            z.foreach { y =>\n                if (y.length == n) {\n        \
    \            result += (y + \"\\n\")\n                }\n            }\n     \
    \   }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp899tyakd.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp899tyakd.scala:21:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e\
    [0m \e[36mz\e[0m = z.split(\e[31m\" \"\e[0m).toList\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mz is already defined\
    \ as \e[33mvalue\e[0m \e[35mz\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp899tyakd.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e[0m (y.length == n) {\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \      value length is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659805941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        })\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsru8r3fj.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jfvso53.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) result += (word + \" \")\n        }\n  \
    \      return result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmlavh5jc.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) result += (word + \" \")\n        }\n  \
    \      return result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmlavh5jc.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \").filter(_.isLetter).map(_.toUpperCase)\n       \
    \ val nConsonants = n - 1\n        val nConsonantsList = words.map(_.toUpperCase).filter(_\
    \ => _ == _).count(_ == _)\n        val nConsonantsList2 = words.map(_.toUpperCase).filter(_\
    \ => _ == _).count(_ != _)\n        val nConsonantsList3 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ == _)\n        val nConsonantsList4 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList5 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList6 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList7 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList8 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList9 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList10 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList11 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList12 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList13 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList14 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList15 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList16 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nConsonantsList17 = words.map(_.toUpperCase).filter(_\
    \ => _ != _).count(_ != _)\n        val nCon\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprhhdf42y.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprhhdf42y.scala:16:42\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mwords\e[0m = s.split(\e[31m\" \"\e[0m).filter(_.isLetter).map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmprhhdf42y.scala:18:67 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnConsonantsList\e[0m = words.map(_.toUpperCase).filter(_\
    \ => _ == _).count(_ == _)\n\e[31m\e[31m   |\e[0m                            \
    \                                       ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$5 of expanded function:\n\e[31m   |\e[0m   (_$5, _$6) => _$5 == _$6.\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmprhhdf42y.scala:18:72 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnConsonantsList\e[0m = words.map(_.toUpperCase).filter(_\
    \ => _ == _).count(_ == _)\n\e[31m\e[31m   |\e[0m                            \
    \                                            ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$6 of expanded function:\n\e[31m   |\e[0m   (_$5, _$6) =>\
    \ _$5 == _$6.\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmprhhdf42y.scala:18:81\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnConsonantsList\e[0m = words.map(_.toUpperCase).filter(_ => _ == _).count(_\
    \ == _)\n\e[31m\e[31m   |\e[0m                                               \
    \                                  ^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                   Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmprhhdf42y.scala:19:68 -------------------------"
  stdout: ''
  timestamp: 1659805948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            if (word.contains(n)) {\n       \
    \         result += (word + \" \")\n            }\n        })\n        if (result.isEmpty)\
    \ {\n            List()\n        } else {\n            result.toList\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkj1xs1rj.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(_ == 'a')\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9d075m1z.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jfvso53.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until list.size) {\n            val word = list(i)\n    \
    \        if (word.contains(\"a\") || word.contains(\"e\") || word.contains(\"\
    i\") || word.contains(\"o\") || word.contains(\"u\")) {\n                result.add(word)\n\
    \            }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpozosuhhi.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        })\n        if (result.isEmpty) {\n            List()\n \
    \       } else {\n            result.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzf7er94u.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        })\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx8pysd8s.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result: List[String] = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result ::= word\n            }\n\
    \        }\n        if (result.isEmpty) {\n            List()\n        } else\
    \ {\n            result.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4vvenk25.scala:17:39 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4vvenk25.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result ::= word\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value ::= is not a member\
    \ of List[String] - did you mean result.::?\n2 errors found\n"
  stdout: ''
  timestamp: 1659805945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplp_ihu2s.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805942
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val wordList = s.split(\" \")\n        val wordSet = mutable.Set[String]()\n\
    \        wordList.foreach(word => {\n            val wordSet = wordSet.toSet\n\
    \            val wordSetSize = wordSet.size\n            val consonantSet = wordSet.toSet\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet.size\n            val consonantSetSize = consonantSet.size\n\
    \            val consonantSetSize = consonantSet.size\n            val consonantSetSize\
    \ = consonantSet\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1_5hjxld.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp1_5hjxld.scala:69:0 ----------------------------\e[0m\e[0m\n\e[31m69\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1_5hjxld.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mwordSet\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805942
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \")\n        val wordList = mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val letters = word.split(\"\").map(_.toChar)\n\
    \            val consonants = letters.filter(letter => letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u')\n            if(consonants.length\
    \ == n) {\n                wordList += word\n            }\n        }\n      \
    \  wordList.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv4jtjiv7.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpv4jtjiv7.scala:19:47 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = word.split(\e\
    [31m\"\"\e[0m).map(_.toChar)\n\e[31m\e[31m   |\e[0m                          \
    \                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       value toChar is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmpv4jtjiv7.scala:19:54\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \     \e[33mval\e[0m \e[36mletters\e[0m = word.split(\e[31m\"\"\e[0m).map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                                                      ^\e\
    [0m\n\e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659805952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            if (word.length == n) {\n        \
    \        result += (word + \" \")\n            }\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk6pj0j_d.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- list) {\n            if (word.length == n) {\n         \
    \       result += (word + \" \")\n            }\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqz3n164x.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.split(\"[aeiou]\"\
    ).length\n            if (count == n) {\n                result += (word + \"\
    \ \")\n            }\n        }\n        return result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpldk93q65.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(word => word.split(\"\
    \").filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4kpbwlyw.scala:17:4 ----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp4kpbwlyw.scala:16:102 -----------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e[0m[\e[35mString\e\
    [0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(\e[36mword\e[0m => word.split(\e\
    [31m\"\"\e[0m).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).filter(_.isLetter).fi"
  stdout: ''
  timestamp: 1659805966
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until list.size) {\n            if (list(i).length == n)\
    \ {\n                result += list(i)\n            }\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyz6_6p3v.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val wordList = s.split(\" \").toList\n        val wordSet = wordList.map(x\
    \ => x.toUpperCase).toSet\n        val result = new mutable.ListBuffer[String]()\n\
    \        wordList.foreach(x => {\n            val count = wordSet.count(y => y\
    \ == x.toUpperCase)\n            if (count == n) {\n                result +=\
    \ x\n            }\n        })\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptp1enkw8.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result: List[String] = new ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) result += word\n        })\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6rj56azd.scala:17:35\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m                   Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp6rj56azd.scala:20:35 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (count == n) result += word\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m      value += is not a member of List[String] - did you mean result.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        })\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl389c8f9.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \")\n        val list = mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            if (word.length == n) {\n        \
    \        list += word\n            }\n        }\n        if (list.isEmpty) {\n\
    \            list\n        } else {\n            list.distinct\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp947bjc0o.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).toList\n\
    \        val consonants: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(\"\
    a\")).toList\n        val vowels: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(\"\
    e\")).toList\n        val consonantCounts = consonants.map(c => c.count(_ == 'a')).toList\n\
    \        val vowelCounts = vowels.map(v => v.count(_ == 'e')).toList\n       \
    \ val consonantAndVowelCounts = consonantCounts ++ vowelCounts\n        val consonantAndVowelCountSum\
    \ = consonantAndVowelCounts.sum\n        val consonantAndVowelCountSumInOrder\
    \ = consonantAndVowelCounts.sortWith(_ < _)\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVowelCountSumInOrder.length\n        val consonantAndVowelCountSumInOrderLength\
    \ = consonantAndVow\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4jmbbzjn.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mconsonantAndVowelCountSumInOrderLength\e\
    [0m = consonantAndVowelCountSumInOrder.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantAndVowelCountSumInOrderLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mconsonantAndVowelCountSumInOrderLength\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4jmbbzjn.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mconsonantAndVowelCountSumInOrderLength\e\
    [0m = consonantAndVowelCountSumInOrder.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantAndVowelCountSumInOrderLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mconsonantAndVowelCountSumInOrderLength\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4jmbbzjn.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mconsonantAndVowelCountSumInOrderLength\e\
    [0m = consonantAndVowelCountSumInOrder.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantAndVowelCountSumInOrderLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mconsonantAndVowelCountSumInOrderLength\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4jmbbzjn.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mconsonantAndVowelCountSumInOrderLength\e\
    [0m = consonantAndVowelCountSumInOrder.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- list) {\n            if (word.contains(\"a\") || word.contains(\"\
    e\") || word.contains(\"i\") || word.contains(\"o\") || word.contains(\"u\"))\
    \ {\n                result.add(word)\n            }\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1k_n8nz8.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) {\n                result += word\n    \
    \        }\n        }\n        if (result.isEmpty) {\n            List()\n   \
    \     } else {\n            result.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfrm01fuk.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowelsCount =\
    \ vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n   \
    \     val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val consonantsCount = consonants.toSet.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptr94yn3q.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptr94yn3q.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptr94yn3q.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptr94yn3q.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptr94yn3q.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e"
  stdout: ''
  timestamp: 1659805958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val result = new mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\
    \n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowelCounts\
    \ = mutable.Map[String, Long]()\n        val consonantCounts = mutable.Map[String,\
    \ Long]()\n        val vowelCount = 0\n        val consonantCount = 0\n      \
    \  val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]()\n        val consonantCounts\
    \ = mutable.Map[String, Long]()\n        val vowelCount = 0\n        val consonantCount\
    \ = 0\n        val vowelCounts = mutable.Map[String, Long]\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxzg2jqit.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCounts is already defined as \e[33mvalue\e[0m \e[35mvowelCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxzg2jqit.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantCounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCounts is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxzg2jqit.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxzg2jqit.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxzg2jqit.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^"
  stdout: ''
  timestamp: 1659805958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += (word + \" \")\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgj9vqtlq.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val list = word.split(\"\\\\W+\"\
    )\n            list.foreach { word =>\n                if (word.count(_ == 'a')\
    \ > n || word.count(_ == 'e') > n || word.count(_ == 'i') > n || word.count(_\
    \ == 'o') > n || word.count(_ == 'u') > n) {\n                    result.add(word)\n\
    \                }\n            }\n        }\n        return result.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg05j7r7v.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { x =>\n            val list = x.split(\"\\\\W+\").toList\n\
    \            val count = list.count(_.isLetter)\n            if (count == n) {\n\
    \                result += x\n            }\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpspa_5qpe.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpspa_5qpe.scala:20:37\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcount\e[0m = list.count(_.isLetter)\n\e[31m\e[31m   |\e[0m           \
    \                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \            value isLetter is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659805959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            if (word.count(_ == 'a') >= n &&\
    \ word.count(_ == 'e') >= n && word.count(_ == 'i') >= n && word.count(_ == 'o')\
    \ >= n && word.count(_ == 'u') >= n) {\n                result += word\n     \
    \       }\n        })\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvbhg3tzh.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        if (result.isEmpty) {\n            List()\n  \
    \      } else {\n            result.mkString(\" \")\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplzfppyh5.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = new mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\
    \n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonants_count\
    \ = consonants.toSet.size\n        val vowels_count = vowels.toSet.size\n    \
    \    val consonant_count = consonants.toSet.count(_ == \" \")\n        val vowel_count\
    \ = vowels.toSet.count(_ == \" \")\n        val consonant_vowel_count = consonants.toSet.count(vowels.contains)\n\
    \        val vowel_consonant_count = vowels.toSet.count(consonants.contains)\n\
    \        val vowel_consonant_vowel_count = vowels.toSet.count(consonants.contains.vowels)\n\
    \        val vowel_consonant_consonant_count = vowels.toSet.count(consonants.contains.consonants)\n\
    \        val vowel_consonant_consonant_vowel_count = vowels.toSet.count(consonants.contains.consonants.vowels)\n\
    \        val vowel_consonant_consonant_consonant_count = vowels.toSet.count(consonants.contains.consonants.consonants)\n\
    \        val vowel_consonant_consonant_consonant_vowel_count = vowels.toSet.count(consonants.contains.consonants.consonants.vowels)\n\
    \        val vowel_consonant_consonant_consonant_consonant_count = vowels.toSet.count(consonants.contains.consonants.consonants.consonants)\n\
    \        val vowel_consonant_consonant_consonant_consonant_vowel_count = vowels.toSet.count(consonants.contains.consonants.consonants.consonants.vowels)\n\
    \        val vowel_consonant_consonant_consonant_consonant_consonant_count = vowels.toSet.count(consonants.contains.consonants.consonants.consonants.consonants)\n\
    \        val vowel_consonant_consonant_consonant_consonant_consonant_vowel_count\
    \ = vowels.toSet.count(consonants.contains.consonants.consonants.consonants.consonants.vowels)\n\
    \        val vowel_consonant_consonant_consonant_consonant_consonant_consonant_count\
    \ = vowels.toSet.count(consonants.contains.conson\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm470gaaz.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm470gaaz.scala:16:24\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mwords\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpm470gaaz.scala:21:53\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mconsonant_count\e[0m = consonants.toSet.count(_ == \e[31m\"\
    \ \"\e[0m)\n\e[31m\e[31m   |\e[0m                                            \
    \         ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpm470gaaz.scala:22:45\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mvowel_count\e[0m = vowels.toSet.count(_ == \e[31m\" \"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                             ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm470gaaz.scala:25:81\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mvowel_consonant_vowel_count\e[0m = vowels.toSet.count(consonants.contains.vowels)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value vowels\
    \ is not a member of CharSequence => Boolean\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpm470gaaz.scala:26:85 ------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowel_consonant_consonant_count\e[0m = vowels.toSet.count(consonants.contains.consonants)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^^^^^"
  stdout: ''
  timestamp: 1659805967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val wordsWithNConsonants = \n            s.split(\" \").filter(_.length ==\
    \ n).map(word => \n                word.split(\"\").filter(_.isLetter).filter(_.isUpper).mkString(\"\
    \").toLowerCase)\n        wordsWithNConsonants.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy085ghot.scala:18:40 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                word.split(\e[31m\"\"\e[0m).filter(_.isLetter).filter(_.isUpper).mkString(\e\
    [31m\"\"\e[0m).toLowerCase)\n\e[31m\e[31m   |\e[0m                           \
    \           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value\
    \ isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy085ghot.scala:18:59\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                word.split(\e\
    [31m\"\"\e[0m).filter(_.isLetter).filter(_.isUpper).mkString(\e[31m\"\"\e[0m).toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value isUpper\
    \ is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659805967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        if (result.isEmpty) {\n            List()\n  \
    \      } else {\n            result.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3uk85cz5.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val wordList = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        wordList.foreach(word => {\n            if (word.count(_ == 'a') >= n\
    \ && word.count(_ == 'e') >= n && word.count(_ == 'i') >= n && word.count(_ ==\
    \ 'o') >= n && word.count(_ == 'u') >= n) {\n                result += word\n\
    \            }\n        })\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm24c3cus.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val result = new mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\
    \n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonants_count\
    \ = consonants.toSet.size // O(n)\n        val vowels_count = vowels.toSet.size\
    \ // O(n)\n        val vowels_index = vowels.toSet.indices.toList // O(n)\n  \
    \      val consonants_index = consonants.toSet.indices.toList // O(n)\n      \
    \  val vowels_set = vowels.toSet // O(n)\n        val consonants_set = consonants.toSet\
    \ // O(n)\n        val vowels_count = vowels_set.size // O(1)\n        val consonants_count\
    \ = consonants_set.size // O(1)\n        val vowels_index = vowels_set.indices.toList\
    \ // O(n)\n        val consonants_index = consonants_set.indices.toList // O(n)\n\
    \        val vowels_set = vowels_set.toList // O(n)\n        val consonants_set\
    \ = consonants_set.toList // O(n)\n        val vowels_count = vowels_set.size\
    \ // O(1)\n        val consonants_count = consonants_set.size // O(1)\n      \
    \  val vowels_index = vowels_set.indices.toList // O(n)\n        val consonants_index\
    \ = consonants_set.indices.toList // O(n)\n        val vowels_set = vowels_set.toList\
    \ // O(n)\n        val consonants_set = consonants_set.toList // O(n)\n      \
    \  val vowels_count = vowels_set.size // O(1)\n        val consonants_count =\
    \ consonants_set.size // O(1)\n        val vowels_index = vowels_set.indices.toList\
    \ // O(n)\n        val consonants_index = consonants_set.indices.toList // O(n)\n\
    \        val vowels_set = vowels_set.toList // O(n)\n        val consonants_set\
    \ = consonants_set.toList // O(n)\n        val vowels_count = vowels_set.size\
    \ // O(1)\n        val consonants_count = consonants_set.size // O(1)\n      \
    \  val vowels_index = vowels_set.indices.toList // O(n)\n        val consonants_index\
    \ = consonants_set.indices.toList // O(n)\n        val vowels_set = vowels_set.toList\
    \ // O(n)\n        val consonants_set = conson\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpet1vwpyj.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowels_count\e[0m = vowels_set.size\
    \ \e[34m// O(1)\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowels_count is already defined as \e[33mvalue\e[0m \e[35mvowels_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpet1vwpyj.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonants_count\e[0m = consonants_set.size\
    \ \e[34m// O(1)\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonants_count is already defined as \e[33mvalue\e[0m \e\
    [35mconsonants_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpet1vwpyj.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowels_index\e[0m = vowels_set.indices.toList\
    \ \e[34m// O(n)\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowels_index is already defined as \e[33mvalue\e[0m \e[35mvowels_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpet1vwpyj.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonants_index\e[0m = consonants_set.indices.toList\
    \ \e[34m// O(n)\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonants_index is already defined as \e[33mvalue\e[0m \e\
    [35mconsonants_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpet1vwpyj.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval"
  stdout: ''
  timestamp: 1659805969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        })\n        if (result.isEmpty) {\n            List()\n        } else\
    \ {\n            result.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqh235gy9.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words: List[String] = s.split(\" \").filter(_.nonEmpty).toList\n     \
    \   val consonants: List[String] = s.split(\" \").filter(_.nonEmpty).filter(_.contains(\"\
    a\")).toList\n        val vowels: List[String] = s.split(\" \").filter(_.nonEmpty).filter(_.contains(\"\
    e\")).toList\n        val consonantCount: Map[String, Long] = consonants.map(x\
    \ => (x, 1)).toMap\n        val vowelCount: Map[String, Long] = vowels.map(x =>\
    \ (x, 1)).toMap\n        val consonantCountList: List[(String, Long)] = consonantCount.values.toList\n\
    \        val vowelCountList: List[(String, Long)] = vowelCount.values.toList\n\
    \        val consonantCountListSorted: List[(String, Long)] = consonantCountList.sortBy(_._2).reverse\n\
    \        val vowelCountListSorted: List[(String, Long)] = vowelCountList.sortBy(_._2).reverse\n\
    \        val consonantCountListSortedWithVowel: List[(String, Long)] = consonantCountListSorted.filter(_._2\
    \ > vowelCountListSorted.head._2)\n        val vowelCountListSortedWithConsonant:\
    \ List[(String, Long)] = vowelCountListSorted.filter(_._2 > consonantCountListSorted.head._2)\n\
    \        val consonantCountListSortedWithVowelAndConsonant: List[(String, Long)]\
    \ = consonantCountListSortedWithVowel.filter(_._2 > vowelCountListSortedWithConsonant.head._2)\n\
    \        val vowelCountListSortedWithConsonantAndVowel: List[(String, Long)] =\
    \ vowelCountListSortedWithConsonant.filter(_._2 > consonantCountListSortedWithVowel.head._2)\n\
    \        consonantCountListSortedWithVowelAndConsonant.map(x => words).filter(_\
    \ == x._1).flatMap(x => x.split(\" \")).filter(x => x.size == n).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5z48wqq6.scala:19:48\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e\
    [0m: \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = consonants.map(\e[36mx\e\
    [0m => (x, \e[31m1\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                       \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          Found:    Map[String, Int]\n\e[31m   |\e[0m     \
    \                     Required: collection.mutable.Map[String, Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5z48wqq6.scala:20:44 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m: \e[35mMap\e\
    [0m[\e[35mString\e[0m, \e[35mLong\e[0m] = vowels.map(\e[36mx\e[0m => (x, \e[31m1\e\
    [0m)).toMap\n\e[31m\e[31m   |\e[0m                                           \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \  Found:    Map[String, Int]\n\e[31m   |\e[0m                          Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5z48wqq6.scala:21:77 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mconsonantCountList\e[0m: \e[35mList\e\
    [0m[(\e[35mString\e[0m, \e[35mLong\e[0m)] = consonantCount.values.toList\n\e[31m\e\
    [31m   |\e[0m                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Found:    List[Long]\n\
    \e[31m   |\e[0m                                          Required: List[\e[1m\e\
    [32m(\e[0m\e[1m\e[32mString\e[0m\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0mLong\e[1m\e\
    [32m)\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5z48wqq6.scala:22:69\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelCountList\e\
    [0m: \e[35mList\e[0m[(\e[35mString\e[0m, \e[35mLong\e"
  stdout: ''
  timestamp: 1659805975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        })\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx8pysd8s.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val wordList = word.split(\"\").toList\n\
    \            wordList.foreach(letter => {\n                if (letter == \"a\"\
    \ || letter == \"e\" || letter == \"i\" || letter == \"o\" || letter == \"u\"\
    ) {\n                    if (wordList.count(_ == letter) == n) {\n           \
    \             result += (word + \" \")\n                    }\n              \
    \  }\n            })\n        })\n        return result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4dkpe4n4.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqewh9ma7.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val wordList = word.split(\"[^aeiou]\"\
    ).filter(_.nonEmpty)\n            if (wordList.length == n) {\n              \
    \  result ++= wordList\n            }\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnwn15xdj.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805966
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").map(_.toUpperCase).toList\n        val result =\
    \ new mutable.ListBuffer[String]()\n        list.foreach { word =>\n         \
    \   val count = word.count(c => c.isLetter)\n            if (count == n) {\n \
    \               result += (word + \" \")\n            }\n        }\n        result\
    \ match {\n            case Nil => Nil\n            case _ => result.toList\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmvlnzpt0.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805966
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvp1k5zd9.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805966
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jfvso53.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantCount\
    \ = consonants.count(_ == \" \")\n        val vowelCount = vowels.count(_ == \"\
    \ \")\n        val vowelCounts = vowels.map(x => vowels.count(_ == x))\n     \
    \   val consonantCounts = consonants.map(x => consonants.count(_ == x))\n    \
    \    val vowelCountPairs = vowelCounts.zip(consonantCounts)\n        val vowelCountPairsSorted\
    \ = vowelCountPairs.sortBy(_._1).reverse\n        val vowelCountPairsSorted2 =\
    \ vowelCountPairs.sortBy(_._2).reverse\n        val vowelCountPairsSorted3 = vowelCountPairs.sortBy(_._3).reverse\n\
    \        val vowelCountPairsSorted4 = vowelCountPairs.sortBy(_._4).reverse\n \
    \       val vowelCountPairsSorted5 = vowelCountPairs.sortBy(_._5).reverse\n  \
    \      val vowelCountPairsSorted6 = vowelCountPairs.sortBy(_._6).reverse\n   \
    \     val vowelCountPairsSorted7 = vowelCountPairs.sortBy(_._7).reverse\n    \
    \    val vowelCountPairsSorted8 = vowelCountPairs.sortBy(_._8).reverse\n     \
    \   val vowelCountPairsSorted9 = vowelCountPairs.sortBy(_._9).reverse\n      \
    \  val vowelCountPairsSorted10 = vowelCountPairs.sortBy(_._10).reverse\n     \
    \   val vowelCountPairsSorted11 = vowelCountPairs.sortBy(_._11).reverse\n    \
    \    val vowelCountPairsSorted12 = vowelCountPairs.sortBy(_._12).reverse\n   \
    \     val vowelCountPairsSorted13 = vowelCountPairs.sortBy(_._13).reverse\n  \
    \      val vowelCountPairsSorted14 = vowelCountPairs.sortBy(_._14).reverse\n \
    \       val vowelCountPairsSorted15 = vowelCountPairs.sortBy(_._15).reverse\n\
    \        val vowelCountPairsSorted16 = vowelCountPairs.sortBy(_._16).reverse\n\
    \        val vowelCountPairsSorted17 = vowelCountPairs.sortBy(_._17).reverse\n\
    \        val vowelCountPairsSorted18 = vowelCountPairs.sortBy(_._18).reverse\n\
    \        val vowelCountPairsSorted19 = vowelCountPairs.sortBy(_._19).reverse\n\
    \        val vowelCountPairsSorted20\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgnoi27p4.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgnoi27p4.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mwords\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpgnoi27p4.scala:19:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonants.count(_ == \e[31m\" \"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                                              ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpgnoi27p4.scala:20:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowels.count(_\
    \ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgnoi27p4.scala:26:62\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelCountPairsSorted3\e[0m = vowelCountPairs.sortBy(_._3).reverse\n\e[31m\e\
    [31m   |\e[0m                                                            ^^^^\e\
    [0m\n\e[31m   |\e[0m           value _3 is not a member of (Int, Int) - did you\
    \ mean _$7._1?\n\e[31m\e[31m-- Error: /tmp/tmpgnoi27p4.scala:26:65 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelCountPairsSorted3\e\
    [0m = vowelCountPairs.sortBy(_._3).reverse\n\e[31m\e[31m   |\e[0m            \
    \                                                     ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0"
  stdout: ''
  timestamp: 1659805979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(x => {\n            val count = x.count(_ == 'a')\n    \
    \        if (count == n) result += x\n        })\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdzpic7pv.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).toList\n\
    \        val consonants: List[String] = words.filter(_.contains(\"a\")).filter(_.contains(\"\
    e\")).filter(_.contains(\"i\")).filter(_.contains(\"o\")).filter(_.contains(\"\
    u\")).filter(_.contains(\"y\")).map(_.toLowerCase).toList\n        val vowels:\
    \ List[String] = words.filter(_.contains(\"a\")).filter(_.contains(\"e\")).filter(_.contains(\"\
    i\")).filter(_.contains(\"o\")).filter(_.contains(\"u\")).map(_.toLowerCase).toList\n\
    \        val consonantAndVowels: List[String] = consonants.filter(_.contains(\"\
    a\")).filter(_.contains(\"e\")).filter(_.contains(\"i\")).filter(_.contains(\"\
    o\")).filter(_.contains(\"u\")).map(_.toLowerCase).toList ++ vowels.filter(_.contains(\"\
    a\")).filter(_.contains(\"e\")).filter(_.contains(\"i\")).filter(_.contains(\"\
    o\")).filter(_.contains(\"u\")).map(_.toLowerCase).toList\n        val consonantAndVowelsAndConsonants:\
    \ List[String] = consonantAndVowels.filter(_.contains(\"a\")).filter(_.contains(\"\
    e\")).filter(_.contains(\"i\")).filter(_.contains(\"o\")).filter(_.contains(\"\
    u\")).map(_.toLowerCase).toList ++ consonantAndVowels.filter(_.contains(\"a\"\
    )).filter(_.contains(\"e\")).filter(_.contains(\"i\")).filter(_.contains(\"o\"\
    )).filter(_.contains(\"u\")).map(_.toLowerCase).toList ++ consonants.filter(_.contains(\"\
    a\")).filter(_.contains(\"e\")).filter(_.contains(\"i\")).filter(_.contains(\"\
    o\")).filter(_.contains(\"u\")).map(_.toLowerCase).toList\n        val consonantAndVowelsAndConsonantsAndVowelsAndConsonants:\
    \ List[String] = consonantAndVowelsAndConsonants.filter(_.contains(\"a\")).filter(_.contains(\"\
    e\")).filter(_.contains(\"i\")).filter(_.contains(\"o\")).filter(_.contains(\"\
    u\")).map(_.toLowerCase).toList ++ consonantAndVowelsAndConsonants.filter(_.contains(\"\
    a\")).filter(_.contains(\"e\")).filter(_.contains(\"i\")).filter(_.contains(\"\
    o\")).filter(_.contains(\"u\")).map(_.toLowerCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvy8nkvzs.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpvy8nkvzs.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { x =>\n            val count = x.count(_ == 'a')\n    \
    \        if (count == n) {\n                result += x\n            }\n     \
    \   }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplncqsq5k.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val wordList = s.split(\" \").toList\n        val wordSet = wordList.map(x\
    \ => x.toUpperCase).toSet\n        val result = wordList.filter(x => wordSet.contains(x.toUpperCase)).sortBy(x\
    \ => x).take(n)\n        result.map(x => x.toUpperCase)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcz2el6_5.scala:18:95\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = wordList.filter(\e[36mx\e[0m => wordSet.contains(x.toUpperCase)).sortBy(\e\
    [36mx\e[0m => x).take(n)\n\e[31m\e[31m   |\e[0m                              \
    \                                                                 ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (n : Long)\n\
    \e[31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \")\n        val list = mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            if (word.contains(\"a\") || word.contains(\"\
    e\") || word.contains(\"i\") || word.contains(\"o\") || word.contains(\"u\") ||\
    \ word.contains(\"y\")) {\n                list += word\n            }\n     \
    \   }\n        if (list.size == 0) {\n            list\n        } else {\n   \
    \         list.take(n)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ae2pbua.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        })\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoh6r_l6v.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").map(_.toUpperCase).toList\n        val result =\
    \ new mutable.ListBuffer[String]()\n        list.foreach(word => {\n         \
    \   val count = word.count(c => c.isLetter)\n            if (count == n) {\n \
    \               result += word\n            }\n        })\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp28rbpfu1.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(n)).distinct\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpujdd7zc_.scala:16:107\
    \ -------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase).filter(_.contains(n)).distinct\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(_ == 'a')\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqhnp4_wa.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toUpperCase).toList\n\
    \        val consonants: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toUpperCase).filter(_\
    \ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _\
    \ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"\
    U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_\
    \ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _\
    \ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"\
    U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_\
    \ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _\
    \ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"\
    U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_\
    \ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _\
    \ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"\
    U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_\
    \ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _\
    \ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"\
    U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_\
    \ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _\
    \ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"U\").filter(_ => _ != \"\
    U\").filter(_ => _ != \"U\").filter(_ => \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsbrbej4q.scala:17:1377 -------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mconsonants\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toUpperCase).filter(_\
    \ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ !=\
    \ \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"\
    U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_\
    \ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ !=\
    \ \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"\
    U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_\
    \ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ !=\
    \ \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"\
    U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_\
    \ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ !=\
    \ \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"\
    U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_\
    \ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ !=\
    \ \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"\
    U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_\
    \ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ !=\
    \ \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"\
    U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_\
    \ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ !=\
    \ \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"\
    U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_\
    \ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ !=\
    \ \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"\
    U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).filter(_\
    \ => _ != \e[31m\"U\"\e[0m).filter(_ => _ != \e[31m\"U\"\e[0m).fil"
  stdout: ''
  timestamp: 1659805984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \").map(_.toUpperCase)\n        val consonants = List(\"\
    B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"\
    P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n        val\
    \ vowels = List(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val consonantCount\
    \ = words.map(_.toUpperCase).map(_.toUpperCase.count(_ == _)).sum\n        val\
    \ vowelCount = words.map(_.toUpperCase).map(_.toUpperCase.count(_ == _)).count(_\
    \ == _)\n        val consonantWords = words.filter(_.toUpperCase.count(_ == _)\
    \ == n)\n        val vowelWords = words.filter(_.toUpperCase.count(_ == _) ==\
    \ n)\n        val consonantWordsCount = consonantWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelWordsCount = vowelWords.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n        val consonantWordsVowels = consonantWords.filter(_.toUpperCase.count(_\
    \ == _) == n)\n        val vowelWordsVowels = vowelWords.filter(_.toUpperCase.count(_\
    \ == _) == n)\n        val consonantWordsVowelsCount = consonantWordsVowels.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelWordsVowelsCount = vowelWordsVowels.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n        val consonantWordsVowelsVowels = consonantWordsVowels.filter(_.toUpperCase.count(_\
    \ == _) == n)\n        val vowelWordsVowelsVowels = vowelWordsVowels.filter(_.toUpperCase.count(_\
    \ == _) == n)\n        val consonantWordsVowelsVowelsCount = consonantWordsVowelsVowels.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n        val vowelWordsVowelsVowelsCount = vowelWordsVowelsVowels.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp4z_79b6q.scala:19:78 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = words.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).sum\n\e[31m\e[31m   |\e[0m                                          \
    \                                    ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmp4z_79b6q.scala:20:74 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = words.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n\e[31m\e[31m   |\e[0m                                \
    \                                          ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                           Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmp4z_79b6q.scala:20:89 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = words.map(_.toUpperCase).map(_.toUpperCase.count(_\
    \ == _)).count(_ == _)\n\e[31m\e[31m   |\e[0m                                \
    \                                                         ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp4z_79b6q.scala:21:62 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mconsonantWords\e[0m = words.filter(_.toUpperCase.count(_\
    \ == _) == n)\n\e[31m\e[31m   |\e[0m                                         \
    \                     ^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmp4z_79b6q.scala:22:58 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelWords\e[0m = words.filter(_.toUpperCase.count(_\
    \ == _) == n)\n\e[31m\e[31m   |\e[0m                                         \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \  Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086] Syntax Er"
  stdout: ''
  timestamp: 1659805983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\")).filter(_.size == n).map(_.mkString(\"\")).filter(_.nonEmpty)\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsqpxwowx.scala:16:170\
    \ -------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m)).filter(_.size == n).map(_.mkString(\e[31m\"\
    \"\e[0m)).filter(_.nonEmpty)\n\e[31m\e[31m   |\e[0m                          \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805986
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(x => {\n            val count = x.count(_ == 'a')\n    \
    \        val count = x.count(_ == 'e')\n            val count = x.count(_ == 'i')\n\
    \            val count = x.count(_ == 'o')\n            val count = x.count(_\
    \ == 'u')\n            if (count == n) {\n                result += (x + \"\\\
    n\")\n            }\n        })\n        return result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sdvgjhr.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7sdvgjhr.scala:20:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e\
    [0m \e[36mcount\e[0m = x.count(_ == \e[31m'e'\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcount is already\
    \ defined as \e[33mvalue\e[0m \e[35mcount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7sdvgjhr.scala:21:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e\
    [0m \e[36mcount\e[0m = x.count(_ == \e[31m'i'\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcount is already\
    \ defined as \e[33mvalue\e[0m \e[35mcount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7sdvgjhr.scala:22:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36mcount\e[0m = x.count(_ == \e[31m'o'\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcount is already\
    \ defined as \e[33mvalue\e[0m \e[35mcount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7sdvgjhr.scala:23:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e\
    [0m \e[36mcount\e[0m = x.count(_ == \e[31m'u'\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcount is already\
    \ defined as \e[33mvalue\e[0m \e[35mcount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mN"
  stdout: ''
  timestamp: 1659805979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").map(_.toUpperCase).toList\n        val list = list.filter(_.length\
    \ == n).map(_.split(\"\")).flatten\n        list.filter(_.toString.toUpperCase.contains(\"\
    CONSONANTS\")).sortBy(_.toString.toUpperCase).reverse.map(_.toString).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ylr8m9x.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m)).flatten\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659805982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").map(_.toUpperCase).toList\n        val result =\
    \ new mutable.ListBuffer[String]()\n        list.foreach { word =>\n         \
    \   val count = word.count(c => c.toString.toUpperCase.contains(c.toString.toUpperCase.take(n).mkString))\n\
    \            if (count == n) result += (word + \" \")\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp60_b7uc6.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp60_b7uc6.scala:19:100\
    \ -------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e\
    [36mcount\e[0m = word.count(\e[36mc\e[0m => c.toString.toUpperCase.contains(c.toString.toUpperCase.take(n).mkString))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                           Found:    (n : Long)\n\e[31m   |\e\
    [0m                                                    Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805986
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) result += word\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc_axu6ql.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").map(_.toUpperCase).toList\n        val result =\
    \ list.filter(_ => n == 0 || _.count(_ == 'A') == n)\n        result.map(_.split(\"\
    \ \").map(_.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpwxvmqqlq.scala:17:48 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => n == \e[31m0\e[0m || _.count(_ == \e[31m'A'\e[0m) == n)\n\e[31m\e[31m   |\e\
    [0m                                                ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$3 of expanded function:\n\e[31m   |\e[0m   _$3 => n == 0\
    \ || _$3.count(_$4 => _$4 == \e[31m'A'\e[0m) == n.\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpwxvmqqlq.scala:18:19 --------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        result.map(_.split(\e[31m\" \"\e[0m).map(_.toUpperCase))\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   Found:    \e[1m\e[31mArray\e[0m\e[1m\e[31m[\e\
    [0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                   Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).toList\n\
    \        val counts = words.map(word => word -> word.length)\n        val maxCount\
    \ = counts.maxBy(_._2)._1\n        val maxCountIndex = counts.indexWhere(_._2\
    \ == maxCount)\n        val maxCountWord = words(maxCountIndex)\n        val maxCountWordIndex\
    \ = words.indexOf(maxCountWord)\n        val maxCountWordLength = maxCountWord.length\n\
    \        val maxCountWordIndex = words.indexOf(maxCountWord)\n        val maxCountWordLength\
    \ = maxCountWord.length\n        val maxCountWordIndex = words.indexOf(maxCountWord)\n\
    \        val maxCountWordLength = maxCountWord.length\n        val maxCountWordIndex\
    \ = words.indexOf(maxCountWord)\n        val maxCountWordLength = maxCountWord.length\n\
    \        val maxCountWordIndex = words.indexOf(maxCountWord)\n        val maxCountWordLength\
    \ = maxCountWord.length\n        val maxCountWordIndex = words.indexOf(maxCountWord)\n\
    \        val maxCountWordLength = maxCountWord.length\n        val maxCountWordIndex\
    \ = words.indexOf(maxCountWord)\n        val maxCountWordLength = maxCountWord.length\n\
    \        val maxCountWordIndex = words.indexOf(maxCountWord)\n        val maxCountWordLength\
    \ = maxCountWord.length\n        val maxCountWordIndex = words.indexOf(maxCountWord)\n\
    \        val maxCountWordLength = maxCountWord.length\n        val maxCountWordIndex\
    \ = words.indexOf(maxCountWord)\n        val maxCountWordLength = maxCountWord.length\n\
    \        val maxCountWordIndex = words.indexOf(maxCountWord)\n        val maxCountWordLength\
    \ = maxCountWord.length\n        val maxCountWordIndex = words.indexOf(maxCountWord)\n\
    \        val maxCountWordLength = maxCountWord.length\n        val maxCountWordIndex\
    \ = words.indexOf(maxCountWord)\n        val maxCountWordLength = maxCountWord.length\n\
    \        val maxCountWordIndex = words.indexOf(maxCountWord)\n        val maxCountWordLength\
    \ = maxCountWord.length\n        val maxCountWordIndex = words.indexOf(maxCountWord)\n\
    \        val maxCountWordLength = maxCountWord.length\n        val maxCountWordIndex\
    \ = words.indexOf(maxCountWord)\n        val maxCountWordLength = maxCountWord.length\n\
    \        val maxCountWordIndex = words.indexOf(maxCountWord)\n        val maxCountWordLength\
    \ = maxCountWord.length\n        val maxCountWordIndex = words.indexOf(maxCountWord)\n\
    \        val maxCountWordLength = maxCountWord.length\n        val maxCountWordIndex\
    \ = words.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6ov9wl31.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6ov9wl31.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxCountWordIndex\e[0m = words.indexOf(maxCountWord)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountWordIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxCountWordIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6ov9wl31.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxCountWordLength\e[0m\
    \ = maxCountWord.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountWordLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxCountWordLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6ov9wl31.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxCountWordIndex\e[0m =\
    \ words.indexOf(maxCountWord)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountWordIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxCountWordIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6ov9wl31.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxCountWordLength\e[0m\
    \ = maxCountWord.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountWordLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxCountWordLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ m"
  stdout: ''
  timestamp: 1659805991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        }\n        if (result.isEmpty) {\n            List()\n  \
    \      } else {\n            result.toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3uk85cz5.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \").map(_.toUpperCase)\n        val list = words.filter(x\
    \ => x.toUpperCase.count(_ == 'A') >= n).toList\n        list.filter(x => x.toUpperCase.count(_\
    \ == 'A') == n).map(x => x.toUpperCase).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk1h43s_k.scala:18:93\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        list.filter(\e[36mx\e\
    [0m => x.toUpperCase.count(_ == \e[31m'A'\e[0m) == n).map(\e[36mx\e[0m => x.toUpperCase).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) result += word\n        })\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj0xusjzr.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val list = list.filter(x => x.contains(\"\
    a\"))\n        val list = list.filter(x => x.contains(\"e\"))\n        val list\
    \ = list.filter(x => x.contains(\"i\"))\n        val list = list.filter(x => x.contains(\"\
    o\"))\n        val list = list.filter(x => x.contains(\"u\"))\n        val list\
    \ = list.filter(x => x.contains(\"l\"))\n        val list = list.filter(x => x.contains(\"\
    l\"))\n        val list = list.filter(x => x.contains(\"a\"))\n        val list\
    \ = list.filter(x => x.contains(\"e\"))\n        val list = list.filter(x => x.contains(\"\
    i\"))\n        val list = list.filter(x => x.contains(\"o\"))\n        val list\
    \ = list.filter(x => x.contains(\"u\"))\n        val list = list.filter(x => x.contains(\"\
    l\"))\n        val list = list.filter(x => x.contains(\"l\"))\n        val list\
    \ = list.filter(x => x.contains(\"a\"))\n        val list = list.filter(x => x.contains(\"\
    e\"))\n        val list = list.filter(x => x.contains(\"i\"))\n        val list\
    \ = list.filter(x => x.contains(\"o\"))\n        val list = list.filter(x => x.contains(\"\
    u\"))\n        val list = list.filter(x => x.contains(\"l\"))\n        val list\
    \ = list.filter(x => x.contains(\"l\"))\n        val list = list.filter(x => x.contains(\"\
    a\"))\n        val list = list.filter(x => x.contains(\"e\"))\n        val list\
    \ = list.filter(x => x.contains(\"i\"))\n        val list = list.filter(x => x.contains(\"\
    o\"))\n        val list = list.filter(x => x.contains(\"u\"))\n        val list\
    \ = list.filter(x => x.contains(\"l\"))\n        val list = list.filter(x => x.contains(\"\
    l\"))\n        val list = list.filter(x => x.contains(\"a\"))\n        val list\
    \ = list.filter(x => x.contains(\"e\"))\n        val list = list.filter(x => x.contains(\"\
    i\"))\n        val list = list.filter(x => x.contains(\"o\"))\n        val list\
    \ = list.filter(x => x.contains(\"u\"))\n        val list = list.filter(x => x.contains(\"\
    l\"))\n        val list = list.filter(x => x.contains(\"l\"))\n        val list\
    \ = list.filter(x => x.contains(\"a\"))\n        val list = list.filter(x => x.contains(\"\
    e\"))\n        val list = list.filter(x => x.contains(\"i\"))\n        val list\
    \ = list.filter(x => x.contains(\"\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphtv_ran3.scala:55:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e\
    [36mx\e[0m => x.contains(\"\n\e[31m\e[31m   |\e[0m                           \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \              unclosed string literal\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphtv_ran3.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e[31m\"a\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphtv_ran3.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"e\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphtv_ran3.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"i\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphtv_ran3.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list.filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"o\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as "
  stdout: ''
  timestamp: 1659805990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val vowelCounts = words.map(x => vowels.count(x.toUpperCase)).toList\n\
    \        val consonantCounts = words.map(x => consonants.count(x.toUpperCase)).toList\n\
    \        val consonantCountSum = consonantCounts.sum\n        val vowelCountSum\
    \ = vowelCounts.sum\n        val consonantCountDifference = consonantCountSum\
    \ - vowelCountSum\n        val vowelCountDifference = vowelCountSum - consonantCountSum\n\
    \        val consonantCountDifferencePercentage = consonantCountDifference / consonantCountSum\n\
    \        val vowelCountDifferencePercentage = vowelCountDifference / vowelCountSum\n\
    \        val consonantCountDifferencePercentagePercentage = consonantCountDifferencePercentage\
    \ * 100\n        val vowelCountDifferencePercentagePercentage = vowelCountDifferencePercentage\
    \ * 100\n        val consonantCountDifferencePercentagePercentagePercentage =\
    \ consonantCountDifferencePercentagePercentage * 100\n        val vowelCountDifferencePercentagePercentagePercentage\
    \ = vowelCountDifferencePercentagePercentage * 100\n        val consonantCountDifferencePercentagePercentagePercentage\
    \ = consonantCountDifferencePercentagePercentagePercentage * 100\n        val\
    \ vowelCountDifferencePercentagePercentagePercentage = vowelCountDifferencePercentagePercentagePercentage\
    \ * 100\n        val consonantCountDifferencePercentagePercentagePercentage =\
    \ consonantCountDifferencePercentagePercentagePercentage * 100\n        val vowelCountDifferencePercentagePercentagePercentage\
    \ = vowelCountDifferencePercentagePercentagePercentage * 100\n        val consonantCountDifferencePercentagePercentagePercentage\
    \ = consonantCountDifferencePercentagePercentagePercentage * 100\n        val\
    \ vowelCountDifferencePercentagePercentagePercentage = vowelCountDifferencePercentagePercentagePercentage\
    \ * 100\n        val consonantCountDifferencePercentagePercentagePercentage =\
    \ consonantCountDifferencePercentagePercentagePercentage * 100\n        val vowelCountDifferencePercentagePercentagePercentage\
    \ = vowelCountDifferencePercentagePercentagePercentage * 100\n        val consonantCountDifferencePercentagePercentagePercentage\
    \ = consonantCountDifferencePercentagePercentagePercentage * 100\n        val\
    \ vowelCountDifferencePercentagePercentagePercentage = vowelCountDifferencePercentagePercentagePercentage\
    \ * 100\n        val consonantCountDifferencePercentagePercentagePercentage =\
    \ consonantCountDifferencePercentagePercentagePercentage * 100\n        val vowelCountDifferencePercentagePercentagePercentage\
    \ = vowelCountDifferencePercentagePercentagePercentage \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp98edj04k.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mconsonantCountDifferencePercentagePercentagePercentage\e\
    [0m = consonantCountDifferencePercentagePercentagePercentage * \e[31m100\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCountDifferencePercentagePercentagePercentage is\
    \ already defined as \e[33mvalue\e[0m \e[35mconsonantCountDifferencePercentagePercentagePercentage\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp98edj04k.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelCountDifferencePercentagePercentagePercentage\e\
    [0m = vowelCountDifferencePercentagePercentagePercentage * \e[31m100\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCountDifferencePercentagePercentagePercentage is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelCountDifferencePercentagePercentagePercentage\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp98edj04k.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mconsonantCountDifferencePercentagePercentagePercentage\e\
    [0m = consonantCountDifferencePercentagePercentagePercentage * \e[31m100\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCountDifferencePercentagePercentagePercentage is\
    \ already defined as \e[33mvalue\e[0m \e[35mconsonantCountDifferencePercentagePercentagePercentage\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all b"
  stdout: ''
  timestamp: 1659805992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val list2 = list.filter(_ != \"\")\n  \
    \      val list3 = list2.filter(_ != \" \")\n        val list4 = list3.filter(_\
    \ != \" \")\n        val list5 = list4.filter(_ != \" \")\n        val list6 =\
    \ list5.filter(_ != \" \")\n        val list7 = list6.filter(_ != \" \")\n   \
    \     val list8 = list7.filter(_ != \" \")\n        val list9 = list8.filter(_\
    \ != \" \")\n        val list10 = list9.filter(_ != \" \")\n        val list11\
    \ = list10.filter(_ != \" \")\n        val list12 = list11.filter(_ != \" \")\n\
    \        val list13 = list12.filter(_ != \" \")\n        val list14 = list13.filter(_\
    \ != \" \")\n        val list15 = list14.filter(_ != \" \")\n        val list16\
    \ = list15.filter(_ != \" \")\n        val list17 = list16.filter(_ != \" \")\n\
    \        val list18 = list17.filter(_ != \" \")\n        val list19 = list18.filter(_\
    \ != \" \")\n        val list20 = list19.filter(_ != \" \")\n        val list21\
    \ = list20.filter(_ != \" \")\n        val list22 = list21.filter(_ != \" \")\n\
    \        val list23 = list22.filter(_ != \" \")\n        val list24 = list23.filter(_\
    \ != \" \")\n        val list25 = list24.filter(_ != \" \")\n        val list26\
    \ = list25.filter(_ != \" \")\n        val list27 = list26.filter(_ != \" \")\n\
    \        val list28 = list27.filter(_ != \" \")\n        val list29 = list28.filter(_\
    \ != \" \")\n        val list30 = list29.filter(_ != \" \")\n        val list31\
    \ = list30.filter(_ != \" \")\n        val list32 = list31.filter(_ != \" \")\n\
    \        val list33 = list32.filter(_ != \" \")\n        val list34 = list33.filter(_\
    \ != \" \")\n        val list35 = list34.filter(_ != \" \")\n        val list36\
    \ = list35.filter(_ != \" \")\n        val list37 = list36.filter(_ != \" \")\n\
    \        val list38 = list37.filter(_ != \" \")\n        val list39 = list38.filter(_\
    \ != \" \")\n        val list40 = list39.filter(_ != \" \")\n        val list41\
    \ = list40.filter(_ != \" \")\n        val list42 = list41.filter(_ != \" \")\n\
    \        val list43 = list42.filter(_ != \" \")\n        val list44 = list43.filter(_\
    \ != \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsm64ar8_.scala:59:39 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mlist44\e[0m = list43.filter(_\
    \ != \n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsm64ar8_.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val list2 = list.map(x => x.toUpperCase)\n\
    \        val list3 = list2.filter(x => x.contains(\"A\") || x.contains(\"E\")\
    \ || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val\
    \ list4 = list3.filter(x => x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list5 = list4.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list6 = list5.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list7 = list6.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list8 = list7.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list9 = list8.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list10 = list9.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list11 = list10.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list12 = list11.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list13 = list12.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list14 = list13.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list15 = list14.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphctk2i16.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphctk2i16.scala:31:5 ---------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").map(_.toUpperCase).toList\n        val result =\
    \ list.filter(_ => s.count(_ == _) == n)\n        result.map(_.toUpperCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp4arrusb_.scala:17:46 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = list.filter(_\
    \ => s.count(_ == _) == n)\n\e[31m\e[31m   |\e[0m                            \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \   Wrong number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1659805989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \").toList\n        val wordsWithConsonants = words.filter(word\
    \ => word.forall(c => c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'\
    \ && c != 'y'))\n        val wordsWithConsonantsCount = wordsWithConsonants.map(word\
    \ => word.count(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || c == 'y'))\n        val wordsWithConsonantsCountSorted = wordsWithConsonantsCount.sortWith((x,\
    \ y) => x > y)\n        val wordsWithConsonantsCountSortedReversed = wordsWithConsonantsCountSorted.reverse\n\
    \        val wordsWithConsonantsCountSortedReversedCount = wordsWithConsonantsCountSortedReversed.count(x\
    \ => x == n)\n        val wordsWithConsonantsCountSortedReversedCountSorted =\
    \ wordsWithConsonantsCountSortedReversed.sortWith((x, y) => x > y)\n        val\
    \ wordsWithConsonantsCountSortedReversedCountSortedReversed = wordsWithConsonantsCountSortedReversedCountSorted.reverse\n\
    \        val wordsWithConsonantsCountSortedReversedCountSortedReversedCount =\
    \ wordsWithConsonantsCountSortedReversedCountSortedReversed.count(x => x == n)\n\
    \        val wordsWithConsonantsCountSortedReversedCountSortedReversedCountSorted\
    \ = wordsWithConsonantsCountSortedReversedCountSortedReversedCountSorted.sortWith((x,\
    \ y) => x > y)\n        val wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversed\
    \ = wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversed.reverse\n\
    \        val wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversedCount\
    \ = wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversed.count(x\
    \ => x == n)\n        val wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversedCountSorted\
    \ = wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversedCountSorted.sortWith((x,\
    \ y) => x > y)\n        val wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversedCountSortedReversed\
    \ = wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversedCountSortedReversed.reverse\n\
    \        val wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversedCountSortedReversedCount\
    \ = wordsWithConsonants\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvg0fx71w.scala:25:83 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mwordsWithConsonantsCountSortedReversedCountSortedReversedCountSorted\e\
    [0m = wordsWithConsonantsCountSortedReversedCountSortedReversedCountSorted.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x > y)\n\e[31m\e[31m   |\e[0m                   \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35mwordsWithConsonantsCountSortedReversedCountSortedReversedCountSorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvg0fx71w.scala:26:91\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mwordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversed\e\
    [0m = wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpvg0fx71w.scala:28:102 --------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mwordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversedCountSorted\e\
    [0m = wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversedCountSorted.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x > y)\n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  wordsWithConsonantsCountSortedReversedCountSortedReversedCountSortedReversedCountSorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available whe"
  stdout: ''
  timestamp: 1659805995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val wordList = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- wordList) {\n            if(wordList.count(_ == word) ==\
    \ n) {\n                result += word\n            }\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfqtrpvus.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until list.size) {\n            val word = list(i)\n    \
    \        if (word.contains(\"a\") || word.contains(\"e\") || word.contains(\"\
    i\") || word.contains(\"o\") || word.contains(\"u\")) {\n                result.add(word)\n\
    \            }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpozosuhhi.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \").toList\n        val result: List[String] = new\
    \ mutable.ListBuffer[String]()\n        words.foreach(word => {\n            val\
    \ count = word.count(c => c.isLetter)\n            if (count == n) {\n       \
    \         result += (word + \" \")\n            }\n        })\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpax121hy3.scala:17:39 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpax121hy3.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result += (word + \e[31m\" \"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value\
    \ += is not a member of List[String] - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659805995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        })\n        if (result.isEmpty) {\n            List()\n \
    \       } else {\n            result.mkString(\" \")\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqzkzoax2.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val result = new mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\
    \n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowel_consonant_pairs\
    \ = vowels ++ consonants\n        val vowel_consonant_pairs_count = vowel_consonant_pairs.length\n\
    \        val consonant_pairs = consonants.toList ++ vowel_consonant_pairs.toList\n\
    \        val consonant_pairs_count = consonant_pairs.length\n        val vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs_count\n        val consonant_pairs_count = consonant_pairs_count\n\
    \        val vowel_consonant_pairs_count = vowel_consonant_pairs_count\n     \
    \   val consonant_pairs_count = consonant_pairs_count\n        val vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs_count\n        val consonant_pairs_count = consonant_pairs_count\n\
    \        val vowel_consonant_pairs_count = vowel_consonant_pairs_count\n     \
    \   val consonant_pairs_count = consonant_pairs_count\n        val vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs_count\n        val consonant_pairs_count = consonant_pairs_count\n\
    \        val vowel_consonant_pairs_count = vowel_consonant_pairs_count\n     \
    \   val consonant_pairs_count = consonant_pairs_count\n        val vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs_count\n        val consonant_pairs_count = consonant_pairs_count\n\
    \        val vowel_consonant_pairs_count = vowel_consonant_pairs_count\n     \
    \   val consonant_pairs_count = consonant_pairs_count\n        val vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs_count\n        val consonant_pairs_count = consonant_pairs_count\n\
    \        val vowel_consonant_pairs_count = vowel_consonant_pairs_count\n     \
    \   val consonant_pairs_count = consonant_pairs_count\n        val vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs_count\n        val consonant_pairs_count = consonant_pairs_count\n\
    \        val vowel_consonant_pairs_count = vowel_consonant_pairs_count\n     \
    \   val consonant_pairs_count = consonant_pairs_count\n        val vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs_count\n        val consonant_pairs_count = consonant_pairs_count\n\
    \        val vowel_consonant_pairs_count = vowel_con\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt3qmk7oz.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowel_consonant_pairs_count\e\
    [0m = vowel_consonant_pairs_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowel_consonant_pairs_count is already defined as \e[33mvalue\e\
    [0m \e[35mvowel_consonant_pairs_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt3qmk7oz.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonant_pairs_count\e\
    [0m = consonant_pairs_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonant_pairs_count is already defined as \e[33mvalue\e\
    [0m \e[35mconsonant_pairs_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt3qmk7oz.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowel_consonant_pairs_count\e\
    [0m = vowel_consonant_pairs_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowel_consonant_pairs_count is already defined as \e[33mvalue\e\
    [0m \e[35mvowel_consonant_pairs_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt3qmk7oz.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonant_pairs_count\e\
    [0m = consonant_pairs_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonant_pairs_count is already defined as \e[33mvalue\e\
    [0m \e[35mconsonant_pairs_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] "
  stdout: ''
  timestamp: 1659805995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = mutable.ListBuffer[String]()\n        val vowels = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = mutable.Set(\"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ consonants_count = consonants.size\n        val vowels_count = vowels.size\n\
    \        val consonants_count_in_string = s.length / consonants_count_in_string\n\
    \        val vowels_count_in_string = s.length / vowels_count_in_string\n    \
    \    val consonants_in_string = s.length / consonants_count_in_string\n      \
    \  val vowels_in_string = s.length / vowels_count_in_string\n        val consonants_count_in_string\
    \ = s.length / consonants_count_in_string\n        val vowels_count_in_string\
    \ = s.length / vowels_count_in_string\n        val consonants_in_string = s.length\
    \ / consonants_count_in_string\n        val vowels_in_string = s.length / vowels_count_in_string\n\
    \        val consonants_count_in_string = s.length / consonants_count_in_string\n\
    \        val vowels_count_in_string = s.length / vowels_count_in_string\n    \
    \    val consonants_in_string = s.length / consonants_count_in_string\n      \
    \  val vowels_in_string = s.length / vowels_count_in_string\n        val consonants_count_in_string\
    \ = s.length / consonants_count_in_string\n        val vowels_count_in_string\
    \ = s.length / vowels_count_in_string\n        val consonants_in_string = s.length\
    \ / consonants_count_in_string\n        val vowels_in_string = s.length / vowels_count_in_string\n\
    \        val consonants_count_in_string = s.length / consonants_count_in_string\n\
    \        val vowels_count_in_string = s.length / vowels_count_in_string\n    \
    \    val consonants_in_string = s.length / consonants_count_in_string\n      \
    \  val vowels_in_string = s.length / vowels_count_in_string\n        val consonants_count_in_string\
    \ = s.length / consonants_count_in_string\n        val vowels_count_in_string\
    \ = s.length / vowels_count_in_string\n        val consonants_in_string = s.length\
    \ / consonants_count_in_string\n        val vowels_in_string = s.length / vowels_count_in_string\n\
    \        val consonants_count_in_string = s.length / consonants_count_in_string\n\
    \        val vowels_count_in_string = s.length / vowels_count_in_string\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz457sgml.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mconsonants_count_in_string\e\
    [0m = s.length / consonants_count_in_string\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonants_count_in_string is already defined as \e[33mvalue\e\
    [0m \e[35mconsonants_count_in_string\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz457sgml.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowels_count_in_string\e\
    [0m = s.length / vowels_count_in_string\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowels_count_in_string is already defined as \e[33mvalue\e\
    [0m \e[35mvowels_count_in_string\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz457sgml.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mconsonants_in_string\e[0m\
    \ = s.length / consonants_count_in_string\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonants_in_string is already defined as \e[33mvalue\e[0m\
    \ \e[35mconsonants_in_string\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpz457sgml.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowels_in_string\e[0m =\
    \ s.length / vowels_count_in_string\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowels_in_string is already defined as \e[33mvalue\e[0m \e\
    [35mvowels_in_string\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of t"
  stdout: ''
  timestamp: 1659805999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += word\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkjlx88rf.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- list) {\n            if (word.count(_ == 'a') >= n && word.count(_\
    \ == 'e') >= n && word.count(_ == 'i') >= n && word.count(_ == 'o') >= n && word.count(_\
    \ == 'u') >= n) {\n                result += word\n            }\n        }\n\
    \        return result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpchnxr6uw.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(word => word.split(\"\").filter(_.isLetter).mkString(\"\").toLowerCase).filter(_.nonEmpty)\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz4hs0gjl.scala:16:143 -----------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(\e[36mword\e[0m => word.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e\
    [31m\"\"\e[0m).toLowerCase).filter(_.nonEmpty)\n\e[31m\e[31m   |\e[0m        \
    \                                                                            \
    \                                                         ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                value isLetter is not a member of\
    \ String\n1 error found\n"
  stdout: ''
  timestamp: 1659806002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        }\n        if (result.isEmpty) {\n            List()\n        } else\
    \ {\n            result.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpriictchd.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val result = new mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\
    \n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowelsCount\
    \ = vowels.toSet.count(_ == s)\n        val consonantsCount = consonants.toSet.count(_\
    \ == s)\n        if (vowelsCount == n && consonantsCount == n) {\n           \
    \ result ++= s.split(\" \")\n        }\n        return result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbi6v1ejp.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpbi6v1ejp.scala:19:45\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.count(_ == s)\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpbi6v1ejp.scala:20:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toSet.count(_\
    \ == s)\n\e[31m\e[31m   |\e[0m                                               \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1659806003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val list2 = list.map(x => x.toUpperCase)\n\
    \        val list3 = list2.filter(x => x.contains(\"A\") || x.contains(\"E\")\
    \ || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val\
    \ list4 = list3.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list5 = list4.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list6 = list5.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list7 = list6.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list8 = list7.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list9 = list8.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list10 = list9.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list11 = list10.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"U\"))\n       \
    \ val list12 = list11.filter(x => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"\
    I\") || x.contains(\"O\") || x.contains(\"U\"))\n        val list13 = list12.filter(x\
    \ => x.contains(\"A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"\
    O\") || x.contains(\"U\"))\n        val list14 = list13.filter(x => x.contains(\"\
    A\") || x.contains(\"E\") || x.contains(\"I\") || x.contains(\"O\") || x.contains(\"\
    U\"))\n        val list15 = list14.filter(x => x.contains(\"A\") || x.contains(\"\
    E\") || x.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0d1jdjbz.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0d1jdjbz.scala:31:5 ---------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659806003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase)\n\
    \        val wordSet: mutable.Set[String] = mutable.Set()\n        words.foreach(word\
    \ => wordSet.add(word))\n        val result: List[String] = wordSet.filter(_ =>\
    \ wordSet.count(_ == n) == n).sortBy(_.toLowerCase)\n        result.filter(_.nonEmpty).map(_.toLowerCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn2ra3rtr.scala:16:34\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn2ra3rtr.scala:17:21\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mwordSet\e[0m: mutable.Set[\e[35mString\e[0m] = mutable.Set()\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn2ra3rtr.scala:17:43\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mwordSet\e[0m: mutable.Set[\e[35mString\e[0m] = mutable.Set()\n\e[31m\e[31m\
    \   |\e[0m                                           ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659806004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until list.length) {\n            if (list(i).length == n)\
    \ {\n                result += (list(i))\n            }\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3wimkkq9.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\").filter(_.isLetter).toList).flatten.toList\n        words.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\").filter(_.isLetter).toList).flatten.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprtdopgke.scala:16:132 -----------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).toList).flatten.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                          ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprtdopgke.scala:17:99\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        words.filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).toList).flatten.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                             value isLetter is not a member of String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659806006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        words.foreach(word => {\n            val wordList = word.split(\"[^aeiou]\"\
    ).map(_.toLowerCase).toList\n            val count = wordList.count(x => x.contains(n))\
    \ \n            if (count == n) {\n                result.add(word)\n        \
    \    }\n        })\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi3yp5plo.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { x =>\n            val count = x.count(_ == 'a')\n    \
    \        if (count == n) {\n                result += x\n            }\n     \
    \   }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiu995lfn.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonantCount\
    \ = consonants.count(_ == \" \")\n        val vowelCount = vowels.count(_ == \"\
    \ \")\n        val consonantCounts = consonants.count(_ == _)\n        val vowelCounts\
    \ = vowels.count(_ == _)\n        val consonantCountPairs = consonants.count(_\
    \ == _)\n        val vowelCountPairs = vowels.count(_ == _)\n        val consonantCountPairsPairs\
    \ = consonants.count(_ == _)\n        val vowelCountPairsPairs = vowels.count(_\
    \ == _)\n        val consonantCountPairsPairsPairs = consonants.count(_ == _)\n\
    \        val vowelCountPairsPairsPairs = vowels.count(_ == _)\n        val consonantCountPairsPairsPairsPairs\
    \ = consonants.count(_ == _)\n        val vowelCountPairsPairsPairsPairs = vowels.count(_\
    \ == _)\n        val consonantCountPairsPairsPairsPairsPairs = consonants.count(_\
    \ == _)\n        val vowelCountPairsPairsPairsPairsPairs = vowels.count(_ == _)\n\
    \        val consonantCountPairsPairsPairsPairsPairsPairs = consonants.count(_\
    \ == _)\n        val vowelCountPairsPairsPairsPairsPairsPairsPairs = vowels.count(_\
    \ == _)\n        val consonantCountPairsPairsPairsPairsPairsPairsPairs = consonants.count(_\
    \ == _)\n        val vowelCountPairsPairsPairsPairsPairsPairsPairsPairs = vowels.count(_\
    \ == _)\n        val consonantCountPairsPairsPairsPairsPairsPairsPairsPairsPairs\
    \ = consonants.count(_ == _)\n        val vowelCountPairsPairsPairsPairsPairsPairsPairsPairsPairsPairs\
    \ = vowels.count(_ == _)\n        val consonantCountPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairs\
    \ = consonants.count(_ == _)\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp1hzumrsf.scala:40:11 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1hzumrsf.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmp1hzumrsf.scala:19:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = consonants.count(_\
    \ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and\
    \ String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp1hzumrsf.scala:20:38\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mvowelCount\e[0m = vowels.count(_ == \e[31m\" \"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp1hzumrsf.scala:21:47 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mconsonantCounts\e[0m = consonants.count(_\
    \ == _)\n\e[31m\e[31m   |\e[0m                                               ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp1hzumrsf.scala:22:39\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelCounts\e[0m = vowels.count(_ == _)\n\e[31m\e[31m   |\e[0m       \
    \                                ^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                 Wrong number of parameters, expect"
  stdout: ''
  timestamp: 1659806007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words: List[String] = s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\"\").filter(_.isLetter).mkString(\"\").toLowerCase).distinct\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfxgkv6hg.scala:16:132 -----------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.nonEmpty).map(_.toLowerCase).filter(_.length\
    \ == n).map(_.split(\e[31m\"\"\e[0m).filter(_.isLetter).mkString(\e[31m\"\"\e\
    [0m).toLowerCase).distinct\n\e[31m\e[31m   |\e[0m                            \
    \                                                                            \
    \                          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \              value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659806006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(x => {\n            val count = x.count(_ == 'a')\n    \
    \        val count = x.count(_ == 'e')\n            val count = x.count(_ == 'i')\n\
    \            val count = x.count(_ == 'o')\n            val count = x.count(_\
    \ == 'u')\n            if (count == n) {\n                result += x\n      \
    \      }\n        })\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt_1h6iyt.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt_1h6iyt.scala:20:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e\
    [0m \e[36mcount\e[0m = x.count(_ == \e[31m'e'\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcount is already\
    \ defined as \e[33mvalue\e[0m \e[35mcount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt_1h6iyt.scala:21:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e\
    [0m \e[36mcount\e[0m = x.count(_ == \e[31m'i'\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcount is already\
    \ defined as \e[33mvalue\e[0m \e[35mcount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt_1h6iyt.scala:22:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36mcount\e[0m = x.count(_ == \e[31m'o'\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcount is already\
    \ defined as \e[33mvalue\e[0m \e[35mcount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt_1h6iyt.scala:23:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e\
    [0m \e[36mcount\e[0m = x.count(_ == \e[31m'u'\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcount is already\
    \ defined as \e[33mvalue\e[0m \e[35mcount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mN"
  stdout: ''
  timestamp: 1659806004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) result += (word + \" \")\n        })\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1tvgw8nn.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach { word =>\n            val letters = word.split(\"\")\n\
    \            letters.foreach { letter =>\n                if (letters.count(_\
    \ == 'a') > n || letters.count(_ == 'e') > n || letters.count(_ == 'i') > n ||\
    \ letters.count(_ == 'o') > n || letters.count(_ == 'u') > n) {\n            \
    \        result.add(word)\n                }\n            }\n        }\n     \
    \   return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp71zw8nm9.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp71zw8nm9.scala:21:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \         \e[33mif\e[0m (letters.count(_ == \e[31m'a'\e[0m) > n || letters.count(_\
    \ == \e[31m'e'\e[0m) > n || letters.count(_ == \e[31m'i'\e[0m) > n || letters.count(_\
    \ == \e[31m'o'\e[0m) > n || letters.count(_ == \e[31m'u'\e[0m) > n) {\n\e[31m\e\
    [31m   |\e[0m                                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp71zw8nm9.scala:21:65 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e[0m (letters.count(_ == \e\
    [31m'a'\e[0m) > n || letters.count(_ == \e[31m'e'\e[0m) > n || letters.count(_\
    \ == \e[31m'i'\e[0m) > n || letters.count(_ == \e[31m'o'\e[0m) > n || letters.count(_\
    \ == \e[31m'u'\e[0m) > n) {\n\e[31m\e[31m   |\e[0m                           \
    \                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types String and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp71zw8nm9.scala:21:96 -----------------------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                \e[33mif\e[0m (letters.count(_ == \e[31m'a'\e\
    [0m) > n || letters.count(_ == \e[31m'e'\e[0m) > n || letters.count(_ == \e[31m'i'\e\
    [0m) > n || letters.count(_ == \e[31m'o'\e[0m) > n || letters.count(_ == \e[31m'u'\e\
    [0m) > n) {\n\e[31m\e[31m   |\e[0m                                           \
    \                                                     ^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmp71zw8nm9.scala:21:127 ---------------------------"
  stdout: ''
  timestamp: 1659806007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = s.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        words.foreach(word => {\n            val count = word.count(_ == 'a')\n\
    \            if (count == n) {\n                result += word\n            }\n\
    \        })\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbehiusrc.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val words = mutable.ListBuffer[String]()\n        val vowels = \"aeiou\"\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val consonants_count\
    \ = consonants.length\n        val vowels_count = vowels.length\n        val vowels_count\
    \ = consonants_count - vowels_count\n        val consonants_count = consonants.length\n\
    \        val vowels_count = consonants_count - vowels_count\n        val vowels_count\
    \ = consonants_count - vowels_count\n        val vowels_count = consonants_count\
    \ - vowels_count\n        val vowels_count = consonants_count - vowels_count\n\
    \        val vowels_count = consonants_count - vowels_count\n        val vowels_count\
    \ = consonants_count - vowels_count\n        val vowels_count = consonants_count\
    \ - vowels_count\n        val vowels_count = consonants_count - vowels_count\n\
    \        val vowels_count = consonants_count - vowels_count\n        val vowels_count\
    \ = consonants_count - vowels_count\n        val vowels_count = consonants_count\
    \ - vowels_count\n        val vowels_count = consonants_count - vowels_count\n\
    \        val vowels_count = consonants_count - vowels_count\n        val vowels_count\
    \ = consonants_count - vowels_count\n        val vowels_count = consonants_count\
    \ - vowels_count\n        val vowels_count = consonants_count - vowels_count\n\
    \        val vowels_count = consonants_count - vowels_count\n        val vowels_count\
    \ = consonants_count - vowels_count\n        val vowels_count = consonants_count\
    \ - vowels_count\n        val vowels_count = consonants_count - vowels_count\n\
    \        val vowels_count = consonants_count - vowels_count\n        val vowels_count\
    \ = consonants_count - vowels_count\n        val vowels_count = consonants_count\
    \ - vowels_count\n        val vowels_count = consonants_count - vowels_count\n\
    \        val vowels_count = consonants_count - vowels_count\n        val vowels_count\
    \ = consonants_count - vowels_count\n        val vowels_count = consonants_count\
    \ - vowels_count\n        val vowels_count = consonants_count - vowels_count\n\
    \        val vowels_count = consonants_count - vowels_count\n        val vowels_count\
    \ = consonants_count - vowels_count\n        val vowels_count = consonant\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdqjos5l3.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowels_count\e[0m = consonants_count\
    \ - vowels_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowels_count is already defined as \e[33mvalue\e[0m \e[35mvowels_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdqjos5l3.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonants_count\e[0m = consonants.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mconsonants_count is already defined as \e[33mvalue\e[0m \e[35mconsonants_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdqjos5l3.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowels_count\e[0m = consonants_count\
    \ - vowels_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowels_count is already defined as \e[33mvalue\e[0m \e[35mvowels_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdqjos5l3.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowels_count\e[0m = consonants_count\
    \ - vowels_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowels_count is already defined as \e[33mvalue\e[0m \e[35mvowels_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdqjos5l3.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowels_count\e[0m = consonants_"
  stdout: ''
  timestamp: 1659806007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val list = word.split(\"\\\\W+\"\
    ).toList\n            list.foreach(word => {\n                val list = word.split(\"\
    \\\\W+\").toList\n                if (list.size == n) {\n                    result\
    \ += (word + \" \")\n                }\n            })\n        })\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzl9uiil6.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"\
    lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"\
    Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"\
    Uncle\"]\n    def selectWords(s : String, n : Long) : List[String] = {\n     \
    \   val list = s.split(\" \").toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        list.foreach(word => {\n            val count = word.count(c => c.isLetter)\n\
    \            if (count == n) {\n                result += (word + \" \")\n   \
    \         }\n        })\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsru8r3fj.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805896
