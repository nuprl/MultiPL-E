name: HumanEval_116_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this Kata, you have to sort an array of non-negative integers according\
  \ to\n    // number of ones in their binary representation in ascending order.\n\
  \    // For similar number of ones, sort based on decimal value.\n    // It must\
  \ be implemented like this:\n    // >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3,\
  \ 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n \
  \   // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    def sortArray(arr :\
  \ List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long](1l.toLong,\
  \ 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
  \ 4l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](-2l.toLong,\
  \ -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong))).equals((List[Long](-4l.toLong,\
  \ -2l.toLong, -6l.toLong, -5l.toLong, -3l.toLong))));\n    assert(sortArray((List[Long](1l.toLong,\
  \ 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](2l.toLong, 5l.toLong, 77l.toLong, 4l.toLong, 5l.toLong,\
  \ 3l.toLong, 5l.toLong, 7l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 4l.toLong, 4l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
  \ 7l.toLong, 77l.toLong))));\n    assert(sortArray((List[Long](3l.toLong, 6l.toLong,\
  \ 44l.toLong, 12l.toLong, 32l.toLong, 5l.toLong))).equals((List[Long](32l.toLong,\
  \ 3l.toLong, 5l.toLong, 6l.toLong, 12l.toLong, 44l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    }\n\n}\n"
completions: ["        val ones = arr.count(_ == 1)\n        val twos = arr.count(_\
    \ == 2)\n        val threes = arr.count(_ == 3)\n        val fours = arr.count(_\
    \ == 4)\n        val fives = arr.count(_ == 5)\n        val sixes = arr.count(_\
    \ == 6)\n        val sevens = arr.count(_ == 7)\n        val eights = arr.count(_\
    \ == 8)\n        val nines = arr.count(_ == 9)\n        val tens = arr.count(_\
    \ == 10)\n        val hundreds = arr.count(_ == 100)\n        val thousands =\
    \ arr.count(_ == 1000)\n        val millions = arr.count(_ == 1000000)\n     \
    \   val billions = arr.count(_ == 1000000000)\n        val trillions = arr.count(_\
    \ == 1000000000000)\n        val quadrillions = arr.count(_ == 1000000000000000)\n\
    \        val quintillions = arr.count(_ == 1000000000000000000)\n        val sextillions\
    \ = arr.count(_ == 10000000000000000000000)\n        val septillions = arr.count(_\
    \ == 1000000000000000000000000)\n        val octillions = arr.count(_ == 1000000000000000000000000000)\n\
    \        val nonillions = arr.count(_ == 10000000000000000000000000000000)\n \
    \       val decillions = arr.count(_ == 1000000000000000000000000000000000)\n\
    \        val undecillions = arr.count(_ == 100000000000000000000000000000000)\n\
    \        val decillions = arr.count(_ == 10000000000000000000000000000)\n    \
    \    val undecillions = arr.count(_ == 1000000000000000000000000000)\n       \
    \ val decillions = arr.count(_ == 100000000000000000000)\n        val undecillions\
    \ = arr.count(_ == 1000000000000000000)\n        val decillions = arr.count(_\
    \ == 1000000000000)\n        val undecillions = arr.count(_ == 100000000000)\n\
    \        val decillions = arr.count(_ == 100000000)\n        val undecillions\
    \ = arr.count(_ == 1000000000)\n        val decillions = arr.count(_ == 1000000)\n\
    \        val undecillions = arr.count(_ == 10000000)\n        val decillions =\
    \ arr.count(_ == 100000)\n        val undecillions = arr.count(_ == 100000)\n\
    \        val decillions = arr.count(_ == 10000)\n        val undecillions = arr.count(_\
    \ == 10000)\n        val decillions = arr.count(_ == 1000)\n        val undecillions\
    \ = ", "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_\
    \ > 1)\n        val onesArr = arr.map(x => if (x == 1) 1 else 0)\n        val\
    \ decimalsArr = arr.map(x => if (x > 1) x / 2 else 0)\n        val sortedArr =\
    \ onesArr.zip(decimalsArr).sortBy(_._1).map(x => x._2)\n        sortedArr.map(x\
    \ => if (x == 0) x else x + ones)", "        val ones = arr.filter(x => x % 2\
    \ == 0).length\n        val twos = arr.filter(x => x % 2 == 1).length\n      \
    \  val threes = arr.filter(x => x % 3 == 0).length\n        val fours = arr.filter(x\
    \ => x % 4 == 0).length\n        val fives = arr.filter(x => x % 5 == 0).length\n\
    \        val sixes = arr.filter(x => x % 6 == 0).length\n        val sevens =\
    \ arr.filter(x => x % 7 == 0).length\n        val eights = arr.filter(x => x %\
    \ 8 == 0).length\n        val nines = arr.filter(x => x % 9 == 0).length\n   \
    \     val tens = arr.filter(x => x % 10 == 0).length\n        val hundreds = arr.filter(x\
    \ => x % 100 == 0).length\n        val thousands = arr.filter(x => x % 1000 ==\
    \ 0).length\n        val millions = arr.filter(x => x % 1000000 == 0).length\n\
    \        val billions = arr.filter(x => x % 1000000000 == 0).length\n        val\
    \ trillions = arr.filter(x => x % 1000000000000 == 0).length\n        val quadrillions\
    \ = arr.filter(x => x % 1000000000000000 == 0).length\n        val quintillions\
    \ = arr.filter(x => x % 1000000000000000000 == 0).length\n        val onesAndZeros\
    \ = arr.filter(x => x % 1 == 0 && x != 0).length\n        val onesAndOnes = arr.filter(x\
    \ => x % 1 == 1 && x != 0).length\n        val twosAndZeros = arr.filter(x =>\
    \ x % 2 == 0 && x != 0).length\n        val twosAndOnes = arr.filter(x => x %\
    \ 2 == 1 && x != 0).length\n        val threesAndZeros = arr.filter(x => x % 3\
    \ == 0 && x != 0).length\n        val threesAndOnes = arr.filter(x => x % 3 ==\
    \ 1 && x != 0).length\n        val foursAndZeros = arr.filter(x => x % 4 == 0\
    \ && x != 0).length\n        val foursAndOnes = arr.filter(x => x % 4 == 1 &&\
    \ x != 0).length\n        val fivesAndZeros = arr.filter(x => x % 5 == 0 && x\
    \ != 0).length\n        val fivesAndOnes = arr.filter(x => x % 5 == 1 && x !=\
    \ 0).length\n        val sixesAndZeros = arr.filter(x => x % 6 == 0 && x != 0).length\n\
    \        val sixesAndOnes = arr.filter(x => x % 6 == 1 && x != 0).", "       \
    \ val ones = arr.filter(_ % 2 == 0).length\n        val twos = arr.filter(_ %\
    \ 2 == 1).length\n        val decimals = arr.filter(_ % 10 == 0).length\n    \
    \    val decimalsDecimal = arr.filter(_ % 10 == 1).length\n        val decimalsDecimalDecimal\
    \ = arr.filter(_ % 10 == 2).length\n        val decimalsDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 3).length\n        val decimalsDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 4).length\n        val decimalsDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 5).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 6).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 7).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 8).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 9).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 0).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 1).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 2).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 3).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 4).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 5).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 6).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 7).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 8).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 9).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 0).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 1).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % ", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val onesArr = arr.map(x => (x % 2 == 0 ? 1 : 0))\n\
    \        val zerosArr = arr.map(x => (x % 2 == 0 ? 0 : 1))\n        val onesCount\
    \ = onesArr.count(_ == 1)\n        val zerosCount = zerosArr.count(_ == 0)\n \
    \       val onesZeros = onesArr.zip(zerosArr).count(_ == 1)\n        val zerosOnes\
    \ = zerosArr.zip(onesArr).count(_ == 0)\n        val onesZeroOnes = onesArr.zip(zerosArr).zip(onesArr).count(_\
    \ == 1)\n        val zerosOneOnes = zerosArr.zip(onesArr).zip(zerosArr).count(_\
    \ == 1)\n        val onesZeroZeroOnes = onesArr.zip(zerosArr).zip(zerosArr).zip(onesArr).count(_\
    \ == 1)\n        val zerosOneZeroOnes = zerosArr.zip(onesArr).zip(onesArr).zip(zerosArr).count(_\
    \ == 1)\n        val onesZeroZeroZeroOnes = onesArr.zip(zerosArr).zip(zerosArr).zip(zerosArr).zip(onesArr).count(_\
    \ == 1)\n        val zerosOneZeroZeroOnes = zerosArr.zip(onesArr).zip(onesArr).zip(zerosArr).zip(onesArr).count(_\
    \ == 1)\n        val onesZeroZeroZeroZeroOnes = onesArr.zip(zerosArr).zip(zerosArr).zip(zerosArr).zip(zerosArr).zip(onesArr).count(_\
    \ == 1)\n        val zerosOneZeroZeroOnes = zerosArr.zip(onesArr).zip(onesArr).zip(zerosArr).zip(onesArr).zip(onesArr).count(_\
    \ == 1)\n        val onesZeroZeroZeroZeroOnes = onesArr.zip(zerosArr).zip(zerosArr).zip(zerosArr).zip(zerosArr).zip(onesArr).zip(onesArr).count(_\
    \ == 1)\n        val zerosOneZeroZeroOnes = zerosArr.zip(onesArr).zip(onesArr).zip(zerosArr).zip(onesArr).zip(onesArr).zip(onesArr).count(_\
    \ == 1)\n        val onesZeroZeroZeroZeroOnes = onesArr.zip(zerosArr).zip(zerosArr).zip(zerosArr).zip(zerosArr).zip(zerosArr).zip(onesArr).zip(onesArr).count(_\
    \ == 1)\n", "        val ones = arr.filter(_ % 2 == 0).size\n        val zeros\
    \ = arr.filter(_ % 2 == 1).size\n        val decimals = arr.filter(_ % 10 == 0).size\n\
    \        val decimalsDecimal = arr.filter(_ % 10 == 1).size\n        val decimalsDecimalDecimal\
    \ = arr.filter(_ % 10 == 2).size\n        val decimalsDecimalDecimalDecimal =\
    \ arr.filter(_ % 10 == 3).size\n        val decimalsDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 4).size\n        val decimalsDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 5).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 6).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 7).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 8).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 9).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 10).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 11).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 12).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 13).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 14).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 15).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 16).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 17).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 18).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 19).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 20).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 21).size\n        val decimalsDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArr = arr.filter(x => x == 1).sorted\n        val zerosArr = arr.filter(x\
    \ => x == 0).sorted\n        val onesCount = onesArr.length\n        val zerosCount\
    \ = zerosArr.length\n        val onesSum = onesArr.sum\n        val zerosSum =\
    \ zerosArr.sum\n        val onesDec = onesArr.map(_.toString.toInt).sortWith(_\
    \ < _)\n        val zerosDec = zerosArr.map(_.toString.toInt).sortWith(_ < _)\n\
    \        val onesDec = onesArr.map(_.toString.toInt).sortWith(_ < _)\n       \
    \ val zerosDec = zerosArr.map(_.toString.toInt).sortWith(_ < _)\n        val onesDec\
    \ = onesArr.map(_.toString.toInt).sortWith(_ < _)\n        val zerosDec = zerosArr.map(_.toString.toInt).sortWith(_\
    \ < _)\n        val onesDec = onesArr.map(_.toString.toInt).sortWith(_ < _)\n\
    \        val zerosDec = zerosArr.map(_.toString.toInt).sortWith(_ < _)\n     \
    \   val onesDec = onesArr.map(_.toString.toInt).sortWith(_ < _)\n        val zerosDec\
    \ = zerosArr.map(_.toString.toInt).sortWith(_ < _)\n        val onesDec = onesArr.map(_.toString.toInt).sortWith(_\
    \ < _)\n        val zerosDec = zerosArr.map(_.toString.toInt).sortWith(_ < _)\n\
    \        val onesDec = onesArr.map(_.toString.toInt).sortWith(_ < _)\n       \
    \ val zerosDec = zerosArr.map(_.toString.toInt).sortWith(_ < _)\n        val onesDec\
    \ = onesArr.map(_.toString.toInt).sortWith(_ < _)\n        val zerosDec = zerosArr.map(_.toString.toInt).sortWith(_\
    \ < _)\n        val onesDec = onesArr.map(_.toString.toInt).sortWith(_ < _)\n\
    \        val zerosDec = zerosArr.map(_.toString.toInt).sortWith(_ < _)\n     \
    \   val onesDec = onesAr", "        val ones = arr.filter(x => x == 1).size\n\
    \        val zeros = arr.filter(x => x == 0).size\n        val onesDec = arr.map(x\
    \ => math.log10(x)).filter(x => x == 0).map(x => math.pow(10, x)).sum\n      \
    \  val zerosDec = arr.map(x => math.log10(x)).filter(x => x == 1).map(x => math.pow(10,\
    \ x)).sum\n        val onesBin = arr.map(x => math.log10(x)).filter(x => x ==\
    \ 1).map(x => math.pow(10, x)).sum\n        val zerosBin = arr.map(x => math.log10(x)).filter(x\
    \ => x == 0).map(x => math.pow(10, x)).sum\n        val onesBinDec = onesBin -\
    \ onesDec\n        val zerosBinDec = zerosBin - zerosDec\n        val onesBinBin\
    \ = onesBin + zerosBin\n        val zerosBinBin = zerosBin + onesBin\n       \
    \ val onesBinBinDec = onesBinBin - onesBinDec\n        val zerosBinBinDec = zerosBinBin\
    \ - zerosBinDec\n        val onesBinBinBin = onesBinBin + zerosBinBin\n      \
    \  val zerosBinBinBin = zerosBinBin + onesBinBin\n        val onesBinBinBinDec\
    \ = onesBinBinBin - onesBinBinDec\n        val zerosBinBinBinDec = zerosBinBinBin\
    \ - zerosBinBinDec\n        val onesBinBinBinBin = onesBinBinBin + zerosBinBinBin\n\
    \        val zerosBinBinBinBin = zerosBinBinBin + onesBinBinBin\n        val onesBinBinBinBinDec\
    \ = onesBinBinBinBin - onesBinBinBinDec\n        val zerosBinBinBinBinDec = zerosBinBinBinBin\
    \ - zerosBinBinBinDec\n        val onesBinBinBinBinBin = onesBinBinBinBin + zerosBinBinBinBin\n\
    \        val zerosBinBinBinBin = zerosBinBinBin + onesBinBinBinBin\n        val\
    \ onesBinBinBinBinDec = onesBinBinBinBinBin - onesBinBinBinBinDec\n        val\
    \ zerosBinBinBinBinDec = zerosBinBinBinBin - zerosBinBinBinBinDec\n        val\
    \ onesBinBinBinBinBin = onesBinBinBinBin + zerosBinBinBin", "        val ones\
    \ = arr.filter(x => x == 1).length\n        val decs = arr.map(x => math.abs(x\
    \ - math.floor(x)))\n        val sorted = decs.sortBy(x => math.abs(x))\n    \
    \    val sorted = sorted.sortBy(x => math.floor(x))\n        val sorted = sorted.sortBy(x\
    \ => math.abs(x - math.floor(x)))\n        val sorted = sorted.sortBy(x => math.floor(x))\n\
    \        val sorted = sorted.sortBy(x => math.abs(x - math.floor(x)))\n      \
    \  val sorted = sorted.sortBy(x => math.floor(x))\n        val sorted = sorted.sortBy(x\
    \ => math.abs(x - math.floor(x)))\n        val sorted = sorted.sortBy(x => math.floor(x))\n\
    \        val sorted = sorted.sortBy(x => math.abs(x - math.floor(x)))\n      \
    \  val sorted = sorted.sortBy(x => math.floor(x))\n        val sorted = sorted.sortBy(x\
    \ => math.abs(x - math.floor(x)))\n        val sorted = sorted.sortBy(x => math.floor(x))\n\
    \        val sorted = sorted.sortBy(x => math.abs(x - math.floor(x)))\n      \
    \  val sorted = sorted.sortBy(x => math.floor(x))\n        val sorted = sorted.sortBy(x\
    \ => math.abs(x - math.floor(x)))\n        val sorted = sorted.sortBy(x => math.floor(x))\n\
    \        val sorted = sorted.sortBy(x => math.abs(x - math.floor(x)))\n      \
    \  val sorted = sorted.sortBy(x => math.floor(x))\n        val sorted = sorted.sortBy(x\
    \ => math.abs(x - math.floor(x)))\n        val sorted = sorted.sortBy(x => math.floor(x))\n\
    \        val sorted = sorted.sortBy(x => math.abs(x - math.floor(x)))\n      \
    \  val sorted = sorted.sortBy(x => math.floor(x))\n        val sorted = sorted.sortBy(x\
    \ => math.abs(x - math.floor(x)))\n        val sorted = sorted.sortBy(x => math.floor(x))\n\
    \        val sorted = sorted.sortBy(x => math.abs(x - math.floor(x)))\n      \
    \  val sorted = sorted.sortBy(x => math.floor(x))\n        val sorted = sorted.sortBy(x\
    \ => math.abs(x - math.floor(x)))\n        val sorted = sorted.sortBy(x => math.floor(x))\n\
    \        val sorted = sorted.sortBy(x => math.abs(x - math.floor(x)))\n      \
    \  val sorted = sorted.sortBy(x => math.floor(x))\n        val sorted = sorted.sortBy(x\
    \ => math.abs(x - math.floor(x)))\n        val sorted = sorted.", "        val\
    \ ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val\
    \ onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_ == 0)\n\
    \        val onesDecimal = onesCount / arr.length\n        val zerosDecimal =\
    \ zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimal", "        val ones = arr.count(_\
    \ == 1)\n        val decimals = arr.count(_ > 0)\n        val decimalsArr = arr.map(x\
    \ => math.pow(2,x)).toArray\n        val decimalsArr = decimalsArr.sortBy(x =>\
    \ x)\n        val decimalsArr = decimalsArr.map(x => math.pow(2,x)).toArray\n\
    \        val decimalsArr = decimalsArr.sortBy(x => x)\n        val decimalsArr\
    \ = decimalsArr.map(x => math.pow(2,x)).toArray\n        val decimalsArr = decimalsArr.sortBy(x\
    \ => x)\n        val decimalsArr = decimalsArr.map(x => math.pow(2,x)).toArray\n\
    \        val decimalsArr = decimalsArr.sortBy(x => x)\n        val decimalsArr\
    \ = decimalsArr.map(x => math.pow(2,x)).toArray\n        val decimalsArr = decimalsArr.sortBy(x\
    \ => x)\n        val decimalsArr = decimalsArr.map(x => math.pow(2,x)).toArray\n\
    \        val decimalsArr = decimalsArr.sortBy(x => x)\n        val decimalsArr\
    \ = decimalsArr.map(x => math.pow(2,x)).toArray\n        val decimalsArr = decimalsArr.sortBy(x\
    \ => x)\n        val decimalsArr = decimalsArr.map(x => math.pow(2,x)).toArray\n\
    \        val decimalsArr = decimalsArr.sortBy(x => x)\n        val decimalsArr\
    \ = decimalsArr.map(x => math.pow(2,x)).toArray\n        val decimalsArr = decimalsArr.sortBy(x\
    \ => x)\n        val decimalsArr = decimalsArr.map(x => math.pow(2,x)).toArray\n\
    \        val decimalsArr = decimalsArr.sortBy(x => x)\n        val decimalsArr\
    \ = decimalsArr.map(x => math.pow(2,x)).toArray\n        val decimalsArr = decimalsArr.sortBy(x\
    \ => x)\n        val decimalsArr = decimalsArr.map(x => math.pow(2,x)).toArray\n\
    \        val decimalsArr = decimalsArr.sortBy(x => x)\n        val decimalsArr\
    \ = decimalsArr.map(x => math.pow(2,x)).toArray\n        val decimalsArr = decimalsArr.sortBy(x\
    \ => x)\n        val decimalsArr = decimalsArr.map(x => math.pow(2,x)).toArray\n\
    \        val decimalsArr = decimal", "        val ones = arr.map(x => if (x ==\
    \ 1) 1 else 0)\n        val twos = arr.map(x => if (x == 2) 2 else 0)\n      \
    \  val threes = arr.map(x => if (x == 3) 3 else 0)\n        val fours = arr.map(x\
    \ => if (x == 4) 4 else 0)\n        val fives = arr.map(x => if (x == 5) 5 else\
    \ 0)\n        val sixes = arr.map(x => if (x == 6) 6 else 0)\n        val sevens\
    \ = arr.map(x => if (x == 7) 7 else 0)\n        val eights = arr.map(x => if (x\
    \ == 8) 8 else 0)\n        val nines = arr.map(x => if (x == 9) 9 else 0)\n  \
    \      val tens = arr.map(x => if (x == 10) 10 else 0)\n        val hundreds =\
    \ arr.map(x => if (x == 11) 11 else 0)\n        val thousands = arr.map(x => if\
    \ (x == 100) 100 else 0)\n        val ten_thousands = arr.map(x => if (x == 1000)\
    \ 1000 else 0)\n        val hundred_thousands = arr.map(x => if (x == 10000) 10000\
    \ else 0)\n        val millions = arr.map(x => if (x == 1000000) 1000000 else\
    \ 0)\n        val billions = arr.map(x => if (x == 1000000000) 1000000000 else\
    \ 0)\n        val trillions = arr.map(x => if (x == 1000000000000) 1000000000000\
    \ else 0)\n        val quadrillions = arr.map(x => if (x == 1000000000000000)\
    \ 1000000000000000 else 0)\n        val quintillions = arr.map(x => if (x == 1000000000000000000)\
    \ 1000000000000000000 else 0)\n        val thousand_thousands = arr.map(x => if\
    \ (x == 10000000000000000000) 10000000000000000000 else 0)\n        val million_millions\
    \ = arr.map(x => if (x == 1000000000000000000000) 100000000000000000000000 else\
    \ 0)\n        val billion_billions = arr.map(x => if (x == 1000000000000000000000000)\
    \ 10000000000000000000000000 else 0)\n        val trillion_trillions = arr.map(x\
    \ => if (x == 1000000000000000000000000000) 1000000000000000000000000000 else\
    \ 0)\n        val quadrillion_quadrillions = arr.map(x => if (x == 1000000000000000000000000000000)\
    \ 10000000000000000000000000000000 else 0)\n        val quintillion_quintillions\
    \ = arr.map(x => if (x == 1000000000000000000000000000000000) 1000000000000000000000000000000000\
    \ else 0)\n        val thousand_millions = arr.map(x => if (x == 1000000000000000000000000000000000)\
    \ 1000000000000000000000000000000000 else ", "        val ones = arr.count(_ ==\
    \ 1)\n        val zeros = arr.count(_ == 0)\n        val onesArr = arr.filter(x\
    \ => x == 1).sorted\n        val zerosArr = arr.filter(x => x == 0).sorted\n \
    \       val onesCount = onesArr.length\n        val zerosCount = zerosArr.length\n\
    \        val onesSum = onesArr.sum\n        val zerosSum = zerosArr.sum\n    \
    \    val onesSumDecimal = onesSum / onesCount\n        val zerosSumDecimal = zerosSum\
    \ / zerosCount\n        val onesSumDecimalDecimal = onesSumDecimal / onesCount\n\
    \        val zerosSumDecimalDecimal = zerosSumDecimal / zerosCount\n        val\
    \ onesSumDecimalDecimalDecimal = onesSumDecimalDecimal / onesCount\n        val\
    \ zerosSumDecimalDecimalDecimal = zerosSumDecimalDecimal / zerosCount\n      \
    \  val onesSumDecimalDecimalDecimalDecimal = onesSumDecimalDecimalDecimal / onesCount\n\
    \        val zerosSumDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimal\
    \ / zerosCount\n        val onesSumDecimalDecimalDecimalDecimalDecimal = onesSumDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosSumDecimalDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesSumDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesSumDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosSumDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosSumDecimalDecimalDecimalDecimalDecimal / zerosCount\n        val onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n   \
    \     val zerosSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimalDecimal",
  "        val ones = arr.map(x => if (x == 1) 1 else 0)\n        val twos = arr.map(x\
    \ => if (x == 2) 2 else 0)\n        val threes = arr.map(x => if (x == 3) 3 else\
    \ 0)\n        val fours = arr.map(x => if (x == 4) 4 else 0)\n        val fives\
    \ = arr.map(x => if (x == 5) 5 else 0)\n        val sixes = arr.map(x => if (x\
    \ == 6) 6 else 0)\n        val sevens = arr.map(x => if (x == 7) 7 else 0)\n \
    \       val eights = arr.map(x => if (x == 8) 8 else 0)\n        val nines = arr.map(x\
    \ => if (x == 9) 9 else 0)\n        val tens = arr.map(x => if (x == 10) 10 else\
    \ 0)\n        val hundreds = arr.map(x => if (x == 11) 11 else 0)\n        val\
    \ thousands = arr.map(x => if (x == 100) 100 else 0)\n        val ten_thousands\
    \ = arr.map(x => if (x == 1000) 1000 else 0)\n        val hundred_thousands =\
    \ arr.map(x => if (x == 10000) 10000 else 0)\n        val millions = arr.map(x\
    \ => if (x == 1000000) 1000000 else 0)\n        val billions = arr.map(x => if\
    \ (x == 1000000000) 1000000000 else 0)\n        val trillions = arr.map(x => if\
    \ (x == 1000000000000) 1000000000000 else 0)\n        val quadrillions = arr.map(x\
    \ => if (x == 1000000000000000) 1000000000000000 else 0)\n        val quintillions\
    \ = arr.map(x => if (x == 1000000000000000000) 1000000000000000000 else 0)\n \
    \       val ones_count = ones.size\n        val twos_count = twos.size\n     \
    \   val threes_count = threes.size\n        val fours_count = fours.size\n   \
    \     val fives_count = fives.size\n        val sixes_count = sixes.size\n   \
    \     val sevens_count = sevens.size\n        val eights_count = eights.size\n\
    \        val nines_count = nines.size\n        val tens_count = tens.size\n  \
    \      val hundreds_count = hundreds.size\n        val thousands_count = thousands.size\n\
    \        val ten_thousands_count = ten_thousands.size\n        val hundred_thousands_count\
    \ = hundred_thousands.size\n        val millions_count = millions.size\n     \
    \   val billions_count = billions.size\n        val trillions_count = trillions.size\n\
    \        val quadrilli", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val onesDec = ones / arr.length\n        val zerosDec\
    \ = zeros / arr.length\n        val onesBin = ones.toBinaryString\n        val\
    \ zerosBin = zeros.toBinaryString\n        val onesBinLen = onesBin.length\n \
    \       val zerosBinLen = zerosBin.length\n        val onesBinArray = onesBin.toArray\n\
    \        val zerosBinArray = zerosBin.toArray\n        val onesBinArrayLen = onesBinArray.length\n\
    \        val zerosBinArrayLen = zerosBinArray.length\n        val onesBinArrayCopy\
    \ = onesBinArray.clone()\n        val zerosBinArrayCopy = zerosBinArray.clone()\n\
    \        val onesBinArrayCopyLen = onesBinArrayCopy.length\n        val zerosBinArrayCopyLen\
    \ = zerosBinArrayCopy.length\n        val onesBinArrayCopyCopy = onesBinArrayCopy.clone()\n\
    \        val zerosBinArrayCopyCopy = zerosBinArrayCopy.clone()\n        val onesBinArrayCopyCopyLen\
    \ = onesBinArrayCopyCopy.length\n        val zerosBinArrayCopyCopyLen = zerosBinArrayCopyCopy.length\n\
    \        val onesBinArrayCopyCopyCopy = onesBinArrayCopyCopy.clone()\n       \
    \ val zerosBinArrayCopyCopy = zerosBinArrayCopyCopy.clone()\n        val onesBinArrayCopyCopyLen\
    \ = onesBinArrayCopyCopy.length\n        val zerosBinArrayCopyCopyLen = zerosBinArrayCopyCopy.length\n\
    \        val onesBinArrayCopyCopyCopy = onesBinArrayCopyCopy.clone()\n       \
    \ val zerosBinArrayCopyCopy = zerosBinArrayCopyCopy.clone()\n        val onesBinArrayCopyCopyLen\
    \ = onesBinArrayCopyCopy.length\n        val zerosBinArrayCopyCopyLen = zerosBinArrayCopyCopy.length\n\
    \        val onesBinArrayCopyCopyCopy = onesBinArrayCopyCopy.clone()\n       \
    \ val zerosBinArrayCopyCopy = zerosBinArrayCopyCopy.clone()\n        val onesBinArrayCopyCopyLen\
    \ = onesBinArrayCopyCopy.length\n        val zerosBinArrayCopyCopyLen = zerosBinArrayCopyCopy.length\n\
    \        val onesBinArrayCopyCopyCopy = onesBinArrayCopyCopy.clone()\n       \
    \ val zerosBinArrayCopyCopy = zerosBinArrayCopyCopy.clone()\n        val onesBinArrayCopyCopyLen\
    \ = onesBin", "        val ones = arr.count(_ == 1)\n        val twos = arr.count(_\
    \ == 2)\n        val threes = arr.count(_ == 3)\n        val fours = arr.count(_\
    \ == 4)\n        val fives = arr.count(_ == 5)\n        val sixes = arr.count(_\
    \ == 6)\n        val sevens = arr.count(_ == 7)\n        val eights = arr.count(_\
    \ == 8)\n        val nines = arr.count(_ == 9)\n        val tens = arr.count(_\
    \ == 10)\n        val hundreds = arr.count(_ == 100)\n        val thousands =\
    \ arr.count(_ == 1000)\n        val millions = arr.count(_ == 1000000)\n     \
    \   val billions = arr.count(_ == 1000000000)\n        val trillions = arr.count(_\
    \ == 1000000000000)\n        val quadrillions = arr.count(_ == 1000000000000000)\n\
    \        val quintillions = arr.count(_ == 1000000000000000000)\n        val sextillions\
    \ = arr.count(_ == 100000000000000000000)\n        val septillions = arr.count(_\
    \ == 10000000000000000000000)\n        val octillions = arr.count(_ == 1000000000000000000000000)\n\
    \        val nonillions = arr.count(_ == 100000000000000000000000000)\n      \
    \  val decillions = arr.count(_ == 10000000000000000000000000000)\n        val\
    \ undecillions = arr.count(_ == 1000000000000000000000000000000)\n        val\
    \ decillions = arr.count(_ == 100000000000000000000000000000000)\n        val\
    \ undecillions = arr.count(_ == 1000000000000000000000000000000000L)\n       \
    \ val decillions = arr.count(_ == 100000000000000000000000000000000L)\n      \
    \  val undecillions = arr.count(_ == 1000000000000000000000000000000000L)\n  \
    \      val decillions = arr.count(_ == 100000000000000000000000000000000L)\n \
    \       val undecillions = arr.count(_ == 1000000000000000000000000000000000L)\n\
    \        val decillions = arr.count(_ == 100000000000000000000000000000000L)\n\
    \        val undecillions = arr.count(_ == 1000000000000000000000000000000000L)\n\
    \        val decillions = arr.count(_ == 100000000000000000000000000000000L)\n\
    \        val undecillions = arr.count(_ == 1000000000000000000000000000000000L)\n\
    \        val decillions = arr.count(_ == 100000000000000000000000000000000L)\n\
    \        val undecillions = arr.count(_ == 1000000000000000000000000000000000L)\n\
    \        val decillions = arr.count(_ == 100000000000000000000000000000000L)\n\
    \        val undecillions = arr.", "        val ones = arr.filter(x => x % 2 ==\
    \ 0).length\n        val twos = arr.filter(x => x % 2 == 1).length\n        val\
    \ threes = arr.filter(x => x % 3 == 0).length\n        val fours = arr.filter(x\
    \ => x % 4 == 0).length\n        val fives = arr.filter(x => x % 5 == 0).length\n\
    \        val sixes = arr.filter(x => x % 6 == 0).length\n        val sevens =\
    \ arr.filter(x => x % 7 == 0).length\n        val eights = arr.filter(x => x %\
    \ 8 == 0).length\n        val nines = arr.filter(x => x % 9 == 0).length\n   \
    \     val tens = arr.filter(x => x % 10 == 0).length\n        val hundreds = arr.filter(x\
    \ => x % 100 == 0).length\n        val thousands = arr.filter(x => x % 1000 ==\
    \ 0).length\n        val ten_thousands = arr.filter(x => x % 10000 == 0).length\n\
    \        val hundred_thousands = arr.filter(x => x % 100000 == 0).length\n   \
    \     val millions = arr.filter(x => x % 1000000 == 0).length\n        val billions\
    \ = arr.filter(x => x % 10000000 == 0).length\n        val trillions = arr.filter(x\
    \ => x % 100000000 == 0).length\n        val quadrillions = arr.filter(x => x\
    \ % 1000000000 == 0).length\n        val quintillions = arr.filter(x => x % 10000000000\
    \ == 0).length\n        val sextillions = arr.filter(x => x % 1000000000000 ==\
    \ 0).length\n        val septillions = arr.filter(x => x % 10000000000000 == 0).length\n\
    \        val octillions = arr.filter(x => x % 100000000000000 == 0).length\n \
    \       val nonillions = arr.filter(x => x % 1000000000000000 == 0).length\n \
    \       val decillions = arr.filter(x => x % 10000000000000000 == 0).length\n\
    \        val undecillions = arr.filter(x => x % 100000000000000000 == 0).length\n\
    \        val decillion_and_more = arr.filter(x => x % 1000000000000000000 == 0).length\n\
    \        val undecillion_and_more = arr.filter(x => x % 10000000000000000000 ==\
    \ 0).length\n        val decillion_and_more_and_more = arr.filter(x => x % 100000000000000000000\
    \ == 0).length\n        val undecillion_and_more_and_more = arr.filter(x => x\
    \ % 1000000000000000000000", "        val ones = arr.filter(x => x == 1).length\n\
    \        val decs = arr.filter(x => x == 0).map(_.toString.toInt).sortBy(_.toString.toInt).reverse\n\
    \        val result = decs.zip(ones).sortBy(_._1).reverse.map(x => x._2)\n   \
    \     result.map(x => x + ones)", "        val ones = arr.count(_ == 1)\n    \
    \    val zeros = arr.count(_ == 0)\n        val onesArray = arr.map(x => if (x\
    \ == 1) 1 else 0)\n        val zerosArray = arr.map(x => if (x == 0) 0 else 1)\n\
    \        val onesArraySorted = onesArray.sortBy(x => x)\n        val zerosArraySorted\
    \ = zerosArray.sortBy(x => x)\n        val onesArraySortedWithZeros = onesArraySorted.zip(zerosArraySorted)\n\
    \        val zerosArraySortedWithOnes = zerosArraySorted.zip(onesArraySorted)\n\
    \        val onesArraySortedWithOnes = onesArraySortedWithZeros.zip(zerosArraySortedWithOnes)\n\
    \        val zerosArraySortedWithZeros = zerosArraySortedWithOnes.zip(onesArraySortedWithZeros)\n\
    \        val sortedArray = onesArraySortedWithZeros.toList ++ zerosArraySortedWithOnes.toList\
    \ ++ onesArraySortedWithOnes.toList ++ zerosArraySortedWithZeros.toList\n    \
    \    sortedArray", "        val ones = arr.map(x => if (x == 1) 1 else 0)\n  \
    \      val zeros = arr.map(x => if (x == 0) 0 else 1)\n        val onesCount =\
    \ ones.toSet.size\n        val zerosCount = zeros.toSet.size\n        val onesZeros\
    \ = ones.toSet.intersect(zeros.toSet)\n        val onesZeroCount = onesZeros.size\n\
    \        val onesZeroSum = onesZeros.foldLeft(0)(_ + _)\n        val onesZeroAvg\
    \ = (onesZeroSum / onesZeroCount)\n        val onesZeroMax = onesZeros.max\n \
    \       val onesZeroMin = onesZeros.min\n        val zerosCount = zeros.toSet.size\n\
    \        val zerosSum = zeros.foldLeft(0)(_ + _)\n        val zerosAvg = (zerosSum\
    \ / zerosCount)\n        val zerosMax = zeros.max\n        val zerosMin = zeros.min\n\
    \        val onesCount = ones.toSet.size\n        val onesSum = ones.foldLeft(0)(_\
    \ + _)\n        val onesAvg = (onesSum / onesCount)\n        val onesMax = ones.max\n\
    \        val onesMin = ones.min\n        val onesZeroCount = onesZeros.size\n\
    \        val onesZeroSum = onesZeros.foldLeft(0)(_ + _)\n        val onesZeroAvg\
    \ = (onesZeroSum / onesZeroCount)\n        val onesZeroMax = onesZeros.max\n \
    \       val onesZeroMin = onesZeros.min\n        val zerosCount = zeros.toSet.size\n\
    \        val zerosSum = zeros.foldLeft(0)(_ + _)\n        val zerosAvg = (zerosSum\
    \ / zerosCount)\n        val zerosMax = zeros.max\n        val zerosMin = zeros.min\n\
    \        val onesCount = ones.toSet.size\n        val onesSum = ones.foldLeft(0)(_\
    \ + _)\n        val onesAvg = (onesSum / onesCount)\n        val onesMax = ones.max\n\
    \        val onesMin = ones.min\n        val onesZeroCount = onesZeros.size\n\
    \        val onesZeroSum = onesZeros.foldLeft(0)(_ + _)\n        val onesZeroAvg\
    \ = (onesZeroSum / onesZero"]
stop_tokens:
- "\n    }\n"
