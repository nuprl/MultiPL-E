name: HumanEval_116_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this Kata, you have to sort an array of non-negative integers according\
  \ to\n    // number of ones in their binary representation in ascending order.\n\
  \    // For similar number of ones, sort based on decimal value.\n    // It must\
  \ be implemented like this:\n    // >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3,\
  \ 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n \
  \   // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    def sortArray(arr :\
  \ List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long](1l.toLong,\
  \ 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
  \ 4l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](-2l.toLong,\
  \ -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong))).equals((List[Long](-4l.toLong,\
  \ -2l.toLong, -6l.toLong, -5l.toLong, -3l.toLong))));\n    assert(sortArray((List[Long](1l.toLong,\
  \ 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](2l.toLong, 5l.toLong, 77l.toLong, 4l.toLong, 5l.toLong,\
  \ 3l.toLong, 5l.toLong, 7l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 4l.toLong, 4l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
  \ 7l.toLong, 77l.toLong))));\n    assert(sortArray((List[Long](3l.toLong, 6l.toLong,\
  \ 44l.toLong, 12l.toLong, 32l.toLong, 5l.toLong))).equals((List[Long](32l.toLong,\
  \ 3l.toLong, 5l.toLong, 6l.toLong, 12l.toLong, 44l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    }\n\n}\n"
completions: ["        val ones = arr.count(_ == 1)\n        val twos = arr.count(_\
    \ == 2)\n        val threes = arr.count(_ == 3)\n        val fours = arr.count(_\
    \ == 4)\n        val fives = arr.count(_ == 5)\n        val sixes = arr.count(_\
    \ == 6)\n        val sevens = arr.count(_ == 7)\n        val eights = arr.count(_\
    \ == 8)\n        val nines = arr.count(_ == 9)\n        val tens = arr.count(_\
    \ == 10)\n        val hundreds = arr.count(_ == 100)\n        val thousands =\
    \ arr.count(_ == 1000)\n        val millions = arr.count(_ == 1000000)\n     \
    \   val billions = arr.count(_ == 1000000000)\n        val trillions = arr.count(_\
    \ == 1000000000000)\n        val quadrillions = arr.count(_ == 1000000000000000)\n\
    \        val quintillions = arr.count(_ == 1000000000000000000)\n        val sextillions\
    \ = arr.count(_ == 10000000000000000000000)\n        val septillions = arr.count(_\
    \ == 1000000000000000000000000)\n        val octillions = arr.count(_ == 1000000000000000000000000000)\n\
    \        val nonillions = arr.count(_ == 10000000000000000000000000000000)\n \
    \       val decillions = arr.count(_ == 1000000000000000000000000000000000)\n\
    \        val undecillions = arr.count(_ == 100000000000000000000000000000000)\n\
    \        val decillions = arr.count(_ == 10000000000000000000000000000)\n    \
    \    val undecillions = arr.count(_ == 1000000000000000000000000000)\n       \
    \ val decillions = arr.count(_ == 100000000000000000000)\n        val undecillions\
    \ = arr.count(_ == 1000000000000000000)\n        val decillions = arr.count(_\
    \ == 1000000000000)\n        val undecillions = arr.count(_ == 100000000000)\n\
    \        val decillions = arr.count(_ == 100000000)\n        val undecillions\
    \ = arr.count(_ == 1000000000)\n        val decillions = arr.count(_ == 1000000)\n\
    \        val undecillions = arr.count(_ == 10000000)\n        val decillions =\
    \ arr.count(_ == 100000)\n        val undecillions = arr.count(_ == 100000)\n\
    \        val decillions = arr.count(_ == 10000)\n        val undecillions = arr.count(_\
    \ == 10000)\n        val decillions = arr.count(_ == 1000)\n        val undecillions\
    \ = ", "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_\
    \ > 1)\n        val onesArr = arr.map(x => if (x == 1) 1 else 0)\n        val\
    \ decimalsArr = arr.map(x => if (x > 1) x / 2 else 0)\n        val sortedArr =\
    \ onesArr.zip(decimalsArr).sortBy(_._1).map(x => x._2)\n        sortedArr.map(x\
    \ => if (x == 0) x else x + ones)", "        val ones = arr.filter(x => x % 2\
    \ == 0).length\n        val twos = arr.filter(x => x % 2 == 1).length\n      \
    \  val threes = arr.filter(x => x % 3 == 0).length\n        val fours = arr.filter(x\
    \ => x % 4 == 0).length\n        val fives = arr.filter(x => x % 5 == 0).length\n\
    \        val sixes = arr.filter(x => x % 6 == 0).length\n        val sevens =\
    \ arr.filter(x => x % 7 == 0).length\n        val eights = arr.filter(x => x %\
    \ 8 == 0).length\n        val nines = arr.filter(x => x % 9 == 0).length\n   \
    \     val tens = arr.filter(x => x % 10 == 0).length\n        val hundreds = arr.filter(x\
    \ => x % 100 == 0).length\n        val thousands = arr.filter(x => x % 1000 ==\
    \ 0).length\n        val millions = arr.filter(x => x % 1000000 == 0).length\n\
    \        val billions = arr.filter(x => x % 1000000000 == 0).length\n        val\
    \ trillions = arr.filter(x => x % 1000000000000 == 0).length\n        val quadrillions\
    \ = arr.filter(x => x % 1000000000000000 == 0).length\n        val quintillions\
    \ = arr.filter(x => x % 1000000000000000000 == 0).length\n        val onesAndZeros\
    \ = arr.filter(x => x % 1 == 0 && x != 0).length\n        val onesAndOnes = arr.filter(x\
    \ => x % 1 == 1 && x != 0).length\n        val twosAndZeros = arr.filter(x =>\
    \ x % 2 == 0 && x != 0).length\n        val twosAndOnes = arr.filter(x => x %\
    \ 2 == 1 && x != 0).length\n        val threesAndZeros = arr.filter(x => x % 3\
    \ == 0 && x != 0).length\n        val threesAndOnes = arr.filter(x => x % 3 ==\
    \ 1 && x != 0).length\n        val foursAndZeros = arr.filter(x => x % 4 == 0\
    \ && x != 0).length\n        val foursAndOnes = arr.filter(x => x % 4 == 1 &&\
    \ x != 0).length\n        val fivesAndZeros = arr.filter(x => x % 5 == 0 && x\
    \ != 0).length\n        val fivesAndOnes = arr.filter(x => x % 5 == 1 && x !=\
    \ 0).length\n        val sixesAndZeros = arr.filter(x => x % 6 == 0 && x != 0).length\n\
    \        val sixesAndOnes = arr.filter(x => x % 6 == 1 && x != 0).", "       \
    \ val ones = arr.filter(_ % 2 == 0).length\n        val twos = arr.filter(_ %\
    \ 2 == 1).length\n        val decimals = arr.filter(_ % 10 == 0).length\n    \
    \    val decimalsDecimal = arr.filter(_ % 10 == 1).length\n        val decimalsDecimalDecimal\
    \ = arr.filter(_ % 10 == 2).length\n        val decimalsDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 3).length\n        val decimalsDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 4).length\n        val decimalsDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 5).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 6).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 7).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 8).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 9).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 0).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 1).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 2).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 3).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 4).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 5).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 6).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 7).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 8).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 9).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 0).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 1).length\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % ", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val onesArr = arr.map(x => (x % 2 == 0 ? 1 : 0))\n\
    \        val zerosArr = arr.map(x => (x % 2 == 0 ? 0 : 1))\n        val onesCount\
    \ = onesArr.count(_ == 1)\n        val zerosCount = zerosArr.count(_ == 0)\n \
    \       val onesZeros = onesArr.zip(zerosArr).count(_ == 1)\n        val zerosOnes\
    \ = zerosArr.zip(onesArr).count(_ == 0)\n        val onesZeroOnes = onesArr.zip(zerosArr).zip(onesArr).count(_\
    \ == 1)\n        val zerosOneOnes = zerosArr.zip(onesArr).zip(zerosArr).count(_\
    \ == 1)\n        val onesZeroZeroOnes = onesArr.zip(zerosArr).zip(zerosArr).zip(onesArr).count(_\
    \ == 1)\n        val zerosOneZeroOnes = zerosArr.zip(onesArr).zip(onesArr).zip(zerosArr).count(_\
    \ == 1)\n        val onesZeroZeroZeroOnes = onesArr.zip(zerosArr).zip(zerosArr).zip(zerosArr).zip(onesArr).count(_\
    \ == 1)\n        val zerosOneZeroZeroOnes = zerosArr.zip(onesArr).zip(onesArr).zip(zerosArr).zip(onesArr).count(_\
    \ == 1)\n        val onesZeroZeroZeroZeroOnes = onesArr.zip(zerosArr).zip(zerosArr).zip(zerosArr).zip(zerosArr).zip(onesArr).count(_\
    \ == 1)\n        val zerosOneZeroZeroOnes = zerosArr.zip(onesArr).zip(onesArr).zip(zerosArr).zip(onesArr).zip(onesArr).count(_\
    \ == 1)\n        val onesZeroZeroZeroZeroOnes = onesArr.zip(zerosArr).zip(zerosArr).zip(zerosArr).zip(zerosArr).zip(onesArr).zip(onesArr).count(_\
    \ == 1)\n        val zerosOneZeroZeroOnes = zerosArr.zip(onesArr).zip(onesArr).zip(zerosArr).zip(onesArr).zip(onesArr).zip(onesArr).count(_\
    \ == 1)\n        val onesZeroZeroZeroZeroOnes = onesArr.zip(zerosArr).zip(zerosArr).zip(zerosArr).zip(zerosArr).zip(zerosArr).zip(onesArr).zip(onesArr).count(_\
    \ == 1)\n", "        val ones = arr.filter(_ % 2 == 0).size\n        val zeros\
    \ = arr.filter(_ % 2 == 1).size\n        val decimals = arr.filter(_ % 10 == 0).size\n\
    \        val decimalsDecimal = arr.filter(_ % 10 == 1).size\n        val decimalsDecimalDecimal\
    \ = arr.filter(_ % 10 == 2).size\n        val decimalsDecimalDecimalDecimal =\
    \ arr.filter(_ % 10 == 3).size\n        val decimalsDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 4).size\n        val decimalsDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 5).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 6).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 7).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 8).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 9).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 10).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 11).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 12).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 13).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 14).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 15).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 16).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 17).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 18).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 19).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 20).size\n        val decimalsDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = arr.filter(_ % 10 == 21).size\n        val decimalsDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArr = arr.filter(x => x == 1).sorted\n        val zerosArr = arr.filter(x\
    \ => x == 0).sorted\n        val onesCount = onesArr.length\n        val zerosCount\
    \ = zerosArr.length\n        val onesSum = onesArr.sum\n        val zerosSum =\
    \ zerosArr.sum\n        val onesDec = onesArr.map(_.toString.toInt).sortWith(_\
    \ < _)\n        val zerosDec = zerosArr.map(_.toString.toInt).sortWith(_ < _)\n\
    \        val onesDec = onesArr.map(_.toString.toInt).sortWith(_ < _)\n       \
    \ val zerosDec = zerosArr.map(_.toString.toInt).sortWith(_ < _)\n        val onesDec\
    \ = onesArr.map(_.toString.toInt).sortWith(_ < _)\n        val zerosDec = zerosArr.map(_.toString.toInt).sortWith(_\
    \ < _)\n        val onesDec = onesArr.map(_.toString.toInt).sortWith(_ < _)\n\
    \        val zerosDec = zerosArr.map(_.toString.toInt).sortWith(_ < _)\n     \
    \   val onesDec = onesArr.map(_.toString.toInt).sortWith(_ < _)\n        val zerosDec\
    \ = zerosArr.map(_.toString.toInt).sortWith(_ < _)\n        val onesDec = onesArr.map(_.toString.toInt).sortWith(_\
    \ < _)\n        val zerosDec = zerosArr.map(_.toString.toInt).sortWith(_ < _)\n\
    \        val onesDec = onesArr.map(_.toString.toInt).sortWith(_ < _)\n       \
    \ val zerosDec = zerosArr.map(_.toString.toInt).sortWith(_ < _)\n        val onesDec\
    \ = onesArr.map(_.toString.toInt).sortWith(_ < _)\n        val zerosDec = zerosArr.map(_.toString.toInt).sortWith(_\
    \ < _)\n        val onesDec = onesArr.map(_.toString.toInt).sortWith(_ < _)\n\
    \        val zerosDec = zerosArr.map(_.toString.toInt).sortWith(_ < _)\n     \
    \   val onesDec = onesAr", "        val ones = arr.filter(x => x == 1).size\n\
    \        val zeros = arr.filter(x => x == 0).size\n        val onesDec = arr.map(x\
    \ => math.log10(x)).filter(x => x == 0).map(x => math.pow(10, x)).sum\n      \
    \  val zerosDec = arr.map(x => math.log10(x)).filter(x => x == 1).map(x => math.pow(10,\
    \ x)).sum\n        val onesBin = arr.map(x => math.log10(x)).filter(x => x ==\
    \ 1).map(x => math.pow(10, x)).sum\n        val zerosBin = arr.map(x => math.log10(x)).filter(x\
    \ => x == 0).map(x => math.pow(10, x)).sum\n        val onesBinDec = onesBin -\
    \ onesDec\n        val zerosBinDec = zerosBin - zerosDec\n        val onesBinBin\
    \ = onesBin + zerosBin\n        val zerosBinBin = zerosBin + onesBin\n       \
    \ val onesBinBinDec = onesBinBin - onesBinDec\n        val zerosBinBinDec = zerosBinBin\
    \ - zerosBinDec\n        val onesBinBinBin = onesBinBin + zerosBinBin\n      \
    \  val zerosBinBinBin = zerosBinBin + onesBinBin\n        val onesBinBinBinDec\
    \ = onesBinBinBin - onesBinBinDec\n        val zerosBinBinBinDec = zerosBinBinBin\
    \ - zerosBinBinDec\n        val onesBinBinBinBin = onesBinBinBin + zerosBinBinBin\n\
    \        val zerosBinBinBinBin = zerosBinBinBin + onesBinBinBin\n        val onesBinBinBinBinDec\
    \ = onesBinBinBinBin - onesBinBinBinDec\n        val zerosBinBinBinBinDec = zerosBinBinBinBin\
    \ - zerosBinBinBinDec\n        val onesBinBinBinBinBin = onesBinBinBinBin + zerosBinBinBinBin\n\
    \        val zerosBinBinBinBin = zerosBinBinBin + onesBinBinBinBin\n        val\
    \ onesBinBinBinBinDec = onesBinBinBinBinBin - onesBinBinBinBinDec\n        val\
    \ zerosBinBinBinBinDec = zerosBinBinBinBin - zerosBinBinBinBinDec\n        val\
    \ onesBinBinBinBinBin = onesBinBinBinBin + zerosBinBinBin", "        val ones\
    \ = arr.filter(x => x == 1).length\n        val decs = arr.map(x => math.abs(x\
    \ - math.floor(x)))\n        val sorted = decs.sortBy(x => math.abs(x))\n    \
    \    val sorted = sorted.sortBy(x => math.floor(x))\n        val sorted = sorted.sortBy(x\
    \ => math.abs(x - math.floor(x)))\n        val sorted = sorted.sortBy(x => math.floor(x))\n\
    \        val sorted = sorted.sortBy(x => math.abs(x - math.floor(x)))\n      \
    \  val sorted = sorted.sortBy(x => math.floor(x))\n        val sorted = sorted.sortBy(x\
    \ => math.abs(x - math.floor(x)))\n        val sorted = sorted.sortBy(x => math.floor(x))\n\
    \        val sorted = sorted.sortBy(x => math.abs(x - math.floor(x)))\n      \
    \  val sorted = sorted.sortBy(x => math.floor(x))\n        val sorted = sorted.sortBy(x\
    \ => math.abs(x - math.floor(x)))\n        val sorted = sorted.sortBy(x => math.floor(x))\n\
    \        val sorted = sorted.sortBy(x => math.abs(x - math.floor(x)))\n      \
    \  val sorted = sorted.sortBy(x => math.floor(x))\n        val sorted = sorted.sortBy(x\
    \ => math.abs(x - math.floor(x)))\n        val sorted = sorted.sortBy(x => math.floor(x))\n\
    \        val sorted = sorted.sortBy(x => math.abs(x - math.floor(x)))\n      \
    \  val sorted = sorted.sortBy(x => math.floor(x))\n        val sorted = sorted.sortBy(x\
    \ => math.abs(x - math.floor(x)))\n        val sorted = sorted.sortBy(x => math.floor(x))\n\
    \        val sorted = sorted.sortBy(x => math.abs(x - math.floor(x)))\n      \
    \  val sorted = sorted.sortBy(x => math.floor(x))\n        val sorted = sorted.sortBy(x\
    \ => math.abs(x - math.floor(x)))\n        val sorted = sorted.sortBy(x => math.floor(x))\n\
    \        val sorted = sorted.sortBy(x => math.abs(x - math.floor(x)))\n      \
    \  val sorted = sorted.sortBy(x => math.floor(x))\n        val sorted = sorted.sortBy(x\
    \ => math.abs(x - math.floor(x)))\n        val sorted = sorted.sortBy(x => math.floor(x))\n\
    \        val sorted = sorted.sortBy(x => math.abs(x - math.floor(x)))\n      \
    \  val sorted = sorted.sortBy(x => math.floor(x))\n        val sorted = sorted.sortBy(x\
    \ => math.abs(x - math.floor(x)))\n        val sorted = sorted.", "        val\
    \ ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val\
    \ onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_ == 0)\n\
    \        val onesDecimal = onesCount / arr.length\n        val zerosDecimal =\
    \ zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimal", "        val ones = arr.count(_\
    \ == 1)\n        val decimals = arr.count(_ > 0)\n        val decimalsArr = arr.map(x\
    \ => math.pow(2,x)).toArray\n        val decimalsArr = decimalsArr.sortBy(x =>\
    \ x)\n        val decimalsArr = decimalsArr.map(x => math.pow(2,x)).toArray\n\
    \        val decimalsArr = decimalsArr.sortBy(x => x)\n        val decimalsArr\
    \ = decimalsArr.map(x => math.pow(2,x)).toArray\n        val decimalsArr = decimalsArr.sortBy(x\
    \ => x)\n        val decimalsArr = decimalsArr.map(x => math.pow(2,x)).toArray\n\
    \        val decimalsArr = decimalsArr.sortBy(x => x)\n        val decimalsArr\
    \ = decimalsArr.map(x => math.pow(2,x)).toArray\n        val decimalsArr = decimalsArr.sortBy(x\
    \ => x)\n        val decimalsArr = decimalsArr.map(x => math.pow(2,x)).toArray\n\
    \        val decimalsArr = decimalsArr.sortBy(x => x)\n        val decimalsArr\
    \ = decimalsArr.map(x => math.pow(2,x)).toArray\n        val decimalsArr = decimalsArr.sortBy(x\
    \ => x)\n        val decimalsArr = decimalsArr.map(x => math.pow(2,x)).toArray\n\
    \        val decimalsArr = decimalsArr.sortBy(x => x)\n        val decimalsArr\
    \ = decimalsArr.map(x => math.pow(2,x)).toArray\n        val decimalsArr = decimalsArr.sortBy(x\
    \ => x)\n        val decimalsArr = decimalsArr.map(x => math.pow(2,x)).toArray\n\
    \        val decimalsArr = decimalsArr.sortBy(x => x)\n        val decimalsArr\
    \ = decimalsArr.map(x => math.pow(2,x)).toArray\n        val decimalsArr = decimalsArr.sortBy(x\
    \ => x)\n        val decimalsArr = decimalsArr.map(x => math.pow(2,x)).toArray\n\
    \        val decimalsArr = decimalsArr.sortBy(x => x)\n        val decimalsArr\
    \ = decimalsArr.map(x => math.pow(2,x)).toArray\n        val decimalsArr = decimalsArr.sortBy(x\
    \ => x)\n        val decimalsArr = decimalsArr.map(x => math.pow(2,x)).toArray\n\
    \        val decimalsArr = decimal", "        val ones = arr.map(x => if (x ==\
    \ 1) 1 else 0)\n        val twos = arr.map(x => if (x == 2) 2 else 0)\n      \
    \  val threes = arr.map(x => if (x == 3) 3 else 0)\n        val fours = arr.map(x\
    \ => if (x == 4) 4 else 0)\n        val fives = arr.map(x => if (x == 5) 5 else\
    \ 0)\n        val sixes = arr.map(x => if (x == 6) 6 else 0)\n        val sevens\
    \ = arr.map(x => if (x == 7) 7 else 0)\n        val eights = arr.map(x => if (x\
    \ == 8) 8 else 0)\n        val nines = arr.map(x => if (x == 9) 9 else 0)\n  \
    \      val tens = arr.map(x => if (x == 10) 10 else 0)\n        val hundreds =\
    \ arr.map(x => if (x == 11) 11 else 0)\n        val thousands = arr.map(x => if\
    \ (x == 100) 100 else 0)\n        val ten_thousands = arr.map(x => if (x == 1000)\
    \ 1000 else 0)\n        val hundred_thousands = arr.map(x => if (x == 10000) 10000\
    \ else 0)\n        val millions = arr.map(x => if (x == 1000000) 1000000 else\
    \ 0)\n        val billions = arr.map(x => if (x == 1000000000) 1000000000 else\
    \ 0)\n        val trillions = arr.map(x => if (x == 1000000000000) 1000000000000\
    \ else 0)\n        val quadrillions = arr.map(x => if (x == 1000000000000000)\
    \ 1000000000000000 else 0)\n        val quintillions = arr.map(x => if (x == 1000000000000000000)\
    \ 1000000000000000000 else 0)\n        val thousand_thousands = arr.map(x => if\
    \ (x == 10000000000000000000) 10000000000000000000 else 0)\n        val million_millions\
    \ = arr.map(x => if (x == 1000000000000000000000) 100000000000000000000000 else\
    \ 0)\n        val billion_billions = arr.map(x => if (x == 1000000000000000000000000)\
    \ 10000000000000000000000000 else 0)\n        val trillion_trillions = arr.map(x\
    \ => if (x == 1000000000000000000000000000) 1000000000000000000000000000 else\
    \ 0)\n        val quadrillion_quadrillions = arr.map(x => if (x == 1000000000000000000000000000000)\
    \ 10000000000000000000000000000000 else 0)\n        val quintillion_quintillions\
    \ = arr.map(x => if (x == 1000000000000000000000000000000000) 1000000000000000000000000000000000\
    \ else 0)\n        val thousand_millions = arr.map(x => if (x == 1000000000000000000000000000000000)\
    \ 1000000000000000000000000000000000 else ", "        val ones = arr.count(_ ==\
    \ 1)\n        val zeros = arr.count(_ == 0)\n        val onesArr = arr.filter(x\
    \ => x == 1).sorted\n        val zerosArr = arr.filter(x => x == 0).sorted\n \
    \       val onesCount = onesArr.length\n        val zerosCount = zerosArr.length\n\
    \        val onesSum = onesArr.sum\n        val zerosSum = zerosArr.sum\n    \
    \    val onesSumDecimal = onesSum / onesCount\n        val zerosSumDecimal = zerosSum\
    \ / zerosCount\n        val onesSumDecimalDecimal = onesSumDecimal / onesCount\n\
    \        val zerosSumDecimalDecimal = zerosSumDecimal / zerosCount\n        val\
    \ onesSumDecimalDecimalDecimal = onesSumDecimalDecimal / onesCount\n        val\
    \ zerosSumDecimalDecimalDecimal = zerosSumDecimalDecimal / zerosCount\n      \
    \  val onesSumDecimalDecimalDecimalDecimal = onesSumDecimalDecimalDecimal / onesCount\n\
    \        val zerosSumDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimal\
    \ / zerosCount\n        val onesSumDecimalDecimalDecimalDecimalDecimal = onesSumDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosSumDecimalDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesSumDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesSumDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosSumDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosSumDecimalDecimalDecimalDecimalDecimal / zerosCount\n        val onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n   \
    \     val zerosSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesSumDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosSumDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimalDecimal",
  "        val ones = arr.map(x => if (x == 1) 1 else 0)\n        val twos = arr.map(x\
    \ => if (x == 2) 2 else 0)\n        val threes = arr.map(x => if (x == 3) 3 else\
    \ 0)\n        val fours = arr.map(x => if (x == 4) 4 else 0)\n        val fives\
    \ = arr.map(x => if (x == 5) 5 else 0)\n        val sixes = arr.map(x => if (x\
    \ == 6) 6 else 0)\n        val sevens = arr.map(x => if (x == 7) 7 else 0)\n \
    \       val eights = arr.map(x => if (x == 8) 8 else 0)\n        val nines = arr.map(x\
    \ => if (x == 9) 9 else 0)\n        val tens = arr.map(x => if (x == 10) 10 else\
    \ 0)\n        val hundreds = arr.map(x => if (x == 11) 11 else 0)\n        val\
    \ thousands = arr.map(x => if (x == 100) 100 else 0)\n        val ten_thousands\
    \ = arr.map(x => if (x == 1000) 1000 else 0)\n        val hundred_thousands =\
    \ arr.map(x => if (x == 10000) 10000 else 0)\n        val millions = arr.map(x\
    \ => if (x == 1000000) 1000000 else 0)\n        val billions = arr.map(x => if\
    \ (x == 1000000000) 1000000000 else 0)\n        val trillions = arr.map(x => if\
    \ (x == 1000000000000) 1000000000000 else 0)\n        val quadrillions = arr.map(x\
    \ => if (x == 1000000000000000) 1000000000000000 else 0)\n        val quintillions\
    \ = arr.map(x => if (x == 1000000000000000000) 1000000000000000000 else 0)\n \
    \       val ones_count = ones.size\n        val twos_count = twos.size\n     \
    \   val threes_count = threes.size\n        val fours_count = fours.size\n   \
    \     val fives_count = fives.size\n        val sixes_count = sixes.size\n   \
    \     val sevens_count = sevens.size\n        val eights_count = eights.size\n\
    \        val nines_count = nines.size\n        val tens_count = tens.size\n  \
    \      val hundreds_count = hundreds.size\n        val thousands_count = thousands.size\n\
    \        val ten_thousands_count = ten_thousands.size\n        val hundred_thousands_count\
    \ = hundred_thousands.size\n        val millions_count = millions.size\n     \
    \   val billions_count = billions.size\n        val trillions_count = trillions.size\n\
    \        val quadrilli", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val onesDec = ones / arr.length\n        val zerosDec\
    \ = zeros / arr.length\n        val onesBin = ones.toBinaryString\n        val\
    \ zerosBin = zeros.toBinaryString\n        val onesBinLen = onesBin.length\n \
    \       val zerosBinLen = zerosBin.length\n        val onesBinArray = onesBin.toArray\n\
    \        val zerosBinArray = zerosBin.toArray\n        val onesBinArrayLen = onesBinArray.length\n\
    \        val zerosBinArrayLen = zerosBinArray.length\n        val onesBinArrayCopy\
    \ = onesBinArray.clone()\n        val zerosBinArrayCopy = zerosBinArray.clone()\n\
    \        val onesBinArrayCopyLen = onesBinArrayCopy.length\n        val zerosBinArrayCopyLen\
    \ = zerosBinArrayCopy.length\n        val onesBinArrayCopyCopy = onesBinArrayCopy.clone()\n\
    \        val zerosBinArrayCopyCopy = zerosBinArrayCopy.clone()\n        val onesBinArrayCopyCopyLen\
    \ = onesBinArrayCopyCopy.length\n        val zerosBinArrayCopyCopyLen = zerosBinArrayCopyCopy.length\n\
    \        val onesBinArrayCopyCopyCopy = onesBinArrayCopyCopy.clone()\n       \
    \ val zerosBinArrayCopyCopy = zerosBinArrayCopyCopy.clone()\n        val onesBinArrayCopyCopyLen\
    \ = onesBinArrayCopyCopy.length\n        val zerosBinArrayCopyCopyLen = zerosBinArrayCopyCopy.length\n\
    \        val onesBinArrayCopyCopyCopy = onesBinArrayCopyCopy.clone()\n       \
    \ val zerosBinArrayCopyCopy = zerosBinArrayCopyCopy.clone()\n        val onesBinArrayCopyCopyLen\
    \ = onesBinArrayCopyCopy.length\n        val zerosBinArrayCopyCopyLen = zerosBinArrayCopyCopy.length\n\
    \        val onesBinArrayCopyCopyCopy = onesBinArrayCopyCopy.clone()\n       \
    \ val zerosBinArrayCopyCopy = zerosBinArrayCopyCopy.clone()\n        val onesBinArrayCopyCopyLen\
    \ = onesBinArrayCopyCopy.length\n        val zerosBinArrayCopyCopyLen = zerosBinArrayCopyCopy.length\n\
    \        val onesBinArrayCopyCopyCopy = onesBinArrayCopyCopy.clone()\n       \
    \ val zerosBinArrayCopyCopy = zerosBinArrayCopyCopy.clone()\n        val onesBinArrayCopyCopyLen\
    \ = onesBin", "        val ones = arr.count(_ == 1)\n        val twos = arr.count(_\
    \ == 2)\n        val threes = arr.count(_ == 3)\n        val fours = arr.count(_\
    \ == 4)\n        val fives = arr.count(_ == 5)\n        val sixes = arr.count(_\
    \ == 6)\n        val sevens = arr.count(_ == 7)\n        val eights = arr.count(_\
    \ == 8)\n        val nines = arr.count(_ == 9)\n        val tens = arr.count(_\
    \ == 10)\n        val hundreds = arr.count(_ == 100)\n        val thousands =\
    \ arr.count(_ == 1000)\n        val millions = arr.count(_ == 1000000)\n     \
    \   val billions = arr.count(_ == 1000000000)\n        val trillions = arr.count(_\
    \ == 1000000000000)\n        val quadrillions = arr.count(_ == 1000000000000000)\n\
    \        val quintillions = arr.count(_ == 1000000000000000000)\n        val sextillions\
    \ = arr.count(_ == 100000000000000000000)\n        val septillions = arr.count(_\
    \ == 10000000000000000000000)\n        val octillions = arr.count(_ == 1000000000000000000000000)\n\
    \        val nonillions = arr.count(_ == 100000000000000000000000000)\n      \
    \  val decillions = arr.count(_ == 10000000000000000000000000000)\n        val\
    \ undecillions = arr.count(_ == 1000000000000000000000000000000)\n        val\
    \ decillions = arr.count(_ == 100000000000000000000000000000000)\n        val\
    \ undecillions = arr.count(_ == 1000000000000000000000000000000000L)\n       \
    \ val decillions = arr.count(_ == 100000000000000000000000000000000L)\n      \
    \  val undecillions = arr.count(_ == 1000000000000000000000000000000000L)\n  \
    \      val decillions = arr.count(_ == 100000000000000000000000000000000L)\n \
    \       val undecillions = arr.count(_ == 1000000000000000000000000000000000L)\n\
    \        val decillions = arr.count(_ == 100000000000000000000000000000000L)\n\
    \        val undecillions = arr.count(_ == 1000000000000000000000000000000000L)\n\
    \        val decillions = arr.count(_ == 100000000000000000000000000000000L)\n\
    \        val undecillions = arr.count(_ == 1000000000000000000000000000000000L)\n\
    \        val decillions = arr.count(_ == 100000000000000000000000000000000L)\n\
    \        val undecillions = arr.count(_ == 1000000000000000000000000000000000L)\n\
    \        val decillions = arr.count(_ == 100000000000000000000000000000000L)\n\
    \        val undecillions = arr.", "        val ones = arr.filter(x => x % 2 ==\
    \ 0).length\n        val twos = arr.filter(x => x % 2 == 1).length\n        val\
    \ threes = arr.filter(x => x % 3 == 0).length\n        val fours = arr.filter(x\
    \ => x % 4 == 0).length\n        val fives = arr.filter(x => x % 5 == 0).length\n\
    \        val sixes = arr.filter(x => x % 6 == 0).length\n        val sevens =\
    \ arr.filter(x => x % 7 == 0).length\n        val eights = arr.filter(x => x %\
    \ 8 == 0).length\n        val nines = arr.filter(x => x % 9 == 0).length\n   \
    \     val tens = arr.filter(x => x % 10 == 0).length\n        val hundreds = arr.filter(x\
    \ => x % 100 == 0).length\n        val thousands = arr.filter(x => x % 1000 ==\
    \ 0).length\n        val ten_thousands = arr.filter(x => x % 10000 == 0).length\n\
    \        val hundred_thousands = arr.filter(x => x % 100000 == 0).length\n   \
    \     val millions = arr.filter(x => x % 1000000 == 0).length\n        val billions\
    \ = arr.filter(x => x % 10000000 == 0).length\n        val trillions = arr.filter(x\
    \ => x % 100000000 == 0).length\n        val quadrillions = arr.filter(x => x\
    \ % 1000000000 == 0).length\n        val quintillions = arr.filter(x => x % 10000000000\
    \ == 0).length\n        val sextillions = arr.filter(x => x % 1000000000000 ==\
    \ 0).length\n        val septillions = arr.filter(x => x % 10000000000000 == 0).length\n\
    \        val octillions = arr.filter(x => x % 100000000000000 == 0).length\n \
    \       val nonillions = arr.filter(x => x % 1000000000000000 == 0).length\n \
    \       val decillions = arr.filter(x => x % 10000000000000000 == 0).length\n\
    \        val undecillions = arr.filter(x => x % 100000000000000000 == 0).length\n\
    \        val decillion_and_more = arr.filter(x => x % 1000000000000000000 == 0).length\n\
    \        val undecillion_and_more = arr.filter(x => x % 10000000000000000000 ==\
    \ 0).length\n        val decillion_and_more_and_more = arr.filter(x => x % 100000000000000000000\
    \ == 0).length\n        val undecillion_and_more_and_more = arr.filter(x => x\
    \ % 1000000000000000000000", "        val ones = arr.filter(x => x == 1).length\n\
    \        val decs = arr.filter(x => x == 0).map(_.toString.toInt).sortBy(_.toString.toInt).reverse\n\
    \        val result = decs.zip(ones).sortBy(_._1).reverse.map(x => x._2)\n   \
    \     result.map(x => x + ones)", "        val ones = arr.count(_ == 1)\n    \
    \    val zeros = arr.count(_ == 0)\n        val onesArray = arr.map(x => if (x\
    \ == 1) 1 else 0)\n        val zerosArray = arr.map(x => if (x == 0) 0 else 1)\n\
    \        val onesArraySorted = onesArray.sortBy(x => x)\n        val zerosArraySorted\
    \ = zerosArray.sortBy(x => x)\n        val onesArraySortedWithZeros = onesArraySorted.zip(zerosArraySorted)\n\
    \        val zerosArraySortedWithOnes = zerosArraySorted.zip(onesArraySorted)\n\
    \        val onesArraySortedWithOnes = onesArraySortedWithZeros.zip(zerosArraySortedWithOnes)\n\
    \        val zerosArraySortedWithZeros = zerosArraySortedWithOnes.zip(onesArraySortedWithZeros)\n\
    \        val sortedArray = onesArraySortedWithZeros.toList ++ zerosArraySortedWithOnes.toList\
    \ ++ onesArraySortedWithOnes.toList ++ zerosArraySortedWithZeros.toList\n    \
    \    sortedArray", "        val ones = arr.map(x => if (x == 1) 1 else 0)\n  \
    \      val zeros = arr.map(x => if (x == 0) 0 else 1)\n        val onesCount =\
    \ ones.toSet.size\n        val zerosCount = zeros.toSet.size\n        val onesZeros\
    \ = ones.toSet.intersect(zeros.toSet)\n        val onesZeroCount = onesZeros.size\n\
    \        val onesZeroSum = onesZeros.foldLeft(0)(_ + _)\n        val onesZeroAvg\
    \ = (onesZeroSum / onesZeroCount)\n        val onesZeroMax = onesZeros.max\n \
    \       val onesZeroMin = onesZeros.min\n        val zerosCount = zeros.toSet.size\n\
    \        val zerosSum = zeros.foldLeft(0)(_ + _)\n        val zerosAvg = (zerosSum\
    \ / zerosCount)\n        val zerosMax = zeros.max\n        val zerosMin = zeros.min\n\
    \        val onesCount = ones.toSet.size\n        val onesSum = ones.foldLeft(0)(_\
    \ + _)\n        val onesAvg = (onesSum / onesCount)\n        val onesMax = ones.max\n\
    \        val onesMin = ones.min\n        val onesZeroCount = onesZeros.size\n\
    \        val onesZeroSum = onesZeros.foldLeft(0)(_ + _)\n        val onesZeroAvg\
    \ = (onesZeroSum / onesZeroCount)\n        val onesZeroMax = onesZeros.max\n \
    \       val onesZeroMin = onesZeros.min\n        val zerosCount = zeros.toSet.size\n\
    \        val zerosSum = zeros.foldLeft(0)(_ + _)\n        val zerosAvg = (zerosSum\
    \ / zerosCount)\n        val zerosMax = zeros.max\n        val zerosMin = zeros.min\n\
    \        val onesCount = ones.toSet.size\n        val onesSum = ones.foldLeft(0)(_\
    \ + _)\n        val onesAvg = (onesSum / onesCount)\n        val onesMax = ones.max\n\
    \        val onesMin = ones.min\n        val onesZeroCount = onesZeros.size\n\
    \        val onesZeroSum = onesZeros.foldLeft(0)(_ + _)\n        val onesZeroAvg\
    \ = (onesZeroSum / onesZero", "        val ones = arr.count(_ == 1)\n        val\
    \ zeros = arr.count(_ == 0)\n        val onesDec = arr.map(_.toString.toInt).sortBy(_.toString.toInt).reverse\n\
    \        val zerosDec = arr.map(_.toString.toInt).sortBy(_.toString.toInt)\n \
    \       val onesBin = arr.map(_.toString.toInt).map(Integer.toBinaryString(_)).mkString(\"\
    \")\n        val zerosBin = arr.map(_.toString.toInt).map(Integer.toBinaryString(_)).mkString(\"\
    \")\n        val onesBinDec = onesBin.map(_.toString.toInt).sortBy(_.toString.toInt).reverse\n\
    \        val zerosBinDec = zerosBin.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesBinBin = onesBin.map(_.toString.toInt).map(Integer.toBinaryString(_)).mkString(\"\
    \")\n        val zerosBinBin = zerosBin.map(_.toString.toInt).map(Integer.toBinaryString(_)).mkString(\"\
    \")\n        val onesBinBinDec = onesBinBin.map(_.toString.toInt).sortBy(_.toString.toInt).reverse\n\
    \        val zerosBinBinDec = zerosBinBin.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesBinBinBin = onesBinBin.map(_.toString.toInt).map(Integer.toBinaryString(_)).mkString(\"\
    \")\n        val zerosBinBinBin = zerosBinBin.map(_.toString.toInt).map(Integer.toBinaryString(_)).mkString(\"\
    \")\n        val onesBinBinBinDec = onesBinBinBin.map(_.toString.toInt).sortBy(_.toString.toInt).reverse\n\
    \        val zerosBinBinBinDec = zerosBinBinBin.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesBinBinBinBin = onesBinBinBin.map(_.toString.toInt).map(Integer.toBinaryString(_)).mkString(\"\
    \")\n        val zerosBinBinBin = zerosBinBin.map(_.toString.toInt).map(Integer.toBinaryString(_)).mkString(\"\
    \")\n        val onesBinBinBinDec = onesBinBinBin.map(_.toString.toInt).sortBy(_.toString.toInt).reverse\n\
    \        val zerosBinBinBinDec = zerosBinBinBin.map(_.to", "        val ones =\
    \ arr.filter(x => x % 2 == 0).length\n        val twos = arr.filter(x => x % 2\
    \ == 1).length\n        val threes = arr.filter(x => x % 3 == 0).length\n    \
    \    val fours = arr.filter(x => x % 4 == 0).length\n        val fives = arr.filter(x\
    \ => x % 5 == 0).length\n        val sixes = arr.filter(x => x % 6 == 0).length\n\
    \        val sevens = arr.filter(x => x % 7 == 0).length\n        val eights =\
    \ arr.filter(x => x % 8 == 0).length\n        val nines = arr.filter(x => x %\
    \ 9 == 0).length\n        val tens = arr.filter(x => x % 10 == 0).length\n   \
    \     val hundreds = arr.filter(x => x % 100 == 0).length\n        val thousands\
    \ = arr.filter(x => x % 1000 == 0).length\n        val millions = arr.filter(x\
    \ => x % 1000000 == 0).length\n        val billions = arr.filter(x => x % 1000000000\
    \ == 0).length\n        val trillions = arr.filter(x => x % 1000000000000 == 0).length\n\
    \        val quadrillions = arr.filter(x => x % 1000000000000000 == 0).length\n\
    \        val quintillions = arr.filter(x => x % 1000000000000000000 == 0).length\n\
    \        val onesAndZeros = arr.filter(x => x % 1 == 0).length\n        val onesAndOnes\
    \ = arr.filter(x => x % 1 == 1).length\n        val twosAndZeros = arr.filter(x\
    \ => x % 2 == 0).length\n        val twosAndOnes = arr.filter(x => x % 2 == 1).length\n\
    \        val threesAndZeros = arr.filter(x => x % 3 == 0).length\n        val\
    \ threesAndOnes = arr.filter(x => x % 3 == 1).length\n        val foursAndZeros\
    \ = arr.filter(x => x % 4 == 0).length\n        val foursAndOnes = arr.filter(x\
    \ => x % 4 == 1).length\n        val fivesAndZeros = arr.filter(x => x % 5 ==\
    \ 0).length\n        val fivesAndOnes = arr.filter(x => x % 5 == 1).length\n \
    \       val sixesAndZeros = arr.filter(x => x % 6 == 0).length\n        val sixesAndOnes\
    \ = arr.filter(x => x % 6 == 1).length\n        val sevensAndZeros = arr.filter(x\
    \ => x % 7 == 0).length\n        val sevensAndOnes = arr.filter(x => x % 7 ==\
    \ 1).", "        val ones = arr.count(x => x == 1)\n        val twos = arr.count(x\
    \ => x == 2)\n        val threes = arr.count(x => x == 3)\n        val fours =\
    \ arr.count(x => x == 4)\n        val fives = arr.count(x => x == 5)\n       \
    \ val sixes = arr.count(x => x == 6)\n        val sevens = arr.count(x => x ==\
    \ 7)\n        val eights = arr.count(x => x == 8)\n        val nines = arr.count(x\
    \ => x == 9)\n        val tens = arr.count(x => x == 10)\n        val hundreds\
    \ = arr.count(x => x == 100)\n        val thousands = arr.count(x => x == 1000)\n\
    \        val millions = arr.count(x => x == 1000000)\n        val billions = arr.count(x\
    \ => x == 1000000000)\n        val trillions = arr.count(x => x == 1000000000000)\n\
    \        val quadrillions = arr.count(x => x == 1000000000000000)\n        val\
    \ quintillions = arr.count(x => x == 1000000000000000000)\n        val onesAndZeroes\
    \ = arr.count(x => x == 1)\n        val onesAndOnes = arr.count(x => x == 1 &&\
    \ x != 0)\n        val onesAndTwos = arr.count(x => x == 1 && x != 0 && x != 1)\n\
    \        val onesAndThrees = arr.count(x => x == 1 && x != 0 && x != 1 && x !=\
    \ 2)\n        val onesAndFours = arr.count(x => x == 1 && x != 0 && x != 1 &&\
    \ x != 2 && x != 3)\n        val onesAndFives = arr.count(x => x == 1 && x !=\
    \ 0 && x != 1 && x != 2 && x != 3 && x != 4)\n        val onesAndSixes = arr.count(x\
    \ => x == 1 && x != 0 && x != 1 && x != 2 && x != 3 && x != 4 && x != 5)\n   \
    \     val onesAndSevens = arr.count(x => x == 1 && x != 0 && x != 1 && x != 2\
    \ && x != 3 && x != 4 && x != 5 && x != 6)\n        val onesAndEights = arr.count(x\
    \ => x == 1 && x != 0 && x != 1 && x != 2 && x != 3 && x != 4 && x != 5 && x !=\
    \ 6 && x != 7)\n        val onesAndNines = arr.count(x => x == 1 && x != 0 &&\
    \ x != 1 && x != 2 && x != 3 && x != 4 && x != 5 && x != 6 && x != 7 && x != 8)\n\
    \        val onesAndTens = arr.count(x => x == 1 && ", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesArr = arr.map(x\
    \ => (x % 2) == 0).sorted\n        val zerosArr = arr.map(x => (x % 2) == 1).sorted\n\
    \        val onesCount = onesArr.length\n        val zerosCount = zerosArr.length\n\
    \        val onesSum = onesArr.foldLeft(0L)(_ + _)\n        val zerosSum = zerosArr.foldLeft(0L)(_\
    \ + _)\n        val onesSumArr = onesArr.map(x => (x - onesSum) / 2)\n       \
    \ val zerosSumArr = zerosArr.map(x => (x - zerosSum) / 2)\n        val onesSumCount\
    \ = onesArr.length\n        val zerosSumCount = zerosArr.length\n        val onesSumArr\
    \ = onesArr.map(x => (x - onesSum) / 2)\n        val zerosSumArr = zerosArr.map(x\
    \ => (x - zerosSum) / 2)\n        val onesSumCount = onesArr.length\n        val\
    \ zerosSumCount = zerosArr.length\n        val onesSumArr = onesArr.map(x => (x\
    \ - onesSum) / 2)\n        val zerosSumArr = zerosArr.map(x => (x - zerosSum)\
    \ / 2)\n        val onesSumCount = onesArr.length\n        val zerosSumCount =\
    \ zerosArr.length\n        val onesSumArr = onesArr.map(x => (x - onesSum) / 2)\n\
    \        val zerosSumArr = zerosArr.map(x => (x - zerosSum) / 2)\n        val\
    \ onesSumCount = onesArr.length\n        val zerosSumCount = zerosArr.length\n\
    \        val onesSumArr = onesArr.map(x => (x - onesSum) / 2)\n        val zerosSumArr\
    \ = zerosArr.map(x => (x - zerosSum) / 2)\n        val onesSumCount = onesArr.length\n\
    \        val zerosSumCount = zerosArr.length\n        val onesSumArr = onesArr.map(x\
    \ => (x - onesSum) / 2)\n        val zerosSumArr = zerosArr.map(x => (x - zerosSum)\
    \ / 2)\n        val onesSumCount = onesArr.length\n        val zerosSumCount =\
    \ zerosArr.length\n        val onesSumArr = onesArr.map(x => (x - onesSum) / 2)\n\
    \        val zerosSumArr = zerosArr.map(", "        val ones = arr.count(_ ==\
    \ 1)\n        val zeros = arr.count(_ == 0)\n        val onesDec = ones / arr.length\n\
    \        val zerosDec = zeros / arr.length\n        val onesBin = ones % arr.length\n\
    \        val zerosBin = zeros % arr.length\n        val onesBins = onesBin.toString.reverse\n\
    \        val zerosBins = zerosBin.toString.reverse\n        val onesBinsArr =\
    \ onesBins.toList\n        val zerosBinsArr = zerosBins.toList\n        val onesBinsArr2\
    \ = onesBinsArr.zip(zerosBinsArr).map { case (a, b) => a -> b }.toMap\n      \
    \  val zerosBinsArr2 = zerosBinsArr.zip(onesBinsArr).map { case (a, b) => a ->\
    \ b }.toMap\n        val onesBinsArr3 = onesBinsArr2.toSeq.sortBy(_._1).map(x\
    \ => x._2)\n        val zerosBinsArr3 = zerosBinsArr2.toSeq.sortBy(_._1).map(x\
    \ => x._2)\n        val onesBinsArr4 = onesBinsArr3.zip(zerosBinsArr3).map { case\
    \ (a, b) => a -> b }.toMap\n        val zerosBinsArr4 = zerosBinsArr3.zip(onesBinsArr3).map\
    \ { case (a, b) => a -> b }.toMap\n        val onesBinsArr5 = onesBinsArr4.zip(zerosBinsArr4).map\
    \ { case (a, b) => a -> b }.toMap\n        val zerosBinsArr5 = zerosBinsArr4.zip(onesBinsArr4).map\
    \ { case (a, b) => a -> b }.toMap\n        val onesBinsArr6 = onesBinsArr5.zip(zerosBinsArr5).map\
    \ { case (a, b) => a -> b }.toMap\n        val zerosBinsArr6 = zerosBinsArr5.zip(onesBinsArr5).map\
    \ { case (a, b) => a -> b }.toMap\n        val onesBinsArr7 = onesBinsArr6.zip(zerosBinsArr6).map\
    \ { case (a, b) => a -> b }.toMap\n        val zerosBinsArr7 = zerosBinsArr6.zip(onesBinsArr6).map\
    \ { case (a, b) => a -> b }.toMap\n        val onesBinsArr8 = onesBinsArr7.zip(zerosBinsArr",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = ones / onesCount\n        val zerosDecimal\
    \ = zeros / zerosCount\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(_ % 2 == 0).length\n        val decs = arr.filter(_\
    \ % 2 == 1).map(_.toString.toInt).sortBy(_.toInt)\n        val result = decs.zip(ones).sortBy(_._1).map(x\
    \ => x._2)\n        result.map(x => x + arr(0))", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesDec = arr.map(x\
    \ => math.pow(2, x))\n        val zerosDec = arr.map(x => math.pow(2, -x))\n \
    \       val onesDec.zip(zerosDec).sortBy(x => x._1 - x._2).map(x => x._1)", " \
    \       val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n\
    \        val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesDecimal\n        val zerosDecimalDecimalDecimal =\
    \ zerosDecimalDecimal / zerosDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / onesDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val onesDecimalDecimalDecimalDecimalDecimal", "        val ones = arr.filter(x\
    \ => x % 2 == 0).length\n        val decs = arr.filter(x => x % 2 == 1).length\n\
    \        val sorted = arr.sortBy(x => if (x % 2 == 0) ones else decs)\n      \
    \  sorted.reverse", "        val ones = arr.filter(x => x == 1).length\n     \
    \   val zeros = arr.filter(x => x == 0).length\n        val onesArr = arr.filter(x\
    \ => x == 1).map(x => x.toBinaryString).sorted\n        val zerosArr = arr.filter(x\
    \ => x == 0).map(x => x.toBinaryString).sorted\n        val onesArr = onesArr.map(x\
    \ => x.toInt)\n        val zerosArr = zerosArr.map(x => x.toInt)\n        val\
    \ onesArr = onesArr.sortWith(_ < _)\n        val zerosArr = zerosArr.sortWith(_\
    \ < _)\n        val onesArr = onesArr.map(x => x.toLong)\n        val zerosArr\
    \ = zerosArr.map(x => x.toLong)\n        val onesArr = onesArr.sortWith(_ < _)\n\
    \        val zerosArr = zerosArr.sortWith(_ < _)\n        val onesArr = onesArr.map(x\
    \ => x.toInt)\n        val zerosArr = zerosArr.map(x => x.toInt)\n        val\
    \ onesArr = onesArr.sortWith(_ < _)\n        val zerosArr = zerosArr.sortWith(_\
    \ < _)\n        val onesArr = onesArr.map(x => x.toLong)\n        val zerosArr\
    \ = zerosArr.map(x => x.toLong)\n        val onesArr = onesArr.sortWith(_ < _)\n\
    \        val zerosArr = zerosArr.sortWith(_ < _)\n        val onesArr = onesArr.map(x\
    \ => x.toInt)\n        val zerosArr = zerosArr.map(x => x.toInt)\n        val\
    \ onesArr = onesArr.sortWith(_ < _)\n        val zerosArr = zerosArr.sortWith(_\
    \ < _)\n        val onesArr = onesArr.map(x => x.toLong)\n        val zerosArr\
    \ = zerosArr.map(x => x.toLong)\n        val onesArr = onesArr.sortWith(_ < _)\n\
    \        val zerosArr = zerosArr.sortWith(_ < _)\n        val onesArr = onesArr.map(x\
    \ => x.toInt)\n        val zerosArr = zerosArr.map(x => x.toInt)\n        val\
    \ onesArr = onesArr.sortWith(_ < _", "        val ones = arr.map(x => if (x ==\
    \ 1) 1 else 0)\n        val zeros = arr.map(x => if (x == 0) 0 else 1)\n     \
    \   val onesCount = ones.count(_ == 1)\n        val zerosCount = zeros.count(_\
    \ == 0)\n        val onesZeros = ones.zip(zeros).filter(_._1 == _._2)\n      \
    \  val onesZeroCount = onesZeros.count(_._1 == 1)\n        val onesZeroZeros =\
    \ onesZeros.filter(_._1 == 0)\n        val onesZeroZeroCount = onesZeroZeros.count(_._1\
    \ == 1)\n        val onesZeroZeroZeros = onesZeroZeros.filter(_._1 == 0)\n   \
    \     val onesZeroZeroZeroCount = onesZeroZeroZeros.count(_._1 == 1)\n       \
    \ val onesZeroZeroZeroZeros = onesZeroZeroZeros.filter(_._1 == 0)\n        val\
    \ onesZeroZeroZeroZeroCount = onesZeroZeroZeroZeros.count(_._1 == 1)\n       \
    \ val onesZeroZeroZeroZeroZeros = onesZeroZeroZeroZeros.filter(_._1 == 0)\n  \
    \      val onesZeroZeroZeroZeroZeroCount = onesZeroZeroZeroZeroZeros.count(_._1\
    \ == 1)\n        val onesZeroZeroZeroZeroZeroZeros = onesZeroZeroZeroZeroZeros.filter(_._1\
    \ == 0)\n        val onesZeroZeroZeroZeroZeroCount = onesZeroZeroZeroZeroZeros.count(_._1\
    \ == 1)\n        val onesZeroZeroZeroZeroZeroZeros = onesZeroZeroZeroZeroZeros.filter(_._1\
    \ == 0)\n        val onesZeroZeroZeroZeroZeroCount = onesZeroZeroZeroZeroZeros.count(_._1\
    \ == 1)\n        val onesZeroZeroZeroZeroZeroZeroZeros = onesZeroZeroZeroZeroZeros.filter(_._1\
    \ == 0)\n        val onesZeroZeroZeroZeroZeroCount = onesZeroZeroZeroZeroZeros.count(_._1\
    \ == 1)\n        val onesZeroZeroZeroZeroZeroZeroZeros = onesZeroZeroZeroZeroZeros.filter(_._1\
    \ == 0)\n        val onesZeroZeroZeroZeroZeroCount = onesZeroZeroZeroZeroZeros.count(_._1\
    \ == 1)\n        val onesZeroZeroZeroZeroZeroZeroZeros = onesZeroZeroZeroZeroZeroZeros.filter(_._1\
    \ == 0)\n        val onesZeroZeroZeroZeroZeroCount = onesZeroZeroZeroZeroZeros.count(_",
  "        val ones = arr.filter(x => x % 2 == 0).size\n        val twos = arr.filter(x\
    \ => x % 2 == 1).size\n        val threes = arr.filter(x => x % 3 == 0).size\n\
    \        val fours = arr.filter(x => x % 4 == 0).size\n        val fives = arr.filter(x\
    \ => x % 5 == 0).size\n        val sixes = arr.filter(x => x % 6 == 0).size\n\
    \        val sevens = arr.filter(x => x % 7 == 0).size\n        val eights = arr.filter(x\
    \ => x % 8 == 0).size\n        val nines = arr.filter(x => x % 9 == 0).size\n\
    \        val tens = arr.filter(x => x % 10 == 0).size\n        val hundreds =\
    \ arr.filter(x => x % 100 == 0).size\n        val thousands = arr.filter(x =>\
    \ x % 1000 == 0).size\n        val millions = arr.filter(x => x % 1000000 == 0).size\n\
    \        val billions = arr.filter(x => x % 1000000000 == 0).size\n        val\
    \ trillions = arr.filter(x => x % 1000000000000 == 0).size\n        val quadrillions\
    \ = arr.filter(x => x % 1000000000000000 == 0).size\n        val quintillions\
    \ = arr.filter(x => x % 1000000000000000000 == 0).size\n        val ones = arr.filter(x\
    \ => x % 1 == 0).size\n        val twos = arr.filter(x => x % 2 == 1).size\n \
    \       val threes = arr.filter(x => x % 3 == 1).size\n        val fours = arr.filter(x\
    \ => x % 4 == 1).size\n        val fives = arr.filter(x => x % 5 == 1).size\n\
    \        val sixes = arr.filter(x => x % 6 == 1).size\n        val sevens = arr.filter(x\
    \ => x % 7 == 1).size\n        val eights = arr.filter(x => x % 8 == 1).size\n\
    \        val nines = arr.filter(x => x % 9 == 1).size\n        val tens = arr.filter(x\
    \ => x % 10 == 1).size\n        val hundreds = arr.filter(x => x % 100 == 1).size\n\
    \        val thousands = arr.filter(x => x % 1000 == 1).size\n        val millions\
    \ = arr.filter(x => x % 1000000 == 1).size\n        val billions = arr.filter(x\
    \ => x % 1000000000 == 1).size\n        val trillions = arr.filter(x => x % 1000000000000\
    \ == 1).size\n", "        val ones = arr.filter(_ % 2 == 0).length\n        val\
    \ twos = arr.filter(_ % 2 == 1).length\n        val threes = arr.filter(_ % 3\
    \ == 0).length\n        val fours = arr.filter(_ % 4 == 0).length\n        val\
    \ fives = arr.filter(_ % 5 == 0).length\n        val sixes = arr.filter(_ % 6\
    \ == 0).length\n        val sevens = arr.filter(_ % 7 == 0).length\n        val\
    \ eights = arr.filter(_ % 8 == 0).length\n        val nines = arr.filter(_ % 9\
    \ == 0).length\n        val tens = arr.filter(_ % 10 == 0).length\n        val\
    \ hundreds = arr.filter(_ % 100 == 0).length\n        val thousands = arr.filter(_\
    \ % 1000 == 0).length\n        val millions = arr.filter(_ % 1000000 == 0).length\n\
    \        val billions = arr.filter(_ % 1000000000 == 0).length\n        val trillions\
    \ = arr.filter(_ % 1000000000000 == 0).length\n        val quadrillions = arr.filter(_\
    \ % 1000000000000000 == 0).length\n        val quintillions = arr.filter(_ % 1000000000000000000\
    \ == 0).length\n        val onesAndZeros = arr.filter(_ % 1 == 0).length\n   \
    \     val onesAndOnes = arr.filter(_ % 1 == 1).length\n        val onesAndTwos\
    \ = arr.filter(_ % 1 == 2).length\n        val onesAndThrees = arr.filter(_ %\
    \ 1 == 3).length\n        val onesAndFours = arr.filter(_ % 1 == 4).length\n \
    \       val onesAndFives = arr.filter(_ % 1 == 5).length\n        val onesAndSixes\
    \ = arr.filter(_ % 1 == 6).length\n        val onesAndSevens = arr.filter(_ %\
    \ 1 == 7).length\n        val onesAndEights = arr.filter(_ % 1 == 8).length\n\
    \        val onesAndNines = arr.filter(_ % 1 == 9).length\n        val onesAndTens\
    \ = arr.filter(_ % 1 == 10).length\n        val onesAndHundreds = arr.filter(_\
    \ % 1 == 100).length\n        val onesAndThousands = arr.filter(_ % 1 == 1000).length\n\
    \        val onesAndMillions = arr.filter(_ % 1 == 1000000).length\n        val\
    \ onesAndBillions = arr.filter(_ % 1 == 1000000000).length\n        val onesAndTrillions\
    \ = arr.filter(_ % 1 == 1000000000000).length\n        val onesAndQuadrillions\
    \ = arr.filter(_ % 1 == 1000000000000000", "        val ones = arr.count(_ ==\
    \ 1)\n        val zeros = arr.count(_ == 0)\n        val maxOnes = arr.count(_\
    \ == 1)\n        val maxZeros = arr.count(_ == 0)\n        val maxOnesZeros =\
    \ arr.count(_ == 1 && _ == 0)\n        val maxOnesOnes = arr.count(_ == 1 && _\
    \ == 1)\n        val maxOnesTwos = arr.count(_ == 1 && _ == 2)\n        val maxOnesThrees\
    \ = arr.count(_ == 1 && _ == 3)\n        val maxOnesFours = arr.count(_ == 1 &&\
    \ _ == 4)\n        val maxOnesFives = arr.count(_ == 1 && _ == 5)\n        val\
    \ maxOnesSixes = arr.count(_ == 1 && _ == 6)\n        val maxOnesSevens = arr.count(_\
    \ == 1 && _ == 7)\n        val maxOnesEights = arr.count(_ == 1 && _ == 8)\n \
    \       val maxOnesNines = arr.count(_ == 1 && _ == 9)\n        val maxOnesTens\
    \ = arr.count(_ == 1 && _ == 10)\n        val maxOnesElevens = arr.count(_ ==\
    \ 1 && _ == 11)\n        val maxOnesTwelves = arr.count(_ == 1 && _ == 12)\n \
    \       val maxOnesThirteens = arr.count(_ == 1 && _ == 13)\n        val maxOnesFourteens\
    \ = arr.count(_ == 1 && _ == 14)\n        val maxOnesFifteens = arr.count(_ ==\
    \ 1 && _ == 15)\n        val maxOnesSixteens = arr.count(_ == 1 && _ == 16)\n\
    \        val maxOnesSeventeens = arr.count(_ == 1 && _ == 17)\n        val maxOnesEighteens\
    \ = arr.count(_ == 1 && _ == 18)\n        val maxOnesNineteens = arr.count(_ ==\
    \ 1 && _ == 19)\n        val maxOnesTwentys = arr.count(_ == 1 && _ == 20)\n \
    \       val maxOnesTwentyFours = arr.count(_ == 1 && _ == 24)\n        val maxOnesTwentyFives\
    \ = arr.count(_ == 1 && _ == 25)\n        val maxOnesTwentySixes = arr.count(_\
    \ == 1 && _ == 26)\n        val maxOnesTwentySevens = arr.count(_ == 1 && _ ==\
    \ 27)\n        val maxOnesTwentyEights = arr.count(_ == 1 && _ == 28)\n      \
    \  val maxOnesTwentyN", "        val ones = arr.count(_ == 1)\n        val twos\
    \ = arr.count(_ == 2)\n        val threes = arr.count(_ == 3)\n        val fours\
    \ = arr.count(_ == 4)\n        val fives = arr.count(_ == 5)\n        val sixes\
    \ = arr.count(_ == 6)\n        val sevens = arr.count(_ == 7)\n        val eights\
    \ = arr.count(_ == 8)\n        val nines = arr.count(_ == 9)\n        val tens\
    \ = arr.count(_ == 10)\n        val hundreds = arr.count(_ == 100)\n        val\
    \ thousands = arr.count(_ == 1000)\n        val millions = arr.count(_ == 1000000)\n\
    \        val billions = arr.count(_ == 1000000000)\n        val trillions = arr.count(_\
    \ == 1000000000000)\n        val quadrillions = arr.count(_ == 1000000000000000)\n\
    \        val quintillions = arr.count(_ == 1000000000000000000)\n        val onesAndZeros\
    \ = arr.count(_ == 1)\n        val onesAndOnes = arr.count(_ == 2)\n        val\
    \ onesAndTwos = arr.count(_ == 3)\n        val onesAndThrees = arr.count(_ ==\
    \ 4)\n        val onesAndFours = arr.count(_ == 5)\n        val onesAndFives =\
    \ arr.count(_ == 6)\n        val onesAndSixes = arr.count(_ == 7)\n        val\
    \ onesAndSevens = arr.count(_ == 8)\n        val onesAndEights = arr.count(_ ==\
    \ 9)\n        val onesAndNines = arr.count(_ == 10)\n        val onesAndTens =\
    \ arr.count(_ == 11)\n        val onesAndHundreds = arr.count(_ == 100)\n    \
    \    val onesAndThousands = arr.count(_ == 1000)\n        val onesAndMillions\
    \ = arr.count(_ == 1000000)\n        val onesAndBillions = arr.count(_ == 1000000000)\n\
    \        val onesAndTrillions = arr.count(_ == 1000000000000)\n        val onesAndQuadrillions\
    \ = arr.count(_ == 1000000000000000)\n        val onesAndQuintillions = arr.count(_\
    \ == 1000000000000000000)\n        val onesAndOnesAndZeros = arr.count(_ == 1)\n\
    \        val onesAndOnesAndOnes = arr.count(_ == 2)\n        val onesAndOnesAndTwos\
    \ = arr.count(_ == 3)\n        val onesAndOnesAndThrees = arr.count(_ == 4)\n\
    \        val onesAndOnesAndFours = arr.count(_", "        val ones = arr.filter(x\
    \ => x % 2 == 0).length\n        val twos = arr.filter(x => x % 2 == 1).length\n\
    \        val threes = arr.filter(x => x % 3 == 0).length\n        val fours =\
    \ arr.filter(x => x % 4 == 0).length\n        val fives = arr.filter(x => x %\
    \ 5 == 0).length\n        val sixes = arr.filter(x => x % 6 == 0).length\n   \
    \     val sevens = arr.filter(x => x % 7 == 0).length\n        val eights = arr.filter(x\
    \ => x % 8 == 0).length\n        val nines = arr.filter(x => x % 9 == 0).length\n\
    \        val tens = arr.filter(x => x % 10 == 0).length\n        val hundreds\
    \ = arr.filter(x => x % 100 == 0).length\n        val thousands = arr.filter(x\
    \ => x % 1000 == 0).length\n        val millions = arr.filter(x => x % 1000000\
    \ == 0).length\n        val billions = arr.filter(x => x % 1000000000 == 0).length\n\
    \        val trillions = arr.filter(x => x % 1000000000000 == 0).length\n    \
    \    val quadrillions = arr.filter(x => x % 1000000000000000 == 0).length\n  \
    \      val quintillions = arr.filter(x => x % 1000000000000000000 == 0).length\n\
    \        val onesAndZeros = arr.filter(x => x % 1 == 0 && x != 0).length\n   \
    \     val onesAndOnes = arr.filter(x => x % 1 == 1 && x != 0).length\n       \
    \ val twosAndZeros = arr.filter(x => x % 2 == 0 && x != 0).length\n        val\
    \ twosAndOnes = arr.filter(x => x % 2 == 1 && x != 0).length\n        val threesAndZeros\
    \ = arr.filter(x => x % 3 == 0 && x != 0).length\n        val threesAndOnes =\
    \ arr.filter(x => x % 3 == 1 && x != 0).length\n        val foursAndZeros = arr.filter(x\
    \ => x % 4 == 0 && x != 0).length\n        val foursAndOnes = arr.filter(x =>\
    \ x % 4 == 1 && x != 0).length\n        val fivesAndZeros = arr.filter(x => x\
    \ % 5 == 0 && x != 0).length\n        val fivesAndOnes = arr.filter(x => x % 5\
    \ == 1 && x != 0).length\n        val sixesAndZeros = arr.filter(x => x % 6 ==\
    \ 0 && x != 0).length\n        val sixesAndOnes = arr.filter(x => x % 6 == 1 &&\
    \ x != 0).", "        val ones = arr.count(_ == 1)\n        val decimals = arr.count(_\
    \ > 0)\n        val onesDecimal = ones * decimals\n        val onesDecimals =\
    \ onesDecimal.map(x => x / decimals)\n        val onesDecimalsSorted = onesDecimals.sortWith(_\
    \ < _)\n        val decimalsSorted = decimals.map(x => x / onesDecimal)\n    \
    \    val decimalsSortedSorted = decimalsSorted.sortWith(_ < _)\n        val sortedArray\
    \ = onesDecimalsSorted.zip(decimalsSortedSorted).map(_._1).zipWithIndex.sortWith(_._2\
    \ < _._2).map(_._2).map(_._1)\n        sortedArray.toList", "        val ones\
    \ = arr.map(x => if (x == 1) 1 else 0)\n        val onesCount = ones.toList\n\
    \        val onesCount = onesCount.sortBy(x => x)\n        val onesCountReverse\
    \ = onesCount.reverse\n        val onesCountReverse = onesCountReverse.sortBy(x\
    \ => x)\n        val onesCountReverse = onesCountReverse.sortBy(x => x)\n    \
    \    val onesCountReverse = onesCountReverse.sortBy(x => x)\n        val onesCountReverse\
    \ = onesCountReverse.sortBy(x => x)\n        val onesCountReverse = onesCountReverse.sortBy(x\
    \ => x)\n        val onesCountReverse = onesCountReverse.sortBy(x => x)\n    \
    \    val onesCountReverse = onesCountReverse.sortBy(x => x)\n        val onesCountReverse\
    \ = onesCountReverse.sortBy(x => x)\n        val onesCountReverse = onesCountReverse.sortBy(x\
    \ => x)\n        val onesCountReverse = onesCountReverse.sortBy(x => x)\n    \
    \    val onesCountReverse = onesCountReverse.sortBy(x => x)\n        val onesCountReverse\
    \ = onesCountReverse.sortBy(x => x)\n        val onesCountReverse = onesCountReverse.sortBy(x\
    \ => x)\n        val onesCountReverse = onesCountReverse.sortBy(x => x)\n    \
    \    val onesCountReverse = onesCountReverse.sortBy(x => x)\n        val onesCountReverse\
    \ = onesCountReverse.sortBy(x => x)\n        val onesCountReverse = onesCountReverse.sortBy(x\
    \ => x)\n        val onesCountReverse = onesCountReverse.sortBy(x => x)\n    \
    \    val onesCountReverse = onesCountReverse.sortBy(x => x)\n        val onesCountReverse\
    \ = onesCountReverse.sortBy(x => x)\n        val onesCountReverse = onesCountReverse.sortBy(x\
    \ => x)\n        val onesCountReverse = onesCountReverse.sortBy(x => x)\n    \
    \    val onesCountReverse = onesCountReverse.sortBy(x => x)\n        val onesCountReverse\
    \ = onesCountReverse.sortBy(x => x)\n        val onesCountReverse = onesCountReverse.sortBy(x\
    \ => x)\n        val onesCountReverse = onesCountReverse", "        val ones =\
    \ arr.map(x => if (x == 1) 1 else 0)\n        val twos = arr.map(x => if (x ==\
    \ 2) 2 else 0)\n        val threes = arr.map(x => if (x == 3) 3 else 0)\n    \
    \    val fours = arr.map(x => if (x == 4) 4 else 0)\n        val fives = arr.map(x\
    \ => if (x == 5) 5 else 0)\n        val sixes = arr.map(x => if (x == 6) 6 else\
    \ 0)\n        val sevens = arr.map(x => if (x == 7) 7 else 0)\n        val eights\
    \ = arr.map(x => if (x == 8) 8 else 0)\n        val nines = arr.map(x => if (x\
    \ == 9) 9 else 0)\n        val tens = arr.map(x => if (x == 10) 10 else 0)\n \
    \       val hundreds = arr.map(x => if (x == 11) 11 else 0)\n        val thousands\
    \ = arr.map(x => if (x == 100) 100 else 0)\n        val ten_thousands = arr.map(x\
    \ => if (x == 1000) 1000 else 0)\n        val hundred_thousands = arr.map(x =>\
    \ if (x == 10000) 10000 else 0)\n        val millions = arr.map(x => if (x ==\
    \ 1000000) 1000000 else 0)\n        val billions = arr.map(x => if (x == 1000000000)\
    \ 1000000000 else 0)\n        val trillions = arr.map(x => if (x == 1000000000000)\
    \ 1000000000000 else 0)\n        val quadrillions = arr.map(x => if (x == 1000000000000000)\
    \ 1000000000000000 else 0)\n        val quintillions = arr.map(x => if (x == 1000000000000000000)\
    \ 1000000000000000000 else 0)\n        val ones_count = ones.size\n        val\
    \ twos_count = twos.size\n        val threes_count = threes.size\n        val\
    \ fours_count = fours.size\n        val fives_count = fives.size\n        val\
    \ sixes_count = sixes.size\n        val sevens_count = sevens.size\n        val\
    \ eights_count = eights.size\n        val nines_count = nines.size\n        val\
    \ tens_count = tens.size\n        val hundreds_count = hundreds.size\n       \
    \ val thousands_count = thousands.size\n        val ten_thousands_count = ten_thousands.size\n\
    \        val hundred_thousands_count = hundred_thousands.size\n        val millions_count\
    \ = millions.size\n        val billions_count = billions.size\n        val trillions_count\
    \ = trillions.size\n        val quadrilli", "        val ones = arr.count(_ ==\
    \ 1)\n        val twos = arr.count(_ == 2)\n        val threes = arr.count(_ ==\
    \ 3)\n        val fours = arr.count(_ == 4)\n        val fives = arr.count(_ ==\
    \ 5)\n        val sixes = arr.count(_ == 6)\n        val sevens = arr.count(_\
    \ == 7)\n        val eights = arr.count(_ == 8)\n        val nines = arr.count(_\
    \ == 9)\n        val tens = arr.count(_ == 10)\n        val hundreds = arr.count(_\
    \ == 100)\n        val thousands = arr.count(_ == 1000)\n        val millions\
    \ = arr.count(_ == 1000000)\n        val billions = arr.count(_ == 1000000000)\n\
    \        val trillions = arr.count(_ == 1000000000000)\n        val quadrillions\
    \ = arr.count(_ == 1000000000000000)\n        val quintillions = arr.count(_ ==\
    \ 1000000000000000000)\n        val onesAndZeros = arr.count(_ == 1)\n       \
    \ val onesAndOnes = arr.count(_ == 1)\n        val onesAndTwos = arr.count(_ ==\
    \ 1)\n        val onesAndThrees = arr.count(_ == 1)\n        val onesAndFours\
    \ = arr.count(_ == 1)\n        val onesAndFives = arr.count(_ == 1)\n        val\
    \ onesAndSixes = arr.count(_ == 1)\n        val onesAndSevens = arr.count(_ ==\
    \ 1)\n        val onesAndEights = arr.count(_ == 1)\n        val onesAndNines\
    \ = arr.count(_ == 1)\n        val onesAndTens = arr.count(_ == 1)\n        val\
    \ onesAndHundreds = arr.count(_ == 1)\n        val onesAndThousands = arr.count(_\
    \ == 1)\n        val onesAndMillions = arr.count(_ == 1)\n        val onesAndBillions\
    \ = arr.count(_ == 1)\n        val onesAndTrillions = arr.count(_ == 1)\n    \
    \    val onesAndQuadrillions = arr.count(_ == 1)\n        val onesAndQuintillions\
    \ = arr.count(_ == 1)\n        val onesAndOnesAndZeros = arr.count(_ == 1)\n \
    \       val onesAndOnesAndOnes = arr.count(_ == 1)\n        val onesAndOnesAndTwos\
    \ = arr.count(_ == 1)\n        val onesAndOnesAndThrees = arr.count(_ == 1)\n\
    \        val onesAndOnesAndFours = arr.count(_ == 1)\n        val onesAndOnesAndFi",
  "        val ones = arr.map(x => if (x == 1) 1 else 0)\n        val twos = arr.map(x\
    \ => if (x == 2) 2 else 0)\n        val threes = arr.map(x => if (x == 3) 3 else\
    \ 0)\n        val fours = arr.map(x => if (x == 4) 4 else 0)\n        val fives\
    \ = arr.map(x => if (x == 5) 5 else 0)\n        val sixes = arr.map(x => if (x\
    \ == 6) 6 else 0)\n        val sevens = arr.map(x => if (x == 7) 7 else 0)\n \
    \       val eights = arr.map(x => if (x == 8) 8 else 0)\n        val nines = arr.map(x\
    \ => if (x == 9) 9 else 0)\n        val tens = arr.map(x => if (x == 10) 10 else\
    \ 0)\n        val hundreds = arr.map(x => if (x == 11) 11 else 0)\n        val\
    \ thousands = arr.map(x => if (x == 100) 100 else 0)\n        val ten_thousands\
    \ = arr.map(x => if (x == 1000) 1000 else 0)\n        val hundred_thousands =\
    \ arr.map(x => if (x == 10000) 10000 else 0)\n        val millions = arr.map(x\
    \ => if (x == 1000000) 1000000 else 0)\n        val billions = arr.map(x => if\
    \ (x == 1000000000) 1000000000 else 0)\n        val trillions = arr.map(x => if\
    \ (x == 1000000000000) 1000000000000 else 0)\n        val quadrillions = arr.map(x\
    \ => if (x == 1000000000000000) 1000000000000000 else 0)\n        val quintillions\
    \ = arr.map(x => if (x == 1000000000000000000) 1000000000000000000 else 0)\n \
    \       val ones_count = arr.count(x => x == 1)\n        val twos_count = arr.count(x\
    \ => x == 2)\n        val threes_count = arr.count(x => x == 3)\n        val fours_count\
    \ = arr.count(x => x == 4)\n        val fives_count = arr.count(x => x == 5)\n\
    \        val sixes_count = arr.count(x => x == 6)\n        val sevens_count =\
    \ arr.count(x => x == 7)\n        val eights_count = arr.count(x => x == 8)\n\
    \        val nines_count = arr.count(x => x == 9)\n        val tens_count = arr.count(x\
    \ => x == 10) \n        val hundreds_count = arr.count(x => x == 11)\n       \
    \ val thousands_count = arr.count(x => x == 100)\n        val ten_thousands_count\
    \ = arr.count(x => x == 1000)\n        val hundred_thousands_count = arr.", " \
    \       val ones = arr.count(_ == 1)\n        val twos = arr.count(_ == 2)\n \
    \       val threes = arr.count(_ == 3)\n        val fours = arr.count(_ == 4)\n\
    \        val fives = arr.count(_ == 5)\n        val sixes = arr.count(_ == 6)\n\
    \        val sevens = arr.count(_ == 7)\n        val eights = arr.count(_ == 8)\n\
    \        val nines = arr.count(_ == 9)\n        val tens = arr.count(_ == 10)\n\
    \        val hundreds = arr.count(_ == 100)\n        val thousands = arr.count(_\
    \ == 1000)\n        val millions = arr.count(_ == 1000000)\n        val billions\
    \ = arr.count(_ == 1000000000)\n        val trillions = arr.count(_ == 1000000000000)\n\
    \        val quadrillions = arr.count(_ == 1000000000000000)\n        val quintillions\
    \ = arr.count(_ == 1000000000000000000)\n        val sextillions = arr.count(_\
    \ == 10000000000000000000000)\n        val septillions = arr.count(_ == 1000000000000000000000000)\n\
    \        val octillions = arr.count(_ == 1000000000000000000000000000)\n     \
    \   val nonillions = arr.count(_ == 10000000000000000000000000000000)\n      \
    \  val decillions = arr.count(_ == 1000000000000000000000000000000000)\n     \
    \   val undecillions = arr.count(_ == 10000000000000000000000000000000001)\n \
    \       val decillionsOne = arr.count(_ == 10000000000000000000000000000000010)\n\
    \        val undecillionsOne = arr.count(_ == 10000000000000000000000000000000011)\n\
    \        val decillionsTwo = arr.count(_ == 100000000000000000000000000000000100)\n\
    \        val undecillionsTwo = arr.count(_ == 100000000000000000000000000000000101)\n\
    \        val decillionsThree = arr.count(_ == 1000000000000000000000000000000001000)\n\
    \        val undecillionsThree = arr.count(_ == 1000000000000000000000000000000001001)\n\
    \        val decillionsFour = arr.count(_ == 10000000000000000000000000000000010000)\n\
    \        val undecillionsFour = arr.count(_ == 10000000000000000000000000000000010001)\n\
    \        val decillionsFive = arr.count(_ == 100000000000000000000000000000000100000)\n\
    \        val undecillionsFive = arr.count(_ == 100000000000000000000000000000000100001)\n\
    \        val decillionsSix = arr.count(_ == 1000000000000000000000000000000001000000)\n\
    \        val undecillion", "        val ones = arr.count(_ == 1)\n        val\
    \ decs = arr.map(x => math.abs(math.log2(x)))\n        val sorted = decs.sortWith((x,\
    \ y) => math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.sig", "    \
    \    val ones = arr.map(x => if (x == 1) 1 else 0)\n        val twos = arr.map(x\
    \ => if (x == 2) 2 else 0)\n        val threes = arr.map(x => if (x == 3) 3 else\
    \ 0)\n        val fours = arr.map(x => if (x == 4) 4 else 0)\n        val fives\
    \ = arr.map(x => if (x == 5) 5 else 0)\n        val sixes = arr.map(x => if (x\
    \ == 6) 6 else 0)\n        val sevens = arr.map(x => if (x == 7) 7 else 0)\n \
    \       val eights = arr.map(x => if (x == 8) 8 else 0)\n        val nines = arr.map(x\
    \ => if (x == 9) 9 else 0)\n        val tens = arr.map(x => if (x == 10) 10 else\
    \ 0)\n        val hundreds = arr.map(x => if (x == 11) 11 else 0)\n        val\
    \ thousands = arr.map(x => if (x == 100) 100 else 0)\n        val ten_thousands\
    \ = arr.map(x => if (x == 1000) 1000 else 0)\n        val hundred_thousands =\
    \ arr.map(x => if (x == 10000) 10000 else 0)\n        val millions = arr.map(x\
    \ => if (x == 1000000) 1000000 else 0)\n        val billions = arr.map(x => if\
    \ (x == 1000000000) 1000000000 else 0)\n        val trillions = arr.map(x => if\
    \ (x == 1000000000000) 1000000000000 else 0)\n        val quadrillions = arr.map(x\
    \ => if (x == 1000000000000000) 1000000000000000 else 0)\n        val quintillions\
    \ = arr.map(x => if (x == 1000000000000000000) 1000000000000000000 else 0)\n \
    \       val ones_count = ones.size\n        val twos_count = twos.size\n     \
    \   val threes_count = threes.size\n        val fours_count = fours.size\n   \
    \     val fives_count = fives.size\n        val sixes_count = sixes.size\n   \
    \     val sevens_count = sevens.size\n        val eights_count = eights.size\n\
    \        val nines_count = nines.size\n        val tens_count = tens.size\n  \
    \      val hundreds_count = hundreds.size\n        val thousands_count = thousands.size\n\
    \        val ten_thousands_count = ten_thousands.size\n        val hundred_thousands_count\
    \ = hundred_thousands.size\n        val millions_count = millions.size\n     \
    \   val billions_count = billions.size\n        val trillions_count = trillions.size\n\
    \        val quadrillion", "        val ones = arr.count(x => x == 1)\n      \
    \  val decimals = arr.count(x => x == 0)\n        val onesDecimals = ones * decimals\n\
    \        val onesDecimalsArray = onesDecimals.toArray\n        val onesDecimalsArrayLength\
    \ = onesDecimalsArray.length\n        val onesDecimalsArrayLength = onesDecimalsArrayLength\
    \ - 1\n        val onesDecimalsArrayLength = onesDecimalsArrayLength - 1\n   \
    \     val onesDecimalsArrayLength = onesDecimalsArrayLength - 1\n        val onesDecimalsArrayLength\
    \ = onesDecimalsArrayLength - 1\n        val onesDecimalsArrayLength = onesDecimalsArrayLength\
    \ - 1\n        val onesDecimalsArrayLength = onesDecimalsArrayLength - 1\n   \
    \     val onesDecimalsArrayLength = onesDecimalsArrayLength - 1\n        val onesDecimalsArrayLength\
    \ = onesDecimalsArrayLength - 1\n        val onesDecimalsArrayLength = onesDecimalsArrayLength\
    \ - 1\n        val onesDecimalsArrayLength = onesDecimalsArrayLength - 1\n   \
    \     val onesDecimalsArrayLength = onesDecimalsArrayLength - 1\n        val onesDecimalsArrayLength\
    \ = onesDecimalsArrayLength - 1\n        val onesDecimalsArrayLength = onesDecimalsArrayLength\
    \ - 1\n        val onesDecimalsArrayLength = onesDecimalsArrayLength - 1\n   \
    \     val onesDecimalsArrayLength = onesDecimalsArrayLength - 1\n        val onesDecimalsArrayLength\
    \ = onesDecimalsArrayLength - 1\n        val onesDecimalsArrayLength = onesDecimalsArrayLength\
    \ - 1\n        val onesDecimalsArrayLength = onesDecimalsArrayLength - 1\n   \
    \     val onesDecimalsArrayLength = onesDecimalsArrayLength - 1\n        val onesDecimalsArrayLength\
    \ = onesDecimalsArrayLength - 1\n        val onesDecimalsArrayLength = onesDecimalsArrayLength\
    \ - 1\n        val onesDecimalsArrayLength = onesDecimalsArrayLength - 1\n   \
    \     val onesDecimalsArrayLength = onesDecimalsArrayLength - 1\n        val onesDecimalsArrayLength\
    \ = onesDecimalsArrayLength - 1\n        val onesDecimalsArrayLength = onesDecimalsArrayLength\
    \ - 1\n        val onesDecimalsArrayLength = onesDecimalsArrayLength - 1\n   \
    \     val onesDecimalsArrayLength = onesDecimalsArrayLength - 1\n        val onesDecimalsArrayLength\
    \ = onesDecimalsArrayLength - 1\n        ", "        val ones = arr.filter(x =>\
    \ x == 1).length\n        val zeros = arr.filter(x => x == 0).length\n       \
    \ val onesDec = arr.filter(x => x == 1).map(_.toString.toInt).sortBy(_.toString.toInt).reverse\n\
    \        val zerosDec = arr.filter(x => x == 0).map(_.toString.toInt).sortBy(_.toString.toInt).reverse\n\
    \        val onesDec = onesDec.take(ones)\n        val zerosDec = zerosDec.take(zeros)\n\
    \        val onesDec = onesDec.take(ones)\n        val zerosDec = zerosDec.take(zeros)\n\
    \        val onesDec = onesDec.take(ones)\n        val zerosDec = zerosDec.take(zeros)\n\
    \        val onesDec = onesDec.take(ones)\n        val zerosDec = zerosDec.take(zeros)\n\
    \        val onesDec = onesDec.take(ones)\n        val zerosDec = zerosDec.take(zeros)\n\
    \        val onesDec = onesDec.take(ones)\n        val zerosDec = zerosDec.take(zeros)\n\
    \        val onesDec = onesDec.take(ones)\n        val zerosDec = zerosDec.take(zeros)\n\
    \        val onesDec = onesDec.take(ones)\n        val zerosDec = zerosDec.take(zeros)\n\
    \        val onesDec = onesDec.take(ones)\n        val zerosDec = zerosDec.take(zeros)\n\
    \        val onesDec = onesDec.take(ones)\n        val zerosDec = zerosDec.take(zeros)\n\
    \        val onesDec = onesDec.take(ones)\n        val zerosDec = zerosDec.take(zeros)\n\
    \        val onesDec = onesDec.take(ones)\n        val zerosDec = zerosDec.take(zeros)\n\
    \        val onesDec = onesDec.take(ones)\n        val zerosDec = zerosDec.take(zeros)\n\
    \        val onesDec = onesDec.take(ones)\n        val zerosDec = zerosDec.take(zeros)\n\
    \        val onesDec = onesDec.take(ones)\n        val zerosDec = zerosDec.take(zeros)\n\
    \        val onesDec = onesDec.take", "        val ones = arr.map(x => if (x ==\
    \ 1) 1 else 0)\n        val twos = arr.map(x => if (x == 2) 2 else 0)\n      \
    \  val threes = arr.map(x => if (x == 3) 3 else 0)\n        val fours = arr.map(x\
    \ => if (x == 4) 4 else 0)\n        val fives = arr.map(x => if (x == 5) 5 else\
    \ 0)\n        val sixes = arr.map(x => if (x == 6) 6 else 0)\n        val sevens\
    \ = arr.map(x => if (x == 7) 7 else 0)\n        val eights = arr.map(x => if (x\
    \ == 8) 8 else 0)\n        val nines = arr.map(x => if (x == 9) 9 else 0)\n  \
    \      val tens = arr.map(x => if (x == 10) 10 else 0)\n        val elevens =\
    \ arr.map(x => if (x == 11) 11 else 0)\n        val twelves = arr.map(x => if\
    \ (x == 12) 12 else 0)\n        val thirteens = arr.map(x => if (x == 13) 13 else\
    \ 0)\n        val fourteens = arr.map(x => if (x == 14) 14 else 0)\n        val\
    \ fifteens = arr.map(x => if (x == 15) 15 else 0)\n        val sixteens = arr.map(x\
    \ => if (x == 16) 16 else 0)\n        val seventeens = arr.map(x => if (x == 17)\
    \ 17 else 0)\n        val eighteens = arr.map(x => if (x == 18) 18 else 0)\n \
    \       val nineteens = arr.map(x => if (x == 19) 19 else 0)\n        val twenties\
    \ = arr.map(x => if (x == 20) 20 else 0)\n        val twentys = arr.map(x => if\
    \ (x == 21) 21 else 0)\n        val twentyfours = arr.map(x => if (x == 22) 22\
    \ else 0)\n        val twentyfives = arr.map(x => if (x == 23) 23 else 0)\n  \
    \      val twentysixes = arr.map(x => if (x == 24) 24 else 0)\n        val twentysevens\
    \ = arr.map(x => if (x == 25) 25 else 0)\n        val twentyeights = arr.map(x\
    \ => if (x == 26) 26 else 0)\n        val twentynines = arr.map(x => if (x ==\
    \ 27) 27 else 0)\n        val thirties = arr.map(x => if (x == 28) 28 else 0)\n\
    \        val thirtys = arr.map(x => if (x == 29) 29 else 0)\n        val thirtyfours\
    \ = arr.map(x => ", "        val ones = arr.filter(x => x == 1).size\n       \
    \ val twos = arr.filter(x => x == 2).size\n        val threes = arr.filter(x =>\
    \ x == 3).size\n        val fours = arr.filter(x => x == 4).size\n        val\
    \ fives = arr.filter(x => x == 5).size\n        val sixes = arr.filter(x => x\
    \ == 6).size\n        val sevens = arr.filter(x => x == 7).size\n        val eights\
    \ = arr.filter(x => x == 8).size\n        val nines = arr.filter(x => x == 9).size\n\
    \        val tens = arr.filter(x => x == 10).size\n        val hundreds = arr.filter(x\
    \ => x == 11).size\n        val thousands = arr.filter(x => x == 12).size\n  \
    \      val millions = arr.filter(x => x == 13).size\n        val billions = arr.filter(x\
    \ => x == 14).size\n        val trillions = arr.filter(x => x == 15).size\n  \
    \      val quadrillions = arr.filter(x => x == 16).size\n        val quintillions\
    \ = arr.filter(x => x == 17).size\n        val sextillions = arr.filter(x => x\
    \ == 18).size\n        val septillions = arr.filter(x => x == 19).size\n     \
    \   val octillions = arr.filter(x => x == 20).size\n        val nonillions = arr.filter(x\
    \ => x == 21).size\n        val decillions = arr.filter(x => x == 22).size\n \
    \       val undecillions = arr.filter(x => x == 23).size\n        val duodecillions\
    \ = arr.filter(x => x == 24).size\n        val tredecillions = arr.filter(x =>\
    \ x == 25).size\n        val quattuordecillions = arr.filter(x => x == 26).size\n\
    \        val quindecillions = arr.filter(x => x == 27).size\n        val sexdecillions\
    \ = arr.filter(x => x == 28).size\n        val septendecillions = arr.filter(x\
    \ => x == 29).size\n        val octodecillions = arr.filter(x => x == 30).size\n\
    \        val novemdecillions = arr.filter(x => x == 31).size\n        val vigintillions\
    \ = arr.filter(x => x == 32).size\n        val unvigintillions = arr.filter(x\
    \ => x == 33).size\n        val duovigintillions = arr.", "        val ones =\
    \ arr.count(x => x == 1)\n        val twos = arr.count(x => x == 2)\n        val\
    \ threes = arr.count(x => x == 3)\n        val fours = arr.count(x => x == 4)\n\
    \        val fives = arr.count(x => x == 5)\n        val sixes = arr.count(x =>\
    \ x == 6)\n        val sevens = arr.count(x => x == 7)\n        val eights = arr.count(x\
    \ => x == 8)\n        val nines = arr.count(x => x == 9)\n        val tens = arr.count(x\
    \ => x == 10)\n        val hundreds = arr.count(x => x == 100)\n        val thousands\
    \ = arr.count(x => x == 1000)\n        val millions = arr.count(x => x == 1000000)\n\
    \        val billions = arr.count(x => x == 1000000000)\n        val trillions\
    \ = arr.count(x => x == 1000000000000)\n        val quadrillions = arr.count(x\
    \ => x == 1000000000000000)\n        val quintillions = arr.count(x => x == 1000000000000000000)\n\
    \        val onesAndZeroes = arr.count(x => x == 1)\n        val onesAndZeroesAndOnes\
    \ = arr.count(x => x == 1 && x == 0)\n        val onesAndOnes = arr.count(x =>\
    \ x == 1 && x == 1)\n        val onesAndOnesAndZeroes = arr.count(x => x == 1\
    \ && x == 0 && x == 1)\n        val onesAndOnesAndOnes = arr.count(x => x == 1\
    \ && x == 1 && x == 1)\n        val onesAndOnesAndOnesAndZeroes = arr.count(x\
    \ => x == 1 && x == 1 && x == 0 && x == 1)\n        val onesAndOnesAndOnesAndOnes\
    \ = arr.count(x => x == 1 && x == 1 && x == 1 && x == 1)\n        val onesAndOnesAndOnesAndOnesAndZeroes\
    \ = arr.count(x => x == 1 && x == 1 && x == 1 && x == 0 && x == 1)\n        val\
    \ onesAndOnesAndOnesAndOnesAndOnes = arr.count(x => x == 1 && x == 1 && x == 1\
    \ && x == 1 && x == 1)\n        val onesAndOnesAndOnesAndOnesAndOnesAndZeroes\
    \ = arr.count(x => x == 1 && x == 1 && x == 1 && x == 0 && x == 1)\n        val\
    \ onesAndOnesAndOnesAndOnesAndOnesAndOnes = arr.count(x => x == 1 && x == 1 &&\
    \ x == 1 && x == 1 && x == 1 && x == 1)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndZeroes\
    \ = arr.count(x => x == 1 && x == 1 && x == 1 && x == 1 && x == 0 && x == 1)\n\
    \        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = arr.count(x => ",
  "        val ones = arr.map(x => if (x == 1) 1 else 0)\n        val onesCount =\
    \ ones.map(x => x).sum\n        val sortedOnes = ones.sortBy(x => x.toInt)\n \
    \       val sortedOnesCount = sortedOnes.map(x => x).sum\n        val sortedArr\
    \ = arr.sortBy(x => if (x == 1) 1 else 0)\n        val sortedArrCount = sortedArr.map(x\
    \ => x).sum\n        val sortedArrCount = sortedArrCount.toLong\n        val sortedArr\
    \ = sortedArr.sortBy(x => if (x == 1) 1 else 0)\n        val sortedArrCount =\
    \ sortedArr.map(x => x).sum\n        val sortedArrCount = sortedArrCount.toLong\n\
    \        val sortedArr = sortedArr.sortBy(x => if (x == 1) 1 else 0)\n       \
    \ val sortedArrCount = sortedArr.map(x => x).sum\n        val sortedArrCount =\
    \ sortedArrCount.toLong\n        val sortedArr = sortedArr.sortBy(x => if (x ==\
    \ 1) 1 else 0)\n        val sortedArrCount = sortedArr.map(x => x).sum\n     \
    \   val sortedArrCount = sortedArrCount.toLong\n        val sortedArr = sortedArr.sortBy(x\
    \ => if (x == 1) 1 else 0)\n        val sortedArrCount = sortedArr.map(x => x).sum\n\
    \        val sortedArrCount = sortedArrCount.toLong\n        val sortedArr = sortedArr.sortBy(x\
    \ => if (x == 1) 1 else 0)\n        val sortedArrCount = sortedArr.map(x => x).sum\n\
    \        val sortedArrCount = sortedArrCount.toLong\n        val sortedArr = sortedArr.sortBy(x\
    \ => if (x == 1) 1 else 0)\n        val sortedArrCount = sortedArr.map(x => x).sum\n\
    \        val sortedArrCount = sortedArrCount.toLong\n        val sortedArr = sortedArr.sortBy(x\
    \ => if (x == 1) 1 else 0)\n        val sortedArrCount = sortedArr.map(x => x).sum\n\
    \        val sortedArrCount = sortedArrCount.toLong\n        val sortedArr = sortedArr.sortBy(x\
    \ => if (x == 1) 1 else 0)\n        val sortedArrCount = sortedArr.map(x => x).sum\n\
    \        val sortedArrCount = sortedArrCount.toLong\n        val sortedArr = sortedArr.sortBy(x\
    \ => if (x == 1) 1 else 0)\n        val sortedArrCount = sortedArr.map(x => x).sum\n\
    \        val sortedArrCount = sortedArrCount.toLong\n        val sortedArr = sortedArr.sortBy(x\
    \ => if (x == 1) 1 else 0)\n", "        val ones = arr.map(x => if (x == 1) 1\
    \ else 0)\n        val twos = arr.map(x => if (x == 2) 2 else 0)\n        val\
    \ threes = arr.map(x => if (x == 3) 3 else 0)\n        val fours = arr.map(x =>\
    \ if (x == 4) 4 else 0)\n        val fives = arr.map(x => if (x == 5) 5 else 0)\n\
    \        val sixes = arr.map(x => if (x == 6) 6 else 0)\n        val sevens =\
    \ arr.map(x => if (x == 7) 7 else 0)\n        val eights = arr.map(x => if (x\
    \ == 8) 8 else 0)\n        val nines = arr.map(x => if (x == 9) 9 else 0)\n  \
    \      val tens = arr.map(x => if (x == 10) 10 else 0)\n        val hundreds =\
    \ arr.map(x => if (x == 11) 11 else 0)\n        val thousands = arr.map(x => if\
    \ (x == 100) 100 else 0)\n        val millions = arr.map(x => if (x == 1000) 1000\
    \ else 0)\n        val billions = arr.map(x => if (x == 1000000) 1000000 else\
    \ 0)\n        val trillions = arr.map(x => if (x == 1000000000) 1000000000 else\
    \ 0)\n        val quadrillions = arr.map(x => if (x == 1000000000000) 1000000000000\
    \ else 0)\n        val quintillions = arr.map(x => if (x == 1000000000000000)\
    \ 1000000000000000 else 0)\n        val sextillions = arr.map(x => if (x == 1000000000000000000)\
    \ 1000000000000000000 else 0)\n        val onesSorted = ones.sortWith(_ < _)\n\
    \        val twosSorted = twos.sortWith(_ < _)\n        val threesSorted = threes.sortWith(_\
    \ < _)\n        val foursSorted = fours.sortWith(_ < _)\n        val fivesSorted\
    \ = fives.sortWith(_ < _)\n        val sixesSorted = sixes.sortWith(_ < _)\n \
    \       val sevensSorted = sevens.sortWith(_ < _)\n        val eightsSorted =\
    \ eights.sortWith(_ < _)\n        val ninesSorted = nines.sortWith(_ < _)\n  \
    \      val tensSorted = tens.sortWith(_ < _)\n        val hundredsSorted = hundreds.sortWith(_\
    \ < _)\n        val thousandsSorted = thousands.sortWith(_ < _)\n        val millions",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArr = arr.filter(x => x == 1).sortBy(x => x.toString.toInt)\n\
    \        val zerosArr = arr.filter(x => x == 0).sortBy(x => x.toString.toInt)\n\
    \        val onesCount = onesArr.length\n        val zerosCount = zerosArr.length\n\
    \        if (onesCount < zerosCount) {\n            onesArr.toList\n        }\
    \ else if (zerosCount < onesCount) {\n            zerosArr.toList\n        } else\
    \ {\n            onesArr.zip(zerosArr).sortBy(x => x._1 - x._2).map(x => x._1)\n\
    \        }", "        val ones = arr.count(x => x == 1)\n        val decs = arr.map(x\
    \ => math.abs(math.log2(x)))\n        val decs = decs.sortBy(x => x)\n       \
    \ val decs = decs.takeWhile(x => x < ones)\n        val decs = decs.sortBy(x =>\
    \ math.abs(x - ones))\n        val decs = decs.takeWhile(x => x < ones)\n    \
    \    val decs = decs.sortBy(x => math.abs(x - ones))\n        val decs = decs.takeWhile(x\
    \ => x < ones)\n        val decs = decs.sortBy(x => math.abs(x - ones))\n    \
    \    val decs = decs.takeWhile(x => x < ones)\n        val decs = decs.sortBy(x\
    \ => math.abs(x - ones))\n        val decs = decs.takeWhile(x => x < ones)\n \
    \       val decs = decs.sortBy(x => math.abs(x - ones))\n        val decs = decs.takeWhile(x\
    \ => x < ones)\n        val decs = decs.sortBy(x => math.abs(x - ones))\n    \
    \    val decs = decs.takeWhile(x => x < ones)\n        val decs = decs.sortBy(x\
    \ => math.abs(x - ones))\n        val decs = decs.takeWhile(x => x < ones)\n \
    \       val decs = decs.sortBy(x => math.abs(x - ones))\n        val decs = decs.takeWhile(x\
    \ => x < ones)\n        val decs = decs.sortBy(x => math.abs(x - ones))\n    \
    \    val decs = decs.takeWhile(x => x < ones)\n        val decs = decs.sortBy(x\
    \ => math.abs(x - ones))\n        val decs = decs.takeWhile(x => x < ones)\n \
    \       val decs = decs.sortBy(x => math.abs(x - ones))\n        val decs = decs.takeWhile(x\
    \ => x < ones)\n        val decs = decs.sortBy(x => math.abs(x - ones))\n    \
    \    val decs = decs.takeWhile(x => x < ones)\n        val decs = decs.sortBy(x\
    \ => math.abs(x - ones))\n        val decs = decs.takeWhile(x => x < ones)\n \
    \       val decs = decs.sortBy(x => math.abs(x - ones))\n        val decs = decs.takeWhile(x\
    \ => x < ones)\n        val decs = decs.sortBy(x => math.abs(x - ones))\n    \
    \    val decs = decs.takeWhile(", "        val ones = arr.filter(x => x == 1).length\n\
    \        val zeros = arr.filter(x => x == 0).length\n        val decimal = arr.map(x\
    \ => math.pow(2,x)).sum\n        val decimalOnes = math.pow(2,ones)\n        val\
    \ decimalZeros = math.pow(2,zeros)\n        val decimalOnesZeros = math.pow(2,ones\
    \ + zeros)\n        val decimalZeroOnes = math.pow(2,zeros + ones)\n        val\
    \ decimalOnesOnes = math.pow(2,ones + ones)\n        val decimalZeroOnesOnes =\
    \ math.pow(2,zeros + ones + ones)\n        val decimalOnesOnesOnes = math.pow(2,ones\
    \ + ones + ones)\n        val decimalZeroOnesOnesOnes = math.pow(2,zeros + ones\
    \ + ones + ones)\n        val decimalOnesOnesOnesOnes = math.pow(2,ones + ones\
    \ + ones + ones)\n        val decimalZeroOnesOnesOnesOnes = math.pow(2,zeros +\
    \ ones + ones + ones + ones)\n        val decimalOnesOnesOnesOnesOnes = math.pow(2,ones\
    \ + ones + ones + ones + ones)\n        val decimalZeroOnesOnesOnesOnesOnes =\
    \ math.pow(2,zeros + ones + ones + ones + ones + ones)\n        val decimalOnesOnesOnesOnesOnesOnes\
    \ = math.pow(2,ones + ones + ones + ones + ones + ones)\n        val decimalZeroOnesOnesOnesOnesOnesOnes\
    \ = math.pow(2,zeros + ones + ones + ones + ones + ones + ones)\n        val decimalOnesOnesOnesOnesOnesOnesOnes\
    \ = math.pow(2,ones + ones + ones + ones + ones + ones + ones + ones)\n      \
    \  val decimalZeroOnesOnesOnesOnesOnesOnesOnes = math.pow(2,zeros + ones + ones\
    \ + ones + ones + ones + ones + ones + ones)\n        val decimalOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = math.pow(2,ones + ones + ones + ones + ones + ones + ones + ones + ones +\
    \ ones)\n        val decimalZeroOnesOnesOnesOnesOnesOnesOnesOnesOnes = math.pow(2,zeros\
    \ + ones + ones + ones + ones + ones + ones + ones + ones + ones + ones + ones)\n\
    \        val decimalOnes", "        val ones = arr.count(_ == 1)\n        val\
    \ twos = arr.count(_ == 2)\n        val threes = arr.count(_ == 3)\n        val\
    \ fours = arr.count(_ == 4)\n        val fives = arr.count(_ == 5)\n        val\
    \ sixes = arr.count(_ == 6)\n        val sevens = arr.count(_ == 7)\n        val\
    \ eights = arr.count(_ == 8)\n        val nines = arr.count(_ == 9)\n        val\
    \ tens = arr.count(_ == 10)\n        val hundreds = arr.count(_ == 100)\n    \
    \    val thousands = arr.count(_ == 1000)\n        val millions = arr.count(_\
    \ == 1000000)\n        val billions = arr.count(_ == 1000000000)\n        val\
    \ trillions = arr.count(_ == 1000000000000)\n        val quadrillions = arr.count(_\
    \ == 1000000000000000)\n        val quintillions = arr.count(_ == 1000000000000000000)\n\
    \        val sextillions = arr.count(_ == 10000000000000000000000)\n        val\
    \ septillions = arr.count(_ == 1000000000000000000000000)\n        val octillions\
    \ = arr.count(_ == 1000000000000000000000000000)\n        val nonillions = arr.count(_\
    \ == 10000000000000000000000000000000)\n        val decillions = arr.count(_ ==\
    \ 1000000000000000000000000000000000)\n        val undecillions = arr.count(_\
    \ == 10000000000000000000000000000000001)\n        val decillionsOrMore = arr.count(_\
    \ == 10000000000000000000000000000000010)\n        val undecillionsOrMore = arr.count(_\
    \ == 10000000000000000000000000000000011)\n        val decillionsOrLessOrMore\
    \ = arr.count(_ == 100000000000000000000000000000000100)\n        val undecillionsOrLessOrMore\
    \ = arr.count(_ == 100000000000000000000000000000000101)\n        val decillionsOrLessOrLess\
    \ = arr.count(_ == 1000000000000000000000000000000001000)\n        val undecillionsOrLessOrLess\
    \ = arr.count(_ == 1000000000000000000000000000000001001)\n        val decillionsOrLessOrLessOrMore\
    \ = arr.count(_ == 10000000000000000000000000000000010000)\n        val undecillionsOrLessOrLessOrMore\
    \ = arr.count(_ == 10000000000000000000000000000000010001)\n        val decillionsOrLessOrLessOrLessOrMore\
    \ = arr.count(_ == 100000000000000000000000000000000100000)\n        val undecillionsOrLessOrLessOrLessOrMore\
    \ = ", "        val ones = arr.filter(_ % 2 == 0).length\n        val twos = arr.filter(_\
    \ % 2 == 1).length\n        val threes = arr.filter(_ % 3 == 0).length\n     \
    \   val fours = arr.filter(_ % 4 == 0).length\n        val fives = arr.filter(_\
    \ % 5 == 0).length\n        val sixes = arr.filter(_ % 6 == 0).length\n      \
    \  val sevens = arr.filter(_ % 7 == 0).length\n        val eights = arr.filter(_\
    \ % 8 == 0).length\n        val nines = arr.filter(_ % 9 == 0).length\n      \
    \  val tens = arr.filter(_ % 10 == 0).length\n        val hundreds = arr.filter(_\
    \ % 100 == 0).length\n        val thousands = arr.filter(_ % 1000 == 0).length\n\
    \        val tenThousands = arr.filter(_ % 10000 == 0).length\n        val oneThousands\
    \ = arr.filter(_ % 100000 == 0).length\n        val oneMillion = arr.filter(_\
    \ % 1000000 == 0).length\n        val oneBillion = arr.filter(_ % 10000000 ==\
    \ 0).length\n        val oneTrillion = arr.filter(_ % 100000000 == 0).length\n\
    \        val oneQuadrillion = arr.filter(_ % 1000000000 == 0).length\n       \
    \ val oneQuintillion = arr.filter(_ % 10000000000 == 0).length\n        val oneGiganticillion\
    \ = arr.filter(_ % 1000000000000 == 0).length\n        val oneTrillion = arr.filter(_\
    \ % 10000000000000 == 0).length\n        val oneQuintillion = arr.filter(_ % 100000000000000\
    \ == 0).length\n        val oneGiganticillion = arr.filter(_ % 1000000000000000\
    \ == 0).length\n        val oneTrillion = arr.filter(_ % 10000000000000000 ==\
    \ 0).length\n        val oneQuintillion = arr.filter(_ % 100000000000000000 ==\
    \ 0).length\n        val oneGiganticillion = arr.filter(_ % 1000000000000000000\
    \ == 0).length\n        val oneTrillion = arr.filter(_ % 10000000000000000000\
    \ == 0).length\n        val oneQuintillion = arr.filter(_ % 100000000000000000000\
    \ == 0).length\n        val oneGiganticillion = arr.filter(_ % 1000000000000000000000\
    \ == 0).length\n        val oneTrillion = arr.filter(_ % 10000000000000000000000\
    \ == 0).length\n        val oneQuintillion = arr.filter(_ % 100000000000000000000000\
    \ == 0).length\n        val oneGiganticillion = arr.filter(_ % 1000000000000000000000000\
    \ == 0).", "        val ones = arr.map(x => if (x == 1) 1 else 0)\n        val\
    \ zeros = arr.map(x => if (x == 0) 0 else 1)\n        val onesCount = ones.toSet.size\n\
    \        val zerosCount = zeros.toSet.size\n        val onesZeros = ones.toSet.intersect(zeros.toSet)\n\
    \        val onesZeroCount = onesZeros.size\n        val onesZeroSum = onesZeros.toSet.sum\n\
    \        val onesZeroAvg = (onesZeroSum / onesZeroCount).toDouble\n        val\
    \ onesZeroMax = onesZeros.toSet.max\n        val onesZeroMin = onesZeros.toSet.min\n\
    \        val zerosCount = zeros.toSet.size\n        val zerosSum = zeros.toSet.sum\n\
    \        val zerosAvg = (zerosSum / zerosCount).toDouble\n        val zerosMax\
    \ = zeros.toSet.max\n        val zerosMin = zeros.toSet.min\n        val onesCount\
    \ = ones.toSet.size\n        val onesSum = ones.toSet.sum\n        val onesAvg\
    \ = (onesSum / onesCount).toDouble\n        val onesMax = ones.toSet.max\n   \
    \     val onesMin = ones.toSet.min\n        val onesSum = ones.toSet.sum\n   \
    \     val onesAvg = (onesSum / onesCount).toDouble\n        val onesMax = ones.toSet.max\n\
    \        val onesMin = ones.toSet.min\n        val onesSum = ones.toSet.sum\n\
    \        val onesAvg = (onesSum / onesCount).toDouble\n        val onesMax = ones.toSet.max\n\
    \        val onesMin = ones.toSet.min\n        val onesSum = ones.toSet.sum\n\
    \        val onesAvg = (onesSum / onesCount).toDouble\n        val onesMax = ones.toSet.max\n\
    \        val onesMin = ones.toSet.min\n        val onesSum = ones.toSet.sum\n\
    \        val onesAvg = (onesSum / onesCount).toDouble\n        val onesMax = ones.toSet.max\n\
    \        val onesMin = ones.toSet.min\n        val onesSum = ones.toSet.sum\n\
    \        val onesAvg = (onesSum / onesCount).toDouble\n        val onesMax = ones.toSet.max\n\
    \        val onesMin = ones.toSet.min\n        val onesSum = ", "        val ones\
    \ = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesArr\
    \ = arr.filter(x => x == 1).sortBy(x => x.toString.toInt)\n        val zerosArr\
    \ = arr.filter(x => x == 0).sortBy(x => x.toString.toInt)\n        val onesCount\
    \ = onesArr.length\n        val zerosCount = zerosArr.length\n        val onesSum\
    \ = onesArr.sum\n        val zerosSum = zerosArr.sum\n        val onesDecimal\
    \ = onesSum / onesCount\n        val zerosDecimal = zerosSum / zerosCount\n  \
    \      val onesDecimalString = onesDecimal.toString\n        val zerosDecimalString\
    \ = zerosDecimal.toString\n        val onesDecimalStringLength = onesDecimalString.length\n\
    \        val zerosDecimalStringLength = zerosDecimalString.length\n        val\
    \ onesDecimalStringLength = onesDecimalString.length\n        val zerosDecimalStringLength\
    \ = zerosDecimalString.length\n        val onesDecimalStringLength = onesDecimalString.length\n\
    \        val zerosDecimalStringLength = zerosDecimalString.length\n        val\
    \ onesDecimalStringLength = onesDecimalString.length\n        val zerosDecimalStringLength\
    \ = zerosDecimalString.length\n        val onesDecimalStringLength = onesDecimalString.length\n\
    \        val zerosDecimalStringLength = zerosDecimalString.length\n        val\
    \ onesDecimalStringLength = onesDecimalString.length\n        val zerosDecimalStringLength\
    \ = zerosDecimalString.length\n        val onesDecimalStringLength = onesDecimalString.length\n\
    \        val zerosDecimalStringLength = zerosDecimalString.length\n        val\
    \ onesDecimalStringLength = onesDecimalString.length\n        val zerosDecimalStringLength\
    \ = zerosDecimalString.length\n        val onesDecimalStringLength = onesDecimalString.length\n\
    \        val zerosDecimalStringLength = zerosDecimalString.length\n        val\
    \ onesDecimalStringLength = onesDecimalString.length\n        val zerosDecimalStringLength\
    \ = zerosDecimalString.length\n        val onesDecimalStringLength = onesDecimalString.length\n\
    \        val zerosDecimalStringLength = zerosDecimalString.length\n        val\
    \ onesDecimalStringLength = onesDecimalString.length\n        val zerosDecimalStringLength\
    \ = zerosDecimalString.length\n        val onesDecimalStringLength = onesDecimalString.length\n\
    \        val zerosDecimalStringLength = zerosDecimalString.length\n        val\
    \ onesDecimalStringLength = onesDecimalString.length\n        val zerosDecimalStringLength\
    \ = zerosDecimalString.length\n        val onesDecimalStringLength = onesDecimalString.length\n\
    \        val zerosDecimalStringLength = zerosDecimalString.length\n", "      \
    \  val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n     \
    \   val maxOnes = arr.count(_ == 1)\n        val maxZeros = arr.count(_ == 0)\n\
    \        val maxOnesDecimal = maxOnes.toDouble / ones\n        val maxZerosDecimal\
    \ = maxZeros.toDouble / zeros\n        val maxDecimal = math.max(maxOnesDecimal,\
    \ maxZerosDecimal)\n        val onesDecimal = ones / maxDecimal\n        val zerosDecimal\
    \ = zeros / maxDecimal\n        val decimal = math.max(onesDecimal, zerosDecimal)\n\
    \        val onesDecimalString = onesDecimal.toString\n        val zerosDecimalString\
    \ = zerosDecimal.toString\n        val decimalString = decimal.toString\n    \
    \    val decimalStringWithZeros = decimalString\n        val decimalStringWithZeros\
    \ = decimalStringWithZeros.padTo(maxDecimal.toString, \"0\")\n        val decimalStringWithZeros\
    \ = decimalStringWithZeros.padTo(maxDecimal.toString, \"0\")\n        val decimalStringWithZeros\
    \ = decimalStringWithZeros.padTo(maxDecimal.toString, \"0\")\n        val decimalStringWithZeros\
    \ = decimalStringWithZeros.padTo(maxDecimal.toString, \"0\")\n        val decimalStringWithZeros\
    \ = decimalStringWithZeros.padTo(maxDecimal.toString, \"0\")\n        val decimalStringWithZeros\
    \ = decimalStringWithZeros.padTo(maxDecimal.toString, \"0\")\n        val decimalStringWithZeros\
    \ = decimalStringWithZeros.padTo(maxDecimal.toString, \"0\")\n        val decimalStringWithZeros\
    \ = decimalStringWithZeros.padTo(maxDecimal.toString, \"0\")\n        val decimalStringWithZeros\
    \ = decimalStringWithZeros.padTo(maxDecimal.toString, \"0\")\n        val decimalStringWithZeros\
    \ = decimalStringWithZeros.padTo(maxDecimal.toString, \"0\")\n        val decimalStringWithZeros\
    \ = decimalStringWithZeros.padTo(maxDecimal.toString, \"0\")\n        val decimalStringWithZeros\
    \ = decimalStringWithZeros.padTo(maxDecimal.toString, \"0\")\n        val decimalStringWithZeros\
    \ = decimalStringWithZeros.padTo(maxDecimal.toString, \"0\")\n        val decimalStringWithZeros\
    \ = decimalStringWithZeros.padTo(maxDecimal.toString, \"0\")\n        val decimalStringWithZeros\
    \ = decimalStringWithZeros.padTo(maxDecimal.toString, \"0\")\n        val decimalStringWithZeros\
    \ = decimalStringWithZeros.padTo(maxDecimal.toString, \"0\")\n        val decimalStringWithZeros\
    \ = decimal", "        val ones = arr.count(x => x == 1)\n        val decs = arr.map(x\
    \ => math.abs(math.log2(x)))\n        val sortedArr = arr.sortBy(x => math.abs(math.log2(x)))\n\
    \        val sortedDecs = decs.sortBy(x => x)\n        val sortedOnes = ones.sortBy(x\
    \ => x)\n        sortedArr ++ sortedDecs ++ sortedOnes", "        val ones = arr.filter(_\
    \ % 2 == 0).length\n        val zeros = arr.filter(_ % 2 == 1).length\n      \
    \  val onesArr = arr.filter(_ % 2 == 0).sortBy(x => math.abs(x))\n        val\
    \ zerosArr = arr.filter(_ % 2 == 1).sortBy(x => math.abs(x))\n        val onesArr\
    \ = onesArr.sortBy(x => math.abs(x))\n        val zerosArr = zerosArr.sortBy(x\
    \ => math.abs(x))\n        val onesArr = onesArr.sortBy(x => math.abs(x))\n  \
    \      val zerosArr = zerosArr.sortBy(x => math.abs(x))\n        val onesArr =\
    \ onesArr.sortBy(x => math.abs(x))\n        val zerosArr = zerosArr.sortBy(x =>\
    \ math.abs(x))\n        val onesArr = onesArr.sortBy(x => math.abs(x))\n     \
    \   val zerosArr = zerosArr.sortBy(x => math.abs(x))\n        val onesArr = onesArr.sortBy(x\
    \ => math.abs(x))\n        val zerosArr = zerosArr.sortBy(x => math.abs(x))\n\
    \        val onesArr = onesArr.sortBy(x => math.abs(x))\n        val zerosArr\
    \ = zerosArr.sortBy(x => math.abs(x))\n        val onesArr = onesArr.sortBy(x\
    \ => math.abs(x))\n        val zerosArr = zerosArr.sortBy(x => math.abs(x))\n\
    \        val onesArr = onesArr.sortBy(x => math.abs(x))\n        val zerosArr\
    \ = zerosArr.sortBy(x => math.abs(x))\n        val onesArr = onesArr.sortBy(x\
    \ => math.abs(x))\n        val zerosArr = zerosArr.sortBy(x => math.abs(x))\n\
    \        val onesArr = onesArr.sortBy(x => math.abs(x))\n        val zerosArr\
    \ = zerosArr.sortBy(x => math.abs(x))\n        val onesArr = onesArr.sortBy(x\
    \ => math.abs(x))\n        val zerosArr = zerosArr.sortBy(x => math.abs(x))\n\
    \        val onesArr = onesArr.sortBy(x => math.abs(x))\n        val zerosArr\
    \ = zerosArr.sortBy(x => math.abs(x))\n        val onesArr = onesArr.sortBy(x\
    \ => math.abs(x))\n        val zerosArr = zerosArr.sortBy(x => math.abs(x))\n\
    \        val onesArr = one", "        val ones = arr.count(_ == 1)\n        val\
    \ decimals = arr.count(_ > 1)\n        val onesDecimals = arr.count(_ == 1 &&\
    \ _ > 1)\n        val decimalsDecimals = arr.count(_ > 1 && _ > 1)\n        val\
    \ onesDecimalsDecimals = arr.count(_ == 1 && _ > 1 && _ > 1)\n        val decimalsDecimalsDecimals\
    \ = arr.count(_ > 1 && _ > 1 && _ > 1)\n        val onesDecimalsDecimalsDecimals\
    \ = arr.count(_ == 1 && _ > 1 && _ > 1 && _ > 1)\n        val decimalsDecimalsDecimalsDecimals\
    \ = arr.count(_ > 1 && _ > 1 && _ > 1 && _ > 1)\n        val onesDecimalsDecimalsDecimalsDecimals\
    \ = arr.count(_ == 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1)\n        val decimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.count(_ > 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1)\n        val onesDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.count(_ == 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1)\n        val\
    \ decimalsDecimalsDecimalsDecimalsDecimalsDecimals = arr.count(_ > 1 && _ > 1\
    \ && _ > 1 && _ > 1 && _ > 1 && _ > 1)\n        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.count(_ == 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1)\n\
    \        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals = arr.count(_\
    \ > 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1)\n      \
    \  val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals = arr.count(_\
    \ == 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1)\n\
    \        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.count(_ > 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1 && _\
    \ > 1 && _ > 1 && _ > 1)\n        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.count(_ == 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1 &&\
    \ _ > 1 && _ > 1 && _ > 1 && _ > 1 && _ > 1)", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesArray = arr.map(x\
    \ => if (x == 1) 1 else 0)\n        val zerosArray = arr.map(x => if (x == 0)\
    \ 0 else 1)\n        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArrayLength / 2\n   \
    \     val zerosArrayLength = zerosArrayLength / 2\n        val onesArrayLength\
    \ = onesArrayLength * 2\n        val zerosArrayLength = zerosArrayLength * 2\n\
    \        val onesArrayLength = onesArrayLength * 3\n        val zerosArrayLength\
    \ = zerosArrayLength * 3\n        val onesArrayLength = onesArrayLength * 4\n\
    \        val zerosArrayLength = zerosArrayLength * 4\n        val onesArrayLength\
    \ = onesArrayLength * 5\n        val zerosArrayLength = zerosArrayLength * 5\n\
    \        val onesArrayLength = onesArrayLength * 6\n        val zerosArrayLength\
    \ = zerosArrayLength * 6\n        val onesArrayLength = onesArrayLength * 7\n\
    \        val zerosArrayLength = zerosArrayLength * 7\n        val onesArrayLength\
    \ = onesArrayLength * 8\n        val zerosArrayLength = zerosArrayLength * 8\n\
    \        val onesArrayLength = onesArrayLength * 9\n        val zerosArrayLength\
    \ = zerosArrayLength * 9\n        val onesArrayLength = onesArrayLength * 10\n\
    \        val zerosArrayLength = zerosArrayLength * 10\n        val onesArrayLength\
    \ = onesArrayLength * 11\n        val zerosArrayLength = zerosArrayLength * 11\n\
    \        val onesArrayLength = onesArrayLength * 12\n        val zerosArrayLength\
    \ = zerosArrayLength * 12\n        val onesArrayLength = onesArrayLength * 13\n\
    \        val zerosArrayLength = zerosArrayLength * 13\n        val onesArrayLength\
    \ = onesArrayLength * 14\n        val zerosArrayLength = zerosArrayLength * 14\n\
    \        val onesArrayLength = onesArrayLength * 15\n        val zerosArrayLength\
    \ = zerosArrayLength * 15\n        val onesArrayLength = onesArrayLength * 16\n\
    \        val zerosArrayLength = zerosArrayLength * 16\n        val onesArrayLength\
    \ = onesArrayLength * 17\n        val zerosArrayLength = zerosArrayLength * 17\n\
    \        val onesArrayLength = onesArrayLength * 18\n        val zerosArrayLength\
    \ = zerosArrayLength * 18\n        val onesArrayLength = onesArrayLength * ",
  "        val ones = arr.count(x => x == 1)\n        val decimals = arr.count(x =>\
    \ x == 0)\n        val maxOnes = arr.count(x => x == 1)\n        val maxDecimals\
    \ = arr.count(x => x == 0)\n        val maxOnesDecimals = maxOnes * decimals\n\
    \        val maxDecimalsOnes = maxDecimals * ones\n        val maxDecimalsOnesDecimals\
    \ = maxDecimalsOnes * decimals\n        val maxDecimalsOnesDecimalsOnes = maxDecimalsOnesDecimals\
    \ * ones\n        val maxDecimalsOnesDecimalsOnesOnes = maxDecimalsOnesDecimalsOnes\
    \ * ones\n        val maxDecimalsOnesDecimalsOnesOnesOnes = maxDecimalsOnesDecimalsOnesOnes\
    \ * ones\n        val maxDecimalsOnesDecimalsOnesOnesOnesOnes = maxDecimalsOnesDecimalsOnesOnesOnes\
    \ * ones\n        val maxDecimalsOnesDecimalsOnesOnesOnesOnesOnes = maxDecimalsOnesDecimalsOnesOnesOnesOnes\
    \ * ones\n        val maxDecimalsOnesDecimalsOnesOnesOnesOnesOnesOnes = maxDecimalsOnesDecimalsOnesOnesOnesOnesOnes\
    \ * ones\n        val maxDecimalsOnesDecimalsOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = maxDecimalsOnesDecimalsOnesOnesOnesOnesOnesOnes * ones\n        val maxDecimalsOnesDecimalsOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = maxDecimalsOnesDecimalsOnesOnesOnesOnesOnesOnesOnesOnes * ones\n        val\
    \ maxDecimalsOnesDecimalsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes = maxDecimalsOnesDecimalsOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ * ones\n        val maxDecimalsOnesDecimalsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = maxDecimalsOnesDecimalsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes * ones\n \
    \       val maxDecimalsOnesDecimalsOnesOnes", "        val ones = arr.filter(_\
    \ % 2 == 0).length\n        val decs = arr.filter(_ % 2 == 1).map(_.toString.toInt).sortBy(_.toString.toInt).reverse\n\
    \        val res = decs.zip(ones).sortBy(_._1).map(_._2)\n        arr.filter(_\
    \ % 2 == 0).sortBy(_.toString.toInt).reverse.map(_.toString.toInt).sortBy(_._1).map(_._2)",
  "        val ones = arr.filter(x => x % 2 == 0).length\n        val twos = arr.filter(x\
    \ => x % 2 == 1).length\n        val decimals = arr.map(x => math.log10(x)).reduceLeft(_\
    \ + _)\n        val decimalsDiff = decimals - ones - twos\n        val decimalsDiffInt\
    \ = decimalsDiff % 1\n        val decimalsDiffIntInt = math.round(decimalsDiffInt)\n\
    \        val decimalsDiffIntIntInt = math.round(decimalsDiffIntInt)\n        val\
    \ decimalsDiffIntIntIntInt = math.round(decimalsDiffIntIntInt)\n        val decimalsDiffIntIntIntIntInt\
    \ = math.round(decimalsDiffIntIntIntIntInt)\n        val decimalsDiffIntIntIntIntIntInt\
    \ = math.round(decimalsDiffIntIntIntIntIntInt)\n        val decimalsDiffIntIntIntIntIntIntInt\
    \ = math.round(decimalsDiffIntIntIntIntIntIntInt)\n        val decimalsDiffIntIntIntIntIntIntIntInt\
    \ = math.round(decimalsDiffIntIntIntIntIntIntIntIntInt)\n        val decimalsDiffIntIntIntIntIntIntIntIntInt\
    \ = math.round(decimalsDiffIntIntIntIntIntIntIntIntIntIntInt)\n        val decimalsDiffIntIntIntIntIntIntIntIntIntInt\
    \ = math.round(decimalsDiffIntIntIntIntIntIntIntIntIntIntIntInt)\n        val\
    \ decimalsDiffIntIntIntIntIntIntIntIntIntIntInt = math.round(decimalsDiffIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val decimalsDiffIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(decimalsDiffIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val decimalsDiffIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(decimalsDiffIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val decimalsDiffIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(decimalsDiffIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val decimalsDiffIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = math.round(decimalsDiffIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt",
  "        val ones = arr.filter(x => x == 1).size\n        val zeros = arr.filter(x\
    \ => x == 0).size\n        val maxOnes = arr.filter(x => x == 1).max\n       \
    \ val maxZeros = arr.filter(x => x == 0).max\n        val maxOnesDecimal = maxOnes.toString.toInt\n\
    \        val maxZerosDecimal = maxZeros.toString.toInt\n        val maxOnesDecimalDecimal\
    \ = maxOnesDecimal.toString.toInt\n        val maxZerosDecimalDecimal = maxZerosDecimal.toString.toInt\n\
    \        val maxOnesDecimalDecimalDecimal = maxOnesDecimalDecimal.toString.toInt\n\
    \        val maxZerosDecimalDecimalDecimal = maxZerosDecimalDecimal.toString.toInt\n\
    \        val maxOnesDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimal.toString.toInt\n\
    \        val maxZerosDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimal.toString.toInt\n\
    \        val maxOnesDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val maxZerosDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n  \
    \      val maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        ", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesArray = arr.map(x => if (x == 1) 1 else 0)\n        val\
    \ zerosArray = arr.map(x => if (x == 0) 0 else 1)\n        val onesArraySorted\
    \ = onesArray.sortWith(_ < _)\n        val zerosArraySorted = zerosArray.sortWith(_\
    \ < _)\n        val result = onesArraySorted.zip(zerosArraySorted).sortWith(_._1\
    \ < _._1)\n        result.map(x => x._1 + x._2)", "        val ones = arr.count(_\
    \ == 1)\n        val decimals = arr.count(_ > 0)\n        val onesDecimals = ones\
    \ * decimals\n        val decimalsDecimals = decimals * ones\n        val onesDecimalsDecimals\
    \ = onesDecimals * decimals\n        val onesDecimalsDecimalsDecimals = onesDecimalsDecimals\
    \ * decimals\n        val onesDecimalsDecimalsDecimalsDecimals = onesDecimalsDecimalsDecimals\
    \ * decimals\n        val onesDecimalsDecimalsDecimalsDecimalsDecimals = onesDecimalsDecimalsDecimalsDecimals\
    \ * decimals\n        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = onesDecimalsDecimalsDecimalsDecimalsDecimals * decimals\n        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimals * decimals\n        val\
    \ onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals = onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ * decimals\n        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals * decimals\n\
    \        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals * decimals\n\
    \        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ * decimals\n        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ * decimals\n        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ * decimals\n        val onesDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = ", "        val ones = arr.filter(x => x == 1).length\n        val zeros =\
    \ arr.filter(x => x == 0).length\n        val decimal = arr.map(x => math.pow(2,x)).sum\n\
    \        val onesDecimal = math.pow(2,ones)\n        val zerosDecimal = math.pow(2,zeros)\n\
    \        val decimalDecimal = math.pow(2,decimal)\n        val onesDecimalDecimal\
    \ = math.pow(2,onesDecimal)\n        val zerosDecimalDecimal = math.pow(2,zerosDecimal)\n\
    \        val decimalDecimalDecimal = math.pow(2,decimalDecimal)\n        val onesDecimalDecimalDecimal\
    \ = math.pow(2,onesDecimalDecimal)\n        val zerosDecimalDecimalDecimal = math.pow(2,zerosDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimal = math.pow(2,decimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimal = math.pow(2,onesDecimalDecimalDecimal)\n\
    \        val zerosDecimalDecimalDecimalDecimal = math.pow(2,zerosDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimal = math.pow(2,decimalDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = math.pow(2,onesDecimalDecimalDecimalDecimal)\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = math.pow(2,zerosDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimal = math.pow(2,decimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(2,onesDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(2,zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(2,decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(2,onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(2,zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(2,decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(2,onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(2,zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ math.pow(2,decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val onesDecimal", "        val ones = arr.count(_ == 1)\n        val\
    \ zeros = arr.count(_ == 0)\n        val onesDec = arr.map(x => (x >>> 0).toInt)\n\
    \        val zerosDec = arr.map(x => (x >>> 0).toInt)\n        val onesDecSorted\
    \ = onesDec.sortWith(_ > _)\n        val zerosDecSorted = zerosDec.sortWith(_\
    \ > _)\n        val onesDecSortedSortedWithZeros = onesDecSorted.zip(zerosDecSorted).sortWith(_._1\
    \ > _._1)\n        val zerosDecSortedSortedWithOnes = zerosDecSorted.zip(onesDecSortedSortedWithZeros).sortWith(_._1\
    \ < _._1)\n        val sortedArray = onesDecSortedSortedWithOnes.zip(zerosDecSortedSortedWithOnes).sortWith(_._1\
    \ < _._1)\n        sortedArray.map(x => x._1)", "        val ones = arr.map(x\
    \ => if (x == 1) 1 else 0)\n        val zeros = arr.map(x => if (x == 0) 0 else\
    \ 1)\n        val onesCount = ones.toSet.size\n        val zerosCount = zeros.toSet.size\n\
    \        val onesZeros = ones.toSet intersect zeros.toSet\n        val onesZerosCount\
    \ = onesZeros.size\n        val onesZerosZeros = onesZeros.toSet intersect zeros.toSet\n\
    \        val onesZerosZerosCount = onesZerosZeros.size\n        val onesZerosZerosZerosCount\
    \ = onesZerosZeros.toSet intersect zeros.toSet\n        val onesZerosZerosZerosZerosCount\
    \ = onesZerosZerosZeros.toSet intersect zeros.toSet\n        val onesZerosZerosZerosZerosZerosCount\
    \ = onesZerosZerosZerosZeros.toSet intersect zeros.toSet\n        val onesZerosZerosZerosZerosZerosZerosCount\
    \ = onesZerosZerosZerosZerosZeros.toSet intersect zeros.toSet\n        val onesZerosZerosZerosZerosZerosZerosCount\
    \ = onesZerosZerosZerosZerosZerosZeros.toSet intersect zeros.toSet\n        val\
    \ onesZerosZerosZerosZerosZerosZerosZerosCount = onesZerosZerosZerosZerosZerosZerosZeros.toSet\
    \ intersect zeros.toSet\n        val onesZerosZerosZerosZerosZerosZerosZerosCount\
    \ = onesZerosZerosZerosZerosZerosZerosZeros.toSet intersect zeros.toSet\n    \
    \    val onesZerosZerosZerosZerosZerosZerosZerosZerosCount = onesZerosZerosZerosZerosZerosZerosZeros",
  "        val ones = arr.filter(_ % 2 == 0).length\n        val zeros = arr.filter(_\
    \ % 2 == 1).length\n        val maxOnes = arr.filter(_ % 2 == 0).max\n       \
    \ val maxZeros = arr.filter(_ % 2 == 1).max\n        val maxOnesDec = maxOnes.toString.toInt\n\
    \        val maxZerosDec = maxZeros.toString.toInt\n        val maxOnesBin = maxOnes.toString.toBinaryString\n\
    \        val maxZerosBin = maxZeros.toString.toBinaryString\n        val maxOnesBinDec\
    \ = maxOnesBin.toString.toInt\n        val maxZerosBinDec = maxZerosBin.toString.toInt\n\
    \        val maxOnesBinBin = maxOnesBin.toString.toBinaryString\n        val maxZerosBinBin\
    \ = maxZerosBin.toString.toBinaryString\n        val maxOnesBinBinDec = maxOnesBinBin.toString.toInt\n\
    \        val maxZerosBinBinDec = maxZerosBinBin.toString.toInt\n        val maxOnesBinBinBinBin\
    \ = maxOnesBinBin.toString.toBinaryString\n        val maxZerosBinBinBin = maxZerosBinBin.toString.toBinaryString\n\
    \        val maxOnesBinBinBinDec = maxOnesBinBinDec.toString.toInt\n        val\
    \ maxZerosBinBinDec = maxZerosBinBinDec.toString.toInt\n        val maxOnesBinBinBinBin\
    \ = maxOnesBinBinBin.toString.toBinaryString\n        val maxZerosBinBinBin =\
    \ maxZerosBinBin.toString.toBinaryString\n        val maxOnesBinBinBinDec = maxOnesBinBinDec.toString.toInt\n\
    \        val maxZerosBinBinDec = maxZerosBinBinDec.toString.toInt\n        val\
    \ maxOnesBinBinBinBin = maxOnesBinBinBin.toString.toBinaryString\n        val\
    \ maxZerosBinBinBin = maxZerosBinBin.toString.toBinaryString\n        val maxOnesBinBinBinDec\
    \ = maxOnesBinBinDec.toString.toInt\n        val maxZerosBinBinDec = maxZerosBinBinDec.toString.toInt\n\
    \        val maxOnesBinBinBinBin = maxOnesBinBinBin", "        val ones = arr.map(x\
    \ => if (x == 1) 1 else 0)\n        val onesCount = ones.toSet\n        val sortedArray\
    \ = arr.sortWith((x, y) => onesCount.contains(y) - onesCount.contains(x))\n  \
    \      sortedArray", "        val ones = arr.map(x => if (x == 1) 1 else 0)\n\
    \        val twos = arr.map(x => if (x == 2) 2 else 0)\n        val threes = arr.map(x\
    \ => if (x == 3) 3 else 0)\n        val fours = arr.map(x => if (x == 4) 4 else\
    \ 0)\n        val fives = arr.map(x => if (x == 5) 5 else 0)\n        val sixes\
    \ = arr.map(x => if (x == 6) 6 else 0)\n        val sevens = arr.map(x => if (x\
    \ == 7) 7 else 0)\n        val eights = arr.map(x => if (x == 8) 8 else 0)\n \
    \       val nines = arr.map(x => if (x == 9) 9 else 0)\n        val tens = arr.map(x\
    \ => if (x == 10) 10 else 0)\n        val hundreds = arr.map(x => if (x == 11)\
    \ 11 else 0)\n        val thousands = arr.map(x => if (x == 100) 100 else 0)\n\
    \        val ten_thousands = arr.map(x => if (x == 1000) 1000 else 0)\n      \
    \  val hundred_thousands = arr.map(x => if (x == 10000) 10000 else 0)\n      \
    \  val millions = arr.map(x => if (x == 1000000) 1000000 else 0)\n        val\
    \ billions = arr.map(x => if (x == 1000000000) 1000000000 else 0)\n        val\
    \ trillions = arr.map(x => if (x == 1000000000000) 1000000000000 else 0)\n   \
    \     val quadrillions = arr.map(x => if (x == 1000000000000000) 1000000000000000\
    \ else 0)\n        val quintillions = arr.map(x => if (x == 1000000000000000000)\
    \ 1000000000000000000 else 0)\n        val ones_count = arr.count(x => x == 1)\n\
    \        val twos_count = arr.count(x => x == 2)\n        val threes_count = arr.count(x\
    \ => x == 3)\n        val fours_count = arr.count(x => x == 4)\n        val fives_count\
    \ = arr.count(x => x == 5)\n        val sixes_count = arr.count(x => x == 6)\n\
    \        val sevens_count = arr.count(x => x == 7)\n        val eights_count =\
    \ arr.count(x => x == 8)\n        val nines_count = arr.count(x => x == 9)\n \
    \       val tens_count = arr.count(x => x == 10)\n        val hundreds_count =\
    \ arr.count(x => x == 11)\n        val thousands_count = arr.count(x => x == 100)\n\
    \        val ten_thousands_count = arr.count(x => x == 1000)\n        val hundred_thousands_count\
    \ = arr.count(x => ", "        val ones = arr.count(_ == 1)\n        val twos\
    \ = arr.count(_ == 2)\n        val threes = arr.count(_ == 3)\n        val fours\
    \ = arr.count(_ == 4)\n        val fives = arr.count(_ == 5)\n        val sixes\
    \ = arr.count(_ == 6)\n        val sevens = arr.count(_ == 7)\n        val eights\
    \ = arr.count(_ == 8)\n        val nines = arr.count(_ == 9)\n        val tens\
    \ = arr.count(_ == 10)\n        val hundreds = arr.count(_ == 100)\n        val\
    \ thousands = arr.count(_ == 1000)\n        val millions = arr.count(_ == 1000000)\n\
    \        val billions = arr.count(_ == 1000000000)\n        val trillions = arr.count(_\
    \ == 1000000000000)\n        val quadrillions = arr.count(_ == 1000000000000000)\n\
    \        val quintillions = arr.count(_ == 1000000000000000000)\n        val sextillions\
    \ = arr.count(_ == 10000000000000000000000)\n        val septillions = arr.count(_\
    \ == 1000000000000000000000000)\n        val octillions = arr.count(_ == 1000000000000000000000000000)\n\
    \        val nonillions = arr.count(_ == 10000000000000000000000000000000)\n \
    \       val decillions = arr.count(_ == 1000000000000000000000000000000000)\n\
    \        val undecillions = arr.count(_ == 10000000000000000000000000000000001)\n\
    \        val decillionsOne = arr.count(_ == 10000000000000000000000000000000010)\n\
    \        val undecillionsOne = arr.count(_ == 10000000000000000000000000000000011)\n\
    \        val decillionsTwo = arr.count(_ == 100000000000000000000000000000000100)\n\
    \        val undecillionsTwo = arr.count(_ == 100000000000000000000000000000000101)\n\
    \        val decillionsThree = arr.count(_ == 1000000000000000000000000000000001000)\n\
    \        val undecillionsThree = arr.count(_ == 1000000000000000000000000000000001001)\n\
    \        val decillionsFour = arr.count(_ == 10000000000000000000000000000000010000)\n\
    \        val undecillionsFour = arr.count(_ == 10000000000000000000000000000000010001)\n\
    \        val decillionsFive = arr.count(_ == 100000000000000000000000000000000100000)\n\
    \        val undecillionsFive = arr.count(_ == 100000000000000000000000000000000100001)\n\
    \        val decillionsSix = arr.count(_ == 1000000000000000000000000000000001000000)\n\
    \        val undecillion", "        val ones = arr.filter(x => x % 2 == 0).length\n\
    \        val twos = arr.filter(x => x % 2 == 1).length\n        val threes = arr.filter(x\
    \ => x % 3 == 0).length\n        val fours = arr.filter(x => x % 4 == 0).length\n\
    \        val fives = arr.filter(x => x % 5 == 0).length\n        val sixes = arr.filter(x\
    \ => x % 6 == 0).length\n        val sevens = arr.filter(x => x % 7 == 0).length\n\
    \        val eights = arr.filter(x => x % 8 == 0).length\n        val nines =\
    \ arr.filter(x => x % 9 == 0).length\n        val tens = arr.filter(x => x % 10\
    \ == 0).length\n        val elevens = arr.filter(x => x % 11 == 0).length\n  \
    \      val twelves = arr.filter(x => x % 12 == 0).length\n        val thirteens\
    \ = arr.filter(x => x % 13 == 0).length\n        val fourteens = arr.filter(x\
    \ => x % 14 == 0).length\n        val fifteens = arr.filter(x => x % 15 == 0).length\n\
    \        val sixteens = arr.filter(x => x % 16 == 0).length\n        val seventeens\
    \ = arr.filter(x => x % 17 == 0).length\n        val eighteens = arr.filter(x\
    \ => x % 18 == 0).length\n        val nineteens = arr.filter(x => x % 19 == 0).length\n\
    \        val twenties = arr.filter(x => x % 20 == 0).length\n        val thirties\
    \ = arr.filter(x => x % 30 == 0).length\n        val forties = arr.filter(x =>\
    \ x % 40 == 0).length\n        val fifties = arr.filter(x => x % 50 == 0).length\n\
    \        val sixties = arr.filter(x => x % 60 == 0).length\n        val seventies\
    \ = arr.filter(x => x % 70 == 0).length\n        val eighties = arr.filter(x =>\
    \ x % 80 == 0).length\n        val nineties = arr.filter(x => x % 90 == 0).length\n\
    \        val hundreds = arr.filter(x => x % 100 == 0).length\n        val thousands\
    \ = arr.filter(x => x % 1000 == 0).length\n        val millions = arr.filter(x\
    \ => x % 1000000 == 0).length\n        val billions = arr.filter(x => x % 1000000000\
    \ == 0).length\n        val trillions = arr.filter(x => x % 1000000000000 == ",
  "        val ones = arr.filter(_ % 2 == 0).length\n        val zeros = arr.filter(_\
    \ % 2 == 1).length\n        val decimal = arr.filter(_ % 2 == 0).sum / 2\n   \
    \     val decimal2 = arr.filter(_ % 2 == 1).sum / 2\n        val decimal3 = arr.filter(_\
    \ % 2 == 0).sum / 3\n        val decimal4 = arr.filter(_ % 2 == 1).sum / 3\n \
    \       val decimal5 = arr.filter(_ % 2 == 0).sum / 5\n        val decimal6 =\
    \ arr.filter(_ % 2 == 1).sum / 5\n        val decimal7 = arr.filter(_ % 2 == 0).sum\
    \ / 7\n        val decimal8 = arr.filter(_ % 2 == 1).sum / 7\n        val decimal9\
    \ = arr.filter(_ % 2 == 0).sum / 9\n        val decimal10 = arr.filter(_ % 2 ==\
    \ 1).sum / 9\n        val decimal11 = arr.filter(_ % 2 == 0).sum / 11\n      \
    \  val decimal12 = arr.filter(_ % 2 == 1).sum / 11\n        val decimal13 = arr.filter(_\
    \ % 2 == 0).sum / 13\n        val decimal14 = arr.filter(_ % 2 == 1).sum / 13\n\
    \        val decimal15 = arr.filter(_ % 2 == 0).sum / 15\n        val decimal16\
    \ = arr.filter(_ % 2 == 1).sum / 15\n        val decimal17 = arr.filter(_ % 2\
    \ == 0).sum / 17\n        val decimal18 = arr.filter(_ % 2 == 1).sum / 17\n  \
    \      val decimal19 = arr.filter(_ % 2 == 0).sum / 19\n        val decimal20\
    \ = arr.filter(_ % 2 == 1).sum / 19\n        val decimal21 = arr.filter(_ % 2\
    \ == 0).sum / 21\n        val decimal22 = arr.filter(_ % 2 == 1).sum / 21\n  \
    \      val decimal23 = arr.filter(_ % 2 == 0).sum / 23\n        val decimal24\
    \ = arr.filter(_ % 2 == 1).sum / 23\n        val decimal25 = arr.filter(_ % 2\
    \ == 0).sum / 25\n        val decimal26 = arr.filter(_ % 2 == 1).sum / 25\n  \
    \      val decimal27 = arr.filter(_ % 2 == 0).sum / 27\n        val decimal28\
    \ = arr.filter(_ % 2 == 1).sum / 27\n        val decimal29 = arr.filter(_ % 2\
    \ == 0).sum / 29\n        val decimal30 = arr.filter(_ % 2 == 1).sum / 29\n  \
    \      val decimal31 = arr.filter(_ % 2 == 0).sum / 31\n        val decimal32\
    \ = arr.filter(_ % 2 == 1).sum / 31\n        val decimal33 = arr.filter(_ % 2\
    \ == 0).sum / 33\n        val decimal34 = ", "        val ones = arr.map(x =>\
    \ if (x == 1) 1 else 0)\n        val twos = arr.map(x => if (x == 2) 2 else 0)\n\
    \        val threes = arr.map(x => if (x == 3) 3 else 0)\n        val fours =\
    \ arr.map(x => if (x == 4) 4 else 0)\n        val fives = arr.map(x => if (x ==\
    \ 5) 5 else 0)\n        val sixes = arr.map(x => if (x == 6) 6 else 0)\n     \
    \   val sevens = arr.map(x => if (x == 7) 7 else 0)\n        val eights = arr.map(x\
    \ => if (x == 8) 8 else 0)\n        val nines = arr.map(x => if (x == 9) 9 else\
    \ 0)\n        val tens = arr.map(x => if (x == 10) 10 else 0)\n        val hundreds\
    \ = arr.map(x => if (x == 11) 11 else 0)\n        val thousands = arr.map(x =>\
    \ if (x == 100) 100 else 0)\n        val ten_thousands = arr.map(x => if (x ==\
    \ 1000) 1000 else 0)\n        val hundred_thousands = arr.map(x => if (x == 10000)\
    \ 10000 else 0)\n        val millions = arr.map(x => if (x == 1000000) 1000000\
    \ else 0)\n        val billions = arr.map(x => if (x == 1000000000) 1000000000\
    \ else 0)\n        val trillions = arr.map(x => if (x == 1000000000000) 1000000000000\
    \ else 0)\n        val quadrillions = arr.map(x => if (x == 1000000000000000)\
    \ 1000000000000000 else 0)\n        val quintillions = arr.map(x => if (x == 1000000000000000000)\
    \ 1000000000000000000 else 0)\n        val ones_count = ones.count(_ > 0)\n  \
    \      val twos_count = twos.count(_ > 0)\n        val threes_count = threes.count(_\
    \ > 0)\n        val fours_count = fours.count(_ > 0)\n        val fives_count\
    \ = fives.count(_ > 0)\n        val sixes_count = sixes.count(_ > 0)\n       \
    \ val sevens_count = sevens.count(_ > 0)\n        val eights_count = eights.count(_\
    \ > 0)\n        val nines_count = nines.count(_ > 0)\n        val tens_count =\
    \ tens.count(_ > 0)\n        val hundreds_count = hundreds.count(_ > 0)\n    \
    \    val thousands_count = thousands.count(_ > 0)\n        val ten_thousands_count\
    \ = ten_thousands.count(_ > 0)\n        val hundred_", "        val ones = arr.map(x\
    \ => if (x == 1) 1 else 0)\n        val twos = arr.map(x => if (x == 2) 1 else\
    \ 0)\n        val threes = arr.map(x => if (x == 3) 1 else 0)\n        val fours\
    \ = arr.map(x => if (x == 4) 1 else 0)\n        val fives = arr.map(x => if (x\
    \ == 5) 1 else 0)\n        val sixes = arr.map(x => if (x == 6) 1 else 0)\n  \
    \      val sevens = arr.map(x => if (x == 7) 1 else 0)\n        val eights = arr.map(x\
    \ => if (x == 8) 1 else 0)\n        val nines = arr.map(x => if (x == 9) 1 else\
    \ 0)\n        val tens = arr.map(x => if (x == 10) 1 else 0)\n        val hundreds\
    \ = arr.map(x => if (x == 11) 1 else 0)\n        val thousands = arr.map(x =>\
    \ if (x == 100) 1 else 0)\n        val millions = arr.map(x => if (x == 1000)\
    \ 1 else 0)\n        val billions = arr.map(x => if (x == 10000) 1 else 0)\n \
    \       val trillions = arr.map(x => if (x == 100000) 1 else 0)\n        val quadrillions\
    \ = arr.map(x => if (x == 1000000) 1 else 0)\n        val quintillions = arr.map(x\
    \ => if (x == 100000000) 1 else 0)\n        val onesAndZeroes = arr.map(x => if\
    \ (x == 1) 0 else 1)\n        val onesAndOnes = arr.map(x => if (x == 1) 1 else\
    \ 0)\n        val onesAndTwos = arr.map(x => if (x == 1) 2 else 0)\n        val\
    \ onesAndThrees = arr.map(x => if (x == 1) 3 else 0)\n        val onesAndFours\
    \ = arr.map(x => if (x == 1) 4 else 0)\n        val onesAndFives = arr.map(x =>\
    \ if (x == 1) 5 else 0)\n        val onesAndSixes = arr.map(x => if (x == 1) 6\
    \ else 0)\n        val onesAndSevens = arr.map(x => if (x == 1) 7 else 0)\n  \
    \      val onesAndEights = arr.map(x => if (x == 1) 8 else 0)\n        val onesAndNines\
    \ = arr.map(x => if (x == 1) 9 else 0)\n        val onesAndTens = arr.map(x =>\
    \ if (x == 1) 10 else 0)\n        val onesAndHundreds = arr.map(x => if (x ==\
    \ 1) 11 else 0)\n        val onesAndThousands = arr.map(x => if (x == 1) 100 else\
    \ 0)\n        val onesAndMillions = arr.map(x => if (x == 1) 1000 else 0)", " \
    \       val ones = arr.map(x => if (x == 1) 1 else 0)\n        val twos = arr.map(x\
    \ => if (x == 2) 1 else 0)\n        val threes = arr.map(x => if (x == 3) 1 else\
    \ 0)\n        val fours = arr.map(x => if (x == 4) 1 else 0)\n        val fives\
    \ = arr.map(x => if (x == 5) 1 else 0)\n        val sixes = arr.map(x => if (x\
    \ == 6) 1 else 0)\n        val sevens = arr.map(x => if (x == 7) 1 else 0)\n \
    \       val eights = arr.map(x => if (x == 8) 1 else 0)\n        val nines = arr.map(x\
    \ => if (x == 9) 1 else 0)\n        val tens = arr.map(x => if (x == 10) 1 else\
    \ 0)\n        val hundreds = arr.map(x => if (x == 11) 1 else 0)\n        val\
    \ thousands = arr.map(x => if (x == 100) 1 else 0)\n        val ten_thousands\
    \ = arr.map(x => if (x == 1000) 1 else 0)\n        val hundred_thousands = arr.map(x\
    \ => if (x == 10000) 1 else 0)\n        val millions = arr.map(x => if (x == 1000000)\
    \ 1 else 0)\n        val billions = arr.map(x => if (x == 1000000000) 1 else 0)\n\
    \        val trillions = arr.map(x => if (x == 1000000000000) 1 else 0)\n    \
    \    val quadrillions = arr.map(x => if (x == 1000000000000000) 1 else 0)\n  \
    \      val quintillions = arr.map(x => if (x == 1000000000000000000) 1 else 0)\n\
    \        val ones_count = ones.count(_ > 0)\n        val twos_count = twos.count(_\
    \ > 0)\n        val threes_count = threes.count(_ > 0)\n        val fours_count\
    \ = fours.count(_ > 0)\n        val fives_count = fives.count(_ > 0)\n       \
    \ val sixes_count = sixes.count(_ > 0)\n        val sevens_count = sevens.count(_\
    \ > 0)\n        val eights_count = eights.count(_ > 0)\n        val nines_count\
    \ = nines.count(_ > 0)\n        val tens_count = tens.count(_ > 0)\n        val\
    \ hundreds_count = hundreds.count(_ > 0)\n        val thousands_count = thousands.count(_\
    \ > 0)\n        val ten_thousands_count = ten_thousands.count(_ > 0)\n       \
    \ val hundred_thousands_count = hundred_thousands.count(_ > 0)\n        val millions_count\
    \ = millions.", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesArr = arr.filter(_ == 1)\n        val zerosArr = arr.filter(_\
    \ == 0)\n        val onesCount = onesArr.size\n        val zerosCount = zerosArr.size\n\
    \        val onesDecimal = onesArr.map(_.toString.toInt)\n        val zerosDecimal\
    \ = zerosArr.map(_.toString.toInt)\n        val onesDecimalCount = onesDecimal.size\n\
    \        val zerosDecimalCount = zerosDecimal.size\n        val onesDecimalCount\
    \ = onesDecimalCount.toInt\n        val zerosDecimalCount = zerosDecimalCount.toInt\n\
    \        val onesDecimalCount = onesDecimalCount.toInt\n        val zerosDecimalCount\
    \ = zerosDecimalCount.toInt\n        val onesDecimalCount = onesDecimalCount.toInt\n\
    \        val zerosDecimalCount = zerosDecimalCount.toInt\n        val onesDecimalCount\
    \ = onesDecimalCount.toInt\n        val zerosDecimalCount = zerosDecimalCount.toInt\n\
    \        val onesDecimalCount = onesDecimalCount.toInt\n        val zerosDecimalCount\
    \ = zerosDecimalCount.toInt\n        val onesDecimalCount = onesDecimalCount.toInt\n\
    \        val zerosDecimalCount = zerosDecimalCount.toInt\n        val onesDecimalCount\
    \ = onesDecimalCount.toInt\n        val zerosDecimalCount = zerosDecimalCount.toInt\n\
    \        val onesDecimalCount = onesDecimalCount.toInt\n        val zerosDecimalCount\
    \ = zerosDecimalCount.toInt\n        val onesDecimalCount = onesDecimalCount.toInt\n\
    \        val zerosDecimalCount = zerosDecimalCount.toInt\n        val onesDecimalCount\
    \ = onesDecimalCount.toInt\n        val zerosDecimalCount = zerosDecimalCount.toInt\n\
    \        val onesDecimalCount = onesDecimalCount.toInt\n        val zerosDecimalCount\
    \ = zerosDecimalCount.toInt\n        val onesDecimalCount = onesDecimalCount.toInt\n\
    \        val zerosDecimalCount = zerosDecimalCount.toInt\n        val onesDecimalCount\
    \ = onesDecimalCount.toInt\n        val zerosDecimalCount = zerosDecimalCount.toInt\n\
    \        val onesDecimalCount = onesDecimalCount.toInt\n        val zerosDecimalCount\
    \ = zerosDecimalCount.toInt\n        val onesDecimalCount = onesDecimalCount.toInt\n\
    \        val zerosDecimalCount = zerosDecimalCount.toInt\n        val onesDecimal",
  "        val ones = arr.filter(x => x == 1).length\n        val zeros = arr.filter(x\
    \ => x == 0).length\n        val onesArr = arr.filter(x => x == 1).map(x => x.toBinaryString).sorted\n\
    \        val zerosArr = arr.filter(x => x == 0).map(x => x.toBinaryString).sorted\n\
    \        val onesCount = onesArr.length\n        val zerosCount = zerosArr.length\n\
    \        val onesDecimal = onesCount / arr.length\n        val zerosDecimal =\
    \ zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / zerosDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal / onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / zerosDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / onesDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal /\
    \ zerosDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimal",
  "        val ones = arr.count(x => x == 1)\n        val twos = arr.count(x => x\
    \ == 2)\n        val threes = arr.count(x => x == 3)\n        val fours = arr.count(x\
    \ => x == 4)\n        val fives = arr.count(x => x == 5)\n        val sixes =\
    \ arr.count(x => x == 6)\n        val sevens = arr.count(x => x == 7)\n      \
    \  val eights = arr.count(x => x == 8)\n        val nines = arr.count(x => x ==\
    \ 9)\n        val tens = arr.count(x => x == 10)\n        val hundreds = arr.count(x\
    \ => x == 100)\n        val thousands = arr.count(x => x == 1000)\n        val\
    \ millions = arr.count(x => x == 1000000)\n        val billions = arr.count(x\
    \ => x == 1000000000)\n        val trillions = arr.count(x => x == 1000000000000)\n\
    \        val quadrillions = arr.count(x => x == 1000000000000000)\n        val\
    \ quintillions = arr.count(x => x == 1000000000000000000)\n        val onesAndZeroes\
    \ = arr.count(x => x == 1)\n        val onesAndOnes = arr.count(x => x == 1 &&\
    \ x > 0)\n        val onesAndTwos = arr.count(x => x == 1 && x > 1)\n        val\
    \ onesAndThrees = arr.count(x => x == 1 && x > 2)\n        val onesAndFours =\
    \ arr.count(x => x == 1 && x > 3)\n        val onesAndFives = arr.count(x => x\
    \ == 1 && x > 4)\n        val onesAndSixes = arr.count(x => x == 1 && x > 5)\n\
    \        val onesAndSevens = arr.count(x => x == 1 && x > 6)\n        val onesAndEights\
    \ = arr.count(x => x == 1 && x > 7)\n        val onesAndNines = arr.count(x =>\
    \ x == 1 && x > 8)\n        val onesAndTens = arr.count(x => x == 1 && x > 9)\n\
    \        val onesAndHundreds = arr.count(x => x == 1 && x > 100)\n        val\
    \ onesAndThousands = arr.count(x => x == 1 && x > 1000)\n        val onesAndMillions\
    \ = arr.count(x => x == 1 && x > 1000000)\n        val onesAndBillions = arr.count(x\
    \ => x == 1 && x > 1000000000)\n        val onesAndTrillions = arr.count(x =>\
    \ x == 1 && x > 1000000000000)\n        val onesAndQuadrillions = arr.count(x\
    \ => x == 1 && x > 1000000000000000)\n        val onesAndQuintillions = arr.count(x\
    \ => x == 1 && x > 1000000000000000000", "        val ones = arr.filter(_ % 2\
    \ == 0).length\n        val zeros = arr.filter(_ % 2 == 1).length\n        val\
    \ decimals = arr.filter(_ % 10 == 0).length\n        val decimalsDecimals = arr.filter(_\
    \ % 10 == 1).length\n        val decimalsDecimalsDecimals = arr.filter(_ % 10\
    \ == 2).length\n        val decimalsDecimalsDecimalsDecimals = arr.filter(_ %\
    \ 10 == 3).length\n        val decimalsDecimalsDecimalsDecimalsDecimals = arr.filter(_\
    \ % 10 == 4).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 5).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 6).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 7).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 8).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 9).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 0).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 1).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 2).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 3).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 4).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 5).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 6).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimal",
  "        val ones = arr.filter(x => x % 2 == 0).size\n        val twos = arr.filter(x\
    \ => x % 2 == 1).size\n        val threes = arr.filter(x => x % 3 == 0).size\n\
    \        val fours = arr.filter(x => x % 4 == 0).size\n        val fives = arr.filter(x\
    \ => x % 5 == 0).size\n        val sixes = arr.filter(x => x % 6 == 0).size\n\
    \        val sevens = arr.filter(x => x % 7 == 0).size\n        val eights = arr.filter(x\
    \ => x % 8 == 0).size\n        val nines = arr.filter(x => x % 9 == 0).size\n\
    \        val tens = arr.filter(x => x % 10 == 0).size\n        val hundreds =\
    \ arr.filter(x => x % 100 == 0).size\n        val thousands = arr.filter(x =>\
    \ x % 1000 == 0).size\n        val millions = arr.filter(x => x % 1000000 == 0).size\n\
    \        val billions = arr.filter(x => x % 1000000000 == 0).size\n        val\
    \ trillions = arr.filter(x => x % 1000000000000 == 0).size\n        val quadrillions\
    \ = arr.filter(x => x % 1000000000000000 == 0).size\n        val quintillions\
    \ = arr.filter(x => x % 1000000000000000000 == 0).size\n        val onesAndZeros\
    \ = arr.filter(x => x == 1).size\n        val onesAndOnes = arr.filter(x => x\
    \ == 1).size - onesAndZeros\n        val twosAndZeros = arr.filter(x => x == 2).size\n\
    \        val twosAndOnes = arr.filter(x => x == 2).size - twosAndZeros\n     \
    \   val threesAndZeros = arr.filter(x => x == 3).size\n        val threesAndOnes\
    \ = arr.filter(x => x == 3).size - threesAndZeros\n        val foursAndZeros =\
    \ arr.filter(x => x == 4).size\n        val foursAndOnes = arr.filter(x => x ==\
    \ 4).size - foursAndZeros\n        val fivesAndZeros = arr.filter(x => x == 5).size\n\
    \        val fivesAndOnes = arr.filter(x => x == 5).size - fivesAndZeros\n   \
    \     val sixesAndZeros = arr.filter(x => x == 6).size\n        val sixesAndOnes\
    \ = arr.filter(x => x == 6).size - sixesAndZeros\n        val sevensAndZeros =\
    \ arr.filter(x => x == 7).size\n        val sevensAndOnes = arr.filter(x ", " \
    \       val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n\
    \        val maxOnes = arr.count(_ == 1)\n        val maxZeros = arr.count(_ ==\
    \ 0)\n        val maxOnesDecimal = maxOnes.toDouble / maxOnes.toDouble.toInt\n\
    \        val maxZerosDecimal = maxZeros.toDouble / maxZeros.toDouble.toInt\n \
    \       val maxDecimal = math.max(maxOnesDecimal, maxZerosDecimal)\n        val\
    \ onesDecimal = ones.toDouble / ones.toDouble.toInt\n        val zerosDecimal\
    \ = zeros.toDouble / zeros.toDouble.toInt\n        val decimal = math.max(onesDecimal,\
    \ zerosDecimal)\n        val onesDecimal = ones.toDouble / ones.toDouble.toInt\n\
    \        val zerosDecimal = zeros.toDouble / zeros.toDouble.toInt\n        val\
    \ decimal = math.max(onesDecimal, zerosDecimal)\n        val onesDecimal = ones.toDouble\
    \ / ones.toDouble.toInt\n        val zerosDecimal = zeros.toDouble / zeros.toDouble.toInt\n\
    \        val decimal = math.max(onesDecimal, zerosDecimal)\n        val onesDecimal\
    \ = ones.toDouble / ones.toDouble.toInt\n        val zerosDecimal = zeros.toDouble\
    \ / zeros.toDouble.toInt\n        val decimal = math.max(onesDecimal, zerosDecimal)\n\
    \        val onesDecimal = ones.toDouble / ones.toDouble.toInt\n        val zerosDecimal\
    \ = zeros.toDouble / zeros.toDouble.toInt\n        val decimal = math.max(onesDecimal,\
    \ zerosDecimal)\n        val onesDecimal = ones.toDouble / ones.toDouble.toInt\n\
    \        val zerosDecimal = zeros.toDouble / zeros.toDouble.toInt\n        val\
    \ decimal = math.max(onesDecimal, zerosDecimal)\n        val onesDecimal = ones.toDouble\
    \ / ones.toDouble.toInt\n        val zerosDecimal = zeros.toDouble / zeros.toDouble.toInt\n\
    \        val decimal = math.max(onesDecimal, zerosDecimal)\n        val onesDecimal\
    \ = ones.toDouble / ones.toDouble.toInt\n        val zerosDecimal = zeros.toDouble\
    \ / zeros.toDouble.toInt\n        val decimal = math.max(onesDecimal, zerosDecimal)\n\
    \        val onesDecimal = ones.toDouble / ones.", "        val ones = arr.filter(_\
    \ % 2 == 0).length\n        val decimals = arr.filter(_ % 2 == 1).length\n   \
    \     val onesArr = arr.filter(_ % 2 == 0).sortBy(x => math.abs(x))\n        val\
    \ decimalsArr = arr.filter(_ % 2 == 1).sortBy(x => math.abs(x))\n        onesArr.zip(decimalsArr).sortBy(x\
    \ => x._1 - x._2).map(x => x._1)", "        val ones = arr.map(x => if (x == 1)\
    \ 1 else 0)\n        val zeros = arr.map(x => if (x == 0) 0 else 1)\n        val\
    \ onesCount = ones.toSet.size\n        val zerosCount = zeros.toSet.size\n   \
    \     val onesZeros = ones.toSet & zeros.toSet\n        val onesZeroCount = onesZeros.size\n\
    \        val onesZeroSum = onesZeros.toSet.sum\n        val onesZeroSumCount =\
    \ onesZeroSum.toSet.size\n        val onesZeroSumSum = onesZeroSum.toSet.sum\n\
    \        val onesZeroSumSumCount = onesZeroSumSum.toSet.size\n        val onesZeroSumSumSum\
    \ = onesZeroSumSum.toSet.sum\n        val onesZeroSumSumSumCount = onesZeroSumSumSum.toSet.size\n\
    \        val onesZeroSumSumSumSum = onesZeroSumSumSum.toSet.sum\n        val onesZeroSumSumSumSumCount\
    \ = onesZeroSumSumSumSum.toSet.size\n        val onesZeroSumSumSumSumSum = onesZeroSumSumSumSum.toSet.sum\n\
    \        val onesZeroSumSumSumSumCount = onesZeroSumSumSumSumCount.toSet.size\n\
    \        val onesZeroSumSumSumSumSum = onesZeroSumSumSumSumSum.toSet.sum\n   \
    \     val onesZeroSumSumSumSumSumCount = onesZeroSumSumSumSumSumCount.toSet.size\n\
    \        val onesZeroSumSumSumSumSum = onesZeroSumSumSumSumSum.toSet.sum\n   \
    \     val onesZeroSumSumSumSumSumCount = onesZeroSumSumSumSumSumCount.toSet.size\n\
    \        val onesZeroSumSumSumSumSum = onesZeroSumSumSumSumSum.toSet.sum\n   \
    \     val onesZeroSumSumSumSumSumCount = onesZeroSumSumSumSumSumCount.toSet.size\n\
    \        val onesZeroSumSumSumSumSum = onesZeroSumSumSumSumSum.toSet.sum\n   \
    \     val onesZeroSumSumSumSumSumCount = onesZeroSumSumSumSumSumCount.toSet.size\n\
    \        val onesZeroSumSumSumSumSum = onesZeroSumSumSumSumSum.toSet.sum\n   \
    \     val onesZeroSumSumSumSumSumCount = onesZeroSumSumSumSumSumCount.toSet.size\n\
    \        val onesZeroSumSumSumSum", "        val ones = arr.map(x => if (x ==\
    \ 1) 1 else 0)\n        val twos = arr.map(x => if (x == 2) 2 else 0)\n      \
    \  val threes = arr.map(x => if (x == 3) 3 else 0)\n        val fours = arr.map(x\
    \ => if (x == 4) 4 else 0)\n        val fives = arr.map(x => if (x == 5) 5 else\
    \ 0)\n        val sixes = arr.map(x => if (x == 6) 6 else 0)\n        val sevens\
    \ = arr.map(x => if (x == 7) 7 else 0)\n        val eights = arr.map(x => if (x\
    \ == 8) 8 else 0)\n        val nines = arr.map(x => if (x == 9) 9 else 0)\n  \
    \      val tens = arr.map(x => if (x == 10) 10 else 0)\n        val hundreds =\
    \ arr.map(x => if (x == 11) 11 else 0)\n        val thousands = arr.map(x => if\
    \ (x == 100) 100 else 0)\n        val ten_thousands = arr.map(x => if (x == 1000)\
    \ 1000 else 0)\n        val hundred_thousands = arr.map(x => if (x == 10000) 10000\
    \ else 0)\n        val millions = arr.map(x => if (x == 1000000) 1000000 else\
    \ 0)\n        val billions = arr.map(x => if (x == 1000000000) 1000000000 else\
    \ 0)\n        val trillions = arr.map(x => if (x == 1000000000000) 1000000000000\
    \ else 0)\n        val quadrillions = arr.map(x => if (x == 1000000000000000)\
    \ 1000000000000000 else 0)\n        val quintillions = arr.map(x => if (x == 1000000000000000000)\
    \ 1000000000000000000 else 0)\n        val ones_and_zeros = arr.map(x => if (x\
    \ == 1) 1 else 0)\n        val ones_and_ones = arr.map(x => if (x == 1) 1 else\
    \ 1)\n        val ones_and_twos = arr.map(x => if (x == 1) 1 else 2)\n       \
    \ val ones_and_threes = arr.map(x => if (x == 1) 1 else 3)\n        val ones_and_fours\
    \ = arr.map(x => if (x == 1) 1 else 4)\n        val ones_and_fives = arr.map(x\
    \ => if (x == 1) 1 else 5)\n        val ones_and_sixes = arr.map(x => if (x ==\
    \ 1) 1 else 6)\n        val ones_and_sevens = arr.map(x => if (x == 1) 1 else\
    \ 7)\n        val ones_and_eights = arr.map(x => if (x == 1) 1 else 8)\n     \
    \   val ones_and_nines = arr.map(x => if (x == 1) 1 else 9)\n        val ones_and_tens\
    \ = arr.map(x => if (x == 1) ", "        val ones = arr.count(_ == 1)\n      \
    \  val twos = arr.count(_ == 2)\n        val threes = arr.count(_ == 3)\n    \
    \    val fours = arr.count(_ == 4)\n        val fives = arr.count(_ == 5)\n  \
    \      val sixes = arr.count(_ == 6)\n        val sevens = arr.count(_ == 7)\n\
    \        val eights = arr.count(_ == 8)\n        val nines = arr.count(_ == 9)\n\
    \        val tens = arr.count(_ == 10)\n        val hundreds = arr.count(_ ==\
    \ 100)\n        val thousands = arr.count(_ == 1000)\n        val millions = arr.count(_\
    \ == 1000000)\n        val billions = arr.count(_ == 1000000000)\n        val\
    \ trillions = arr.count(_ == 1000000000000)\n        val quadrillions = arr.count(_\
    \ == 1000000000000000)\n        val quintillions = arr.count(_ == 1000000000000000000)\n\
    \        val sextillions = arr.count(_ == 100000000000000000000)\n        val\
    \ septillions = arr.count(_ == 10000000000000000000000)\n        val octillions\
    \ = arr.count(_ == 1000000000000000000000000)\n        val nonillions = arr.count(_\
    \ == 100000000000000000000000000)\n        val decillions = arr.count(_ == 10000000000000000000000000000)\n\
    \        val undecillions = arr.count(_ == 1000000000000000000000000000000)\n\
    \        val duodecillions = arr.count(_ == 100000000000000000000000000000000)\n\
    \        val tredecillions = arr.count(_ == 1000000000000000000000000000000000)\
    \ \n        val quattuordecillions = arr.count(_ == 1000000000000000000000000000000000)\n\
    \        val sexdecillions = arr.count(_ == 100000000000000000000000000000000)\n\
    \        val septendecillions = arr.count(_ == 1000000000000000000000000000000000)\n\
    \        val octodecillions = arr.count(_ == 100000000000000000000000000000000)\n\
    \        val novemdecillions = arr.count(_ == 1000000000000000000000000000000000)\
    \ \n        val vigintillions = arr.count(_ == 100000000000000000000000000000000)\n\
    \        val unvigintillions = arr.count(_ == 1000000000000000000000000000000000)\n\
    \        val duovigintillions = arr.count(_ == 100000000000000000000000000000000)\n\
    \        val trevigintillions = arr.count(_ == 1000000000000000000000000000000000)\
    \ \n        val quattuorvigintillions = arr.count(_ == 100000000000000000000000000000000",
  "        val ones = arr.map(x => if (x == 1) 1 else 0)\n        val zeros = arr.map(x\
    \ => if (x == 0) 0 else 1)\n        val onesCount = ones.toSet.size\n        val\
    \ zerosCount = zeros.toSet.size\n        val onesZeros = ones.toSet.intersect(zeros.toSet)\n\
    \        val onesZeroCount = onesZeros.size\n        val onesZeroSum = onesZeros.sum\n\
    \        val onesZeroSumCount = onesZeroSum.toSet.size\n        val onesZeroSumCount\
    \ = onesZeroSumCount.toInt\n        val onesZeroSum = onesZeroSum.toInt\n    \
    \    val onesZeroSum = onesZeroSum.toInt\n        val onesZeroSum = onesZeroSum.toInt\n\
    \        val onesZeroSum = onesZeroSum.toInt\n        val onesZeroSum = onesZeroSum.toInt\n\
    \        val onesZeroSum = onesZeroSum.toInt\n        val onesZeroSum = onesZeroSum.toInt\n\
    \        val onesZeroSum = onesZeroSum.toInt\n        val onesZeroSum = onesZeroSum.toInt\n\
    \        val onesZeroSum = onesZeroSum.toInt\n        val onesZeroSum = onesZeroSum.toInt\n\
    \        val onesZeroSum = onesZeroSum.toInt\n        val onesZeroSum = onesZeroSum.toInt\n\
    \        val onesZeroSum = onesZeroSum.toInt\n        val onesZeroSum = onesZeroSum.toInt\n\
    \        val onesZeroSum = onesZeroSum.toInt\n        val onesZeroSum = onesZeroSum.toInt\n\
    \        val onesZeroSum = onesZeroSum.toInt\n        val onesZeroSum = onesZeroSum.toInt\n\
    \        val onesZeroSum = onesZeroSum.toInt\n        val onesZeroSum = onesZeroSum.toInt\n\
    \        val onesZeroSum = onesZeroSum.toInt\n        val onesZeroSum = onesZeroSum.toInt\n\
    \        val onesZeroSum = onesZeroSum.toInt\n        val onesZeroSum = onesZeroSum.toInt\n\
    \        val onesZeroSum = onesZeroSum.toInt\n        val onesZeroSum = onesZeroSum.toInt\n\
    \        val onesZeroSum = onesZero", "        val ones = arr.filter(x => x ==\
    \ 1).length\n        val twos = arr.filter(x => x == 2).length\n        val threes\
    \ = arr.filter(x => x == 3).length\n        val fours = arr.filter(x => x == 4).length\n\
    \        val fives = arr.filter(x => x == 5).length\n        val sixes = arr.filter(x\
    \ => x == 6).length\n        val sevens = arr.filter(x => x == 7).length\n   \
    \     val eights = arr.filter(x => x == 8).length\n        val nines = arr.filter(x\
    \ => x == 9).length\n        val tens = arr.filter(x => x == 10).length\n    \
    \    val hundreds = arr.filter(x => x == 11).length\n        val thousands = arr.filter(x\
    \ => x == 12).length\n        val millions = arr.filter(x => x == 13).length\n\
    \        val billions = arr.filter(x => x == 14).length\n        val trillions\
    \ = arr.filter(x => x == 15).length\n        val quadrillions = arr.filter(x =>\
    \ x == 16).length\n        val quintillions = arr.filter(x => x == 17).length\n\
    \        val sextillions = arr.filter(x => x == 18).length\n        val septillions\
    \ = arr.filter(x => x == 19).length\n        val octillions = arr.filter(x =>\
    \ x == 20).length\n        val nonillions = arr.filter(x => x == 21).length\n\
    \        val decillions = arr.filter(x => x == 22).length\n        val undecillions\
    \ = arr.filter(x => x == 23).length\n        val duodecillions = arr.filter(x\
    \ => x == 24).length\n        val tredecillions = arr.filter(x => x == 25).length\n\
    \        val quattuordecillions = arr.filter(x => x == 26).length\n        val\
    \ quindecillions = arr.filter(x => x == 27).length\n        val sexdecillions\
    \ = arr.filter(x => x == 28).length\n        val septendecillions = arr.filter(x\
    \ => x == 29).length\n        val octodecillions = arr.filter(x => x == 30).length\n\
    \        val novemdecillions = arr.filter(x => x == 31).length\n        val vigintillions\
    \ = arr.filter(x => x == 32).length\n        val unvigintillions = arr.filter(x\
    \ => x == 33).length\n        val duovigintillions = arr.", "        val ones\
    \ = arr.map(x => if (x == 1) 1 else 0)\n        val twos = arr.map(x => if (x\
    \ == 2) 1 else 0)\n        val threes = arr.map(x => if (x == 3) 1 else 0)\n \
    \       val fours = arr.map(x => if (x == 4) 1 else 0)\n        val fives = arr.map(x\
    \ => if (x == 5) 1 else 0)\n        val sixes = arr.map(x => if (x == 6) 1 else\
    \ 0)\n        val sevens = arr.map(x => if (x == 7) 1 else 0)\n        val eights\
    \ = arr.map(x => if (x == 8) 1 else 0)\n        val nines = arr.map(x => if (x\
    \ == 9) 1 else 0)\n        val tens = arr.map(x => if (x == 10) 1 else 0)\n  \
    \      val hundreds = arr.map(x => if (x == 11) 1 else 0)\n        val thousands\
    \ = arr.map(x => if (x == 100) 1 else 0)\n        val millions = arr.map(x =>\
    \ if (x == 1000) 1 else 0)\n        val billions = arr.map(x => if (x == 10000)\
    \ 1 else 0)\n        val trillions = arr.map(x => if (x == 100000) 1 else 0)\n\
    \        val quadrillions = arr.map(x => if (x == 1000000) 1 else 0)\n       \
    \ val quintillions = arr.map(x => if (x == 100000000) 1 else 0)\n        val onesAndZeros\
    \ = ones + twos + threes + fours + fives + sixes + sevens + eights + nines + tens\
    \ + hundreds + thousands + millions + billions + trillions + quadrillions + quintillions\n\
    \        val onesAndOnes = ones + ones\n        val onesAndTwos = ones + twos\n\
    \        val onesAndThrees = ones + threes\n        val onesAndFours = ones +\
    \ fours\n        val onesAndFives = ones + fives\n        val onesAndSixes = ones\
    \ + sixes\n        val onesAndSevens = ones + sevens\n        val onesAndEights\
    \ = ones + eights\n        val onesAndNines = ones + nines\n        val onesAndTens\
    \ = ones + tens\n        val onesAndHundreds = ones + hundreds\n        val onesAndThousands\
    \ = ones + thousands\n        val onesAndMillions = ones + millions\n        val\
    \ onesAndBillions = ones + billions\n        val onesAndTrilli", "        val\
    \ ones = arr.filter(_ % 2 == 0).length\n        val zeros = arr.filter(_ % 2 ==\
    \ 1).length\n        val onesArr = arr.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n\
    \        val zerosArr = arr.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n       \
    \ val onesArr2 = onesArr.map(x => math.pow(2, x))\n        val zerosArr2 = zerosArr.map(x\
    \ => math.pow(2, x))\n        val onesArr3 = onesArr2.zip(zerosArr2).sortBy(_._1).reverse\n\
    \        val zerosArr3 = zerosArr2.zip(onesArr2).sortBy(_._1).reverse\n      \
    \  val onesArr4 = onesArr3.zip(zerosArr3).sortBy(_._1).reverse\n        val zerosArr4\
    \ = zerosArr3.zip(onesArr3).sortBy(_._1).reverse\n        val onesArr5 = onesArr4.zip(zerosArr4).sortBy(_._1).reverse\n\
    \        val zerosArr5 = zerosArr4.zip(onesArr4).sortBy(_._1).reverse\n      \
    \  val onesArr6 = onesArr5.zip(zerosArr5).sortBy(_._1).reverse\n        val zerosArr6\
    \ = zerosArr5.zip(onesArr5).sortBy(_._1).reverse\n        val onesArr7 = onesArr6.zip(zerosArr6).sortBy(_._1).reverse\n\
    \        val zerosArr7 = zerosArr6.zip(onesArr6).sortBy(_._1).reverse\n      \
    \  val onesArr8 = onesArr7.zip(zerosArr7).sortBy(_._1).reverse\n        val zerosArr8\
    \ = zerosArr7.zip(onesArr7).sortBy(_._1).reverse\n        val onesArr9 = onesArr8.zip(zerosArr8).sortBy(_._1).reverse\n\
    \        val zerosArr9 = zerosArr8.zip(onesArr8).sortBy(_._1).reverse\n      \
    \  val onesArr10 = onesArr9.zip(zerosArr9).sortBy(_._1).reverse\n        val zerosArr10\
    \ = zerosArr9.zip(onesArr9).sortBy(_._1).reverse\n        val onesArr11 = onesArr10.zip(zerosArr10).sortBy(_._1).reverse\n\
    \        val zerosArr11 = zerosArr10.zip(onesArr10).sortBy(_._1).reverse\n   \
    \     val onesArr12 = onesArr11.zip(zerosArr11).sortBy(_._1).reverse\n       \
    \ val zerosArr12 = zerosArr11.zip(onesArr", "        val ones = arr.count(_ ==\
    \ 1)\n        val decimals = arr.count(_ > 1)\n        val onesArr = arr.map(x\
    \ => if (x == 1) 1 else 0)\n        val decimalsArr = arr.map(x => if (x > 1)\
    \ x / 2 else 0)\n        val decimalsArr = decimalsArr.sortBy(x => x)\n      \
    \  val onesArr = onesArr.sortBy(x => x)\n        val result = onesArr ++ decimalsArr\n\
    \        val result = result.sortBy(x => x)\n        result", "        val ones\
    \ = arr.count(_ == 1)\n        val decimals = arr.count(_ > 0)\n        val onesArr\
    \ = arr.map(x => (x % 2).toLong)\n        val decimalsArr = arr.map(x => (x %\
    \ 2).toLong)\n        val onesArr = onesArr.sortWith(_ < _)\n        val decimalsArr\
    \ = decimalsArr.sortWith(_ < _)\n        onesArr.zip(decimalsArr).map(x => x._1\
    \ + x._2)", "        val ones = arr.filter(x => x == 1).size\n        val zeros\
    \ = arr.filter(x => x == 0).size\n        val maxOnes = arr.max\n        val maxZeros\
    \ = arr.min\n        val maxOnesDecimal = maxOnes.toString.toDouble\n        val\
    \ maxZerosDecimal = maxZeros.toString.toDouble\n        val maxOnesDecimalDecimal\
    \ = maxOnesDecimal.toString.toDouble\n        val maxZerosDecimalDecimal = maxZerosDecimal.toString.toDouble\n\
    \        val onesDecimal = ones / arr.size\n        val zerosDecimal = zeros /\
    \ arr.size\n        val maxOnesDecimalDecimalDecimal = maxOnesDecimalDecimal.toString.toDouble\n\
    \        val maxZerosDecimalDecimalDecimal = maxZerosDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimal = onesDecimal.toString.toDouble\n        val zerosDecimalDecimal\
    \ = zerosDecimal.toString.toDouble\n        val maxOnesDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimal.toString.toDouble\n        val maxZerosDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimal.toString.toDouble\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal.toString.toDouble\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal.toString.toDouble\n        val maxOnesDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimal.toString.toDouble\n        val maxZerosDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimal.toString.toDouble\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal.toString.toDouble\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal.toString.toDouble\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n        val\
    \ maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = ", "        val\
    \ ones = arr.count(_ == 1)\n        val decimals = arr.count(_ > 0)\n        val\
    \ decimalsSorted = decimals.toList.sortBy(x => math.abs(x))\n        val onesSorted\
    \ = ones.toList.sortBy(x => math.abs(x))\n        onesSorted.zip(decimalsSorted).map(x\
    \ => x._1 + x._2)", "        val ones = arr.filter(x => x % 2 == 0).length\n \
    \       val twos = arr.filter(x => x % 2 == 1).length\n        val threes = arr.filter(x\
    \ => x % 3 == 0).length\n        val fours = arr.filter(x => x % 4 == 0).length\n\
    \        val fives = arr.filter(x => x % 5 == 0).length\n        val sixes = arr.filter(x\
    \ => x % 6 == 0).length\n        val sevens = arr.filter(x => x % 7 == 0).length\n\
    \        val eights = arr.filter(x => x % 8 == 0).length\n        val nines =\
    \ arr.filter(x => x % 9 == 0).length\n        val tens = arr.filter(x => x % 10\
    \ == 0).length\n        val hundreds = arr.filter(x => x % 100 == 0).length\n\
    \        val thousands = arr.filter(x => x % 1000 == 0).length\n        val millions\
    \ = arr.filter(x => x % 1000000 == 0).length\n        val billions = arr.filter(x\
    \ => x % 1000000000 == 0).length\n        val trillions = arr.filter(x => x %\
    \ 1000000000000 == 0).length\n        val quadrillions = arr.filter(x => x % 1000000000000000\
    \ == 0).length\n        val quintillions = arr.filter(x => x % 1000000000000000000\
    \ == 0).length\n        val onesAndZeros = arr.filter(x => x % 1 == 0 && x !=\
    \ 0).length\n        val onesAndOnes = arr.filter(x => x % 1 == 1 && x != 0).length\n\
    \        val onesAndTwos = arr.filter(x => x % 1 == 2 && x != 0).length\n    \
    \    val onesAndThrees = arr.filter(x => x % 1 == 3 && x != 0).length\n      \
    \  val onesAndFours = arr.filter(x => x % 1 == 4 && x != 0).length\n        val\
    \ onesAndFives = arr.filter(x => x % 1 == 5 && x != 0).length\n        val onesAndSixes\
    \ = arr.filter(x => x % 1 == 6 && x != 0).length\n        val onesAndSevens =\
    \ arr.filter(x => x % 1 == 7 && x != 0).length\n        val onesAndEights = arr.filter(x\
    \ => x % 1 == 8 && x != 0).length\n        val onesAndNines = arr.filter(x =>\
    \ x % 1 == 9 && x != 0).length\n        val onesAndTens = arr.filter(x => x %\
    \ 1 == 10 && x != 0).length\n        val onesAndHundreds = arr.filter(x => x % ",
  "        val ones = arr.count(_ == 1)\n        val decs = arr.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = decs.map(_.toString.toInt)\n        val decs = decs.map(_.toString.toInt)\n\
    \        val decs = de", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n        val\
    \ zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount / arr.length\n\
    \        val zerosDecimal = zerosCount / arr.length\n        val onesDecimalDecimal\
    \ = onesDecimal / ones\n        val zerosDecimalDecimal = zerosDecimal / zeros\n\
    \        val onesDecimalDecimalDecimal = onesDecimalDecimal / ones\n        val\
    \ zerosDecimalDecimalDecimal = zerosDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArr = arr.filter(_ == 1).sortBy(x => math.abs(x))\n        val\
    \ zerosArr = arr.filter(_ == 0).sortBy(x => math.abs(x))\n        val onesCount\
    \ = onesArr.length\n        val zerosCount = zerosArr.length\n        val onesDec\
    \ = onesArr.map(x => math.pow(2,x)).sum\n        val zerosDec = zerosArr.map(x\
    \ => math.pow(2,x)).sum\n        val onesDec2 = 0\n        val zerosDec2 = 0\n\
    \        val onesDec3 = 0\n        val zerosDec3 = 0\n        val onesDec4 = 0\n\
    \        val zerosDec4 = 0\n        val onesDec5 = 0\n        val zerosDec5 =\
    \ 0\n        val onesDec6 = 0\n        val zerosDec6 = 0\n        val onesDec7\
    \ = 0\n        val zerosDec7 = 0\n        val onesDec8 = 0\n        val zerosDec8\
    \ = 0\n        val onesDec9 = 0\n        val zerosDec9 = 0\n        val onesDec10\
    \ = 0\n        val zerosDec10 = 0\n        val onesDec11 = 0\n        val zerosDec11\
    \ = 0\n        val onesDec12 = 0\n        val zerosDec12 = 0\n        val onesDec13\
    \ = 0\n        val zerosDec13 = 0\n        val onesDec14 = 0\n        val zerosDec14\
    \ = 0\n        val onesDec15 = 0\n        val zerosDec15 = 0\n        val onesDec16\
    \ = 0\n        val zerosDec16 = 0\n        val onesDec17 = 0\n        val zerosDec17\
    \ = 0\n        val onesDec18 = 0\n        val zerosDec18 = 0\n        val onesDec19\
    \ = 0\n        val zerosDec19 = 0\n        val onesDec20 = 0\n        val zerosDec20\
    \ = 0\n        val onesDec21 = 0\n        val zerosDec21 = 0\n        val onesDec22\
    \ = 0\n        val zerosDec22 = 0\n        val onesDec23 = 0\n        val zerosDec23\
    \ = 0\n        val onesDec24 = 0\n        val zerosDec24 = 0\n        val onesDec25\
    \ = 0\n        val zerosDec25 = 0\n        val onesDe", "        val ones = arr.map(x\
    \ => if (x == 1) 1 else 0)\n        val twos = arr.map(x => if (x == 2) 2 else\
    \ 0)\n        val threes = arr.map(x => if (x == 3) 3 else 0)\n        val fours\
    \ = arr.map(x => if (x == 4) 4 else 0)\n        val fives = arr.map(x => if (x\
    \ == 5) 5 else 0)\n        val sixes = arr.map(x => if (x == 6) 6 else 0)\n  \
    \      val sevens = arr.map(x => if (x == 7) 7 else 0)\n        val eights = arr.map(x\
    \ => if (x == 8) 8 else 0)\n        val nines = arr.map(x => if (x == 9) 9 else\
    \ 0)\n        val tens = arr.map(x => if (x == 10) 10 else 0)\n        val hundreds\
    \ = arr.map(x => if (x == 11) 11 else 0)\n        val thousands = arr.map(x =>\
    \ if (x == 100) 100 else 0)\n        val ten_thousands = arr.map(x => if (x ==\
    \ 1000) 1000 else 0)\n        val hundred_thousands = arr.map(x => if (x == 10000)\
    \ 10000 else 0)\n        val millions = arr.map(x => if (x == 1000000) 1000000\
    \ else 0)\n        val billions = arr.map(x => if (x == 1000000000) 1000000000\
    \ else 0)\n        val trillions = arr.map(x => if (x == 1000000000000) 1000000000000\
    \ else 0)\n        val quadrillions = arr.map(x => if (x == 1000000000000000)\
    \ 1000000000000000 else 0)\n        val quintillions = arr.map(x => if (x == 1000000000000000000)\
    \ 1000000000000000000 else 0)\n        val ones_count = ones.length\n        val\
    \ twos_count = twos.length\n        val threes_count = threes.length\n       \
    \ val fours_count = fours.length\n        val fives_count = fives.length\n   \
    \     val sixes_count = sixes.length\n        val sevens_count = sevens.length\n\
    \        val eights_count = eights.length\n        val nines_count = nines.length\n\
    \        val tens_count = tens.length\n        val hundreds_count = hundreds.length\n\
    \        val thousands_count = thousands.length\n        val ten_thousands_count\
    \ = ten_thousands.length\n        val hundred_thousands_count = hundred_thousands.length\n\
    \        val millions_count = millions.length\n        val billions_count = billions.length\n\
    \        val trillions_count = trillions.length\n        val quadrillion", " \
    \       val ones = arr.filter(x => x == 1).size\n        val zeros = arr.filter(x\
    \ => x == 0).size\n        val onesArr = arr.filter(x => x == 1).map(x => x.toLong).toList\n\
    \        val zerosArr = arr.filter(x => x == 0).map(x => x.toLong).toList\n  \
    \      val onesArr2 = onesArr.sortBy(x => x.toString.toInt)\n        val zerosArr2\
    \ = zerosArr.sortBy(x => x.toString.toInt)\n        val onesArr3 = onesArr2.sortBy(x\
    \ => x.toString.toInt)\n        val zerosArr3 = zerosArr2.sortBy(x => x.toString.toInt)\n\
    \        val onesArr4 = onesArr3.sortBy(x => x.toString.toInt)\n        val zerosArr4\
    \ = zerosArr3.sortBy(x => x.toString.toInt)\n        val onesArr5 = onesArr4.sortBy(x\
    \ => x.toString.toInt)\n        val zerosArr5 = zerosArr4.sortBy(x => x.toString.toInt)\n\
    \        val onesArr6 = onesArr5.sortBy(x => x.toString.toInt)\n        val zerosArr6\
    \ = zerosArr5.sortBy(x => x.toString.toInt)\n        val onesArr7 = onesArr6.sortBy(x\
    \ => x.toString.toInt)\n        val zerosArr7 = zerosArr6.sortBy(x => x.toString.toInt)\n\
    \        val onesArr8 = onesArr7.sortBy(x => x.toString.toInt)\n        val zerosArr8\
    \ = zerosArr7.sortBy(x => x.toString.toInt)\n        val onesArr9 = onesArr8.sortBy(x\
    \ => x.toString.toInt)\n        val zerosArr9 = zerosArr8.sortBy(x => x.toString.toInt)\n\
    \        val onesArr10 = onesArr9.sortBy(x => x.toString.toInt)\n        val zerosArr10\
    \ = zerosArr9.sortBy(x => x.toString.toInt)\n        val onesArr11 = onesArr10.sortBy(x\
    \ => x.toString.toInt)\n        val zerosArr11 = zerosArr10.sortBy(x => x.toString.toInt)\n\
    \        val onesArr12 = onesArr11.sortBy(x => x.toString.toInt)\n        val\
    \ zerosArr12 = zerosArr11.sortBy(x => x.toString.toInt)\n        val onesArr13\
    \ = ", "        val ones = arr.filter(x => x == 1).size\n        val zeros = arr.filter(x\
    \ => x == 0).size\n        val decimal = arr.map(x => math.abs(math.log2(x)))\n\
    \        val decimalSorted = decimal.sortBy(x => x)\n        val decimalSortedSortedByDecimal\
    \ = decimalSorted.sortBy(x => x)\n        val decimalSortedSortedByDecimalReversed\
    \ = decimalSortedSortedByDecimal.reverse\n        val decimalSortedSortedByDecimalReversedSortedByDecimal\
    \ = decimalSortedSortedByDecimalReversed.sortBy(x => x)\n        val decimalSortedSortedByDecimalReversedSortedByDecimalReversed\
    \ = decimalSortedSortedByDecimalReversedSortedByDecimal.reverse\n        val decimalSortedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimal\
    \ = decimalSortedSortedByDecimalReversedSortedByDecimalReversed.sortBy(x => x)\n\
    \        val decimalSortedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversed\
    \ = decimalSortedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimal.reverse\n\
    \        val decimalSortedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimal\
    \ = decimalSortedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversed.sortBy(x\
    \ => x)\n        val decimalSortedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversed\
    \ = decimalSortedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimal.reverse\n\
    \        val decimalSortedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimal\
    \ = decimalSortedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimal.reverse\n\
    \        val decimalSortedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversed\
    \ = decimalSortedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimal.reverse\n\
    \        val decimalSortedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimal\
    \ = decimalSortedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversed.sortBy(x\
    \ => x)\n        val decimalSortedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimalReversedSortedByDecimal\
    \ = decimal", "        val ones = arr.filter(x => x == 1).length\n        val\
    \ twos = arr.filter(x => x == 2).length\n        val threes = arr.filter(x =>\
    \ x == 3).length\n        val fours = arr.filter(x => x == 4).length\n       \
    \ val fives = arr.filter(x => x == 5).length\n        val sixes = arr.filter(x\
    \ => x == 6).length\n        val sevens = arr.filter(x => x == 7).length\n   \
    \     val eights = arr.filter(x => x == 8).length\n        val nines = arr.filter(x\
    \ => x == 9).length\n        val tens = arr.filter(x => x == 10).length\n    \
    \    val hundreds = arr.filter(x => x == 11).length\n        val thousands = arr.filter(x\
    \ => x == 12).length\n        val ten_thousands = arr.filter(x => x == 13).length\n\
    \        val hundred_thousands = arr.filter(x => x == 14).length\n        val\
    \ millions = arr.filter(x => x == 15).length\n        val billions = arr.filter(x\
    \ => x == 16).length\n        val trillions = arr.filter(x => x == 17).length\n\
    \        val quadrillions = arr.filter(x => x == 18).length\n        val quintillions\
    \ = arr.filter(x => x == 19).length\n        val sextillions = arr.filter(x =>\
    \ x == 20).length\n        val septillions = arr.filter(x => x == 21).length\n\
    \        val octillions = arr.filter(x => x == 22).length\n        val nonillions\
    \ = arr.filter(x => x == 23).length\n        val decillions = arr.filter(x =>\
    \ x == 24).length\n        val undecillions = arr.filter(x => x == 25).length\n\
    \        val duodecillions = arr.filter(x => x == 26).length\n        val tredecillions\
    \ = arr.filter(x => x == 27).length\n        val quattuordecillions = arr.filter(x\
    \ => x == 28).length\n        val quindecillions = arr.filter(x => x == 29).length\n\
    \        val sexdecillions = arr.filter(x => x == 30).length\n        val septendecillions\
    \ = arr.filter(x => x == 31).length\n        val octodecillions = arr.filter(x\
    \ => x == 32).length\n        val novemdecillions = arr.filter(x => x == 33).length\n\
    \        val vigintillions = arr.filter(x => x == 34", "        val ones = arr.filter(_\
    \ % 2 == 0).length\n        val decimals = arr.filter(_ % 2 == 1).length\n   \
    \     val sorted = arr.sortBy(x => (ones - x.filter(_ % 2 == 0).length))\n   \
    \     sorted.sortBy(x => (decimals - x.filter(_ % 2 == 1).length))", "       \
    \ val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n      \
    \  val onesArr = arr.map(x => (x % 2 == 0 ? x : -x))\n        val zerosArr = arr.map(x\
    \ => (x % 2 == 0 ? x : -x))\n        val onesArr = onesArr.sortWith((x, y) =>\
    \ x - y)\n        val zerosArr = zerosArr.sortWith((x, y) => x - y)\n        val\
    \ onesArr = onesArr.map(x => x % 2 == 0 ? x : -x).toList\n        val zerosArr\
    \ = zerosArr.map(x => x % 2 == 0 ? x : -x).toList\n        val onesArr = onesArr.sortWith((x,\
    \ y) => x - y)\n        val zerosArr = zerosArr.sortWith((x, y) => x - y)\n  \
    \      val onesArr = onesArr.map(x => x % 2 == 0 ? x : -x).toList\n        val\
    \ zerosArr = zerosArr.map(x => x % 2 == 0 ? x : -x).toList\n        val onesArr\
    \ = onesArr.sortWith((x, y) => x - y)\n        val zerosArr = zerosArr.sortWith((x,\
    \ y) => x - y)\n        val onesArr = onesArr.map(x => x % 2 == 0 ? x : -x).toList\n\
    \        val zerosArr = zerosArr.map(x => x % 2 == 0 ? x : -x).toList\n      \
    \  val onesArr = onesArr.sortWith((x, y) => x - y)\n        val zerosArr = zerosArr.sortWith((x,\
    \ y) => x - y)\n        val onesArr = onesArr.map(x => x % 2 == 0 ? x : -x).toList\n\
    \        val zerosArr = zerosArr.map(x => x % 2 == 0 ? x : -x).toList\n      \
    \  val onesArr = onesArr.sortWith((x, y) => x - y)\n        val zerosArr = zerosArr.sortWith((x,\
    \ y) => x - y)\n        val onesArr = onesArr.map(x => x % 2 == 0 ? x : -x).toList\n\
    \        val zerosArr = zerosArr.map(x => x % 2 == 0 ? x : -x).toList\n      \
    \  val onesArr = onesArr.sortWith((x, y) => x - y)\n        val zerosArr = zerosArr.sortWith((x,\
    \ y) => x - y)\n        val onesArr = onesArr.map(x => x % 2 == 0 ? x : -x).toList\n\
    \        val zerosArr = zerosArr.map(x => x % 2 == 0 ? x : -x).toList\n      \
    \  ", "        val ones = arr.count(_ == 1)\n        val decs = arr.map(x => math.abs(math.log2(x)))\n\
    \        val decs = decs.sortBy(x => x)\n        val decs = decs.map(x => math.pow(10,\
    \ x))\n        val decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.map(x\
    \ => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n        val\
    \ decs = decs.map(x => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n\
    \        val decs = decs.map(x => math.abs(x))\n        val decs = decs.sortBy(x\
    \ => math.abs(x))\n        val decs = decs.map(x => math.abs(x))\n        val\
    \ decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.map(x => math.abs(x))\n\
    \        val decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.map(x\
    \ => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n        val\
    \ decs = decs.map(x => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n\
    \        val decs = decs.map(x => math.abs(x))\n        val decs = decs.sortBy(x\
    \ => math.abs(x))\n        val decs = decs.map(x => math.abs(x))\n        val\
    \ decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.map(x => math.abs(x))\n\
    \        val decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.map(x\
    \ => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n        val\
    \ decs = decs.map(x => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n\
    \        val decs = decs.map(x => math.abs(x))\n        val decs = decs.sortBy(x\
    \ => math.abs(x))\n        val decs = decs.map(x => math.abs(x))\n        val\
    \ decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.map(x => math.abs(x))\n\
    \        val decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.map(x\
    \ => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n        val\
    \ decs = decs.map(x => math.abs(x))\n        val ", "        val ones = arr.count(x\
    \ => x == 1)\n        val decs = arr.map(x => math.abs(x - math.floor(x / 2))).sortBy(math.abs)\n\
    \        val decs = decs.takeWhile(x => x < ones)\n        val decs = decs.takeWhile(x\
    \ => x < arr.length)\n        val decs = decs.map(x => math.abs(x - math.floor(x\
    \ / 2))).sortBy(math.abs)\n        val decs = decs.takeWhile(x => x < ones)\n\
    \        val decs = decs.takeWhile(x => x < arr.length)\n        val decs = decs.map(x\
    \ => math.abs(x - math.floor(x / 2))).sortBy(math.abs)\n        val decs = decs.takeWhile(x\
    \ => x < ones)\n        val decs = decs.takeWhile(x => x < arr.length)\n     \
    \   val decs = decs.map(x => math.abs(x - math.floor(x / 2))).sortBy(math.abs)\n\
    \        val decs = decs.takeWhile(x => x < ones)\n        val decs = decs.takeWhile(x\
    \ => x < arr.length)\n        val decs = decs.map(x => math.abs(x - math.floor(x\
    \ / 2))).sortBy(math.abs)\n        val decs = decs.takeWhile(x => x < ones)\n\
    \        val decs = decs.takeWhile(x => x < arr.length)\n        val decs = decs.map(x\
    \ => math.abs(x - math.floor(x / 2))).sortBy(math.abs)\n        val decs = decs.takeWhile(x\
    \ => x < ones)\n        val decs = decs.takeWhile(x => x < arr.length)\n     \
    \   val decs = decs.map(x => math.abs(x - math.floor(x / 2))).sortBy(math.abs)\n\
    \        val decs = decs.takeWhile(x => x < ones)\n        val decs = decs.takeWhile(x\
    \ => x < arr.length)\n        val decs = decs.map(x => math.abs(x - math.floor(x\
    \ / 2))).sortBy(math.abs)\n        val decs = decs.takeWhile(x => x < ones)\n\
    \        val decs = decs.takeWhile(x => x < arr.length)\n        val decs = decs.map(x\
    \ => math.abs(x - math.floor(x / 2))).sortBy(math.abs)\n        val decs = decs.takeWhile(x\
    \ => x < ones)\n        val decs = decs.takeWhile(x => x < arr.length)\n     \
    \   val decs = decs.map(x => math.abs(x - math.floor(x / 2))).sortBy(math.abs)\n\
    \        val ", "        val ones = arr.map(x => if (x == 1) 1 else 0)\n     \
    \   val twos = arr.map(x => if (x == 2) 2 else 0)\n        val threes = arr.map(x\
    \ => if (x == 3) 3 else 0)\n        val fours = arr.map(x => if (x == 4) 4 else\
    \ 0)\n        val fives = arr.map(x => if (x == 5) 5 else 0)\n        val sixes\
    \ = arr.map(x => if (x == 6) 6 else 0)\n        val sevens = arr.map(x => if (x\
    \ == 7) 7 else 0)\n        val eights = arr.map(x => if (x == 8) 8 else 0)\n \
    \       val nines = arr.map(x => if (x == 9) 9 else 0)\n        val tens = arr.map(x\
    \ => if (x == 10) 10 else 0)\n        val hundreds = arr.map(x => if (x == 11)\
    \ 11 else 0)\n        val thousands = arr.map(x => if (x == 100) 100 else 0)\n\
    \        val ten_thousands = arr.map(x => if (x == 1000) 1000 else 0)\n      \
    \  val hundred_thousands = arr.map(x => if (x == 10000) 10000 else 0)\n      \
    \  val millions = arr.map(x => if (x == 1000000) 1000000 else 0)\n        val\
    \ billions = arr.map(x => if (x == 1000000000) 1000000000 else 0)\n        val\
    \ trillions = arr.map(x => if (x == 1000000000000) 1000000000000 else 0)\n   \
    \     val quadrillions = arr.map(x => if (x == 1000000000000000) 1000000000000000\
    \ else 0)\n        val quintillions = arr.map(x => if (x == 1000000000000000000)\
    \ 1000000000000000000 else 0)\n        val ones_count = arr.count(x => x == 1)\n\
    \        val twos_count = arr.count(x => x == 2)\n        val threes_count = arr.count(x\
    \ => x == 3)\n        val fours_count = arr.count(x => x == 4)\n        val fives_count\
    \ = arr.count(x => x == 5)\n        val sixes_count = arr.count(x => x == 6)\n\
    \        val sevens_count = arr.count(x => x == 7)\n        val eights_count =\
    \ arr.count(x => x == 8)\n        val nines_count = arr.count(x => x == 9)\n \
    \       val tens_count = arr.count(x => x == 10)\n        val hundreds_count =\
    \ arr.count(x => x == 11)\n        val thousands_count = arr.count(x => x == 100)\n\
    \        val ten_thousands_count = arr.count(x => x == 1000)\n        val hundred_thousands_count\
    \ = arr.count(x => ", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val maxOnes = arr.count(_ == 1)\n        val maxZeros\
    \ = arr.count(_ == 0)\n        val maxOnesIndex = arr.lastIndexWhere(_ == 1)\n\
    \        val maxZerosIndex = arr.lastIndexWhere(_ == 0)\n        val maxOnesDecimal\
    \ = maxOnesIndex.toDouble / maxOnes\n        val maxZerosDecimal = maxZerosIndex.toDouble\
    \ / maxZeros\n        val maxOnesDecimalDecimal = maxOnesDecimal / maxOnes\n \
    \       val maxZerosDecimalDecimal = maxZerosDecimal / maxZeros\n        val maxOnesDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimal / maxOnes\n        val maxZerosDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimal / maxZeros\n        val maxOnesDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimal / maxOnes\n        val maxZerosDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimal / maxZeros\n        val maxOnesDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimal / maxOnes\n        val maxZerosDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimal / maxZeros\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / maxOnes\n     \
    \   val maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / maxZeros\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / maxOnes\n\
    \        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / maxZeros\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / maxOnes\n        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal /\
    \ maxZeros\n        val ", "        val ones = arr.count(_ == 1)\n        val\
    \ decimals = arr.count(_ > 0)\n        val maxOnes = arr.count(_ == 1)\n     \
    \   val maxDecimals = arr.count(_ > 0)\n        val maxOnesDecimals = arr.count(_\
    \ == 1 && _ > 0)\n        val maxDecimalsOnes = arr.count(_ > 0 && _ == 1)\n \
    \       val maxDecimalsOnesDecimals = arr.count(_ > 0 && _ == 1 && _ > 0)\n  \
    \      val maxDecimalsOnesDecimalsOnes = arr.count(_ > 0 && _ == 1 && _ > 0 &&\
    \ _ == 1)\n        val maxDecimalsOnesDecimalsOnesDecimals = arr.count(_ > 0 &&\
    \ _ == 1 && _ > 0 && _ == 1 && _ > 0)\n        val maxDecimalsOnesDecimalsOnesDecimalsOnes\
    \ = arr.count(_ > 0 && _ == 1 && _ > 0 && _ == 1 && _ > 0 && _ == 1)\n       \
    \ val maxDecimalsOnesDecimalsOnesDecimalsOnesDecimals = arr.count(_ > 0 && _ ==\
    \ 1 && _ > 0 && _ == 1 && _ > 0 && _ == 1 && _ > 0)\n        val maxDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnes\
    \ = arr.count(_ > 0 && _ == 1 && _ > 0 && _ == 1 && _ > 0 && _ == 1 && _ > 0 &&\
    \ _ == 1)\n        val maxDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimals\
    \ = arr.count(_ > 0 && _ == 1 && _ > 0 && _ == 1 && _ > 0 && _ == 1 && _ > 0 &&\
    \ _ == 1 && _ > 0)\n        val maxDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnes\
    \ = arr.count(_ > 0 && _ == 1 && _ > 0 && _ == 1 && _ > 0 && _ == 1 && _ > 0 &&\
    \ _ == 1 && _ > 0 && _ == 1)\n        val maxDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimals\
    \ = arr.count(_ > 0 && _ == 1 && _ > 0 && _ == 1 && _ > 0 && _ == 1 && _ > 0 &&\
    \ _ == 1 && _ > 0 && _ == 1 && _ > 0)\n        val maxDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnesDecimalsOnes\
    \ = arr.count(_ > 0 && _ == 1 && _ > 0 && _ == 1 && _ > 0 && _ == 1 && _ > 0 &&\
    \ _ == 1 && _ > 0 && _ == 1 && _ > 0 && _ == 1)\n        val max", "        val\
    \ ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val\
    \ onesArr = arr.filter(_ == 1).sortBy(x => math.abs(x))\n        val zerosArr\
    \ = arr.filter(_ == 0).sortBy(x => math.abs(x))\n        val onesCount = onesArr.length\n\
    \        val zerosCount = zerosArr.length\n        val onesSum = onesArr.sum\n\
    \        val zerosSum = zerosArr.sum\n        val onesDiff = onesSum - onesCount\n\
    \        val zerosDiff = zerosSum - zerosCount\n        val onesDiffArr = onesArr.sortBy(x\
    \ => math.abs(x))\n        val zerosDiffArr = zerosArr.sortBy(x => math.abs(x))\n\
    \        val onesDiffCount = onesDiffArr.length\n        val zerosDiffCount =\
    \ zerosDiffArr.length\n        val onesDiffSum = onesDiffArr.sum\n        val\
    \ zerosDiffSum = zerosDiffArr.sum\n        val onesDiffDiff = onesDiffSum - onesDiffCount\n\
    \        val zerosDiffDiff = zerosDiffSum - zerosDiffCount\n        val onesDiffDiffArr\
    \ = onesDiffArr.sortBy(x => math.abs(x))\n        val zerosDiffDiffArr = zerosDiffArr.sortBy(x\
    \ => math.abs(x))\n        val onesDiffDiffCount = onesDiffDiffArr.length\n  \
    \      val zerosDiffDiffCount = zerosDiffDiffArr.length\n        val onesDiffDiffSum\
    \ = onesDiffDiffArr.sum\n        val zerosDiffDiffSum = zerosDiffDiffArr.sum\n\
    \        val onesDiffDiffDiff = onesDiffDiffSum - onesDiffDiffCount\n        val\
    \ zerosDiffDiffDiff = zerosDiffDiffSum - zerosDiffDiffCount\n        val onesDiffDiffDiffArr\
    \ = onesDiffDiffArr.sortBy(x => math.abs(x))\n        val zerosDiffDiffDiffArr\
    \ = zerosDiffDiffArr.sortBy(x => math.abs(x))\n        val onesDiffDiffDiffCount\
    \ = onesDiffDiffDiffArr.length\n        val zerosDiffDiffDiffCount = zerosDiffDiffDiffArr.length\n\
    \        val onesDiffDiffDiffSum = onesDiffDiffDiffArr.sum\n        val zerosDiffDiffDiffSum\
    \ = zerosDiffDiffDiffArr.sum\n        val onesDiffDiffDiffDiff = onesDiffDiffDiffSum\
    \ - onesDiffDiffDiffCount\n        val zeros", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_\
    \ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val onesDecimal =\
    \ onesCount / arr.size\n        val zerosDecimal = zerosCount / arr.size\n   \
    \     val onesDecimalDecimal = onesDecimal / ones\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesDecimal\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosDecimal\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zerosDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal", "        val\
    \ ones = arr.filter(x => x == 1).size\n        val zeros = arr.filter(x => x ==\
    \ 0).size\n        val decimal = arr.map(x => math.abs(x - math.floor(x).toInt)).max\n\
    \        val decimal2 = arr.map(x => math.abs(x - math.floor(x).toInt)).min\n\
    \        val decimal3 = arr.map(x => math.abs(x - math.floor(x).toInt)).sum\n\
    \        val decimal4 = arr.map(x => math.abs(x - math.floor(x).toInt)).product\n\
    \        val decimal5 = arr.map(x => math.abs(x - math.floor(x).toInt)).mean\n\
    \        val decimal6 = arr.map(x => math.abs(x - math.floor(x).toInt)).median\n\
    \        val decimal7 = arr.map(x => math.abs(x - math.floor(x).toInt)).mode\n\
    \        val decimal8 = arr.map(x => math.abs(x - math.floor(x).toInt)).min\n\
    \        val decimal9 = arr.map(x => math.abs(x - math.floor(x).toInt)).max\n\
    \        val decimal10 = arr.map(x => math.abs(x - math.floor(x).toInt)).sum\n\
    \        val decimal11 = arr.map(x => math.abs(x - math.floor(x).toInt)).product\n\
    \        val decimal12 = arr.map(x => math.abs(x - math.floor(x).toInt)).mean\n\
    \        val decimal13 = arr.map(x => math.abs(x - math.floor(x).toInt)).median\n\
    \        val decimal14 = arr.map(x => math.abs(x - math.floor(x).toInt)).mode\n\
    \        val decimal15 = arr.map(x => math.abs(x - math.floor(x).toInt)).min\n\
    \        val decimal16 = arr.map(x => math.abs(x - math.floor(x).toInt)).max\n\
    \        val decimal17 = arr.map(x => math.abs(x - math.floor(x).toInt)).sum\n\
    \        val decimal18 = arr.map(x => math.abs(x - math.floor(x).toInt)).product\n\
    \        val decimal19 = arr.map(x => math.abs(x - math.floor(x).toInt)).mean\n\
    \        val decimal20 = arr.map(x => math.abs(x - math.floor(x).toInt)).median\n\
    \        val decimal21 = arr.map(x => math.abs(x - math.floor(x).toInt)).mode\n\
    \        val decimal22 = arr.map(x => math.abs(x - math.floor(x).toInt)).min\n\
    \        val decimal23 = arr.map(x => math.abs(x - math.floor(x).toInt)).max\n\
    \        val decimal24 = arr.map(x => math.abs(x - math.floor(x).toInt)).sum\n\
    \        val decimal25 = arr.map(x => math.abs(x - math.floor(x).toInt)).product\n",
  "        val ones = arr.filter(x => x == 1).size\n        val zeros = arr.filter(x\
    \ => x == 0).size\n        val decimal = arr.map(x => (x % 2).asInstanceOf[Int]).sum\n\
    \        val onesDecimal = arr.map(x => (x % 2).asInstanceOf[Int]).sum\n     \
    \   val zerosDecimal = arr.map(x => (x % 2).asInstanceOf[Int]).sum\n        val\
    \ onesDecimal = arr.map(x => (x % 2).asInstanceOf[Int]).sum\n        val zerosDecimal\
    \ = arr.map(x => (x % 2).asInstanceOf[Int]).sum\n        val onesDecimal = arr.map(x\
    \ => (x % 2).asInstanceOf[Int]).sum\n        val zerosDecimal = arr.map(x => (x\
    \ % 2).asInstanceOf[Int]).sum\n        val onesDecimal = arr.map(x => (x % 2).asInstanceOf[Int]).sum\n\
    \        val zerosDecimal = arr.map(x => (x % 2).asInstanceOf[Int]).sum\n    \
    \    val onesDecimal = arr.map(x => (x % 2).asInstanceOf[Int]).sum\n        val\
    \ zerosDecimal = arr.map(x => (x % 2).asInstanceOf[Int]).sum\n        val onesDecimal\
    \ = arr.map(x => (x % 2).asInstanceOf[Int]).sum\n        val zerosDecimal = arr.map(x\
    \ => (x % 2).asInstanceOf[Int]).sum\n        val onesDecimal = arr.map(x => (x\
    \ % 2).asInstanceOf[Int]).sum\n        val zerosDecimal = arr.map(x => (x % 2).asInstanceOf[Int]).sum\n\
    \        val onesDecimal = arr.map(x => (x % 2).asInstanceOf[Int]).sum\n     \
    \   val zerosDecimal = arr.map(x => (x % 2).asInstanceOf[Int]).sum\n        val\
    \ onesDecimal = arr.map(x => (x % 2).asInstanceOf[Int]).sum\n        val zerosDecimal\
    \ = arr.map(x => (x % 2).asInstanceOf[Int]).sum\n        val onesDecimal = arr.map(x\
    \ => (x % 2).asInstanceOf[Int]).sum\n        val zerosDecimal = arr.map(x => (x\
    \ % 2).asInstanceOf[Int]).sum\n        val onesDecimal = arr.map(x => (x % 2).asInstanceOf[Int]).sum\n\
    \        val zerosDecimal = arr.map(x => (x % 2).asInstanceOf[Int]).sum\n    \
    \    val onesDecimal = arr.map(x => (x % 2).asInstanceOf[Int", "        val ones\
    \ = arr.filter(_ % 2 == 0).length\n        val zeros = arr.filter(_ % 2 == 1).length\n\
    \        val decimal = arr.filter(_ % 2 == 0).sum / 2\n        val decimal2 =\
    \ arr.filter(_ % 2 == 1).sum / 2\n        val decimal3 = arr.filter(_ % 2 == 0).sum\
    \ / 3\n        val decimal4 = arr.filter(_ % 2 == 1).sum / 3\n        val decimal5\
    \ = arr.filter(_ % 2 == 0).sum / 5\n        val decimal6 = arr.filter(_ % 2 ==\
    \ 1).sum / 5\n        val decimal7 = arr.filter(_ % 2 == 0).sum / 7\n        val\
    \ decimal8 = arr.filter(_ % 2 == 1).sum / 7\n        val decimal9 = arr.filter(_\
    \ % 2 == 0).sum / 9\n        val decimal10 = arr.filter(_ % 2 == 1).sum / 9\n\
    \        val decimal11 = arr.filter(_ % 2 == 0).sum / 11\n        val decimal12\
    \ = arr.filter(_ % 2 == 1).sum / 11\n        val decimal13 = arr.filter(_ % 2\
    \ == 0).sum / 13\n        val decimal14 = arr.filter(_ % 2 == 1).sum / 13\n  \
    \      val decimal15 = arr.filter(_ % 2 == 0).sum / 15\n        val decimal16\
    \ = arr.filter(_ % 2 == 1).sum / 15\n        val decimal17 = arr.filter(_ % 2\
    \ == 0).sum / 17\n        val decimal18 = arr.filter(_ % 2 == 1).sum / 17\n  \
    \      val decimal19 = arr.filter(_ % 2 == 0).sum / 19\n        val decimal20\
    \ = arr.filter(_ % 2 == 1).sum / 19\n        val decimal21 = arr.filter(_ % 2\
    \ == 0).sum / 21\n        val decimal22 = arr.filter(_ % 2 == 1).sum / 21\n  \
    \      val decimal23 = arr.filter(_ % 2 == 0).sum / 23\n        val decimal24\
    \ = arr.filter(_ % 2 == 1).sum / 23\n        val decimal25 = arr.filter(_ % 2\
    \ == 0).sum / 25\n        val decimal26 = arr.filter(_ % 2 == 1).sum / 25\n  \
    \      val decimal27 = arr.filter(_ % 2 == 0).sum / 27\n        val decimal28\
    \ = arr.filter(_ % 2 == 1).sum / 27\n        val decimal29 = arr.filter(_ % 2\
    \ == 0).sum / 29\n        val decimal30 = arr.filter(_ % 2 == 1).sum / 29\n  \
    \      val decimal31 = arr.filter(_ % 2 == 0).sum / 31\n        val decimal32\
    \ = arr.filter(_ % 2 == 1).sum / 31\n        val decimal33 = arr.filter(_ % 2\
    \ == 0).sum / 33\n        val decimal34 = arr.filter", "        val ones = arr.count(_\
    \ == 1)\n        val decimals = arr.count(_ > 0)\n        val onesDecimals = ones\
    \ * decimals\n        val onesDecimalsArray = onesDecimals.toArray\n        val\
    \ onesDecimalsArrayLength = onesDecimalsArray.length\n        val decimalsArray\
    \ = decimals.toArray\n        val decimalsArrayLength = decimalsArray.length\n\
    \        val onesDecimalsArrayLength = onesDecimalsArrayLength + decimalsArrayLength\n\
    \        val onesDecimalsArray = onesDecimalsArray.toList\n        val decimalsArray\
    \ = decimalsArray.toList\n        val decimalsArrayLength = decimalsArray.length\n\
    \        val onesDecimalsArrayLength = onesDecimalsArrayLength + decimalsArrayLength\n\
    \        val onesDecimalsArray = onesDecimalsArray.toArray\n        val decimalsArray\
    \ = decimalsArray.toArray\n        val onesDecimalsArrayLength = onesDecimalsArrayLength\
    \ + decimalsArrayLength\n        val onesDecimalsArray = onesDecimalsArray.toList\n\
    \        val decimalsArray = decimalsArray.toList\n        val decimalsArrayLength\
    \ = decimalsArray.length\n        val onesDecimalsArrayLength = onesDecimalsArrayLength\
    \ + decimalsArrayLength\n        val onesDecimalsArray = onesDecimalsArray.toArray\n\
    \        val decimalsArray = decimalsArray.toArray\n        val onesDecimalsArrayLength\
    \ = onesDecimalsArrayLength + decimalsArrayLength\n        val onesDecimalsArray\
    \ = onesDecimalsArray.toList\n        val decimalsArray = decimalsArray.toList\n\
    \        val decimalsArrayLength = decimalsArray.length\n        val onesDecimalsArrayLength\
    \ = onesDecimalsArrayLength + decimalsArrayLength\n        val onesDecimalsArray\
    \ = onesDecimalsArray.toArray\n        val decimalsArray = decimalsArray.toArray\n\
    \        val onesDecimalsArrayLength = onesDecimalsArrayLength + decimalsArrayLength\n\
    \        val onesDecimalsArray = onesDecimalsArray.toList\n        val decimalsArray\
    \ = decimalsArray.toList\n        val decimalsArrayLength = decimalsArray.length\n\
    \        val onesDecimalsArrayLength = onesDecimalsArrayLength + decimalsArrayLength\n\
    \        val onesDecimalsArray = onesDecimalsArray.toArray\n        val decimalsArray\
    \ = decimalsArray.toArray\n        ", "        val ones = arr.count(_ == 1)\n\
    \        val zeros = arr.count(_ == 0)\n        val onesArr = arr.filter(_ ==\
    \ 1).sorted\n        val zerosArr = arr.filter(_ == 0).sorted\n        val onesCount\
    \ = onesArr.length\n        val zerosCount = zerosArr.length\n        val onesSum\
    \ = onesArr.foldLeft(0L)(_ + _)\n        val zerosSum = zerosArr.foldLeft(0L)(_\
    \ + _)\n        val onesSumInt = onesSum.toInt\n        val zerosSumInt = zerosSum.toInt\n\
    \        val onesSumDecimal = onesSumInt / onesCount\n        val zerosSumDecimal\
    \ = zerosSumInt / zerosCount\n        val onesSumDecimalInt = onesSumDecimal.toInt\n\
    \        val zerosSumDecimalInt = zerosSumDecimal.toInt\n        val onesSumDecimalDecimal\
    \ = onesSumDecimalInt / onesCount\n        val zerosSumDecimalDecimal = zerosSumDecimalInt\
    \ / zerosCount\n        val onesSumDecimalDecimalInt = onesSumDecimalDecimal.toInt\n\
    \        val zerosSumDecimalDecimalInt = zerosSumDecimalDecimal.toInt\n      \
    \  val onesSumDecimalDecimalDecimal = onesSumDecimalDecimalInt / onesCount\n \
    \       val zerosSumDecimalDecimalDecimal = zerosSumDecimalDecimalInt / zerosCount\n\
    \        val onesSumDecimalDecimalDecimalInt = onesSumDecimalDecimalDecimal.toInt\n\
    \        val zerosSumDecimalDecimalDecimalInt = zerosSumDecimalDecimalDecimal.toInt\n\
    \        val onesSumDecimalDecimalDecimalDecimal = onesSumDecimalDecimalDecimalInt\
    \ / onesCount\n        val zerosSumDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimalInt\
    \ / zerosCount\n        val onesSumDecimalDecimalDecimalDecimalInt = onesSumDecimalDecimalDecimalDecimal.toInt\n\
    \        val zerosSumDecimalDecimalDecimalDecimalInt = zerosSumDecimalDecimalDecimalDecimal.toInt\n\
    \        val onesSumDecimalDecimalDecimalDecimalDecimal = onesSumDecimalDecimalDecimalDecimalInt\
    \ / onesCount\n        val zerosSumDecimalDecimalDecimalDecimalDecimal = zerosSumDecimalDecimalDecimalDecimalInt\
    \ / zerosCount\n        val onesSumDecimalDecimalDecimalDecimalDecimalInt = onesSumDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val zerosSumDecimalDecimalDecimalDecimalDecimalInt = zerosSumDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val onesSumDecimalDecimalDecimalDecimalDecimal = onesSumDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArray = arr.map(x => (x % 2 == 0 ? 1 : 0)).toArray\n        val\
    \ zerosArray = arr.map(x => (x % 2 == 0 ? 0 : 1)).toArray\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArrayLength + zerosArrayLength\n        val onesArray\
    \ = onesArray.take(onesArrayLength)\n        val zerosArray = zerosArray.take(zerosArrayLength)\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArrayLength + zerosArrayLength\n\
    \        val onesArray = onesArray.take(onesArrayLength)\n        val zerosArray\
    \ = zerosArray.take(zerosArrayLength)\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArrayLength\
    \ = onesArrayLength + zerosArrayLength\n        val onesArray = onesArray.take(onesArrayLength)\n\
    \        val zerosArray = zerosArray.take(zerosArrayLength)\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArrayLength + zerosArrayLength\n        val onesArray\
    \ = onesArray.take(onesArrayLength)\n        val zerosArray = zerosArray.take(zerosArrayLength)\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArrayLength + zerosArrayLength\n\
    \        val onesArray = onesArray.take(onesArrayLength)\n        val zerosArray\
    \ = zerosArray.take(zerosArrayLength)\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArrayLength\
    \ = onesArrayLength + zerosArrayLength\n        val onesArray = onesArray.take(onesArrayLength)\n\
    \        val zerosArray = zerosArray.take(zerosArrayLength)\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArrayLength + zerosArrayLength\n        val onesArray\
    \ = onesArray.take(onesArrayLength)\n        val zerosArray = zerosArray.", " \
    \       val ones = arr.map(x => if (x == 1) 1 else 0)\n        val twos = arr.map(x\
    \ => if (x == 2) 2 else 0)\n        val threes = arr.map(x => if (x == 3) 3 else\
    \ 0)\n        val fours = arr.map(x => if (x == 4) 4 else 0)\n        val fives\
    \ = arr.map(x => if (x == 5) 5 else 0)\n        val sixes = arr.map(x => if (x\
    \ == 6) 6 else 0)\n        val sevens = arr.map(x => if (x == 7) 7 else 0)\n \
    \       val eights = arr.map(x => if (x == 8) 8 else 0)\n        val nines = arr.map(x\
    \ => if (x == 9) 9 else 0)\n        val tens = arr.map(x => if (x == 10) 10 else\
    \ 0)\n        val hundreds = arr.map(x => if (x == 11) 11 else 0)\n        val\
    \ thousands = arr.map(x => if (x == 100) 100 else 0)\n        val ten_thousands\
    \ = arr.map(x => if (x == 1000) 1000 else 0)\n        val hundred_thousands =\
    \ arr.map(x => if (x == 10000) 10000 else 0)\n        val millions = arr.map(x\
    \ => if (x == 1000000) 1000000 else 0)\n        val billions = arr.map(x => if\
    \ (x == 1000000000) 1000000000 else 0)\n        val trillions = arr.map(x => if\
    \ (x == 1000000000000) 1000000000000 else 0)\n        val quadrillions = arr.map(x\
    \ => if (x == 1000000000000000) 1000000000000000 else 0)\n        val quintillions\
    \ = arr.map(x => if (x == 1000000000000000000) 1000000000000000000 else 0)\n \
    \       val ones_count = ones.size\n        val twos_count = twos.size\n     \
    \   val threes_count = threes.size\n        val fours_count = fours.size\n   \
    \     val fives_count = fives.size\n        val sixes_count = sixes.size\n   \
    \     val sevens_count = sevens.size\n        val eights_count = eights.size\n\
    \        val nines_count = nines.size\n        val tens_count = tens.size\n  \
    \      val hundreds_count = hundreds.size\n        val thousands_count = thousands.size\n\
    \        val ten_thousands_count = ten_thousands.size\n        val hundred_thousands_count\
    \ = hundred_thousands.size\n        val millions_count = millions.size\n     \
    \   val billions_count = billions.size\n        val trillions_count = trillions.size\n\
    \        val quadrillion", "        val ones = arr.count(_ == 1)\n        val\
    \ zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n     \
    \   val zerosCount = arr.count(_ == 0)\n        val onesDecimal = ones / onesCount\n\
    \        val zerosDecimal = zeros / zerosCount\n        val onesDecimalDecimal\
    \ = onesDecimal / onesCount\n        val zerosDecimalDecimal = zerosDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / zerosCount\n \
    \       val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesArr = arr.map(x\
    \ => (x % 2 == 0)).sortBy(x => -x)\n        val zerosArr = arr.map(x => (x % 2\
    \ == 1)).sortBy(x => -x)\n        val onesCount = onesArr.size\n        val zerosCount\
    \ = zerosArr.size\n        val onesSum = onesArr.sum\n        val zerosSum = zerosArr.sum\n\
    \        val onesSumArr = onesArr.map(x => (x % 2 == 0)).sortBy(x => -x)\n   \
    \     val zerosSumArr = zerosArr.map(x => (x % 2 == 1)).sortBy(x => -x)\n    \
    \    val onesSumCount = onesSumArr.size\n        val zerosSumCount = zerosSumArr.size\n\
    \        val onesSumArr = onesArr.map(x => (x % 2 == 0)).sortBy(x => -x)\n   \
    \     val zerosSumArr = zerosArr.map(x => (x % 2 == 1)).sortBy(x => -x)\n    \
    \    val onesSumCount = onesSumArr.size\n        val zerosSumCount = zerosSumArr.size\n\
    \        val onesSumArr = onesArr.map(x => (x % 2 == 0)).sortBy(x => -x)\n   \
    \     val zerosSumArr = zerosArr.map(x => (x % 2 == 1)).sortBy(x => -x)\n    \
    \    val onesSumCount = onesSumArr.size\n        val zerosSumCount = zerosSumArr.size\n\
    \        val onesSumArr = onesArr.map(x => (x % 2 == 0)).sortBy(x => -x)\n   \
    \     val zerosSumArr = zerosArr.map(x => (x % 2 == 1)).sortBy(x => -x)\n    \
    \    val onesSumCount = onesSumArr.size\n        val zerosSumCount = zerosSumArr.size\n\
    \        val onesSumArr = onesArr.map(x => (x % 2 == 0)).sortBy(x => -x)\n   \
    \     val zerosSumArr = zerosArr.map(x => (x % 2 == 1)).sortBy(x => -x)\n    \
    \    val onesSumCount = onesSumArr.size\n        val zerosSumCount = zerosSumArr.size\n\
    \        val onesSumArr = onesArr.map(x => (x % 2 == 0)).sortBy(x => -x)\n   \
    \     val zerosSumArr = zerosArr.map(x ", "        val ones = arr.filter(x =>\
    \ x == 1).length\n        val decs = arr.filter(x => x == 0).map(x => x.toString.toInt).sortBy(_.toInt)\n\
    \        val sorted = decs.zip(ones).sortBy(_._1).map(x => x._2).zip(arr).sortBy(_._1).map(x\
    \ => x._2)\n        sorted.toList", "        val ones = arr.filter(x => x % 2\
    \ == 0).length\n        val twos = arr.filter(x => x % 2 == 1).length\n      \
    \  val decimals = arr.filter(x => x % 1 == 0).length\n        val result = arr.sortWith(x\
    \ => if (ones > twos) x.toInt else -x.toInt)\n        if (ones > twos) result\
    \ else result.map(x => if (decimals > ones) x.toInt else -x.toInt)", "       \
    \ val ones = arr.filter(_ % 2 == 0).length\n        val decimals = arr.filter(_\
    \ % 2 == 1).length\n        val sorted = arr.sortWith(\n            (a: Long,\
    \ b: Long) => if (ones == 0) a else -ones - b\n        )\n        sorted.take(decimals)",
  "        val ones = arr.filter(x => x == 1).size\n        val twos = arr.filter(x\
    \ => x == 2).size\n        val threes = arr.filter(x => x == 3).size\n       \
    \ val fours = arr.filter(x => x == 4).size\n        val fives = arr.filter(x =>\
    \ x == 5).size\n        val sixes = arr.filter(x => x == 6).size\n        val\
    \ sevens = arr.filter(x => x == 7).size\n        val eights = arr.filter(x =>\
    \ x == 8).size\n        val nines = arr.filter(x => x == 9).size\n        val\
    \ tens = arr.filter(x => x == 10).size\n        val hundreds = arr.filter(x =>\
    \ x == 11).size\n        val thousands = arr.filter(x => x == 12).size\n     \
    \   val millions = arr.filter(x => x == 13).size\n        val billions = arr.filter(x\
    \ => x == 14).size\n        val trillions = arr.filter(x => x == 15).size\n  \
    \      val quadrillions = arr.filter(x => x == 16).size\n        val quintillions\
    \ = arr.filter(x => x == 17).size\n        val sextillions = arr.filter(x => x\
    \ == 18).size\n        val septillions = arr.filter(x => x == 19).size\n     \
    \   val octillions = arr.filter(x => x == 20).size\n        val nonillions = arr.filter(x\
    \ => x == 21).size\n        val decillions = arr.filter(x => x == 22).size\n \
    \       val undecillions = arr.filter(x => x == 23).size\n        val duodecillions\
    \ = arr.filter(x => x == 24).size\n        val tredecillions = arr.filter(x =>\
    \ x == 25).size\n        val quattuordecillions = arr.filter(x => x == 26).size\n\
    \        val quindecillions = arr.filter(x => x == 27).size\n        val sexdecillions\
    \ = arr.filter(x => x == 28).size\n        val septendecillions = arr.filter(x\
    \ => x == 29).size\n        val octodecillions = arr.filter(x => x == 30).size\n\
    \        val novemdecillions = arr.filter(x => x == 31).size\n        val vigintillions\
    \ = arr.filter(x => x == 32).size\n        val unvigintillions = arr.filter(x\
    \ => x == 33).size\n        val duovigintillions = arr.", "        val ones =\
    \ arr.count(_ == 1)\n        val decimals = arr.count(_ < 0)\n        val decimalsOrder\
    \ = decimals.toDouble / ones\n        val onesOrder = ones.toDouble / decimals\n\
    \        arr.sortWith(x => decimalsOrder + onesOrder - x.toDouble)", "       \
    \ val ones = arr.filter(x => x == 1).size\n        val zeros = arr.filter(x =>\
    \ x == 0).size\n        val decimals = arr.filter(x => x != 0).size\n        val\
    \ decimalsDecimals = decimals.toDouble / ones\n        arr.sortWith(x => decimalsDecimals.toDouble\
    \ - x.toDouble)", "        val ones = arr.filter(_ % 2 == 0).length\n        val\
    \ decimals = arr.filter(_ % 2 == 1).length\n        val onesDecimals = ones *\
    \ decimals\n        val onesDecimalsSorted = arr.sortBy(_ % onesDecimals)\n  \
    \      onesDecimalsSorted.reverse", "        val ones = arr.count(x => x == 1)\n\
    \        val decimals = arr.count(x => x == 0)\n        val onesArr = arr.map(x\
    \ => if (x == 1) 1 else 0)\n        val decimalsArr = arr.map(x => if (x == 0)\
    \ 0 else 1)\n        val onesArr = onesArr.sortBy(x => x)\n        val decimalsArr\
    \ = decimalsArr.sortBy(x => x)\n        val onesArr = onesArr.sortBy(x => math.abs(x))\n\
    \        val decimalsArr = decimalsArr.sortBy(x => math.abs(x))\n        onesArr\
    \ ++ decimalsArr", "        val ones = arr.count(_ == 1)\n        val zeros =\
    \ arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n        val zerosCount\
    \ = arr.count(_ == 0)\n        val onesDecimal = onesCount / arr.length\n    \
    \    val zerosDecimal = zerosCount / arr.length\n        val onesDecimalDecimal\
    \ = onesDecimal / ones\n        val zerosDecimalDecimal = zerosDecimal / zeros\n\
    \        val onesDecimalDecimalDecimal = onesDecimalDecimal / ones\n        val\
    \ zerosDecimalDecimalDecimal = zerosDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(x => x == 1)\n        val decs = arr.map(x => math.abs(math.log2(x)))\n\
    \        val sorted = decs.zip(ones).sortBy(_._1).map(x => x._2)\n        sorted.map(x\
    \ => arr.indexOf(x)).sort", "        val ones = arr.filter(x => x == 1).length\n\
    \        val twos = arr.filter(x => x == 2).length\n        val threes = arr.filter(x\
    \ => x == 3).length\n        val fours = arr.filter(x => x == 4).length\n    \
    \    val fives = arr.filter(x => x == 5).length\n        val sixes = arr.filter(x\
    \ => x == 6).length\n        val sevens = arr.filter(x => x == 7).length\n   \
    \     val eights = arr.filter(x => x == 8).length\n        val nines = arr.filter(x\
    \ => x == 9).length\n        val tens = arr.filter(x => x == 10).length\n    \
    \    val hundreds = arr.filter(x => x == 11).length\n        val thousands = arr.filter(x\
    \ => x == 12).length\n        val millions = arr.filter(x => x == 13).length\n\
    \        val billions = arr.filter(x => x == 14).length\n        val trillions\
    \ = arr.filter(x => x == 15).length\n        val quadrillions = arr.filter(x =>\
    \ x == 16).length\n        val quintillions = arr.filter(x => x == 17).length\n\
    \        val sextillions = arr.filter(x => x == 18).length\n        val septillions\
    \ = arr.filter(x => x == 19).length\n        val octillions = arr.filter(x =>\
    \ x == 20).length\n        val nonillions = arr.filter(x => x == 21).length\n\
    \        val decillions = arr.filter(x => x == 22).length\n        val undecillions\
    \ = arr.filter(x => x == 23).length\n        val duodecillions = arr.filter(x\
    \ => x == 24).length\n        val tredecillions = arr.filter(x => x == 25).length\n\
    \        val quattuordecillions = arr.filter(x => x == 26).length\n        val\
    \ quindecillions = arr.filter(x => x == 27).length\n        val sexdecillions\
    \ = arr.filter(x => x == 28).length\n        val septendecillions = arr.filter(x\
    \ => x == 29).length\n        val octodecillions = arr.filter(x => x == 30).length\n\
    \        val novemdecillions = arr.filter(x => x == 31).length\n        val vigintillions\
    \ = arr.filter(x => x == 32).length\n        val unvigintillions = arr.filter(x\
    \ => x == 33).length\n        val duovigintillions = arr.", "        val ones\
    \ = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesArr\
    \ = arr.map(x => if (x == 1) 1 else 0)\n        val zerosArr = arr.map(x => if\
    \ (x == 0) 0 else 1)\n        val onesArr = onesArr.sortWith(_ < _)\n        val\
    \ zerosArr = zerosArr.sortWith(_ < _)\n        val onesArr = onesArr.sortWith(_\
    \ < _)\n        val zerosArr = zerosArr.sortWith(_ < _)\n        val onesArr =\
    \ onesArr.sortWith(_ < _)\n        val zerosArr = zerosArr.sortWith(_ < _)\n \
    \       val onesArr = onesArr.sortWith(_ < _)\n        val zerosArr = zerosArr.sortWith(_\
    \ < _)\n        val onesArr = onesArr.sortWith(_ < _)\n        val zerosArr =\
    \ zerosArr.sortWith(_ < _)\n        val onesArr = onesArr.sortWith(_ < _)\n  \
    \      val zerosArr = zerosArr.sortWith(_ < _)\n        val onesArr = onesArr.sortWith(_\
    \ < _)\n        val zerosArr = zerosArr.sortWith(_ < _)\n        val onesArr =\
    \ onesArr.sortWith(_ < _)\n        val zerosArr = zerosArr.sortWith(_ < _)\n \
    \       val onesArr = onesArr.sortWith(_ < _)\n        val zerosArr = zerosArr.sortWith(_\
    \ < _)\n        val onesArr = onesArr.sortWith(_ < _)\n        val zerosArr =\
    \ zerosArr.sortWith(_ < _)\n        val onesArr = onesArr.sortWith(_ < _)\n  \
    \      val zerosArr = zerosArr.sortWith(_ < _)\n        val onesArr = onesArr.sortWith(_\
    \ < _)\n        val zerosArr = zerosArr.sortWith(_ < _)\n        val onesArr =\
    \ onesArr.sortWith(_ < _)\n        val zerosArr = zerosArr.sortWith(_ < _)\n \
    \       val onesArr = onesArr.sortWith(_ < _)\n        val zerosArr = zerosArr.sortWith(_\
    \ < _)\n        val onesArr = onesArr.sortWith(_", "        val ones = arr.count(_\
    \ == 1)\n        val twos = arr.count(_ == 2)\n        val threes = arr.count(_\
    \ == 3)\n        val fours = arr.count(_ == 4)\n        val fives = arr.count(_\
    \ == 5)\n        val sixes = arr.count(_ == 6)\n        val sevens = arr.count(_\
    \ == 7)\n        val eights = arr.count(_ == 8)\n        val nines = arr.count(_\
    \ == 9)\n        val tens = arr.count(_ == 10)\n        val hundreds = arr.count(_\
    \ == 100)\n        val thousands = arr.count(_ == 1000)\n        val millions\
    \ = arr.count(_ == 1000000)\n        val billions = arr.count(_ == 1000000000)\n\
    \        val trillions = arr.count(_ == 1000000000000)\n        val quadrillions\
    \ = arr.count(_ == 1000000000000000)\n        val quintillions = arr.count(_ ==\
    \ 1000000000000000000)\n        val sextillions = arr.count(_ == 10000000000000000000000)\n\
    \        val septillions = arr.count(_ == 1000000000000000000000000)\n       \
    \ val octillions = arr.count(_ == 1000000000000000000000000000)\n        val nonillions\
    \ = arr.count(_ == 10000000000000000000000000000000)\n        val decillions =\
    \ arr.count(_ == 1000000000000000000000000000000000)\n        val undecillions\
    \ = arr.count(_ == 10000000000000000000000000000000001)\n        val decillionsOne\
    \ = arr.count(_ == 10000000000000000000000000000000010)\n        val undecillionsOne\
    \ = arr.count(_ == 10000000000000000000000000000000011)\n        val decillionsTwo\
    \ = arr.count(_ == 100000000000000000000000000000000100)\n        val undecillionsTwo\
    \ = arr.count(_ == 100000000000000000000000000000000101)\n        val decillionsThree\
    \ = arr.count(_ == 1000000000000000000000000000000001000)\n        val undecillionsThree\
    \ = arr.count(_ == 1000000000000000000000000000000001001)\n        val decillionsFour\
    \ = arr.count(_ == 10000000000000000000000000000000010000)\n        val undecillionsFour\
    \ = arr.count(_ == 10000000000000000000000000000000010001)\n        val decillionsFive\
    \ = arr.count(_ == 100000000000000000000000000000000100000)\n        val undecillionsFive\
    \ = arr.count(_ == 100000000000000000000000000000000100001)\n        val decillionsSix\
    \ = arr.count(_ == 1000000000000000000000000000000001000000)\n        val undecillion",
  "        val ones = arr.count(_ == 1)\n        val decs = arr.map(x => math.abs(math.log2(x)))\n\
    \        val sorted = decs.sortWith((x, y) => math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.signum(x-y) * math.signum(x-y) * math.signum(x-y)\
    \ * math.signum(x-y) * math.sig", "        val ones = arr.filter(x => x % 2 ==\
    \ 0).length\n        val zeros = arr.filter(x => x % 2 == 1).length\n        val\
    \ onesArr = arr.filter(x => x % 2 == 0).sorted\n        val zerosArr = arr.filter(x\
    \ => x % 2 == 1).sorted\n        val onesCount = onesArr.count(_ == 1)\n     \
    \   val zerosCount = zerosArr.count(_ == 0)\n        val onesDecimal = onesArr.map(x\
    \ => math.pow(2,x)).sum\n        val zerosDecimal = zerosArr.map(x => math.pow(2,x)).sum\n\
    \        val onesDecimalCount = onesArr.count(_ == onesDecimal)\n        val zerosDecimalCount\
    \ = zerosArr.count(_ == zerosDecimal)\n        val onesDecimalCount = onesArr.count(_\
    \ == onesDecimal)\n        val zerosDecimalCount = zerosArr.count(_ == zerosDecimal)\n\
    \        val onesDecimalCount = onesArr.count(_ == onesDecimal)\n        val zerosDecimalCount\
    \ = zerosArr.count(_ == zerosDecimal)\n        val onesDecimalCount = onesArr.count(_\
    \ == onesDecimal)\n        val zerosDecimalCount = zerosArr.count(_ == zerosDecimal)\n\
    \        val onesDecimalCount = onesArr.count(_ == onesDecimal)\n        val zerosDecimalCount\
    \ = zerosArr.count(_ == zerosDecimal)\n        val onesDecimalCount = onesArr.count(_\
    \ == onesDecimal)\n        val zerosDecimalCount = zerosArr.count(_ == zerosDecimal)\n\
    \        val onesDecimalCount = onesArr.count(_ == onesDecimal)\n        val zerosDecimalCount\
    \ = zerosArr.count(_ == zerosDecimal)\n        val onesDecimalCount = onesArr.count(_\
    \ == onesDecimal)\n        val zerosDecimalCount = zerosArr.count(_ == zerosDecimal)\n\
    \        val onesDecimalCount = onesArr.count(_ == onesDecimal)\n        val zerosDecimalCount\
    \ = zerosArr.count(_ == zerosDecimal)\n        val onesDecimalCount = onesArr.count(_\
    \ == onesDecimal)\n        val zerosDecimalCount = zerosArr.count(_ == zerosDecimal)\n\
    \        val onesDecimalCount = onesArr.count(_ == onesDecimal)\n        val zerosDecimalCount\
    \ = zerosArr.count(_ == zerosDecimal)\n        val onesDecimalCount = onesArr.count(_\
    \ == onesDecimal)\n        val zerosDecimalCount = zerosArr.", "        val ones\
    \ = arr.filter(_ % 2 == 0).length\n        val decs = arr.filter(_ % 2 == 1).map(_.toString.toInt).sortWith(_\
    \ < _)\n        val result = decs.zip(ones).sortWith(_._1 < _._1).map(_._2)\n\
    \        result.map(_.toLong)", "        val ones = arr.filter(x => x == 1).length\n\
    \        val decs = arr.filter(x => x == 0).map(_.toString.toInt).sortBy(_.toString.toInt).reverse\n\
    \        val decs = decs.takeWhile(x => x < ones)\n        val decs = decs.takeWhile(x\
    \ => x < decs.length)\n        val decs = decs.takeWhile(x => x < decs.length)\n\
    \        val decs = decs.takeWhile(x => x < decs.length)\n        val decs = decs.takeWhile(x\
    \ => x < decs.length)\n        val decs = decs.takeWhile(x => x < decs.length)\n\
    \        val decs = decs.takeWhile(x => x < decs.length)\n        val decs = decs.takeWhile(x\
    \ => x < decs.length)\n        val decs = decs.takeWhile(x => x < decs.length)\n\
    \        val decs = decs.takeWhile(x => x < decs.length)\n        val decs = decs.takeWhile(x\
    \ => x < decs.length)\n        val decs = decs.takeWhile(x => x < decs.length)\n\
    \        val decs = decs.takeWhile(x => x < decs.length)\n        val decs = decs.takeWhile(x\
    \ => x < decs.length)\n        val decs = decs.takeWhile(x => x < decs.length)\n\
    \        val decs = decs.takeWhile(x => x < decs.length)\n        val decs = decs.takeWhile(x\
    \ => x < decs.length)\n        val decs = decs.takeWhile(x => x < decs.length)\n\
    \        val decs = decs.takeWhile(x => x < decs.length)\n        val decs = decs.takeWhile(x\
    \ => x < decs.length)\n        val decs = decs.takeWhile(x => x < decs.length)\n\
    \        val decs = decs.takeWhile(x => x < decs.length)\n        val decs = decs.takeWhile(x\
    \ => x < decs.length)\n        val decs = decs.takeWhile(x => x < decs.length)\n\
    \        val decs = decs.takeWhile(x => x < decs.length)\n        val decs = decs.takeWhile(x\
    \ => x < decs.length)\n        val decs = decs.takeWhile(x => x < decs.length)\n\
    \        val decs = decs.takeWhile(x => x < decs.length)\n        val decs = decs.takeWhile(x\
    \ => x < decs.length)\n        val decs = decs.takeWhile(x ", "        val ones\
    \ = arr.filter(x => x == 1).length\n        val zeros = arr.filter(x => x == 0).length\n\
    \        val maxOnes = arr.filter(x => x == 1).max\n        val maxZeros = arr.filter(x\
    \ => x == 0).max\n        val maxOnesDecimal = maxOnes.toString.toDouble\n   \
    \     val maxZerosDecimal = maxZeros.toString.toDouble\n        val maxDecimal\
    \ = math.max(maxOnesDecimal, maxZerosDecimal)\n        val decimal = math.min(maxDecimal,\
    \ maxOnesDecimal, maxZerosDecimal)\n        val onesDecimal = ones / decimal\n\
    \        val zerosDecimal = zeros / decimal\n        val decimals = arr.map(x\
    \ => x.toString.toDouble).toList\n        val decimalsSorted = decimals.sortWith((x,\
    \ y) => math.abs(x - y) < decimal)\n        val decimalsSortedWithOnes = decimalsSorted.filter(x\
    \ => x == onesDecimal)\n        val decimalsSortedWithZeros = decimalsSorted.filter(x\
    \ => x == zerosDecimal)\n        val decimalsSortedWithOnesDecimal = decimalsSortedWithOnes.map(x\
    \ => x.toString.toDouble).toList\n        val decimalsSortedWithZerosDecimal =\
    \ decimalsSortedWithZeros.map(x => x.toString.toDouble).toList\n        val decimalsSortedWithOnesDecimalSorted\
    \ = decimalsSortedWithOnesDecimal.sortWith((x, y) => math.abs(x - y) < decimal)\n\
    \        val decimalsSortedWithZerosDecimalSorted = decimalsSortedWithZerosDecimal.sortWith((x,\
    \ y) => math.abs(x - y) < decimal)\n        val decimalsSortedWithOnesDecimalSortedWithZeros\
    \ = decimalsSortedWithOnesDecimalSorted.filter(x => x == zerosDecimal)\n     \
    \   val decimalsSortedWithOnesDecimalSortedWithOnes = decimalsSortedWithOnesDecimalSorted.filter(x\
    \ => x == onesDecimal)\n        val decimalsSortedWithOnesDecimalSortedWithZerosDecimal\
    \ = decimalsSortedWithOnesDecimalSortedWithZeros.map(x => x.toString.toDouble).toList\n\
    \        val decimalsSortedWithOnesDecimalSortedWithOnesDecimal = decimalsSortedWithOnesDecimalSortedWithOnes.map(x\
    \ => x.toString.toDouble).toList\n        val decimalsSortedWithOnesDecimalSortedWithZerosDecimalSorted\
    \ = decimalsSortedWithOnesDecimalSortedWithZerosDecimal.sortWith((", "       \
    \ val ones = arr.map(x => if (x == 1) 1 else 0)\n        val zeros = arr.map(x\
    \ => if (x == 0) 0 else 1)\n        val onesCount = ones.toList\n        val zerosCount\
    \ = zeros.toList\n        val onesZeros = ones.zip(zeros)\n        val onesZerosCount\
    \ = onesZeros.toList\n        val onesZerosCountSorted = onesZerosCount.sortBy(_._1)\n\
    \        val onesZerosCountSortedSorted = onesZerosCountSorted.sortBy(_._2)\n\
    \        val onesZerosCountSortedSortedSorted = onesZerosCountSortedSorted.sortBy(_._1)\n\
    \        val onesZerosCountSortedSortedSortedSorted = onesZerosCountSortedSortedSorted.sortBy(_._2)\n\
    \        val onesZerosCountSortedSortedSortedSortedSorted = onesZerosCountSortedSortedSortedSorted.sortBy(_._1)\n\
    \        val onesZerosCountSortedSortedSortedSortedSortedSorted = onesZerosCountSortedSortedSortedSortedSorted.sortBy(_._2)\n\
    \        val onesZerosCountSortedSortedSortedSortedSortedSortedSorted = onesZerosCountSortedSortedSortedSortedSortedSortedSorted.sortBy(_._1)\n\
    \        val onesZerosCountSortedSortedSortedSortedSortedSortedSortedSorted =\
    \ onesZerosCountSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(_._2)\n\
    \        val onesZerosCountSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = onesZerosCountSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(_._1)\n\
    \        val onesZerosCountSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = onesZerosCountSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(_._2)\n\
    \        val onesZerosCountSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = onesZerosCountSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(_._1)\n\
    \        val onesZerosCountSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = onesZerosCountSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(_._2)\n\
    \        val onesZerosCountSortedSortedSortedSortedSortedSorted", "        val\
    \ ones = arr.filter(x => x == 1).length\n        val decimals = arr.filter(x =>\
    \ x == 0).length\n        val maxOnes = arr.max\n        val maxDecimals = arr.max\n\
    \        val onesArr = arr.filter(x => x == 1).map(x => x.toLong).toList\n   \
    \     val decimalsArr = arr.filter(x => x == 0).map(x => x.toLong).toList\n  \
    \      val onesArr = onesArr.sortBy(x => onesArr.indexOf(x))\n        val decimalsArr\
    \ = decimalsArr.sortBy(x => decimalsArr.indexOf(x))\n        val result = onesArr.zip(decimalsArr).sortBy(x\
    \ => x._1 - x._2)\n        result.map(x => x._1 + x._2)", "        val ones =\
    \ arr.filter(_ % 2 == 0).length\n        val zeros = arr.filter(_ % 2 == 1).length\n\
    \        val onesArr = arr.filter(_ % 2 == 0).sortBy(x => math.abs(x))\n     \
    \   val zerosArr = arr.filter(_ % 2 == 1).sortBy(x => math.abs(x))\n        val\
    \ onesCount = onesArr.length\n        val zerosCount = zerosArr.length\n     \
    \   val onesCountArr = onesArr.sortBy(x => math.abs(x))\n        val zerosCountArr\
    \ = zerosArr.sortBy(x => math.abs(x))\n        val onesCountCount = onesCountArr.length\n\
    \        val zerosCountCount = zerosCountArr.length\n        val onesCountCountArr\
    \ = onesCountArr.sortBy(x => math.abs(x))\n        val zerosCountCountArr = zerosCountArr.sortBy(x\
    \ => math.abs(x))\n        val onesCountCountCount = onesCountCountArr.length\n\
    \        val zerosCountCountCount = zerosCountCountArr.length\n        val onesCountCountCountArr\
    \ = onesCountCountArr.sortBy(x => math.abs(x))\n        val zerosCountCountCountArr\
    \ = zerosCountCountArr.sortBy(x => math.abs(x))\n        val onesCountCountCountCount\
    \ = onesCountCountCountArr.length\n        val zerosCountCountCountCount = zerosCountCountCountArr.length\n\
    \        val onesCountCountCountCountArr = onesCountCountCountArr.sortBy(x =>\
    \ math.abs(x))\n        val zerosCountCountCountArr = zerosCountCountCountArr.sortBy(x\
    \ => math.abs(x))\n        val onesCountCountCountCountCount = onesCountCountCountArr.length\n\
    \        val zerosCountCountCountCount = zerosCountCountCountArr.length\n    \
    \    val onesCountCountCountCountArr = onesCountCountCountArr.sortBy(x => math.abs(x))\n\
    \        val zerosCountCountCountArr = zerosCountCountCountArr.sortBy(x => math.abs(x))\n\
    \        val onesCountCountCountCountCount = onesCountCountCountArr.length\n \
    \       val zerosCountCountCountCount = zerosCountCountCountArr.length\n     \
    \   val onesCountCountCountCountArr = onesCountCountCountArr.sortBy(x => math.abs(x))\n\
    \        val zerosCountCountCountArr = zerosCountCountCountArr.sortBy(x => math.abs(x))\n\
    \        val onesCountCountCountCountCount = onesCountCountCountArr.length\n",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArr = arr.map(x => if (x == 1) 1 else 0)\n        val zerosArr\
    \ = arr.map(x => if (x == 0) 0 else 1)\n        val onesArr = onesArr.sortWith(_\
    \ < _)\n        val zerosArr = zerosArr.sortWith(_ < _)\n        val onesArr =\
    \ onesArr.map(x => if (x == 1) x else 0)\n        val zerosArr = zerosArr.map(x\
    \ => if (x == 0) x else 1)\n        val onesArr = onesArr.sortWith(_ < _)\n  \
    \      val zerosArr = zerosArr.sortWith(_ < _)\n        val onesArr = onesArr.map(x\
    \ => if (x == 1) x else 0)\n        val zerosArr = zerosArr.map(x => if (x ==\
    \ 0) x else 1)\n        val onesArr = onesArr.sortWith(_ < _)\n        val zerosArr\
    \ = zerosArr.sortWith(_ < _)\n        val onesArr = onesArr.map(x => if (x ==\
    \ 1) x else 0)\n        val zerosArr = zerosArr.map(x => if (x == 0) x else 1)\n\
    \        val onesArr = onesArr.sortWith(_ < _)\n        val zerosArr = zerosArr.sortWith(_\
    \ < _)\n        val onesArr = onesArr.map(x => if (x == 1) x else 0)\n       \
    \ val zerosArr = zerosArr.map(x => if (x == 0) x else 1)\n        val onesArr\
    \ = onesArr.sortWith(_ < _)\n        val zerosArr = zerosArr.sortWith(_ < _)\n\
    \        val onesArr = onesArr.map(x => if (x == 1) x else 0)\n        val zerosArr\
    \ = zerosArr.map(x => if (x == 0) x else 1)\n        val onesArr = onesArr.sortWith(_\
    \ < _)\n        val zerosArr = zerosArr.sortWith(_ < _)\n        val onesArr =\
    \ onesArr.map(x => if (x == 1) x else 0)\n        val zerosArr = zerosArr.map(x\
    \ => if (x == 0) x else 1)\n        val onesArr = onesArr.sortWith(_ < _)\n  \
    \      val zerosArr = zerosArr.sortWith(_ < _)\n        val onesArr = onesAr",
  "        val ones = arr.map(x => if (x == 1) 1 else 0)\n        val onesCount =\
    \ ones.reduceLeft(_ + _)\n        val decimals = arr.map(x => math.log10(x) /\
    \ math.log10(onesCount))\n        val decimalsCount = decimals.reduceLeft(_ +\
    \ _)\n        val decimalsSorted = decimals.sortBy(x => x)\n        val decimalsSortedCount\
    \ = decimalsSorted.reduceLeft(_ + _)\n        val decimalsSortedSortedCount =\
    \ decimalsSorted.sortBy(x => x).reduceLeft(_ + _)\n        val decimalsSortedSortedSortedCount\
    \ = decimalsSorted.sortBy(x => x).sortBy(x => x).reduceLeft(_ + _)\n        val\
    \ decimalsSortedSortedSortedSortedCount = decimalsSorted.sortBy(x => x).sortBy(x\
    \ => x).sortBy(x => x).reduceLeft(_ + _)\n        val decimalsSortedSortedSortedSortedSortedCount\
    \ = decimalsSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).reduceLeft(_\
    \ + _)\n        val decimalsSortedSortedSortedSortedSortedSortedCount = decimalsSorted.sortBy(x\
    \ => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).reduceLeft(_\
    \ + _)\n        val decimalsSortedSortedSortedSortedSortedSortedSortedCount =\
    \ decimalsSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x\
    \ => x).sortBy(x => x).reduceLeft(_ + _)\n        val decimalsSortedSortedSortedSortedSortedSortedSortedSortedCount\
    \ = decimalsSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x\
    \ => x).sortBy(x => x).sortBy(x => x).reduceLeft(_ + _)\n        val decimalsSortedSortedSortedSortedSortedSortedSortedSortedSortedCount\
    \ = decimalsSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x\
    \ => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).reduceLeft(_ + _)\n     \
    \   val decimalsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedCount\
    \ = decimalsSorted.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x\
    \ => x).sortBy(", "        val ones = arr.filter(x => x == 1).size\n        val\
    \ decs = arr.map(x => math.log10(x)).sortBy(x => x).reverse\n        val decs\
    \ = decs.map(x => math.pow(10, x)).sortBy(x => x).reverse\n        val decs =\
    \ decs.map(x => math.pow(10, x)).sortBy(x => x).reverse\n        val decs = decs.map(x\
    \ => math.pow(10, x)).sortBy(x => x).reverse\n        val decs = decs.map(x =>\
    \ math.pow(10, x)).sortBy(x => x).reverse\n        val decs = decs.map(x => math.pow(10,\
    \ x)).sortBy(x => x).reverse\n        val decs = decs.map(x => math.pow(10, x)).sortBy(x\
    \ => x).reverse\n        val decs = decs.map(x => math.pow(10, x)).sortBy(x =>\
    \ x).reverse\n        val decs = decs.map(x => math.pow(10, x)).sortBy(x => x).reverse\n\
    \        val decs = decs.map(x => math.pow(10, x)).sortBy(x => x).reverse\n  \
    \      val decs = decs.map(x => math.pow(10, x)).sortBy(x => x).reverse\n    \
    \    val decs = decs.map(x => math.pow(10, x)).sortBy(x => x).reverse\n      \
    \  val decs = decs.map(x => math.pow(10, x)).sortBy(x => x).reverse\n        val\
    \ decs = decs.map(x => math.pow(10, x)).sortBy(x => x).reverse\n        val decs\
    \ = decs.map(x => math.pow(10, x)).sortBy(x => x).reverse\n        val decs =\
    \ decs.map(x => math.pow(10, x)).sortBy(x => x).reverse\n        val decs = decs.map(x\
    \ => math.pow(10, x)).sortBy(x => x).reverse\n        val decs = decs.map(x =>\
    \ math.pow(10, x)).sortBy(x => x).reverse\n        val decs = decs.map(x => math.pow(10,\
    \ x)).sortBy(x => x).reverse\n        val decs = decs.map(x => math.pow(10, x)).sortBy(x\
    \ => x).reverse\n        val decs = decs.map(x => math.pow(10, x)).sortBy(x =>\
    \ x).reverse\n        val decs = decs.map(x => math.pow(10, x)).sortBy(x => x).reverse\n\
    \        val decs = decs.map(x => math.pow(10, x)).sortBy(x => x).reverse\n  \
    \      val decs = decs.map(x => math.pow(10, x)).sortBy(x => x).", "        val\
    \ ones = arr.count(_ == 1)\n        val twos = arr.count(_ == 2)\n        val\
    \ threes = arr.count(_ == 3)\n        val fours = arr.count(_ == 4)\n        val\
    \ fives = arr.count(_ == 5)\n        val sixes = arr.count(_ == 6)\n        val\
    \ sevens = arr.count(_ == 7)\n        val eights = arr.count(_ == 8)\n       \
    \ val nines = arr.count(_ == 9)\n        val tens = arr.count(_ == 10)\n     \
    \   val hundreds = arr.count(_ == 100)\n        val thousands = arr.count(_ ==\
    \ 1000)\n        val millions = arr.count(_ == 1000000)\n        val billions\
    \ = arr.count(_ == 1000000000)\n        val trillions = arr.count(_ == 1000000000000)\n\
    \        val quadrillions = arr.count(_ == 1000000000000000)\n        val quintillions\
    \ = arr.count(_ == 1000000000000000000)\n        val onesAndZeroes = arr.count(_\
    \ == 1)\n        val onesAndOnes = arr.count(_ == 1)\n        val onesAndTwos\
    \ = arr.count(_ == 2)\n        val onesAndThrees = arr.count(_ == 3)\n       \
    \ val onesAndFours = arr.count(_ == 4)\n        val onesAndFives = arr.count(_\
    \ == 5)\n        val onesAndSixes = arr.count(_ == 6)\n        val onesAndSevens\
    \ = arr.count(_ == 7)\n        val onesAndEights = arr.count(_ == 8)\n       \
    \ val onesAndNines = arr.count(_ == 9)\n        val onesAndTens = arr.count(_\
    \ == 10)\n        val onesAndHundreds = arr.count(_ == 100)\n        val onesAndThousands\
    \ = arr.count(_ == 1000)\n        val onesAndMillions = arr.count(_ == 1000000)\n\
    \        val onesAndBillions = arr.count(_ == 1000000000)\n        val onesAndTrillions\
    \ = arr.count(_ == 1000000000000)\n        val onesAndQuadrillions = arr.count(_\
    \ == 1000000000000000)\n        val onesAndQuintillions = arr.count(_ == 1000000000000000000)\n\
    \        val onesAndOnesAndZeroes = arr.count(_ == 1)\n        val onesAndOnesAndOnes\
    \ = arr.count(_ == 1)\n        val onesAndOnesAndTwos = arr.count(_ == 2)\n  \
    \      val onesAndOnesAndThrees = arr.count(_ == 3)\n        val onesAndOnesAndFours\
    \ = arr.count(_", "        val ones = arr.map(x => if (x == 1) 1 else 0)\n   \
    \     val twos = arr.map(x => if (x == 2) 2 else 0)\n        val threes = arr.map(x\
    \ => if (x == 3) 3 else 0)\n        val fours = arr.map(x => if (x == 4) 4 else\
    \ 0)\n        val fives = arr.map(x => if (x == 5) 5 else 0)\n        val sixes\
    \ = arr.map(x => if (x == 6) 6 else 0)\n        val sevens = arr.map(x => if (x\
    \ == 7) 7 else 0)\n        val eights = arr.map(x => if (x == 8) 8 else 0)\n \
    \       val nines = arr.map(x => if (x == 9) 9 else 0)\n        val tens = arr.map(x\
    \ => if (x == 10) 10 else 0)\n        val hundreds = arr.map(x => if (x == 11)\
    \ 11 else 0)\n        val thousands = arr.map(x => if (x == 100) 100 else 0)\n\
    \        val ten_thousands = arr.map(x => if (x == 1000) 1000 else 0)\n      \
    \  val hundred_thousands = arr.map(x => if (x == 10000) 10000 else 0)\n      \
    \  val millions = arr.map(x => if (x == 1000000) 1000000 else 0)\n        val\
    \ billions = arr.map(x => if (x == 1000000000) 1000000000 else 0)\n        val\
    \ trillions = arr.map(x => if (x == 1000000000000) 1000000000000 else 0)\n   \
    \     val quadrillions = arr.map(x => if (x == 1000000000000000) 1000000000000000\
    \ else 0)\n        val quintillions = arr.map(x => if (x == 1000000000000000000)\
    \ 1000000000000000000 else 0)\n        val quadrillions_2 = arr.map(x => if (x\
    \ == 1000000000000000000000) 1000000000000000000000 else 0)\n        val trillions_2\
    \ = arr.map(x => if (x == 1000000000000000000000000) 1000000000000000000000000\
    \ else 0)\n        val billions_2 = arr.map(x => if (x == 1000000000000000000000000000)\
    \ 1000000000000000000000000000 else 0)\n        val millions_2 = arr.map(x =>\
    \ if (x == 1000000000000000000000000000000) 1000000000000000000000000000000 else\
    \ 0)\n        val thousands_2 = arr.map(x => if (x == 1000000000000000000000000000000000)\
    \ 1000000000000000000000000000000000 else 0)\n        val hundreds_2 = arr.map(x\
    \ => if (x == 1000000000000000000000000000000000) 1000000000000000000000000000000000\
    \  else 0)\n        val tens_2 = arr.map(x => if (x == 100000000000000000000000000000000)\
    \ 100000000000000000000000000000000 else 0)\n        val ones_2 = arr.map(x =>\
    \ if (x == ", "        val ones = arr.map(x => if (x == 1) 1 else 0)\n       \
    \ val twos = arr.map(x => if (x == 2) 2 else 0)\n        val threes = arr.map(x\
    \ => if (x == 3) 3 else 0)\n        val fours = arr.map(x => if (x == 4) 4 else\
    \ 0)\n        val fives = arr.map(x => if (x == 5) 5 else 0)\n        val sixes\
    \ = arr.map(x => if (x == 6) 6 else 0)\n        val sevens = arr.map(x => if (x\
    \ == 7) 7 else 0)\n        val eights = arr.map(x => if (x == 8) 8 else 0)\n \
    \       val nines = arr.map(x => if (x == 9) 9 else 0)\n        val tens = arr.map(x\
    \ => if (x == 10) 10 else 0)\n        val hundreds = arr.map(x => if (x == 11)\
    \ 11 else 0)\n        val thousands = arr.map(x => if (x == 100) 100 else 0)\n\
    \        val ten_thousands = arr.map(x => if (x == 1000) 1000 else 0)\n      \
    \  val hundred_thousands = arr.map(x => if (x == 10000) 10000 else 0)\n      \
    \  val millions = arr.map(x => if (x == 1000000) 1000000 else 0)\n        val\
    \ billions = arr.map(x => if (x == 1000000000) 1000000000 else 0)\n        val\
    \ trillions = arr.map(x => if (x == 1000000000000) 1000000000000 else 0)\n   \
    \     val quadrillions = arr.map(x => if (x == 1000000000000000) 1000000000000000\
    \ else 0)\n        val quintillions = arr.map(x => if (x == 1000000000000000000)\
    \ 1000000000000000000 else 0)\n        val ones_count = ones.count(_ > 0)\n  \
    \      val twos_count = twos.count(_ > 0)\n        val threes_count = threes.count(_\
    \ > 0)\n        val fours_count = fours.count(_ > 0)\n        val fives_count\
    \ = fives.count(_ > 0)\n        val sixes_count = sixes.count(_ > 0)\n       \
    \ val sevens_count = sevens.count(_ > 0)\n        val eights_count = eights.count(_\
    \ > 0)\n        val nines_count = nines.count(_ > 0)\n        val tens_count =\
    \ tens.count(_ > 0)\n        val hundreds_count = hundreds.count(_ > 0)\n    \
    \    val thousands_count = thousands.count(_ > 0)\n        val ten_thousands_count\
    \ = ten_thousands.count(_ > 0)\n        val hundred_", "        val ones = arr.map(x\
    \ => if (x == 1) 1 else 0)\n        val twos = arr.map(x => if (x == 2) 2 else\
    \ 0)\n        val threes = arr.map(x => if (x == 3) 3 else 0)\n        val fours\
    \ = arr.map(x => if (x == 4) 4 else 0)\n        val fives = arr.map(x => if (x\
    \ == 5) 5 else 0)\n        val sixes = arr.map(x => if (x == 6) 6 else 0)\n  \
    \      val sevens = arr.map(x => if (x == 7) 7 else 0)\n        val eights = arr.map(x\
    \ => if (x == 8) 8 else 0)\n        val nines = arr.map(x => if (x == 9) 9 else\
    \ 0)\n        val tens = arr.map(x => if (x == 10) 10 else 0)\n        val hundreds\
    \ = arr.map(x => if (x == 11) 11 else 0)\n        val thousands = arr.map(x =>\
    \ if (x == 100) 100 else 0)\n        val ten_thousands = arr.map(x => if (x ==\
    \ 1000) 1000 else 0)\n        val hundred_thousands = arr.map(x => if (x == 10000)\
    \ 10000 else 0)\n        val millions = arr.map(x => if (x == 1000000) 1000000\
    \ else 0)\n        val billions = arr.map(x => if (x == 1000000000) 1000000000\
    \ else 0)\n        val trillions = arr.map(x => if (x == 1000000000000) 1000000000000\
    \ else 0)\n        val quadrillions = arr.map(x => if (x == 1000000000000000)\
    \ 1000000000000000 else 0)\n        val quintillions = arr.map(x => if (x == 1000000000000000000)\
    \ 1000000000000000000 else 0)\n        val ones_count = ones.size\n        val\
    \ twos_count = twos.size\n        val threes_count = threes.size\n        val\
    \ fours_count = fours.size\n        val fives_count = fives.size\n        val\
    \ sixes_count = sixes.size\n        val sevens_count = sevens.size\n        val\
    \ eights_count = eights.size\n        val nines_count = nines.size\n        val\
    \ tens_count = tens.size\n        val hundreds_count = hundreds.size\n       \
    \ val thousands_count = thousands.size\n        val ten_thousands_count = ten_thousands.size\n\
    \        val hundred_thousands_count = hundred_thousands.size\n        val millions_count\
    \ = millions.size\n        val billions_count = billions.size\n        val trillions_count\
    \ = trillions.size\n        val quadrillion", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesDec = arr.map(x\
    \ => (x >>> 0).toInt).sortBy(x => x)\n        val zerosDec = arr.map(x => (x >>>\
    \ 0).toInt).sortBy(x => -x)\n        val onesBin = onesDec.map(x => (x >>> 0).toInt).sortBy(x\
    \ => x)\n        val zerosBin = zerosDec.map(x => (x >>> 0).toInt).sortBy(x =>\
    \ -x)\n        val onesBinList = onesBin.toList\n        val zerosBinList = zerosBin.toList\n\
    \        val onesBinList2 = onesBinList.zip(zerosBinList).map(x => x._1 + x._2)\n\
    \        val zerosBinList2 = zerosBinList.zip(onesBinList).map(x => x._1 + x._2)\n\
    \        val onesBinList3 = onesBinList2.zip(zerosBinList2).map(x => x._1 + x._2)\n\
    \        val zerosBinList3 = zerosBinList2.zip(onesBinList2).map(x => x._1 + x._2)\n\
    \        val onesBinList4 = onesBinList3.zip(zerosBinList3).map(x => x._1 + x._2)\n\
    \        val zerosBinList4 = zerosBinList3.zip(onesBinList3).map(x => x._1 + x._2)\n\
    \        val onesBinList5 = onesBinList4.zip(zerosBinList4).map(x => x._1 + x._2)\n\
    \        val zerosBinList5 = zerosBinList4.zip(onesBinList4).map(x => x._1 + x._2)\n\
    \        val onesBinList6 = onesBinList5.zip(zerosBinList5).map(x => x._1 + x._2)\n\
    \        val zerosBinList6 = zerosBinList5.zip(onesBinList5).map(x => x._1 + x._2)\n\
    \        val onesBinList7 = onesBinList6.zip(zerosBinList6).map(x => x._1 + x._2)\n\
    \        val zerosBinList7 = zerosBinList6.zip(onesBinList6).map(x => x._1 + x._2)\n\
    \        val onesBinList8 = onesBinList7.zip(zerosBinList7).map(x => x._1 + x._2)\n\
    \        val zerosBinList8 = zerosBinList7.zip(onesBinList7).map(x => x._1 + x._2)\n",
  "        val ones = arr.map(x => if (x == 1) 1 else 0)\n        val zeros = arr.map(x\
    \ => if (x == 0) 0 else 1)\n        val onesCount = ones.reduceLeft(_ + _)\n \
    \       val zerosCount = zeros.reduceLeft(_ + _)\n        val onesZeros = ones.zip(zeros)\n\
    \        val onesZerosCount = onesZeros.reduceLeft(_ + _)\n        val onesZerosCountSorted\
    \ = onesZerosCount.sortBy(x => x)\n        val onesZerosCountSortedSortedByOnesCount\
    \ = onesZerosCountSorted.sortBy(x => if (x == 1) 0 else 1)\n        val onesZerosCountSortedSortedByOnesCountReversed\
    \ = onesZerosCountSortedSortedByOnesCount.reverse\n        val onesZerosCountSortedSortedByOnesCountReversedSortedByOnesCount\
    \ = onesZerosCountSortedSortedByOnesCountReversed.sortBy(x => if (x == 1) 0 else\
    \ 1)\n        val onesZerosCountSortedSortedByOnesCountReversedSortedByOnesCountReversed\
    \ = onesZerosCountSortedSortedByOnesCountReversedSortedByOnesCount.reverse\n \
    \       val onesZerosCountSortedSortedByOnesCountReversedSortedByOnesCountReversedSortedByOnesCount\
    \ = onesZerosCountSortedSortedByOnesCountReversedSortedByOnesCountReversed.sortBy(x\
    \ => if (x == 1) 0 else 1)\n        val onesZerosCountSortedSortedByOnesCountReversedSortedByOnesCountReversedSortedByOnesCountReversed\
    \ = onesZerosCountSortedSortedByOnesCountReversedSortedByOnesCountReversedSortedByOnesCount.reverse\n\
    \        val onesZerosCountSortedSortedByOnesCountReversedSortedByOnesCountReversedSortedByOnesCountReversedSortedByOnesCount\
    \ = onesZerosCountSortedSortedByOnesCountReversedSortedByOnesCountReversedSortedByOnesCountReversed.sortBy(x\
    \ => if (x == 1) 0 else 1)\n        val onesZerosCountSortedSortedByOnesCountReversedSortedByOnesCountReversedSortedByOnesCountReversedSortedByOnesCountReversed\
    \ = onesZerosCountSortedSortedByOnesCountReversedSortedByOne", "        val ones\
    \ = arr.filter(_ % 2 == 0).length\n        val decimals = arr.filter(_ % 2 ==\
    \ 1).length\n        val sorted = arr.sortBy(x => (ones - x % ones) * (decimals\
    \ - x % decimals))\n        sorted.toList", "        val ones = arr.count(_ ==\
    \ 1)\n        val zeros = arr.count(_ == 0)\n        val onesDec = arr.map(x =>\
    \ (x >>> 0).toInt)\n        val zerosDec = arr.map(x => (x >>> 0).toInt)\n   \
    \     val onesDec.sortWith(_ < _)\n        val zerosDec.sortWith(_ < _)\n    \
    \    val onesDec.zip(zerosDec).sortWith(_._1 < _._1)", "        val ones = arr.count(_\
    \ == 1)\n        val decs = arr.map(x => math.pow(2,x)).sortBy(x => math.abs(x))\n\
    \        val decs = decs.map(x => math.abs(x))\n        val decs = decs.sortBy(x\
    \ => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n        val\
    \ decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n\
    \        val decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.sortBy(x\
    \ => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n        val\
    \ decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n\
    \        val decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.sortBy(x\
    \ => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n        val\
    \ decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n\
    \        val decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.sortBy(x\
    \ => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n        val\
    \ decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n\
    \        val decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.sortBy(x\
    \ => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n        val\
    \ decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n\
    \        val decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.sortBy(x\
    \ => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n        val\
    \ decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n\
    \        val decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.sortBy(x\
    \ => math.abs(x))\n        val decs = decs.sortBy(x => math.abs(x))\n        val\
    \ decs = decs.sortBy(x => math.abs(x))\n        val decs = decs.", "        val\
    \ ones = arr.filter(x => x == 1).length\n        val zeros = arr.filter(x => x\
    \ == 0).length\n        val onesArr = arr.filter(x => x == 1).map(x => x.toInt)\n\
    \        val zerosArr = arr.filter(x => x == 0).map(x => x.toInt)\n        val\
    \ onesMap = onesArr.groupBy(x => x).mapValues(_.size)\n        val zerosMap =\
    \ zerosArr.groupBy(x => x).mapValues(_.size)\n        val onesMapSorted = onesMap.sortBy(_._1).reverse\n\
    \        val zerosMapSorted = zerosMap.sortBy(_._1).reverse\n        val onesMapSorted2\
    \ = onesMapSorted.map(_._2).reverse\n        val zerosMapSorted2 = zerosMapSorted.map(_._2).reverse\n\
    \        val onesMapSorted3 = onesMapSorted2.map(_._3).reverse\n        val zerosMapSorted3\
    \ = zerosMapSorted2.map(_._3).reverse\n        val onesMapSorted4 = onesMapSorted3.map(_._4).reverse\n\
    \        val zerosMapSorted4 = zerosMapSorted3.map(_._4).reverse\n        val\
    \ onesMapSorted5 = onesMapSorted4.map(_._5).reverse\n        val zerosMapSorted5\
    \ = zerosMapSorted4.map(_._5).reverse\n        val onesMapSorted6 = onesMapSorted5.map(_._6).reverse\n\
    \        val zerosMapSorted6 = zerosMapSorted5.map(_._6).reverse\n        val\
    \ onesMapSorted7 = onesMapSorted6.map(_._7).reverse\n        val zerosMapSorted7\
    \ = zerosMapSorted6.map(_._7).reverse\n        val onesMapSorted8 = onesMapSorted7.map(_._8).reverse\n\
    \        val zerosMapSorted8 = zerosMapSorted7.map(_._8).reverse\n        val\
    \ onesMapSorted9 = onesMapSorted8.map(_._9).reverse\n        val zerosMapSorted9\
    \ = zerosMapSorted8.map(_._9).reverse\n        val onesMapSorted10 = onesMapSorted9.map(_._10).reverse\n\
    \        val zerosMapSorted10 = zerosMapSorted9.map(_._10).reverse\n        val\
    \ onesMapSorted11 = onesMapSorted10.map(_._11).reverse\n        val zerosMapSorted11\
    \ = zerosMapSorted10.map(_._11).reverse\n        val onesMapSorted12 = onesMapSorted11.map(_._12).reverse\n\
    \        val zerosMapSorted12 = ", "        val ones = arr.count(_ == 1)\n   \
    \     val zeros = arr.count(_ == 0)\n        val onesDec = arr.map(x => math.pow(2,\
    \ math.floor(math.log(x, 2)))).max\n        val zerosDec = arr.map(x => math.pow(2,\
    \ math.floor(math.log(x, 2)))).min\n        val onesBin = arr.map(x => math.pow(2,\
    \ math.floor(math.log(x, 2)))).map(x => math.pow(2, math.floor(math.log(x, 2)))).sum\n\
    \        val zerosBin = arr.map(x => math.pow(2, math.floor(math.log(x, 2)))).map(x\
    \ => math.pow(2, math.floor(math.log(x, 2)))).sum\n        val onesBinDec = onesBin\
    \ / onesDec\n        val zerosBinDec = zerosBin / zerosDec\n        val onesBinBin\
    \ = onesBin / zerosBin\n        val zerosBinBin = zerosBin / onesBin\n       \
    \ val onesBinBinDec = onesBinBin / onesDec\n        val zerosBinBinDec = zerosBinBin\
    \ / zerosDec\n        val onesBinBinBin = onesBinBin / zerosBinBin\n        val\
    \ zerosBinBinBin = zerosBinBin / onesBinBin\n        val onesBinBinBinDec = onesBinBinBin\
    \ / onesDec\n        val zerosBinBinBinDec = zerosBinBinBin / zerosDec\n     \
    \   val onesBinBinBinBin = onesBinBinBin / zerosBinBin\n        val zerosBinBinBinBin\
    \ = zerosBinBinBin / onesBinBinBin\n        val onesBinBinBinBinDec = onesBinBinBinBin\
    \ / onesDec\n        val zerosBinBinBinBinDec = zerosBinBinBinBin / zerosDec\n\
    \        val onesBinBinBinBin = onesBinBinBinBin / zerosBinBinBin\n        val\
    \ zerosBinBinBinBin = zerosBinBinBinBin / onesBinBinBin\n        val onesBinBinBinBinDec\
    \ = onesBinBinBinBin / onesDec\n        val zerosBinBinBinBinDec = zerosBinBinBinBin\
    \ / zerosDec\n        val onesBinBinBinBin = onesBinBinBinBin / zerosBinBinBin\n\
    \        val zerosBinBinBinBin = zerosBinBinBinBin / onesBinBinBin\n        val\
    \ onesBinBinBinBinDe", "        val ones = arr.map(x => if (x == 1) 1 else 0)\n\
    \        val twos = arr.map(x => if (x == 2) 2 else 0)\n        val threes = arr.map(x\
    \ => if (x == 3) 3 else 0)\n        val fours = arr.map(x => if (x == 4) 4 else\
    \ 0)\n        val fives = arr.map(x => if (x == 5) 5 else 0)\n        val sixes\
    \ = arr.map(x => if (x == 6) 6 else 0)\n        val sevens = arr.map(x => if (x\
    \ == 7) 7 else 0)\n        val eights = arr.map(x => if (x == 8) 8 else 0)\n \
    \       val nines = arr.map(x => if (x == 9) 9 else 0)\n        val tens = arr.map(x\
    \ => if (x == 10) 10 else 0)\n        val hundreds = arr.map(x => if (x == 11)\
    \ 11 else 0)\n        val thousands = arr.map(x => if (x == 100) 100 else 0)\n\
    \        val ten_thousands = arr.map(x => if (x == 1000) 1000 else 0)\n      \
    \  val hundred_thousands = arr.map(x => if (x == 10000) 10000 else 0)\n      \
    \  val millions = arr.map(x => if (x == 1000000) 1000000 else 0)\n        val\
    \ billions = arr.map(x => if (x == 1000000000) 1000000000 else 0)\n        val\
    \ trillions = arr.map(x => if (x == 1000000000000) 1000000000000 else 0)\n   \
    \     val quadrillions = arr.map(x => if (x == 1000000000000000) 1000000000000000\
    \ else 0)\n        val quintillions = arr.map(x => if (x == 1000000000000000000)\
    \ 1000000000000000000 else 0)\n        val ones_count = ones.count(_ == 1)\n \
    \       val twos_count = twos.count(_ == 2)\n        val threes_count = threes.count(_\
    \ == 3)\n        val fours_count = fours.count(_ == 4)\n        val fives_count\
    \ = fives.count(_ == 5)\n        val sixes_count = sixes.count(_ == 6)\n     \
    \   val sevens_count = sevens.count(_ == 7)\n        val eights_count = eights.count(_\
    \ == 8)\n        val nines_count = nines.count(_ == 9)\n        val tens_count\
    \ = tens.count(_ == 10)\n        val hundreds_count = hundreds.count(_ == 11)\n\
    \        val thousands_count = thousands.count(_ == 100)\n        val ten_thousands_count\
    \ = ten_thousands.count(_ == 1000)\n        val hundred_", "        val ones =\
    \ arr.filter(x => x == 1).length\n        val zeros = arr.filter(x => x == 0).length\n\
    \        val onesCount = arr.filter(x => x == 1).map(x => x.toString.toInt).sum\n\
    \        val zerosCount = arr.filter(x => x == 0).map(x => x.toString.toInt).sum\n\
    \        val onesDecimal = onesCount / ones\n        val zerosDecimal = zerosCount\
    \ / zeros\n        val onesDecimalDecimal = onesDecimal / onesDecimal\n      \
    \  val zerosDecimalDecimal = zerosDecimal / zerosDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(_ % 2 == 0).length\n        val decimals = arr.filter(_\
    \ % 2 == 1).length\n        val maxOnes = arr.filter(_ % 2 == 0).max\n       \
    \ val maxDecimals = arr.filter(_ % 2 == 1).max\n        val maxDecimalsDecimal\
    \ = maxDecimals.toDouble\n        val maxOnesDecimal = maxOnes.toDouble\n    \
    \    val maxDecimalsOne = maxDecimals.toInt\n        val maxOnesOne = maxOnes.toInt\n\
    \        val maxDecimalsOneDecimal = maxDecimalsDecimal.toInt\n        val maxOnesOneDecimal\
    \ = maxOnesDecimal.toInt\n        val maxDecimalsOneOne = maxDecimalsDecimal.toInt\n\
    \        val maxOnesOneOne = maxOnesDecimal.toInt\n        val maxDecimalsOneOneDecimal\
    \ = maxDecimalsDecimal.toInt\n        val maxOnesOneOneDecimal = maxOnesDecimal.toInt\n\
    \        val maxOnesOneOneOne = maxOnesDecimal.toInt\n        val maxOnesOneOneOne\
    \ = maxOnesDecimal.toInt\n        val maxOnesOneOneOneDecimal = maxOnesDecimal.toInt\n\
    \        val maxOnesOneOneOneDecimal = maxOnesDecimal.toInt\n        val maxOnesOneOneOneDecimal\
    \ = maxOnesDecimal.toInt\n        val maxOnesOneOneOneDecimal = maxOnesDecimal.toInt\n\
    \        val maxOnesOneOneOneDecimal = maxOnesDecimal.toInt\n        val maxOnesOneOneOneDecimal\
    \ = maxOnesDecimal.toInt\n        val maxOnesOneOneOneDecimal = maxOnesDecimal.toInt\n\
    \        val maxOnesOneOneOneDecimal = maxOnesDecimal.toInt\n        val maxOnesOneOneOneDecimal\
    \ = maxOnesDecimal.toInt\n        val maxOnesOneOneOneDecimal = maxOnesDecimal.toInt\n\
    \        val maxOnesOneOneOneDecimal = maxOnesDecimal.toInt\n        val maxOnesOneOneOneDecimal\
    \ = maxOnesDecimal.toInt\n        val maxOnesOneOneOneDecimal = maxOnesDecimal.toInt\n\
    \        val maxOnesOneOneOneDecimal = maxOnesDecimal.toInt\n        val maxOnesOneOneOneDecimal\
    \ = maxOnesDecimal.toInt\n        val maxOnesOneOneOneDecimal = maxOnesDecimal.toInt\n\
    \        val maxOnesOneOneOneDecimal = maxOnesDecimal", "        val ones = arr.count(x\
    \ => x == 1)\n        val twos = arr.count(x => x == 2)\n        val threes =\
    \ arr.count(x => x == 3)\n        val fours = arr.count(x => x == 4)\n       \
    \ val fives = arr.count(x => x == 5)\n        val sixes = arr.count(x => x ==\
    \ 6)\n        val sevens = arr.count(x => x == 7)\n        val eights = arr.count(x\
    \ => x == 8)\n        val nines = arr.count(x => x == 9)\n        val tens = arr.count(x\
    \ => x == 10)\n        val hundreds = arr.count(x => x == 100)\n        val thousands\
    \ = arr.count(x => x == 1000)\n        val millions = arr.count(x => x == 1000000)\n\
    \        val billions = arr.count(x => x == 1000000000)\n        val trillions\
    \ = arr.count(x => x == 1000000000000)\n        val quadrillions = arr.count(x\
    \ => x == 1000000000000000)\n        val quintillions = arr.count(x => x == 1000000000000000000)\n\
    \        val onesSorted = arr.sortWith((x, y) => x - y)\n        val twosSorted\
    \ = arr.sortWith((x, y) => x - y)\n        val threesSorted = arr.sortWith((x,\
    \ y) => x - y)\n        val foursSorted = arr.sortWith((x, y) => x - y)\n    \
    \    val fivesSorted = arr.sortWith((x, y) => x - y)\n        val sixesSorted\
    \ = arr.sortWith((x, y) => x - y)\n        val sevensSorted = arr.sortWith((x,\
    \ y) => x - y)\n        val eightsSorted = arr.sortWith((x, y) => x - y)\n   \
    \     val ninesSorted = arr.sortWith((x, y) => x - y)\n        val tensSorted\
    \ = arr.sortWith((x, y) => x - y)\n        val hundredsSorted = arr.sortWith((x,\
    \ y) => x - y)\n        val thousandsSorted = arr.sortWith((x, y) => x - y)\n\
    \        val millionsSorted = arr.sortWith((x, y) => x - y)\n        val billionsSorted\
    \ = arr.sortWith((x, y) => x - y)\n        val trillionsSorted = arr.sortWith((x,\
    \ y) => x - y)\n        val quadrillionsSorted = arr.sortWith((x, y) => x - y)\n\
    \        val quintillionsSorted = arr.sortWith((x, y) => x - y)\n        val onesSortedReversed\
    \ = onesSorted.reverse\n        val twosSortedReversed = twosSorted.", "     \
    \   val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n    \
    \    val onesDec = arr.map(_.toString.toInt).sortBy(_.toString.toInt).reverse\n\
    \        val zerosDec = arr.map(_.toString.toInt).sortBy(_.toString.toInt)\n \
    \       val onesBin = arr.map(_.toString.toInt).map(Integer.toBinaryString).sortBy(_.toString.toInt).reverse\n\
    \        val zerosBin = arr.map(_.toString.toInt).map(Integer.toBinaryString).sortBy(_.toString.toInt)\n\
    \        val onesBinDec = arr.map(_.toString.toInt).map(Integer.toBinaryString).sortBy(_.toString.toInt).reverse\n\
    \        val zerosBinDec = arr.map(_.toString.toInt).map(Integer.toBinaryString).sortBy(_.toString.toInt)\n\
    \        val onesBinBin = arr.map(_.toString.toInt).map(Integer.toBinaryString).map(Integer.toBinaryString).sortBy(_.toString.toInt).reverse\n\
    \        val zerosBinBin = arr.map(_.toString.toInt).map(Integer.toBinaryString).map(Integer.toBinaryString).sortBy(_.toString.toInt)\n\
    \        val onesBinBinDec = arr.map(_.toString.toInt).map(Integer.toBinaryString).map(Integer.toBinaryString).sortBy(_.toString.toInt).reverse\n\
    \        val zerosBinBinDec = arr.map(_.toString.toInt).map(Integer.toBinaryString).map(Integer.toBinaryString).sortBy(_.toString.toInt)\n\
    \        val onesBinBinBin = arr.map(_.toString.toInt).map(Integer.toBinaryString).map(Integer.toBinaryString).map(Integer.toBinaryString).sortBy(_.toString.toInt).reverse\n\
    \        val zerosBinBinBin = arr.map(_.toString.toInt).map(Integer.toBinaryString).map(Integer.toBinaryString).map(Integer.toBinaryString).sortBy(_.toString.toInt)\n\
    \        val onesBinBinBinDec = arr.map(_.toString.toInt).map(Integer.toBinaryString).map(Integer.toBinaryString).map(Integer.toBinaryString).sortBy(_.toString.toInt).reverse\n\
    \        val zerosBinBinBinDec = arr.map(_.toString.toInt).map(Integer.toBinaryString).map(Integer.toBinaryString).map(Integer.toBinaryString).sortBy(_.toString.toInt)\n\
    \        val onesBinBinBinBin", "        val ones = arr.count(_ == 1)\n      \
    \  val zeros = arr.count(_ == 0)\n        val maxOnes = arr.count(_ == 1)\n  \
    \      val maxZeros = arr.count(_ == 0)\n        val maxOnesIndex = arr.lastIndexWhere(_\
    \ == 1)\n        val maxZerosIndex = arr.lastIndexWhere(_ == 0)\n        val maxOnesDecimal\
    \ = maxOnesIndex.toDouble / maxOnes\n        val maxZerosDecimal = maxZerosIndex.toDouble\
    \ / maxZeros\n        val maxOnesDecimalInt = maxOnesDecimal.toInt\n        val\
    \ maxZerosDecimalInt = maxZerosDecimal.toInt\n        val maxOnesDecimalLong =\
    \ maxOnesDecimal.toLong\n        val maxZerosDecimalLong = maxZerosDecimal.toLong\n\
    \        val maxOnesDecimalFloat = maxOnesDecimal.toFloat\n        val maxZerosDecimalFloat\
    \ = maxZerosDecimal.toFloat\n        val maxOnesDecimalDouble = maxOnesDecimal.toDouble\n\
    \        val maxZerosDecimalDouble = maxZerosDecimal.toDouble\n        val maxOnesDecimalDecimal\
    \ = maxOnesDecimal.toDecimal\n        val maxZerosDecimalDecimal = maxZerosDecimal.toDecimal\n\
    \        val maxOnesDecimalDecimalInt = maxOnesDecimalDecimal.toInt\n        val\
    \ maxZerosDecimalDecimalInt = maxZerosDecimalDecimal.toInt\n        val maxOnesDecimalDecimalLong\
    \ = maxOnesDecimalDecimal.toLong\n        val maxZerosDecimalDecimalLong = maxZerosDecimalDecimal.toLong\n\
    \        val maxOnesDecimalDecimalFloat = maxOnesDecimalDecimal.toFloat\n    \
    \    val maxZerosDecimalDecimalFloat = maxZerosDecimalDecimal.toFloat\n      \
    \  val maxOnesDecimalDecimalDouble = maxOnesDecimalDecimal.toDouble\n        val\
    \ maxZerosDecimalDecimalDouble = maxZerosDecimalDecimal.toDouble\n        val\
    \ maxOnesDecimalDecimalDecimal = maxOnesDecimalDecimal.toDecimal\n        val\
    \ maxZerosDecimalDecimalDecimal = maxZerosDecimalDecimal.toDecimal\n        val\
    \ maxOnesDecimalDecimalDecimalInt = maxOnesDecimalDecimalDecimal.toInt\n     \
    \   val maxZerosDecimalDecimalDecimalInt = maxZerosDecimalDecimalDecimal.toInt\n\
    \        val maxOnesDecimalDecimalDecimalLong = maxOnesDecimalDecimalDecimal.toLong\n\
    \        val max", "        val ones = arr.filter(x => x % 2 == 0).length\n  \
    \      val decimals = arr.filter(x => x % 2 == 1).length\n        val sorted =\
    \ arr.sortBy(x => (ones - x % 2).abs, x => (decimals - x % 10).abs)\n        sorted.reverse",
  "        val ones = arr.map(x => if (x == 1) 1 else 0)\n        val twos = arr.map(x\
    \ => if (x == 2) 1 else 0)\n        val threes = arr.map(x => if (x == 3) 1 else\
    \ 0)\n        val fours = arr.map(x => if (x == 4) 1 else 0)\n        val fives\
    \ = arr.map(x => if (x == 5) 1 else 0)\n        val sixes = arr.map(x => if (x\
    \ == 6) 1 else 0)\n        val sevens = arr.map(x => if (x == 7) 1 else 0)\n \
    \       val eights = arr.map(x => if (x == 8) 1 else 0)\n        val nines = arr.map(x\
    \ => if (x == 9) 1 else 0)\n        val tens = arr.map(x => if (x == 10) 1 else\
    \ 0)\n        val hundreds = arr.map(x => if (x == 11) 1 else 0)\n        val\
    \ thousands = arr.map(x => if (x == 100) 1 else 0)\n        val millions = arr.map(x\
    \ => if (x == 1000) 1 else 0)\n        val billions = arr.map(x => if (x == 10000)\
    \ 1 else 0)\n        val trillions = arr.map(x => if (x == 100000) 1 else 0)\n\
    \        val quadrillions = arr.map(x => if (x == 1000000) 1 else 0)\n       \
    \ val quintillions = arr.map(x => if (x == 100000000) 1 else 0)\n        val onesAndZeros\
    \ = ones + twos + threes + fours + fives + sixes + sevens + eights + nines + tens\
    \ + hundreds + thousands + millions + billions + trillions + quadrillions + quintillions\n\
    \        val onesAndOnes = ones + ones + ones + ones + ones + ones + ones + ones\
    \ + ones + ones + ones + ones + ones + ones + ones + ones + ones + ones + ones\
    \ + ones + ones + ones + ones + ones + ones + ones + ones + ones + ones + ones\
    \ + ones + ones + ones + ones + ones + ones + ones + ones + ones + ones + ones\
    \ + ones + ones + ones + ones + ones + ones + ones + ones + ones + ones + ones\
    \ + ones + ones + ones + ones + ones + ones + ones + ones + ones + ones + ones\
    \ + ones + ones + ones + ones + ones + ones + ones + ones + ones + ones + ones\
    \ + ones + ones + ones + ones + ones + ones + ones + ones + ones + ones + ones\
    \ + ones + ones + one", "        val ones = arr.count(_ == 1)\n        val decs\
    \ = arr.map(x => math.abs(math.log2(x)))\n        val sorted = decs.zip(ones).sortBy(_._1).map(x\
    \ => x._2)\n        sorted.map(x => if (x == 0) 0 else x).reverse", "        val\
    \ ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val\
    \ maxOnes = arr.count(_ == 1)\n        val maxZeros = arr.count(_ == 0)\n    \
    \    val maxOnesDecimal = maxOnes.toDouble / arr.length\n        val maxZerosDecimal\
    \ = maxZeros.toDouble / arr.length\n        val maxOnesDecimalDecimal = maxOnesDecimal.toDouble\
    \ / arr.length\n        val maxZerosDecimalDecimal = maxZerosDecimal.toDouble\
    \ / arr.length\n        val maxOnesDecimalDecimalDecimal = maxOnesDecimalDecimal.toDouble\
    \ / arr.length\n        val maxZerosDecimalDecimalDecimal = maxZerosDecimalDecimal.toDouble\
    \ / arr.length\n        val maxOnesDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimal.toDouble\
    \ / arr.length\n        val maxZerosDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimal.toDouble\
    \ / arr.length\n        val maxOnesDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimal.toDouble\
    \ / arr.length\n        val maxZerosDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimal.toDouble\
    \ / arr.length\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimal.toDouble / arr.length\n       \
    \ val maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / arr.length\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / arr.length\n\
    \        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / arr.length\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / arr.length\n\
    \        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / arr.length\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / arr.length\n\
    \        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / arr.length\n\
    \        val maxOnesDecimalDecimalDecimalDecimalDecimal", "        val ones =\
    \ arr.count(_ == 1)\n        val twos = arr.count(_ == 2)\n        val threes\
    \ = arr.count(_ == 3)\n        val fours = arr.count(_ == 4)\n        val fives\
    \ = arr.count(_ == 5)\n        val sixes = arr.count(_ == 6)\n        val sevens\
    \ = arr.count(_ == 7)\n        val eights = arr.count(_ == 8)\n        val nines\
    \ = arr.count(_ == 9)\n        val tens = arr.count(_ == 10)\n        val hundreds\
    \ = arr.count(_ == 100)\n        val thousands = arr.count(_ == 1000)\n      \
    \  val millions = arr.count(_ == 1000000)\n        val billions = arr.count(_\
    \ == 1000000000)\n        val trillions = arr.count(_ == 1000000000000)\n    \
    \    val quadrillions = arr.count(_ == 1000000000000000)\n        val quintillions\
    \ = arr.count(_ == 1000000000000000000)\n        val sextillions = arr.count(_\
    \ == 10000000000000000000000)\n        val septillions = arr.count(_ == 1000000000000000000000000)\n\
    \        val octillions = arr.count(_ == 1000000000000000000000000000)\n     \
    \   val nonillions = arr.count(_ == 10000000000000000000000000000000)\n      \
    \  val decillions = arr.count(_ == 1000000000000000000000000000000000)\n     \
    \   val undecillions = arr.count(_ == 10000000000000000000000000000000001)\n \
    \       val decillionsOnes = arr.count(_ == 10000000000000000000000000000000010)\n\
    \        val undecillionsOnes = arr.count(_ == 10000000000000000000000000000000011)\n\
    \        val decillionsTwos = arr.count(_ == 100000000000000000000000000000000100)\n\
    \        val undecillionsTwos = arr.count(_ == 100000000000000000000000000000000101)\n\
    \        val decillionsThrees = arr.count(_ == 1000000000000000000000000000000001000)\n\
    \        val undecillionsThrees = arr.count(_ == 1000000000000000000000000000000001001)\n\
    \        val decillionsFours = arr.count(_ == 10000000000000000000000000000000010000)\n\
    \        val undecillionsFours = arr.count(_ == 10000000000000000000000000000000010001)\n\
    \        val decillionsFives = arr.count(_ == 100000000000000000000000000000000100000)\n\
    \        val undecillionsFives = arr.count(_ == 100000000000000000000000000000000100001)\n\
    \        val decillionsSixes = arr.count(_ == 1000000000000000000000000000000001000000)\n\
    \        val undecilli", "        val ones = arr.count(_ == 1)\n        val decimals\
    \ = arr.count(_ > 0)\n        val onesDecimals = ones * decimals\n        val\
    \ onesDecimalsSorted = arr.sortBy(_ / onesDecimals)\n        val onesDecimalsSortedReversed\
    \ = onesDecimalsSorted.reverse\n        onesDecimalsSortedReversed.take(onesDecimalsSortedReversed.size\
    \ - ones)", "        val ones = arr.count(_ == 1)\n        val decs = arr.map(_.toString.toInt)\n\
    \        val sorted = decs.sortWith(_.compare(decs(0)) == 0)\n        val result\
    \ = sorted.map(dec => dec / ones)\n        result.sortWith(_.compare(arr(0)) ==\
    \ 0)", "        val ones = arr.map(x => if (x == 1) 1 else 0)\n        val twos\
    \ = arr.map(x => if (x == 2) 1 else 0)\n        val threes = arr.map(x => if (x\
    \ == 3) 1 else 0)\n        val fours = arr.map(x => if (x == 4) 1 else 0)\n  \
    \      val fives = arr.map(x => if (x == 5) 1 else 0)\n        val sixes = arr.map(x\
    \ => if (x == 6) 1 else 0)\n        val sevens = arr.map(x => if (x == 7) 1 else\
    \ 0)\n        val eights = arr.map(x => if (x == 8) 1 else 0)\n        val nines\
    \ = arr.map(x => if (x == 9) 1 else 0)\n        val tens = arr.map(x => if (x\
    \ == 10) 1 else 0)\n        val hundreds = arr.map(x => if (x == 11) 1 else 0)\n\
    \        val thousands = arr.map(x => if (x == 100) 1 else 0)\n        val ten_thousands\
    \ = arr.map(x => if (x == 1000) 1 else 0)\n        val hundred_thousands = arr.map(x\
    \ => if (x == 10000) 1 else 0)\n        val millions = arr.map(x => if (x == 1000000)\
    \ 1 else 0)\n        val billions = arr.map(x => if (x == 1000000000) 1 else 0)\n\
    \        val trillions = arr.map(x => if (x == 1000000000000) 1 else 0)\n    \
    \    val quadrillions = arr.map(x => if (x == 1000000000000000) 1 else 0)\n  \
    \      val quintillions = arr.map(x => if (x == 1000000000000000000) 1 else 0)\n\
    \        val ones_count = ones.length\n        val twos_count = twos.length\n\
    \        val threes_count = threes.length\n        val fours_count = fours.length\n\
    \        val fives_count = fives.length\n        val sixes_count = sixes.length\n\
    \        val sevens_count = sevens.length\n        val eights_count = eights.length\n\
    \        val nines_count = nines.length\n        val tens_count = tens.length\n\
    \        val hundreds_count = hundreds.length\n        val thousands_count = thousands.length\n\
    \        val ten_thousands_count = ten_thousands.length\n        val hundred_thousands_count\
    \ = hundred_thousands.length\n        val millions_count = millions.length\n \
    \       val billions_count = billions.length\n        val trillions_count = trillions.length\n\
    \        val quadrillions_count = quadrillions.length\n        val quintillions_count\
    \ = quintillions.length\n        val one", "        val ones = arr.count(x =>\
    \ x == 1)\n        val decs = arr.map(x => math.pow(2,x)).sum\n        val sorted\
    \ = arr.sortWith(x => math.abs(x - ones) < math.abs(x - decs))\n        sorted",
  "        val ones = arr.filter(_ % 2 == 0).length\n        val decs = arr.filter(_\
    \ % 2 == 1).map(_.toString.toInt).sortBy(_.toString.toInt)\n        val res =\
    \ decs ++ arr.filter(_ % 2 == 0).map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val res2 = res.filter(_ % 2 == 0).map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val res3 = res.filter(_ % 2 == 1).map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val res4 = res2.filter(_ % 2 == 0).map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val res5 = res2.filter(_ % 2 == 1).map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val res6 = res3.filter(_ % 2 == 0).map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val res7 = res3.filter(_ % 2 == 1).map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val res8 = res4.filter(_ % 2 == 0).map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val res9 = res4.filter(_ % 2 == 1).map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val res10 = res5.filter(_ % 2 == 0).map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val res11 = res5.filter(_ % 2 == 1).map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val res12 = res6.filter(_ % 2 == 0).map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val res13 = res6.filter(_ % 2 == 1).map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val res14 = res7.filter(_ % 2 == 0).map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val res15 = res7.filter(_ % 2 == 1).map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val res16 = res8.filter(_ % 2 == 0).map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val res17 = res8.filter(_ % 2 == 1).map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val res18 = res9.filter(_ % 2 == ", "        val ones = arr.filter(_\
    \ % 2 == 0).length\n        val twos = arr.filter(_ % 2 == 1).length\n       \
    \ val threes = arr.filter(_ % 3 == 0).length\n        val fours = arr.filter(_\
    \ % 3 == 1).length\n        val fives = arr.filter(_ % 5 == 0).length\n      \
    \  val sixes = arr.filter(_ % 5 == 1).length\n        val sevens = arr.filter(_\
    \ % 7 == 0).length\n        val eights = arr.filter(_ % 7 == 1).length\n     \
    \   val nines = arr.filter(_ % 9 == 0).length\n        val tens = arr.filter(_\
    \ % 9 == 1).length\n        val onesArr = arr.filter(_ % 2 == 0).sortBy(x => x)\n\
    \        val twosArr = arr.filter(_ % 2 == 1).sortBy(x => x)\n        val threesArr\
    \ = arr.filter(_ % 3 == 0).sortBy(x => x)\n        val foursArr = arr.filter(_\
    \ % 3 == 1).sortBy(x => x)\n        val fivesArr = arr.filter(_ % 5 == 0).sortBy(x\
    \ => x)\n        val sixesArr = arr.filter(_ % 5 == 1).sortBy(x => x)\n      \
    \  val sevensArr = arr.filter(_ % 7 == 0).sortBy(x => x)\n        val eightsArr\
    \ = arr.filter(_ % 7 == 1).sortBy(x => x)\n        val ninesArr = arr.filter(_\
    \ % 9 == 0).sortBy(x => x)\n        val tensArr = arr.filter(_ % 9 == 1).sortBy(x\
    \ => x)\n        val onesArr2 = onesArr.filter(_ % 2 == 0).sortBy(x => x)\n  \
    \      val twosArr2 = twosArr.filter(_ % 2 == 1).sortBy(x => x)\n        val threesArr2\
    \ = threesArr.filter(_ % 3 == 0).sortBy(x => x)\n        val foursArr2 = foursArr.filter(_\
    \ % 3 == 1).sortBy(x => x)\n        val fivesArr2 = fivesArr.filter(_ % 5 == 0).sortBy(x\
    \ => x)\n        val sixesArr2 = sixesArr.filter(_ % 5 == 1).sortBy(x => x)\n\
    \        val sevensArr2 = sevensArr.filter(_ % 7 == 0).sortBy(x => x)\n      \
    \  val eightsArr2 = eightsArr.filter(_ % 7 == 1).sortBy(x => x)\n        val ninesArr2\
    \ = ninesArr.filter(_", "        val ones = arr.count(_ == 1)\n        val decimals\
    \ = arr.count(_ > 0)\n        val onesArr = arr.map(x => if (x == 1) 1 else 0)\n\
    \        val decimalsArr = arr.map(x => if (x == 0) 0 else 1)\n        val onesArr\
    \ = onesArr.sortWith((x, y) => x - y)\n        val decimalsArr = decimalsArr.sortWith((x,\
    \ y) => x - y)\n        val result = onesArr.zip(decimalsArr).sortWith((x, y)\
    \ => x._1 - y._1).map(x => x._2)\n        result", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesArr = arr.filter(_\
    \ == 1).sortBy(_.toString.toInt)\n        val zerosArr = arr.filter(_ == 0).sortBy(_.toString.toInt)\n\
    \        val onesCount = onesArr.length\n        val zerosCount = zerosArr.length\n\
    \        val onesSum = onesArr.foldLeft(0L)(_ + _)\n        val zerosSum = zerosArr.foldLeft(0L)(_\
    \ + _)\n        val onesAvg = onesSum / onesCount\n        val zerosAvg = zerosSum\
    \ / zerosCount\n        val onesDev = onesArr.foldLeft(0L)(_ + _) / onesCount\n\
    \        val zerosDev = zerosArr.foldLeft(0L)(_ + _) / zerosCount\n        val\
    \ onesDev = onesArr.foldLeft(0L)(_ + _) / onesCount\n        val zerosDev = zerosArr.foldLeft(0L)(_\
    \ + _) / zerosCount\n        val onesDev = onesArr.foldLeft(0L)(_ + _) / onesCount\n\
    \        val zerosDev = zerosArr.foldLeft(0L)(_ + _) / zerosCount\n        val\
    \ onesDev = onesArr.foldLeft(0L)(_ + _) / onesCount\n        val zerosDev = zerosArr.foldLeft(0L)(_\
    \ + _) / zerosCount\n        val onesDev = onesArr.foldLeft(0L)(_ + _) / onesCount\n\
    \        val zerosDev = zerosArr.foldLeft(0L)(_ + _) / zerosCount\n        val\
    \ onesDev = onesArr.foldLeft(0L)(_ + _) / onesCount\n        val zerosDev = zerosArr.foldLeft(0L)(_\
    \ + _) / zerosCount\n        val onesDev = onesArr.foldLeft(0L)(_ + _) / onesCount\n\
    \        val zerosDev = zerosArr.foldLeft(0L)(_ + _) / zerosCount\n        val\
    \ onesDev = onesArr.foldLeft(0L)(_ + _) / onesCount\n        val zerosDev = zerosArr.foldLeft(",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val maxOnes = arr.count(_ == 1)\n        val maxZeros = arr.count(_ ==\
    \ 0)\n        val maxOnesIndex = arr.indexOfMax(_ == 1)\n        val maxZerosIndex\
    \ = arr.indexOfMax(_ == 0)\n        val maxOnesDecimal = maxOnesIndex.toDouble\
    \ / maxOnes\n        val maxZerosDecimal = maxZerosIndex.toDouble / maxZeros\n\
    \        val maxOnesDecimalDecimal = maxOnesDecimal / maxOnes\n        val maxZerosDecimalDecimal\
    \ = maxZerosDecimal / maxZeros\n        val maxOnesDecimalDecimalDecimal = maxOnesDecimalDecimal\
    \ / maxOnes\n        val maxZerosDecimalDecimalDecimal = maxZerosDecimalDecimal\
    \ / maxZeros\n        val maxOnesDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimal\
    \ / maxOnes\n        val maxZerosDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimal\
    \ / maxZeros\n        val maxOnesDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimalDecimal\
    \ / maxOnes\n        val maxZerosDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimal\
    \ / maxZeros\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / maxOnes\n       \
    \ val maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / maxZeros\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / maxOnes\n\
    \        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / maxZeros\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / maxOnes\n        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal /\
    \ maxZeros\n        val ", "        val ones = arr.count(x => x == 1)\n      \
    \  val decimals = arr.count(x => x == 0)\n        val onesDecimals = ones * decimals\n\
    \        val onesDecimalsSorted = arr.sortBy(x => math.abs(math.log2(x)))\n  \
    \      val onesDecimalsSortedWithOnes = onesDecimalsSorted.take(onesDecimals)\n\
    \        val onesDecimalsSortedWithOnesSorted = onesDecimalsSortedWithOnes.sortBy(x\
    \ => math.abs(math.log2(x)))\n        onesDecimalsSortedWithOnesSorted", "   \
    \     val ones = arr.filter(x => x == 1).size\n        val twos = arr.filter(x\
    \ => x == 2).size\n        val threes = arr.filter(x => x == 3).size\n       \
    \ val fours = arr.filter(x => x == 4).size\n        val fives = arr.filter(x =>\
    \ x == 5).size\n        val sixes = arr.filter(x => x == 6).size\n        val\
    \ sevens = arr.filter(x => x == 7).size\n        val eights = arr.filter(x =>\
    \ x == 8).size\n        val nines = arr.filter(x => x == 9).size\n        val\
    \ tens = arr.filter(x => x == 10).size\n        val hundreds = arr.filter(x =>\
    \ x == 11).size\n        val thousands = arr.filter(x => x == 12).size\n     \
    \   val millions = arr.filter(x => x == 13).size\n        val billions = arr.filter(x\
    \ => x == 14).size\n        val trillions = arr.filter(x => x == 15).size\n  \
    \      val quadrillions = arr.filter(x => x == 16).size\n        val quintillions\
    \ = arr.filter(x => x == 17).size\n        val sextillions = arr.filter(x => x\
    \ == 18).size\n        val septillions = arr.filter(x => x == 19).size\n     \
    \   val octillions = arr.filter(x => x == 20).size\n        val nonillions = arr.filter(x\
    \ => x == 21).size\n        val decillions = arr.filter(x => x == 22).size\n \
    \       val undecillions = arr.filter(x => x == 23).size\n        val duodecillions\
    \ = arr.filter(x => x == 24).size\n        val tredecillions = arr.filter(x =>\
    \ x == 25).size\n        val quattuordecillions = arr.filter(x => x == 26).size\n\
    \        val quindecillions = arr.filter(x => x == 27).size\n        val sexdecillions\
    \ = arr.filter(x => x == 28).size\n        val septendecillions = arr.filter(x\
    \ => x == 29).size\n        val octodecillions = arr.filter(x => x == 30).size\n\
    \        val novemdecillions = arr.filter(x => x == 31).size\n        val vigintillions\
    \ = arr.filter(x => x == 32).size\n        val unvigintillions = arr.filter(x\
    \ => x == 33).size\n        val duovigintillions = arr.", "        val ones =\
    \ arr.filter(_ % 2 == 0).length\n        val decs = arr.filter(_ % 2 == 1).map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val sorted = decs.zip(ones).sortBy(_._1).map(x => x._2)\n        sorted.map(x\
    \ => arr(x.toInt))", "        val ones = arr.filter(x => x % 2 == 0).size\n  \
    \      val decs = arr.filter(x => x % 2 == 1).map(_.toString.toInt).sorted\n \
    \       val sorted = decs.zip(ones).sortBy(_._1).map(x => x._2)\n        sorted.map(x\
    \ => arr(x - 1))", "        val ones = arr.count(_ == 1)\n        val twos = arr.count(_\
    \ == 2)\n        val threes = arr.count(_ == 3)\n        val fours = arr.count(_\
    \ == 4)\n        val fives = arr.count(_ == 5)\n        val sixes = arr.count(_\
    \ == 6)\n        val sevens = arr.count(_ == 7)\n        val eights = arr.count(_\
    \ == 8)\n        val nines = arr.count(_ == 9)\n        val tens = arr.count(_\
    \ == 10)\n        val hundreds = arr.count(_ == 100)\n        val thousands =\
    \ arr.count(_ == 1000)\n        val millions = arr.count(_ == 1000000)\n     \
    \   val billions = arr.count(_ == 1000000000)\n        val trillions = arr.count(_\
    \ == 1000000000000)\n        val quadrillions = arr.count(_ == 1000000000000000)\n\
    \        val quintillions = arr.count(_ == 1000000000000000000)\n        val onesAndZeros\
    \ = arr.count(_ == 1)\n        val onesAndOnes = arr.count(_ == 2)\n        val\
    \ onesAndTwos = arr.count(_ == 3)\n        val onesAndThrees = arr.count(_ ==\
    \ 4)\n        val onesAndFours = arr.count(_ == 5)\n        val onesAndFives =\
    \ arr.count(_ == 6)\n        val onesAndSixes = arr.count(_ == 7)\n        val\
    \ onesAndSevens = arr.count(_ == 8)\n        val onesAndEights = arr.count(_ ==\
    \ 9)\n        val onesAndNines = arr.count(_ == 10)\n        val onesAndTens =\
    \ arr.count(_ == 11)\n        val onesAndHundreds = arr.count(_ == 100)\n    \
    \    val onesAndThousands = arr.count(_ == 1000)\n        val onesAndMillions\
    \ = arr.count(_ == 1000000)\n        val onesAndBillions = arr.count(_ == 1000000000)\n\
    \        val onesAndTrillions = arr.count(_ == 1000000000000)\n        val onesAndQuadrillions\
    \ = arr.count(_ == 1000000000000000)\n        val onesAndQuintillions = arr.count(_\
    \ == 1000000000000000000)\n        val onesAndOnesAndZeros = arr.count(_ == 1)\n\
    \        val onesAndOnesAndOnes = arr.count(_ == 2)\n        val onesAndOnesAndTwos\
    \ = arr.count(_ == 3)\n        val onesAndOnesAndThrees = arr.count(_ == 4)\n\
    \        val onesAndOnesAndFours = arr.count(_", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesDec = arr.map(x\
    \ => math.pow(2, math.ceil(math.log(x, 2))))\n        val zerosDec = arr.map(x\
    \ => math.pow(2, math.floor(math.log(x, 2))))\n        val onesDec = onesDec.sortWith((x,\
    \ y) => x - y)\n        val zerosDec = zerosDec.sortWith((x, y) => x - y)\n  \
    \      val onesDec = onesDec.map(x => math.pow(x, 2))\n        val zerosDec =\
    \ zerosDec.map(x => math.pow(10, x))\n        val onesDec = onesDec.sortWith((x,\
    \ y) => x - y)\n        val zerosDec = zerosDec.sortWith((x, y) => x - y)\n  \
    \      val onesDec = onesDec.map(x => math.pow(x, 2))\n        val zerosDec =\
    \ zerosDec.map(x => math.pow(10, x))\n        val onesDec = onesDec.sortWith((x,\
    \ y) => x - y)\n        val zerosDec = zerosDec.sortWith((x, y) => x - y)\n  \
    \      val onesDec = onesDec.map(x => math.pow(x, 2))\n        val zerosDec =\
    \ zerosDec.map(x => math.pow(10, x))\n        val onesDec = onesDec.sortWith((x,\
    \ y) => x - y)\n        val zerosDec = zerosDec.sortWith((x, y) => x - y)\n  \
    \      val onesDec = onesDec.map(x => math.pow(x, 2))\n        val zerosDec =\
    \ zerosDec.map(x => math.pow(10, x))\n        val onesDec = onesDec.sortWith((x,\
    \ y) => x - y)\n        val zerosDec = zerosDec.sortWith((x, y) => x - y)\n  \
    \      val onesDec = onesDec.map(x => math.pow(x, 2))\n        val zerosDec =\
    \ zerosDec.map(x => math.pow(10, x))\n        val onesDec = onesDec.sortWith((x,\
    \ y) => x - y)\n        val zerosDec = zerosDec.sortWith((x, y) => x - y)\n  \
    \      val onesDec = onesDec.map(x => math.pow(x, 2))\n        val zerosDec =\
    \ zerosDec.map(x => math.pow(10, x))\n        val onesDec = onesDec.sortWith((x,\
    \ y) => x - y)\n        val zerosDec = zerosDec.sortWith((x, y) => x - y)\n  \
    \      val onesDec = onesDe", "        val ones = arr.count(_ == 1)\n        val\
    \ zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n     \
    \   val zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount /\
    \ arr.length\n        val zerosDecimal = zerosCount / arr.length\n        val\
    \ onesDecimalDecimal = onesDecimal / ones\n        val zerosDecimalDecimal = zerosDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimal = onesDecimalDecimal / onesDecimal\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / zerosDecimal\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / onesDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zerosDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal", "        val ones\
    \ = arr.map(x => if (x == 1) 1 else 0)\n        val zeros = arr.map(x => if (x\
    \ == 0) 0 else 1)\n        val onesCount = ones.reduceLeft(_ + _)\n        val\
    \ zerosCount = zeros.reduceLeft(_ + _)\n        val onesZeros = ones.zip(zeros)\n\
    \        val onesZerosCount = onesZeros.reduceLeft(_ + _)\n        val onesZerosZeros\
    \ = onesZeros.zip(zeros)\n        val onesZerosZerosCount = onesZerosZeros.reduceLeft(_\
    \ + _)\n        val onesZerosZerosZerosCount = onesZerosZeros.zip(zeros)\n   \
    \     val onesZerosZerosZerosCount2 = onesZerosZeros.zip(zeros)\n        val onesZerosZerosZerosCount3\
    \ = onesZerosZeros.zip(zeros)\n        val onesZerosZerosZerosCount4 = onesZerosZeros.zip(zeros)\n\
    \        val onesZerosZerosZerosCount5 = onesZerosZeros.zip(zeros)\n        val\
    \ onesZerosZerosZerosCount6 = onesZerosZeros.zip(zeros)\n        val onesZerosZerosZerosCount7\
    \ = onesZerosZeros.zip(zeros)\n        val onesZerosZerosZerosCount8 = onesZerosZeros.zip(zeros)\n\
    \        val onesZerosZerosZerosCount9 = onesZerosZeros.zip(zeros)\n        val\
    \ onesZerosZerosZerosCount10 = onesZerosZeros.zip(zeros)\n        val onesZerosZerosZerosCount11\
    \ = onesZerosZeros.zip(zeros)\n        val onesZerosZerosZerosCount12 = onesZerosZeros.zip(zeros)\n\
    \        val onesZerosZerosZerosCount13 = onesZerosZeros.zip(zeros)\n        val\
    \ onesZerosZerosZerosCount14 = onesZerosZeros.", "        val ones = arr.filter(x\
    \ => x == 1).length\n        val twos = arr.filter(x => x == 2).length\n     \
    \   val threes = arr.filter(x => x == 3).length\n        val fours = arr.filter(x\
    \ => x == 4).length\n        val fives = arr.filter(x => x == 5).length\n    \
    \    val sixes = arr.filter(x => x == 6).length\n        val sevens = arr.filter(x\
    \ => x == 7).length\n        val eights = arr.filter(x => x == 8).length\n   \
    \     val nines = arr.filter(x => x == 9).length\n        val tens = arr.filter(x\
    \ => x == 10).length\n        val hundreds = arr.filter(x => x == 11).length\n\
    \        val thousands = arr.filter(x => x == 12).length\n        val ten_thousands\
    \ = arr.filter(x => x == 13).length\n        val hundred_thousands = arr.filter(x\
    \ => x == 14).length\n        val millions = arr.filter(x => x == 15).length\n\
    \        val billions = arr.filter(x => x == 16).length\n        val trillions\
    \ = arr.filter(x => x == 17).length\n        val quadrillions = arr.filter(x =>\
    \ x == 18).length\n        val quintillions = arr.filter(x => x == 19).length\n\
    \        val sextillions = arr.filter(x => x == 20).length\n        val septillions\
    \ = arr.filter(x => x == 21).length\n        val octillions = arr.filter(x =>\
    \ x == 22).length\n        val nonillions = arr.filter(x => x == 23).length\n\
    \        val decillions = arr.filter(x => x == 24).length\n        val undecillions\
    \ = arr.filter(x => x == 25).length\n        val duodecillions = arr.filter(x\
    \ => x == 26).length\n        val tredecillions = arr.filter(x => x == 27).length\n\
    \        val quattuordecillions = arr.filter(x => x == 28).length\n        val\
    \ quindecillions = arr.filter(x => x == 29).length\n        val sexdecillions\
    \ = arr.filter(x => x == 30).length\n        val septendecillions = arr.filter(x\
    \ => x == 31).length\n        val octodecillions = arr.filter(x => x == 32).length\n\
    \        val novemdecillions = arr.filter(x => x == 33).length\n        val vigintillions\
    \ = arr.filter(x => x == 34", "        val ones = arr.filter(x => x == 1).length\n\
    \        val zeros = arr.filter(x => x == 0).length\n        val decimal = arr.map(x\
    \ => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n        val decimal2\
    \ = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n     \
    \   val decimal3 = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n\
    \        val decimal4 = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n\
    \        val decimal5 = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n\
    \        val decimal6 = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n\
    \        val decimal7 = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n\
    \        val decimal8 = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n\
    \        val decimal9 = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n\
    \        val decimal10 = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n\
    \        val decimal11 = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n\
    \        val decimal12 = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n\
    \        val decimal13 = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n\
    \        val decimal14 = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n\
    \        val decimal15 = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n\
    \        val decimal16 = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n\
    \        val decimal17 = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n\
    \        val decimal18 = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n\
    \        val decimal19 = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n\
    \        val decimal20 = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[Double]).sum\n\
    \        val decimal21 = arr.map(x => math.abs(x - math.floor(x)).asInstanceOf[",
  "        val ones = arr.map(x => if (x == 1) 1 else 0)\n        val twos = arr.map(x\
    \ => if (x == 2) 2 else 0)\n        val threes = arr.map(x => if (x == 3) 3 else\
    \ 0)\n        val fours = arr.map(x => if (x == 4) 4 else 0)\n        val fives\
    \ = arr.map(x => if (x == 5) 5 else 0)\n        val sixes = arr.map(x => if (x\
    \ == 6) 6 else 0)\n        val sevens = arr.map(x => if (x == 7) 7 else 0)\n \
    \       val eights = arr.map(x => if (x == 8) 8 else 0)\n        val nines = arr.map(x\
    \ => if (x == 9) 9 else 0)\n        val tens = arr.map(x => if (x == 10) 10 else\
    \ 0)\n        val hundreds = arr.map(x => if (x == 11) 11 else 0)\n        val\
    \ thousands = arr.map(x => if (x == 100) 100 else 0)\n        val millions = arr.map(x\
    \ => if (x == 1000) 1000 else 0)\n        val billions = arr.map(x => if (x ==\
    \ 1000) 1000 else 0)\n        val trillions = arr.map(x => if (x == 1000) 1000\
    \ else 0)\n        val quadrillions = arr.map(x => if (x == 1000) 1000 else 0)\n\
    \        val quintillions = arr.map(x => if (x == 1000) 1000 else 0)\n       \
    \ val sextillions = arr.map(x => if (x == 1000) 1000 else 0)\n        val septillions\
    \ = arr.map(x => if (x == 1000) 1000 else 0)\n        val octillions = arr.map(x\
    \ => if (x == 1000) 1000 else 0)\n        val nonillions = arr.map(x => if (x\
    \ == 1000) 1000 else 0)\n        val decillions = arr.map(x => if (x == 1000)\
    \ 1000 else 0)\n        val undecillions = arr.map(x => if (x == 1000) 1000 else\
    \ 0)\n        val decillions = arr.map(x => if (x == 1000) 1000 else 0)\n    \
    \    val undecillions = arr.map(x => if (x == 1000) 1000 else 0)\n        val\
    \ decillions = arr.map(x => if (x == 1000) 1000 else 0)\n        val undecillions\
    \ = arr.map(x => if (x == 1000) 1000 else 0)\n        val decillions = arr.map(x\
    \ => if (x == 1000) 1000 else 0)\n        val undecillions = arr.map(x => if (x\
    \ == 1000) 1000 else 0)\n        val decilli", "        val ones = arr.filter(x\
    \ => x % 2 == 0).length\n        val decimals = arr.filter(x => x % 2 == 1).length\n\
    \        val result = arr.sortWith((x, y) => if (x == y) 0 else (if (x < y) -1\
    \ else if (x > y) 1 else 0))\n        if (ones == decimals) result else result.map(x\
    \ => if (x == 0) x else x / 2)", "        val ones = arr.count(_ == 1)\n     \
    \   val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n\
    \        val zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount\
    \ / arr.length\n        val zerosDecimal = zerosCount / arr.length\n        val\
    \ onesDecimalDecimal = onesDecimal / ones\n        val zerosDecimalDecimal = zerosDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimal = onesDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / zeros\n      \
    \  val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / ones\n \
    \       val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(_ % 2 == 0).size\n        val twos = arr.filter(_\
    \ % 2 == 1).size\n        val decimals = arr.filter(_ % 10 == 0).size\n      \
    \  val decimalsDecimals = arr.filter(_ % 10 == 1).size\n        val decimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 2).size\n        val decimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 3).size\n        val decimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 4).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 5).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 6).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 7).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 8).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 9).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 10).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 11).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 12).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 13).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 14).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 15).size\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 16).size\n        val decimalsDecimal", "        val\
    \ ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val\
    \ onesArr = arr.filter(_ == 1)\n        val zerosArr = arr.filter(_ == 0)\n  \
    \      val onesCount = onesArr.size\n        val zerosCount = zerosArr.size\n\
    \        val onesSum = onesArr.sum\n        val zerosSum = zerosArr.sum\n    \
    \    val onesMax = onesArr.max\n        val zerosMax = zerosArr.max\n        val\
    \ onesMin = onesArr.min\n        val zerosMin = zerosArr.min\n        val onesSumAbs\
    \ = onesSum.abs\n        val zerosSumAbs = zerosSum.abs\n        val onesMaxAbs\
    \ = onesMax.abs\n        val zerosMaxAbs = zerosMax.abs\n        val onesMinAbs\
    \ = onesMin.abs\n        val zerosMinAbs = zerosMin.abs\n        val onesSumAbsDiff\
    \ = onesSumAbs - onesCount\n        val zerosSumAbsDiff = zerosSumAbs - zerosCount\n\
    \        val onesMaxAbsDiff = onesMaxAbs - onesCount\n        val zerosMaxAbsDiff\
    \ = zerosMaxAbs - zerosCount\n        val onesMinAbsDiff = onesMinAbs - onesCount\n\
    \        val zerosMinAbsDiff = zerosMinAbs - zerosCount\n        val onesSumAbsDiffAbs\
    \ = onesSumAbsDiff + onesCount\n        val zerosSumAbsDiffAbs = zerosSumAbsDiff\
    \ + zerosCount\n        val onesMaxAbsDiffAbs = onesMaxAbsDiff + onesCount\n \
    \       val zerosMaxAbsDiffAbs = zerosMaxAbsDiff + zerosCount\n        val onesMinAbsDiffAbs\
    \ = onesMinAbsDiff + onesCount\n        val zerosMinAbsDiffAbs = zerosMinAbsDiff\
    \ + zerosCount\n        val onesSumAbsDiffAbsDiff = onesSumAbsDiffAbs - onesCount\n\
    \        val zerosSumAbsDiffAbsDiff = zerosSumAbsDiffAbs - zerosCount\n      \
    \  val onesMaxAbsDiffAbsDiff = onesMaxAbsDiffAbs - onesCount\n        val zerosMaxAbsDiffAbsDiff\
    \ = zerosMaxAbsDiffAbs - zerosCount\n        val onesMin", "        val ones =\
    \ arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesArray\
    \ = arr.map(x => (x % 2 == 0 ? 1 : 0)).toArray\n        val zerosArray = arr.map(x\
    \ => (x % 2 == 0 ? 0 : 1)).toArray\n        val onesArrayLength = onesArray.length\n\
    \        val zerosArrayLength = zerosArray.length\n        val onesArrayLength\
    \ = onesArrayLength / 2\n        val zerosArrayLength = zerosArrayLength / 2\n\
    \        val onesArrayLength = onesArrayLength * 2\n        val zerosArrayLength\
    \ = zerosArrayLength * 2\n        val onesArrayLength = onesArrayLength * 3\n\
    \        val zerosArrayLength = zerosArrayLength * 3\n        val onesArrayLength\
    \ = onesArrayLength * 4\n        val zerosArrayLength = zerosArrayLength * 4\n\
    \        val onesArrayLength = onesArrayLength * 5\n        val zerosArrayLength\
    \ = zerosArrayLength * 5\n        val onesArrayLength = onesArrayLength * 6\n\
    \        val zerosArrayLength = zerosArrayLength * 6\n        val onesArrayLength\
    \ = onesArrayLength * 7\n        val zerosArrayLength = zerosArrayLength * 7\n\
    \        val onesArrayLength = onesArrayLength * 8\n        val zerosArrayLength\
    \ = zerosArrayLength * 8\n        val onesArrayLength = onesArrayLength * 9\n\
    \        val zerosArrayLength = zerosArrayLength * 9\n        val onesArrayLength\
    \ = onesArrayLength * 10\n        val zerosArrayLength = zerosArrayLength * 10\n\
    \        val onesArrayLength = onesArrayLength * 11\n        val zerosArrayLength\
    \ = zerosArrayLength * 11\n        val onesArrayLength = onesArrayLength * 12\n\
    \        val zerosArrayLength = zerosArrayLength * 12\n        val onesArrayLength\
    \ = onesArrayLength * 13\n        val zerosArrayLength = zerosArrayLength * 13\n\
    \        val onesArrayLength = onesArrayLength * 14\n        val zerosArrayLength\
    \ = zerosArrayLength * 14\n        val onesArrayLength = onesArrayLength * 15\n\
    \        val zerosArrayLength = zerosArrayLength * 15\n        val onesArrayLength\
    \ = onesArrayLength * 16\n        val zerosArrayLength = zerosArrayLength * 16\n\
    \        val onesArrayLength = onesArrayLength * 17\n        val zerosArrayLength\
    \ = zerosArrayLength * 17\n        val onesArrayLength = onesArrayLength * 18\n\
    \        val zerosArrayLength = zerosArrayLength * 18\n        val onesArray",
  "        val ones = arr.map(x => if (x == 1) 1 else 0)\n        val twos = arr.map(x\
    \ => if (x == 2) 2 else 0)\n        val threes = arr.map(x => if (x == 3) 3 else\
    \ 0)\n        val fours = arr.map(x => if (x == 4) 4 else 0)\n        val fives\
    \ = arr.map(x => if (x == 5) 5 else 0)\n        val sixes = arr.map(x => if (x\
    \ == 6) 6 else 0)\n        val sevens = arr.map(x => if (x == 7) 7 else 0)\n \
    \       val eights = arr.map(x => if (x == 8) 8 else 0)\n        val nines = arr.map(x\
    \ => if (x == 9) 9 else 0)\n        val tens = arr.map(x => if (x == 10) 10 else\
    \ 0)\n        val hundreds = arr.map(x => if (x == 11) 11 else 0)\n        val\
    \ thousands = arr.map(x => if (x == 100) 100 else 0)\n        val millions = arr.map(x\
    \ => if (x == 1000) 1000 else 0)\n        val billions = arr.map(x => if (x ==\
    \ 1000000) 1000000 else 0)\n        val trillions = arr.map(x => if (x == 1000000000)\
    \ 1000000000 else 0)\n        val quadrillions = arr.map(x => if (x == 1000000000000)\
    \ 1000000000000 else 0)\n        val quintillions = arr.map(x => if (x == 1000000000000000)\
    \ 1000000000000000 else 0)\n        val sextillions = arr.map(x => if (x == 1000000000000000000)\
    \ 1000000000000000000 else 0)\n        val onesAndZeros = arr.map(x => if (x ==\
    \ 1) 1 else 0)\n        val onesAndOnes = arr.map(x => if (x == 1) 1 else 1)\n\
    \        val onesAndTwos = arr.map(x => if (x == 1) 1 else 2)\n        val onesAndThrees\
    \ = arr.map(x => if (x == 1) 1 else 3)\n        val onesAndFours = arr.map(x =>\
    \ if (x == 1) 1 else 4)\n        val onesAndFives = arr.map(x => if (x == 1) 1\
    \ else 5)\n        val onesAndSixes = arr.map(x => if (x == 1) 1 else 6)\n   \
    \     val onesAndSevens = arr.map(x => if (x == 1) 1 else 7)\n        val onesAndEights\
    \ = arr.map(x => if (x == 1) 1 else 8)\n        val onesAndNines = arr.map(x =>\
    \ if (x == 1) 1 else 9)\n        val onesAndTens = arr.map(x => if (x == 1) 1\
    \ else 10)\n        val onesAndHundreds = arr.map(x => if (x == 1) ", "      \
    \  val ones = arr.filter(_ % 2 == 0).length\n        val zeros = arr.filter(_\
    \ % 2 == 1).length\n        val onesArr = arr.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n\
    \        val zerosArr = arr.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n       \
    \ val onesCount = onesArr.length\n        val zerosCount = zerosArr.length\n \
    \       val onesSum = onesArr.foldLeft(0)((sum, elem) => sum + elem)\n       \
    \ val zerosSum = zerosArr.foldLeft(0)((sum, elem) => sum + elem)\n        val\
    \ onesDec = onesSum / onesCount\n        val zerosDec = zerosSum / zerosCount\n\
    \        val onesDec = onesArr.sortBy(_ % 2).reverse\n        val zerosArr = zerosArr.sortBy(_\
    \ % 2).reverse\n        val zerosCount = zerosArr.length\n        val zerosSum\
    \ = zerosArr.foldLeft(0)((sum, elem) => sum + elem)\n        val zerosDec = zerosSum\
    \ / zerosCount\n        val zerosDec = zerosArr.sortBy(_ % 2).reverse\n      \
    \  val result = onesDec.zip(zerosDec).sortBy(_._1).reverse\n        result.map(_._2)",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArr = arr.map(x => (x >>> 0).toInt)\n        val zerosArr = arr.map(x\
    \ => (x >>> 0).toInt)\n        val onesCount = onesArr.length\n        val zerosCount\
    \ = zerosArr.length\n        val onesSum = onesArr.sum\n        val zerosSum =\
    \ zerosArr.sum\n        val onesMax = onesSum / onesCount\n        val zerosMax\
    \ = zerosSum / zerosCount\n        val onesMin = onesSum / onesCount\n       \
    \ val zerosMin = zerosSum / zerosCount\n        val onesMinArr = onesArr.map(x\
    \ => (x >>> 0).toInt)\n        val zerosMinArr = zerosArr.map(x => (x >>> 0).toInt)\n\
    \        val onesMinCount = onesMinArr.length\n        val zerosMinCount = zerosMinArr.length\n\
    \        val onesMinSum = onesMinArr.sum\n        val zerosMinSum = zerosMinArr.sum\n\
    \        val onesMinMax = onesMinSum / onesMinCount\n        val zerosMinMax =\
    \ zerosMinSum / zerosMinCount\n        val onesMinMin = onesMinSum / onesMinCount\n\
    \        val zerosMinMin = zerosMinSum / zerosMinCount\n        val onesMinMinArr\
    \ = onesMinArr.map(x => (x >>> 0).toInt)\n        val zerosMinMinArr = zerosMinArr.map(x\
    \ => (x >>> 0).toInt)\n        val onesMinMinCount = onesMinMinArr.length\n  \
    \      val zerosMinMinCount = zerosMinMinArr.length\n        val onesMinMinSum\
    \ = onesMinMinArr.sum\n        val zerosMinMinSum = zerosMinMinArr.sum\n     \
    \   val onesMinMinMax = onesMinMinSum / onesMinMinCount\n        val zerosMinMinMax\
    \ = zerosMinMinSum / zerosMinMinCount\n        val onesMinMinMin = onesMinMinSum\
    \ / onesMinMinCount\n        val zerosMinMinMin = zerosMinMinSum / zerosMinMinCount\n\
    \        val onesMinMinMinArr = onesMinMinArr.map(x => (x >>> 0).toInt)\n    \
    \    val zerosMinMinMinArr = zerosMinMinArr.map("]
stop_tokens:
- "\n    }\n"
