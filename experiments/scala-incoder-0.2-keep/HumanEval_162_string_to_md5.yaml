name: HumanEval_162_string_to_md5
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string 'text', return its md5 hash equivalent string.\n    // If\
  \ 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello world')\
  \ == '3e25960a79dbc69b674cd4ec67a72c62'\n    def stringToMd5(text : String) : Option[String]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello\
  \ world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
  \")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
  ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
  ));\n    }\n\n}\n"
completions: ["        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text).hexString)",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text).hexValue)",
  "        val md5 = new java.security.MessageDigest(\"MD5\")\n        val bytes =\
    \ text.getBytes(\"UTF-8\")\n        val md5 = md5.getInstance\n        md5.update(bytes)\n\
    \        val md5Hash = md5.digest()\n        val md5HashString = Array[Byte](md5Hash).map(\"\
    %02x\".format(_)).mkString\n        Option(md5HashString)", "        if (text.isEmpty)\
    \ {\n            None\n        } else {\n            val md5 = MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md5.digest(text.getBytes)\n            val hexString\
    \ = digest.map(\"%02x\".format(_)).mkString\n            Some(hexString)\n   \
    \     }", "        if (text.isEmpty) None\n        else Some(scala.util.Md5.md5(text).hexValue)",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.md5(text).hexValue)",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(md5(text))", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.hashing.Md5.hashString(text).hexString)",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(md5(text))", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.Md5.md5(text).hex)", "        if (text.isEmpty)\
    \ None\n        else {\n            val md5 = MessageDigest.getInstance(\"MD5\"\
    )\n            val bytes = md5.digest(text.getBytes)\n            val hexString\
    \ = bytes.map(\"%02x\".format(_)).mkString\n            Some(hexString)\n    \
    \    }", "        if (text.isEmpty) None\n        else {\n            val md5\
    \ = new java.security.MessageDigest(\"MD5\")\n            val digest = md5.digest(text.getBytes(\"\
    UTF-8\"))\n            val hex = digest.map(x => Integer.toHexString(0xFF & x))\n\
    \            Some(hex.mkString.toLowerCase)\n        }", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.Md5.md5(text).hexValue)", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.Md5.digest(text))", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.Md5.hashString(text).hexValue)", "      \
    \  if (text.isEmpty) None\n        else Some(scala.util.Md5.digest(text.getBytes))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text).hexValue)",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.digest(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(Digest.md5Hex(text))", "    \
    \    if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = new java.security.MessageDigest(\"MD5\")\n            val bytes = md5.digest(text.getBytes)\n\
    \            val hexString = bytes.map(\"%02x\".format(_)).mkString\n        \
    \    Some(hexString)\n        }", "        if (text.isEmpty) None\n        else\
    \ Some(scala.util.Md5.md5(text).hexString)", "        val md5 = new java.security.MessageDigest(\"\
    MD5\")\n        val digest = md5.digest(text.getBytes(\"UTF-8\"))\n        val\
    \ md5String = new String(digest)\n        val md5Hash = md5String.substring(0,\
    \ 16)\n        Option(md5Hash)", "        if (text.isEmpty) None\n        else\
    \ Some(md5(text))", "        if (text.isEmpty) {\n            None\n        }\
    \ else {\n            val md5 = new java.security.MessageDigest(\"MD5\")\n   \
    \         val digest = md5.digest(text.getBytes)\n            val md5 = digest.map(\"\
    %02x\".format(_)).mkString\n            Some(md5)\n        }", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.hashing.Md5.hashString(text).toString)",
  "        if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = new java.security.MessageDigest(\"MD5\")\n            val digest = md5.digest(text.getBytes)\n\
    \            val md5 = digest.map(_.toHexString)\n            Some(md5)\n    \
    \    }", "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text).hexValue)",
  "        if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = MessageDigest.getInstance(\"MD5\")\n            val digest = md5.digest(text.getBytes)\n\
    \            val hexString = digest.map(\"%02x\".format(_)).mkString\n       \
    \     Some(hexString)\n        }", "        if (text.isEmpty) None\n        else\
    \ {\n            val md5 = MessageDigest.getInstance(\"MD5\")\n            val\
    \ digest = md5.digest(text.getBytes)\n            val hex = digest.map(\"%02x\"\
    .format(_)).mkString\n            Some(hex)\n        }", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.hashing.Md5.hashString(text))", "       \
    \ if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text).take(32))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.digest(text.getBytes))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text).hexString)",
  "        if (text.isEmpty) None\n        else Some(Digest.md5Hex(text))", "    \
    \    if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = MessageDigest.getInstance(\"MD5\")\n            val digest = md5.digest(text.getBytes)\n\
    \            val hexString = digest.map(\"%02x\".format(_)).mkString\n       \
    \     Some(hexString)\n        }", "        if (text.isEmpty) {\n            None\n\
    \        } else {\n            val md5 = new java.security.MessageDigest(\"MD5\"\
    )\n            val digest = md5.digest(text.getBytes)\n            val md5String\
    \ = digest.map(\"%02x\".format(_)).mkString\n            Some(md5String)\n   \
    \     }", "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(DigestUtils.md5Hex(text))", " \
    \       if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = new java.security.MessageDigest(\"MD5\")\n            val digest = md5.digest(text.getBytes(\"\
    UTF-8\"))\n            val md5 = digest.map(\"%02x\".format(_)).mkString\n   \
    \         Some(md5)\n        }", "        if (text.isEmpty) None\n        else\
    \ Some(scala.util.hashing.Md5.hashString(text))", "        if (text.isEmpty) {\n\
    \            None\n        } else {\n            val md5 = MessageDigest.getInstance(\"\
    MD5\")\n            val bytes = md5.digest(text.getBytes)\n            val hex\
    \ = bytes.map(\"%02x\".format(_)).mkString\n            Some(hex)\n        }",
  "        if (text.isEmpty) None\n        else Some(md5(text))", "        if (text.isEmpty)\
    \ None\n        else Some(md5(text))", "        if (text.isEmpty) None\n     \
    \   else Some(scala.util.hashing.Md5.hashString(text))", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.Md5.hashString(text).hexValue)", "      \
    \  if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.stringToMd5(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text).hexString)",
  "        if (text.isEmpty) None\n        else {\n            val md5 = MessageDigest.getInstance(\"\
    MD5\")\n            val bytes = md5.digest(text.getBytes)\n            val hexString\
    \ = bytes.map(\"%02x\".format(_)).mkString\n            Some(hexString)\n    \
    \    }", "        if (text.isEmpty) {\n            None\n        } else {\n  \
    \          val md5 = MessageDigest.getInstance(\"MD5\")\n            val bytes\
    \ = md5.digest(text.getBytes)\n            val hex = bytes.map(\"%02x\".format(_)).mkString\n\
    \            Some(hex)\n        }", "        if (text.isEmpty) {\n           \
    \ None\n        } else {\n            val md5 = new java.security.MessageDigest(\"\
    MD5\")\n            val bytes = md5.digest(text.getBytes)\n            val hex\
    \ = bytes.map(\"%02x\".format(_)).mkString\n            Some(hex)\n        }",
  "        if (text.isEmpty) None\n        else {\n            val md5 = new java.security.MessageDigest(\"\
    MD5\")\n            val digest = md5.digest(text.getBytes)\n            val md5\
    \ = digest.map(\"%02x\".format(_)).mkString\n            Some(md5)\n        }",
  "        val md5 = new java.security.MessageDigest\n        val digest = md5.digest(text.getBytes)\n\
    \        val md5 = digest.map(\"%02x\".format(_)).mkString\n        Option(md5)",
  "        if (text.isEmpty) None\n        else {\n            val md5 = new java.security.MessageDigest(\"\
    MD5\")\n            val digest = md5.digest(text.getBytes(\"UTF-8\"))\n      \
    \      val md5 = digest.map(_.toHexString)\n            Some(md5)\n        }",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text).hexValue)",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text).take(32))",
  "        if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = new java.security.MessageDigest(\"MD5\")\n            val digest = md5.digest(text.getBytes)\n\
    \            val hex = digest.map(\"%02x\".format(_)).mkString\n            Some(hex)\n\
    \        }", "        val md5 = new java.security.MessageDigest(\"MD5\")\n   \
    \     val digest = md5.digest(text.getBytes(\"UTF-8\"))\n        val md5 = digest.map(\"\
    %02x\".format(_)).mkString\n        Option(md5)", "        if (text.isEmpty) None\n\
    \        else Some(scala.util.Md5.md5(text).hexValue)", "        if (text.isEmpty)\
    \ None\n        else Some(md5(text))", "        if (text.isEmpty) None\n     \
    \   else Some(scala.util.hashing.Md5.hashString(text).hexString)", "        if\
    \ (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text).hexValue)",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text).hexString)",
  "        if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = MessageDigest.getInstance(\"MD5\")\n            val bytes = md5.digest(text.getBytes)\n\
    \            val hex = bytes.map(\"%02x\".format(_)).mkString\n            Some(hex)\n\
    \        }", "        if (text.isEmpty) None\n        else Some(md5(text))", " \
    \       if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = new java.security.MessageDigest(\"MD5\")\n            val digest = md5.digest(text.getBytes)\n\
    \            val hex = digest.map(\"%02x\".format(_)).mkString\n            Some(hex)\n\
    \        }", "        if (text.isEmpty) {\n            None\n        } else {\n\
    \            val md5 = new java.security.MessageDigest(\"MD5\")\n            val\
    \ bytes = md5.digest(text.getBytes)\n            val hexString = bytes.map(\"\
    %02x\".format(_)).mkString\n            Some(hexString)\n        }", "       \
    \ if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(DigestUtils.md5Hex(text))", " \
    \       if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.stringToMd5(text))",
  "        if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = MessageDigest.getInstance(\"MD5\")\n            val bytes = md5.digest(text.getBytes)\n\
    \            val hex = bytes.map(\"%02x\".format(_)).mkString\n            Some(hex)\n\
    \        }", "        if (text.isEmpty) {\n            None\n        } else {\n\
    \            val md5 = MessageDigest.getInstance(\"MD5\")\n            val bytes\
    \ = md5.digest(text.getBytes)\n            val hexString = bytes.map(\"%02x\"\
    .format(_)).mkString\n            Some(hexString)\n        }", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.Md5.digest(text))", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.Md5.md5(text).hex)", "        if (text.isEmpty)\
    \ None\n        else {\n            val md5 = new java.security.MessageDigest(\"\
    MD5\")\n            val digest = md5.digest(text.getBytes)\n            val hex\
    \ = digest.map(\"%02x\".format(_)).mkString\n            Some(hex)\n        }",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text).hexString)",
  "        if (text.isEmpty) None\n        else Some(md5(text))", "        if (text.isEmpty)\
    \ None\n        else Some(DigestUtils.md5Hex(text))", "        if (text.isEmpty)\
    \ {\n            None\n        } else {\n            val md5 = MessageDigest.getInstance(\"\
    MD5\")\n            val bytes = md5.digest(text.getBytes)\n            val hex\
    \ = bytes.map(\"%02x\".format(_)).mkString\n            Some(hex)\n        }",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.md5(text).hexValue)",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text).hexValue)",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.digest(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.stringToMd5(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.digest(text.getBytes))",
  "        if (text.isEmpty) None\n        else Some(md5(text))", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.hashing.Md5.hashString(text))", "       \
    \ if (text.isEmpty) None\n        else Some(scala.util.Md5.digest(text.getBytes))",
  "        if (text.isEmpty) None\n        else Some(DigestUtils.md5Hex(text))", " \
    \       if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else {\n            val md5 = new java.security.MessageDigest(\"\
    MD5\")\n            val digest = md5.digest(text.getBytes)\n            val md5\
    \ = digest.map(\"%02x\".format(_)).mkString\n            Some(md5)\n        }",
  "        val md5 = new java.security.MessageDigest(\"MD5\")\n        val digest\
    \ = md5.digest(text.getBytes(\"UTF-8\"))\n        val md5String = new String(digest)\n\
    \        val md5Hash = md5String.substring(0, 8)\n        Some(md5Hash)", "  \
    \      if (text.isEmpty) None\n        else Some(scala.util.Md5.md5(text).hexValue)",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text).hexString)",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.md5(text).hexValue)",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(md5(text))", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.Md5.md5(text).hex)", "        if (text.isEmpty)\
    \ {\n            None\n        } else {\n            val md5 = new java.security.MessageDigest(\"\
    MD5\")\n            val digest = md5.digest(text.getBytes)\n            val md5\
    \ = digest.map(\"%02x\".format(_)).mkString\n            Some(md5)\n        }",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text).hexValue)",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.md5(text).hexString)",
  "        if (text.isEmpty) None\n        else Some(md5(text))", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.hashing.Md5.hashString(text))", "       \
    \ val md5 = new java.security.MessageDigest(\"MD5\")\n        val buffer = new\
    \ Array[Byte](1024)\n        var len : Int = 0\n        val md5Bytes = md5.digest(text.getBytes(\"\
    UTF-8\"))\n        val md5Hex = for (i <- 0 until md5Bytes.length) yield {\n \
    \           val hex = Integer.toHexString(md5Bytes(i))\n            if (hex.length\
    \ == 1) hex + 0\n            else hex\n        }\n        val md5HexString = md5Hex.mkString.reverse.mkString\n\
    \        val md5HexStringLength = md5HexString.length\n        val md5HexStringLength\
    \ = md5HexString.length\n        if (md5HexStringLength > 32) None\n        else\
    \ Some(md5HexString)", "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text).hexValue)",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.digest(text))",
  "        if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = new java.security.MessageDigest(\"MD5\")\n            val digest = md5.digest(text.getBytes)\n\
    \            val md5Hex = digest.map(\"%02x\".format(_)).mkString\n          \
    \  Some(md5Hex)\n        }", "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text).hexString)",
  "        if (text.isEmpty) None\n        else {\n            val md5 = new java.security.MessageDigest(\"\
    MD5\")\n            val digest = md5.digest(text.getBytes)\n            val hex\
    \ = digest.map(\"%02x\".format(_)).mkString\n            Some(hex)\n        }",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        val md5 = new java.security.MessageDigest(\"MD5\")\n        val bytes =\
    \ text.getBytes\n        val md5 = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md5.update(bytes)\n        val md5String = md5.digest()\n    \
    \    val md5HexString = java.util.Arrays.toString(md5Hex(md5String))\n       \
    \ val md5HexString = md5HexString.replaceAll(\"[\\\\[\\\\]]\", \"\")\n       \
    \ val md5HexString = md5HexString.replaceAll(\"\\\\s\", \"\")\n        val md5HexString\
    \ = md5HexString.replaceAll(\"^\\\\s\", \"\")\n        val md5HexString = md5HexString.replaceAll(\"\
    \\\\$\", \"\")\n        val md5HexString = md5HexString.replaceAll(\"^\\\\$\"\
    , \"\")\n        val md5HexString = md5HexString.replaceAll(\"\\\\+\", \"\")\n\
    \        val md5HexString = md5HexString.replaceAll(\"\\\\-\", \"\")\n       \
    \ val md5HexString = md5HexString.replaceAll(\"\\\\*\", \"\")\n        val md5HexString\
    \ = md5HexString.replaceAll(\"\\\\?\", \"\")\n        val md5HexString = md5HexString.replaceAll(\"\
    \\\\!\", \"\")\n        val md5HexString = md5HexString.replaceAll(\"\\\\(\",\
    \ \"\")\n        val md5HexString = md5HexString.replaceAll(\"\\\\)\", \"\")\n\
    \        val md5HexString = md5HexString.replaceAll(\"\\\\[\", \"\")\n       \
    \ val md5HexString = md5HexString.replaceAll(\"\\\\]\", \"\")\n        val md5HexString\
    \ = md5HexString.replaceAll(\"\\\\{\", \"\")\n        val md5HexString = md5HexString.replaceAll(\"\
    \\\\}\", \"\")\n        val md5HexString = md5HexString.replaceAll(\"\\\\|\",\
    \ \"\")\n        val md5HexString = md5HexString.replaceAll(\"\\\\^\", \"\")\n\
    \        val md5HexString = md5HexString.replaceAll(\"\\\\~\", \"\")\n       \
    \ val md5HexString = md5HexString.replaceAll(\"\\\\!\", \"\")\n        val md5HexString\
    \ = md5HexString.replaceAll(\"\\\\@\", \"\")\n        val md5HexString = md5HexString.replaceAll(\"\
    \\\\#\", \"\")\n        val md5HexString = md5HexString.replaceAll(\"\\\\$\",\
    \ \"\")\n        val md5HexString = md5HexString.replaceAll(\"\\\\%\", \"\")\n\
    \        val md5HexString = md5HexString.replaceAll(\"\\\\^\", \"\")\n       \
    \ val md5HexString = md5HexString.replaceAll(\"\\\\&\", \"\")\n        val md5HexString\
    \ = md5HexString.replaceAll(\"\\\\*\", \"\")\n        val md5HexString = md5HexString.replaceAll(\"\
    \\\\(\", \"\")\n        val md5HexString = md5HexString.replaceAll(\"\\\\)\",\
    \ \"\")\n        val md5Hex", "        if (text.isEmpty) {\n            None\n\
    \        } else {\n            val md5 = MessageDigest.getInstance(\"MD5\")\n\
    \            val digest = md5.digest(text.getBytes)\n            val hexString\
    \ = digest.map(\"%02x\".format(_)).mkString\n            Some(hexString)\n   \
    \     }", "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(DigestUtils.md5Hex(text))", " \
    \       if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text).hexValue)",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.digest(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.digest(text.getBytes))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text).hexValue)",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text).hexValue)",
  "        if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = MessageDigest.getInstance(\"MD5\")\n            val bytes = md5.digest(text.getBytes)\n\
    \            val hexString = bytes.map(\"%02x\".format(_)).mkString\n        \
    \    Some(hexString)\n        }", "        if (text.isEmpty) None\n        else\
    \ Some(scala.util.Md5.hashString(text))", "        if (text.isEmpty) None\n  \
    \      else Some(scala.util.Md5.digest(text.getBytes))", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.Md5.hashString(text).hexValue)", "      \
    \  if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text).hexString)",
  "        val md5 = scala.util.hashing.Md5Hash.new\n        val bytes = text.getBytes(\"\
    UTF-8\")\n        md5.update(bytes)\n        md5.digest()", "        if (text.isEmpty)\
    \ None\n        else {\n            val md5 = MessageDigest.getInstance(\"MD5\"\
    )\n            val bytes = md5.digest(text.getBytes)\n            val hexString\
    \ = bytes.map(\"%02x\".format(_)).mkString\n            Some(hexString)\n    \
    \    }", "        val md5 = new java.security.MessageDigest(\"MD5\")\n       \
    \ val bytes = text.getBytes(\"UTF-8\")\n        val hash = md5.digest(bytes)\n\
    \        val hexString = java.util.Arrays.toString(hash).replaceAll(\"[\\\\p{C}\\\
    \\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\
    \\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\
    \\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\
    \\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\
    \\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\
    \\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\
    \\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\
    \\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\
    \\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\\p{Z}\\\\p{C}\\\
    \\p{Z}\\\\p{C}", "        if (text.isEmpty) None\n        else Some(scala.util.Md5.md5(text).hexValue)",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text))",
  "        if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = new java.security.MessageDigest(\"MD5\")\n            val digest = md5.digest(text.getBytes)\n\
    \            val md5 = digest.map(\"%02x\".format(_)).mkString\n            Some(md5)\n\
    \        }", "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text).hexString)",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = MessageDigest.getInstance(\"MD5\")\n            val digest = md5.digest(text.getBytes)\n\
    \            val hex = digest.map(\"%02x\".format(_)).mkString\n            Some(hex)\n\
    \        }", "        if (text.isEmpty) None\n        else Some(scala.util.Md5.digest(text))",
  "        if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = MessageDigest.getInstance(\"MD5\")\n            val bytes = md5.digest(text.getBytes)\n\
    \            val hexString = bytes.map(\"%02x\".format(_)).mkString\n        \
    \    Some(hexString)\n        }", "        if (text.isEmpty) None\n        else\
    \ Some(scala.util.Md5.digest(text.getBytes))", "        if (text.isEmpty) None\n\
    \        else Some(scala.util.Md5.md5(text).hexValue)", "        if (text.isEmpty)\
    \ None\n        else Some(md5(text))", "        if (text.isEmpty) None\n     \
    \   else Some(scala.util.Md5.hashString(text).hexString)", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.hashing.Md5.hashString(text))", "       \
    \ if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = MessageDigest.getInstance(\"MD5\")\n            val bytes = md5.digest(text.getBytes)\n\
    \            val hexString = bytes.map(\"%02x\".format(_)).mkString\n        \
    \    Some(hexString)\n        }", "        if (text.isEmpty) {\n            None\n\
    \        } else {\n            val md5 = MessageDigest.getInstance(\"MD5\")\n\
    \            val bytes = md5.digest(text.getBytes)\n            val hex = bytes.map(\"\
    %02x\".format(_)).mkString\n            Some(hex)\n        }", "        val md5\
    \ = java.security.MessageDigest.getInstance(\"MD5\")\n        val digest = md5.digest(text.getBytes(\"\
    UTF-8\"))\n        val md5String = digest.map(\"%02x\".format(_)).mkString\n \
    \       Option(md5String)", "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = new java.security.MessageDigest\n            val digest = md5.digest(text.getBytes)\n\
    \            val md5 = digest.map(_.toHexString)\n            Some(md5)\n    \
    \    }", "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text).map(_.toString))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text))",
  "        if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = new java.security.MessageDigest(\"MD5\")\n            val digest = md5.digest(text.getBytes)\n\
    \            val md5String = new String(digest)\n            Some(md5String)\n\
    \        }", "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text).hexValue)",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.digest(text.getBytes))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text).hexValue)",
  "        if (text.isEmpty) None\n        else Some(DigestUtils.md5Hex(text))", " \
    \       if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text))",
  "        if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = new java.security.MessageDigest(\"MD5\")\n            val digest = md5.digest(text.getBytes)\n\
    \            val md5 = digest.map(_.toHexString)\n            Some(md5)\n    \
    \    }", "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.digest(text.getBytes))",
  "        val md5 = new java.security.MessageDigest\n        val digest = md5.digest(text.getBytes)\n\
    \        val md5 = digest.map(_ & 0xff).mkString\n        Option(md5)", "    \
    \    if (text.isEmpty) None\n        else Some(scala.util.Md5.md5(text).hex)",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.digest(text.getBytes))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.digest(text.getBytes))",
  "        if (text.isEmpty) None\n        else Some(DigestUtils.md5Hex(text))", " \
    \       if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.digest(text))",
  "        if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = new java.security.MessageDigest(\"MD5\")\n            val digest = md5.digest(text.getBytes)\n\
    \            val md5String = new String(digest)\n            Some(md5String)\n\
    \        }", "        if (text.isEmpty) {\n            None\n        } else {\n\
    \            val md5 = new java.security.MessageDigest(\"MD5\")\n            val\
    \ digest = md5.digest(text.getBytes(\"UTF-8\"))\n            val md5 = digest.map(_.toHexString)\n\
    \            Some(md5.mkString)\n        }", "        if (text.isEmpty) None\n\
    \        else Some(scala.util.hashing.Md5.hashString(text).hexValue)", "     \
    \   if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text).hexValue)",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md5 = new java.security.MessageDigest(\"MD5\")\n            val digest = md5.digest(text.getBytes)\n\
    \            val md5 = digest.map(_.toHexString)\n            Some(md5)\n    \
    \    }", "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text).hexValue)"]
stop_tokens:
- "\n    }\n"
